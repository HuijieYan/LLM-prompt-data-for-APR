{
    "pandas:70": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_70/pandas/core/groupby/groupby.py": {
            "buggy_functions": [
                {
                    "function_name": "_try_cast",
                    "function_code": "def _try_cast(self, result, obj, numeric_only: bool = False):\n    \"\"\"\n    Try to cast the result to our obj original type,\n    we may have roundtripped through object in the mean-time.\n\n    If numeric_only is True, then only try to cast numerics\n    and not datetimelikes.\n\n    \"\"\"\n    if obj.ndim > 1:\n        dtype = obj._values.dtype\n    else:\n        dtype = obj.dtype\n\n    if not is_scalar(result):\n        if is_extension_array_dtype(dtype) and dtype.kind != \"M\":\n            # The function can return something of any type, so check\n            #  if the type is compatible with the calling EA.\n            # datetime64tz is handled correctly in agg_series,\n            #  so is excluded here.\n\n            # return the same type (Series) as our caller\n            cls = dtype.construct_array_type()\n            result = try_cast_to_ea(cls, result, dtype=dtype)\n        elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n            result = maybe_downcast_to_dtype(result, dtype)\n\n    return result\n",
                    "decorators": [],
                    "docstring": "Try to cast the result to our obj original type,\nwe may have roundtripped through object in the mean-time.\n\nIf numeric_only is True, then only try to cast numerics\nand not datetimelikes.",
                    "start_line": 795,
                    "variables": {
                        "bool": [
                            795
                        ],
                        "obj.ndim": [
                            804
                        ],
                        "obj": [
                            804,
                            805,
                            807
                        ],
                        "dtype": [
                            805,
                            807,
                            810,
                            817,
                            818,
                            819,
                            820
                        ],
                        "obj._values.dtype": [
                            805
                        ],
                        "obj._values": [
                            805
                        ],
                        "obj.dtype": [
                            807
                        ],
                        "is_scalar": [
                            809
                        ],
                        "result": [
                            809,
                            818,
                            820,
                            822
                        ],
                        "is_extension_array_dtype": [
                            810
                        ],
                        "dtype.kind": [
                            810
                        ],
                        "cls": [
                            817,
                            818
                        ],
                        "dtype.construct_array_type": [
                            817
                        ],
                        "try_cast_to_ea": [
                            818
                        ],
                        "numeric_only": [
                            819
                        ],
                        "is_numeric_dtype": [
                            819
                        ],
                        "maybe_downcast_to_dtype": [
                            820
                        ]
                    },
                    "filtered_variables": {
                        "obj.ndim": [
                            804
                        ],
                        "obj": [
                            804,
                            805,
                            807
                        ],
                        "dtype": [
                            805,
                            807,
                            810,
                            817,
                            818,
                            819,
                            820
                        ],
                        "obj._values.dtype": [
                            805
                        ],
                        "obj._values": [
                            805
                        ],
                        "obj.dtype": [
                            807
                        ],
                        "is_scalar": [
                            809
                        ],
                        "result": [
                            809,
                            818,
                            820,
                            822
                        ],
                        "is_extension_array_dtype": [
                            810
                        ],
                        "dtype.kind": [
                            810
                        ],
                        "cls": [
                            817,
                            818
                        ],
                        "dtype.construct_array_type": [
                            817
                        ],
                        "try_cast_to_ea": [
                            818
                        ],
                        "numeric_only": [
                            819
                        ],
                        "is_numeric_dtype": [
                            819
                        ],
                        "maybe_downcast_to_dtype": [
                            820
                        ]
                    },
                    "diff_line_number": 816,
                    "class_data": {
                        "signature": "class _GroupBy(PandasObject, SelectionMixin)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, obj: NDFrame, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False):\n    self._selection = selection\n    assert isinstance(obj, NDFrame), type(obj)\n    obj._consolidate_inplace()\n    self.level = level\n    if not as_index:\n        if not isinstance(obj, DataFrame):\n            raise TypeError('as_index=False only valid with DataFrame')\n        if axis != 0:\n            raise ValueError('as_index=False only valid for axis=0')\n    self.as_index = as_index\n    self.keys = keys\n    self.sort = sort\n    self.group_keys = group_keys\n    self.squeeze = squeeze\n    self.observed = observed\n    self.mutated = mutated\n    if grouper is None:\n        from pandas.core.groupby.grouper import get_grouper\n        grouper, exclusions, obj = get_grouper(obj, keys, axis=axis, level=level, sort=sort, observed=observed, mutated=self.mutated)\n    self.obj = obj\n    self.axis = obj._get_axis_number(axis)\n    self.grouper = grouper\n    self.exclusions = set(exclusions) if exclusions else set()",
                            "def __len__(self) -> int:\n    return len(self.groups)",
                            "def __repr__(self) -> str:\n    return object.__repr__(self)",
                            "def _assure_grouper(self):\n    \"\"\"\n    We create the grouper on instantiation sub-classes may have a\n    different policy.\n    \"\"\"\n    pass",
                            "@property\ndef groups(self):\n    \"\"\"\n    Dict {group name -> group labels}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.groups",
                            "@property\ndef ngroups(self):\n    self._assure_grouper()\n    return self.grouper.ngroups",
                            "@property\ndef indices(self):\n    \"\"\"\n    Dict {group name -> group indices}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.indices",
                            "def _get_indices(self, names):\n    \"\"\"\n    Safe get multiple indices, translate keys for\n    datelike to underlying repr.\n    \"\"\"\n\n    def get_converter(s):\n        if isinstance(s, datetime.datetime):\n            return lambda key: Timestamp(key)\n        elif isinstance(s, np.datetime64):\n            return lambda key: Timestamp(key).asm8\n        else:\n            return lambda key: key\n    if len(names) == 0:\n        return []\n    if len(self.indices) > 0:\n        index_sample = next(iter(self.indices))\n    else:\n        index_sample = None\n    name_sample = names[0]\n    if isinstance(index_sample, tuple):\n        if not isinstance(name_sample, tuple):\n            msg = 'must supply a tuple to get_group with multiple grouping keys'\n            raise ValueError(msg)\n        if not len(name_sample) == len(index_sample):\n            try:\n                return [self.indices[name] for name in names]\n            except KeyError:\n                msg = 'must supply a same-length tuple to get_group with multiple grouping keys'\n                raise ValueError(msg)\n        converters = [get_converter(s) for s in index_sample]\n        names = (tuple((f(n) for f, n in zip(converters, name))) for name in names)\n    else:\n        converter = get_converter(index_sample)\n        names = (converter(name) for name in names)\n    return [self.indices.get(name, []) for name in names]",
                            "def _get_index(self, name):\n    \"\"\"\n    Safe get index, translate keys for datelike to underlying repr.\n    \"\"\"\n    return self._get_indices([name])[0]",
                            "@cache_readonly\ndef _selected_obj(self):\n    if self._selection is None or isinstance(self.obj, Series):\n        if self._group_selection is not None:\n            return self.obj[self._group_selection]\n        return self.obj\n    else:\n        return self.obj[self._selection]",
                            "def _reset_group_selection(self):\n    \"\"\"\n    Clear group based selection.\n\n    Used for methods needing to return info on each group regardless of\n    whether a group selection was previously set.\n    \"\"\"\n    if self._group_selection is not None:\n        self._group_selection = None\n        self._reset_cache('_selected_obj')",
                            "def _set_group_selection(self):\n    \"\"\"\n    Create group based selection.\n\n    Used when selection is not passed directly but instead via a grouper.\n\n    NOTE: this should be paired with a call to _reset_group_selection\n    \"\"\"\n    grp = self.grouper\n    if not (self.as_index and getattr(grp, 'groupings', None) is not None and (self.obj.ndim > 1) and (self._group_selection is None)):\n        return\n    ax = self.obj._info_axis\n    groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n    if len(groupers):\n        self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n        self._reset_cache('_selected_obj')",
                            "def _set_result_index_ordered(self, result):\n    if not self.grouper.is_monotonic:\n        index = Index(np.concatenate(self._get_indices(self.grouper.result_index)))\n        result.set_axis(index, axis=self.axis, inplace=True)\n        result = result.sort_index(axis=self.axis)\n    result.set_axis(self.obj._get_axis(self.axis), axis=self.axis, inplace=True)\n    return result",
                            "def _dir_additions(self):\n    return self.obj._dir_additions() | self._apply_whitelist",
                            "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n    raise AttributeError(f\"'{type(self).__name__}' object has no attribute '{attr}'\")",
                            "@Substitution(klass='GroupBy', versionadded='.. versionadded:: 0.21.0', examples=\">>> df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]})\\n>>> df\\n   A  B\\n0  a  1\\n1  b  2\\n2  a  3\\n3  b  4\\n\\nTo get the difference between each groups maximum and minimum value in one\\npass, you can do\\n\\n>>> df.groupby('A').pipe(lambda x: x.max() - x.min())\\n   B\\nA\\na  2\\nb  2\")\n@Appender(_pipe_template)\ndef pipe(self, func, *args, **kwargs):\n    return com.pipe(self, func, *args, **kwargs)",
                            "def _make_wrapper(self, name):\n    assert name in self._apply_whitelist\n    self._set_group_selection()\n    f = getattr(self._selected_obj, name)\n    if not isinstance(f, types.MethodType):\n        return self.apply(lambda self: getattr(self, name))\n    f = getattr(type(self._selected_obj), name)\n    sig = inspect.signature(f)\n\n    def wrapper(*args, **kwargs):\n        if 'axis' in sig.parameters:\n            if kwargs.get('axis', None) is None:\n                kwargs['axis'] = self.axis\n\n        def curried(x):\n            return f(x, *args, **kwargs)\n        curried.__name__ = name\n        if name in base.plotting_methods:\n            return self.apply(curried)\n        try:\n            return self.apply(curried)\n        except TypeError as err:\n            if not re.search(\"reduction operation '.*' not allowed for this dtype\", str(err)):\n                raise\n        if self.obj.ndim == 1:\n            raise ValueError\n        result = self._aggregate_item_by_item(name, *args, **kwargs)\n        return result\n    wrapper.__name__ = name\n    return wrapper",
                            "def get_group(self, name, obj=None):\n    \"\"\"\n    Construct DataFrame from group with provided name.\n\n    Parameters\n    ----------\n    name : object\n        The name of the group to get as a DataFrame.\n    obj : DataFrame, default None\n        The DataFrame to take the DataFrame out of.  If\n        it is None, the object groupby was called on will\n        be used.\n\n    Returns\n    -------\n    group : same type as obj\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n    inds = self._get_index(name)\n    if not len(inds):\n        raise KeyError(name)\n    return obj._take_with_is_copy(inds, axis=self.axis)",
                            "def __iter__(self):\n    \"\"\"\n    Groupby iterator.\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    return self.grouper.get_iterator(self.obj, axis=self.axis)",
                            "@Appender(_apply_docs['template'].format(input='dataframe', examples=_apply_docs['dataframe_examples']))\ndef apply(self, func, *args, **kwargs):\n    func = self._is_builtin_func(func)\n    if args or kwargs:\n        if callable(func):\n\n            @wraps(func)\n            def f(g):\n                with np.errstate(all='ignore'):\n                    return func(g, *args, **kwargs)\n        elif hasattr(nanops, 'nan' + func):\n            f = getattr(nanops, 'nan' + func)\n        else:\n            raise ValueError('func must be a callable if args or kwargs are supplied')\n    else:\n        f = func\n    with option_context('mode.chained_assignment', None):\n        try:\n            result = self._python_apply_general(f)\n        except TypeError:\n            with _group_selection_context(self):\n                return self._python_apply_general(f)\n    return result",
                            "def _python_apply_general(self, f):\n    keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)\n    return self._wrap_applied_output(keys, values, not_indexed_same=mutated or self.mutated)",
                            "def _iterate_slices(self) -> Iterable[Series]:\n    raise AbstractMethodError(self)",
                            "def transform(self, func, *args, **kwargs):\n    raise AbstractMethodError(self)",
                            "def _cumcount_array(self, ascending: bool=True):\n    \"\"\"\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Notes\n    -----\n    this is currently implementing sort=False\n    (though the default is sort=True) for groupby in general\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    sorter = get_group_index_sorter(ids, ngroups)\n    ids, count = (ids[sorter], len(ids))\n    if count == 0:\n        return np.empty(0, dtype=np.int64)\n    run = np.r_[True, ids[:-1] != ids[1:]]\n    rep = np.diff(np.r_[np.nonzero(run)[0], count])\n    out = (~run).cumsum()\n    if ascending:\n        out -= np.repeat(out[run], rep)\n    else:\n        out = np.repeat(out[np.r_[run[1:], True]], rep) - out\n    rev = np.empty(count, dtype=np.intp)\n    rev[sorter] = np.arange(count, dtype=np.intp)\n    return out[rev].astype(np.int64, copy=False)",
                            "def _try_cast(self, result, obj, numeric_only: bool=False):\n    \"\"\"\n    Try to cast the result to our obj original type,\n    we may have roundtripped through object in the mean-time.\n\n    If numeric_only is True, then only try to cast numerics\n    and not datetimelikes.\n\n    \"\"\"\n    if obj.ndim > 1:\n        dtype = obj._values.dtype\n    else:\n        dtype = obj.dtype\n    if not is_scalar(result):\n        if is_extension_array_dtype(dtype) and dtype.kind != 'M':\n            cls = dtype.construct_array_type()\n            result = try_cast_to_ea(cls, result, dtype=dtype)\n        elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n            result = maybe_downcast_to_dtype(result, dtype)\n    return result",
                            "def _transform_should_cast(self, func_nm: str) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    func_nm: str\n        The name of the aggregation function being performed\n\n    Returns\n    -------\n    bool\n        Whether transform should attempt to cast the result of aggregation\n    \"\"\"\n    return (self.size().fillna(0) > 0).any() and func_nm not in base.cython_cast_blacklist",
                            "def _cython_transform(self, how: str, numeric_only: bool=True, **kwargs):\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and (not is_numeric):\n            continue\n        try:\n            result, _ = self.grouper.transform(obj.values, how, **kwargs)\n        except NotImplementedError:\n            continue\n        if self._transform_should_cast(how):\n            result = self._try_cast(result, obj)\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n    if len(output) == 0:\n        raise DataError('No numeric types to aggregate')\n    return self._wrap_transformed_output(output)",
                            "def _wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                            "def _wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                            "def _wrap_applied_output(self, keys, values, not_indexed_same: bool=False):\n    raise AbstractMethodError(self)",
                            "def _cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1):\n    output: Dict[base.OutputKey, Union[np.ndarray, DatetimeArray]] = {}\n    idx = 0\n    for obj in self._iterate_slices():\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and (not is_numeric):\n            continue\n        result, agg_names = self.grouper.aggregate(obj._values, how, min_count=min_count)\n        if agg_names:\n            assert len(agg_names) == result.shape[1]\n            for result_column, result_name in zip(result.T, agg_names):\n                key = base.OutputKey(label=result_name, position=idx)\n                output[key] = self._try_cast(result_column, obj)\n                idx += 1\n        else:\n            assert result.ndim == 1\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = self._try_cast(result, obj)\n            idx += 1\n    if len(output) == 0:\n        raise DataError('No numeric types to aggregate')\n    return self._wrap_aggregated_output(output)",
                            "def _python_agg_general(self, func, *args, **kwargs):\n    func = self._is_builtin_func(func)\n    f = lambda x: func(x, *args, **kwargs)\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        if self.grouper.ngroups == 0:\n            continue\n        try:\n            func(obj[:0])\n        except TypeError:\n            continue\n        except AssertionError:\n            raise\n        except Exception:\n            pass\n        result, counts = self.grouper.agg_series(obj, f)\n        assert result is not None\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = self._try_cast(result, obj, numeric_only=True)\n    if len(output) == 0:\n        return self._python_apply_general(f)\n    if self.grouper._filter_empty_groups:\n        mask = counts.ravel() > 0\n        for key, result in output.items():\n            values = result\n            if is_numeric_dtype(values.dtype):\n                values = ensure_float(values)\n            output[key] = self._try_cast(values[mask], result)\n    return self._wrap_aggregated_output(output)",
                            "def _concat_objects(self, keys, values, not_indexed_same: bool=False):\n    from pandas.core.reshape.concat import concat\n\n    def reset_identity(values):\n        for v in com.not_none(*values):\n            ax = v._get_axis(self.axis)\n            ax._reset_identity()\n        return values\n    if not not_indexed_same:\n        result = concat(values, axis=self.axis)\n        ax = self._selected_obj._get_axis(self.axis)\n        if ax.has_duplicates:\n            indexer, _ = result.index.get_indexer_non_unique(ax.values)\n            indexer = algorithms.unique1d(indexer)\n            result = result.take(indexer, axis=self.axis)\n        else:\n            result = result.reindex(ax, axis=self.axis)\n    elif self.group_keys:\n        values = reset_identity(values)\n        if self.as_index:\n            group_keys = keys\n            group_levels = self.grouper.levels\n            group_names = self.grouper.names\n            result = concat(values, axis=self.axis, keys=group_keys, levels=group_levels, names=group_names, sort=False)\n        else:\n            keys = list(range(len(values)))\n            result = concat(values, axis=self.axis, keys=keys)\n    else:\n        values = reset_identity(values)\n        result = concat(values, axis=self.axis)\n    if isinstance(result, Series) and self._selection_name is not None:\n        result.name = self._selection_name\n    return result",
                            "def _apply_filter(self, indices, dropna):\n    if len(indices) == 0:\n        indices = np.array([], dtype='int64')\n    else:\n        indices = np.sort(np.concatenate(indices))\n    if dropna:\n        filtered = self._selected_obj.take(indices, axis=self.axis)\n    else:\n        mask = np.empty(len(self._selected_obj.index), dtype=bool)\n        mask.fill(False)\n        mask[indices.astype(int)] = True\n        mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T\n        filtered = self._selected_obj.where(mask)\n    return filtered",
                            "def get_converter(s):\n    if isinstance(s, datetime.datetime):\n        return lambda key: Timestamp(key)\n    elif isinstance(s, np.datetime64):\n        return lambda key: Timestamp(key).asm8\n    else:\n        return lambda key: key",
                            "def wrapper(*args, **kwargs):\n    if 'axis' in sig.parameters:\n        if kwargs.get('axis', None) is None:\n            kwargs['axis'] = self.axis\n\n    def curried(x):\n        return f(x, *args, **kwargs)\n    curried.__name__ = name\n    if name in base.plotting_methods:\n        return self.apply(curried)\n    try:\n        return self.apply(curried)\n    except TypeError as err:\n        if not re.search(\"reduction operation '.*' not allowed for this dtype\", str(err)):\n            raise\n    if self.obj.ndim == 1:\n        raise ValueError\n    result = self._aggregate_item_by_item(name, *args, **kwargs)\n    return result",
                            "def reset_identity(values):\n    for v in com.not_none(*values):\n        ax = v._get_axis(self.axis)\n        ax._reset_identity()\n    return values",
                            "def curried(x):\n    return f(x, *args, **kwargs)",
                            "@wraps(func)\ndef f(g):\n    with np.errstate(all='ignore'):\n        return func(g, *args, **kwargs)"
                        ],
                        "constructor_variables": [
                            "as_index",
                            "group_keys",
                            "grouper",
                            "sort",
                            "_selection",
                            "squeeze",
                            "level",
                            "mutated",
                            "keys",
                            "observed",
                            "obj",
                            "axis",
                            "exclusions"
                        ],
                        "class_level_variables": [
                            "_group_selection",
                            "_apply_whitelist",
                            "plot"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, obj: NDFrame, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False)",
                            "__len__(self) -> int",
                            "__repr__(self) -> str",
                            "_assure_grouper(self)",
                            "groups(self)",
                            "ngroups(self)",
                            "indices(self)",
                            "_get_indices(self, names)",
                            "_get_index(self, name)",
                            "_selected_obj(self)",
                            "_reset_group_selection(self)",
                            "_set_group_selection(self)",
                            "_set_result_index_ordered(self, result)",
                            "_dir_additions(self)",
                            "__getattr__(self, attr: str)",
                            "pipe(self, func, *args, **kwargs)",
                            "_make_wrapper(self, name)",
                            "get_group(self, name, obj=None)",
                            "__iter__(self)",
                            "apply(self, func, *args, **kwargs)",
                            "_python_apply_general(self, f)",
                            "_iterate_slices(self) -> Iterable[Series]",
                            "transform(self, func, *args, **kwargs)",
                            "_cumcount_array(self, ascending: bool=True)",
                            "_try_cast(self, result, obj, numeric_only: bool=False)",
                            "_transform_should_cast(self, func_nm: str) -> bool",
                            "_cython_transform(self, how: str, numeric_only: bool=True, **kwargs)",
                            "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                            "_wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                            "_wrap_applied_output(self, keys, values, not_indexed_same: bool=False)",
                            "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
                            "_python_agg_general(self, func, *args, **kwargs)",
                            "_concat_objects(self, keys, values, not_indexed_same: bool=False)",
                            "_apply_filter(self, indices, dropna)",
                            "get_converter(s)",
                            "wrapper(*args, **kwargs)",
                            "reset_identity(values)",
                            "curried(x)",
                            "f(g)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([1, 1, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[1, 1, NaN]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "'O'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10cc629a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method CategoricalDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.CategoricalDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([1, 2, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[1, NaN, NaN]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "'O'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.arrays.categorical.Categorical'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10cc629a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method CategoricalDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.CategoricalDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([1, 1, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([1, 1, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "'O'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "dtype.type": {
                                    "variable_value": "<class 'pandas.core.dtypes.dtypes.CategoricalDtypeType'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method CategoricalDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.CategoricalDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([1, 2, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "obj.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "obj": {
                                    "variable_value": "id\n0    0\n1    0\n2    0\n3    0\n4    1\nName: value, dtype: category\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Series",
                                    "variable_shape": "5"
                                },
                                "dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "obj._values.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "obj._values": {
                                    "variable_value": "[0, 0, 0, 0, 1]\nCategories (2, int64): [0, 1]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "5"
                                },
                                "obj.dtype": {
                                    "variable_value": "CategoricalDtype(categories=[0, 1], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([1, 2, 2])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.kind": {
                                    "variable_value": "'O'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "dtype.type": {
                                    "variable_value": "<class 'pandas.core.dtypes.dtypes.CategoricalDtypeType'>",
                                    "variable_type": "type",
                                    "variable_shape": null
                                },
                                "cls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method CategoricalDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.CategoricalDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "try_cast_to_ea": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "numeric_only": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_numeric_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_downcast_to_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@contextmanager\ndef _group_selection_context(groupby):\n    \"\"\"\n    Set / reset the _group_selection_context.\n    \"\"\"\n    groupby._set_group_selection()\n    yield groupby\n    groupby._reset_group_selection()",
                "@Appender(GroupBy.__doc__)\ndef get_groupby(\n    obj: NDFrame,\n    by: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n) -> GroupBy:\n\n    klass: Type[GroupBy]\n    if isinstance(obj, Series):\n        from pandas.core.groupby.generic import SeriesGroupBy\n\n        klass = SeriesGroupBy\n    elif isinstance(obj, DataFrame):\n        from pandas.core.groupby.generic import DataFrameGroupBy\n\n        klass = DataFrameGroupBy\n    else:\n        raise TypeError(f\"invalid type: {obj}\")\n\n    return klass(\n        obj=obj,\n        keys=by,\n        axis=axis,\n        level=level,\n        grouper=grouper,\n        exclusions=exclusions,\n        selection=selection,\n        as_index=as_index,\n        sort=sort,\n        group_keys=group_keys,\n        squeeze=squeeze,\n        observed=observed,\n        mutated=mutated,\n    )",
                "def __init__(self, groupby):\n    self._groupby = groupby",
                "def __call__(self, *args, **kwargs):\n    def f(self):\n        return self.plot(*args, **kwargs)\n\n    f.__name__ = \"plot\"\n    return self._groupby.apply(f)",
                "def __getattr__(self, name: str):\n    def attr(*args, **kwargs):\n        def f(self):\n            return getattr(self.plot, name)(*args, **kwargs)\n\n        return self._groupby.apply(f)\n\n    return attr",
                "def __init__(\n    self,\n    obj: NDFrame,\n    keys: Optional[_KeysArgType] = None,\n    axis: int = 0,\n    level=None,\n    grouper: \"Optional[ops.BaseGrouper]\" = None,\n    exclusions=None,\n    selection=None,\n    as_index: bool = True,\n    sort: bool = True,\n    group_keys: bool = True,\n    squeeze: bool = False,\n    observed: bool = False,\n    mutated: bool = False,\n):\n\n    self._selection = selection\n\n    assert isinstance(obj, NDFrame), type(obj)\n    obj._consolidate_inplace()\n\n    self.level = level\n\n    if not as_index:\n        if not isinstance(obj, DataFrame):\n            raise TypeError(\"as_index=False only valid with DataFrame\")\n        if axis != 0:\n            raise ValueError(\"as_index=False only valid for axis=0\")\n\n    self.as_index = as_index\n    self.keys = keys\n    self.sort = sort\n    self.group_keys = group_keys\n    self.squeeze = squeeze\n    self.observed = observed\n    self.mutated = mutated\n\n    if grouper is None:\n        from pandas.core.groupby.grouper import get_grouper\n\n        grouper, exclusions, obj = get_grouper(\n            obj,\n            keys,\n            axis=axis,\n            level=level,\n            sort=sort,\n            observed=observed,\n            mutated=self.mutated,\n        )\n\n    self.obj = obj\n    self.axis = obj._get_axis_number(axis)\n    self.grouper = grouper\n    self.exclusions = set(exclusions) if exclusions else set()",
                "def __len__(self) -> int:\n    return len(self.groups)",
                "def __repr__(self) -> str:\n    # TODO: Better repr for GroupBy object\n    return object.__repr__(self)",
                "def _assure_grouper(self):\n    \"\"\"\n    We create the grouper on instantiation sub-classes may have a\n    different policy.\n    \"\"\"\n    pass",
                "@property\ndef groups(self):\n    \"\"\"\n    Dict {group name -> group labels}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.groups",
                "@property\ndef ngroups(self):\n    self._assure_grouper()\n    return self.grouper.ngroups",
                "@property\ndef indices(self):\n    \"\"\"\n    Dict {group name -> group indices}.\n    \"\"\"\n    self._assure_grouper()\n    return self.grouper.indices",
                "def _get_indices(self, names):\n    \"\"\"\n    Safe get multiple indices, translate keys for\n    datelike to underlying repr.\n    \"\"\"\n\n    def get_converter(s):\n        # possibly convert to the actual key types\n        # in the indices, could be a Timestamp or a np.datetime64\n        if isinstance(s, datetime.datetime):\n            return lambda key: Timestamp(key)\n        elif isinstance(s, np.datetime64):\n            return lambda key: Timestamp(key).asm8\n        else:\n            return lambda key: key\n\n    if len(names) == 0:\n        return []\n\n    if len(self.indices) > 0:\n        index_sample = next(iter(self.indices))\n    else:\n        index_sample = None  # Dummy sample\n\n    name_sample = names[0]\n    if isinstance(index_sample, tuple):\n        if not isinstance(name_sample, tuple):\n            msg = \"must supply a tuple to get_group with multiple grouping keys\"\n            raise ValueError(msg)\n        if not len(name_sample) == len(index_sample):\n            try:\n                # If the original grouper was a tuple\n                return [self.indices[name] for name in names]\n            except KeyError:\n                # turns out it wasn't a tuple\n                msg = (\n                    \"must supply a same-length tuple to get_group \"\n                    \"with multiple grouping keys\"\n                )\n                raise ValueError(msg)\n\n        converters = [get_converter(s) for s in index_sample]\n        names = (tuple(f(n) for f, n in zip(converters, name)) for name in names)\n\n    else:\n        converter = get_converter(index_sample)\n        names = (converter(name) for name in names)\n\n    return [self.indices.get(name, []) for name in names]",
                "def _get_index(self, name):\n    \"\"\"\n    Safe get index, translate keys for datelike to underlying repr.\n    \"\"\"\n    return self._get_indices([name])[0]",
                "@cache_readonly\ndef _selected_obj(self):\n    # Note: _selected_obj is always just `self.obj` for SeriesGroupBy\n\n    if self._selection is None or isinstance(self.obj, Series):\n        if self._group_selection is not None:\n            return self.obj[self._group_selection]\n        return self.obj\n    else:\n        return self.obj[self._selection]",
                "def _reset_group_selection(self):\n    \"\"\"\n    Clear group based selection.\n\n    Used for methods needing to return info on each group regardless of\n    whether a group selection was previously set.\n    \"\"\"\n    if self._group_selection is not None:\n        # GH12839 clear cached selection too when changing group selection\n        self._group_selection = None\n        self._reset_cache(\"_selected_obj\")",
                "def _set_group_selection(self):\n    \"\"\"\n    Create group based selection.\n\n    Used when selection is not passed directly but instead via a grouper.\n\n    NOTE: this should be paired with a call to _reset_group_selection\n    \"\"\"\n    grp = self.grouper\n    if not (\n        self.as_index\n        and getattr(grp, \"groupings\", None) is not None\n        and self.obj.ndim > 1\n        and self._group_selection is None\n    ):\n        return\n\n    ax = self.obj._info_axis\n    groupers = [g.name for g in grp.groupings if g.level is None and g.in_axis]\n\n    if len(groupers):\n        # GH12839 clear selected obj cache when group selection changes\n        self._group_selection = ax.difference(Index(groupers), sort=False).tolist()\n        self._reset_cache(\"_selected_obj\")",
                "def _set_result_index_ordered(self, result):\n    # set the result index on the passed values object and\n    # return the new object, xref 8046\n\n    # the values/counts are repeated according to the group index\n    # shortcut if we have an already ordered grouper\n    if not self.grouper.is_monotonic:\n        index = Index(np.concatenate(self._get_indices(self.grouper.result_index)))\n        result.set_axis(index, axis=self.axis, inplace=True)\n        result = result.sort_index(axis=self.axis)\n\n    result.set_axis(self.obj._get_axis(self.axis), axis=self.axis, inplace=True)\n    return result",
                "def _dir_additions(self):\n    return self.obj._dir_additions() | self._apply_whitelist",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    raise AttributeError(\n        f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n    )",
                "    @Substitution(\n        klass=\"GroupBy\",\n        versionadded=\".. versionadded:: 0.21.0\",\n        examples=\"\"\"\\\n>>> df = pd.DataFrame({'A': 'a b a b'.split(), 'B': [1, 2, 3, 4]})\n>>> df\n   A  B\n0  a  1\n1  b  2\n2  a  3\n3  b  4\n\nTo get the difference between each groups maximum and minimum value in one\npass, you can do\n\n>>> df.groupby('A').pipe(lambda x: x.max() - x.min())\n   B\nA\na  2\nb  2\"\"\",\n    )\n    @Appender(_pipe_template)\n    def pipe(self, func, *args, **kwargs):\n        return com.pipe(self, func, *args, **kwargs)",
                "def _make_wrapper(self, name):\n    assert name in self._apply_whitelist\n\n    self._set_group_selection()\n\n    # need to setup the selection\n    # as are not passed directly but in the grouper\n    f = getattr(self._selected_obj, name)\n    if not isinstance(f, types.MethodType):\n        return self.apply(lambda self: getattr(self, name))\n\n    f = getattr(type(self._selected_obj), name)\n    sig = inspect.signature(f)\n\n    def wrapper(*args, **kwargs):\n        # a little trickery for aggregation functions that need an axis\n        # argument\n        if \"axis\" in sig.parameters:\n            if kwargs.get(\"axis\", None) is None:\n                kwargs[\"axis\"] = self.axis\n\n        def curried(x):\n            return f(x, *args, **kwargs)\n\n        # preserve the name so we can detect it when calling plot methods,\n        # to avoid duplicates\n        curried.__name__ = name\n\n        # special case otherwise extra plots are created when catching the\n        # exception below\n        if name in base.plotting_methods:\n            return self.apply(curried)\n\n        try:\n            return self.apply(curried)\n        except TypeError as err:\n            if not re.search(\n                \"reduction operation '.*' not allowed for this dtype\", str(err)\n            ):\n                # We don't have a cython implementation\n                # TODO: is the above comment accurate?\n                raise\n\n        if self.obj.ndim == 1:\n            # this can be called recursively, so need to raise ValueError\n            raise ValueError\n\n        # GH#3688 try to operate item-by-item\n        result = self._aggregate_item_by_item(name, *args, **kwargs)\n        return result\n\n    wrapper.__name__ = name\n    return wrapper",
                "def get_group(self, name, obj=None):\n    \"\"\"\n    Construct DataFrame from group with provided name.\n\n    Parameters\n    ----------\n    name : object\n        The name of the group to get as a DataFrame.\n    obj : DataFrame, default None\n        The DataFrame to take the DataFrame out of.  If\n        it is None, the object groupby was called on will\n        be used.\n\n    Returns\n    -------\n    group : same type as obj\n    \"\"\"\n    if obj is None:\n        obj = self._selected_obj\n\n    inds = self._get_index(name)\n    if not len(inds):\n        raise KeyError(name)\n\n    return obj._take_with_is_copy(inds, axis=self.axis)",
                "def __iter__(self):\n    \"\"\"\n    Groupby iterator.\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    return self.grouper.get_iterator(self.obj, axis=self.axis)",
                "@Appender(\n    _apply_docs[\"template\"].format(\n        input=\"dataframe\", examples=_apply_docs[\"dataframe_examples\"]\n    )\n)\ndef apply(self, func, *args, **kwargs):\n\n    func = self._is_builtin_func(func)\n\n    # this is needed so we don't try and wrap strings. If we could\n    # resolve functions to their callable functions prior, this\n    # wouldn't be needed\n    if args or kwargs:\n        if callable(func):\n\n            @wraps(func)\n            def f(g):\n                with np.errstate(all=\"ignore\"):\n                    return func(g, *args, **kwargs)\n\n        elif hasattr(nanops, \"nan\" + func):\n            # TODO: should we wrap this in to e.g. _is_builtin_func?\n            f = getattr(nanops, \"nan\" + func)\n\n        else:\n            raise ValueError(\n                \"func must be a callable if args or kwargs are supplied\"\n            )\n    else:\n        f = func\n\n    # ignore SettingWithCopy here in case the user mutates\n    with option_context(\"mode.chained_assignment\", None):\n        try:\n            result = self._python_apply_general(f)\n        except TypeError:\n            # gh-20949\n            # try again, with .apply acting as a filtering\n            # operation, by excluding the grouping column\n            # This would normally not be triggered\n            # except if the udf is trying an operation that\n            # fails on *some* columns, e.g. a numeric operation\n            # on a string grouper column\n\n            with _group_selection_context(self):\n                return self._python_apply_general(f)\n\n    return result",
                "def _python_apply_general(self, f):\n    keys, values, mutated = self.grouper.apply(f, self._selected_obj, self.axis)\n\n    return self._wrap_applied_output(\n        keys, values, not_indexed_same=mutated or self.mutated\n    )",
                "def _iterate_slices(self) -> Iterable[Series]:\n    raise AbstractMethodError(self)",
                "def transform(self, func, *args, **kwargs):\n    raise AbstractMethodError(self)",
                "def _cumcount_array(self, ascending: bool = True):\n    \"\"\"\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Notes\n    -----\n    this is currently implementing sort=False\n    (though the default is sort=True) for groupby in general\n    \"\"\"\n    ids, _, ngroups = self.grouper.group_info\n    sorter = get_group_index_sorter(ids, ngroups)\n    ids, count = ids[sorter], len(ids)\n\n    if count == 0:\n        return np.empty(0, dtype=np.int64)\n\n    run = np.r_[True, ids[:-1] != ids[1:]]\n    rep = np.diff(np.r_[np.nonzero(run)[0], count])\n    out = (~run).cumsum()\n\n    if ascending:\n        out -= np.repeat(out[run], rep)\n    else:\n        out = np.repeat(out[np.r_[run[1:], True]], rep) - out\n\n    rev = np.empty(count, dtype=np.intp)\n    rev[sorter] = np.arange(count, dtype=np.intp)\n    return out[rev].astype(np.int64, copy=False)",
                "def _try_cast(self, result, obj, numeric_only: bool = False):\n    \"\"\"\n    Try to cast the result to our obj original type,\n    we may have roundtripped through object in the mean-time.\n\n    If numeric_only is True, then only try to cast numerics\n    and not datetimelikes.\n\n    \"\"\"\n    if obj.ndim > 1:\n        dtype = obj._values.dtype\n    else:\n        dtype = obj.dtype\n\n    if not is_scalar(result):\n        if is_extension_array_dtype(dtype) and dtype.kind != \"M\":\n            # The function can return something of any type, so check\n            #  if the type is compatible with the calling EA.\n            # datetime64tz is handled correctly in agg_series,\n            #  so is excluded here.\n\n            # return the same type (Series) as our caller\n            cls = dtype.construct_array_type()\n            result = try_cast_to_ea(cls, result, dtype=dtype)\n        elif numeric_only and is_numeric_dtype(dtype) or not numeric_only:\n            result = maybe_downcast_to_dtype(result, dtype)\n\n    return result",
                "def _transform_should_cast(self, func_nm: str) -> bool:\n    \"\"\"\n    Parameters\n    ----------\n    func_nm: str\n        The name of the aggregation function being performed\n\n    Returns\n    -------\n    bool\n        Whether transform should attempt to cast the result of aggregation\n    \"\"\"\n    return (self.size().fillna(0) > 0).any() and (\n        func_nm not in base.cython_cast_blacklist\n    )",
                "def _cython_transform(self, how: str, numeric_only: bool = True, **kwargs):\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and not is_numeric:\n            continue\n\n        try:\n            result, _ = self.grouper.transform(obj.values, how, **kwargs)\n        except NotImplementedError:\n            continue\n\n        if self._transform_should_cast(how):\n            result = self._try_cast(result, obj)\n\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n\n    if len(output) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return self._wrap_transformed_output(output)",
                "def _wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                "def _wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray]):\n    raise AbstractMethodError(self)",
                "def _wrap_applied_output(self, keys, values, not_indexed_same: bool = False):\n    raise AbstractMethodError(self)",
                "def _cython_agg_general(\n    self, how: str, alt=None, numeric_only: bool = True, min_count: int = -1\n):\n    output: Dict[base.OutputKey, Union[np.ndarray, DatetimeArray]] = {}\n    # Ideally we would be able to enumerate self._iterate_slices and use\n    # the index from enumeration as the key of output, but ohlc in particular\n    # returns a (n x 4) array. Output requires 1D ndarrays as values, so we\n    # need to slice that up into 1D arrays\n    idx = 0\n    for obj in self._iterate_slices():\n        name = obj.name\n        is_numeric = is_numeric_dtype(obj.dtype)\n        if numeric_only and not is_numeric:\n            continue\n\n        result, agg_names = self.grouper.aggregate(\n            obj._values, how, min_count=min_count\n        )\n\n        if agg_names:\n            # e.g. ohlc\n            assert len(agg_names) == result.shape[1]\n            for result_column, result_name in zip(result.T, agg_names):\n                key = base.OutputKey(label=result_name, position=idx)\n                output[key] = self._try_cast(result_column, obj)\n                idx += 1\n        else:\n            assert result.ndim == 1\n            key = base.OutputKey(label=name, position=idx)\n            output[key] = self._try_cast(result, obj)\n            idx += 1\n\n    if len(output) == 0:\n        raise DataError(\"No numeric types to aggregate\")\n\n    return self._wrap_aggregated_output(output)",
                "def _python_agg_general(self, func, *args, **kwargs):\n    func = self._is_builtin_func(func)\n    f = lambda x: func(x, *args, **kwargs)\n\n    # iterate through \"columns\" ex exclusions to populate output dict\n    output: Dict[base.OutputKey, np.ndarray] = {}\n\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        if self.grouper.ngroups == 0:\n            # agg_series below assumes ngroups > 0\n            continue\n\n        try:\n            # if this function is invalid for this dtype, we will ignore it.\n            func(obj[:0])\n        except TypeError:\n            continue\n        except AssertionError:\n            raise\n        except Exception:\n            # Our function depends on having a non-empty argument\n            #  See test_groupby_agg_err_catching\n            pass\n\n        result, counts = self.grouper.agg_series(obj, f)\n        assert result is not None\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = self._try_cast(result, obj, numeric_only=True)\n\n    if len(output) == 0:\n        return self._python_apply_general(f)\n\n    if self.grouper._filter_empty_groups:\n\n        mask = counts.ravel() > 0\n        for key, result in output.items():\n\n            # since we are masking, make sure that we have a float object\n            values = result\n            if is_numeric_dtype(values.dtype):\n                values = ensure_float(values)\n\n            output[key] = self._try_cast(values[mask], result)\n\n    return self._wrap_aggregated_output(output)",
                "def _concat_objects(self, keys, values, not_indexed_same: bool = False):\n    from pandas.core.reshape.concat import concat\n\n    def reset_identity(values):\n        # reset the identities of the components\n        # of the values to prevent aliasing\n        for v in com.not_none(*values):\n            ax = v._get_axis(self.axis)\n            ax._reset_identity()\n        return values\n\n    if not not_indexed_same:\n        result = concat(values, axis=self.axis)\n        ax = self._selected_obj._get_axis(self.axis)\n\n        # this is a very unfortunate situation\n        # we can't use reindex to restore the original order\n        # when the ax has duplicates\n        # so we resort to this\n        # GH 14776, 30667\n        if ax.has_duplicates:\n            indexer, _ = result.index.get_indexer_non_unique(ax.values)\n            indexer = algorithms.unique1d(indexer)\n            result = result.take(indexer, axis=self.axis)\n        else:\n            result = result.reindex(ax, axis=self.axis)\n\n    elif self.group_keys:\n\n        values = reset_identity(values)\n        if self.as_index:\n\n            # possible MI return case\n            group_keys = keys\n            group_levels = self.grouper.levels\n            group_names = self.grouper.names\n\n            result = concat(\n                values,\n                axis=self.axis,\n                keys=group_keys,\n                levels=group_levels,\n                names=group_names,\n                sort=False,\n            )\n        else:\n\n            # GH5610, returns a MI, with the first level being a\n            # range index\n            keys = list(range(len(values)))\n            result = concat(values, axis=self.axis, keys=keys)\n    else:\n        values = reset_identity(values)\n        result = concat(values, axis=self.axis)\n\n    if isinstance(result, Series) and self._selection_name is not None:\n\n        result.name = self._selection_name\n\n    return result",
                "def _apply_filter(self, indices, dropna):\n    if len(indices) == 0:\n        indices = np.array([], dtype=\"int64\")\n    else:\n        indices = np.sort(np.concatenate(indices))\n    if dropna:\n        filtered = self._selected_obj.take(indices, axis=self.axis)\n    else:\n        mask = np.empty(len(self._selected_obj.index), dtype=bool)\n        mask.fill(False)\n        mask[indices.astype(int)] = True\n        # mask fails to broadcast when passed to where; broadcast manually.\n        mask = np.tile(mask, list(self._selected_obj.shape[1:]) + [1]).T\n        filtered = self._selected_obj.where(mask)  # Fill with NaNs.\n    return filtered",
                "def _bool_agg(self, val_test, skipna):\n    \"\"\"\n    Shared func to call any / all Cython GroupBy implementations.\n    \"\"\"\n\n    def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n        if is_object_dtype(vals):\n            vals = np.array([bool(x) for x in vals])\n        else:\n            vals = vals.astype(np.bool)\n\n        return vals.view(np.uint8), np.bool\n\n    def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n        return result.astype(inference, copy=False)\n\n    return self._get_cythonized_result(\n        \"group_any_all\",\n        aggregate=True,\n        cython_dtype=np.dtype(np.uint8),\n        needs_values=True,\n        needs_mask=True,\n        pre_processing=objs_to_bool,\n        post_processing=result_to_bool,\n        val_test=val_test,\n        skipna=skipna,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef any(self, skipna: bool = True):\n    \"\"\"\n    Return True if any value in the group is truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg(\"any\", skipna)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef all(self, skipna: bool = True):\n    \"\"\"\n    Return True if all values in the group are truthful, else False.\n\n    Parameters\n    ----------\n    skipna : bool, default True\n        Flag to ignore nan values during truth testing.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    return self._bool_agg(\"all\", skipna)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef count(self):\n    \"\"\"\n    Compute count of group, excluding missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Count of values within each group.\n    \"\"\"\n\n    # defined here for API doc\n    raise NotImplementedError",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef mean(self, *args, **kwargs):\n    \"\"\"\n    Compute mean of groups, excluding missing values.\n\n    Returns\n    -------\n    pandas.Series or pandas.DataFrame\n    %(see_also)s\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5],\n    ...                    'C': [1, 2, 1, 1, 2]}, columns=['A', 'B', 'C'])\n\n    Groupby one column and return the mean of the remaining columns in\n    each group.\n\n    >>> df.groupby('A').mean()\n         B         C\n    A\n    1  3.0  1.333333\n    2  4.0  1.500000\n\n    Groupby two columns and return the mean of the remaining column.\n\n    >>> df.groupby(['A', 'B']).mean()\n           C\n    A B\n    1 2.0  2\n      4.0  1\n    2 3.0  1\n      5.0  2\n\n    Groupby one column and return the mean of only particular column in\n    the group.\n\n    >>> df.groupby('A')['B'].mean()\n    A\n    1    3.0\n    2    4.0\n    Name: B, dtype: float64\n    \"\"\"\n    nv.validate_groupby_func(\"mean\", args, kwargs, [\"numeric_only\"])\n    return self._cython_agg_general(\n        \"mean\", alt=lambda x, axis: Series(x).mean(**kwargs), **kwargs\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef median(self, **kwargs):\n    \"\"\"\n    Compute median of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    Series or DataFrame\n        Median of values within each group.\n    \"\"\"\n    return self._cython_agg_general(\n        \"median\",\n        alt=lambda x, axis: Series(x).median(axis=axis, **kwargs),\n        **kwargs,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef std(self, ddof: int = 1, *args, **kwargs):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard deviation of values within each group.\n    \"\"\"\n\n    # TODO: implement at Cython level?\n    nv.validate_groupby_func(\"std\", args, kwargs)\n    return np.sqrt(self.var(ddof=ddof, **kwargs))",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef var(self, ddof: int = 1, *args, **kwargs):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Variance of values within each group.\n    \"\"\"\n    nv.validate_groupby_func(\"var\", args, kwargs)\n    if ddof == 1:\n        return self._cython_agg_general(\n            \"var\", alt=lambda x, axis: Series(x).var(ddof=ddof, **kwargs), **kwargs\n        )\n    else:\n        f = lambda x: x.var(ddof=ddof, **kwargs)\n        with _group_selection_context(self):\n            return self._python_agg_general(f)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef sem(self, ddof: int = 1):\n    \"\"\"\n    Compute standard error of the mean of groups, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    Series or DataFrame\n        Standard error of the mean of values within each group.\n    \"\"\"\n    return self.std(ddof=ddof) / np.sqrt(self.count())",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef size(self):\n    \"\"\"\n    Compute group sizes.\n\n    Returns\n    -------\n    Series\n        Number of rows in each group.\n    \"\"\"\n    result = self.grouper.size()\n\n    if isinstance(self.obj, Series):\n        result.name = self.obj.name\n    return self._reindex_output(result, fill_value=0)",
                "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add numeric operations to the GroupBy generically.\n    \"\"\"\n\n    def groupby_function(\n        name: str,\n        alias: str,\n        npfunc,\n        numeric_only: bool = True,\n        min_count: int = -1,\n    ):\n\n        _local_template = \"\"\"\n        Compute %(f)s of group values.\n\n        Returns\n        -------\n        Series or DataFrame\n            Computed %(f)s of values within each group.\n        \"\"\"\n\n        @Substitution(name=\"groupby\", f=name)\n        @Appender(_common_see_also)\n        @Appender(_local_template)\n        def f(self, **kwargs):\n            if \"numeric_only\" not in kwargs:\n                kwargs[\"numeric_only\"] = numeric_only\n            if \"min_count\" not in kwargs:\n                kwargs[\"min_count\"] = min_count\n\n            self._set_group_selection()\n\n            # try a cython aggregation if we can\n            try:\n                return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n            except DataError:\n                pass\n            except NotImplementedError as err:\n                if \"function is not implemented for this dtype\" in str(err):\n                    # raised in _get_cython_function, in some cases can\n                    #  be trimmed by implementing cython funcs for more dtypes\n                    pass\n                else:\n                    raise\n\n            # apply a non-cython aggregation\n            result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n            return result\n\n        set_function_name(f, name, cls)\n\n        return f\n\n    def first_compat(x, axis=0):\n        def first(x):\n            x = x.to_numpy()\n\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[0]\n\n        if isinstance(x, DataFrame):\n            return x.apply(first, axis=axis)\n        else:\n            return first(x)\n\n    def last_compat(x, axis=0):\n        def last(x):\n            x = x.to_numpy()\n            x = x[notna(x)]\n            if len(x) == 0:\n                return np.nan\n            return x[-1]\n\n        if isinstance(x, DataFrame):\n            return x.apply(last, axis=axis)\n        else:\n            return last(x)\n\n    cls.sum = groupby_function(\"sum\", \"add\", np.sum, min_count=0)\n    cls.prod = groupby_function(\"prod\", \"prod\", np.prod, min_count=0)\n    cls.min = groupby_function(\"min\", \"min\", np.min, numeric_only=False)\n    cls.max = groupby_function(\"max\", \"max\", np.max, numeric_only=False)\n    cls.first = groupby_function(\"first\", \"first\", first_compat, numeric_only=False)\n    cls.last = groupby_function(\"last\", \"last\", last_compat, numeric_only=False)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef ohlc(self) -> DataFrame:\n    \"\"\"\n    Compute sum of values, excluding missing values.\n\n    For multiple groupings, the result index will be a MultiIndex\n\n    Returns\n    -------\n    DataFrame\n        Open, high, low and close values within each group.\n    \"\"\"\n\n    return self._apply_to_column_groupbys(lambda x: x._cython_agg_general(\"ohlc\"))",
                "@Appender(DataFrame.describe.__doc__)\ndef describe(self, **kwargs):\n    with _group_selection_context(self):\n        result = self.apply(lambda x: x.describe(**kwargs))\n        if self.axis == 1:\n            return result.T\n        return result.unstack()",
                "def resample(self, rule, *args, **kwargs):\n    \"\"\"\n    Provide resampling when using a TimeGrouper.\n\n    Given a grouper, the function resamples it according to a string\n    \"string\" -> \"frequency\".\n\n    See the :ref:`frequency aliases <timeseries.offset_aliases>`\n    documentation for more details.\n\n    Parameters\n    ----------\n    rule : str or DateOffset\n        The offset string or object representing target grouper conversion.\n    *args, **kwargs\n        Possible arguments are `how`, `fill_method`, `limit`, `kind` and\n        `on`, and other arguments of `TimeGrouper`.\n\n    Returns\n    -------\n    Grouper\n        Return a new grouper with our resampler appended.\n\n    See Also\n    --------\n    Grouper : Specify a frequency to resample with when\n        grouping by a key.\n    DatetimeIndex.resample : Frequency conversion and resampling of\n        time series.\n\n    Examples\n    --------\n    >>> idx = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> df = pd.DataFrame(data=4 * [range(2)],\n    ...                   index=idx,\n    ...                   columns=['a', 'b'])\n    >>> df.iloc[2, 0] = 5\n    >>> df\n                        a  b\n    2000-01-01 00:00:00  0  1\n    2000-01-01 00:01:00  0  1\n    2000-01-01 00:02:00  5  1\n    2000-01-01 00:03:00  0  1\n\n    Downsample the DataFrame into 3 minute bins and sum the values of\n    the timestamps falling into a bin.\n\n    >>> df.groupby('a').resample('3T').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  2\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:00:00  5  1\n\n    Upsample the series into 30 second bins.\n\n    >>> df.groupby('a').resample('30S').sum()\n                        a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:00:30  0  0\n        2000-01-01 00:01:00  0  1\n        2000-01-01 00:01:30  0  0\n        2000-01-01 00:02:00  0  0\n        2000-01-01 00:02:30  0  0\n        2000-01-01 00:03:00  0  1\n    5   2000-01-01 00:02:00  5  1\n\n    Resample by month. Values are assigned to the month of the period.\n\n    >>> df.groupby('a').resample('M').sum()\n                a  b\n    a\n    0   2000-01-31  0  3\n    5   2000-01-31  5  1\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> df.groupby('a').resample('3T', closed='right').sum()\n                             a  b\n    a\n    0   1999-12-31 23:57:00  0  1\n        2000-01-01 00:00:00  0  2\n    5   2000-01-01 00:00:00  5  1\n\n    Downsample the series into 3 minute bins and close the right side of\n    the bin interval, but label each bin using the right edge instead of\n    the left.\n\n    >>> df.groupby('a').resample('3T', closed='right', label='right').sum()\n                             a  b\n    a\n    0   2000-01-01 00:00:00  0  1\n        2000-01-01 00:03:00  0  2\n    5   2000-01-01 00:03:00  5  1\n\n    Add an offset of twenty seconds.\n\n    >>> df.groupby('a').resample('3T', loffset='20s').sum()\n                           a  b\n    a\n    0   2000-01-01 00:00:20  0  2\n        2000-01-01 00:03:20  0  1\n    5   2000-01-01 00:00:20  5  1\n    \"\"\"\n    from pandas.core.resample import get_resampler_for_grouping\n\n    return get_resampler_for_grouping(self, rule, *args, **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef rolling(self, *args, **kwargs):\n    \"\"\"\n    Return a rolling grouper, providing rolling functionality per group.\n    \"\"\"\n    from pandas.core.window import RollingGroupby\n\n    return RollingGroupby(self, *args, **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef expanding(self, *args, **kwargs):\n    \"\"\"\n    Return an expanding grouper, providing expanding\n    functionality per group.\n    \"\"\"\n    from pandas.core.window import ExpandingGroupby\n\n    return ExpandingGroupby(self, *args, **kwargs)",
                "def _fill(self, direction, limit=None):\n    \"\"\"\n    Shared function for `pad` and `backfill` to call Cython method.\n\n    Parameters\n    ----------\n    direction : {'ffill', 'bfill'}\n        Direction passed to underlying Cython function. `bfill` will cause\n        values to be filled backwards. `ffill` and any other values will\n        default to a forward fill\n    limit : int, default None\n        Maximum number of consecutive values to fill. If `None`, this\n        method will convert to -1 prior to passing to Cython\n\n    Returns\n    -------\n    `Series` or `DataFrame` with filled values\n\n    See Also\n    --------\n    pad\n    backfill\n    \"\"\"\n    # Need int value for Cython\n    if limit is None:\n        limit = -1\n\n    return self._get_cythonized_result(\n        \"group_fillna_indexer\",\n        needs_mask=True,\n        cython_dtype=np.dtype(np.int64),\n        result_is_index=True,\n        direction=direction,\n        limit=limit,\n    )",
                "@Substitution(name=\"groupby\")\ndef pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.pad\n    DataFrame.pad\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill(\"ffill\", limit=limit)",
                "@Substitution(name=\"groupby\")\ndef backfill(self, limit=None):\n    \"\"\"\n    Backward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object with missing values filled.\n\n    See Also\n    --------\n    Series.backfill\n    DataFrame.backfill\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._fill(\"bfill\", limit=limit)",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef nth(self, n: Union[int, List[int]], dropna: Optional[str] = None) -> DataFrame:\n    \"\"\"\n    Take the nth row from each group if n is an int, or a subset of rows\n    if n is a list of ints.\n\n    If dropna, will take the nth non-null row, dropna is either\n    'all' or 'any'; this is equivalent to calling dropna(how=dropna)\n    before the groupby.\n\n    Parameters\n    ----------\n    n : int or list of ints\n        A single nth value for the row or a list of nth values.\n    dropna : None or str, optional\n        Apply the specified dropna operation before counting which row is\n        the nth row. Needs to be None, 'any' or 'all'.\n\n    Returns\n    -------\n    Series or DataFrame\n        N-th value within each group.\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'A': [1, 1, 2, 1, 2],\n    ...                    'B': [np.nan, 2, 3, 4, 5]}, columns=['A', 'B'])\n    >>> g = df.groupby('A')\n    >>> g.nth(0)\n         B\n    A\n    1  NaN\n    2  3.0\n    >>> g.nth(1)\n         B\n    A\n    1  2.0\n    2  5.0\n    >>> g.nth(-1)\n         B\n    A\n    1  4.0\n    2  5.0\n    >>> g.nth([0, 1])\n         B\n    A\n    1  NaN\n    1  2.0\n    2  3.0\n    2  5.0\n\n    Specifying `dropna` allows count ignoring ``NaN``\n\n    >>> g.nth(0, dropna='any')\n         B\n    A\n    1  2.0\n    2  3.0\n\n    NaNs denote group exhausted when using dropna\n\n    >>> g.nth(3, dropna='any')\n        B\n    A\n    1 NaN\n    2 NaN\n\n    Specifying `as_index=False` in `groupby` keeps the original index.\n\n    >>> df.groupby('A', as_index=False).nth(1)\n       A    B\n    1  1  2.0\n    4  2  5.0\n    \"\"\"\n\n    valid_containers = (set, list, tuple)\n    if not isinstance(n, (valid_containers, int)):\n        raise TypeError(\"n needs to be an int or a list/set/tuple of ints\")\n\n    if not dropna:\n\n        if isinstance(n, int):\n            nth_values = [n]\n        elif isinstance(n, valid_containers):\n            nth_values = list(set(n))\n\n        nth_array = np.array(nth_values, dtype=np.intp)\n        self._set_group_selection()\n\n        mask_left = np.in1d(self._cumcount_array(), nth_array)\n        mask_right = np.in1d(self._cumcount_array(ascending=False) + 1, -nth_array)\n        mask = mask_left | mask_right\n\n        ids, _, _ = self.grouper.group_info\n\n        # Drop NA values in grouping\n        mask = mask & (ids != -1)\n\n        out = self._selected_obj[mask]\n        if not self.as_index:\n            return out\n\n        result_index = self.grouper.result_index\n        out.index = result_index[ids[mask]]\n\n        if not self.observed and isinstance(result_index, CategoricalIndex):\n            out = out.reindex(result_index)\n\n        out = self._reindex_output(out)\n        return out.sort_index() if self.sort else out\n\n    # dropna is truthy\n    if isinstance(n, valid_containers):\n        raise ValueError(\"dropna option with a list of nth values is not supported\")\n\n    if dropna not in [\"any\", \"all\"]:\n        # Note: when agg-ing picker doesn't raise this, just returns NaN\n        raise ValueError(\n            \"For a DataFrame groupby, dropna must be \"\n            \"either None, 'any' or 'all', \"\n            f\"(was passed {dropna}).\"\n        )\n\n    # old behaviour, but with all and any support for DataFrames.\n    # modified in GH 7559 to have better perf\n    max_len = n if n >= 0 else -1 - n\n    dropped = self.obj.dropna(how=dropna, axis=self.axis)\n\n    # get a new grouper for our dropped obj\n    if self.keys is None and self.level is None:\n\n        # we don't have the grouper info available\n        # (e.g. we have selected out\n        # a column that is not in the current object)\n        axis = self.grouper.axis\n        grouper = axis[axis.isin(dropped.index)]\n\n    else:\n\n        # create a grouper with the original parameters, but on dropped\n        # object\n        from pandas.core.groupby.grouper import get_grouper\n\n        grouper, _, _ = get_grouper(\n            dropped,\n            key=self.keys,\n            axis=self.axis,\n            level=self.level,\n            sort=self.sort,\n            mutated=self.mutated,\n        )\n\n    grb = dropped.groupby(grouper, as_index=self.as_index, sort=self.sort)\n    sizes, result = grb.size(), grb.nth(n)\n    mask = (sizes < max_len).values\n\n    # set the results which don't meet the criteria\n    if len(result) and mask.any():\n        result.loc[mask] = np.nan\n\n    # reset/reindex to the original groups\n    if len(self.obj) == len(dropped) or len(result) == len(\n        self.grouper.result_index\n    ):\n        result.index = self.grouper.result_index\n    else:\n        result = result.reindex(self.grouper.result_index)\n\n    return result",
                "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n\n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n\n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas import concat\n\n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n\n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = vals.astype(np.float)\n\n        return vals, inference\n\n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            # Check for edge case\n            if not (\n                is_integer_dtype(inference)\n                and interpolation in {\"linear\", \"midpoint\"}\n            ):\n                vals = vals.astype(inference)\n\n        return vals\n\n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            aggregate=True,\n            needs_values=True,\n            needs_mask=True,\n            cython_dtype=np.dtype(np.float64),\n            pre_processing=pre_processor,\n            post_processing=post_processor,\n            q=q,\n            interpolation=interpolation,\n        )\n    else:\n        results = [\n            self._get_cythonized_result(\n                \"group_quantile\",\n                aggregate=True,\n                needs_values=True,\n                needs_mask=True,\n                cython_dtype=np.dtype(np.float64),\n                pre_processing=pre_processor,\n                post_processing=post_processor,\n                q=qi,\n                interpolation=interpolation,\n            )\n            for qi in q\n        ]\n        result = concat(results, axis=0, keys=q)\n        # fix levels to place quantiles on the inside\n        # TODO(GH-10710): Ideally, we could write this as\n        #  >>> result.stack(0).loc[pd.IndexSlice[:, ..., q], :]\n        #  but this hits https://github.com/pandas-dev/pandas/issues/10710\n        #  which doesn't reorder the list-like `q` on the inner level.\n        order = list(range(1, result.index.nlevels)) + [0]\n\n        # temporarily saves the index names\n        index_names = np.array(result.index.names)\n\n        # set index names to positions to avoid confusion\n        result.index.names = np.arange(len(index_names))\n\n        # place quantiles on the inside\n        result = result.reorder_levels(order)\n\n        # restore the index names in order\n        result.index.names = index_names[order]\n\n        # reorder rows to keep things sorted\n        indices = np.arange(len(result)).reshape([len(q), self.ngroups]).T.flatten()\n        return result.take(indices)",
                "@Substitution(name=\"groupby\")\ndef ngroup(self, ascending: bool = True):\n    \"\"\"\n    Number each group from 0 to the number of groups - 1.\n\n    This is the enumerative complement of cumcount.  Note that the\n    numbers given to the groups match the order in which the groups\n    would be seen when iterating over the groupby object, not the\n    order they are first observed.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from number of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Unique numbers for each group.\n\n    See Also\n    --------\n    .cumcount : Number the rows in each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({\"A\": list(\"aaabba\")})\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').ngroup()\n    0    0\n    1    0\n    2    0\n    3    1\n    4    1\n    5    0\n    dtype: int64\n    >>> df.groupby('A').ngroup(ascending=False)\n    0    1\n    1    1\n    2    1\n    3    0\n    4    0\n    5    1\n    dtype: int64\n    >>> df.groupby([\"A\", [1,1,2,3,2,1]]).ngroup()\n    0    0\n    1    0\n    2    1\n    3    3\n    4    2\n    5    0\n    dtype: int64\n    \"\"\"\n\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        result = Series(self.grouper.group_info[0], index)\n        if not ascending:\n            result = self.ngroups - 1 - result\n        return result",
                "@Substitution(name=\"groupby\")\ndef cumcount(self, ascending: bool = True):\n    \"\"\"\n    Number each item in each group from 0 to the length of that group - 1.\n\n    Essentially this is equivalent to\n\n    >>> self.apply(lambda x: pd.Series(np.arange(len(x)), x.index))\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        If False, number in reverse, from length of group - 1 to 0.\n\n    Returns\n    -------\n    Series\n        Sequence number of each element within each group.\n\n    See Also\n    --------\n    .ngroup : Number the groups themselves.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a'], ['a'], ['a'], ['b'], ['b'], ['a']],\n    ...                   columns=['A'])\n    >>> df\n       A\n    0  a\n    1  a\n    2  a\n    3  b\n    4  b\n    5  a\n    >>> df.groupby('A').cumcount()\n    0    0\n    1    1\n    2    2\n    3    0\n    4    1\n    5    3\n    dtype: int64\n    >>> df.groupby('A').cumcount(ascending=False)\n    0    3\n    1    2\n    2    1\n    3    1\n    4    0\n    5    0\n    dtype: int64\n    \"\"\"\n\n    with _group_selection_context(self):\n        index = self._selected_obj.index\n        cumcounts = self._cumcount_array(ascending=ascending)\n        return Series(cumcounts, index)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef rank(\n    self,\n    method: str = \"average\",\n    ascending: bool = True,\n    na_option: str = \"keep\",\n    pct: bool = False,\n    axis: int = 0,\n):\n    \"\"\"\n    Provide the rank of values within each group.\n\n    Parameters\n    ----------\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        * average: average rank of group.\n        * min: lowest rank in group.\n        * max: highest rank in group.\n        * first: ranks assigned in order they appear in the array.\n        * dense: like 'min', but rank always increases by 1 between groups.\n    ascending : bool, default True\n        False for ranks by high (1) to low (N).\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        * keep: leave NA values where they are.\n        * top: smallest rank if ascending.\n        * bottom: smallest rank if descending.\n    pct : bool, default False\n        Compute percentage rank of data within each group.\n    axis : int, default 0\n        The axis of the object over which to compute the rank.\n\n    Returns\n    -------\n    DataFrame with ranking of values within each group\n    \"\"\"\n    if na_option not in {\"keep\", \"top\", \"bottom\"}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n    return self._cython_transform(\n        \"rank\",\n        numeric_only=False,\n        ties_method=method,\n        ascending=ascending,\n        na_option=na_option,\n        pct=pct,\n        axis=axis,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cumprod(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative product for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func(\"cumprod\", args, kwargs, [\"numeric_only\", \"skipna\"])\n    if axis != 0:\n        return self.apply(lambda x: x.cumprod(axis=axis, **kwargs))\n\n    return self._cython_transform(\"cumprod\", **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cumsum(self, axis=0, *args, **kwargs):\n    \"\"\"\n    Cumulative sum for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    nv.validate_groupby_func(\"cumsum\", args, kwargs, [\"numeric_only\", \"skipna\"])\n    if axis != 0:\n        return self.apply(lambda x: x.cumsum(axis=axis, **kwargs))\n\n    return self._cython_transform(\"cumsum\", **kwargs)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cummin(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative min for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.minimum.accumulate(x, axis))\n\n    return self._cython_transform(\"cummin\", numeric_only=False)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef cummax(self, axis=0, **kwargs):\n    \"\"\"\n    Cumulative max for each group.\n\n    Returns\n    -------\n    Series or DataFrame\n    \"\"\"\n    if axis != 0:\n        return self.apply(lambda x: np.maximum.accumulate(x, axis))\n\n    return self._cython_transform(\"cummax\", numeric_only=False)",
                "def _get_cythonized_result(\n    self,\n    how: str,\n    cython_dtype: np.dtype,\n    aggregate: bool = False,\n    needs_values: bool = False,\n    needs_mask: bool = False,\n    needs_ngroups: bool = False,\n    result_is_index: bool = False,\n    pre_processing=None,\n    post_processing=None,\n    **kwargs,\n):\n    \"\"\"\n    Get result for Cythonized functions.\n\n    Parameters\n    ----------\n    how : str, Cythonized function name to be called\n    cython_dtype : np.dtype\n        Type of the array that will be modified by the Cython call.\n    aggregate : bool, default False\n        Whether the result should be aggregated to match the number of\n        groups\n    needs_values : bool, default False\n        Whether the values should be a part of the Cython call\n        signature\n    needs_mask : bool, default False\n        Whether boolean mask needs to be part of the Cython call\n        signature\n    needs_ngroups : bool, default False\n        Whether number of groups is part of the Cython call signature\n    result_is_index : bool, default False\n        Whether the result of the Cython operation is an index of\n        values to be retrieved, instead of the actual values themselves\n    pre_processing : function, default None\n        Function to be applied to `values` prior to passing to Cython.\n        Function should return a tuple where the first element is the\n        values to be passed to Cython and the second element is an optional\n        type which the values should be converted to after being returned\n        by the Cython operation. Raises if `needs_values` is False.\n    post_processing : function, default None\n        Function to be applied to result of Cython function. Should accept\n        an array of values as the first argument and type inferences as its\n        second argument, i.e. the signature should be\n        (ndarray, Type).\n    **kwargs : dict\n        Extra arguments to be passed back to Cython funcs\n\n    Returns\n    -------\n    `Series` or `DataFrame`  with filled values\n    \"\"\"\n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if post_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'post_processing' must be a callable!\")\n    if pre_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'pre_processing' must be a callable!\")\n        if not needs_values:\n            raise ValueError(\n                \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n            )\n\n    grouper = self.grouper\n\n    labels, _, ngroups = grouper.group_info\n    output: Dict[base.OutputKey, np.ndarray] = {}\n    base_func = getattr(libgroupby, how)\n\n    for idx, obj in enumerate(self._iterate_slices()):\n        name = obj.name\n        values = obj._data._values\n\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(values)\n\n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n\n        if needs_values:\n            vals = values\n            if pre_processing:\n                vals, inferences = pre_processing(vals)\n            func = partial(func, vals)\n\n        if needs_mask:\n            mask = isna(values).view(np.uint8)\n            func = partial(func, mask)\n\n        if needs_ngroups:\n            func = partial(func, ngroups)\n\n        func(**kwargs)  # Call func to modify indexer values in place\n\n        if result_is_index:\n            result = algorithms.take_nd(values, result)\n\n        if post_processing:\n            result = post_processing(result, inferences)\n\n        key = base.OutputKey(label=name, position=idx)\n        output[key] = result\n\n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    \"\"\"\n    Shift each group by periods observations.\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Number of periods to shift.\n    freq : frequency string\n    axis : axis to shift, default 0\n    fill_value : optional\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Object shifted within each group.\n    \"\"\"\n\n    if freq is not None or axis != 0 or not isna(fill_value):\n        return self.apply(lambda x: x.shift(periods, freq, axis, fill_value))\n\n    return self._get_cythonized_result(\n        \"group_shift_indexer\",\n        cython_dtype=np.dtype(np.int64),\n        needs_ngroups=True,\n        result_is_index=True,\n        periods=periods,\n    )",
                "@Substitution(name=\"groupby\")\n@Appender(_common_see_also)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, axis=0):\n    \"\"\"\n    Calculate pct_change of each value to previous entry in group.\n\n    Returns\n    -------\n    Series or DataFrame\n        Percentage changes within each group.\n    \"\"\"\n    if freq is not None or axis != 0:\n        return self.apply(\n            lambda x: x.pct_change(\n                periods=periods,\n                fill_method=fill_method,\n                limit=limit,\n                freq=freq,\n                axis=axis,\n            )\n        )\n    if fill_method is None:  # GH30463\n        fill_method = \"pad\"\n        limit = 0\n    filled = getattr(self, fill_method)(limit=limit)\n    fill_grp = filled.groupby(self.grouper.codes)\n    shifted = fill_grp.shift(periods=periods, freq=freq)\n    return (filled / shifted) - 1",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef head(self, n=5):\n    \"\"\"\n    Return first n rows of each group.\n\n    Similar to ``.apply(lambda x: x.head(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [1, 4], [5, 6]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').head(1)\n       A  B\n    0  1  2\n    2  5  6\n    >>> df.groupby('A').head(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array() < n\n    return self._selected_obj[mask]",
                "@Substitution(name=\"groupby\")\n@Substitution(see_also=_common_see_also)\ndef tail(self, n=5):\n    \"\"\"\n    Return last n rows of each group.\n\n    Similar to ``.apply(lambda x: x.tail(n))``, but it returns a subset of rows\n    from the original DataFrame with original index and order preserved\n    (``as_index`` flag is ignored).\n\n    Does not work for negative values of `n`.\n\n    Returns\n    -------\n    Series or DataFrame\n    %(see_also)s\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 1], ['a', 2], ['b', 1], ['b', 2]],\n    ...                   columns=['A', 'B'])\n    >>> df.groupby('A').tail(1)\n       A  B\n    1  a  2\n    3  b  2\n    >>> df.groupby('A').tail(-1)\n    Empty DataFrame\n    Columns: [A, B]\n    Index: []\n    \"\"\"\n    self._reset_group_selection()\n    mask = self._cumcount_array(ascending=False) < n\n    return self._selected_obj[mask]",
                "def _reindex_output(\n    self, output: FrameOrSeries, fill_value: Scalar = np.NaN\n) -> FrameOrSeries:\n    \"\"\"\n    If we have categorical groupers, then we might want to make sure that\n    we have a fully re-indexed output to the levels. This means expanding\n    the output space to accommodate all values in the cartesian product of\n    our groups, regardless of whether they were observed in the data or\n    not. This will expand the output space if there are missing groups.\n\n    The method returns early without modifying the input if the number of\n    groupings is less than 2, self.observed == True or none of the groupers\n    are categorical.\n\n    Parameters\n    ----------\n    output : Series or DataFrame\n        Object resulting from grouping and applying an operation.\n    fill_value : scalar, default np.NaN\n        Value to use for unobserved categories if self.observed is False.\n\n    Returns\n    -------\n    Series or DataFrame\n        Object (potentially) re-indexed to include all possible groups.\n    \"\"\"\n    groupings = self.grouper.groupings\n    if groupings is None:\n        return output\n    elif len(groupings) == 1:\n        return output\n\n    # if we only care about the observed values\n    # we are done\n    elif self.observed:\n        return output\n\n    # reindexing only applies to a Categorical grouper\n    elif not any(\n        isinstance(ping.grouper, (Categorical, CategoricalIndex))\n        for ping in groupings\n    ):\n        return output\n\n    levels_list = [ping.group_index for ping in groupings]\n    index, _ = MultiIndex.from_product(\n        levels_list, names=self.grouper.names\n    ).sortlevel()\n\n    if self.as_index:\n        d = {\n            self.obj._get_axis_name(self.axis): index,\n            \"copy\": False,\n            \"fill_value\": fill_value,\n        }\n        return output.reindex(**d)\n\n    # GH 13204\n    # Here, the categorical in-axis groupers, which need to be fully\n    # expanded, are columns in `output`. An idea is to do:\n    # output = output.set_index(self.grouper.names)\n    #                .reindex(index).reset_index()\n    # but special care has to be taken because of possible not-in-axis\n    # groupers.\n    # So, we manually select and drop the in-axis grouper columns,\n    # reindex `output`, and then reset the in-axis grouper columns.\n\n    # Select in-axis groupers\n    in_axis_grps = (\n        (i, ping.name) for (i, ping) in enumerate(groupings) if ping.in_axis\n    )\n    g_nums, g_names = zip(*in_axis_grps)\n\n    output = output.drop(labels=list(g_names), axis=1)\n\n    # Set a temp index and reindex (possibly expanding)\n    output = output.set_index(self.grouper.result_index).reindex(\n        index, copy=False, fill_value=fill_value\n    )\n\n    # Reset in-axis grouper columns\n    # (using level numbers `g_nums` because level names may not be unique)\n    output = output.reset_index(level=g_nums)\n\n    return output.reset_index(drop=True)",
                "def f(self):\n    return self.plot(*args, **kwargs)",
                "def attr(*args, **kwargs):\n    def f(self):\n        return getattr(self.plot, name)(*args, **kwargs)\n\n    return self._groupby.apply(f)",
                "def get_converter(s):\n    # possibly convert to the actual key types\n    # in the indices, could be a Timestamp or a np.datetime64\n    if isinstance(s, datetime.datetime):\n        return lambda key: Timestamp(key)\n    elif isinstance(s, np.datetime64):\n        return lambda key: Timestamp(key).asm8\n    else:\n        return lambda key: key",
                "def wrapper(*args, **kwargs):\n    # a little trickery for aggregation functions that need an axis\n    # argument\n    if \"axis\" in sig.parameters:\n        if kwargs.get(\"axis\", None) is None:\n            kwargs[\"axis\"] = self.axis\n\n    def curried(x):\n        return f(x, *args, **kwargs)\n\n    # preserve the name so we can detect it when calling plot methods,\n    # to avoid duplicates\n    curried.__name__ = name\n\n    # special case otherwise extra plots are created when catching the\n    # exception below\n    if name in base.plotting_methods:\n        return self.apply(curried)\n\n    try:\n        return self.apply(curried)\n    except TypeError as err:\n        if not re.search(\n            \"reduction operation '.*' not allowed for this dtype\", str(err)\n        ):\n            # We don't have a cython implementation\n            # TODO: is the above comment accurate?\n            raise\n\n    if self.obj.ndim == 1:\n        # this can be called recursively, so need to raise ValueError\n        raise ValueError\n\n    # GH#3688 try to operate item-by-item\n    result = self._aggregate_item_by_item(name, *args, **kwargs)\n    return result",
                "def reset_identity(values):\n    # reset the identities of the components\n    # of the values to prevent aliasing\n    for v in com.not_none(*values):\n        ax = v._get_axis(self.axis)\n        ax._reset_identity()\n    return values",
                "def objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]:\n    if is_object_dtype(vals):\n        vals = np.array([bool(x) for x in vals])\n    else:\n        vals = vals.astype(np.bool)\n\n    return vals.view(np.uint8), np.bool",
                "def result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray:\n    return result.astype(inference, copy=False)",
                "def groupby_function(\n    name: str,\n    alias: str,\n    npfunc,\n    numeric_only: bool = True,\n    min_count: int = -1,\n):\n\n    _local_template = \"\"\"\n    Compute %(f)s of group values.\n\n    Returns\n    -------\n    Series or DataFrame\n        Computed %(f)s of values within each group.\n    \"\"\"\n\n    @Substitution(name=\"groupby\", f=name)\n    @Appender(_common_see_also)\n    @Appender(_local_template)\n    def f(self, **kwargs):\n        if \"numeric_only\" not in kwargs:\n            kwargs[\"numeric_only\"] = numeric_only\n        if \"min_count\" not in kwargs:\n            kwargs[\"min_count\"] = min_count\n\n        self._set_group_selection()\n\n        # try a cython aggregation if we can\n        try:\n            return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n        except DataError:\n            pass\n        except NotImplementedError as err:\n            if \"function is not implemented for this dtype\" in str(err):\n                # raised in _get_cython_function, in some cases can\n                #  be trimmed by implementing cython funcs for more dtypes\n                pass\n            else:\n                raise\n\n        # apply a non-cython aggregation\n        result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n        return result\n\n    set_function_name(f, name, cls)\n\n    return f",
                "def first_compat(x, axis=0):\n    def first(x):\n        x = x.to_numpy()\n\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[0]\n\n    if isinstance(x, DataFrame):\n        return x.apply(first, axis=axis)\n    else:\n        return first(x)",
                "def last_compat(x, axis=0):\n    def last(x):\n        x = x.to_numpy()\n        x = x[notna(x)]\n        if len(x) == 0:\n            return np.nan\n        return x[-1]\n\n    if isinstance(x, DataFrame):\n        return x.apply(last, axis=axis)\n    else:\n        return last(x)",
                "def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n    if is_object_dtype(vals):\n        raise TypeError(\n            \"'quantile' cannot be performed against 'object' dtypes!\"\n        )\n\n    inference = None\n    if is_integer_dtype(vals):\n        inference = np.int64\n    elif is_datetime64_dtype(vals):\n        inference = \"datetime64[ns]\"\n        vals = vals.astype(np.float)\n\n    return vals, inference",
                "def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n    if inference:\n        # Check for edge case\n        if not (\n            is_integer_dtype(inference)\n            and interpolation in {\"linear\", \"midpoint\"}\n        ):\n            vals = vals.astype(inference)\n\n    return vals",
                "def f(self):\n    return getattr(self.plot, name)(*args, **kwargs)",
                "def curried(x):\n    return f(x, *args, **kwargs)",
                "@Substitution(name=\"groupby\", f=name)\n@Appender(_common_see_also)\n@Appender(_local_template)\ndef f(self, **kwargs):\n    if \"numeric_only\" not in kwargs:\n        kwargs[\"numeric_only\"] = numeric_only\n    if \"min_count\" not in kwargs:\n        kwargs[\"min_count\"] = min_count\n\n    self._set_group_selection()\n\n    # try a cython aggregation if we can\n    try:\n        return self._cython_agg_general(alias, alt=npfunc, **kwargs)\n    except DataError:\n        pass\n    except NotImplementedError as err:\n        if \"function is not implemented for this dtype\" in str(err):\n            # raised in _get_cython_function, in some cases can\n            #  be trimmed by implementing cython funcs for more dtypes\n            pass\n        else:\n            raise\n\n    # apply a non-cython aggregation\n    result = self.aggregate(lambda x: npfunc(x, axis=self.axis))\n    return result",
                "def first(x):\n    x = x.to_numpy()\n\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[0]",
                "def last(x):\n    x = x.to_numpy()\n    x = x[notna(x)]\n    if len(x) == 0:\n        return np.nan\n    return x[-1]",
                "@wraps(func)\ndef f(g):\n    with np.errstate(all=\"ignore\"):\n        return func(g, *args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "_group_selection_context(groupby)",
                "get_groupby(obj: NDFrame, by: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False) -> GroupBy",
                "__init__(self, groupby)",
                "__call__(self, *args, **kwargs)",
                "__getattr__(self, name: str)",
                "__init__(self, obj: NDFrame, keys: Optional[_KeysArgType]=None, axis: int=0, level=None, grouper: 'Optional[ops.BaseGrouper]'=None, exclusions=None, selection=None, as_index: bool=True, sort: bool=True, group_keys: bool=True, squeeze: bool=False, observed: bool=False, mutated: bool=False)",
                "__len__(self) -> int",
                "__repr__(self) -> str",
                "_assure_grouper(self)",
                "groups(self)",
                "ngroups(self)",
                "indices(self)",
                "_get_indices(self, names)",
                "_get_index(self, name)",
                "_selected_obj(self)",
                "_reset_group_selection(self)",
                "_set_group_selection(self)",
                "_set_result_index_ordered(self, result)",
                "_dir_additions(self)",
                "__getattr__(self, attr: str)",
                "pipe(self, func, *args, **kwargs)",
                "_make_wrapper(self, name)",
                "get_group(self, name, obj=None)",
                "__iter__(self)",
                "apply(self, func, *args, **kwargs)",
                "_python_apply_general(self, f)",
                "_iterate_slices(self) -> Iterable[Series]",
                "transform(self, func, *args, **kwargs)",
                "_cumcount_array(self, ascending: bool=True)",
                "_try_cast(self, result, obj, numeric_only: bool=False)",
                "_transform_should_cast(self, func_nm: str) -> bool",
                "_cython_transform(self, how: str, numeric_only: bool=True, **kwargs)",
                "_wrap_aggregated_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                "_wrap_transformed_output(self, output: Mapping[base.OutputKey, np.ndarray])",
                "_wrap_applied_output(self, keys, values, not_indexed_same: bool=False)",
                "_cython_agg_general(self, how: str, alt=None, numeric_only: bool=True, min_count: int=-1)",
                "_python_agg_general(self, func, *args, **kwargs)",
                "_concat_objects(self, keys, values, not_indexed_same: bool=False)",
                "_apply_filter(self, indices, dropna)",
                "_bool_agg(self, val_test, skipna)",
                "any(self, skipna: bool=True)",
                "all(self, skipna: bool=True)",
                "count(self)",
                "mean(self, *args, **kwargs)",
                "median(self, **kwargs)",
                "std(self, ddof: int=1, *args, **kwargs)",
                "var(self, ddof: int=1, *args, **kwargs)",
                "sem(self, ddof: int=1)",
                "size(self)",
                "_add_numeric_operations(cls)",
                "ohlc(self) -> DataFrame",
                "describe(self, **kwargs)",
                "resample(self, rule, *args, **kwargs)",
                "rolling(self, *args, **kwargs)",
                "expanding(self, *args, **kwargs)",
                "_fill(self, direction, limit=None)",
                "pad(self, limit=None)",
                "backfill(self, limit=None)",
                "nth(self, n: Union[int, List[int]], dropna: Optional[str]=None) -> DataFrame",
                "quantile(self, q=0.5, interpolation: str='linear')",
                "ngroup(self, ascending: bool=True)",
                "cumcount(self, ascending: bool=True)",
                "rank(self, method: str='average', ascending: bool=True, na_option: str='keep', pct: bool=False, axis: int=0)",
                "cumprod(self, axis=0, *args, **kwargs)",
                "cumsum(self, axis=0, *args, **kwargs)",
                "cummin(self, axis=0, **kwargs)",
                "cummax(self, axis=0, **kwargs)",
                "_get_cythonized_result(self, how: str, cython_dtype: np.dtype, aggregate: bool=False, needs_values: bool=False, needs_mask: bool=False, needs_ngroups: bool=False, result_is_index: bool=False, pre_processing=None, post_processing=None, **kwargs)",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, axis=0)",
                "head(self, n=5)",
                "tail(self, n=5)",
                "_reindex_output(self, output: FrameOrSeries, fill_value: Scalar=np.NaN) -> FrameOrSeries",
                "f(self)",
                "attr(*args, **kwargs)",
                "get_converter(s)",
                "wrapper(*args, **kwargs)",
                "reset_identity(values)",
                "objs_to_bool(vals: np.ndarray) -> Tuple[np.ndarray, Type]",
                "result_to_bool(result: np.ndarray, inference: Type) -> np.ndarray",
                "groupby_function(name: str, alias: str, npfunc, numeric_only: bool=True, min_count: int=-1)",
                "first_compat(x, axis=0)",
                "last_compat(x, axis=0)",
                "pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]",
                "post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray",
                "f(self)",
                "curried(x)",
                "f(self, **kwargs)",
                "first(x)",
                "last(x)",
                "f(g)"
            ],
            "variables_in_file": {
                "_common_see_also": [
                    2178,
                    2307,
                    1669,
                    1166,
                    1426,
                    1300,
                    1560,
                    1181,
                    1570,
                    2082,
                    2340,
                    1320,
                    2369,
                    66,
                    1230,
                    1360,
                    2131,
                    1249,
                    2147,
                    2403,
                    1132,
                    2163,
                    1272,
                    1149
                ],
                "_apply_docs": [
                    73,
                    702,
                    703
                ],
                "dict": [
                    73
                ],
                "_pipe_template": [
                    192,
                    604
                ],
                "_transform_template": [
                    246
                ],
                "PandasObject": [
                    313,
                    357
                ],
                "self._groupby": [
                    333,
                    326,
                    319
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    1024,
                    517,
                    1026,
                    1030,
                    1031,
                    526,
                    528,
                    529,
                    1557,
                    539,
                    2076,
                    541,
                    2077,
                    543,
                    544,
                    1567,
                    2078,
                    548,
                    553,
                    554,
                    1578,
                    562,
                    563,
                    564,
                    565,
                    567,
                    571,
                    574,
                    575,
                    576,
                    577,
                    580,
                    1607,
                    2120,
                    606,
                    1119,
                    2142,
                    2144,
                    611,
                    2462,
                    613,
                    1638,
                    617,
                    619,
                    621,
                    2158,
                    2160,
                    629,
                    1146,
                    2173,
                    2175,
                    1664,
                    641,
                    644,
                    1163,
                    2188,
                    653,
                    2190,
                    658,
                    682,
                    684,
                    688,
                    699,
                    708,
                    1225,
                    2258,
                    2264,
                    1242,
                    1757,
                    735,
                    1759,
                    1760,
                    1763,
                    1768,
                    745,
                    746,
                    1769,
                    1772,
                    751,
                    1775,
                    753,
                    754,
                    1778,
                    1779,
                    1269,
                    758,
                    761,
                    2302,
                    2304,
                    1796,
                    775,
                    1799,
                    1291,
                    1804,
                    1296,
                    1297,
                    1815,
                    1816,
                    1817,
                    1818,
                    1819,
                    2329,
                    2331,
                    1822,
                    1317,
                    1831,
                    1832,
                    1834,
                    1836,
                    2351,
                    1330,
                    1332,
                    1333,
                    1334,
                    2363,
                    2364,
                    319,
                    323,
                    836,
                    326,
                    842,
                    331,
                    333,
                    849,
                    853,
                    854,
                    1368,
                    1372,
                    862,
                    2398,
                    2399,
                    865,
                    2400,
                    868,
                    871,
                    1384,
                    1903,
                    882,
                    888,
                    378,
                    1916,
                    383,
                    2432,
                    897,
                    2433,
                    2434,
                    902,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    908,
                    911,
                    917,
                    919,
                    409,
                    412,
                    413,
                    414,
                    415,
                    1439,
                    1950,
                    418,
                    1443,
                    1444,
                    1445,
                    422,
                    935,
                    2470,
                    938,
                    941,
                    943,
                    2482,
                    436,
                    437,
                    2485,
                    2487,
                    441,
                    442,
                    953,
                    955,
                    449,
                    450,
                    964,
                    969,
                    970,
                    2512,
                    980,
                    982,
                    471,
                    472,
                    984,
                    987,
                    991,
                    992,
                    2015,
                    2016,
                    2017,
                    484,
                    996,
                    2019,
                    1007,
                    1010,
                    500,
                    1012,
                    1014,
                    506
                ],
                "groupby": [
                    344,
                    345,
                    343,
                    319
                ],
                "self.plot": [
                    331,
                    323
                ],
                "args": [
                    323,
                    1224,
                    713,
                    1289,
                    331,
                    1578,
                    2156,
                    719,
                    912,
                    658,
                    1268,
                    1557,
                    632,
                    2140,
                    606,
                    1567
                ],
                "kwargs": [
                    1289,
                    1292,
                    1295,
                    912,
                    658,
                    1557,
                    1567,
                    1444,
                    1578,
                    323,
                    1224,
                    713,
                    1226,
                    331,
                    719,
                    849,
                    1363,
                    1364,
                    1365,
                    1366,
                    1244,
                    1245,
                    606,
                    1372,
                    2140,
                    2142,
                    2144,
                    2156,
                    2158,
                    2160,
                    2290,
                    628,
                    629,
                    1268,
                    1269,
                    632
                ],
                "f.__name__": [
                    325
                ],
                "f": [
                    1295,
                    912,
                    1297,
                    935,
                    941,
                    325,
                    326,
                    333,
                    723,
                    730,
                    735,
                    617,
                    618,
                    746,
                    1387,
                    621,
                    494,
                    622,
                    751,
                    1389,
                    632
                ],
                "self._groupby.apply": [
                    333,
                    326
                ],
                "str": [
                    1344,
                    1376,
                    420,
                    2085,
                    1670,
                    647,
                    328,
                    359,
                    840,
                    874,
                    2087,
                    1840,
                    2194,
                    824,
                    573,
                    1343
                ],
                "getattr": [
                    617,
                    619,
                    331,
                    621,
                    723,
                    2262,
                    2363,
                    542
                ],
                "name": [
                    640,
                    901,
                    658,
                    661,
                    918,
                    937,
                    2298,
                    684,
                    686,
                    331,
                    843,
                    1359,
                    856,
                    2265,
                    611,
                    484,
                    617,
                    619,
                    1387,
                    621,
                    494,
                    498,
                    883,
                    500,
                    506,
                    636
                ],
                "attr": [
                    576,
                    577,
                    580,
                    335,
                    574,
                    575
                ],
                "groupby._set_group_selection": [
                    343
                ],
                "groupby._reset_group_selection": [
                    345
                ],
                "contextmanager": [
                    338
                ],
                "_KeysArgType": [
                    364,
                    2529,
                    348
                ],
                "Union": [
                    876,
                    348,
                    1670
                ],
                "Hashable": [
                    352,
                    353,
                    349,
                    350,
                    351
                ],
                "List": [
                    352,
                    1670,
                    350
                ],
                "Callable": [
                    352,
                    351
                ],
                "Mapping": [
                    864,
                    353,
                    867
                ],
                "SelectionMixin": [
                    357
                ],
                "_group_selection": [
                    358
                ],
                "_apply_whitelist": [
                    359
                ],
                "FrozenSet": [
                    359
                ],
                "frozenset": [
                    359
                ],
                "NDFrame": [
                    2528,
                    363,
                    380
                ],
                "Optional": [
                    2529,
                    1891,
                    1670,
                    364,
                    1876
                ],
                "int": [
                    417,
                    1250,
                    1347,
                    1028,
                    2530,
                    1670,
                    2089,
                    874,
                    365,
                    1746,
                    1301,
                    1751,
                    1273
                ],
                "bool": [
                    1026,
                    2196,
                    2197,
                    2198,
                    2199,
                    2200,
                    795,
                    1954,
                    2086,
                    2088,
                    824,
                    957,
                    1346,
                    840,
                    1110,
                    870,
                    2023,
                    2535,
                    2536,
                    874,
                    2537,
                    2538,
                    1133,
                    2539,
                    2540,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    763,
                    1150
                ],
                "self._selection": [
                    512,
                    378,
                    517
                ],
                "selection": [
                    378,
                    2562
                ],
                "isinstance": [
                    512,
                    386,
                    1413,
                    2475,
                    1332,
                    461,
                    463,
                    1746,
                    1751,
                    1753,
                    477,
                    478,
                    618,
                    1775,
                    2544,
                    1012,
                    2548,
                    1782,
                    1400,
                    380
                ],
                "obj": [
                    897,
                    386,
                    902,
                    402,
                    403,
                    917,
                    918,
                    412,
                    413,
                    925,
                    804,
                    805,
                    807,
                    935,
                    681,
                    682,
                    938,
                    2553,
                    688,
                    2556,
                    842,
                    843,
                    844,
                    849,
                    854,
                    2264,
                    2265,
                    2266,
                    2544,
                    882,
                    883,
                    884,
                    2548,
                    889,
                    380,
                    381
                ],
                "type": [
                    380,
                    621,
                    580
                ],
                "obj._consolidate_inplace": [
                    381
                ],
                "self.level": [
                    1817,
                    1799,
                    383
                ],
                "level": [
                    2559,
                    406,
                    383
                ],
                "as_index": [
                    385,
                    2563,
                    391
                ],
                "DataFrame": [
                    1441,
                    386,
                    1413,
                    1670,
                    1427,
                    2548,
                    1400
                ],
                "TypeError": [
                    736,
                    387,
                    645,
                    1747,
                    1878,
                    2553,
                    926
                ],
                "axis": [
                    388,
                    1414,
                    2187,
                    1804,
                    1805,
                    2188,
                    405,
                    2328,
                    2329,
                    413,
                    2350,
                    2357,
                    2127,
                    1244,
                    2141,
                    2142,
                    2157,
                    2158,
                    1401,
                    2172,
                    2173,
                    2558
                ],
                "ValueError": [
                    480,
                    389,
                    2246,
                    2119,
                    2249,
                    491,
                    2252,
                    2254,
                    655,
                    726,
                    1783,
                    1787
                ],
                "self.as_index": [
                    391,
                    1769,
                    2485,
                    987,
                    541,
                    1822
                ],
                "self.keys": [
                    392,
                    1815,
                    1799
                ],
                "keys": [
                    392,
                    1006,
                    751,
                    1007,
                    754,
                    404,
                    990
                ],
                "self.sort": [
                    393,
                    1818,
                    1779,
                    1822
                ],
                "sort": [
                    393,
                    2564,
                    407
                ],
                "self.group_keys": [
                    984,
                    394
                ],
                "group_keys": [
                    394,
                    2565,
                    997,
                    990
                ],
                "self.squeeze": [
                    395
                ],
                "squeeze": [
                    395,
                    2566
                ],
                "self.observed": [
                    396,
                    2470,
                    1775
                ],
                "observed": [
                    408,
                    396,
                    2567
                ],
                "self.mutated": [
                    409,
                    754,
                    1819,
                    397
                ],
                "mutated": [
                    2568,
                    754,
                    397,
                    751
                ],
                "grouper": [
                    2560,
                    1805,
                    399,
                    1822,
                    402,
                    2258,
                    2260,
                    1813,
                    414
                ],
                "exclusions": [
                    2561,
                    402,
                    415
                ],
                "get_grouper": [
                    402,
                    1813
                ],
                "self.obj": [
                    512,
                    576,
                    514,
                    515,
                    548,
                    517,
                    1796,
                    1831,
                    2487,
                    653,
                    1332,
                    1333,
                    567,
                    571,
                    412,
                    699,
                    543
                ],
                "self.axis": [
                    1024,
                    1796,
                    1816,
                    413,
                    1445,
                    688,
                    564,
                    565,
                    567,
                    2487,
                    699,
                    964,
                    969,
                    970,
                    980,
                    982,
                    996,
                    1384,
                    751,
                    1007,
                    1010,
                    629
                ],
                "obj._get_axis_number": [
                    413
                ],
                "self.grouper": [
                    775,
                    1804,
                    919,
                    539,
                    414,
                    2462,
                    935,
                    1832,
                    1834,
                    1836,
                    943,
                    562,
                    563,
                    1330,
                    437,
                    2482,
                    442,
                    699,
                    2364,
                    450,
                    2512,
                    849,
                    2258,
                    991,
                    992,
                    2017,
                    1763,
                    1772,
                    751,
                    888
                ],
                "self.exclusions": [
                    415
                ],
                "set": [
                    1745,
                    1754,
                    415
                ],
                "len": [
                    1409,
                    1026,
                    777,
                    905,
                    1941,
                    1950,
                    2465,
                    418,
                    1827,
                    551,
                    1831,
                    940,
                    685,
                    468,
                    471,
                    859,
                    2271,
                    481,
                    1006,
                    1396,
                    1019,
                    894
                ],
                "self.groups": [
                    418
                ],
                "object.__repr__": [
                    422
                ],
                "object": [
                    422,
                    575
                ],
                "self._assure_grouper": [
                    441,
                    436,
                    449
                ],
                "self.grouper.groups": [
                    437
                ],
                "property": [
                    608,
                    439,
                    444,
                    431
                ],
                "self.grouper.ngroups": [
                    442,
                    919
                ],
                "self.grouper.indices": [
                    450
                ],
                "s": [
                    493,
                    461,
                    463
                ],
                "datetime.datetime": [
                    461
                ],
                "datetime": [
                    461
                ],
                "Timestamp": [
                    464,
                    462
                ],
                "key": [
                    896,
                    897,
                    901,
                    902,
                    937,
                    938,
                    462,
                    2299,
                    464,
                    466,
                    946,
                    856,
                    857,
                    2298,
                    953
                ],
                "np.datetime64": [
                    463
                ],
                "np": [
                    1921,
                    1026,
                    1410,
                    2437,
                    1030,
                    1418,
                    1419,
                    780,
                    1420,
                    782,
                    783,
                    1421,
                    2188,
                    1938,
                    787,
                    915,
                    789,
                    1941,
                    791,
                    792,
                    793,
                    2195,
                    2333,
                    1950,
                    1828,
                    1317,
                    563,
                    841,
                    1610,
                    718,
                    463,
                    1108,
                    1876,
                    1110,
                    2261,
                    1112,
                    1114,
                    1116,
                    1756,
                    1884,
                    1759,
                    864,
                    1760,
                    1122,
                    867,
                    1887,
                    1891,
                    2273,
                    876,
                    2284,
                    1908,
                    1269,
                    1397,
                    1020,
                    2173,
                    1022
                ],
                "asm8": [
                    464
                ],
                "names": [
                    484,
                    494,
                    498,
                    468,
                    500,
                    476
                ],
                "self.indices": [
                    472,
                    484,
                    500,
                    471
                ],
                "index_sample": [
                    481,
                    493,
                    497,
                    472,
                    474,
                    477
                ],
                "next": [
                    472
                ],
                "iter": [
                    472
                ],
                "name_sample": [
                    481,
                    476,
                    478
                ],
                "tuple": [
                    1745,
                    477,
                    478,
                    494
                ],
                "msg": [
                    480,
                    2118,
                    487,
                    2119,
                    491,
                    479
                ],
                "KeyError": [
                    485,
                    686
                ],
                "converters": [
                    493,
                    494
                ],
                "get_converter": [
                    497,
                    493
                ],
                "n": [
                    2433,
                    1795,
                    2399,
                    494,
                    1746,
                    1782,
                    1751,
                    1752,
                    1753,
                    1754,
                    1823
                ],
                "zip": [
                    2507,
                    494,
                    895
                ],
                "converter": [
                    497,
                    498
                ],
                "self.indices.get": [
                    500
                ],
                "self._get_indices": [
                    506,
                    563
                ],
                "Series": [
                    512,
                    2017,
                    1226,
                    1292,
                    2544,
                    1012,
                    757,
                    1332,
                    1244,
                    2079
                ],
                "self._group_selection": [
                    544,
                    513,
                    514,
                    553,
                    526,
                    528
                ],
                "cache_readonly": [
                    508
                ],
                "self._reset_cache": [
                    529,
                    554
                ],
                "grp": [
                    539,
                    549,
                    542
                ],
                "self.obj.ndim": [
                    653,
                    543
                ],
                "ax": [
                    964,
                    548,
                    965,
                    553,
                    970,
                    977,
                    978,
                    982
                ],
                "self.obj._info_axis": [
                    548
                ],
                "groupers": [
                    553,
                    549,
                    551
                ],
                "g.name": [
                    549
                ],
                "g": [
                    549,
                    719
                ],
                "grp.groupings": [
                    549
                ],
                "g.level": [
                    549
                ],
                "g.in_axis": [
                    549
                ],
                "tolist": [
                    553
                ],
                "ax.difference": [
                    553
                ],
                "Index": [
                    553,
                    563
                ],
                "self.grouper.is_monotonic": [
                    562
                ],
                "index": [
                    2016,
                    2017,
                    2481,
                    2513,
                    563,
                    564,
                    2487,
                    2077,
                    2079
                ],
                "np.concatenate": [
                    563,
                    1022
                ],
                "self.grouper.result_index": [
                    1832,
                    1834,
                    1772,
                    1836,
                    2512,
                    563
                ],
                "result.set_axis": [
                    564,
                    567
                ],
                "result": [
                    900,
                    902,
                    1929,
                    1935,
                    658,
                    659,
                    1938,
                    1941,
                    1944,
                    1947,
                    1950,
                    1823,
                    1951,
                    2296,
                    1827,
                    1330,
                    1444,
                    1446,
                    935,
                    936,
                    809,
                    938,
                    1447,
                    1828,
                    1831,
                    1834,
                    1836,
                    1838,
                    818,
                    946,
                    564,
                    565,
                    820,
                    567,
                    568,
                    822,
                    949,
                    953,
                    1333,
                    1334,
                    969,
                    849,
                    978,
                    980,
                    854,
                    982,
                    857,
                    1016,
                    1117,
                    735,
                    2017,
                    994,
                    2019,
                    2020,
                    2273,
                    2274,
                    1384,
                    1385,
                    748,
                    1007,
                    1010,
                    1012,
                    2293,
                    1014,
                    888,
                    2299,
                    894,
                    895
                ],
                "result.sort_index": [
                    565
                ],
                "self.obj._get_axis": [
                    567
                ],
                "self.obj._dir_additions": [
                    571
                ],
                "self._apply_whitelist": [
                    611,
                    571
                ],
                "self._internal_names_set": [
                    574
                ],
                "object.__getattribute__": [
                    575
                ],
                "AttributeError": [
                    579
                ],
                "__name__": [
                    580
                ],
                "com.pipe": [
                    606
                ],
                "com": [
                    963,
                    606
                ],
                "func": [
                    2274,
                    708,
                    2281,
                    714,
                    716,
                    2285,
                    719,
                    911,
                    721,
                    912,
                    723,
                    2288,
                    2290,
                    730,
                    925,
                    606
                ],
                "Substitution": [
                    2177,
                    2306,
                    1668,
                    1669,
                    1165,
                    1425,
                    1299,
                    1559,
                    1180,
                    1181,
                    1569,
                    1953,
                    2081,
                    2339,
                    1319,
                    2368,
                    2369,
                    583,
                    1229,
                    1359,
                    1616,
                    2130,
                    1248,
                    2146,
                    2402,
                    2403,
                    2022,
                    1642,
                    1131,
                    2162,
                    1271,
                    1148
                ],
                "Appender": [
                    2178,
                    2307,
                    1166,
                    1426,
                    1300,
                    1560,
                    1441,
                    1570,
                    2082,
                    2340,
                    1320,
                    701,
                    1230,
                    1360,
                    1361,
                    2131,
                    604,
                    2526,
                    1249,
                    2147,
                    1132,
                    2163,
                    1272,
                    1149
                ],
                "plot": [
                    608
                ],
                "GroupByPlot": [
                    608
                ],
                "self._set_group_selection": [
                    1368,
                    1757,
                    613
                ],
                "self._selected_obj": [
                    1024,
                    2016,
                    1026,
                    2400,
                    2434,
                    1030,
                    1031,
                    1768,
                    617,
                    682,
                    970,
                    621,
                    751,
                    2077
                ],
                "types.MethodType": [
                    618
                ],
                "types": [
                    618
                ],
                "self.apply": [
                    641,
                    1444,
                    644,
                    619,
                    2188,
                    2158,
                    2351,
                    2329,
                    2173,
                    2142
                ],
                "sig": [
                    627,
                    622
                ],
                "inspect.signature": [
                    622
                ],
                "inspect": [
                    622
                ],
                "sig.parameters": [
                    627
                ],
                "kwargs.get": [
                    628
                ],
                "x": [
                    1408,
                    1409,
                    1411,
                    1413,
                    1414,
                    1416,
                    1292,
                    2188,
                    1295,
                    912,
                    2329,
                    1439,
                    1444,
                    2352,
                    1226,
                    1110,
                    1244,
                    2142,
                    1384,
                    632,
                    2158,
                    1393,
                    1395,
                    1396,
                    1398,
                    1400,
                    1401,
                    1403,
                    2173,
                    1407
                ],
                "curried.__name__": [
                    636
                ],
                "curried": [
                    641,
                    636,
                    644
                ],
                "base.plotting_methods": [
                    640
                ],
                "base": [
                    640,
                    864,
                    896,
                    867,
                    837,
                    901,
                    841,
                    937,
                    876,
                    915,
                    2261,
                    856,
                    2298
                ],
                "re.search": [
                    646
                ],
                "re": [
                    646
                ],
                "err": [
                    1376,
                    647
                ],
                "self._aggregate_item_by_item": [
                    658
                ],
                "wrapper.__name__": [
                    661
                ],
                "wrapper": [
                    661,
                    662
                ],
                "inds": [
                    688,
                    684,
                    685
                ],
                "self._get_index": [
                    684
                ],
                "obj._take_with_is_copy": [
                    688
                ],
                "self.grouper.get_iterator": [
                    699
                ],
                "self._is_builtin_func": [
                    708,
                    911
                ],
                "callable": [
                    2248,
                    714,
                    2251
                ],
                "np.errstate": [
                    718
                ],
                "wraps": [
                    716
                ],
                "hasattr": [
                    721
                ],
                "nanops": [
                    721,
                    723
                ],
                "option_context": [
                    733
                ],
                "self._python_apply_general": [
                    746,
                    941,
                    735
                ],
                "_group_selection_context": [
                    1443,
                    745,
                    1296,
                    2076,
                    2015
                ],
                "format": [
                    702
                ],
                "values": [
                    1824,
                    949,
                    950,
                    951,
                    953,
                    963,
                    966,
                    969,
                    2266,
                    986,
                    2271,
                    995,
                    2278,
                    2284,
                    1006,
                    751,
                    1007,
                    1009,
                    754,
                    1010,
                    2293
                ],
                "self.grouper.apply": [
                    751
                ],
                "self._wrap_applied_output": [
                    753
                ],
                "AbstractMethodError": [
                    865,
                    868,
                    871,
                    758,
                    761
                ],
                "Iterable": [
                    757
                ],
                "ids": [
                    1763,
                    1766,
                    775,
                    776,
                    777,
                    1773,
                    782
                ],
                "_": [
                    1763,
                    775,
                    849,
                    978,
                    2481,
                    2260,
                    1813
                ],
                "ngroups": [
                    775,
                    776,
                    2288,
                    2260,
                    2269
                ],
                "self.grouper.group_info": [
                    2017,
                    1763,
                    775
                ],
                "sorter": [
                    776,
                    777,
                    792
                ],
                "get_group_index_sorter": [
                    776
                ],
                "count": [
                    777,
                    779,
                    783,
                    791,
                    792
                ],
                "np.empty": [
                    1026,
                    780,
                    791
                ],
                "np.int64": [
                    1610,
                    780,
                    793,
                    1884,
                    2333
                ],
                "run": [
                    782,
                    783,
                    784,
                    787,
                    789
                ],
                "np.r_": [
                    789,
                    782,
                    783
                ],
                "rep": [
                    787,
                    789,
                    783
                ],
                "np.diff": [
                    783
                ],
                "np.nonzero": [
                    783
                ],
                "out": [
                    1768,
                    1770,
                    1773,
                    784,
                    1776,
                    1778,
                    787,
                    1779,
                    789,
                    793
                ],
                "cumsum": [
                    784
                ],
                "ascending": [
                    786,
                    2018,
                    2078,
                    2124
                ],
                "np.repeat": [
                    787,
                    789
                ],
                "rev": [
                    792,
                    793,
                    791
                ],
                "np.intp": [
                    792,
                    1756,
                    791
                ],
                "np.arange": [
                    792,
                    1941,
                    1950
                ],
                "astype": [
                    793
                ],
                "obj.ndim": [
                    804
                ],
                "dtype": [
                    805,
                    807,
                    810,
                    817,
                    818,
                    819,
                    820
                ],
                "obj._values.dtype": [
                    805
                ],
                "obj._values": [
                    889,
                    805
                ],
                "obj.dtype": [
                    884,
                    844,
                    807
                ],
                "is_scalar": [
                    809,
                    1902
                ],
                "is_extension_array_dtype": [
                    810
                ],
                "dtype.kind": [
                    810
                ],
                "cls": [
                    1418,
                    1387,
                    1419,
                    1420,
                    1421,
                    1422,
                    1423,
                    817,
                    818
                ],
                "dtype.construct_array_type": [
                    817
                ],
                "try_cast_to_ea": [
                    818
                ],
                "numeric_only": [
                    885,
                    819,
                    1364,
                    845
                ],
                "is_numeric_dtype": [
                    884,
                    819,
                    844,
                    950
                ],
                "maybe_downcast_to_dtype": [
                    820
                ],
                "any": [
                    2474,
                    836
                ],
                "fillna": [
                    836
                ],
                "self.size": [
                    836
                ],
                "func_nm": [
                    837
                ],
                "base.cython_cast_blacklist": [
                    837
                ],
                "output": [
                    2304,
                    897,
                    902,
                    905,
                    908,
                    915,
                    2464,
                    2466,
                    2471,
                    938,
                    940,
                    2478,
                    946,
                    953,
                    955,
                    2491,
                    841,
                    2509,
                    2512,
                    2261,
                    2518,
                    2520,
                    857,
                    859,
                    862,
                    876,
                    2299,
                    2302
                ],
                "Dict": [
                    841,
                    915,
                    876,
                    2261
                ],
                "base.OutputKey": [
                    864,
                    896,
                    867,
                    901,
                    841,
                    937,
                    876,
                    915,
                    2261,
                    856,
                    2298
                ],
                "np.ndarray": [
                    864,
                    867,
                    1891,
                    841,
                    876,
                    915,
                    1108,
                    1876,
                    2261,
                    1116
                ],
                "idx": [
                    896,
                    898,
                    901,
                    903,
                    937,
                    842,
                    881,
                    917,
                    856,
                    2298,
                    2264
                ],
                "enumerate": [
                    2264,
                    2505,
                    842,
                    917
                ],
                "self._iterate_slices": [
                    2264,
                    842,
                    917,
                    882
                ],
                "obj.name": [
                    883,
                    2265,
                    843,
                    918
                ],
                "is_numeric": [
                    884,
                    885,
                    844,
                    845
                ],
                "self.grouper.transform": [
                    849
                ],
                "obj.values": [
                    849
                ],
                "how": [
                    849,
                    2262,
                    853,
                    889
                ],
                "NotImplementedError": [
                    850,
                    1375,
                    1178
                ],
                "self._transform_should_cast": [
                    853
                ],
                "self._try_cast": [
                    897,
                    902,
                    938,
                    854,
                    953
                ],
                "DataError": [
                    906,
                    860,
                    1373
                ],
                "self._wrap_transformed_output": [
                    2304,
                    862
                ],
                "DatetimeArray": [
                    876
                ],
                "agg_names": [
                    888,
                    892,
                    894,
                    895
                ],
                "self.grouper.aggregate": [
                    888
                ],
                "min_count": [
                    889,
                    1366
                ],
                "result.shape": [
                    894
                ],
                "result_column": [
                    897,
                    895
                ],
                "result_name": [
                    896,
                    895
                ],
                "result.T": [
                    1446,
                    895
                ],
                "result.ndim": [
                    900
                ],
                "self._wrap_aggregated_output": [
                    955,
                    908,
                    2302
                ],
                "AssertionError": [
                    928
                ],
                "Exception": [
                    930
                ],
                "counts": [
                    945,
                    935
                ],
                "self.grouper.agg_series": [
                    935
                ],
                "self.grouper._filter_empty_groups": [
                    943
                ],
                "mask": [
                    2433,
                    1026,
                    1027,
                    1028,
                    2434,
                    1030,
                    1031,
                    1824,
                    1827,
                    1828,
                    945,
                    953,
                    2399,
                    2400,
                    1761,
                    1766,
                    1768,
                    2284,
                    1773,
                    2285
                ],
                "counts.ravel": [
                    945
                ],
                "output.items": [
                    946
                ],
                "values.dtype": [
                    950
                ],
                "ensure_float": [
                    951
                ],
                "v": [
                    963,
                    964
                ],
                "com.not_none": [
                    963
                ],
                "v._get_axis": [
                    964
                ],
                "ax._reset_identity": [
                    965
                ],
                "not_indexed_same": [
                    968
                ],
                "concat": [
                    994,
                    969,
                    1929,
                    1007,
                    1010
                ],
                "self._selected_obj._get_axis": [
                    970
                ],
                "ax.has_duplicates": [
                    977
                ],
                "indexer": [
                    978,
                    979,
                    980
                ],
                "result.index.get_indexer_non_unique": [
                    978
                ],
                "result.index": [
                    1834,
                    1935,
                    978,
                    1938,
                    1941,
                    1947
                ],
                "ax.values": [
                    978
                ],
                "algorithms.unique1d": [
                    979
                ],
                "algorithms": [
                    979,
                    2293
                ],
                "result.take": [
                    980,
                    1951
                ],
                "result.reindex": [
                    1836,
                    982
                ],
                "reset_identity": [
                    1009,
                    986
                ],
                "group_levels": [
                    998,
                    991
                ],
                "self.grouper.levels": [
                    991
                ],
                "group_names": [
                    992,
                    999
                ],
                "self.grouper.names": [
                    992,
                    2482
                ],
                "list": [
                    1030,
                    2509,
                    1006,
                    1935,
                    1745,
                    1754
                ],
                "range": [
                    1006,
                    1935
                ],
                "self._selection_name": [
                    1012,
                    1014
                ],
                "result.name": [
                    1333,
                    1014
                ],
                "indices": [
                    1024,
                    1028,
                    1950,
                    1019,
                    1020,
                    1022,
                    1951
                ],
                "np.array": [
                    1938,
                    1756,
                    1020,
                    1110
                ],
                "np.sort": [
                    1022
                ],
                "dropna": [
                    1796,
                    1749,
                    1785,
                    1790,
                    1023
                ],
                "filtered": [
                    1024,
                    1032,
                    1031
                ],
                "self._selected_obj.take": [
                    1024
                ],
                "self._selected_obj.index": [
                    2016,
                    1026,
                    2077
                ],
                "mask.fill": [
                    1027
                ],
                "indices.astype": [
                    1028
                ],
                "T": [
                    1950,
                    1030
                ],
                "np.tile": [
                    1030
                ],
                "self._selected_obj.shape": [
                    1030
                ],
                "self._selected_obj.where": [
                    1031
                ],
                "_GroupBy": [
                    1035
                ],
                "is_object_dtype": [
                    1877,
                    1109
                ],
                "vals": [
                    1889,
                    2278,
                    2280,
                    2281,
                    1898,
                    1900,
                    1877,
                    1109,
                    1110,
                    1112,
                    1114,
                    1883,
                    1885,
                    1887
                ],
                "vals.astype": [
                    1112,
                    1898,
                    1887
                ],
                "np.bool": [
                    1112,
                    1114
                ],
                "vals.view": [
                    1114
                ],
                "np.uint8": [
                    1114,
                    2284,
                    1122
                ],
                "Tuple": [
                    1108,
                    1876
                ],
                "Type": [
                    1891,
                    2543,
                    1108,
                    1876,
                    1116
                ],
                "result.astype": [
                    1117
                ],
                "inference": [
                    1889,
                    1892,
                    1895,
                    1898,
                    1882,
                    1884,
                    1117,
                    1886
                ],
                "self._get_cythonized_result": [
                    1607,
                    1903,
                    2331,
                    1916,
                    1119
                ],
                "np.dtype": [
                    1921,
                    1122,
                    1610,
                    2195,
                    1908,
                    2333
                ],
                "objs_to_bool": [
                    1125
                ],
                "result_to_bool": [
                    1126
                ],
                "val_test": [
                    1127
                ],
                "skipna": [
                    1128,
                    1146,
                    1163
                ],
                "self._bool_agg": [
                    1146,
                    1163
                ],
                "nv.validate_groupby_func": [
                    1224,
                    1289,
                    2156,
                    1268,
                    2140
                ],
                "nv": [
                    1224,
                    1289,
                    2156,
                    1268,
                    2140
                ],
                "self._cython_agg_general": [
                    1225,
                    1242,
                    1291,
                    1372
                ],
                "mean": [
                    1226
                ],
                "median": [
                    1244
                ],
                "np.sqrt": [
                    1317,
                    1269
                ],
                "self.var": [
                    1269
                ],
                "ddof": [
                    1317,
                    1290,
                    1292,
                    1295,
                    1269
                ],
                "var": [
                    1292
                ],
                "x.var": [
                    1295
                ],
                "self._python_agg_general": [
                    1297
                ],
                "self.std": [
                    1317
                ],
                "self.count": [
                    1317
                ],
                "self.grouper.size": [
                    1330
                ],
                "self.obj.name": [
                    1333
                ],
                "self._reindex_output": [
                    1778,
                    1334
                ],
                "_local_template": [
                    1361,
                    1350
                ],
                "alias": [
                    1372
                ],
                "npfunc": [
                    1384,
                    1372
                ],
                "self.aggregate": [
                    1384
                ],
                "set_function_name": [
                    1387
                ],
                "x.to_numpy": [
                    1393,
                    1407
                ],
                "notna": [
                    1408,
                    1395
                ],
                "np.nan": [
                    1410,
                    1828,
                    1397
                ],
                "x.apply": [
                    1401,
                    1414
                ],
                "first": [
                    1401,
                    1403
                ],
                "last": [
                    1416,
                    1414
                ],
                "cls.sum": [
                    1418
                ],
                "groupby_function": [
                    1418,
                    1419,
                    1420,
                    1421,
                    1422,
                    1423
                ],
                "np.sum": [
                    1418
                ],
                "cls.prod": [
                    1419
                ],
                "np.prod": [
                    1419
                ],
                "cls.min": [
                    1420
                ],
                "np.min": [
                    1420
                ],
                "cls.max": [
                    1421
                ],
                "np.max": [
                    1421
                ],
                "cls.first": [
                    1422
                ],
                "first_compat": [
                    1422
                ],
                "cls.last": [
                    1423
                ],
                "last_compat": [
                    1423
                ],
                "classmethod": [
                    1336
                ],
                "self._apply_to_column_groupbys": [
                    1439
                ],
                "x._cython_agg_general": [
                    1439
                ],
                "x.describe": [
                    1444
                ],
                "result.unstack": [
                    1447
                ],
                "DataFrame.describe.__doc__": [
                    1441
                ],
                "DataFrame.describe": [
                    1441
                ],
                "get_resampler_for_grouping": [
                    1557
                ],
                "rule": [
                    1557
                ],
                "RollingGroupby": [
                    1567
                ],
                "ExpandingGroupby": [
                    1578
                ],
                "limit": [
                    1664,
                    1604,
                    1605,
                    1638,
                    1613,
                    2355,
                    2362,
                    2363
                ],
                "direction": [
                    1612
                ],
                "self._fill": [
                    1664,
                    1638
                ],
                "ffill": [
                    1640
                ],
                "pad": [
                    1640
                ],
                "bfill": [
                    1666
                ],
                "backfill": [
                    1666
                ],
                "valid_containers": [
                    1745,
                    1746,
                    1753,
                    1782
                ],
                "nth_values": [
                    1752,
                    1754,
                    1756
                ],
                "nth_array": [
                    1760,
                    1756,
                    1759
                ],
                "mask_left": [
                    1761,
                    1759
                ],
                "np.in1d": [
                    1760,
                    1759
                ],
                "self._cumcount_array": [
                    1760,
                    2433,
                    1759,
                    2078,
                    2399
                ],
                "mask_right": [
                    1760,
                    1761
                ],
                "result_index": [
                    1776,
                    1772,
                    1773,
                    1775
                ],
                "out.index": [
                    1773
                ],
                "CategoricalIndex": [
                    2475,
                    1775
                ],
                "out.reindex": [
                    1776
                ],
                "out.sort_index": [
                    1779
                ],
                "max_len": [
                    1824,
                    1795
                ],
                "dropped": [
                    1796,
                    1831,
                    1805,
                    1814,
                    1822
                ],
                "self.obj.dropna": [
                    1796
                ],
                "self.grouper.axis": [
                    1804
                ],
                "axis.isin": [
                    1805
                ],
                "dropped.index": [
                    1805
                ],
                "grb": [
                    1822,
                    1823
                ],
                "dropped.groupby": [
                    1822
                ],
                "sizes": [
                    1824,
                    1823
                ],
                "grb.size": [
                    1823
                ],
                "grb.nth": [
                    1823
                ],
                "mask.any": [
                    1827
                ],
                "result.loc": [
                    1828
                ],
                "is_integer_dtype": [
                    1883,
                    1895
                ],
                "is_datetime64_dtype": [
                    1885
                ],
                "np.float": [
                    1887
                ],
                "interpolation": [
                    1896,
                    1912,
                    1925
                ],
                "q": [
                    1927,
                    1929,
                    1902,
                    1911,
                    1950
                ],
                "np.float64": [
                    1921,
                    1908
                ],
                "pre_processor": [
                    1922,
                    1909
                ],
                "post_processor": [
                    1923,
                    1910
                ],
                "results": [
                    1929,
                    1915
                ],
                "qi": [
                    1924,
                    1927
                ],
                "order": [
                    1944,
                    1947,
                    1935
                ],
                "result.index.nlevels": [
                    1935
                ],
                "index_names": [
                    1938,
                    1947,
                    1941
                ],
                "result.index.names": [
                    1938,
                    1947,
                    1941
                ],
                "result.reorder_levels": [
                    1944
                ],
                "T.flatten": [
                    1950
                ],
                "reshape": [
                    1950
                ],
                "self.ngroups": [
                    2019,
                    1950
                ],
                "cumcounts": [
                    2078,
                    2079
                ],
                "na_option": [
                    2125,
                    2117
                ],
                "self._cython_transform": [
                    2144,
                    2120,
                    2190,
                    2160,
                    2175
                ],
                "method": [
                    2123
                ],
                "pct": [
                    2126
                ],
                "x.cumprod": [
                    2142
                ],
                "x.cumsum": [
                    2158
                ],
                "np.minimum.accumulate": [
                    2173
                ],
                "np.minimum": [
                    2173
                ],
                "np.maximum.accumulate": [
                    2188
                ],
                "np.maximum": [
                    2188
                ],
                "result_is_index": [
                    2292,
                    2245
                ],
                "aggregate": [
                    2301,
                    2268,
                    2245
                ],
                "post_processing": [
                    2296,
                    2295,
                    2247
                ],
                "pre_processing": [
                    2279,
                    2248,
                    2280,
                    2250,
                    2251
                ],
                "needs_values": [
                    2277,
                    2253
                ],
                "labels": [
                    2274,
                    2260
                ],
                "grouper.group_info": [
                    2260
                ],
                "base_func": [
                    2274,
                    2262
                ],
                "libgroupby": [
                    2262
                ],
                "obj._data._values": [
                    2266
                ],
                "obj._data": [
                    2266
                ],
                "result_sz": [
                    2273,
                    2269,
                    2271
                ],
                "np.zeros": [
                    2273
                ],
                "cython_dtype": [
                    2273
                ],
                "partial": [
                    2288,
                    2281,
                    2274,
                    2285
                ],
                "inferences": [
                    2280,
                    2296,
                    2275
                ],
                "needs_mask": [
                    2283
                ],
                "view": [
                    2284
                ],
                "isna": [
                    2328,
                    2284
                ],
                "needs_ngroups": [
                    2287
                ],
                "algorithms.take_nd": [
                    2293
                ],
                "freq": [
                    2350,
                    2356,
                    2328,
                    2329,
                    2365
                ],
                "fill_value": [
                    2328,
                    2329,
                    2489,
                    2513
                ],
                "x.shift": [
                    2329
                ],
                "periods": [
                    2336,
                    2329,
                    2365,
                    2353
                ],
                "x.pct_change": [
                    2352
                ],
                "fill_method": [
                    2360,
                    2361,
                    2354,
                    2363
                ],
                "filled": [
                    2363,
                    2364,
                    2366
                ],
                "fill_grp": [
                    2364,
                    2365
                ],
                "filled.groupby": [
                    2364
                ],
                "self.grouper.codes": [
                    2364
                ],
                "shifted": [
                    2365,
                    2366
                ],
                "fill_grp.shift": [
                    2365
                ],
                "self._reset_group_selection": [
                    2432,
                    2398
                ],
                "FrameOrSeries": [
                    2437,
                    2438
                ],
                "Scalar": [
                    2437
                ],
                "np.NaN": [
                    2437
                ],
                "groupings": [
                    2465,
                    2505,
                    2476,
                    2480,
                    2462,
                    2463
                ],
                "self.grouper.groupings": [
                    2462
                ],
                "ping.grouper": [
                    2475
                ],
                "ping": [
                    2480,
                    2505,
                    2475,
                    2476
                ],
                "Categorical": [
                    2475
                ],
                "levels_list": [
                    2480,
                    2482
                ],
                "ping.group_index": [
                    2480
                ],
                "sortlevel": [
                    2481
                ],
                "MultiIndex.from_product": [
                    2481
                ],
                "MultiIndex": [
                    2481
                ],
                "d": [
                    2491,
                    2486
                ],
                "self.obj._get_axis_name": [
                    2487
                ],
                "output.reindex": [
                    2491
                ],
                "in_axis_grps": [
                    2504,
                    2507
                ],
                "i": [
                    2505
                ],
                "ping.name": [
                    2505
                ],
                "ping.in_axis": [
                    2505
                ],
                "g_nums": [
                    2507,
                    2518
                ],
                "g_names": [
                    2507,
                    2509
                ],
                "output.drop": [
                    2509
                ],
                "reindex": [
                    2512
                ],
                "output.set_index": [
                    2512
                ],
                "output.reset_index": [
                    2520,
                    2518
                ],
                "GroupBy._add_numeric_operations": [
                    2523
                ],
                "GroupBy": [
                    2523,
                    2541,
                    2526,
                    2543
                ],
                "klass": [
                    2551,
                    2547,
                    2555,
                    2543
                ],
                "SeriesGroupBy": [
                    2547
                ],
                "DataFrameGroupBy": [
                    2551
                ],
                "by": [
                    2557
                ],
                "GroupBy.__doc__": [
                    2526
                ]
            },
            "filtered_variables_in_file": {
                "_common_see_also": [
                    2178,
                    2307,
                    1669,
                    1166,
                    1426,
                    1300,
                    1560,
                    1181,
                    1570,
                    2082,
                    2340,
                    1320,
                    2369,
                    66,
                    1230,
                    1360,
                    2131,
                    1249,
                    2147,
                    2403,
                    1132,
                    2163,
                    1272,
                    1149
                ],
                "_apply_docs": [
                    73,
                    702,
                    703
                ],
                "_pipe_template": [
                    192,
                    604
                ],
                "_transform_template": [
                    246
                ],
                "PandasObject": [
                    313,
                    357
                ],
                "self._groupby": [
                    333,
                    326,
                    319
                ],
                "self": [
                    512,
                    513,
                    514,
                    515,
                    1024,
                    517,
                    1026,
                    1030,
                    1031,
                    526,
                    528,
                    529,
                    1557,
                    539,
                    2076,
                    541,
                    2077,
                    543,
                    544,
                    1567,
                    2078,
                    548,
                    553,
                    554,
                    1578,
                    562,
                    563,
                    564,
                    565,
                    567,
                    571,
                    574,
                    575,
                    576,
                    577,
                    580,
                    1607,
                    2120,
                    606,
                    1119,
                    2142,
                    2144,
                    611,
                    2462,
                    613,
                    1638,
                    617,
                    619,
                    621,
                    2158,
                    2160,
                    629,
                    1146,
                    2173,
                    2175,
                    1664,
                    641,
                    644,
                    1163,
                    2188,
                    653,
                    2190,
                    658,
                    682,
                    684,
                    688,
                    699,
                    708,
                    1225,
                    2258,
                    2264,
                    1242,
                    1757,
                    735,
                    1759,
                    1760,
                    1763,
                    1768,
                    745,
                    746,
                    1769,
                    1772,
                    751,
                    1775,
                    753,
                    754,
                    1778,
                    1779,
                    1269,
                    758,
                    761,
                    2302,
                    2304,
                    1796,
                    775,
                    1799,
                    1291,
                    1804,
                    1296,
                    1297,
                    1815,
                    1816,
                    1817,
                    1818,
                    1819,
                    2329,
                    2331,
                    1822,
                    1317,
                    1831,
                    1832,
                    1834,
                    1836,
                    2351,
                    1330,
                    1332,
                    1333,
                    1334,
                    2363,
                    2364,
                    319,
                    323,
                    836,
                    326,
                    842,
                    331,
                    333,
                    849,
                    853,
                    854,
                    1368,
                    1372,
                    862,
                    2398,
                    2399,
                    865,
                    2400,
                    868,
                    871,
                    1384,
                    1903,
                    882,
                    888,
                    378,
                    1916,
                    383,
                    2432,
                    897,
                    2433,
                    2434,
                    902,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    908,
                    911,
                    917,
                    919,
                    409,
                    412,
                    413,
                    414,
                    415,
                    1439,
                    1950,
                    418,
                    1443,
                    1444,
                    1445,
                    422,
                    935,
                    2470,
                    938,
                    941,
                    943,
                    2482,
                    436,
                    437,
                    2485,
                    2487,
                    441,
                    442,
                    953,
                    955,
                    449,
                    450,
                    964,
                    969,
                    970,
                    2512,
                    980,
                    982,
                    471,
                    472,
                    984,
                    987,
                    991,
                    992,
                    2015,
                    2016,
                    2017,
                    484,
                    996,
                    2019,
                    1007,
                    1010,
                    500,
                    1012,
                    1014,
                    506
                ],
                "groupby": [
                    344,
                    345,
                    343,
                    319
                ],
                "self.plot": [
                    331,
                    323
                ],
                "args": [
                    323,
                    1224,
                    713,
                    1289,
                    331,
                    1578,
                    2156,
                    719,
                    912,
                    658,
                    1268,
                    1557,
                    632,
                    2140,
                    606,
                    1567
                ],
                "kwargs": [
                    1289,
                    1292,
                    1295,
                    912,
                    658,
                    1557,
                    1567,
                    1444,
                    1578,
                    323,
                    1224,
                    713,
                    1226,
                    331,
                    719,
                    849,
                    1363,
                    1364,
                    1365,
                    1366,
                    1244,
                    1245,
                    606,
                    1372,
                    2140,
                    2142,
                    2144,
                    2156,
                    2158,
                    2160,
                    2290,
                    628,
                    629,
                    1268,
                    1269,
                    632
                ],
                "f.__name__": [
                    325
                ],
                "f": [
                    1295,
                    912,
                    1297,
                    935,
                    941,
                    325,
                    326,
                    333,
                    723,
                    730,
                    735,
                    617,
                    618,
                    746,
                    1387,
                    621,
                    494,
                    622,
                    751,
                    1389,
                    632
                ],
                "self._groupby.apply": [
                    333,
                    326
                ],
                "name": [
                    640,
                    901,
                    658,
                    661,
                    918,
                    937,
                    2298,
                    684,
                    686,
                    331,
                    843,
                    1359,
                    856,
                    2265,
                    611,
                    484,
                    617,
                    619,
                    1387,
                    621,
                    494,
                    498,
                    883,
                    500,
                    506,
                    636
                ],
                "attr": [
                    576,
                    577,
                    580,
                    335,
                    574,
                    575
                ],
                "groupby._set_group_selection": [
                    343
                ],
                "groupby._reset_group_selection": [
                    345
                ],
                "contextmanager": [
                    338
                ],
                "_KeysArgType": [
                    364,
                    2529,
                    348
                ],
                "Union": [
                    876,
                    348,
                    1670
                ],
                "Hashable": [
                    352,
                    353,
                    349,
                    350,
                    351
                ],
                "List": [
                    352,
                    1670,
                    350
                ],
                "Callable": [
                    352,
                    351
                ],
                "Mapping": [
                    864,
                    353,
                    867
                ],
                "SelectionMixin": [
                    357
                ],
                "_group_selection": [
                    358
                ],
                "_apply_whitelist": [
                    359
                ],
                "FrozenSet": [
                    359
                ],
                "NDFrame": [
                    2528,
                    363,
                    380
                ],
                "Optional": [
                    2529,
                    1891,
                    1670,
                    364,
                    1876
                ],
                "self._selection": [
                    512,
                    378,
                    517
                ],
                "selection": [
                    378,
                    2562
                ],
                "obj": [
                    897,
                    386,
                    902,
                    402,
                    403,
                    917,
                    918,
                    412,
                    413,
                    925,
                    804,
                    805,
                    807,
                    935,
                    681,
                    682,
                    938,
                    2553,
                    688,
                    2556,
                    842,
                    843,
                    844,
                    849,
                    854,
                    2264,
                    2265,
                    2266,
                    2544,
                    882,
                    883,
                    884,
                    2548,
                    889,
                    380,
                    381
                ],
                "obj._consolidate_inplace": [
                    381
                ],
                "self.level": [
                    1817,
                    1799,
                    383
                ],
                "level": [
                    2559,
                    406,
                    383
                ],
                "as_index": [
                    385,
                    2563,
                    391
                ],
                "DataFrame": [
                    1441,
                    386,
                    1413,
                    1670,
                    1427,
                    2548,
                    1400
                ],
                "axis": [
                    388,
                    1414,
                    2187,
                    1804,
                    1805,
                    2188,
                    405,
                    2328,
                    2329,
                    413,
                    2350,
                    2357,
                    2127,
                    1244,
                    2141,
                    2142,
                    2157,
                    2158,
                    1401,
                    2172,
                    2173,
                    2558
                ],
                "self.as_index": [
                    391,
                    1769,
                    2485,
                    987,
                    541,
                    1822
                ],
                "self.keys": [
                    392,
                    1815,
                    1799
                ],
                "keys": [
                    392,
                    1006,
                    751,
                    1007,
                    754,
                    404,
                    990
                ],
                "self.sort": [
                    393,
                    1818,
                    1779,
                    1822
                ],
                "sort": [
                    393,
                    2564,
                    407
                ],
                "self.group_keys": [
                    984,
                    394
                ],
                "group_keys": [
                    394,
                    2565,
                    997,
                    990
                ],
                "self.squeeze": [
                    395
                ],
                "squeeze": [
                    395,
                    2566
                ],
                "self.observed": [
                    396,
                    2470,
                    1775
                ],
                "observed": [
                    408,
                    396,
                    2567
                ],
                "self.mutated": [
                    409,
                    754,
                    1819,
                    397
                ],
                "mutated": [
                    2568,
                    754,
                    397,
                    751
                ],
                "grouper": [
                    2560,
                    1805,
                    399,
                    1822,
                    402,
                    2258,
                    2260,
                    1813,
                    414
                ],
                "exclusions": [
                    2561,
                    402,
                    415
                ],
                "get_grouper": [
                    402,
                    1813
                ],
                "self.obj": [
                    512,
                    576,
                    514,
                    515,
                    548,
                    517,
                    1796,
                    1831,
                    2487,
                    653,
                    1332,
                    1333,
                    567,
                    571,
                    412,
                    699,
                    543
                ],
                "self.axis": [
                    1024,
                    1796,
                    1816,
                    413,
                    1445,
                    688,
                    564,
                    565,
                    567,
                    2487,
                    699,
                    964,
                    969,
                    970,
                    980,
                    982,
                    996,
                    1384,
                    751,
                    1007,
                    1010,
                    629
                ],
                "obj._get_axis_number": [
                    413
                ],
                "self.grouper": [
                    775,
                    1804,
                    919,
                    539,
                    414,
                    2462,
                    935,
                    1832,
                    1834,
                    1836,
                    943,
                    562,
                    563,
                    1330,
                    437,
                    2482,
                    442,
                    699,
                    2364,
                    450,
                    2512,
                    849,
                    2258,
                    991,
                    992,
                    2017,
                    1763,
                    1772,
                    751,
                    888
                ],
                "self.exclusions": [
                    415
                ],
                "self.groups": [
                    418
                ],
                "object.__repr__": [
                    422
                ],
                "self._assure_grouper": [
                    441,
                    436,
                    449
                ],
                "self.grouper.groups": [
                    437
                ],
                "self.grouper.ngroups": [
                    442,
                    919
                ],
                "self.grouper.indices": [
                    450
                ],
                "s": [
                    493,
                    461,
                    463
                ],
                "datetime.datetime": [
                    461
                ],
                "datetime": [
                    461
                ],
                "Timestamp": [
                    464,
                    462
                ],
                "key": [
                    896,
                    897,
                    901,
                    902,
                    937,
                    938,
                    462,
                    2299,
                    464,
                    466,
                    946,
                    856,
                    857,
                    2298,
                    953
                ],
                "np.datetime64": [
                    463
                ],
                "np": [
                    1921,
                    1026,
                    1410,
                    2437,
                    1030,
                    1418,
                    1419,
                    780,
                    1420,
                    782,
                    783,
                    1421,
                    2188,
                    1938,
                    787,
                    915,
                    789,
                    1941,
                    791,
                    792,
                    793,
                    2195,
                    2333,
                    1950,
                    1828,
                    1317,
                    563,
                    841,
                    1610,
                    718,
                    463,
                    1108,
                    1876,
                    1110,
                    2261,
                    1112,
                    1114,
                    1116,
                    1756,
                    1884,
                    1759,
                    864,
                    1760,
                    1122,
                    867,
                    1887,
                    1891,
                    2273,
                    876,
                    2284,
                    1908,
                    1269,
                    1397,
                    1020,
                    2173,
                    1022
                ],
                "asm8": [
                    464
                ],
                "names": [
                    484,
                    494,
                    498,
                    468,
                    500,
                    476
                ],
                "self.indices": [
                    472,
                    484,
                    500,
                    471
                ],
                "index_sample": [
                    481,
                    493,
                    497,
                    472,
                    474,
                    477
                ],
                "name_sample": [
                    481,
                    476,
                    478
                ],
                "msg": [
                    480,
                    2118,
                    487,
                    2119,
                    491,
                    479
                ],
                "converters": [
                    493,
                    494
                ],
                "get_converter": [
                    497,
                    493
                ],
                "n": [
                    2433,
                    1795,
                    2399,
                    494,
                    1746,
                    1782,
                    1751,
                    1752,
                    1753,
                    1754,
                    1823
                ],
                "converter": [
                    497,
                    498
                ],
                "self.indices.get": [
                    500
                ],
                "self._get_indices": [
                    506,
                    563
                ],
                "Series": [
                    512,
                    2017,
                    1226,
                    1292,
                    2544,
                    1012,
                    757,
                    1332,
                    1244,
                    2079
                ],
                "self._group_selection": [
                    544,
                    513,
                    514,
                    553,
                    526,
                    528
                ],
                "cache_readonly": [
                    508
                ],
                "self._reset_cache": [
                    529,
                    554
                ],
                "grp": [
                    539,
                    549,
                    542
                ],
                "self.obj.ndim": [
                    653,
                    543
                ],
                "ax": [
                    964,
                    548,
                    965,
                    553,
                    970,
                    977,
                    978,
                    982
                ],
                "self.obj._info_axis": [
                    548
                ],
                "groupers": [
                    553,
                    549,
                    551
                ],
                "g.name": [
                    549
                ],
                "g": [
                    549,
                    719
                ],
                "grp.groupings": [
                    549
                ],
                "g.level": [
                    549
                ],
                "g.in_axis": [
                    549
                ],
                "tolist": [
                    553
                ],
                "ax.difference": [
                    553
                ],
                "Index": [
                    553,
                    563
                ],
                "self.grouper.is_monotonic": [
                    562
                ],
                "index": [
                    2016,
                    2017,
                    2481,
                    2513,
                    563,
                    564,
                    2487,
                    2077,
                    2079
                ],
                "np.concatenate": [
                    563,
                    1022
                ],
                "self.grouper.result_index": [
                    1832,
                    1834,
                    1772,
                    1836,
                    2512,
                    563
                ],
                "result.set_axis": [
                    564,
                    567
                ],
                "result": [
                    900,
                    902,
                    1929,
                    1935,
                    658,
                    659,
                    1938,
                    1941,
                    1944,
                    1947,
                    1950,
                    1823,
                    1951,
                    2296,
                    1827,
                    1330,
                    1444,
                    1446,
                    935,
                    936,
                    809,
                    938,
                    1447,
                    1828,
                    1831,
                    1834,
                    1836,
                    1838,
                    818,
                    946,
                    564,
                    565,
                    820,
                    567,
                    568,
                    822,
                    949,
                    953,
                    1333,
                    1334,
                    969,
                    849,
                    978,
                    980,
                    854,
                    982,
                    857,
                    1016,
                    1117,
                    735,
                    2017,
                    994,
                    2019,
                    2020,
                    2273,
                    2274,
                    1384,
                    1385,
                    748,
                    1007,
                    1010,
                    1012,
                    2293,
                    1014,
                    888,
                    2299,
                    894,
                    895
                ],
                "result.sort_index": [
                    565
                ],
                "self.obj._get_axis": [
                    567
                ],
                "self.obj._dir_additions": [
                    571
                ],
                "self._apply_whitelist": [
                    611,
                    571
                ],
                "self._internal_names_set": [
                    574
                ],
                "object.__getattribute__": [
                    575
                ],
                "com.pipe": [
                    606
                ],
                "com": [
                    963,
                    606
                ],
                "func": [
                    2274,
                    708,
                    2281,
                    714,
                    716,
                    2285,
                    719,
                    911,
                    721,
                    912,
                    723,
                    2288,
                    2290,
                    730,
                    925,
                    606
                ],
                "Substitution": [
                    2177,
                    2306,
                    1668,
                    1669,
                    1165,
                    1425,
                    1299,
                    1559,
                    1180,
                    1181,
                    1569,
                    1953,
                    2081,
                    2339,
                    1319,
                    2368,
                    2369,
                    583,
                    1229,
                    1359,
                    1616,
                    2130,
                    1248,
                    2146,
                    2402,
                    2403,
                    2022,
                    1642,
                    1131,
                    2162,
                    1271,
                    1148
                ],
                "Appender": [
                    2178,
                    2307,
                    1166,
                    1426,
                    1300,
                    1560,
                    1441,
                    1570,
                    2082,
                    2340,
                    1320,
                    701,
                    1230,
                    1360,
                    1361,
                    2131,
                    604,
                    2526,
                    1249,
                    2147,
                    1132,
                    2163,
                    1272,
                    1149
                ],
                "plot": [
                    608
                ],
                "GroupByPlot": [
                    608
                ],
                "self._set_group_selection": [
                    1368,
                    1757,
                    613
                ],
                "self._selected_obj": [
                    1024,
                    2016,
                    1026,
                    2400,
                    2434,
                    1030,
                    1031,
                    1768,
                    617,
                    682,
                    970,
                    621,
                    751,
                    2077
                ],
                "types.MethodType": [
                    618
                ],
                "types": [
                    618
                ],
                "self.apply": [
                    641,
                    1444,
                    644,
                    619,
                    2188,
                    2158,
                    2351,
                    2329,
                    2173,
                    2142
                ],
                "sig": [
                    627,
                    622
                ],
                "inspect.signature": [
                    622
                ],
                "inspect": [
                    622
                ],
                "sig.parameters": [
                    627
                ],
                "kwargs.get": [
                    628
                ],
                "x": [
                    1408,
                    1409,
                    1411,
                    1413,
                    1414,
                    1416,
                    1292,
                    2188,
                    1295,
                    912,
                    2329,
                    1439,
                    1444,
                    2352,
                    1226,
                    1110,
                    1244,
                    2142,
                    1384,
                    632,
                    2158,
                    1393,
                    1395,
                    1396,
                    1398,
                    1400,
                    1401,
                    1403,
                    2173,
                    1407
                ],
                "curried.__name__": [
                    636
                ],
                "curried": [
                    641,
                    636,
                    644
                ],
                "base.plotting_methods": [
                    640
                ],
                "base": [
                    640,
                    864,
                    896,
                    867,
                    837,
                    901,
                    841,
                    937,
                    876,
                    915,
                    2261,
                    856,
                    2298
                ],
                "re.search": [
                    646
                ],
                "re": [
                    646
                ],
                "err": [
                    1376,
                    647
                ],
                "self._aggregate_item_by_item": [
                    658
                ],
                "wrapper.__name__": [
                    661
                ],
                "wrapper": [
                    661,
                    662
                ],
                "inds": [
                    688,
                    684,
                    685
                ],
                "self._get_index": [
                    684
                ],
                "obj._take_with_is_copy": [
                    688
                ],
                "self.grouper.get_iterator": [
                    699
                ],
                "self._is_builtin_func": [
                    708,
                    911
                ],
                "np.errstate": [
                    718
                ],
                "wraps": [
                    716
                ],
                "nanops": [
                    721,
                    723
                ],
                "option_context": [
                    733
                ],
                "self._python_apply_general": [
                    746,
                    941,
                    735
                ],
                "_group_selection_context": [
                    1443,
                    745,
                    1296,
                    2076,
                    2015
                ],
                "values": [
                    1824,
                    949,
                    950,
                    951,
                    953,
                    963,
                    966,
                    969,
                    2266,
                    986,
                    2271,
                    995,
                    2278,
                    2284,
                    1006,
                    751,
                    1007,
                    1009,
                    754,
                    1010,
                    2293
                ],
                "self.grouper.apply": [
                    751
                ],
                "self._wrap_applied_output": [
                    753
                ],
                "AbstractMethodError": [
                    865,
                    868,
                    871,
                    758,
                    761
                ],
                "Iterable": [
                    757
                ],
                "ids": [
                    1763,
                    1766,
                    775,
                    776,
                    777,
                    1773,
                    782
                ],
                "_": [
                    1763,
                    775,
                    849,
                    978,
                    2481,
                    2260,
                    1813
                ],
                "ngroups": [
                    775,
                    776,
                    2288,
                    2260,
                    2269
                ],
                "self.grouper.group_info": [
                    2017,
                    1763,
                    775
                ],
                "sorter": [
                    776,
                    777,
                    792
                ],
                "get_group_index_sorter": [
                    776
                ],
                "count": [
                    777,
                    779,
                    783,
                    791,
                    792
                ],
                "np.empty": [
                    1026,
                    780,
                    791
                ],
                "np.int64": [
                    1610,
                    780,
                    793,
                    1884,
                    2333
                ],
                "run": [
                    782,
                    783,
                    784,
                    787,
                    789
                ],
                "np.r_": [
                    789,
                    782,
                    783
                ],
                "rep": [
                    787,
                    789,
                    783
                ],
                "np.diff": [
                    783
                ],
                "np.nonzero": [
                    783
                ],
                "out": [
                    1768,
                    1770,
                    1773,
                    784,
                    1776,
                    1778,
                    787,
                    1779,
                    789,
                    793
                ],
                "cumsum": [
                    784
                ],
                "ascending": [
                    786,
                    2018,
                    2078,
                    2124
                ],
                "np.repeat": [
                    787,
                    789
                ],
                "rev": [
                    792,
                    793,
                    791
                ],
                "np.intp": [
                    792,
                    1756,
                    791
                ],
                "np.arange": [
                    792,
                    1941,
                    1950
                ],
                "astype": [
                    793
                ],
                "obj.ndim": [
                    804
                ],
                "dtype": [
                    805,
                    807,
                    810,
                    817,
                    818,
                    819,
                    820
                ],
                "obj._values.dtype": [
                    805
                ],
                "obj._values": [
                    889,
                    805
                ],
                "obj.dtype": [
                    884,
                    844,
                    807
                ],
                "is_scalar": [
                    809,
                    1902
                ],
                "is_extension_array_dtype": [
                    810
                ],
                "dtype.kind": [
                    810
                ],
                "cls": [
                    1418,
                    1387,
                    1419,
                    1420,
                    1421,
                    1422,
                    1423,
                    817,
                    818
                ],
                "dtype.construct_array_type": [
                    817
                ],
                "try_cast_to_ea": [
                    818
                ],
                "numeric_only": [
                    885,
                    819,
                    1364,
                    845
                ],
                "is_numeric_dtype": [
                    884,
                    819,
                    844,
                    950
                ],
                "maybe_downcast_to_dtype": [
                    820
                ],
                "fillna": [
                    836
                ],
                "self.size": [
                    836
                ],
                "func_nm": [
                    837
                ],
                "base.cython_cast_blacklist": [
                    837
                ],
                "output": [
                    2304,
                    897,
                    902,
                    905,
                    908,
                    915,
                    2464,
                    2466,
                    2471,
                    938,
                    940,
                    2478,
                    946,
                    953,
                    955,
                    2491,
                    841,
                    2509,
                    2512,
                    2261,
                    2518,
                    2520,
                    857,
                    859,
                    862,
                    876,
                    2299,
                    2302
                ],
                "Dict": [
                    841,
                    915,
                    876,
                    2261
                ],
                "base.OutputKey": [
                    864,
                    896,
                    867,
                    901,
                    841,
                    937,
                    876,
                    915,
                    2261,
                    856,
                    2298
                ],
                "np.ndarray": [
                    864,
                    867,
                    1891,
                    841,
                    876,
                    915,
                    1108,
                    1876,
                    2261,
                    1116
                ],
                "idx": [
                    896,
                    898,
                    901,
                    903,
                    937,
                    842,
                    881,
                    917,
                    856,
                    2298,
                    2264
                ],
                "self._iterate_slices": [
                    2264,
                    842,
                    917,
                    882
                ],
                "obj.name": [
                    883,
                    2265,
                    843,
                    918
                ],
                "is_numeric": [
                    884,
                    885,
                    844,
                    845
                ],
                "self.grouper.transform": [
                    849
                ],
                "obj.values": [
                    849
                ],
                "how": [
                    849,
                    2262,
                    853,
                    889
                ],
                "self._transform_should_cast": [
                    853
                ],
                "self._try_cast": [
                    897,
                    902,
                    938,
                    854,
                    953
                ],
                "DataError": [
                    906,
                    860,
                    1373
                ],
                "self._wrap_transformed_output": [
                    2304,
                    862
                ],
                "DatetimeArray": [
                    876
                ],
                "agg_names": [
                    888,
                    892,
                    894,
                    895
                ],
                "self.grouper.aggregate": [
                    888
                ],
                "min_count": [
                    889,
                    1366
                ],
                "result.shape": [
                    894
                ],
                "result_column": [
                    897,
                    895
                ],
                "result_name": [
                    896,
                    895
                ],
                "result.T": [
                    1446,
                    895
                ],
                "result.ndim": [
                    900
                ],
                "self._wrap_aggregated_output": [
                    955,
                    908,
                    2302
                ],
                "counts": [
                    945,
                    935
                ],
                "self.grouper.agg_series": [
                    935
                ],
                "self.grouper._filter_empty_groups": [
                    943
                ],
                "mask": [
                    2433,
                    1026,
                    1027,
                    1028,
                    2434,
                    1030,
                    1031,
                    1824,
                    1827,
                    1828,
                    945,
                    953,
                    2399,
                    2400,
                    1761,
                    1766,
                    1768,
                    2284,
                    1773,
                    2285
                ],
                "counts.ravel": [
                    945
                ],
                "output.items": [
                    946
                ],
                "values.dtype": [
                    950
                ],
                "ensure_float": [
                    951
                ],
                "v": [
                    963,
                    964
                ],
                "com.not_none": [
                    963
                ],
                "v._get_axis": [
                    964
                ],
                "ax._reset_identity": [
                    965
                ],
                "not_indexed_same": [
                    968
                ],
                "concat": [
                    994,
                    969,
                    1929,
                    1007,
                    1010
                ],
                "self._selected_obj._get_axis": [
                    970
                ],
                "ax.has_duplicates": [
                    977
                ],
                "indexer": [
                    978,
                    979,
                    980
                ],
                "result.index.get_indexer_non_unique": [
                    978
                ],
                "result.index": [
                    1834,
                    1935,
                    978,
                    1938,
                    1941,
                    1947
                ],
                "ax.values": [
                    978
                ],
                "algorithms.unique1d": [
                    979
                ],
                "algorithms": [
                    979,
                    2293
                ],
                "result.take": [
                    980,
                    1951
                ],
                "result.reindex": [
                    1836,
                    982
                ],
                "reset_identity": [
                    1009,
                    986
                ],
                "group_levels": [
                    998,
                    991
                ],
                "self.grouper.levels": [
                    991
                ],
                "group_names": [
                    992,
                    999
                ],
                "self.grouper.names": [
                    992,
                    2482
                ],
                "self._selection_name": [
                    1012,
                    1014
                ],
                "result.name": [
                    1333,
                    1014
                ],
                "indices": [
                    1024,
                    1028,
                    1950,
                    1019,
                    1020,
                    1022,
                    1951
                ],
                "np.array": [
                    1938,
                    1756,
                    1020,
                    1110
                ],
                "np.sort": [
                    1022
                ],
                "dropna": [
                    1796,
                    1749,
                    1785,
                    1790,
                    1023
                ],
                "filtered": [
                    1024,
                    1032,
                    1031
                ],
                "self._selected_obj.take": [
                    1024
                ],
                "self._selected_obj.index": [
                    2016,
                    1026,
                    2077
                ],
                "mask.fill": [
                    1027
                ],
                "indices.astype": [
                    1028
                ],
                "T": [
                    1950,
                    1030
                ],
                "np.tile": [
                    1030
                ],
                "self._selected_obj.shape": [
                    1030
                ],
                "self._selected_obj.where": [
                    1031
                ],
                "_GroupBy": [
                    1035
                ],
                "is_object_dtype": [
                    1877,
                    1109
                ],
                "vals": [
                    1889,
                    2278,
                    2280,
                    2281,
                    1898,
                    1900,
                    1877,
                    1109,
                    1110,
                    1112,
                    1114,
                    1883,
                    1885,
                    1887
                ],
                "vals.astype": [
                    1112,
                    1898,
                    1887
                ],
                "np.bool": [
                    1112,
                    1114
                ],
                "vals.view": [
                    1114
                ],
                "np.uint8": [
                    1114,
                    2284,
                    1122
                ],
                "Tuple": [
                    1108,
                    1876
                ],
                "Type": [
                    1891,
                    2543,
                    1108,
                    1876,
                    1116
                ],
                "result.astype": [
                    1117
                ],
                "inference": [
                    1889,
                    1892,
                    1895,
                    1898,
                    1882,
                    1884,
                    1117,
                    1886
                ],
                "self._get_cythonized_result": [
                    1607,
                    1903,
                    2331,
                    1916,
                    1119
                ],
                "np.dtype": [
                    1921,
                    1122,
                    1610,
                    2195,
                    1908,
                    2333
                ],
                "objs_to_bool": [
                    1125
                ],
                "result_to_bool": [
                    1126
                ],
                "val_test": [
                    1127
                ],
                "skipna": [
                    1128,
                    1146,
                    1163
                ],
                "self._bool_agg": [
                    1146,
                    1163
                ],
                "nv.validate_groupby_func": [
                    1224,
                    1289,
                    2156,
                    1268,
                    2140
                ],
                "nv": [
                    1224,
                    1289,
                    2156,
                    1268,
                    2140
                ],
                "self._cython_agg_general": [
                    1225,
                    1242,
                    1291,
                    1372
                ],
                "mean": [
                    1226
                ],
                "median": [
                    1244
                ],
                "np.sqrt": [
                    1317,
                    1269
                ],
                "self.var": [
                    1269
                ],
                "ddof": [
                    1317,
                    1290,
                    1292,
                    1295,
                    1269
                ],
                "var": [
                    1292
                ],
                "x.var": [
                    1295
                ],
                "self._python_agg_general": [
                    1297
                ],
                "self.std": [
                    1317
                ],
                "self.count": [
                    1317
                ],
                "self.grouper.size": [
                    1330
                ],
                "self.obj.name": [
                    1333
                ],
                "self._reindex_output": [
                    1778,
                    1334
                ],
                "_local_template": [
                    1361,
                    1350
                ],
                "alias": [
                    1372
                ],
                "npfunc": [
                    1384,
                    1372
                ],
                "self.aggregate": [
                    1384
                ],
                "set_function_name": [
                    1387
                ],
                "x.to_numpy": [
                    1393,
                    1407
                ],
                "notna": [
                    1408,
                    1395
                ],
                "np.nan": [
                    1410,
                    1828,
                    1397
                ],
                "x.apply": [
                    1401,
                    1414
                ],
                "first": [
                    1401,
                    1403
                ],
                "last": [
                    1416,
                    1414
                ],
                "cls.sum": [
                    1418
                ],
                "groupby_function": [
                    1418,
                    1419,
                    1420,
                    1421,
                    1422,
                    1423
                ],
                "np.sum": [
                    1418
                ],
                "cls.prod": [
                    1419
                ],
                "np.prod": [
                    1419
                ],
                "cls.min": [
                    1420
                ],
                "np.min": [
                    1420
                ],
                "cls.max": [
                    1421
                ],
                "np.max": [
                    1421
                ],
                "cls.first": [
                    1422
                ],
                "first_compat": [
                    1422
                ],
                "cls.last": [
                    1423
                ],
                "last_compat": [
                    1423
                ],
                "self._apply_to_column_groupbys": [
                    1439
                ],
                "x._cython_agg_general": [
                    1439
                ],
                "x.describe": [
                    1444
                ],
                "result.unstack": [
                    1447
                ],
                "DataFrame.describe.__doc__": [
                    1441
                ],
                "DataFrame.describe": [
                    1441
                ],
                "get_resampler_for_grouping": [
                    1557
                ],
                "rule": [
                    1557
                ],
                "RollingGroupby": [
                    1567
                ],
                "ExpandingGroupby": [
                    1578
                ],
                "limit": [
                    1664,
                    1604,
                    1605,
                    1638,
                    1613,
                    2355,
                    2362,
                    2363
                ],
                "direction": [
                    1612
                ],
                "self._fill": [
                    1664,
                    1638
                ],
                "ffill": [
                    1640
                ],
                "pad": [
                    1640
                ],
                "bfill": [
                    1666
                ],
                "backfill": [
                    1666
                ],
                "valid_containers": [
                    1745,
                    1746,
                    1753,
                    1782
                ],
                "nth_values": [
                    1752,
                    1754,
                    1756
                ],
                "nth_array": [
                    1760,
                    1756,
                    1759
                ],
                "mask_left": [
                    1761,
                    1759
                ],
                "np.in1d": [
                    1760,
                    1759
                ],
                "self._cumcount_array": [
                    1760,
                    2433,
                    1759,
                    2078,
                    2399
                ],
                "mask_right": [
                    1760,
                    1761
                ],
                "result_index": [
                    1776,
                    1772,
                    1773,
                    1775
                ],
                "out.index": [
                    1773
                ],
                "CategoricalIndex": [
                    2475,
                    1775
                ],
                "out.reindex": [
                    1776
                ],
                "out.sort_index": [
                    1779
                ],
                "max_len": [
                    1824,
                    1795
                ],
                "dropped": [
                    1796,
                    1831,
                    1805,
                    1814,
                    1822
                ],
                "self.obj.dropna": [
                    1796
                ],
                "self.grouper.axis": [
                    1804
                ],
                "axis.isin": [
                    1805
                ],
                "dropped.index": [
                    1805
                ],
                "grb": [
                    1822,
                    1823
                ],
                "dropped.groupby": [
                    1822
                ],
                "sizes": [
                    1824,
                    1823
                ],
                "grb.size": [
                    1823
                ],
                "grb.nth": [
                    1823
                ],
                "mask.any": [
                    1827
                ],
                "result.loc": [
                    1828
                ],
                "is_integer_dtype": [
                    1883,
                    1895
                ],
                "is_datetime64_dtype": [
                    1885
                ],
                "np.float": [
                    1887
                ],
                "interpolation": [
                    1896,
                    1912,
                    1925
                ],
                "q": [
                    1927,
                    1929,
                    1902,
                    1911,
                    1950
                ],
                "np.float64": [
                    1921,
                    1908
                ],
                "pre_processor": [
                    1922,
                    1909
                ],
                "post_processor": [
                    1923,
                    1910
                ],
                "results": [
                    1929,
                    1915
                ],
                "qi": [
                    1924,
                    1927
                ],
                "order": [
                    1944,
                    1947,
                    1935
                ],
                "result.index.nlevels": [
                    1935
                ],
                "index_names": [
                    1938,
                    1947,
                    1941
                ],
                "result.index.names": [
                    1938,
                    1947,
                    1941
                ],
                "result.reorder_levels": [
                    1944
                ],
                "T.flatten": [
                    1950
                ],
                "reshape": [
                    1950
                ],
                "self.ngroups": [
                    2019,
                    1950
                ],
                "cumcounts": [
                    2078,
                    2079
                ],
                "na_option": [
                    2125,
                    2117
                ],
                "self._cython_transform": [
                    2144,
                    2120,
                    2190,
                    2160,
                    2175
                ],
                "method": [
                    2123
                ],
                "pct": [
                    2126
                ],
                "x.cumprod": [
                    2142
                ],
                "x.cumsum": [
                    2158
                ],
                "np.minimum.accumulate": [
                    2173
                ],
                "np.minimum": [
                    2173
                ],
                "np.maximum.accumulate": [
                    2188
                ],
                "np.maximum": [
                    2188
                ],
                "result_is_index": [
                    2292,
                    2245
                ],
                "aggregate": [
                    2301,
                    2268,
                    2245
                ],
                "post_processing": [
                    2296,
                    2295,
                    2247
                ],
                "pre_processing": [
                    2279,
                    2248,
                    2280,
                    2250,
                    2251
                ],
                "needs_values": [
                    2277,
                    2253
                ],
                "labels": [
                    2274,
                    2260
                ],
                "grouper.group_info": [
                    2260
                ],
                "base_func": [
                    2274,
                    2262
                ],
                "libgroupby": [
                    2262
                ],
                "obj._data._values": [
                    2266
                ],
                "obj._data": [
                    2266
                ],
                "result_sz": [
                    2273,
                    2269,
                    2271
                ],
                "np.zeros": [
                    2273
                ],
                "cython_dtype": [
                    2273
                ],
                "partial": [
                    2288,
                    2281,
                    2274,
                    2285
                ],
                "inferences": [
                    2280,
                    2296,
                    2275
                ],
                "needs_mask": [
                    2283
                ],
                "view": [
                    2284
                ],
                "isna": [
                    2328,
                    2284
                ],
                "needs_ngroups": [
                    2287
                ],
                "algorithms.take_nd": [
                    2293
                ],
                "freq": [
                    2350,
                    2356,
                    2328,
                    2329,
                    2365
                ],
                "fill_value": [
                    2328,
                    2329,
                    2489,
                    2513
                ],
                "x.shift": [
                    2329
                ],
                "periods": [
                    2336,
                    2329,
                    2365,
                    2353
                ],
                "x.pct_change": [
                    2352
                ],
                "fill_method": [
                    2360,
                    2361,
                    2354,
                    2363
                ],
                "filled": [
                    2363,
                    2364,
                    2366
                ],
                "fill_grp": [
                    2364,
                    2365
                ],
                "filled.groupby": [
                    2364
                ],
                "self.grouper.codes": [
                    2364
                ],
                "shifted": [
                    2365,
                    2366
                ],
                "fill_grp.shift": [
                    2365
                ],
                "self._reset_group_selection": [
                    2432,
                    2398
                ],
                "FrameOrSeries": [
                    2437,
                    2438
                ],
                "Scalar": [
                    2437
                ],
                "np.NaN": [
                    2437
                ],
                "groupings": [
                    2465,
                    2505,
                    2476,
                    2480,
                    2462,
                    2463
                ],
                "self.grouper.groupings": [
                    2462
                ],
                "ping.grouper": [
                    2475
                ],
                "ping": [
                    2480,
                    2505,
                    2475,
                    2476
                ],
                "Categorical": [
                    2475
                ],
                "levels_list": [
                    2480,
                    2482
                ],
                "ping.group_index": [
                    2480
                ],
                "sortlevel": [
                    2481
                ],
                "MultiIndex.from_product": [
                    2481
                ],
                "MultiIndex": [
                    2481
                ],
                "d": [
                    2491,
                    2486
                ],
                "self.obj._get_axis_name": [
                    2487
                ],
                "output.reindex": [
                    2491
                ],
                "in_axis_grps": [
                    2504,
                    2507
                ],
                "i": [
                    2505
                ],
                "ping.name": [
                    2505
                ],
                "ping.in_axis": [
                    2505
                ],
                "g_nums": [
                    2507,
                    2518
                ],
                "g_names": [
                    2507,
                    2509
                ],
                "output.drop": [
                    2509
                ],
                "reindex": [
                    2512
                ],
                "output.set_index": [
                    2512
                ],
                "output.reset_index": [
                    2520,
                    2518
                ],
                "GroupBy._add_numeric_operations": [
                    2523
                ],
                "GroupBy": [
                    2523,
                    2541,
                    2526,
                    2543
                ],
                "klass": [
                    2551,
                    2547,
                    2555,
                    2543
                ],
                "SeriesGroupBy": [
                    2547
                ],
                "DataFrameGroupBy": [
                    2551
                ],
                "by": [
                    2557
                ],
                "GroupBy.__doc__": [
                    2526
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_70/pandas/core/groupby/ops.py": {
            "buggy_functions": [
                {
                    "function_name": "_cython_operation",
                    "function_code": "def _cython_operation(\n    self, kind: str, values, how: str, axis, min_count: int = -1, **kwargs\n) -> Tuple[np.ndarray, Optional[List[str]]]:\n    \"\"\"\n    Returns the values of a cython operation as a Tuple of [data, names].\n\n    Names is only useful when dealing with 2D results, like ohlc\n    (see self._name_functions).\n    \"\"\"\n\n    assert kind in [\"transform\", \"aggregate\"]\n    orig_values = values\n\n    if values.ndim > 2:\n        raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n    elif values.ndim == 2:\n        # Note: it is *not* the case that axis is always 0 for 1-dim values,\n        #  as we can have 1D ExtensionArrays that we need to treat as 2D\n        assert axis == 1, axis\n\n    # can we do this operation with our cython functions\n    # if not raise NotImplementedError\n\n    # we raise NotImplemented if this is an invalid operation\n    # entirely, e.g. adding datetimes\n\n    # categoricals are only 1d, so we\n    # are not setup for dim transforming\n    if is_categorical_dtype(values) or is_sparse(values):\n        raise NotImplementedError(f\"{values.dtype} dtype not supported\")\n    elif is_datetime64_any_dtype(values):\n        if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n            raise NotImplementedError(\n                f\"datetime64 type does not support {how} operations\"\n            )\n    elif is_timedelta64_dtype(values):\n        if how in [\"prod\", \"cumprod\"]:\n            raise NotImplementedError(\n                f\"timedelta64 type does not support {how} operations\"\n            )\n\n    if is_datetime64tz_dtype(values.dtype):\n        # Cast to naive; we'll cast back at the end of the function\n        # TODO: possible need to reshape?  kludge can be avoided when\n        #  2D EA is allowed.\n        values = values.view(\"M8[ns]\")\n\n    is_datetimelike = needs_i8_conversion(values.dtype)\n    is_numeric = is_numeric_dtype(values.dtype)\n\n    if is_datetimelike:\n        values = values.view(\"int64\")\n        is_numeric = True\n    elif is_bool_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values):\n        # we use iNaT for the missing value on ints\n        # so pre-convert to guard this condition\n        if (values == iNaT).any():\n            values = ensure_float64(values)\n        else:\n            values = ensure_int_or_float(values)\n    elif is_numeric and not is_complex_dtype(values):\n        values = ensure_float64(values)\n    else:\n        values = values.astype(object)\n\n    arity = self._cython_arity.get(how, 1)\n\n    vdim = values.ndim\n    swapped = False\n    if vdim == 1:\n        values = values[:, None]\n        out_shape = (self.ngroups, arity)\n    else:\n        if axis > 0:\n            swapped = True\n            assert axis == 1, axis\n            values = values.T\n        if arity > 1:\n            raise NotImplementedError(\n                \"arity of more than 1 is not supported for the 'how' argument\"\n            )\n        out_shape = (self.ngroups,) + values.shape[1:]\n\n    func, values = self._get_cython_func_and_vals(kind, how, values, is_numeric)\n\n    if how == \"rank\":\n        out_dtype = \"float\"\n    else:\n        if is_numeric:\n            out_dtype = f\"{values.dtype.kind}{values.dtype.itemsize}\"\n        else:\n            out_dtype = \"object\"\n\n    codes, _, _ = self.group_info\n\n    if kind == \"aggregate\":\n        result = _maybe_fill(\n            np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n        )\n        counts = np.zeros(self.ngroups, dtype=np.int64)\n        result = self._aggregate(\n            result, counts, values, codes, func, is_datetimelike, min_count\n        )\n    elif kind == \"transform\":\n        result = _maybe_fill(\n            np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n        )\n\n        # TODO: min_count\n        result = self._transform(\n            result, values, codes, func, is_datetimelike, **kwargs\n        )\n\n    if is_integer_dtype(result) and not is_datetimelike:\n        mask = result == iNaT\n        if mask.any():\n            result = result.astype(\"float64\")\n            result[mask] = np.nan\n\n    if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n        assert result.ndim != 2\n        result = result[counts > 0]\n\n    if vdim == 1 and arity == 1:\n        result = result[:, 0]\n\n    names: Optional[List[str]] = self._name_functions.get(how, None)\n\n    if swapped:\n        result = result.swapaxes(0, axis)\n\n    if is_datetime64tz_dtype(orig_values.dtype):\n        result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n    elif is_datetimelike and kind == \"aggregate\":\n        result = result.astype(orig_values.dtype)\n\n    return result, names\n",
                    "decorators": [],
                    "docstring": "Returns the values of a cython operation as a Tuple of [data, names].\n\nNames is only useful when dealing with 2D results, like ohlc\n(see self._name_functions).",
                    "start_line": 426,
                    "variables": {
                        "str": [
                            554,
                            427,
                            428
                        ],
                        "int": [
                            427
                        ],
                        "kind": [
                            547,
                            523,
                            561,
                            531,
                            436,
                            511
                        ],
                        "orig_values": [
                            560,
                            562,
                            437,
                            559
                        ],
                        "values": [
                            517,
                            529,
                            533,
                            538,
                            437,
                            439,
                            441,
                            454,
                            455,
                            456,
                            461,
                            467,
                            471,
                            473,
                            474,
                            477,
                            479,
                            480,
                            481,
                            484,
                            485,
                            487,
                            488,
                            489,
                            491,
                            495,
                            498,
                            504,
                            509,
                            511
                        ],
                        "values.ndim": [
                            441,
                            495,
                            439
                        ],
                        "NotImplementedError": [
                            455,
                            458,
                            463,
                            440,
                            506
                        ],
                        "axis": [
                            557,
                            444,
                            501,
                            503
                        ],
                        "is_categorical_dtype": [
                            454
                        ],
                        "is_sparse": [
                            454
                        ],
                        "values.dtype": [
                            517,
                            455,
                            467,
                            473,
                            474,
                            479
                        ],
                        "is_datetime64_any_dtype": [
                            456
                        ],
                        "how": [
                            513,
                            457,
                            554,
                            459,
                            493,
                            462,
                            464,
                            511
                        ],
                        "is_timedelta64_dtype": [
                            461
                        ],
                        "is_datetime64tz_dtype": [
                            467,
                            559
                        ],
                        "values.view": [
                            477,
                            471
                        ],
                        "is_datetimelike": [
                            529,
                            561,
                            473,
                            538,
                            476,
                            541
                        ],
                        "needs_i8_conversion": [
                            473
                        ],
                        "is_numeric": [
                            516,
                            488,
                            474,
                            478,
                            511
                        ],
                        "is_numeric_dtype": [
                            474
                        ],
                        "is_bool_dtype": [
                            479
                        ],
                        "ensure_float64": [
                            480,
                            489,
                            485
                        ],
                        "is_integer_dtype": [
                            481,
                            541
                        ],
                        "any": [
                            484
                        ],
                        "iNaT": [
                            484,
                            542
                        ],
                        "ensure_int_or_float": [
                            487
                        ],
                        "is_complex_dtype": [
                            488
                        ],
                        "values.astype": [
                            491
                        ],
                        "object": [
                            491
                        ],
                        "arity": [
                            505,
                            499,
                            493,
                            551
                        ],
                        "self._cython_arity.get": [
                            493
                        ],
                        "self._cython_arity": [
                            493
                        ],
                        "self": [
                            547,
                            521,
                            554,
                            493,
                            527,
                            528,
                            499,
                            537,
                            509,
                            511
                        ],
                        "vdim": [
                            497,
                            551,
                            495
                        ],
                        "swapped": [
                            496,
                            556,
                            502
                        ],
                        "out_shape": [
                            525,
                            499,
                            509
                        ],
                        "self.ngroups": [
                            499,
                            509,
                            527
                        ],
                        "values.T": [
                            504
                        ],
                        "values.shape": [
                            509
                        ],
                        "func": [
                            529,
                            538,
                            511
                        ],
                        "self._get_cython_func_and_vals": [
                            511
                        ],
                        "out_dtype": [
                            514,
                            517,
                            519,
                            525,
                            533
                        ],
                        "values.dtype.kind": [
                            517
                        ],
                        "values.dtype.itemsize": [
                            517
                        ],
                        "codes": [
                            521,
                            538,
                            529
                        ],
                        "_": [
                            521
                        ],
                        "self.group_info": [
                            521
                        ],
                        "result": [
                            544,
                            545,
                            548,
                            549,
                            552,
                            524,
                            557,
                            528,
                            529,
                            560,
                            562,
                            532,
                            564,
                            537,
                            538,
                            541,
                            542
                        ],
                        "_maybe_fill": [
                            524,
                            532
                        ],
                        "np.empty": [
                            525
                        ],
                        "np": [
                            545,
                            428,
                            525,
                            527,
                            560,
                            533
                        ],
                        "np.nan": [
                            545,
                            533,
                            525
                        ],
                        "counts": [
                            529,
                            547,
                            549,
                            527
                        ],
                        "np.zeros": [
                            527
                        ],
                        "np.int64": [
                            560,
                            527
                        ],
                        "self._aggregate": [
                            528
                        ],
                        "min_count": [
                            529
                        ],
                        "np.empty_like": [
                            533
                        ],
                        "self._transform": [
                            537
                        ],
                        "kwargs": [
                            538
                        ],
                        "mask": [
                            545,
                            542,
                            543
                        ],
                        "mask.any": [
                            543
                        ],
                        "result.astype": [
                            544,
                            560,
                            562
                        ],
                        "self._filter_empty_groups": [
                            547
                        ],
                        "counts.all": [
                            547
                        ],
                        "result.ndim": [
                            548
                        ],
                        "names": [
                            554,
                            564
                        ],
                        "Optional": [
                            554,
                            428
                        ],
                        "List": [
                            554,
                            428
                        ],
                        "self._name_functions.get": [
                            554
                        ],
                        "self._name_functions": [
                            554
                        ],
                        "result.swapaxes": [
                            557
                        ],
                        "orig_values.dtype": [
                            560,
                            562,
                            559
                        ],
                        "type": [
                            560
                        ],
                        "Tuple": [
                            428
                        ],
                        "np.ndarray": [
                            428
                        ]
                    },
                    "filtered_variables": {
                        "kind": [
                            547,
                            523,
                            561,
                            531,
                            436,
                            511
                        ],
                        "orig_values": [
                            560,
                            562,
                            437,
                            559
                        ],
                        "values": [
                            517,
                            529,
                            533,
                            538,
                            437,
                            439,
                            441,
                            454,
                            455,
                            456,
                            461,
                            467,
                            471,
                            473,
                            474,
                            477,
                            479,
                            480,
                            481,
                            484,
                            485,
                            487,
                            488,
                            489,
                            491,
                            495,
                            498,
                            504,
                            509,
                            511
                        ],
                        "values.ndim": [
                            441,
                            495,
                            439
                        ],
                        "axis": [
                            557,
                            444,
                            501,
                            503
                        ],
                        "is_categorical_dtype": [
                            454
                        ],
                        "is_sparse": [
                            454
                        ],
                        "values.dtype": [
                            517,
                            455,
                            467,
                            473,
                            474,
                            479
                        ],
                        "is_datetime64_any_dtype": [
                            456
                        ],
                        "how": [
                            513,
                            457,
                            554,
                            459,
                            493,
                            462,
                            464,
                            511
                        ],
                        "is_timedelta64_dtype": [
                            461
                        ],
                        "is_datetime64tz_dtype": [
                            467,
                            559
                        ],
                        "values.view": [
                            477,
                            471
                        ],
                        "is_datetimelike": [
                            529,
                            561,
                            473,
                            538,
                            476,
                            541
                        ],
                        "needs_i8_conversion": [
                            473
                        ],
                        "is_numeric": [
                            516,
                            488,
                            474,
                            478,
                            511
                        ],
                        "is_numeric_dtype": [
                            474
                        ],
                        "is_bool_dtype": [
                            479
                        ],
                        "ensure_float64": [
                            480,
                            489,
                            485
                        ],
                        "is_integer_dtype": [
                            481,
                            541
                        ],
                        "iNaT": [
                            484,
                            542
                        ],
                        "ensure_int_or_float": [
                            487
                        ],
                        "is_complex_dtype": [
                            488
                        ],
                        "values.astype": [
                            491
                        ],
                        "arity": [
                            505,
                            499,
                            493,
                            551
                        ],
                        "self._cython_arity.get": [
                            493
                        ],
                        "self._cython_arity": [
                            493
                        ],
                        "self": [
                            547,
                            521,
                            554,
                            493,
                            527,
                            528,
                            499,
                            537,
                            509,
                            511
                        ],
                        "vdim": [
                            497,
                            551,
                            495
                        ],
                        "swapped": [
                            496,
                            556,
                            502
                        ],
                        "out_shape": [
                            525,
                            499,
                            509
                        ],
                        "self.ngroups": [
                            499,
                            509,
                            527
                        ],
                        "values.T": [
                            504
                        ],
                        "values.shape": [
                            509
                        ],
                        "func": [
                            529,
                            538,
                            511
                        ],
                        "self._get_cython_func_and_vals": [
                            511
                        ],
                        "out_dtype": [
                            514,
                            517,
                            519,
                            525,
                            533
                        ],
                        "values.dtype.kind": [
                            517
                        ],
                        "values.dtype.itemsize": [
                            517
                        ],
                        "codes": [
                            521,
                            538,
                            529
                        ],
                        "_": [
                            521
                        ],
                        "self.group_info": [
                            521
                        ],
                        "result": [
                            544,
                            545,
                            548,
                            549,
                            552,
                            524,
                            557,
                            528,
                            529,
                            560,
                            562,
                            532,
                            564,
                            537,
                            538,
                            541,
                            542
                        ],
                        "_maybe_fill": [
                            524,
                            532
                        ],
                        "np.empty": [
                            525
                        ],
                        "np": [
                            545,
                            428,
                            525,
                            527,
                            560,
                            533
                        ],
                        "np.nan": [
                            545,
                            533,
                            525
                        ],
                        "counts": [
                            529,
                            547,
                            549,
                            527
                        ],
                        "np.zeros": [
                            527
                        ],
                        "np.int64": [
                            560,
                            527
                        ],
                        "self._aggregate": [
                            528
                        ],
                        "min_count": [
                            529
                        ],
                        "np.empty_like": [
                            533
                        ],
                        "self._transform": [
                            537
                        ],
                        "kwargs": [
                            538
                        ],
                        "mask": [
                            545,
                            542,
                            543
                        ],
                        "mask.any": [
                            543
                        ],
                        "result.astype": [
                            544,
                            560,
                            562
                        ],
                        "self._filter_empty_groups": [
                            547
                        ],
                        "counts.all": [
                            547
                        ],
                        "result.ndim": [
                            548
                        ],
                        "names": [
                            554,
                            564
                        ],
                        "Optional": [
                            554,
                            428
                        ],
                        "List": [
                            554,
                            428
                        ],
                        "self._name_functions.get": [
                            554
                        ],
                        "self._name_functions": [
                            554
                        ],
                        "result.swapaxes": [
                            557
                        ],
                        "orig_values.dtype": [
                            560,
                            562,
                            559
                        ],
                        "Tuple": [
                            428
                        ],
                        "np.ndarray": [
                            428
                        ]
                    },
                    "diff_line_number": 545,
                    "class_data": {
                        "signature": "class BaseGrouper()",
                        "docstring": "This is an internal Grouper class, which actually holds\nthe generated groups\n\nParameters\n----------\naxis : Index\ngroupings : Sequence[Grouping]\n    all the grouping instances to handle in this grouper\n    for example for grouper list to groupby, need to pass the list\nsort : bool, default True\n    whether this grouper will give sorted result or not\ngroup_keys : bool, default True\nmutated : bool, default False\nindexer : intp array, optional\n    the indexer created by Grouper\n    some groupers (TimeGrouper) will sort its axis and its\n    group_info is also sorted, so need the indexer to reorder",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, axis: Index, groupings: 'Sequence[grouper.Grouping]', sort: bool=True, group_keys: bool=True, mutated: bool=False, indexer: Optional[np.ndarray]=None):\n    assert isinstance(axis, Index), axis\n    self._filter_empty_groups = self.compressed = len(groupings) != 1\n    self.axis = axis\n    self._groupings: List[grouper.Grouping] = list(groupings)\n    self.sort = sort\n    self.group_keys = group_keys\n    self.mutated = mutated\n    self.indexer = indexer",
                            "@property\ndef groupings(self) -> List['grouper.Grouping']:\n    return self._groupings",
                            "@property\ndef shape(self):\n    return tuple((ping.ngroups for ping in self.groupings))",
                            "def __iter__(self):\n    return iter(self.indices)",
                            "@property\ndef nkeys(self) -> int:\n    return len(self.groupings)",
                            "def get_iterator(self, data: FrameOrSeries, axis: int=0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    splitter = self._get_splitter(data, axis=axis)\n    keys = self._get_group_keys()\n    for key, (i, group) in zip(keys, splitter):\n        yield (key, group)",
                            "def _get_splitter(self, data: FrameOrSeries, axis: int=0) -> 'DataSplitter':\n    comp_ids, _, ngroups = self.group_info\n    return get_splitter(data, comp_ids, ngroups, axis=axis)",
                            "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self.groupings[0].grouper",
                            "def _get_group_keys(self):\n    if len(self.groupings) == 1:\n        return self.levels[0]\n    else:\n        comp_ids, _, ngroups = self.group_info\n        return get_flattened_iterator(comp_ids, ngroups, self.levels, self.codes)",
                            "def apply(self, f, data: FrameOrSeries, axis: int=0):\n    mutated = self.mutated\n    splitter = self._get_splitter(data, axis=axis)\n    group_keys = self._get_group_keys()\n    result_values = None\n    sdata: FrameOrSeries = splitter._get_sorted_data()\n    if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n        pass\n    elif com.get_callable_name(f) not in base.plotting_methods and isinstance(splitter, FrameSplitter) and (axis == 0) and (not sdata.index._has_complex_internals):\n        try:\n            result_values, mutated = splitter.fast_apply(f, group_keys)\n        except libreduction.InvalidApply as err:\n            if 'Let this error raise above us' not in str(err):\n                raise\n        else:\n            if len(result_values) == len(group_keys):\n                return (group_keys, result_values, mutated)\n    for key, (i, group) in zip(group_keys, splitter):\n        object.__setattr__(group, 'name', key)\n        if result_values is None:\n            result_values = []\n        elif i == 0:\n            continue\n        group_axes = group.axes\n        res = f(group)\n        if not _is_indexed_like(res, group_axes):\n            mutated = True\n        result_values.append(res)\n    return (group_keys, result_values, mutated)",
                            "@cache_readonly\ndef indices(self):\n    \"\"\" dict {group name -> group indices} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].indices\n    else:\n        codes_list = [ping.codes for ping in self.groupings]\n        keys = [com.values_from_object(ping.group_index) for ping in self.groupings]\n        return get_indexer_dict(codes_list, keys)",
                            "@property\ndef codes(self) -> List[np.ndarray]:\n    return [ping.codes for ping in self.groupings]",
                            "@property\ndef levels(self) -> List[Index]:\n    return [ping.group_index for ping in self.groupings]",
                            "@property\ndef names(self):\n    return [ping.name for ping in self.groupings]",
                            "def size(self) -> Series:\n    \"\"\"\n    Compute group sizes.\n    \"\"\"\n    ids, _, ngroup = self.group_info\n    ids = ensure_platform_int(ids)\n    if ngroup:\n        out = np.bincount(ids[ids != -1], minlength=ngroup)\n    else:\n        out = []\n    return Series(out, index=self.result_index, dtype='int64')",
                            "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].groups\n    else:\n        to_groupby = zip(*(ping.grouper for ping in self.groupings))\n        to_groupby = Index(to_groupby)\n        return self.axis.groupby(to_groupby)",
                            "@cache_readonly\ndef is_monotonic(self) -> bool:\n    return Index(self.group_info[0]).is_monotonic",
                            "@cache_readonly\ndef group_info(self):\n    comp_ids, obs_group_ids = self._get_compressed_codes()\n    ngroups = len(obs_group_ids)\n    comp_ids = ensure_int64(comp_ids)\n    return (comp_ids, obs_group_ids, ngroups)",
                            "@cache_readonly\ndef codes_info(self) -> np.ndarray:\n    codes, _, _ = self.group_info\n    if self.indexer is not None:\n        sorter = np.lexsort((codes, self.indexer))\n        codes = codes[sorter]\n    return codes",
                            "def _get_compressed_codes(self) -> Tuple[np.ndarray, np.ndarray]:\n    all_codes = self.codes\n    if len(all_codes) > 1:\n        group_index = get_group_index(all_codes, self.shape, sort=True, xnull=True)\n        return compress_group_index(group_index, sort=self.sort)\n    ping = self.groupings[0]\n    return (ping.codes, np.arange(len(ping.group_index)))",
                            "@cache_readonly\ndef ngroups(self) -> int:\n    return len(self.result_index)",
                            "@property\ndef reconstructed_codes(self) -> List[np.ndarray]:\n    codes = self.codes\n    comp_ids, obs_ids, _ = self.group_info\n    return decons_obs_group_ids(comp_ids, obs_ids, self.shape, codes, xnull=True)",
                            "@cache_readonly\ndef result_index(self) -> Index:\n    if not self.compressed and len(self.groupings) == 1:\n        return self.groupings[0].result_index.rename(self.names[0])\n    codes = self.reconstructed_codes\n    levels = [ping.result_index for ping in self.groupings]\n    result = MultiIndex(levels=levels, codes=codes, verify_integrity=False, names=self.names)\n    return result",
                            "def get_group_levels(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return [self.groupings[0].result_index]\n    name_list = []\n    for ping, codes in zip(self.groupings, self.reconstructed_codes):\n        codes = ensure_platform_int(codes)\n        levels = ping.result_index.take(codes)\n        name_list.append(levels)\n    return name_list",
                            "def _is_builtin_func(self, arg):\n    \"\"\"\n    if we define an builtin function for this argument, return it,\n    otherwise return the arg\n    \"\"\"\n    return SelectionMixin._builtin_table.get(arg, arg)",
                            "def _get_cython_function(self, kind: str, how: str, values, is_numeric: bool):\n    dtype_str = values.dtype.name\n    ftype = self._cython_functions[kind][how]\n    f = getattr(libgroupby, ftype, None)\n    if f is not None and is_numeric:\n        return f\n    for dt in [dtype_str, 'object']:\n        f2 = getattr(libgroupby, f'{ftype}_{dt}', None)\n        if f2 is not None:\n            return f2\n    if hasattr(f, '__signatures__'):\n        if dtype_str == 'object' and 'object' not in f.__signatures__:\n            f = None\n    func = f\n    if func is None:\n        raise NotImplementedError(f'function is not implemented for this dtype: [how->{how},dtype->{dtype_str}]')\n    return func",
                            "def _get_cython_func_and_vals(self, kind: str, how: str, values: np.ndarray, is_numeric: bool):\n    \"\"\"\n    Find the appropriate cython function, casting if necessary.\n\n    Parameters\n    ----------\n    kind : sttr\n    how : srt\n    values : np.ndarray\n    is_numeric : bool\n\n    Returns\n    -------\n    func : callable\n    values : np.ndarray\n    \"\"\"\n    try:\n        func = self._get_cython_function(kind, how, values, is_numeric)\n    except NotImplementedError:\n        if is_numeric:\n            try:\n                values = ensure_float64(values)\n            except TypeError:\n                if lib.infer_dtype(values, skipna=False) == 'complex':\n                    values = values.astype(complex)\n                else:\n                    raise\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        else:\n            raise\n    return (func, values)",
                            "def _cython_operation(self, kind: str, values, how: str, axis, min_count: int=-1, **kwargs) -> Tuple[np.ndarray, Optional[List[str]]]:\n    \"\"\"\n    Returns the values of a cython operation as a Tuple of [data, names].\n\n    Names is only useful when dealing with 2D results, like ohlc\n    (see self._name_functions).\n    \"\"\"\n    assert kind in ['transform', 'aggregate']\n    orig_values = values\n    if values.ndim > 2:\n        raise NotImplementedError('number of dimensions is currently limited to 2')\n    elif values.ndim == 2:\n        assert axis == 1, axis\n    if is_categorical_dtype(values) or is_sparse(values):\n        raise NotImplementedError(f'{values.dtype} dtype not supported')\n    elif is_datetime64_any_dtype(values):\n        if how in ['add', 'prod', 'cumsum', 'cumprod']:\n            raise NotImplementedError(f'datetime64 type does not support {how} operations')\n    elif is_timedelta64_dtype(values):\n        if how in ['prod', 'cumprod']:\n            raise NotImplementedError(f'timedelta64 type does not support {how} operations')\n    if is_datetime64tz_dtype(values.dtype):\n        values = values.view('M8[ns]')\n    is_datetimelike = needs_i8_conversion(values.dtype)\n    is_numeric = is_numeric_dtype(values.dtype)\n    if is_datetimelike:\n        values = values.view('int64')\n        is_numeric = True\n    elif is_bool_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values):\n        if (values == iNaT).any():\n            values = ensure_float64(values)\n        else:\n            values = ensure_int_or_float(values)\n    elif is_numeric and (not is_complex_dtype(values)):\n        values = ensure_float64(values)\n    else:\n        values = values.astype(object)\n    arity = self._cython_arity.get(how, 1)\n    vdim = values.ndim\n    swapped = False\n    if vdim == 1:\n        values = values[:, None]\n        out_shape = (self.ngroups, arity)\n    else:\n        if axis > 0:\n            swapped = True\n            assert axis == 1, axis\n            values = values.T\n        if arity > 1:\n            raise NotImplementedError(\"arity of more than 1 is not supported for the 'how' argument\")\n        out_shape = (self.ngroups,) + values.shape[1:]\n    func, values = self._get_cython_func_and_vals(kind, how, values, is_numeric)\n    if how == 'rank':\n        out_dtype = 'float'\n    elif is_numeric:\n        out_dtype = f'{values.dtype.kind}{values.dtype.itemsize}'\n    else:\n        out_dtype = 'object'\n    codes, _, _ = self.group_info\n    if kind == 'aggregate':\n        result = _maybe_fill(np.empty(out_shape, dtype=out_dtype), fill_value=np.nan)\n        counts = np.zeros(self.ngroups, dtype=np.int64)\n        result = self._aggregate(result, counts, values, codes, func, is_datetimelike, min_count)\n    elif kind == 'transform':\n        result = _maybe_fill(np.empty_like(values, dtype=out_dtype), fill_value=np.nan)\n        result = self._transform(result, values, codes, func, is_datetimelike, **kwargs)\n    if is_integer_dtype(result) and (not is_datetimelike):\n        mask = result == iNaT\n        if mask.any():\n            result = result.astype('float64')\n            result[mask] = np.nan\n    if kind == 'aggregate' and self._filter_empty_groups and (not counts.all()):\n        assert result.ndim != 2\n        result = result[counts > 0]\n    if vdim == 1 and arity == 1:\n        result = result[:, 0]\n    names: Optional[List[str]] = self._name_functions.get(how, None)\n    if swapped:\n        result = result.swapaxes(0, axis)\n    if is_datetime64tz_dtype(orig_values.dtype):\n        result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n    elif is_datetimelike and kind == 'aggregate':\n        result = result.astype(orig_values.dtype)\n    return (result, names)",
                            "def aggregate(self, values, how: str, axis: int=0, min_count: int=-1) -> Tuple[np.ndarray, Optional[List[str]]]:\n    return self._cython_operation('aggregate', values, how, axis, min_count=min_count)",
                            "def transform(self, values, how: str, axis: int=0, **kwargs):\n    return self._cython_operation('transform', values, how, axis, **kwargs)",
                            "def _aggregate(self, result, counts, values, comp_ids, agg_func, is_datetimelike: bool, min_count: int=-1):\n    if agg_func is libgroupby.group_nth:\n        agg_func(result, counts, values, comp_ids, rank=1, min_count=-1)\n    else:\n        agg_func(result, counts, values, comp_ids, min_count)\n    return result",
                            "def _transform(self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs):\n    comp_ids, _, ngroups = self.group_info\n    transform_func(result, values, comp_ids, ngroups, is_datetimelike, **kwargs)\n    return result",
                            "def agg_series(self, obj: Series, func):\n    assert self.ngroups != 0\n    if len(obj) == 0:\n        return self._aggregate_series_pure_python(obj, func)\n    elif is_extension_array_dtype(obj.dtype):\n        return self._aggregate_series_pure_python(obj, func)\n    elif obj.index._has_complex_internals:\n        return self._aggregate_series_pure_python(obj, func)\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except ValueError as err:\n        if 'Function does not reduce' in str(err):\n            pass\n        else:\n            raise\n    return self._aggregate_series_pure_python(obj, func)",
                            "def _aggregate_series_fast(self, obj: Series, func):\n    func = self._is_builtin_func(func)\n    group_index, _, ngroups = self.group_info\n    dummy = obj._get_values(slice(None, 0))\n    indexer = get_group_index_sorter(group_index, ngroups)\n    obj = obj.take(indexer)\n    group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n    grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n    result, counts = grouper.get_result()\n    return (result, counts)",
                            "def _aggregate_series_pure_python(self, obj: Series, func):\n    group_index, _, ngroups = self.group_info\n    counts = np.zeros(ngroups, dtype=int)\n    result = None\n    splitter = get_splitter(obj, group_index, ngroups, axis=0)\n    for label, group in splitter:\n        res = func(group)\n        if result is None:\n            if isinstance(res, (Series, Index, np.ndarray)):\n                if len(res) == 1:\n                    res = res.item()\n                else:\n                    raise ValueError('Function does not reduce')\n            result = np.empty(ngroups, dtype='O')\n        counts[label] = group.shape[0]\n        result[label] = res\n    assert result is not None\n    result = lib.maybe_convert_objects(result, try_float=0)\n    return (result, counts)"
                        ],
                        "constructor_variables": [
                            "group_keys",
                            "sort",
                            "indexer",
                            "compressed",
                            "mutated",
                            "axis",
                            "_filter_empty_groups"
                        ],
                        "class_level_variables": [
                            "_cython_functions",
                            "_cython_arity",
                            "_name_functions"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, axis: Index, groupings: 'Sequence[grouper.Grouping]', sort: bool=True, group_keys: bool=True, mutated: bool=False, indexer: Optional[np.ndarray]=None)",
                            "groupings(self) -> List['grouper.Grouping']",
                            "shape(self)",
                            "__iter__(self)",
                            "nkeys(self) -> int",
                            "get_iterator(self, data: FrameOrSeries, axis: int=0)",
                            "_get_splitter(self, data: FrameOrSeries, axis: int=0) -> 'DataSplitter'",
                            "_get_grouper(self)",
                            "_get_group_keys(self)",
                            "apply(self, f, data: FrameOrSeries, axis: int=0)",
                            "indices(self)",
                            "codes(self) -> List[np.ndarray]",
                            "levels(self) -> List[Index]",
                            "names(self)",
                            "size(self) -> Series",
                            "groups(self)",
                            "is_monotonic(self) -> bool",
                            "group_info(self)",
                            "codes_info(self) -> np.ndarray",
                            "_get_compressed_codes(self) -> Tuple[np.ndarray, np.ndarray]",
                            "ngroups(self) -> int",
                            "reconstructed_codes(self) -> List[np.ndarray]",
                            "result_index(self) -> Index",
                            "get_group_levels(self)",
                            "_is_builtin_func(self, arg)",
                            "_get_cython_function(self, kind: str, how: str, values, is_numeric: bool)",
                            "_get_cython_func_and_vals(self, kind: str, how: str, values: np.ndarray, is_numeric: bool)",
                            "_cython_operation(self, kind: str, values, how: str, axis, min_count: int=-1, **kwargs) -> Tuple[np.ndarray, Optional[List[str]]]",
                            "aggregate(self, values, how: str, axis: int=0, min_count: int=-1) -> Tuple[np.ndarray, Optional[List[str]]]",
                            "transform(self, values, how: str, axis: int=0, **kwargs)",
                            "_aggregate(self, result, counts, values, comp_ids, agg_func, is_datetimelike: bool, min_count: int=-1)",
                            "_transform(self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs)",
                            "agg_series(self, obj: Series, func)",
                            "_aggregate_series_fast(self, obj: Series, func)",
                            "_aggregate_series_pure_python(self, obj: Series, func)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _is_indexed_like(obj, axes) -> bool:\n    if isinstance(obj, Series):\n        if len(axes) > 1:\n            return False\n        return obj.index.equals(axes[0])\n    elif isinstance(obj, DataFrame):\n        return obj.index.equals(axes[0])\n\n    return False",
                "def get_splitter(data: FrameOrSeries, *args, **kwargs) -> DataSplitter:\n    if isinstance(data, Series):\n        klass: Type[DataSplitter] = SeriesSplitter\n    else:\n        # i.e. DataFrame\n        klass = FrameSplitter\n\n    return klass(data, *args, **kwargs)",
                "def __init__(\n    self,\n    axis: Index,\n    groupings: \"Sequence[grouper.Grouping]\",\n    sort: bool = True,\n    group_keys: bool = True,\n    mutated: bool = False,\n    indexer: Optional[np.ndarray] = None,\n):\n    assert isinstance(axis, Index), axis\n\n    self._filter_empty_groups = self.compressed = len(groupings) != 1\n    self.axis = axis\n    self._groupings: List[grouper.Grouping] = list(groupings)\n    self.sort = sort\n    self.group_keys = group_keys\n    self.mutated = mutated\n    self.indexer = indexer",
                "@property\ndef groupings(self) -> List[\"grouper.Grouping\"]:\n    return self._groupings",
                "@property\ndef shape(self):\n    return tuple(ping.ngroups for ping in self.groupings)",
                "def __iter__(self):\n    return iter(self.indices)",
                "@property\ndef nkeys(self) -> int:\n    return len(self.groupings)",
                "def get_iterator(self, data: FrameOrSeries, axis: int = 0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    splitter = self._get_splitter(data, axis=axis)\n    keys = self._get_group_keys()\n    for key, (i, group) in zip(keys, splitter):\n        yield key, group",
                "def _get_splitter(self, data: FrameOrSeries, axis: int = 0) -> \"DataSplitter\":\n    comp_ids, _, ngroups = self.group_info\n    return get_splitter(data, comp_ids, ngroups, axis=axis)",
                "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self.groupings[0].grouper",
                "def _get_group_keys(self):\n    if len(self.groupings) == 1:\n        return self.levels[0]\n    else:\n        comp_ids, _, ngroups = self.group_info\n\n        # provide \"flattened\" iterator for multi-group setting\n        return get_flattened_iterator(comp_ids, ngroups, self.levels, self.codes)",
                "def apply(self, f, data: FrameOrSeries, axis: int = 0):\n    mutated = self.mutated\n    splitter = self._get_splitter(data, axis=axis)\n    group_keys = self._get_group_keys()\n    result_values = None\n\n    sdata: FrameOrSeries = splitter._get_sorted_data()\n    if sdata.ndim == 2 and np.any(sdata.dtypes.apply(is_extension_array_dtype)):\n        # calling splitter.fast_apply will raise TypeError via apply_frame_axis0\n        #  if we pass EA instead of ndarray\n        #  TODO: can we have a workaround for EAs backed by ndarray?\n        pass\n\n    elif (\n        com.get_callable_name(f) not in base.plotting_methods\n        and isinstance(splitter, FrameSplitter)\n        and axis == 0\n        # fast_apply/libreduction doesn't allow non-numpy backed indexes\n        and not sdata.index._has_complex_internals\n    ):\n        try:\n            result_values, mutated = splitter.fast_apply(f, group_keys)\n\n        except libreduction.InvalidApply as err:\n            # This Exception is raised if `f` triggers an exception\n            # but it is preferable to raise the exception in Python.\n            if \"Let this error raise above us\" not in str(err):\n                # TODO: can we infer anything about whether this is\n                #  worth-retrying in pure-python?\n                raise\n\n        else:\n            # If the fast apply path could be used we can return here.\n            # Otherwise we need to fall back to the slow implementation.\n            if len(result_values) == len(group_keys):\n                return group_keys, result_values, mutated\n\n    for key, (i, group) in zip(group_keys, splitter):\n        object.__setattr__(group, \"name\", key)\n\n        # result_values is None if fast apply path wasn't taken\n        # or fast apply aborted with an unexpected exception.\n        # In either case, initialize the result list and perform\n        # the slow iteration.\n        if result_values is None:\n            result_values = []\n\n        # If result_values is not None we're in the case that the\n        # fast apply loop was broken prematurely but we have\n        # already the result for the first group which we can reuse.\n        elif i == 0:\n            continue\n\n        # group might be modified\n        group_axes = group.axes\n        res = f(group)\n        if not _is_indexed_like(res, group_axes):\n            mutated = True\n        result_values.append(res)\n\n    return group_keys, result_values, mutated",
                "@cache_readonly\ndef indices(self):\n    \"\"\" dict {group name -> group indices} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].indices\n    else:\n        codes_list = [ping.codes for ping in self.groupings]\n        keys = [com.values_from_object(ping.group_index) for ping in self.groupings]\n        return get_indexer_dict(codes_list, keys)",
                "@property\ndef codes(self) -> List[np.ndarray]:\n    return [ping.codes for ping in self.groupings]",
                "@property\ndef levels(self) -> List[Index]:\n    return [ping.group_index for ping in self.groupings]",
                "@property\ndef names(self):\n    return [ping.name for ping in self.groupings]",
                "def size(self) -> Series:\n    \"\"\"\n    Compute group sizes.\n    \"\"\"\n    ids, _, ngroup = self.group_info\n    ids = ensure_platform_int(ids)\n    if ngroup:\n        out = np.bincount(ids[ids != -1], minlength=ngroup)\n    else:\n        out = []\n    return Series(out, index=self.result_index, dtype=\"int64\")",
                "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n    if len(self.groupings) == 1:\n        return self.groupings[0].groups\n    else:\n        to_groupby = zip(*(ping.grouper for ping in self.groupings))\n        to_groupby = Index(to_groupby)\n        return self.axis.groupby(to_groupby)",
                "@cache_readonly\ndef is_monotonic(self) -> bool:\n    # return if my group orderings are monotonic\n    return Index(self.group_info[0]).is_monotonic",
                "@cache_readonly\ndef group_info(self):\n    comp_ids, obs_group_ids = self._get_compressed_codes()\n\n    ngroups = len(obs_group_ids)\n    comp_ids = ensure_int64(comp_ids)\n    return comp_ids, obs_group_ids, ngroups",
                "@cache_readonly\ndef codes_info(self) -> np.ndarray:\n    # return the codes of items in original grouped axis\n    codes, _, _ = self.group_info\n    if self.indexer is not None:\n        sorter = np.lexsort((codes, self.indexer))\n        codes = codes[sorter]\n    return codes",
                "def _get_compressed_codes(self) -> Tuple[np.ndarray, np.ndarray]:\n    all_codes = self.codes\n    if len(all_codes) > 1:\n        group_index = get_group_index(all_codes, self.shape, sort=True, xnull=True)\n        return compress_group_index(group_index, sort=self.sort)\n\n    ping = self.groupings[0]\n    return ping.codes, np.arange(len(ping.group_index))",
                "@cache_readonly\ndef ngroups(self) -> int:\n    return len(self.result_index)",
                "@property\ndef reconstructed_codes(self) -> List[np.ndarray]:\n    codes = self.codes\n    comp_ids, obs_ids, _ = self.group_info\n    return decons_obs_group_ids(comp_ids, obs_ids, self.shape, codes, xnull=True)",
                "@cache_readonly\ndef result_index(self) -> Index:\n    if not self.compressed and len(self.groupings) == 1:\n        return self.groupings[0].result_index.rename(self.names[0])\n\n    codes = self.reconstructed_codes\n    levels = [ping.result_index for ping in self.groupings]\n    result = MultiIndex(\n        levels=levels, codes=codes, verify_integrity=False, names=self.names\n    )\n    return result",
                "def get_group_levels(self):\n    if not self.compressed and len(self.groupings) == 1:\n        return [self.groupings[0].result_index]\n\n    name_list = []\n    for ping, codes in zip(self.groupings, self.reconstructed_codes):\n        codes = ensure_platform_int(codes)\n        levels = ping.result_index.take(codes)\n\n        name_list.append(levels)\n\n    return name_list",
                "def _is_builtin_func(self, arg):\n    \"\"\"\n    if we define an builtin function for this argument, return it,\n    otherwise return the arg\n    \"\"\"\n    return SelectionMixin._builtin_table.get(arg, arg)",
                "def _get_cython_function(self, kind: str, how: str, values, is_numeric: bool):\n\n    dtype_str = values.dtype.name\n    ftype = self._cython_functions[kind][how]\n\n    # see if there is a fused-type version of function\n    # only valid for numeric\n    f = getattr(libgroupby, ftype, None)\n    if f is not None and is_numeric:\n        return f\n\n    # otherwise find dtype-specific version, falling back to object\n    for dt in [dtype_str, \"object\"]:\n        f2 = getattr(libgroupby, f\"{ftype}_{dt}\", None)\n        if f2 is not None:\n            return f2\n\n    if hasattr(f, \"__signatures__\"):\n        # inspect what fused types are implemented\n        if dtype_str == \"object\" and \"object\" not in f.__signatures__:\n            # disallow this function so we get a NotImplementedError below\n            #  instead of a TypeError at runtime\n            f = None\n\n    func = f\n\n    if func is None:\n        raise NotImplementedError(\n            f\"function is not implemented for this dtype: \"\n            f\"[how->{how},dtype->{dtype_str}]\"\n        )\n\n    return func",
                "def _get_cython_func_and_vals(\n    self, kind: str, how: str, values: np.ndarray, is_numeric: bool\n):\n    \"\"\"\n    Find the appropriate cython function, casting if necessary.\n\n    Parameters\n    ----------\n    kind : sttr\n    how : srt\n    values : np.ndarray\n    is_numeric : bool\n\n    Returns\n    -------\n    func : callable\n    values : np.ndarray\n    \"\"\"\n    try:\n        func = self._get_cython_function(kind, how, values, is_numeric)\n    except NotImplementedError:\n        if is_numeric:\n            try:\n                values = ensure_float64(values)\n            except TypeError:\n                if lib.infer_dtype(values, skipna=False) == \"complex\":\n                    values = values.astype(complex)\n                else:\n                    raise\n            func = self._get_cython_function(kind, how, values, is_numeric)\n        else:\n            raise\n    return func, values",
                "def _cython_operation(\n    self, kind: str, values, how: str, axis, min_count: int = -1, **kwargs\n) -> Tuple[np.ndarray, Optional[List[str]]]:\n    \"\"\"\n    Returns the values of a cython operation as a Tuple of [data, names].\n\n    Names is only useful when dealing with 2D results, like ohlc\n    (see self._name_functions).\n    \"\"\"\n\n    assert kind in [\"transform\", \"aggregate\"]\n    orig_values = values\n\n    if values.ndim > 2:\n        raise NotImplementedError(\"number of dimensions is currently limited to 2\")\n    elif values.ndim == 2:\n        # Note: it is *not* the case that axis is always 0 for 1-dim values,\n        #  as we can have 1D ExtensionArrays that we need to treat as 2D\n        assert axis == 1, axis\n\n    # can we do this operation with our cython functions\n    # if not raise NotImplementedError\n\n    # we raise NotImplemented if this is an invalid operation\n    # entirely, e.g. adding datetimes\n\n    # categoricals are only 1d, so we\n    # are not setup for dim transforming\n    if is_categorical_dtype(values) or is_sparse(values):\n        raise NotImplementedError(f\"{values.dtype} dtype not supported\")\n    elif is_datetime64_any_dtype(values):\n        if how in [\"add\", \"prod\", \"cumsum\", \"cumprod\"]:\n            raise NotImplementedError(\n                f\"datetime64 type does not support {how} operations\"\n            )\n    elif is_timedelta64_dtype(values):\n        if how in [\"prod\", \"cumprod\"]:\n            raise NotImplementedError(\n                f\"timedelta64 type does not support {how} operations\"\n            )\n\n    if is_datetime64tz_dtype(values.dtype):\n        # Cast to naive; we'll cast back at the end of the function\n        # TODO: possible need to reshape?  kludge can be avoided when\n        #  2D EA is allowed.\n        values = values.view(\"M8[ns]\")\n\n    is_datetimelike = needs_i8_conversion(values.dtype)\n    is_numeric = is_numeric_dtype(values.dtype)\n\n    if is_datetimelike:\n        values = values.view(\"int64\")\n        is_numeric = True\n    elif is_bool_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values):\n        # we use iNaT for the missing value on ints\n        # so pre-convert to guard this condition\n        if (values == iNaT).any():\n            values = ensure_float64(values)\n        else:\n            values = ensure_int_or_float(values)\n    elif is_numeric and not is_complex_dtype(values):\n        values = ensure_float64(values)\n    else:\n        values = values.astype(object)\n\n    arity = self._cython_arity.get(how, 1)\n\n    vdim = values.ndim\n    swapped = False\n    if vdim == 1:\n        values = values[:, None]\n        out_shape = (self.ngroups, arity)\n    else:\n        if axis > 0:\n            swapped = True\n            assert axis == 1, axis\n            values = values.T\n        if arity > 1:\n            raise NotImplementedError(\n                \"arity of more than 1 is not supported for the 'how' argument\"\n            )\n        out_shape = (self.ngroups,) + values.shape[1:]\n\n    func, values = self._get_cython_func_and_vals(kind, how, values, is_numeric)\n\n    if how == \"rank\":\n        out_dtype = \"float\"\n    else:\n        if is_numeric:\n            out_dtype = f\"{values.dtype.kind}{values.dtype.itemsize}\"\n        else:\n            out_dtype = \"object\"\n\n    codes, _, _ = self.group_info\n\n    if kind == \"aggregate\":\n        result = _maybe_fill(\n            np.empty(out_shape, dtype=out_dtype), fill_value=np.nan\n        )\n        counts = np.zeros(self.ngroups, dtype=np.int64)\n        result = self._aggregate(\n            result, counts, values, codes, func, is_datetimelike, min_count\n        )\n    elif kind == \"transform\":\n        result = _maybe_fill(\n            np.empty_like(values, dtype=out_dtype), fill_value=np.nan\n        )\n\n        # TODO: min_count\n        result = self._transform(\n            result, values, codes, func, is_datetimelike, **kwargs\n        )\n\n    if is_integer_dtype(result) and not is_datetimelike:\n        mask = result == iNaT\n        if mask.any():\n            result = result.astype(\"float64\")\n            result[mask] = np.nan\n\n    if kind == \"aggregate\" and self._filter_empty_groups and not counts.all():\n        assert result.ndim != 2\n        result = result[counts > 0]\n\n    if vdim == 1 and arity == 1:\n        result = result[:, 0]\n\n    names: Optional[List[str]] = self._name_functions.get(how, None)\n\n    if swapped:\n        result = result.swapaxes(0, axis)\n\n    if is_datetime64tz_dtype(orig_values.dtype):\n        result = type(orig_values)(result.astype(np.int64), dtype=orig_values.dtype)\n    elif is_datetimelike and kind == \"aggregate\":\n        result = result.astype(orig_values.dtype)\n\n    return result, names",
                "def aggregate(\n    self, values, how: str, axis: int = 0, min_count: int = -1\n) -> Tuple[np.ndarray, Optional[List[str]]]:\n    return self._cython_operation(\n        \"aggregate\", values, how, axis, min_count=min_count\n    )",
                "def transform(self, values, how: str, axis: int = 0, **kwargs):\n    return self._cython_operation(\"transform\", values, how, axis, **kwargs)",
                "def _aggregate(\n    self,\n    result,\n    counts,\n    values,\n    comp_ids,\n    agg_func,\n    is_datetimelike: bool,\n    min_count: int = -1,\n):\n    if agg_func is libgroupby.group_nth:\n        # different signature from the others\n        # TODO: should we be using min_count instead of hard-coding it?\n        agg_func(result, counts, values, comp_ids, rank=1, min_count=-1)\n    else:\n        agg_func(result, counts, values, comp_ids, min_count)\n\n    return result",
                "def _transform(\n    self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs\n):\n\n    comp_ids, _, ngroups = self.group_info\n    transform_func(result, values, comp_ids, ngroups, is_datetimelike, **kwargs)\n\n    return result",
                "def agg_series(self, obj: Series, func):\n    # Caller is responsible for checking ngroups != 0\n    assert self.ngroups != 0\n\n    if len(obj) == 0:\n        # SeriesGrouper would raise if we were to call _aggregate_series_fast\n        return self._aggregate_series_pure_python(obj, func)\n\n    elif is_extension_array_dtype(obj.dtype):\n        # _aggregate_series_fast would raise TypeError when\n        #  calling libreduction.Slider\n        # In the datetime64tz case it would incorrectly cast to tz-naive\n        # TODO: can we get a performant workaround for EAs backed by ndarray?\n        return self._aggregate_series_pure_python(obj, func)\n\n    elif obj.index._has_complex_internals:\n        # Pre-empt TypeError in _aggregate_series_fast\n        return self._aggregate_series_pure_python(obj, func)\n\n    try:\n        return self._aggregate_series_fast(obj, func)\n    except ValueError as err:\n        if \"Function does not reduce\" in str(err):\n            # raised in libreduction\n            pass\n        else:\n            raise\n    return self._aggregate_series_pure_python(obj, func)",
                "def _aggregate_series_fast(self, obj: Series, func):\n    # At this point we have already checked that\n    #  - obj.index is not a MultiIndex\n    #  - obj is backed by an ndarray, not ExtensionArray\n    #  - len(obj) > 0\n    #  - ngroups != 0\n    func = self._is_builtin_func(func)\n\n    group_index, _, ngroups = self.group_info\n\n    # avoids object / Series creation overhead\n    dummy = obj._get_values(slice(None, 0))\n    indexer = get_group_index_sorter(group_index, ngroups)\n    obj = obj.take(indexer)\n    group_index = algorithms.take_nd(group_index, indexer, allow_fill=False)\n    grouper = libreduction.SeriesGrouper(obj, func, group_index, ngroups, dummy)\n    result, counts = grouper.get_result()\n    return result, counts",
                "def _aggregate_series_pure_python(self, obj: Series, func):\n\n    group_index, _, ngroups = self.group_info\n\n    counts = np.zeros(ngroups, dtype=int)\n    result = None\n\n    splitter = get_splitter(obj, group_index, ngroups, axis=0)\n\n    for label, group in splitter:\n        res = func(group)\n        if result is None:\n            if isinstance(res, (Series, Index, np.ndarray)):\n                if len(res) == 1:\n                    # e.g. test_agg_lambda_with_timezone lambda e: e.head(1)\n                    # FIXME: are we potentially losing import res.index info?\n                    res = res.item()\n                else:\n                    raise ValueError(\"Function does not reduce\")\n            result = np.empty(ngroups, dtype=\"O\")\n\n        counts[label] = group.shape[0]\n        result[label] = res\n\n    assert result is not None\n    result = lib.maybe_convert_objects(result, try_float=0)\n    # TODO: try_cast back to EA?\n\n    return result, counts",
                "def __init__(\n    self,\n    bins,\n    binlabels,\n    filter_empty: bool = False,\n    mutated: bool = False,\n    indexer=None,\n):\n    self.bins = ensure_int64(bins)\n    self.binlabels = ensure_index(binlabels)\n    self._filter_empty_groups = filter_empty\n    self.mutated = mutated\n    self.indexer = indexer\n\n    # These lengths must match, otherwise we could call agg_series\n    #  with empty self.bins, which would raise in libreduction.\n    assert len(self.binlabels) == len(self.bins)",
                "@cache_readonly\ndef groups(self):\n    \"\"\" dict {group name -> group labels} \"\"\"\n\n    # this is mainly for compat\n    # GH 3881\n    result = {\n        key: value\n        for key, value in zip(self.binlabels, self.bins)\n        if key is not NaT\n    }\n    return result",
                "@property\ndef nkeys(self) -> int:\n    return 1",
                "def _get_grouper(self):\n    \"\"\"\n    We are a grouper as part of another's groupings.\n\n    We have a specific method of grouping, so cannot\n    convert to a Index for our grouper.\n    \"\"\"\n    return self",
                "def get_iterator(self, data: FrameOrSeries, axis: int = 0):\n    \"\"\"\n    Groupby iterator\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group\n    \"\"\"\n    slicer = lambda start, edge: data._slice(slice(start, edge), axis=axis)\n    length = len(data.axes[axis])\n\n    start = 0\n    for edge, label in zip(self.bins, self.binlabels):\n        if label is not NaT:\n            yield label, slicer(start, edge)\n        start = edge\n\n    if start < length:\n        yield self.binlabels[-1], slicer(start, None)",
                "@cache_readonly\ndef indices(self):\n    indices = collections.defaultdict(list)\n\n    i = 0\n    for label, bin in zip(self.binlabels, self.bins):\n        if i < bin:\n            if label is not NaT:\n                indices[label] = list(range(i, bin))\n            i = bin\n    return indices",
                "@cache_readonly\ndef group_info(self):\n    ngroups = self.ngroups\n    obs_group_ids = np.arange(ngroups)\n    rep = np.diff(np.r_[0, self.bins])\n\n    rep = ensure_platform_int(rep)\n    if ngroups == len(self.bins):\n        comp_ids = np.repeat(np.arange(ngroups), rep)\n    else:\n        comp_ids = np.repeat(np.r_[-1, np.arange(ngroups)], rep)\n\n    return (\n        comp_ids.astype(\"int64\", copy=False),\n        obs_group_ids.astype(\"int64\", copy=False),\n        ngroups,\n    )",
                "@cache_readonly\ndef reconstructed_codes(self) -> List[np.ndarray]:\n    # get unique result indices, and prepend 0 as groupby starts from the first\n    return [np.r_[0, np.flatnonzero(self.bins[1:] != self.bins[:-1]) + 1]]",
                "@cache_readonly\ndef result_index(self):\n    if len(self.binlabels) != 0 and isna(self.binlabels[0]):\n        return self.binlabels[1:]\n\n    return self.binlabels",
                "@property\ndef levels(self):\n    return [self.binlabels]",
                "@property\ndef names(self):\n    return [self.binlabels.name]",
                "@property\ndef groupings(self) -> \"List[grouper.Grouping]\":\n    return [\n        grouper.Grouping(lvl, lvl, in_axis=False, level=None, name=name)\n        for lvl, name in zip(self.levels, self.names)\n    ]",
                "def agg_series(self, obj: Series, func):\n    # Caller is responsible for checking ngroups != 0\n    assert self.ngroups != 0\n    assert len(self.bins) > 0  # otherwise we'd get IndexError in get_result\n\n    if is_extension_array_dtype(obj.dtype):\n        # pre-empt SeriesBinGrouper from raising TypeError\n        return self._aggregate_series_pure_python(obj, func)\n\n    dummy = obj[:0]\n    grouper = libreduction.SeriesBinGrouper(obj, func, self.bins, dummy)\n    return grouper.get_result()",
                "def __init__(self, data: FrameOrSeries, labels, ngroups: int, axis: int = 0):\n    self.data = data\n    self.labels = ensure_int64(labels)\n    self.ngroups = ngroups\n\n    self.axis = axis\n    assert isinstance(axis, int), axis",
                "@cache_readonly\ndef slabels(self):\n    # Sorted labels\n    return algorithms.take_nd(self.labels, self.sort_idx, allow_fill=False)",
                "@cache_readonly\ndef sort_idx(self):\n    # Counting sort indexer\n    return get_group_index_sorter(self.labels, self.ngroups)",
                "def __iter__(self):\n    sdata = self._get_sorted_data()\n\n    if self.ngroups == 0:\n        # we are inside a generator, rather than raise StopIteration\n        # we merely return signal the end\n        return\n\n    starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n    for i, (start, end) in enumerate(zip(starts, ends)):\n        yield i, self._chop(sdata, slice(start, end))",
                "def _get_sorted_data(self) -> FrameOrSeries:\n    return self.data.take(self.sort_idx, axis=self.axis)",
                "def _chop(self, sdata, slice_obj: slice) -> NDFrame:\n    raise AbstractMethodError(self)",
                "def _chop(self, sdata: Series, slice_obj: slice) -> Series:\n    return sdata._get_values(slice_obj)",
                "def fast_apply(self, f, names):\n    # must return keys::list, values::list, mutated::bool\n    starts, ends = lib.generate_slices(self.slabels, self.ngroups)\n\n    sdata = self._get_sorted_data()\n    return libreduction.apply_frame_axis0(sdata, f, names, starts, ends)",
                "def _chop(self, sdata: DataFrame, slice_obj: slice) -> DataFrame:\n    if self.axis == 0:\n        return sdata.iloc[slice_obj]\n    else:\n        return sdata._slice(slice_obj, axis=1)"
            ],
            "inscope_function_signatures": [
                "_is_indexed_like(obj, axes) -> bool",
                "get_splitter(data: FrameOrSeries, *args, **kwargs) -> DataSplitter",
                "__init__(self, axis: Index, groupings: 'Sequence[grouper.Grouping]', sort: bool=True, group_keys: bool=True, mutated: bool=False, indexer: Optional[np.ndarray]=None)",
                "groupings(self) -> List['grouper.Grouping']",
                "shape(self)",
                "__iter__(self)",
                "nkeys(self) -> int",
                "get_iterator(self, data: FrameOrSeries, axis: int=0)",
                "_get_splitter(self, data: FrameOrSeries, axis: int=0) -> 'DataSplitter'",
                "_get_grouper(self)",
                "_get_group_keys(self)",
                "apply(self, f, data: FrameOrSeries, axis: int=0)",
                "indices(self)",
                "codes(self) -> List[np.ndarray]",
                "levels(self) -> List[Index]",
                "names(self)",
                "size(self) -> Series",
                "groups(self)",
                "is_monotonic(self) -> bool",
                "group_info(self)",
                "codes_info(self) -> np.ndarray",
                "_get_compressed_codes(self) -> Tuple[np.ndarray, np.ndarray]",
                "ngroups(self) -> int",
                "reconstructed_codes(self) -> List[np.ndarray]",
                "result_index(self) -> Index",
                "get_group_levels(self)",
                "_is_builtin_func(self, arg)",
                "_get_cython_function(self, kind: str, how: str, values, is_numeric: bool)",
                "_get_cython_func_and_vals(self, kind: str, how: str, values: np.ndarray, is_numeric: bool)",
                "_cython_operation(self, kind: str, values, how: str, axis, min_count: int=-1, **kwargs) -> Tuple[np.ndarray, Optional[List[str]]]",
                "aggregate(self, values, how: str, axis: int=0, min_count: int=-1) -> Tuple[np.ndarray, Optional[List[str]]]",
                "transform(self, values, how: str, axis: int=0, **kwargs)",
                "_aggregate(self, result, counts, values, comp_ids, agg_func, is_datetimelike: bool, min_count: int=-1)",
                "_transform(self, result, values, comp_ids, transform_func, is_datetimelike: bool, **kwargs)",
                "agg_series(self, obj: Series, func)",
                "_aggregate_series_fast(self, obj: Series, func)",
                "_aggregate_series_pure_python(self, obj: Series, func)",
                "__init__(self, bins, binlabels, filter_empty: bool=False, mutated: bool=False, indexer=None)",
                "groups(self)",
                "nkeys(self) -> int",
                "_get_grouper(self)",
                "get_iterator(self, data: FrameOrSeries, axis: int=0)",
                "indices(self)",
                "group_info(self)",
                "reconstructed_codes(self) -> List[np.ndarray]",
                "result_index(self)",
                "levels(self)",
                "names(self)",
                "groupings(self) -> 'List[grouper.Grouping]'",
                "agg_series(self, obj: Series, func)",
                "__init__(self, data: FrameOrSeries, labels, ngroups: int, axis: int=0)",
                "slabels(self)",
                "sort_idx(self)",
                "__iter__(self)",
                "_get_sorted_data(self) -> FrameOrSeries",
                "_chop(self, sdata, slice_obj: slice) -> NDFrame",
                "_chop(self, sdata: Series, slice_obj: slice) -> Series",
                "fast_apply(self, f, names)",
                "_chop(self, sdata: DataFrame, slice_obj: slice) -> DataFrame"
            ],
            "variables_in_file": {
                "Index": [
                    259,
                    227,
                    298,
                    82,
                    664,
                    89,
                    253
                ],
                "bool": [
                    257,
                    358,
                    583,
                    393,
                    717,
                    718,
                    849,
                    84,
                    85,
                    86,
                    596
                ],
                "Optional": [
                    568,
                    554,
                    428,
                    87
                ],
                "np.ndarray": [
                    292,
                    393,
                    809,
                    428,
                    664,
                    270,
                    278,
                    87,
                    568,
                    223
                ],
                "np": [
                    393,
                    525,
                    270,
                    527,
                    656,
                    274,
                    533,
                    278,
                    664,
                    793,
                    794,
                    285,
                    157,
                    671,
                    798,
                    545,
                    800,
                    292,
                    809,
                    811,
                    428,
                    560,
                    568,
                    87,
                    223,
                    241
                ],
                "isinstance": [
                    165,
                    871,
                    850,
                    854,
                    664,
                    89,
                    924
                ],
                "axis": [
                    130,
                    166,
                    870,
                    871,
                    557,
                    766,
                    570,
                    501,
                    503,
                    152,
                    89,
                    444,
                    123,
                    92,
                    574,
                    767
                ],
                "self._filter_empty_groups": [
                    547,
                    91,
                    723
                ],
                "self": [
                    521,
                    527,
                    528,
                    537,
                    547,
                    554,
                    569,
                    574,
                    599,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    606,
                    610,
                    101,
                    105,
                    617,
                    108,
                    621,
                    112,
                    624,
                    631,
                    123,
                    124,
                    639,
                    129,
                    641,
                    139,
                    142,
                    143,
                    654,
                    145,
                    148,
                    151,
                    152,
                    153,
                    721,
                    722,
                    723,
                    724,
                    725,
                    215,
                    216,
                    729,
                    218,
                    219,
                    224,
                    739,
                    228,
                    232,
                    238,
                    755,
                    244,
                    249,
                    250,
                    252,
                    254,
                    770,
                    259,
                    263,
                    776,
                    783,
                    272,
                    273,
                    274,
                    279,
                    792,
                    281,
                    282,
                    794,
                    284,
                    797,
                    289,
                    293,
                    294,
                    295,
                    299,
                    300,
                    811,
                    302,
                    303,
                    815,
                    305,
                    816,
                    818,
                    310,
                    311,
                    822,
                    314,
                    826,
                    832,
                    837,
                    838,
                    842,
                    845,
                    866,
                    867,
                    868,
                    870,
                    361,
                    876,
                    881,
                    884,
                    886,
                    891,
                    894,
                    897,
                    900,
                    911,
                    913,
                    917,
                    411,
                    421,
                    493,
                    499,
                    509,
                    511
                ],
                "self.compressed": [
                    299,
                    91,
                    310
                ],
                "len": [
                    265,
                    142,
                    280,
                    665,
                    797,
                    285,
                    289,
                    299,
                    815,
                    310,
                    184,
                    838,
                    851,
                    215,
                    729,
                    91,
                    608,
                    112,
                    249,
                    767
                ],
                "groupings": [
                    91,
                    93
                ],
                "self.axis": [
                    897,
                    870,
                    917,
                    92,
                    254
                ],
                "self._groupings": [
                    101,
                    93
                ],
                "List": [
                    227,
                    100,
                    292,
                    809,
                    554,
                    428,
                    568,
                    93,
                    223
                ],
                "grouper.Grouping": [
                    93,
                    831
                ],
                "grouper": [
                    648,
                    649,
                    139,
                    845,
                    846,
                    93,
                    831
                ],
                "list": [
                    786,
                    780,
                    93
                ],
                "self.sort": [
                    282,
                    94
                ],
                "sort": [
                    94
                ],
                "self.group_keys": [
                    95
                ],
                "group_keys": [
                    185,
                    171,
                    210,
                    184,
                    153,
                    187,
                    95
                ],
                "self.mutated": [
                    96,
                    724,
                    151
                ],
                "mutated": [
                    96,
                    171,
                    207,
                    210,
                    724,
                    151,
                    185
                ],
                "self.indexer": [
                    97,
                    274,
                    725,
                    273
                ],
                "indexer": [
                    97,
                    645,
                    646,
                    647,
                    725
                ],
                "property": [
                    226,
                    99,
                    291,
                    230,
                    103,
                    744,
                    110,
                    820,
                    824,
                    828,
                    222
                ],
                "tuple": [
                    105
                ],
                "ping.ngroups": [
                    105
                ],
                "ping": [
                    224,
                    228,
                    232,
                    105,
                    314,
                    303,
                    284,
                    316,
                    218,
                    219,
                    252,
                    285
                ],
                "self.groupings": [
                    139,
                    142,
                    284,
                    299,
                    300,
                    303,
                    310,
                    311,
                    314,
                    215,
                    216,
                    218,
                    219,
                    224,
                    228,
                    232,
                    105,
                    112,
                    249,
                    250,
                    252
                ],
                "iter": [
                    108
                ],
                "self.indices": [
                    108
                ],
                "int": [
                    128,
                    288,
                    865,
                    871,
                    584,
                    745,
                    427,
                    111,
                    656,
                    114,
                    757,
                    150,
                    567,
                    573
                ],
                "FrameOrSeries": [
                    128,
                    865,
                    896,
                    114,
                    757,
                    150,
                    923,
                    156
                ],
                "splitter": [
                    165,
                    171,
                    187,
                    659,
                    661,
                    152,
                    123,
                    156,
                    125
                ],
                "self._get_splitter": [
                    152,
                    123
                ],
                "data": [
                    130,
                    866,
                    930,
                    152,
                    123,
                    924,
                    766,
                    767
                ],
                "keys": [
                    220,
                    219,
                    124,
                    125
                ],
                "self._get_group_keys": [
                    153,
                    124
                ],
                "key": [
                    738,
                    739,
                    740,
                    187,
                    188,
                    125,
                    126
                ],
                "i": [
                    200,
                    893,
                    782,
                    784,
                    786,
                    787,
                    187,
                    125,
                    894
                ],
                "group": [
                    673,
                    204,
                    205,
                    661,
                    662,
                    187,
                    188,
                    125,
                    126
                ],
                "zip": [
                    832,
                    770,
                    739,
                    893,
                    783,
                    314,
                    187,
                    252,
                    125
                ],
                "comp_ids": [
                    800,
                    129,
                    130,
                    803,
                    294,
                    263,
                    295,
                    266,
                    267,
                    589,
                    591,
                    145,
                    148,
                    599,
                    600,
                    798
                ],
                "_": [
                    129,
                    641,
                    294,
                    521,
                    238,
                    654,
                    272,
                    145,
                    599
                ],
                "ngroups": [
                    129,
                    130,
                    641,
                    645,
                    648,
                    265,
                    267,
                    654,
                    656,
                    145,
                    659,
                    148,
                    792,
                    793,
                    797,
                    798,
                    671,
                    800,
                    805,
                    599,
                    600,
                    868
                ],
                "self.group_info": [
                    129,
                    641,
                    259,
                    294,
                    521,
                    238,
                    654,
                    272,
                    145,
                    599
                ],
                "get_splitter": [
                    130,
                    659
                ],
                "self.levels": [
                    832,
                    148,
                    143
                ],
                "get_flattened_iterator": [
                    148
                ],
                "self.codes": [
                    148,
                    293,
                    279
                ],
                "result_values": [
                    194,
                    195,
                    171,
                    208,
                    210,
                    184,
                    185,
                    154
                ],
                "sdata": [
                    168,
                    905,
                    913,
                    914,
                    884,
                    918,
                    920,
                    156,
                    157,
                    894
                ],
                "splitter._get_sorted_data": [
                    156
                ],
                "sdata.ndim": [
                    157
                ],
                "np.any": [
                    157
                ],
                "sdata.dtypes.apply": [
                    157
                ],
                "sdata.dtypes": [
                    157
                ],
                "is_extension_array_dtype": [
                    840,
                    612,
                    157
                ],
                "com.get_callable_name": [
                    164
                ],
                "com": [
                    219,
                    164
                ],
                "f": [
                    164,
                    171,
                    365,
                    205,
                    366,
                    367,
                    914,
                    375,
                    377,
                    380,
                    382
                ],
                "base.plotting_methods": [
                    164
                ],
                "base": [
                    164
                ],
                "FrameSplitter": [
                    928,
                    165
                ],
                "sdata.index._has_complex_internals": [
                    168
                ],
                "sdata.index": [
                    168
                ],
                "splitter.fast_apply": [
                    171
                ],
                "libreduction.InvalidApply": [
                    173
                ],
                "libreduction": [
                    648,
                    914,
                    845,
                    173
                ],
                "str": [
                    358,
                    393,
                    554,
                    427,
                    428,
                    176,
                    626,
                    567,
                    568,
                    573
                ],
                "err": [
                    176,
                    626
                ],
                "object.__setattr__": [
                    188
                ],
                "object": [
                    491,
                    188
                ],
                "group_axes": [
                    204,
                    206
                ],
                "group.axes": [
                    204
                ],
                "res": [
                    674,
                    205,
                    206,
                    208,
                    662,
                    664,
                    665,
                    668
                ],
                "_is_indexed_like": [
                    206
                ],
                "result_values.append": [
                    208
                ],
                "indices": [
                    216,
                    786,
                    780,
                    788
                ],
                "codes_list": [
                    218,
                    220
                ],
                "ping.codes": [
                    224,
                    218,
                    285
                ],
                "com.values_from_object": [
                    219
                ],
                "ping.group_index": [
                    219,
                    228,
                    285
                ],
                "get_indexer_dict": [
                    220
                ],
                "cache_readonly": [
                    256,
                    261,
                    808,
                    297,
                    778,
                    873,
                    269,
                    813,
                    878,
                    212,
                    246,
                    790,
                    731,
                    287
                ],
                "ping.name": [
                    232
                ],
                "ids": [
                    241,
                    238,
                    239
                ],
                "ngroup": [
                    240,
                    241,
                    238
                ],
                "ensure_platform_int": [
                    315,
                    796,
                    239
                ],
                "out": [
                    241,
                    243,
                    244
                ],
                "np.bincount": [
                    241
                ],
                "Series": [
                    835,
                    904,
                    924,
                    234,
                    652,
                    850,
                    244,
                    664,
                    633,
                    604
                ],
                "self.result_index": [
                    289,
                    244
                ],
                "groups": [
                    250
                ],
                "to_groupby": [
                    252,
                    253,
                    254
                ],
                "ping.grouper": [
                    252
                ],
                "self.axis.groupby": [
                    254
                ],
                "is_monotonic": [
                    259
                ],
                "obs_group_ids": [
                    804,
                    263,
                    265,
                    267,
                    793
                ],
                "self._get_compressed_codes": [
                    263
                ],
                "ensure_int64": [
                    721,
                    266,
                    867
                ],
                "codes": [
                    293,
                    295,
                    521,
                    302,
                    272,
                    305,
                    274,
                    275,
                    276,
                    529,
                    538,
                    314,
                    315,
                    316
                ],
                "sorter": [
                    274,
                    275
                ],
                "np.lexsort": [
                    274
                ],
                "all_codes": [
                    280,
                    281,
                    279
                ],
                "group_index": [
                    641,
                    645,
                    647,
                    648,
                    654,
                    659,
                    281,
                    282
                ],
                "get_group_index": [
                    281
                ],
                "self.shape": [
                    281,
                    295
                ],
                "compress_group_index": [
                    282
                ],
                "np.arange": [
                    800,
                    793,
                    285,
                    798
                ],
                "Tuple": [
                    568,
                    428,
                    278
                ],
                "obs_ids": [
                    294,
                    295
                ],
                "decons_obs_group_ids": [
                    295
                ],
                "result_index.rename": [
                    300
                ],
                "result_index": [
                    300,
                    311
                ],
                "self.names": [
                    832,
                    305,
                    300
                ],
                "self.reconstructed_codes": [
                    314,
                    302
                ],
                "levels": [
                    305,
                    316,
                    318,
                    303
                ],
                "ping.result_index": [
                    316,
                    303
                ],
                "result": [
                    649,
                    650,
                    524,
                    528,
                    529,
                    657,
                    532,
                    663,
                    537,
                    538,
                    541,
                    542,
                    671,
                    544,
                    545,
                    674,
                    548,
                    549,
                    676,
                    677,
                    552,
                    680,
                    557,
                    304,
                    560,
                    562,
                    307,
                    564,
                    589,
                    591,
                    593,
                    600,
                    602,
                    737,
                    742
                ],
                "MultiIndex": [
                    304
                ],
                "name_list": [
                    320,
                    313,
                    318
                ],
                "ping.result_index.take": [
                    316
                ],
                "name_list.append": [
                    318
                ],
                "_cython_functions": [
                    325
                ],
                "_cython_arity": [
                    347
                ],
                "_name_functions": [
                    349
                ],
                "SelectionMixin._builtin_table.get": [
                    356
                ],
                "SelectionMixin._builtin_table": [
                    356
                ],
                "SelectionMixin": [
                    356
                ],
                "arg": [
                    356
                ],
                "dtype_str": [
                    360,
                    377,
                    370,
                    387
                ],
                "values.dtype.name": [
                    360
                ],
                "values.dtype": [
                    517,
                    455,
                    360,
                    467,
                    473,
                    474,
                    479
                ],
                "values": [
                    517,
                    529,
                    533,
                    538,
                    411,
                    415,
                    417,
                    418,
                    421,
                    424,
                    437,
                    439,
                    441,
                    570,
                    574,
                    454,
                    455,
                    456,
                    461,
                    589,
                    591,
                    467,
                    471,
                    600,
                    473,
                    474,
                    477,
                    479,
                    480,
                    481,
                    484,
                    485,
                    487,
                    360,
                    488,
                    489,
                    491,
                    495,
                    498,
                    504,
                    509,
                    511
                ],
                "ftype": [
                    361,
                    371,
                    365
                ],
                "self._cython_functions": [
                    361
                ],
                "kind": [
                    547,
                    421,
                    361,
                    523,
                    561,
                    531,
                    436,
                    411,
                    511
                ],
                "how": [
                    513,
                    387,
                    421,
                    361,
                    457,
                    459,
                    554,
                    493,
                    462,
                    464,
                    570,
                    411,
                    574,
                    511
                ],
                "getattr": [
                    371,
                    365
                ],
                "libgroupby": [
                    586,
                    371,
                    365
                ],
                "is_numeric": [
                    516,
                    421,
                    488,
                    366,
                    474,
                    411,
                    413,
                    478,
                    511
                ],
                "dt": [
                    370,
                    371
                ],
                "f2": [
                    371,
                    372,
                    373
                ],
                "hasattr": [
                    375
                ],
                "f.__signatures__": [
                    377
                ],
                "func": [
                    384,
                    390,
                    648,
                    511,
                    529,
                    662,
                    538,
                    411,
                    421,
                    424,
                    842,
                    845,
                    610,
                    617,
                    621,
                    624,
                    631,
                    382,
                    639
                ],
                "NotImplementedError": [
                    385,
                    455,
                    458,
                    463,
                    440,
                    506,
                    412
                ],
                "self._get_cython_function": [
                    411,
                    421
                ],
                "ensure_float64": [
                    480,
                    489,
                    485,
                    415
                ],
                "TypeError": [
                    416
                ],
                "lib.infer_dtype": [
                    417
                ],
                "lib": [
                    417,
                    891,
                    677,
                    911
                ],
                "values.astype": [
                    418,
                    491
                ],
                "complex": [
                    418
                ],
                "orig_values": [
                    560,
                    562,
                    437,
                    559
                ],
                "values.ndim": [
                    441,
                    495,
                    439
                ],
                "is_categorical_dtype": [
                    454
                ],
                "is_sparse": [
                    454
                ],
                "is_datetime64_any_dtype": [
                    456
                ],
                "is_timedelta64_dtype": [
                    461
                ],
                "is_datetime64tz_dtype": [
                    467,
                    559
                ],
                "values.view": [
                    477,
                    471
                ],
                "is_datetimelike": [
                    529,
                    561,
                    600,
                    473,
                    538,
                    476,
                    541
                ],
                "needs_i8_conversion": [
                    473
                ],
                "is_numeric_dtype": [
                    474
                ],
                "is_bool_dtype": [
                    479
                ],
                "is_integer_dtype": [
                    481,
                    541
                ],
                "any": [
                    484
                ],
                "iNaT": [
                    484,
                    542
                ],
                "ensure_int_or_float": [
                    487
                ],
                "is_complex_dtype": [
                    488
                ],
                "arity": [
                    505,
                    499,
                    493,
                    551
                ],
                "self._cython_arity.get": [
                    493
                ],
                "self._cython_arity": [
                    493
                ],
                "vdim": [
                    497,
                    551,
                    495
                ],
                "swapped": [
                    496,
                    556,
                    502
                ],
                "out_shape": [
                    525,
                    499,
                    509
                ],
                "self.ngroups": [
                    868,
                    837,
                    527,
                    911,
                    881,
                    499,
                    886,
                    792,
                    891,
                    509,
                    606
                ],
                "values.T": [
                    504
                ],
                "values.shape": [
                    509
                ],
                "self._get_cython_func_and_vals": [
                    511
                ],
                "out_dtype": [
                    514,
                    517,
                    519,
                    525,
                    533
                ],
                "values.dtype.kind": [
                    517
                ],
                "values.dtype.itemsize": [
                    517
                ],
                "_maybe_fill": [
                    524,
                    532
                ],
                "np.empty": [
                    525,
                    671
                ],
                "np.nan": [
                    545,
                    533,
                    525
                ],
                "counts": [
                    673,
                    547,
                    549,
                    680,
                    649,
                    650,
                    589,
                    527,
                    591,
                    529,
                    656
                ],
                "np.zeros": [
                    656,
                    527
                ],
                "np.int64": [
                    560,
                    527
                ],
                "self._aggregate": [
                    528
                ],
                "min_count": [
                    529,
                    570,
                    591
                ],
                "np.empty_like": [
                    533
                ],
                "self._transform": [
                    537
                ],
                "kwargs": [
                    600,
                    930,
                    538,
                    574
                ],
                "mask": [
                    545,
                    542,
                    543
                ],
                "mask.any": [
                    543
                ],
                "result.astype": [
                    544,
                    560,
                    562
                ],
                "counts.all": [
                    547
                ],
                "result.ndim": [
                    548
                ],
                "names": [
                    554,
                    564,
                    914
                ],
                "self._name_functions.get": [
                    554
                ],
                "self._name_functions": [
                    554
                ],
                "result.swapaxes": [
                    557
                ],
                "orig_values.dtype": [
                    560,
                    562,
                    559
                ],
                "type": [
                    560
                ],
                "self._cython_operation": [
                    569,
                    574
                ],
                "agg_func": [
                    586,
                    589,
                    591
                ],
                "libgroupby.group_nth": [
                    586
                ],
                "transform_func": [
                    600
                ],
                "obj": [
                    644,
                    646,
                    648,
                    659,
                    840,
                    842,
                    844,
                    845,
                    850,
                    853,
                    854,
                    855,
                    608,
                    610,
                    612,
                    617,
                    619,
                    621,
                    624,
                    631
                ],
                "self._aggregate_series_pure_python": [
                    610,
                    617,
                    842,
                    621,
                    631
                ],
                "obj.dtype": [
                    840,
                    612
                ],
                "obj.index._has_complex_internals": [
                    619
                ],
                "obj.index": [
                    619,
                    853,
                    855
                ],
                "self._aggregate_series_fast": [
                    624
                ],
                "ValueError": [
                    625,
                    670
                ],
                "self._is_builtin_func": [
                    639
                ],
                "dummy": [
                    648,
                    644,
                    845,
                    844
                ],
                "obj._get_values": [
                    644
                ],
                "slice": [
                    899,
                    644,
                    904,
                    766,
                    916,
                    894
                ],
                "get_group_index_sorter": [
                    881,
                    645
                ],
                "obj.take": [
                    646
                ],
                "algorithms.take_nd": [
                    876,
                    647
                ],
                "algorithms": [
                    876,
                    647
                ],
                "libreduction.SeriesGrouper": [
                    648
                ],
                "grouper.get_result": [
                    649,
                    846
                ],
                "label": [
                    673,
                    674,
                    771,
                    770,
                    772,
                    783,
                    785,
                    786,
                    661
                ],
                "res.item": [
                    668
                ],
                "group.shape": [
                    673
                ],
                "lib.maybe_convert_objects": [
                    677
                ],
                "BaseGrouper": [
                    683
                ],
                "self.bins": [
                    770,
                    739,
                    838,
                    811,
                    845,
                    783,
                    721,
                    729,
                    794,
                    797
                ],
                "bins": [
                    721
                ],
                "self.binlabels": [
                    770,
                    739,
                    776,
                    783,
                    815,
                    816,
                    722,
                    818,
                    822,
                    729,
                    826
                ],
                "ensure_index": [
                    722
                ],
                "binlabels": [
                    722
                ],
                "filter_empty": [
                    723
                ],
                "value": [
                    738,
                    739
                ],
                "NaT": [
                    785,
                    771,
                    740
                ],
                "slicer": [
                    776,
                    772,
                    766
                ],
                "data._slice": [
                    766
                ],
                "start": [
                    769,
                    772,
                    773,
                    775,
                    776,
                    894,
                    893,
                    766
                ],
                "edge": [
                    770,
                    772,
                    773,
                    766
                ],
                "length": [
                    775,
                    767
                ],
                "data.axes": [
                    767
                ],
                "collections.defaultdict": [
                    780
                ],
                "collections": [
                    780
                ],
                "bin": [
                    784,
                    786,
                    787,
                    783
                ],
                "range": [
                    786
                ],
                "rep": [
                    800,
                    794,
                    796,
                    798
                ],
                "np.diff": [
                    794
                ],
                "np.r_": [
                    800,
                    794,
                    811
                ],
                "np.repeat": [
                    800,
                    798
                ],
                "comp_ids.astype": [
                    803
                ],
                "obs_group_ids.astype": [
                    804
                ],
                "np.flatnonzero": [
                    811
                ],
                "isna": [
                    815
                ],
                "self.binlabels.name": [
                    826
                ],
                "lvl": [
                    832,
                    831
                ],
                "name": [
                    832,
                    831
                ],
                "libreduction.SeriesBinGrouper": [
                    845
                ],
                "axes": [
                    851,
                    853,
                    855
                ],
                "obj.index.equals": [
                    853,
                    855
                ],
                "DataFrame": [
                    916,
                    854
                ],
                "self.data": [
                    897,
                    866
                ],
                "self.labels": [
                    881,
                    867,
                    876
                ],
                "labels": [
                    867
                ],
                "self.sort_idx": [
                    897,
                    876
                ],
                "self._get_sorted_data": [
                    913,
                    884
                ],
                "starts": [
                    914,
                    891,
                    893,
                    911
                ],
                "ends": [
                    914,
                    891,
                    893,
                    911
                ],
                "lib.generate_slices": [
                    891,
                    911
                ],
                "self.slabels": [
                    891,
                    911
                ],
                "end": [
                    893,
                    894
                ],
                "enumerate": [
                    893
                ],
                "self._chop": [
                    894
                ],
                "self.data.take": [
                    897
                ],
                "AbstractMethodError": [
                    900
                ],
                "NDFrame": [
                    899
                ],
                "DataSplitter": [
                    923,
                    908,
                    925,
                    903
                ],
                "sdata._get_values": [
                    905
                ],
                "slice_obj": [
                    920,
                    905,
                    918
                ],
                "libreduction.apply_frame_axis0": [
                    914
                ],
                "sdata.iloc": [
                    918
                ],
                "sdata._slice": [
                    920
                ],
                "klass": [
                    928,
                    930,
                    925
                ],
                "Type": [
                    925
                ],
                "SeriesSplitter": [
                    925
                ],
                "args": [
                    930
                ]
            },
            "filtered_variables_in_file": {
                "Index": [
                    259,
                    227,
                    298,
                    82,
                    664,
                    89,
                    253
                ],
                "Optional": [
                    568,
                    554,
                    428,
                    87
                ],
                "np.ndarray": [
                    292,
                    393,
                    809,
                    428,
                    664,
                    270,
                    278,
                    87,
                    568,
                    223
                ],
                "np": [
                    393,
                    525,
                    270,
                    527,
                    656,
                    274,
                    533,
                    278,
                    664,
                    793,
                    794,
                    285,
                    157,
                    671,
                    798,
                    545,
                    800,
                    292,
                    809,
                    811,
                    428,
                    560,
                    568,
                    87,
                    223,
                    241
                ],
                "axis": [
                    130,
                    166,
                    870,
                    871,
                    557,
                    766,
                    570,
                    501,
                    503,
                    152,
                    89,
                    444,
                    123,
                    92,
                    574,
                    767
                ],
                "self._filter_empty_groups": [
                    547,
                    91,
                    723
                ],
                "self": [
                    521,
                    527,
                    528,
                    537,
                    547,
                    554,
                    569,
                    574,
                    599,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    606,
                    610,
                    101,
                    105,
                    617,
                    108,
                    621,
                    112,
                    624,
                    631,
                    123,
                    124,
                    639,
                    129,
                    641,
                    139,
                    142,
                    143,
                    654,
                    145,
                    148,
                    151,
                    152,
                    153,
                    721,
                    722,
                    723,
                    724,
                    725,
                    215,
                    216,
                    729,
                    218,
                    219,
                    224,
                    739,
                    228,
                    232,
                    238,
                    755,
                    244,
                    249,
                    250,
                    252,
                    254,
                    770,
                    259,
                    263,
                    776,
                    783,
                    272,
                    273,
                    274,
                    279,
                    792,
                    281,
                    282,
                    794,
                    284,
                    797,
                    289,
                    293,
                    294,
                    295,
                    299,
                    300,
                    811,
                    302,
                    303,
                    815,
                    305,
                    816,
                    818,
                    310,
                    311,
                    822,
                    314,
                    826,
                    832,
                    837,
                    838,
                    842,
                    845,
                    866,
                    867,
                    868,
                    870,
                    361,
                    876,
                    881,
                    884,
                    886,
                    891,
                    894,
                    897,
                    900,
                    911,
                    913,
                    917,
                    411,
                    421,
                    493,
                    499,
                    509,
                    511
                ],
                "self.compressed": [
                    299,
                    91,
                    310
                ],
                "groupings": [
                    91,
                    93
                ],
                "self.axis": [
                    897,
                    870,
                    917,
                    92,
                    254
                ],
                "self._groupings": [
                    101,
                    93
                ],
                "List": [
                    227,
                    100,
                    292,
                    809,
                    554,
                    428,
                    568,
                    93,
                    223
                ],
                "grouper.Grouping": [
                    93,
                    831
                ],
                "grouper": [
                    648,
                    649,
                    139,
                    845,
                    846,
                    93,
                    831
                ],
                "self.sort": [
                    282,
                    94
                ],
                "sort": [
                    94
                ],
                "self.group_keys": [
                    95
                ],
                "group_keys": [
                    185,
                    171,
                    210,
                    184,
                    153,
                    187,
                    95
                ],
                "self.mutated": [
                    96,
                    724,
                    151
                ],
                "mutated": [
                    96,
                    171,
                    207,
                    210,
                    724,
                    151,
                    185
                ],
                "self.indexer": [
                    97,
                    274,
                    725,
                    273
                ],
                "indexer": [
                    97,
                    645,
                    646,
                    647,
                    725
                ],
                "ping.ngroups": [
                    105
                ],
                "ping": [
                    224,
                    228,
                    232,
                    105,
                    314,
                    303,
                    284,
                    316,
                    218,
                    219,
                    252,
                    285
                ],
                "self.groupings": [
                    139,
                    142,
                    284,
                    299,
                    300,
                    303,
                    310,
                    311,
                    314,
                    215,
                    216,
                    218,
                    219,
                    224,
                    228,
                    232,
                    105,
                    112,
                    249,
                    250,
                    252
                ],
                "self.indices": [
                    108
                ],
                "FrameOrSeries": [
                    128,
                    865,
                    896,
                    114,
                    757,
                    150,
                    923,
                    156
                ],
                "splitter": [
                    165,
                    171,
                    187,
                    659,
                    661,
                    152,
                    123,
                    156,
                    125
                ],
                "self._get_splitter": [
                    152,
                    123
                ],
                "data": [
                    130,
                    866,
                    930,
                    152,
                    123,
                    924,
                    766,
                    767
                ],
                "keys": [
                    220,
                    219,
                    124,
                    125
                ],
                "self._get_group_keys": [
                    153,
                    124
                ],
                "key": [
                    738,
                    739,
                    740,
                    187,
                    188,
                    125,
                    126
                ],
                "i": [
                    200,
                    893,
                    782,
                    784,
                    786,
                    787,
                    187,
                    125,
                    894
                ],
                "group": [
                    673,
                    204,
                    205,
                    661,
                    662,
                    187,
                    188,
                    125,
                    126
                ],
                "comp_ids": [
                    800,
                    129,
                    130,
                    803,
                    294,
                    263,
                    295,
                    266,
                    267,
                    589,
                    591,
                    145,
                    148,
                    599,
                    600,
                    798
                ],
                "_": [
                    129,
                    641,
                    294,
                    521,
                    238,
                    654,
                    272,
                    145,
                    599
                ],
                "ngroups": [
                    129,
                    130,
                    641,
                    645,
                    648,
                    265,
                    267,
                    654,
                    656,
                    145,
                    659,
                    148,
                    792,
                    793,
                    797,
                    798,
                    671,
                    800,
                    805,
                    599,
                    600,
                    868
                ],
                "self.group_info": [
                    129,
                    641,
                    259,
                    294,
                    521,
                    238,
                    654,
                    272,
                    145,
                    599
                ],
                "get_splitter": [
                    130,
                    659
                ],
                "self.levels": [
                    832,
                    148,
                    143
                ],
                "get_flattened_iterator": [
                    148
                ],
                "self.codes": [
                    148,
                    293,
                    279
                ],
                "result_values": [
                    194,
                    195,
                    171,
                    208,
                    210,
                    184,
                    185,
                    154
                ],
                "sdata": [
                    168,
                    905,
                    913,
                    914,
                    884,
                    918,
                    920,
                    156,
                    157,
                    894
                ],
                "splitter._get_sorted_data": [
                    156
                ],
                "sdata.ndim": [
                    157
                ],
                "np.any": [
                    157
                ],
                "sdata.dtypes.apply": [
                    157
                ],
                "sdata.dtypes": [
                    157
                ],
                "is_extension_array_dtype": [
                    840,
                    612,
                    157
                ],
                "com.get_callable_name": [
                    164
                ],
                "com": [
                    219,
                    164
                ],
                "f": [
                    164,
                    171,
                    365,
                    205,
                    366,
                    367,
                    914,
                    375,
                    377,
                    380,
                    382
                ],
                "base.plotting_methods": [
                    164
                ],
                "base": [
                    164
                ],
                "FrameSplitter": [
                    928,
                    165
                ],
                "sdata.index._has_complex_internals": [
                    168
                ],
                "sdata.index": [
                    168
                ],
                "splitter.fast_apply": [
                    171
                ],
                "libreduction.InvalidApply": [
                    173
                ],
                "libreduction": [
                    648,
                    914,
                    845,
                    173
                ],
                "err": [
                    176,
                    626
                ],
                "object.__setattr__": [
                    188
                ],
                "group_axes": [
                    204,
                    206
                ],
                "group.axes": [
                    204
                ],
                "res": [
                    674,
                    205,
                    206,
                    208,
                    662,
                    664,
                    665,
                    668
                ],
                "_is_indexed_like": [
                    206
                ],
                "result_values.append": [
                    208
                ],
                "indices": [
                    216,
                    786,
                    780,
                    788
                ],
                "codes_list": [
                    218,
                    220
                ],
                "ping.codes": [
                    224,
                    218,
                    285
                ],
                "com.values_from_object": [
                    219
                ],
                "ping.group_index": [
                    219,
                    228,
                    285
                ],
                "get_indexer_dict": [
                    220
                ],
                "cache_readonly": [
                    256,
                    261,
                    808,
                    297,
                    778,
                    873,
                    269,
                    813,
                    878,
                    212,
                    246,
                    790,
                    731,
                    287
                ],
                "ping.name": [
                    232
                ],
                "ids": [
                    241,
                    238,
                    239
                ],
                "ngroup": [
                    240,
                    241,
                    238
                ],
                "ensure_platform_int": [
                    315,
                    796,
                    239
                ],
                "out": [
                    241,
                    243,
                    244
                ],
                "np.bincount": [
                    241
                ],
                "Series": [
                    835,
                    904,
                    924,
                    234,
                    652,
                    850,
                    244,
                    664,
                    633,
                    604
                ],
                "self.result_index": [
                    289,
                    244
                ],
                "groups": [
                    250
                ],
                "to_groupby": [
                    252,
                    253,
                    254
                ],
                "ping.grouper": [
                    252
                ],
                "self.axis.groupby": [
                    254
                ],
                "is_monotonic": [
                    259
                ],
                "obs_group_ids": [
                    804,
                    263,
                    265,
                    267,
                    793
                ],
                "self._get_compressed_codes": [
                    263
                ],
                "ensure_int64": [
                    721,
                    266,
                    867
                ],
                "codes": [
                    293,
                    295,
                    521,
                    302,
                    272,
                    305,
                    274,
                    275,
                    276,
                    529,
                    538,
                    314,
                    315,
                    316
                ],
                "sorter": [
                    274,
                    275
                ],
                "np.lexsort": [
                    274
                ],
                "all_codes": [
                    280,
                    281,
                    279
                ],
                "group_index": [
                    641,
                    645,
                    647,
                    648,
                    654,
                    659,
                    281,
                    282
                ],
                "get_group_index": [
                    281
                ],
                "self.shape": [
                    281,
                    295
                ],
                "compress_group_index": [
                    282
                ],
                "np.arange": [
                    800,
                    793,
                    285,
                    798
                ],
                "Tuple": [
                    568,
                    428,
                    278
                ],
                "obs_ids": [
                    294,
                    295
                ],
                "decons_obs_group_ids": [
                    295
                ],
                "result_index.rename": [
                    300
                ],
                "result_index": [
                    300,
                    311
                ],
                "self.names": [
                    832,
                    305,
                    300
                ],
                "self.reconstructed_codes": [
                    314,
                    302
                ],
                "levels": [
                    305,
                    316,
                    318,
                    303
                ],
                "ping.result_index": [
                    316,
                    303
                ],
                "result": [
                    649,
                    650,
                    524,
                    528,
                    529,
                    657,
                    532,
                    663,
                    537,
                    538,
                    541,
                    542,
                    671,
                    544,
                    545,
                    674,
                    548,
                    549,
                    676,
                    677,
                    552,
                    680,
                    557,
                    304,
                    560,
                    562,
                    307,
                    564,
                    589,
                    591,
                    593,
                    600,
                    602,
                    737,
                    742
                ],
                "MultiIndex": [
                    304
                ],
                "name_list": [
                    320,
                    313,
                    318
                ],
                "ping.result_index.take": [
                    316
                ],
                "name_list.append": [
                    318
                ],
                "_cython_functions": [
                    325
                ],
                "_cython_arity": [
                    347
                ],
                "_name_functions": [
                    349
                ],
                "SelectionMixin._builtin_table.get": [
                    356
                ],
                "SelectionMixin._builtin_table": [
                    356
                ],
                "SelectionMixin": [
                    356
                ],
                "arg": [
                    356
                ],
                "dtype_str": [
                    360,
                    377,
                    370,
                    387
                ],
                "values.dtype.name": [
                    360
                ],
                "values.dtype": [
                    517,
                    455,
                    360,
                    467,
                    473,
                    474,
                    479
                ],
                "values": [
                    517,
                    529,
                    533,
                    538,
                    411,
                    415,
                    417,
                    418,
                    421,
                    424,
                    437,
                    439,
                    441,
                    570,
                    574,
                    454,
                    455,
                    456,
                    461,
                    589,
                    591,
                    467,
                    471,
                    600,
                    473,
                    474,
                    477,
                    479,
                    480,
                    481,
                    484,
                    485,
                    487,
                    360,
                    488,
                    489,
                    491,
                    495,
                    498,
                    504,
                    509,
                    511
                ],
                "ftype": [
                    361,
                    371,
                    365
                ],
                "self._cython_functions": [
                    361
                ],
                "kind": [
                    547,
                    421,
                    361,
                    523,
                    561,
                    531,
                    436,
                    411,
                    511
                ],
                "how": [
                    513,
                    387,
                    421,
                    361,
                    457,
                    459,
                    554,
                    493,
                    462,
                    464,
                    570,
                    411,
                    574,
                    511
                ],
                "libgroupby": [
                    586,
                    371,
                    365
                ],
                "is_numeric": [
                    516,
                    421,
                    488,
                    366,
                    474,
                    411,
                    413,
                    478,
                    511
                ],
                "dt": [
                    370,
                    371
                ],
                "f2": [
                    371,
                    372,
                    373
                ],
                "f.__signatures__": [
                    377
                ],
                "func": [
                    384,
                    390,
                    648,
                    511,
                    529,
                    662,
                    538,
                    411,
                    421,
                    424,
                    842,
                    845,
                    610,
                    617,
                    621,
                    624,
                    631,
                    382,
                    639
                ],
                "self._get_cython_function": [
                    411,
                    421
                ],
                "ensure_float64": [
                    480,
                    489,
                    485,
                    415
                ],
                "lib.infer_dtype": [
                    417
                ],
                "lib": [
                    417,
                    891,
                    677,
                    911
                ],
                "values.astype": [
                    418,
                    491
                ],
                "orig_values": [
                    560,
                    562,
                    437,
                    559
                ],
                "values.ndim": [
                    441,
                    495,
                    439
                ],
                "is_categorical_dtype": [
                    454
                ],
                "is_sparse": [
                    454
                ],
                "is_datetime64_any_dtype": [
                    456
                ],
                "is_timedelta64_dtype": [
                    461
                ],
                "is_datetime64tz_dtype": [
                    467,
                    559
                ],
                "values.view": [
                    477,
                    471
                ],
                "is_datetimelike": [
                    529,
                    561,
                    600,
                    473,
                    538,
                    476,
                    541
                ],
                "needs_i8_conversion": [
                    473
                ],
                "is_numeric_dtype": [
                    474
                ],
                "is_bool_dtype": [
                    479
                ],
                "is_integer_dtype": [
                    481,
                    541
                ],
                "iNaT": [
                    484,
                    542
                ],
                "ensure_int_or_float": [
                    487
                ],
                "is_complex_dtype": [
                    488
                ],
                "arity": [
                    505,
                    499,
                    493,
                    551
                ],
                "self._cython_arity.get": [
                    493
                ],
                "self._cython_arity": [
                    493
                ],
                "vdim": [
                    497,
                    551,
                    495
                ],
                "swapped": [
                    496,
                    556,
                    502
                ],
                "out_shape": [
                    525,
                    499,
                    509
                ],
                "self.ngroups": [
                    868,
                    837,
                    527,
                    911,
                    881,
                    499,
                    886,
                    792,
                    891,
                    509,
                    606
                ],
                "values.T": [
                    504
                ],
                "values.shape": [
                    509
                ],
                "self._get_cython_func_and_vals": [
                    511
                ],
                "out_dtype": [
                    514,
                    517,
                    519,
                    525,
                    533
                ],
                "values.dtype.kind": [
                    517
                ],
                "values.dtype.itemsize": [
                    517
                ],
                "_maybe_fill": [
                    524,
                    532
                ],
                "np.empty": [
                    525,
                    671
                ],
                "np.nan": [
                    545,
                    533,
                    525
                ],
                "counts": [
                    673,
                    547,
                    549,
                    680,
                    649,
                    650,
                    589,
                    527,
                    591,
                    529,
                    656
                ],
                "np.zeros": [
                    656,
                    527
                ],
                "np.int64": [
                    560,
                    527
                ],
                "self._aggregate": [
                    528
                ],
                "min_count": [
                    529,
                    570,
                    591
                ],
                "np.empty_like": [
                    533
                ],
                "self._transform": [
                    537
                ],
                "kwargs": [
                    600,
                    930,
                    538,
                    574
                ],
                "mask": [
                    545,
                    542,
                    543
                ],
                "mask.any": [
                    543
                ],
                "result.astype": [
                    544,
                    560,
                    562
                ],
                "counts.all": [
                    547
                ],
                "result.ndim": [
                    548
                ],
                "names": [
                    554,
                    564,
                    914
                ],
                "self._name_functions.get": [
                    554
                ],
                "self._name_functions": [
                    554
                ],
                "result.swapaxes": [
                    557
                ],
                "orig_values.dtype": [
                    560,
                    562,
                    559
                ],
                "self._cython_operation": [
                    569,
                    574
                ],
                "agg_func": [
                    586,
                    589,
                    591
                ],
                "libgroupby.group_nth": [
                    586
                ],
                "transform_func": [
                    600
                ],
                "obj": [
                    644,
                    646,
                    648,
                    659,
                    840,
                    842,
                    844,
                    845,
                    850,
                    853,
                    854,
                    855,
                    608,
                    610,
                    612,
                    617,
                    619,
                    621,
                    624,
                    631
                ],
                "self._aggregate_series_pure_python": [
                    610,
                    617,
                    842,
                    621,
                    631
                ],
                "obj.dtype": [
                    840,
                    612
                ],
                "obj.index._has_complex_internals": [
                    619
                ],
                "obj.index": [
                    619,
                    853,
                    855
                ],
                "self._aggregate_series_fast": [
                    624
                ],
                "self._is_builtin_func": [
                    639
                ],
                "dummy": [
                    648,
                    644,
                    845,
                    844
                ],
                "obj._get_values": [
                    644
                ],
                "get_group_index_sorter": [
                    881,
                    645
                ],
                "obj.take": [
                    646
                ],
                "algorithms.take_nd": [
                    876,
                    647
                ],
                "algorithms": [
                    876,
                    647
                ],
                "libreduction.SeriesGrouper": [
                    648
                ],
                "grouper.get_result": [
                    649,
                    846
                ],
                "label": [
                    673,
                    674,
                    771,
                    770,
                    772,
                    783,
                    785,
                    786,
                    661
                ],
                "res.item": [
                    668
                ],
                "group.shape": [
                    673
                ],
                "lib.maybe_convert_objects": [
                    677
                ],
                "BaseGrouper": [
                    683
                ],
                "self.bins": [
                    770,
                    739,
                    838,
                    811,
                    845,
                    783,
                    721,
                    729,
                    794,
                    797
                ],
                "bins": [
                    721
                ],
                "self.binlabels": [
                    770,
                    739,
                    776,
                    783,
                    815,
                    816,
                    722,
                    818,
                    822,
                    729,
                    826
                ],
                "ensure_index": [
                    722
                ],
                "binlabels": [
                    722
                ],
                "filter_empty": [
                    723
                ],
                "value": [
                    738,
                    739
                ],
                "NaT": [
                    785,
                    771,
                    740
                ],
                "slicer": [
                    776,
                    772,
                    766
                ],
                "data._slice": [
                    766
                ],
                "start": [
                    769,
                    772,
                    773,
                    775,
                    776,
                    894,
                    893,
                    766
                ],
                "edge": [
                    770,
                    772,
                    773,
                    766
                ],
                "length": [
                    775,
                    767
                ],
                "data.axes": [
                    767
                ],
                "collections.defaultdict": [
                    780
                ],
                "collections": [
                    780
                ],
                "rep": [
                    800,
                    794,
                    796,
                    798
                ],
                "np.diff": [
                    794
                ],
                "np.r_": [
                    800,
                    794,
                    811
                ],
                "np.repeat": [
                    800,
                    798
                ],
                "comp_ids.astype": [
                    803
                ],
                "obs_group_ids.astype": [
                    804
                ],
                "np.flatnonzero": [
                    811
                ],
                "isna": [
                    815
                ],
                "self.binlabels.name": [
                    826
                ],
                "lvl": [
                    832,
                    831
                ],
                "name": [
                    832,
                    831
                ],
                "libreduction.SeriesBinGrouper": [
                    845
                ],
                "axes": [
                    851,
                    853,
                    855
                ],
                "obj.index.equals": [
                    853,
                    855
                ],
                "DataFrame": [
                    916,
                    854
                ],
                "self.data": [
                    897,
                    866
                ],
                "self.labels": [
                    881,
                    867,
                    876
                ],
                "labels": [
                    867
                ],
                "self.sort_idx": [
                    897,
                    876
                ],
                "self._get_sorted_data": [
                    913,
                    884
                ],
                "starts": [
                    914,
                    891,
                    893,
                    911
                ],
                "ends": [
                    914,
                    891,
                    893,
                    911
                ],
                "lib.generate_slices": [
                    891,
                    911
                ],
                "self.slabels": [
                    891,
                    911
                ],
                "end": [
                    893,
                    894
                ],
                "self._chop": [
                    894
                ],
                "self.data.take": [
                    897
                ],
                "AbstractMethodError": [
                    900
                ],
                "NDFrame": [
                    899
                ],
                "DataSplitter": [
                    923,
                    908,
                    925,
                    903
                ],
                "sdata._get_values": [
                    905
                ],
                "slice_obj": [
                    920,
                    905,
                    918
                ],
                "libreduction.apply_frame_axis0": [
                    914
                ],
                "sdata.iloc": [
                    918
                ],
                "sdata._slice": [
                    920
                ],
                "klass": [
                    928,
                    930,
                    925
                ],
                "Type": [
                    925
                ],
                "SeriesSplitter": [
                    925
                ],
                "args": [
                    930
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_70/pandas/tests/groupby/test_categorical.py",
                "test_function": "test_groupby_agg_categorical_columns",
                "test_function_code": "@pytest.mark.parametrize(\n    \"func, expected_values\",\n    [(pd.Series.nunique, [1, 1, 2]), (pd.Series.count, [1, 2, 2])],\n)\ndef test_groupby_agg_categorical_columns(func, expected_values):\n    # 31256\n    df = pd.DataFrame(\n        {\n            \"id\": [0, 1, 2, 3, 4],\n            \"groups\": [0, 1, 1, 2, 2],\n            \"value\": pd.Categorical([0, 0, 0, 0, 1]),\n        }\n    ).set_index(\"id\")\n    result = df.groupby(\"groups\").agg(func)\n\n    expected = pd.DataFrame(\n        {\"value\": expected_values}, index=pd.Index([0, 1, 2], name=\"groups\"),\n    )\n    tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"value\") are different  Attribute \"dtype\" are different [left]:  CategoricalDtype(categories=[0, 1], ordered=False) [right]: int64",
                "full_test_error": "func = <function IndexOpsMixin.nunique at 0x114acf1f0>\nexpected_values = [1, 1, 2]\n\n    @pytest.mark.parametrize(\n        \"func, expected_values\",\n        [(pd.Series.nunique, [1, 1, 2]), (pd.Series.count, [1, 2, 2])],\n    )\n    def test_groupby_agg_categorical_columns(func, expected_values):\n        # 31256\n        df = pd.DataFrame(\n            {\n                \"id\": [0, 1, 2, 3, 4],\n                \"groups\": [0, 1, 1, 2, 2],\n                \"value\": pd.Categorical([0, 0, 0, 0, 1]),\n            }\n        ).set_index(\"id\")\n        result = df.groupby(\"groups\").agg(func)\n    \n        expected = pd.DataFrame(\n            {\"value\": expected_values}, index=pd.Index([0, 1, 2], name=\"groups\"),\n        )\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"value\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  CategoricalDtype(categories=[0, 1], ordered=False)\nE       [right]: int64\n\npandas/tests/groupby/test_categorical.py:1365: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('func, expected_values', [(pd.Series.nunique, [1, 1, 2]), (pd.Series.count, [1, 2, 2])])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_70/pandas/tests/groupby/test_categorical.py",
                "test_function": "test_groupby_agg_categorical_columns",
                "test_function_code": "@pytest.mark.parametrize(\n    \"func, expected_values\",\n    [(pd.Series.nunique, [1, 1, 2]), (pd.Series.count, [1, 2, 2])],\n)\ndef test_groupby_agg_categorical_columns(func, expected_values):\n    # 31256\n    df = pd.DataFrame(\n        {\n            \"id\": [0, 1, 2, 3, 4],\n            \"groups\": [0, 1, 1, 2, 2],\n            \"value\": pd.Categorical([0, 0, 0, 0, 1]),\n        }\n    ).set_index(\"id\")\n    result = df.groupby(\"groups\").agg(func)\n\n    expected = pd.DataFrame(\n        {\"value\": expected_values}, index=pd.Index([0, 1, 2], name=\"groups\"),\n    )\n    tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"value\") are different  Attribute \"dtype\" are different [left]:  CategoricalDtype(categories=[0, 1], ordered=False) [right]: int64",
                "full_test_error": "func = <function Series.count at 0x115515ca0>, expected_values = [1, 2, 2]\n\n    @pytest.mark.parametrize(\n        \"func, expected_values\",\n        [(pd.Series.nunique, [1, 1, 2]), (pd.Series.count, [1, 2, 2])],\n    )\n    def test_groupby_agg_categorical_columns(func, expected_values):\n        # 31256\n        df = pd.DataFrame(\n            {\n                \"id\": [0, 1, 2, 3, 4],\n                \"groups\": [0, 1, 1, 2, 2],\n                \"value\": pd.Categorical([0, 0, 0, 0, 1]),\n            }\n        ).set_index(\"id\")\n        result = df.groupby(\"groups\").agg(func)\n    \n        expected = pd.DataFrame(\n            {\"value\": expected_values}, index=pd.Index([0, 1, 2], name=\"groups\"),\n        )\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] (column name=\"value\") are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  CategoricalDtype(categories=[0, 1], ordered=False)\nE       [right]: int64\n\npandas/tests/groupby/test_categorical.py:1365: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('func, expected_values', [(pd.Series.nunique, [1, 1, 2]), (pd.Series.count, [1, 2, 2])])"
                ]
            }
        ]
    }
}