{
    "pandas": [
        {
            "bugID": 104,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 1845,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas import concat\n    from pandas import concat\n    \n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n    \n        inference = None\n        if is_integer_dtype(vals):\n            inference = np.int64\n        elif is_datetime64_dtype(vals):\n            inference = \"datetime64[ns]\"\n            vals = vals.astype(np.float)\n    \n        return vals, inference\n    \n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if inference:\n            if not (is_integer_dtype(inference) and interpolation in {\"linear\", \"midpoint\"}):\n                vals = vals.astype(inference)\n    \n        return vals\n    \n    if is_scalar(q):\n        result = self._get_cythonized_result(\"group_quantile\", aggregate=True, \n                                            needs_values=True, needs_mask=True, cython_dtype=np.dtype(np.float64), \n                                            pre_processing=pre_processor, post_processing=post_processor, \n                                            q=q, interpolation=interpolation)\n        return result\n    else:\n        results = [self._get_cythonized_result(\"group_quantile\", aggregate=True, \n                  needs_values=True, needs_mask=True, cython_dtype=np.dtype(np.float64), \n                  pre_processing=pre_processor, post_processing=post_processor, \n                  q=qi, interpolation=interpolation) for qi in q]\n        result = concat(results, axis=0, keys=q)\n        \n        # Assuming each group has the same number of rows\n        hi = len(q) * self.ngroups\n        arr = np.tile(np.arange(0, len(result), self.ngroups), len(q))\n        result = result.take(arr, axis=0)\n    \n        return result"
        }
    ]
}