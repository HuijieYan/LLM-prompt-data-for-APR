{
    "pandas": [
        {
            "bugID": 104,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 1845,
            "file_name": "pandas/core/groupby/groupby.py",
            "replace_code": "def quantile(self, q=0.5, interpolation: str = \"linear\"):\n    from pandas.api.types import is_object_dtype, is_integer_dtype, is_datetime64_any_dtype\n    from pandas.core.dtypes.common import maybe_infer_to_datetimelike\n    from pandas.core.dtypes.dtypes import DatetimeTZDtype\n    from pandas.core.reshape.concat import concat\n    \"\"\"\n    Return group values at the given quantile, a la numpy.percentile.\n    \n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value(s) between 0 and 1 providing the quantile(s) to compute.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        Method to use when the desired quantile falls between two points.\n    \n    Returns\n    -------\n    Series or DataFrame\n        Return type determined by caller of GroupBy object.\n    \n    See Also\n    --------\n    Series.quantile : Similar method for Series.\n    DataFrame.quantile : Similar method for DataFrame.\n    numpy.percentile : NumPy method to compute qth percentile.\n    \n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     ['a', 1], ['a', 2], ['a', 3],\n    ...     ['b', 1], ['b', 3], ['b', 5]\n    ... ], columns=['key', 'val'])\n    >>> df.groupby('key').quantile()\n        val\n    key\n    a    2.0\n    b    3.0\n    \"\"\"\n    from pandas.api.types import is_object_dtype, is_integer_dtype, is_datetime64_any_dtype\n    from pandas.core.dtypes.common import maybe_infer_to_datetimelike\n    from pandas.core.dtypes.dtypes import DatetimeTZDtype\n    from pandas.core.reshape.concat import concat\n    \n    def pre_processor(vals: np.ndarray) -> Tuple[np.ndarray, Optional[Type]]:\n        if is_object_dtype(vals):\n            raise TypeError(\n                \"'quantile' cannot be performed against 'object' dtypes!\"\n            )\n    \n        inference = maybe_infer_to_datetimelike(vals)\n        vals = vals.astype(np.float64)\n    \n        return vals, inference\n    \n    def post_processor(vals: np.ndarray, inference: Optional[Type]) -> np.ndarray:\n        if is_integer_dtype(inference) and interpolation in {\"linear\", \"midpoint\"}:\n            vals = vals.astype(inference)\n        return vals\n    \n    if is_scalar(q):\n        return self._get_cythonized_result(\n            \"group_quantile\",\n            qc=q,\n            interpolation=interpolation,\n            pre_processor=pre_processor,\n            post_processor=post_processor,\n        )\n    else:\n        results = [self._get_cythonized_result(\"group_quantile\",\n                                               qc=qi,\n                                               interpolation=interpolation,\n                                               pre_processor=pre_processor,\n                                               post_processor=post_processor\n                                               )\n                   for qi in q]\n        result = concat(results, axis=0)\n        result.index.set_levels(q, level=-1, inplace=True)\n        result = result.reorder_levels([1, 0], axis=0)\n    \n        hi = len(q) * self.ngroups\n        arr = np.tile(np.arange(self.ngroups), len(q))\n        indices = np.repeat(arr, self.ngroups)\n    \n        return result.take(indices)"
        }
    ]
}