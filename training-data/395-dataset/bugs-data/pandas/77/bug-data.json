{
    "pandas:77": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_77/pandas/core/ops/array_ops.py": {
            "buggy_functions": [
                {
                    "function_name": "na_logical_op",
                    "function_code": "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        # For exposition, write:\n        #  yarr = isinstance(y, np.ndarray)\n        #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n        #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n        #  xint = x.dtype.kind == \"i\"\n        #  xbool = x.dtype.kind == \"b\"\n        # Then Cases where this goes through without raising include:\n        #  (xint or xbool) and (yint or bool)\n        result = op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype))\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x, y, op)\n        else:\n            # let null fall thru\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n\n    return result\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 263,
                    "variables": {
                        "np.ndarray": [
                            275,
                            263
                        ],
                        "np": [
                            275,
                            263
                        ],
                        "result": [
                            280,
                            273,
                            301,
                            287
                        ],
                        "op": [
                            280,
                            273,
                            297,
                            287
                        ],
                        "x": [
                            297,
                            273,
                            277,
                            278,
                            280,
                            287
                        ],
                        "y": [
                            295,
                            273,
                            275,
                            277,
                            279,
                            280,
                            283,
                            284,
                            285,
                            287
                        ],
                        "TypeError": [
                            296,
                            289,
                            274
                        ],
                        "isinstance": [
                            275
                        ],
                        "is_bool_dtype": [
                            277
                        ],
                        "x.dtype": [
                            297,
                            277
                        ],
                        "y.dtype": [
                            277
                        ],
                        "ensure_object": [
                            278,
                            279
                        ],
                        "libops.vec_binop": [
                            280
                        ],
                        "libops": [
                            280,
                            287
                        ],
                        "lib.is_scalar": [
                            283
                        ],
                        "lib": [
                            283
                        ],
                        "isna": [
                            284
                        ],
                        "bool": [
                            285
                        ],
                        "libops.scalar_binop": [
                            287
                        ],
                        "ValueError": [
                            290
                        ],
                        "AttributeError": [
                            291
                        ],
                        "OverflowError": [
                            292
                        ],
                        "NotImplementedError": [
                            293
                        ],
                        "typ": [
                            298,
                            295
                        ],
                        "__name__": [
                            295
                        ],
                        "type": [
                            295
                        ],
                        "op.__name__": [
                            297
                        ]
                    },
                    "filtered_variables": {
                        "np.ndarray": [
                            275,
                            263
                        ],
                        "np": [
                            275,
                            263
                        ],
                        "result": [
                            280,
                            273,
                            301,
                            287
                        ],
                        "op": [
                            280,
                            273,
                            297,
                            287
                        ],
                        "x": [
                            297,
                            273,
                            277,
                            278,
                            280,
                            287
                        ],
                        "y": [
                            295,
                            273,
                            275,
                            277,
                            279,
                            280,
                            283,
                            284,
                            285,
                            287
                        ],
                        "is_bool_dtype": [
                            277
                        ],
                        "x.dtype": [
                            297,
                            277
                        ],
                        "y.dtype": [
                            277
                        ],
                        "ensure_object": [
                            278,
                            279
                        ],
                        "libops.vec_binop": [
                            280
                        ],
                        "libops": [
                            280,
                            287
                        ],
                        "lib.is_scalar": [
                            283
                        ],
                        "lib": [
                            283
                        ],
                        "isna": [
                            284
                        ],
                        "libops.scalar_binop": [
                            287
                        ],
                        "typ": [
                            298,
                            295
                        ],
                        "op.__name__": [
                            297
                        ]
                    },
                    "diff_line_number": 280,
                    "class_data": null,
                    "variable_values": [
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function or_>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "y": {
                                    "variable_value": "array([[nan, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "y.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops.vec_binop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops.scalar_binop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "typ": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'or_'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op": {
                                    "variable_value": "<built-in function or_>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "y": {
                                    "variable_value": "array([[nan, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('int64')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "y.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops.vec_binop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x114102df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "y.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x114102d00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops.scalar_binop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "typ": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'or_'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "result.reshape": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(4, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "np.ndarray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "array([nan, 1, 2, 3, 4, 5, 6, 7], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "8"
                                },
                                "op": {
                                    "variable_value": "<built-in function or_>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": "array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "y": {
                                    "variable_value": "array([[nan, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "4"
                                },
                                "is_bool_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "y.dtype": {
                                    "variable_value": "dtype('O')",
                                    "variable_type": "dtype",
                                    "variable_shape": "0"
                                },
                                "ensure_object": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops.vec_binop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x114102e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "y.ravel": {
                                    "variable_value": "<built-in method ravel of numpy.ndarray object at 0x114102d00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "lib.is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "lib": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "libops.scalar_binop": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "typ": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "op.__name__": {
                                    "variable_value": "'or_'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "result.reshape": {
                                    "variable_value": "<built-in method reshape of numpy.ndarray object at 0x114102bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "x.shape": {
                                    "variable_value": "(4, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def comp_method_OBJECT_ARRAY(op, x, y):\n    if isinstance(y, list):\n        y = construct_1d_object_array_from_listlike(y)\n\n    # TODO: Should the checks below be ABCIndexClass?\n    if isinstance(y, (np.ndarray, ABCSeries, ABCIndex)):\n        # TODO: should this be ABCIndexClass??\n        if not is_object_dtype(y.dtype):\n            y = y.astype(np.object_)\n\n        if isinstance(y, (ABCSeries, ABCIndex)):\n            y = y.values\n\n        result = libops.vec_compare(x.ravel(), y, op)\n    else:\n        result = libops.scalar_compare(x.ravel(), y, op)\n    return result.reshape(x.shape)",
                "def masked_arith_op(x, y, op):\n    \"\"\"\n    If the given arithmetic operation fails, attempt it again on\n    only the non-null elements of the input array(s).\n\n    Parameters\n    ----------\n    x : np.ndarray\n    y : np.ndarray, Series, Index\n    op : binary operator\n    \"\"\"\n    # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes\n    # the logic valid for both Series and DataFrame ops.\n    xrav = x.ravel()\n    assert isinstance(x, np.ndarray), type(x)\n    if isinstance(y, np.ndarray):\n        dtype = find_common_type([x.dtype, y.dtype])\n        result = np.empty(x.size, dtype=dtype)\n\n        # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex\n        #  we would get int64 dtype, see GH#19956\n        yrav = y.ravel()\n        mask = notna(xrav) & notna(yrav)\n\n        if yrav.shape != mask.shape:\n            # FIXME: GH#5284, GH#5035, GH#19448\n            # Without specifically raising here we get mismatched\n            # errors in Py3 (TypeError) vs Py2 (ValueError)\n            # Note: Only = an issue in DataFrame case\n            raise ValueError(\"Cannot broadcast operands together.\")\n\n        if mask.any():\n            with np.errstate(all=\"ignore\"):\n                result[mask] = op(xrav[mask], yrav[mask])\n\n    else:\n        if not is_scalar(y):\n            raise TypeError(type(y))\n\n        # mask is only meaningful for x\n        result = np.empty(x.size, dtype=x.dtype)\n        mask = notna(xrav)\n\n        # 1 ** np.nan is 1. So we have to unmask those.\n        if op is pow:\n            mask = np.where(x == 1, False, mask)\n        elif op is rpow:\n            mask = np.where(y == 1, False, mask)\n\n        if mask.any():\n            with np.errstate(all=\"ignore\"):\n                result[mask] = op(xrav[mask], y)\n\n    result, _ = maybe_upcast_putmask(result, ~mask, np.nan)\n    result = result.reshape(x.shape)  # 2D compat\n    return result",
                "def define_na_arithmetic_op(op, str_rep: str):\n    def na_op(x, y):\n        return na_arithmetic_op(x, y, op, str_rep)\n\n    return na_op",
                "def na_arithmetic_op(left, right, op, str_rep: str):\n    \"\"\"\n    Return the result of evaluating op on the passed in values.\n\n    If native types are not compatible, try coersion to object dtype.\n\n    Parameters\n    ----------\n    left : np.ndarray\n    right : np.ndarray or scalar\n    str_rep : str or None\n\n    Returns\n    -------\n    array-like\n\n    Raises\n    ------\n    TypeError : invalid operation\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    try:\n        result = expressions.evaluate(op, str_rep, left, right)\n    except TypeError:\n        result = masked_arith_op(left, right, op)\n\n    return missing.dispatch_fill_zeros(op, left, right, result)",
                "def arithmetic_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str\n):\n    \"\"\"\n    Evaluate an arithmetic operation `+`, `-`, `*`, `/`, `//`, `%`, `**`, ...\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame or Index.  Series is *not* excluded.\n    op : {operator.add, operator.sub, ...}\n        Or one of the reversed variants from roperator.\n    str_rep : str\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n        Or a 2-tuple of these in the case of divmod or rdivmod.\n    \"\"\"\n\n    from pandas.core.ops import maybe_upcast_for_op\n\n    # NB: We assume that extract_array has already been called\n    #  on `left` and `right`.\n    lvalues = left\n    rvalues = right\n\n    rvalues = maybe_upcast_for_op(rvalues, lvalues.shape)\n\n    if should_extension_dispatch(left, rvalues) or isinstance(\n        rvalues, (ABCTimedeltaArray, ABCDatetimeArray, Timestamp)\n    ):\n        # TimedeltaArray, DatetimeArray, and Timestamp are included here\n        #  because they have `freq` attribute which is handled correctly\n        #  by dispatch_to_extension_op.\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = na_arithmetic_op(lvalues, rvalues, op, str_rep)\n\n    return res_values",
                "def comparison_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\"\n    Evaluate a comparison operation `=`, `!=`, `>=`, `>`, `<=`, or `<`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.eq, operator.ne, operator.gt, operator.ge, operator.lt, operator.le}\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n    \"\"\"\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    rvalues = lib.item_from_zerodim(rvalues)\n    if isinstance(rvalues, list):\n        # TODO: same for tuples?\n        rvalues = np.asarray(rvalues)\n\n    if isinstance(rvalues, (np.ndarray, ABCExtensionArray, ABCIndexClass)):\n        # TODO: make this treatment consistent across ops and classes.\n        #  We are not catching all listlikes here (e.g. frozenset, tuple)\n        #  The ambiguous case is object-dtype.  See GH#27803\n        if len(lvalues) != len(rvalues):\n            raise ValueError(\"Lengths must match to compare\")\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    elif is_scalar(rvalues) and isna(rvalues):\n        # numpy does not like comparisons vs None\n        if op is operator.ne:\n            res_values = np.ones(lvalues.shape, dtype=bool)\n        else:\n            res_values = np.zeros(lvalues.shape, dtype=bool)\n\n    elif is_object_dtype(lvalues.dtype):\n        res_values = comp_method_OBJECT_ARRAY(op, lvalues, rvalues)\n\n    else:\n        op_name = f\"__{op.__name__}__\"\n        method = getattr(lvalues, op_name)\n        with np.errstate(all=\"ignore\"):\n            res_values = method(rvalues)\n\n        if res_values is NotImplemented:\n            res_values = invalid_comparison(lvalues, rvalues, op)\n        if is_scalar(res_values):\n            typ = type(rvalues)\n            raise TypeError(f\"Could not compare {typ} type with Series\")\n\n    return res_values",
                "def na_logical_op(x: np.ndarray, y, op):\n    try:\n        # For exposition, write:\n        #  yarr = isinstance(y, np.ndarray)\n        #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n        #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n        #  xint = x.dtype.kind == \"i\"\n        #  xbool = x.dtype.kind == \"b\"\n        # Then Cases where this goes through without raising include:\n        #  (xint or xbool) and (yint or bool)\n        result = op(x, y)\n    except TypeError:\n        if isinstance(y, np.ndarray):\n            # bool-bool dtype operations should be OK, should not get here\n            assert not (is_bool_dtype(x.dtype) and is_bool_dtype(y.dtype))\n            x = ensure_object(x)\n            y = ensure_object(y)\n            result = libops.vec_binop(x, y, op)\n        else:\n            # let null fall thru\n            assert lib.is_scalar(y)\n            if not isna(y):\n                y = bool(y)\n            try:\n                result = libops.scalar_binop(x, y, op)\n            except (\n                TypeError,\n                ValueError,\n                AttributeError,\n                OverflowError,\n                NotImplementedError,\n            ):\n                typ = type(y).__name__\n                raise TypeError(\n                    f\"Cannot perform '{op.__name__}' with a dtyped [{x.dtype}] array \"\n                    f\"and scalar of type [{typ}]\"\n                )\n\n    return result",
                "def logical_op(\n    left: Union[np.ndarray, ABCExtensionArray], right: Any, op\n) -> Union[np.ndarray, ABCExtensionArray]:\n    \"\"\"\n    Evaluate a logical operation `|`, `&`, or `^`.\n\n    Parameters\n    ----------\n    left : np.ndarray or ExtensionArray\n    right : object\n        Cannot be a DataFrame, Series, or Index.\n    op : {operator.and_, operator.or_, operator.xor}\n        Or one of the reversed variants from roperator.\n\n    Returns\n    -------\n    ndarrray or ExtensionArray\n    \"\"\"\n\n    fill_int = lambda x: x\n\n    def fill_bool(x, left=None):\n        # if `left` is specifically not-boolean, we do not cast to bool\n        if x.dtype.kind in [\"c\", \"f\", \"O\"]:\n            # dtypes that can hold NA\n            mask = isna(x)\n            if mask.any():\n                x = x.astype(object)\n                x[mask] = False\n\n        if left is None or is_bool_dtype(left.dtype):\n            x = x.astype(bool)\n        return x\n\n    is_self_int_dtype = is_integer_dtype(left.dtype)\n\n    right = lib.item_from_zerodim(right)\n    if is_list_like(right) and not hasattr(right, \"dtype\"):\n        # e.g. list, tuple\n        right = construct_1d_object_array_from_listlike(right)\n\n    # NB: We assume extract_array has already been called on left and right\n    lvalues = left\n    rvalues = right\n\n    if should_extension_dispatch(lvalues, rvalues):\n        res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n\n    else:\n        if isinstance(rvalues, np.ndarray):\n            is_other_int_dtype = is_integer_dtype(rvalues.dtype)\n            rvalues = rvalues if is_other_int_dtype else fill_bool(rvalues, lvalues)\n\n        else:\n            # i.e. scalar\n            is_other_int_dtype = lib.is_integer(rvalues)\n\n        # For int vs int `^`, `|`, `&` are bitwise operators and return\n        #   integer dtypes.  Otherwise these are boolean ops\n        filler = fill_int if is_self_int_dtype and is_other_int_dtype else fill_bool\n\n        res_values = na_logical_op(lvalues, rvalues, op)\n        res_values = filler(res_values)  # type: ignore\n\n    return res_values",
                "def get_array_op(op, str_rep: Optional[str] = None):\n    \"\"\"\n    Return a binary array operation corresponding to the given operator op.\n\n    Parameters\n    ----------\n    op : function\n        Binary operator from operator or roperator module.\n    str_rep : str or None, default None\n        str_rep to pass to arithmetic_op\n\n    Returns\n    -------\n    function\n    \"\"\"\n    op_name = op.__name__.strip(\"_\")\n    if op_name in {\"eq\", \"ne\", \"lt\", \"le\", \"gt\", \"ge\"}:\n        return partial(comparison_op, op=op)\n    elif op_name in {\"and\", \"or\", \"xor\", \"rand\", \"ror\", \"rxor\"}:\n        return partial(logical_op, op=op)\n    else:\n        return partial(arithmetic_op, op=op, str_rep=str_rep)",
                "def na_op(x, y):\n    return na_arithmetic_op(x, y, op, str_rep)",
                "def fill_bool(x, left=None):\n    # if `left` is specifically not-boolean, we do not cast to bool\n    if x.dtype.kind in [\"c\", \"f\", \"O\"]:\n        # dtypes that can hold NA\n        mask = isna(x)\n        if mask.any():\n            x = x.astype(object)\n            x[mask] = False\n\n    if left is None or is_bool_dtype(left.dtype):\n        x = x.astype(bool)\n    return x"
            ],
            "inscope_function_signatures": [
                "comp_method_OBJECT_ARRAY(op, x, y)",
                "masked_arith_op(x, y, op)",
                "define_na_arithmetic_op(op, str_rep: str)",
                "na_arithmetic_op(left, right, op, str_rep: str)",
                "arithmetic_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op, str_rep: str)",
                "comparison_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op) -> Union[np.ndarray, ABCExtensionArray]",
                "na_logical_op(x: np.ndarray, y, op)",
                "logical_op(left: Union[np.ndarray, ABCExtensionArray], right: Any, op) -> Union[np.ndarray, ABCExtensionArray]",
                "get_array_op(op, str_rep: Optional[str]=None)",
                "na_op(x, y)",
                "fill_bool(x, left=None)"
            ],
            "variables_in_file": {
                "isinstance": [
                    224,
                    353,
                    228,
                    75,
                    43,
                    76,
                    47,
                    275,
                    52,
                    186
                ],
                "y": [
                    273,
                    275,
                    277,
                    279,
                    280,
                    283,
                    284,
                    285,
                    287,
                    295,
                    43,
                    44,
                    47,
                    49,
                    50,
                    52,
                    53,
                    55,
                    57,
                    76,
                    77,
                    82,
                    97,
                    98,
                    108,
                    112,
                    121
                ],
                "list": [
                    224,
                    43
                ],
                "construct_1d_object_array_from_listlike": [
                    44,
                    343
                ],
                "np.ndarray": [
                    353,
                    228,
                    263,
                    202,
                    75,
                    76,
                    203,
                    47,
                    305,
                    306,
                    275,
                    157
                ],
                "np": [
                    263,
                    275,
                    157,
                    47,
                    305,
                    50,
                    306,
                    195,
                    202,
                    75,
                    76,
                    203,
                    78,
                    93,
                    353,
                    226,
                    228,
                    101,
                    106,
                    108,
                    111,
                    241,
                    114,
                    243,
                    251
                ],
                "ABCSeries": [
                    52,
                    47
                ],
                "ABCIndex": [
                    52,
                    47
                ],
                "is_object_dtype": [
                    49,
                    245
                ],
                "y.dtype": [
                    49,
                    277,
                    77
                ],
                "y.astype": [
                    50
                ],
                "np.object_": [
                    50
                ],
                "y.values": [
                    53
                ],
                "result": [
                    280,
                    153,
                    101,
                    301,
                    78,
                    112,
                    273,
                    114,
                    115,
                    116,
                    149,
                    55,
                    151,
                    57,
                    58,
                    94,
                    287
                ],
                "libops.vec_compare": [
                    55
                ],
                "libops": [
                    280,
                    57,
                    287,
                    55
                ],
                "x.ravel": [
                    57,
                    74,
                    55
                ],
                "x": [
                    273,
                    277,
                    278,
                    280,
                    287,
                    297,
                    55,
                    57,
                    58,
                    323,
                    327,
                    329,
                    74,
                    75,
                    331,
                    77,
                    78,
                    332,
                    335,
                    336,
                    101,
                    106,
                    115,
                    121
                ],
                "op": [
                    386,
                    388,
                    390,
                    392,
                    273,
                    149,
                    151,
                    280,
                    153,
                    287,
                    297,
                    55,
                    57,
                    192,
                    196,
                    94,
                    350,
                    249,
                    105,
                    107,
                    236,
                    365,
                    112,
                    240,
                    246,
                    121,
                    255
                ],
                "libops.scalar_compare": [
                    57
                ],
                "result.reshape": [
                    58,
                    115
                ],
                "x.shape": [
                    58,
                    115
                ],
                "xrav": [
                    102,
                    74,
                    112,
                    83,
                    94
                ],
                "type": [
                    257,
                    98,
                    75,
                    295
                ],
                "dtype": [
                    77,
                    78
                ],
                "find_common_type": [
                    77
                ],
                "x.dtype": [
                    101,
                    327,
                    297,
                    77,
                    277
                ],
                "np.empty": [
                    101,
                    78
                ],
                "x.size": [
                    101,
                    78
                ],
                "yrav": [
                    82,
                    83,
                    85,
                    94
                ],
                "y.ravel": [
                    82
                ],
                "mask": [
                    102,
                    329,
                    106,
                    330,
                    108,
                    332,
                    110,
                    112,
                    114,
                    83,
                    85,
                    92,
                    94
                ],
                "notna": [
                    83,
                    102
                ],
                "yrav.shape": [
                    85
                ],
                "mask.shape": [
                    85
                ],
                "ValueError": [
                    233,
                    90,
                    290
                ],
                "mask.any": [
                    330,
                    92,
                    110
                ],
                "np.errstate": [
                    195,
                    251,
                    93,
                    111
                ],
                "is_scalar": [
                    256,
                    97,
                    238
                ],
                "TypeError": [
                    289,
                    98,
                    258,
                    296,
                    274,
                    150
                ],
                "pow": [
                    105
                ],
                "np.where": [
                    106,
                    108
                ],
                "rpow": [
                    107
                ],
                "_": [
                    114
                ],
                "maybe_upcast_putmask": [
                    114
                ],
                "np.nan": [
                    114
                ],
                "str": [
                    371,
                    157,
                    126,
                    119
                ],
                "na_arithmetic_op": [
                    121,
                    196
                ],
                "str_rep": [
                    392,
                    121,
                    196,
                    149
                ],
                "na_op": [
                    123
                ],
                "expressions.evaluate": [
                    149
                ],
                "expressions": [
                    149
                ],
                "left": [
                    346,
                    334,
                    338,
                    181,
                    149,
                    151,
                    153,
                    186,
                    220
                ],
                "right": [
                    340,
                    149,
                    182,
                    151,
                    341,
                    153,
                    347,
                    221,
                    343
                ],
                "masked_arith_op": [
                    151
                ],
                "missing.dispatch_fill_zeros": [
                    153
                ],
                "missing": [
                    153
                ],
                "Union": [
                    202,
                    203,
                    305,
                    306,
                    157
                ],
                "ABCExtensionArray": [
                    228,
                    202,
                    203,
                    305,
                    306,
                    157
                ],
                "Any": [
                    305,
                    202,
                    157
                ],
                "lvalues": [
                    181,
                    184,
                    192,
                    196,
                    346,
                    220,
                    349,
                    350,
                    355,
                    232,
                    235,
                    236,
                    365,
                    241,
                    243,
                    245,
                    246,
                    250,
                    255
                ],
                "rvalues": [
                    257,
                    182,
                    184,
                    186,
                    187,
                    192,
                    196,
                    347,
                    221,
                    349,
                    223,
                    224,
                    350,
                    226,
                    353,
                    228,
                    354,
                    355,
                    359,
                    232,
                    235,
                    236,
                    365,
                    238,
                    246,
                    252,
                    255
                ],
                "maybe_upcast_for_op": [
                    184
                ],
                "lvalues.shape": [
                    184,
                    241,
                    243
                ],
                "should_extension_dispatch": [
                    186,
                    235,
                    349
                ],
                "ABCTimedeltaArray": [
                    187
                ],
                "ABCDatetimeArray": [
                    187
                ],
                "Timestamp": [
                    187
                ],
                "res_values": [
                    192,
                    256,
                    350,
                    196,
                    260,
                    198,
                    236,
                    365,
                    366,
                    368,
                    241,
                    243,
                    246,
                    252,
                    254,
                    255
                ],
                "dispatch_to_extension_op": [
                    192,
                    236,
                    350
                ],
                "lib.item_from_zerodim": [
                    340,
                    223
                ],
                "lib": [
                    283,
                    340,
                    359,
                    223
                ],
                "np.asarray": [
                    226
                ],
                "ABCIndexClass": [
                    228
                ],
                "len": [
                    232
                ],
                "isna": [
                    329,
                    284,
                    238
                ],
                "operator.ne": [
                    240
                ],
                "operator": [
                    240
                ],
                "np.ones": [
                    241
                ],
                "bool": [
                    241,
                    243,
                    285,
                    335
                ],
                "np.zeros": [
                    243
                ],
                "lvalues.dtype": [
                    245
                ],
                "comp_method_OBJECT_ARRAY": [
                    246
                ],
                "op_name": [
                    386,
                    387,
                    389,
                    249,
                    250
                ],
                "op.__name__": [
                    249,
                    386,
                    297
                ],
                "method": [
                    250,
                    252
                ],
                "getattr": [
                    250
                ],
                "NotImplemented": [
                    254
                ],
                "invalid_comparison": [
                    255
                ],
                "typ": [
                    257,
                    258,
                    298,
                    295
                ],
                "is_bool_dtype": [
                    277,
                    334
                ],
                "ensure_object": [
                    278,
                    279
                ],
                "libops.vec_binop": [
                    280
                ],
                "lib.is_scalar": [
                    283
                ],
                "libops.scalar_binop": [
                    287
                ],
                "AttributeError": [
                    291
                ],
                "OverflowError": [
                    292
                ],
                "NotImplementedError": [
                    293
                ],
                "__name__": [
                    295
                ],
                "fill_int": [
                    363,
                    323
                ],
                "x.dtype.kind": [
                    327
                ],
                "x.astype": [
                    331,
                    335
                ],
                "object": [
                    331
                ],
                "left.dtype": [
                    338,
                    334
                ],
                "is_self_int_dtype": [
                    338,
                    363
                ],
                "is_integer_dtype": [
                    338,
                    354
                ],
                "is_list_like": [
                    341
                ],
                "hasattr": [
                    341
                ],
                "is_other_int_dtype": [
                    363,
                    354,
                    355,
                    359
                ],
                "rvalues.dtype": [
                    354
                ],
                "fill_bool": [
                    363,
                    355
                ],
                "lib.is_integer": [
                    359
                ],
                "filler": [
                    363,
                    366
                ],
                "na_logical_op": [
                    365
                ],
                "Optional": [
                    371
                ],
                "op.__name__.strip": [
                    386
                ],
                "partial": [
                    392,
                    388,
                    390
                ],
                "comparison_op": [
                    388
                ],
                "logical_op": [
                    390
                ],
                "arithmetic_op": [
                    392
                ]
            },
            "filtered_variables_in_file": {
                "y": [
                    273,
                    275,
                    277,
                    279,
                    280,
                    283,
                    284,
                    285,
                    287,
                    295,
                    43,
                    44,
                    47,
                    49,
                    50,
                    52,
                    53,
                    55,
                    57,
                    76,
                    77,
                    82,
                    97,
                    98,
                    108,
                    112,
                    121
                ],
                "construct_1d_object_array_from_listlike": [
                    44,
                    343
                ],
                "np.ndarray": [
                    353,
                    228,
                    263,
                    202,
                    75,
                    76,
                    203,
                    47,
                    305,
                    306,
                    275,
                    157
                ],
                "np": [
                    263,
                    275,
                    157,
                    47,
                    305,
                    50,
                    306,
                    195,
                    202,
                    75,
                    76,
                    203,
                    78,
                    93,
                    353,
                    226,
                    228,
                    101,
                    106,
                    108,
                    111,
                    241,
                    114,
                    243,
                    251
                ],
                "ABCSeries": [
                    52,
                    47
                ],
                "ABCIndex": [
                    52,
                    47
                ],
                "is_object_dtype": [
                    49,
                    245
                ],
                "y.dtype": [
                    49,
                    277,
                    77
                ],
                "y.astype": [
                    50
                ],
                "np.object_": [
                    50
                ],
                "y.values": [
                    53
                ],
                "result": [
                    280,
                    153,
                    101,
                    301,
                    78,
                    112,
                    273,
                    114,
                    115,
                    116,
                    149,
                    55,
                    151,
                    57,
                    58,
                    94,
                    287
                ],
                "libops.vec_compare": [
                    55
                ],
                "libops": [
                    280,
                    57,
                    287,
                    55
                ],
                "x.ravel": [
                    57,
                    74,
                    55
                ],
                "x": [
                    273,
                    277,
                    278,
                    280,
                    287,
                    297,
                    55,
                    57,
                    58,
                    323,
                    327,
                    329,
                    74,
                    75,
                    331,
                    77,
                    78,
                    332,
                    335,
                    336,
                    101,
                    106,
                    115,
                    121
                ],
                "op": [
                    386,
                    388,
                    390,
                    392,
                    273,
                    149,
                    151,
                    280,
                    153,
                    287,
                    297,
                    55,
                    57,
                    192,
                    196,
                    94,
                    350,
                    249,
                    105,
                    107,
                    236,
                    365,
                    112,
                    240,
                    246,
                    121,
                    255
                ],
                "libops.scalar_compare": [
                    57
                ],
                "result.reshape": [
                    58,
                    115
                ],
                "x.shape": [
                    58,
                    115
                ],
                "xrav": [
                    102,
                    74,
                    112,
                    83,
                    94
                ],
                "dtype": [
                    77,
                    78
                ],
                "find_common_type": [
                    77
                ],
                "x.dtype": [
                    101,
                    327,
                    297,
                    77,
                    277
                ],
                "np.empty": [
                    101,
                    78
                ],
                "x.size": [
                    101,
                    78
                ],
                "yrav": [
                    82,
                    83,
                    85,
                    94
                ],
                "y.ravel": [
                    82
                ],
                "mask": [
                    102,
                    329,
                    106,
                    330,
                    108,
                    332,
                    110,
                    112,
                    114,
                    83,
                    85,
                    92,
                    94
                ],
                "notna": [
                    83,
                    102
                ],
                "yrav.shape": [
                    85
                ],
                "mask.shape": [
                    85
                ],
                "mask.any": [
                    330,
                    92,
                    110
                ],
                "np.errstate": [
                    195,
                    251,
                    93,
                    111
                ],
                "is_scalar": [
                    256,
                    97,
                    238
                ],
                "np.where": [
                    106,
                    108
                ],
                "rpow": [
                    107
                ],
                "_": [
                    114
                ],
                "maybe_upcast_putmask": [
                    114
                ],
                "np.nan": [
                    114
                ],
                "na_arithmetic_op": [
                    121,
                    196
                ],
                "str_rep": [
                    392,
                    121,
                    196,
                    149
                ],
                "na_op": [
                    123
                ],
                "expressions.evaluate": [
                    149
                ],
                "expressions": [
                    149
                ],
                "left": [
                    346,
                    334,
                    338,
                    181,
                    149,
                    151,
                    153,
                    186,
                    220
                ],
                "right": [
                    340,
                    149,
                    182,
                    151,
                    341,
                    153,
                    347,
                    221,
                    343
                ],
                "masked_arith_op": [
                    151
                ],
                "missing.dispatch_fill_zeros": [
                    153
                ],
                "missing": [
                    153
                ],
                "Union": [
                    202,
                    203,
                    305,
                    306,
                    157
                ],
                "ABCExtensionArray": [
                    228,
                    202,
                    203,
                    305,
                    306,
                    157
                ],
                "Any": [
                    305,
                    202,
                    157
                ],
                "lvalues": [
                    181,
                    184,
                    192,
                    196,
                    346,
                    220,
                    349,
                    350,
                    355,
                    232,
                    235,
                    236,
                    365,
                    241,
                    243,
                    245,
                    246,
                    250,
                    255
                ],
                "rvalues": [
                    257,
                    182,
                    184,
                    186,
                    187,
                    192,
                    196,
                    347,
                    221,
                    349,
                    223,
                    224,
                    350,
                    226,
                    353,
                    228,
                    354,
                    355,
                    359,
                    232,
                    235,
                    236,
                    365,
                    238,
                    246,
                    252,
                    255
                ],
                "maybe_upcast_for_op": [
                    184
                ],
                "lvalues.shape": [
                    184,
                    241,
                    243
                ],
                "should_extension_dispatch": [
                    186,
                    235,
                    349
                ],
                "ABCTimedeltaArray": [
                    187
                ],
                "ABCDatetimeArray": [
                    187
                ],
                "Timestamp": [
                    187
                ],
                "res_values": [
                    192,
                    256,
                    350,
                    196,
                    260,
                    198,
                    236,
                    365,
                    366,
                    368,
                    241,
                    243,
                    246,
                    252,
                    254,
                    255
                ],
                "dispatch_to_extension_op": [
                    192,
                    236,
                    350
                ],
                "lib.item_from_zerodim": [
                    340,
                    223
                ],
                "lib": [
                    283,
                    340,
                    359,
                    223
                ],
                "np.asarray": [
                    226
                ],
                "ABCIndexClass": [
                    228
                ],
                "isna": [
                    329,
                    284,
                    238
                ],
                "operator.ne": [
                    240
                ],
                "operator": [
                    240
                ],
                "np.ones": [
                    241
                ],
                "np.zeros": [
                    243
                ],
                "lvalues.dtype": [
                    245
                ],
                "comp_method_OBJECT_ARRAY": [
                    246
                ],
                "op_name": [
                    386,
                    387,
                    389,
                    249,
                    250
                ],
                "op.__name__": [
                    249,
                    386,
                    297
                ],
                "method": [
                    250,
                    252
                ],
                "invalid_comparison": [
                    255
                ],
                "typ": [
                    257,
                    258,
                    298,
                    295
                ],
                "is_bool_dtype": [
                    277,
                    334
                ],
                "ensure_object": [
                    278,
                    279
                ],
                "libops.vec_binop": [
                    280
                ],
                "lib.is_scalar": [
                    283
                ],
                "libops.scalar_binop": [
                    287
                ],
                "fill_int": [
                    363,
                    323
                ],
                "x.dtype.kind": [
                    327
                ],
                "x.astype": [
                    331,
                    335
                ],
                "left.dtype": [
                    338,
                    334
                ],
                "is_self_int_dtype": [
                    338,
                    363
                ],
                "is_integer_dtype": [
                    338,
                    354
                ],
                "is_list_like": [
                    341
                ],
                "is_other_int_dtype": [
                    363,
                    354,
                    355,
                    359
                ],
                "rvalues.dtype": [
                    354
                ],
                "fill_bool": [
                    363,
                    355
                ],
                "lib.is_integer": [
                    359
                ],
                "filler": [
                    363,
                    366
                ],
                "na_logical_op": [
                    365
                ],
                "Optional": [
                    371
                ],
                "op.__name__.strip": [
                    386
                ],
                "partial": [
                    392,
                    388,
                    390
                ],
                "comparison_op": [
                    388
                ],
                "logical_op": [
                    390
                ],
                "arithmetic_op": [
                    392
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_77/pandas/tests/arithmetic/test_array_ops.py",
                "test_function": "test_na_logical_op_2d",
                "test_function_code": "def test_na_logical_op_2d():\n    left = np.arange(8).reshape(4, 2)\n    right = left.astype(object)\n    right[0, 0] = np.nan\n\n    # Check that we fall back to the vec_binop branch\n    with pytest.raises(TypeError, match=\"unsupported operand type\"):\n        operator.or_(left, right)\n\n    result = na_logical_op(left, right, operator.or_)\n    expected = right\n    tm.assert_numpy_array_equal(result, expected)",
                "test_error": "ValueError: Buffer has wrong number of dimensions (expected 1, got 2)",
                "full_test_error": "x = array([[0, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)\ny = array([[nan, 1],\n       [2, 3],\n       [4, 5],\n       [6, 7]], dtype=object)\nop = <built-in function or_>\n\n    def na_logical_op(x: np.ndarray, y, op):\n        try:\n            # For exposition, write:\n            #  yarr = isinstance(y, np.ndarray)\n            #  yint = is_integer(y) or (yarr and y.dtype.kind == \"i\")\n            #  ybool = is_bool(y) or (yarr and y.dtype.kind == \"b\")\n            #  xint = x.dtype.kind == \"i\"\n            #  xbool = x.dtype.kind == \"b\"\n            # Then Cases where this goes through without raising include:\n            #  (xint or xbool) and (yint or bool)\n>           result = op(x, y)\nE           TypeError: unsupported operand type(s) for |: 'int' and 'float'\n\npandas/core/ops/array_ops.py:273: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_na_logical_op_2d():\n        left = np.arange(8).reshape(4, 2)\n        right = left.astype(object)\n        right[0, 0] = np.nan\n    \n        # Check that we fall back to the vec_binop branch\n        with pytest.raises(TypeError, match=\"unsupported operand type\"):\n            operator.or_(left, right)\n    \n>       result = na_logical_op(left, right, operator.or_)\n\npandas/tests/arithmetic/test_array_ops.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/array_ops.py:280: in na_logical_op\n    result = libops.vec_binop(x, y, op)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def vec_binop(object[:] left, object[:] right, object op):\nE   ValueError: Buffer has wrong number of dimensions (expected 1, got 2)\n\npandas/_libs/ops.pyx:206: ValueError",
                "traceback": "pandas/core/ops/array_ops.py:280: in na_logical_op\n    result = libops.vec_binop(x, y, op)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   def vec_binop(object[:] left, object[:] right, object op):\nE   ValueError: Buffer has wrong number of dimensions (expected 1, got 2)\n\npandas/_libs/ops.pyx:206: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}