{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    import numpy as np\n    \"\"\"\n    Return dtype and N/A values to use when concatenating specified units.\n    \n    Returned N/A value may be None which means there was no casting involved.\n    \n    Returns\n    -------\n    dtype\n    na\n    \"\"\"\n    ...  # Other parts of the function remain unchanged\n    \n    # Fixed logic for determining dtype\n    if \"object\" in upcast_classes:\n        empty_dtype = np.dtype(np.object_)\n        upcasted_na = np.nan\n    elif \"bool\" in upcast_classes:\n        if has_none_blocks:\n            empty_dtype = np.dtype(np.object_)\n            upcasted_na = np.nan\n        else:\n            empty_dtype = np.dtype(np.bool_)\n            upcasted_na = None\n    elif \"category\" in upcast_classes:\n        empty_dtype = np.dtype(np.object_)\n        upcasted_na = np.nan\n    elif \"datetimetz\" in upcast_classes:\n        empty_dtype = upcast_classes[\"datetimetz\"][0]\n        upcasted_na = tslibs.NaT\n    elif \"datetime\" in upcast_classes:\n        empty_dtype = np.dtype(\"M8[ns]\")\n        upcasted_na = tslibs.iNaT\n    elif \"timedelta\" in upcast_classes:\n        empty_dtype = np.dtype(\"m8[ns]\")\n        upcasted_na = np.timedelta64(\"NaT\", \"ns\")\n    else:\n        try:\n            g = np.find_common_type(upcast_classes, [])\n        except TypeError:\n            # At least one is an ExtensionArray\n            empty_dtype = np.dtype(np.object_)\n            upcasted_na = np.nan\n        else:\n            if is_float_dtype(g):\n                empty_dtype = g\n                upcasted_na = g.type(np.nan)\n            elif is_numeric_dtype(g):\n                if has_none_blocks:\n                    empty_dtype = np.float64\n                    upcasted_na = np.nan\n                else:\n                    empty_dtype = g\n                    upcasted_na = None\n    return empty_dtype, upcasted_na\n    \n    msg = \"invalid dtype determination in get_concat_dtype\"\n    raise AssertionError(msg)"
        }
    ]
}