{
    "pandas": [
        {
            "bugID": 82,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 268,
            "file_name": "pandas/core/internals/concat.py",
            "replace_code": "def _get_empty_dtype_and_na(join_units):\n    import numpy as np\n    from collections import defaultdict\n    import numpy as np\n    from collections import defaultdict\n    \n    if len(join_units) == 1:\n        blk = join_units[0].block\n        if blk is None:\n            return np.float64, np.nan\n    \n    def _is_uniform_reindex(units):\n        return all(unit.index_like(join_units[0]) for unit in units[1:])\n    \n    if _is_uniform_reindex(join_units):\n        # FIXME: integrate property\n        empty_dtype = join_units[0].block.dtype\n        upcasted_na = join_units[0].block.fill_value\n        return empty_dtype, upcasted_na\n    \n    dtype = None\n    na = None\n    for unit in join_units:\n        if unit.block is not None:\n            if dtype is None:\n                dtype = unit.dtype\n            else:\n                if (dtype != unit.dtype):\n                    has_none_blocks = False\n                    dtype = None\n                    break\n            na = unit.block.fill_value\n        else:\n            has_none_blocks = True\n    \n    if dtype is None:\n        return np.dtype(np.object_), np.nan\n    elif is_categorical_dtype(dtype):\n        return np.dtype(\"O\"), np.nan\n    elif is_datetime64tz_dtype(dtype):\n        return np.dtype(\"M8[ns]\"), tslibs.NaT\n    elif issubclass(dtype.type, (np.bool, np.bool_)):\n        return np.dtype(np.bool_), None\n    elif is_datetime64_dtype(dtype):\n        return np.dtype(\"M8[ns]\"), tslibs.iNaT\n    elif is_timedelta64_dtype(dtype):\n        return np.dtype(\"m8[ns]\"), np.timedelta64(\"NaT\", \"ns\")\n    elif is_sparse(dtype):\n        return dtype.subtype, np.nan\n    elif is_extension_array_dtype(dtype):\n        return dtype, np.nan\n    elif is_float_dtype(dtype) or is_numeric_dtype(dtype):\n        return dtype, np.nan\n    else:\n        msg = \"invalid dtype determination in get_concat_dtype\"\n        raise AssertionError(msg)"
        }
    ]
}