{
    "1.1.1": "def diff(arr, n: int, axis: int = 0):\n    \n\n    n = int(n)\n    na = np.nan\n    dtype = arr.dtype\n\n    is_timedelta = False\n    if needs_i8_conversion(arr):\n        dtype = np.float64\n        arr = arr.view(\"i8\")\n        na = iNaT\n        is_timedelta = True\n\n    elif is_bool_dtype(dtype):\n        dtype = np.object_\n\n    elif is_integer_dtype(dtype):\n        dtype = np.float64\n\n    dtype = np.dtype(dtype)\n    out_arr = np.empty(arr.shape, dtype=dtype)\n\n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n\n    if arr.ndim == 2 and arr.dtype.name in _diff_special:\n        f = _diff_special[arr.dtype.name]\n        f(arr, out_arr, n, axis)\n    else:\n        # To keep mypy happy, _res_indexer is a list while res_indexer is\n        #  a tuple, ditto for lag_indexer.\n        _res_indexer = [slice(None)] * arr.ndim\n        _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n        res_indexer = tuple(_res_indexer)\n\n        _lag_indexer = [slice(None)] * arr.ndim\n        _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n        lag_indexer = tuple(_lag_indexer)\n\n        # need to make sure that we account for na for datelike/timedelta\n        # we don't actually want to subtract these i8 numbers\n        if is_timedelta:\n            res = arr[res_indexer]\n            lag = arr[lag_indexer]\n\n            mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n            if mask.any():\n                res = res.copy()\n                res[mask] = 0\n                lag = lag.copy()\n                lag[mask] = 0\n\n            result = res - lag\n            result[mask] = na\n            out_arr[res_indexer] = result\n        else:\n            out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]\n\n    if is_timedelta:\n        out_arr = out_arr.astype(\"int64\").view(\"timedelta64[ns]\")\n\n    return out_arr\n",
    "1.1.2": "difference of n between self,\nanalogous to s-s.shift(n)\n\nParameters\n----------\narr : ndarray\nn : int\n    number of periods\naxis : int\n    axis to shift on\n\nReturns\n-------\nshifted",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_142/pandas/core/algorithms.py",
    "1.3.2": null,
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"input,output,diff\",\n        [([False, True, True, False, False], [nan, True, False, True, False], 1)],\n    )\n    def test_bool_diff(self, input, output, diff):\n        # boolean series (test for fixing #17294)\n        s = Series(input)\n        result = s.diff()\n        expected = Series(output)\n        assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_142/pandas/tests/series/test_analytics.py"
    ],
    "2.1.1": [
        [
            "E               TypeError: numpy boolean subtract, the `-` operator, is not supported, use the bitwise_xor, the `^` operator, or the logical_xor function instead."
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.test_analytics.TestSeriesAnalytics object at 0x120e61eb0>\ninput = [False, True, True, False, False]\noutput = [nan, True, False, True, False], diff = 1\n\n    @pytest.mark.parametrize(\n        \"input,output,diff\",\n        [([False, True, True, False, False], [nan, True, False, True, False], 1)],\n    )\n    def test_bool_diff(self, input, output, diff):\n        # boolean series (test for fixing #17294)\n        s = Series(input)\n>       result = s.diff()\n\npandas/tests/series/test_analytics.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/series.py:2478: in diff\n    result = algorithms.diff(com.values_from_object(self), periods)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\narr = array([False,  True,  True, False, False]), n = 1, axis = 0\n\n    def diff(arr, n: int, axis: int = 0):\n        \"\"\"\n        difference of n between self,\n        analogous to s-s.shift(n)\n    \n        Parameters\n        ----------\n        arr : ndarray\n        n : int\n            number of periods\n        axis : int\n            axis to shift on\n    \n        Returns\n        -------\n        shifted\n        \"\"\"\n    \n        n = int(n)\n        na = np.nan\n        dtype = arr.dtype\n    \n        is_timedelta = False\n        if needs_i8_conversion(arr):\n            dtype = np.float64\n            arr = arr.view(\"i8\")\n            na = iNaT\n            is_timedelta = True\n    \n        elif is_bool_dtype(dtype):\n            dtype = np.object_\n    \n        elif is_integer_dtype(dtype):\n            dtype = np.float64\n    \n        dtype = np.dtype(dtype)\n        out_arr = np.empty(arr.shape, dtype=dtype)\n    \n        na_indexer = [slice(None)] * arr.ndim\n        na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n        out_arr[tuple(na_indexer)] = na\n    \n        if arr.ndim == 2 and arr.dtype.name in _diff_special:\n            f = _diff_special[arr.dtype.name]\n            f(arr, out_arr, n, axis)\n        else:\n            # To keep mypy happy, _res_indexer is a list while res_indexer is\n            #  a tuple, ditto for lag_indexer.\n            _res_indexer = [slice(None)] * arr.ndim\n            _res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n            res_indexer = tuple(_res_indexer)\n    \n            _lag_indexer = [slice(None)] * arr.ndim\n            _lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n            lag_indexer = tuple(_lag_indexer)\n    \n            # need to make sure that we account for na for datelike/timedelta\n            # we don't actually want to subtract these i8 numbers\n            if is_timedelta:\n                res = arr[res_indexer]\n                lag = arr[lag_indexer]\n    \n                mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n                if mask.any():\n                    res = res.copy()\n                    res[mask] = 0\n                    lag = lag.copy()\n                    lag[mask] = 0\n    \n                result = res - lag\n                result[mask] = na\n                out_arr[res_indexer] = result\n            else:\n>               out_arr[res_indexer] = arr[res_indexer] - arr[lag_indexer]",
            "\npandas/core/algorithms.py:1963: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "n": "1",
                "arr.dtype": "dtype('bool')",
                "arr": "array([False,  True,  True, False, False])",
                "arr.shape": "(5,)",
                "arr.ndim": "1",
                "axis": "0"
            },
            {
                "na": "nan",
                "dtype": "dtype('O')",
                "is_timedelta": "False",
                "is_bool": "True",
                "out_arr": "array([nan, True, False, True, False], dtype=object)",
                "na_indexer": "[slice(None, 1, None)]",
                "_res_indexer": "[slice(1, None, None)]",
                "res_indexer": "(slice(1, None, None),)",
                "_lag_indexer": "[slice(None, -1, None)]",
                "lag_indexer": "(slice(None, -1, None),)"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "n": "int",
                "arr.dtype": "dtype",
                "arr": "ndarray",
                "arr.shape": "tuple",
                "arr.ndim": "int",
                "axis": "int"
            },
            {
                "na": "float",
                "dtype": "dtype",
                "is_timedelta": "bool",
                "is_bool": "bool",
                "out_arr": "ndarray",
                "na_indexer": "list",
                "_res_indexer": "list",
                "res_indexer": "tuple",
                "_lag_indexer": "list",
                "lag_indexer": "tuple"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}