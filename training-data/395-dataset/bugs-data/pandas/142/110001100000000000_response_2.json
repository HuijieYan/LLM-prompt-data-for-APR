{
    "pandas": [
        {
            "bugID": 142,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1890,
            "file_name": "pandas/core/algorithms.py",
            "replace_code": "def diff(arr, n: int, axis: int = 0):\n    import numpy as np\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n    \n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n    \n    Returns\n    -------\n    shifted\n    \"\"\"\n    na = np.nan\n    dtype = arr.dtype\n    \n    if is_timedelta_dtype(arr.dtype):\n        is_timedelta = True\n    else:\n        is_timedelta = False\n    \n    out_arr = np.empty(arr.shape, dtype=dtype)\n    \n    if np.ndim(arr) == 1:\n        indices = (slice(n, None),) if n >= 0 else (slice(None, n),)\n        out_arr[indices] = na\n    \n        if is_timedelta:\n            result = arr - np.roll(arr, n)\n            result[indices] = na\n        else:\n            result = arr - np.roll(arr, n)\n    \n    else:\n        out_arr[tuple([slice(None, n) if n >= 0 else slice(n, None) if n < 0 else slice(None)] * np.ndim(arr))] = na\n        if is_timedelta:\n            result = arr - np.roll(arr, n, axis=axis)\n            result[tuple([slice(None, n) if n >= 0 else slice(n, None) if n < 0 else slice(None)] * np.ndim(arr))] = na\n        else:\n            result = arr - np.roll(arr, n, axis=axis)\n    \n    return result"
        }
    ]
}