{
    "pandas": [
        {
            "bugID": 142,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1890,
            "file_name": "pandas/core/algorithms.py",
            "replace_code": "def diff(arr, n: int, axis: int = 0):\n    import numpy as np\n    \"\"\"\n    difference of n between self,\n    analogous to s-s.shift(n)\n    \n    Parameters\n    ----------\n    arr : ndarray\n    n : int\n        number of periods\n    axis : int\n        axis to shift on\n    \n    Returns\n    -------\n    shifted\n    \"\"\"\n    \n    def needs_i8_conversion(arr):\n        return arr.dtype.kind in \"Mm\" or np.issubdtype(arr.dtype, np.timedelta64)\n    \n    def is_bool_dtype(arr_dtype):\n        return arr_dtype == np.dtype(bool)\n    \n    def is_integer_dtype(arr_dtype):\n        return arr_dtype.kind in \"iu\"\n    \n    iNaT = np.array(\"NaT\", dtype=np.dtype(\"M8[ns]\"))\n    \n    n = int(n)\n    na = np.nan\n    arr_dtype = arr.dtype\n    \n    is_timedelta = False\n    if needs_i8_conversion(arr):\n        arr_dtype = np.float64\n        arr = arr.view(\"i8\")\n        na = iNaT\n        is_timedelta = True\n    \n    elif is_bool_dtype(arr_dtype):\n        arr_dtype = np.object_\n    \n    elif is_integer_dtype(arr_dtype):\n        arr_dtype = np.float64\n    \n    arr_dtype = np.dtype(arr_dtype)\n    out_arr = np.empty(arr.shape, dtype=arr_dtype)\n    \n    na_indexer = [slice(None)] * arr.ndim\n    na_indexer[axis] = slice(None, n) if n >= 0 else slice(n, None)\n    out_arr[tuple(na_indexer)] = na\n    \n    if arr.ndim == 2 and arr_dtype.name in _diff_special:\n        f = _diff_special[arr_dtype.name]\n        f(arr, out_arr, n, axis)\n    else:\n        res_indexer = (slice(None),) * arr.ndim\n        res_indexer[axis] = slice(n, None) if n >= 0 else slice(None, n)\n    \n        lag_indexer = (slice(None),) * arr.ndim\n        lag_indexer[axis] = slice(None, -n) if n > 0 else slice(-n, None)\n    \n        if is_timedelta:\n            res = arr[res_indexer]\n            lag = arr[lag_indexer]\n    \n            mask = (arr[res_indexer] == na) | (arr[lag_indexer] == na)\n            if mask.any():\n                res = res.copy()\n                res[mask] = 0\n                lag = lag.copy()\n                lag[mask] = 0\n    \n            result = res - lag\n            result[mask] = na\n            out_arr[res_indexer] = result\n        else:\n            out_arr[res_indexer] = (arr[res_indexer] ^ arr[lag_indexer]).astype(arr_dtype)\n    \n    if is_timedelta:\n        out_arr = out_arr.astype(\"i8\").view(\"timedelta64[ns]\")\n    \n    return out_arr"
        }
    ]
}