{
    "1.1.1": "@Appender(_shared_docs[\"pct_change\"] % _shared_doc_kwargs)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n    # TODO: Not sure if above is correct - need someone to confirm.\n    axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = isna(com.values_from_object(data))\n        np.putmask(rs.values, mask, np.nan)\n    return rs\n",
    "1.1.2": null,
    "1.2.1": "class NDFrame(PandasObject, SelectionMixin)",
    "1.2.2": "N-dimensional analogue of DataFrame. Store multi-dimensional in a\nsize-mutable, labeled data structure\n\nParameters\n----------\ndata : BlockManager\naxes : list\ncopy : bool, default False",
    "1.2.3": [
        "_get_axis_number(cls, axis)",
        "pop(self, item)",
        "reindex_like(self, other, method=None, copy=True, limit=None, tolerance=None)",
        "values(self)",
        "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)",
        "isna(self)",
        "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
        "shift(self, periods=1, freq=None, axis=0, fill_value=None)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_127/pandas/core/generic.py",
    "1.3.2": [
        "_get_axis_number(cls, axis)",
        "pop(self, item)",
        "reindex_like(self, other, method=None, copy=True, limit=None, tolerance=None)",
        "values(self)",
        "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None)",
        "isna(self)",
        "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
        "shift(self, periods=1, freq=None, axis=0, fill_value=None)"
    ],
    "1.4.1": [
        "    def test_pct_change_with_duplicate_axis(self):\n        # GH 28664\n        common_idx = date_range(\"2019-11-14\", periods=5, freq=\"D\")\n        result = Series(range(5), common_idx).pct_change(freq=\"B\")\n\n        # the reason that the expected should be like this is documented at PR 28681\n        expected = Series([np.NaN, np.inf, np.NaN, np.NaN, 3.0], common_idx)\n\n        tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_127/pandas/tests/series/test_timeseries.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: cannot reindex from a duplicate axis"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.series.test_timeseries.TestTimeSeries object at 0x11e6540d0>\n\n    def test_pct_change_with_duplicate_axis(self):\n        # GH 28664\n        common_idx = date_range(\"2019-11-14\", periods=5, freq=\"D\")\n>       result = Series(range(5), common_idx).pct_change(freq=\"B\")\n\npandas/tests/series/test_timeseries.py:376: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/generic.py:10446: in pct_change\n    rs = rs.reindex_like(data)\npandas/core/generic.py:3958: in reindex_like\n    return self.reindex(**d)\npandas/core/series.py:4130: in reindex\n    return super().reindex(index=index, **kwargs)\npandas/core/generic.py:4585: in reindex\n    return self._reindex_axes(\npandas/core/generic.py:4603: in _reindex_axes\n    obj = obj._reindex_with_indexers(\npandas/core/generic.py:4643: in _reindex_with_indexers\n    new_data = new_data.reindex_indexer(\npandas/core/internals/managers.py:1240: in reindex_indexer\n    self.axes[axis]._can_reindex(indexer)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = DatetimeIndex(['2019-11-14', '2019-11-15', '2019-11-16', '2019-11-17',\n               '2019-11-18', '2019-11-18', '2019-11-18', '2019-11-19'],\n              dtype='datetime64[ns]', freq=None)\nindexer = array([0, 1, 2, 3, 4, 5, 6])\n\n    def _can_reindex(self, indexer):\n        \"\"\"\n        Check if we are allowing reindexing with this particular indexer.\n    \n        Parameters\n        ----------\n        indexer : an integer indexer\n    \n        Raises\n        ------\n        ValueError if its a duplicate axis\n        \"\"\"\n    \n        # trying to reindex on an axis with duplicates\n        if not self.is_unique and len(indexer):\n>           raise ValueError(\"cannot reindex from a duplicate axis\")",
            "\npandas/core/indexes/base.py:3276: ValueError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas.core.series.Series'>>",
                "self": "2019-11-14    0\n2019-11-15    1\n2019-11-16    2\n2019-11-17    3\n2019-11-18    4\nFreq: D, dtype: int64",
                "kwargs": "{}",
                "self._stat_axis_name": "'index'",
                "fill_method": "'pad'",
                "self.fillna": "<bound method Series.fillna of 2019-11-14    0\n2019-11-15    1\n2019-11-16    2\n2019-11-17    3\n2019-11-18    4\nFreq: D, dtype: int64>",
                "periods": "1",
                "freq": "'B'"
            },
            {
                "axis": "0",
                "data": "2019-11-14    0\n2019-11-15    1\n2019-11-16    2\n2019-11-17    3\n2019-11-18    4\nFreq: D, dtype: int64",
                "rs": "2019-11-14    NaN\n2019-11-15    inf\n2019-11-16    NaN\n2019-11-17    NaN\n2019-11-18    3.0\nFreq: D, dtype: float64",
                "data.div": "<bound method _flex_method_SERIES.<locals>.flex_wrapper of 2019-11-14    0\n2019-11-15    1\n2019-11-16    2\n2019-11-17    3\n2019-11-18    4\nFreq: D, dtype: int64>",
                "data.shift": "<bound method Series.shift of 2019-11-14    0\n2019-11-15    1\n2019-11-16    2\n2019-11-17    3\n2019-11-18    4\nFreq: D, dtype: int64>",
                "rs.loc": "<pandas.core.indexing._LocIndexer object at 0x12269de50>",
                "rs.index": "DatetimeIndex(['2019-11-14', '2019-11-15', '2019-11-16', '2019-11-17',\n               '2019-11-18'],\n              dtype='datetime64[ns]', freq='D')",
                "rs.reindex_like": "<bound method NDFrame.reindex_like of 2019-11-14    NaN\n2019-11-15    inf\n2019-11-16    NaN\n2019-11-17    NaN\n2019-11-18    3.0\nFreq: D, dtype: float64>",
                "rs.values": "array([nan, inf, nan, nan,  3.])"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self._get_axis_number": "method",
                "self": "Series",
                "kwargs": "dict",
                "self._stat_axis_name": "str",
                "fill_method": "str",
                "self.fillna": "method",
                "periods": "int",
                "freq": "str"
            },
            {
                "axis": "int",
                "data": "Series",
                "rs": "Series",
                "data.div": "method",
                "data.shift": "method",
                "rs.loc": "_LocIndexer",
                "rs.index": "DatetimeIndex",
                "rs.reindex_like": "method",
                "rs.values": "ndarray"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}