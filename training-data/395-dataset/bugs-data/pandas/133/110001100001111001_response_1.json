{
    "pandas": [
        {
            "bugID": 133,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 7034,
            "file_name": "pandas/core/generic.py",
            "replace_code": "def interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs):\n    import numpy as np\n    from pandas.api.types import is_numeric_dtype, is_datetime64_any_dtype, is_timedelta64_dtype\n    from pandas.core.dtypes.common import is_float_dtype, is_integer_dtype\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    \n    ax = self._info_axis_name\n    _maybe_transposed_self = self\n    \n    if axis == 1:\n        _maybe_transposed_self = self.T\n        ax = 1\n    \n    ax = _maybe_transposed_self._get_axis_number(ax)\n    \n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n    \n    index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax))) if method == \"linear\" else _maybe_transposed_self._get_axis(alt_ax)\n    \n    if isna(index).any():\n        raise NotImplementedError(\n            \"Interpolation with NaNs in the index \"\n            \"has not been implemented. Try filling \"\n            \"those NaNs before interpolating.\"\n        )\n    \n    if len(_maybe_transposed_self.index) == 0:\n        raise ValueError(\"Cannot interpolate with no index\")\n    \n    # ... (other parts of the code that weren't included for brevity)\n    \n    if inplace:\n        if axis == 1:\n            self._update_inplace(self._constructor(new_data).T._data)\n        else:\n            self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis == 1:\n            res = res.T\n        return res"
        }
    ]
}