{
    "pandas": [
        {
            "bugID": 133,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "start_line": 7034,
            "file_name": "core/generic.py",
            "replace_code": "def interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs):\n\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    \n    axis_number = getattr(self, f\"{axis}_axis\").number\n    _maybe_transposed_self = getattr(self, f\"{'T' if axis_number else ''}\")\n    \n    if _maybe_transposed_self.index.nlevels > 1 and method != \"linear\":\n        raise ValueError(\"Only `method=linear` interpolation is supported on MultiIndexes.\")\n    \n    if self.select_dtypes(include=\"O\").shape[1] == len(self.columns):\n        raise TypeError(\"Cannot interpolate with all object-dtype columns in the DataFrame. Try setting at least one column to a numeric dtype.\")\n    \n    index = np.arange(len(self) if axis_number else len(self.columns)) if method == \"linear\" else _maybe_transposed_self._get_axis(axis_number)\n    \n    if (index.isna() & index.index).any():\n        raise NotImplementedError(\"Interpolation with NaNs in the index has not been implemented. Try filling those NaNs before interpolating.\")\n    \n    new_data = self._data.interpolate(\n        method=method, axis=axis_number, index=index, values=_maybe_transposed_self, limit=limit, limit_direction=limit_direction,\n        limit_area=limit_area, inplace=inplace, downcast=downcast, **kwargs\n    )\n    \n    if inplace:\n        new_data = new_data.T if axis_number else new_data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis_number:\n            res = res.T\n        return res"
        }
    ]
}