{
    "1.1.1": "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n    if axis is None and filter_type == \"bool\":\n        labels = None\n        constructor = None\n    else:\n        # TODO: Make other agg func handle axis=None properly\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == \"numeric\":\n            data = self._get_numeric_data()\n        elif filter_type == \"bool\":\n            if axis_matters:\n                # GH#25101, GH#24434\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:  # pragma: no cover\n            msg = (\n                f\"Generating numeric_only data with filter_type {filter_type} \"\n                \"not supported.\"\n            )\n            raise NotImplementedError(msg)\n        return data\n\n    if numeric_only is not None and axis in [0, 1]:\n        df = self\n        if numeric_only is True:\n            df = _get_data(axis_matters=True)\n        if axis == 1:\n            df = df.T\n            axis = 0\n\n        out_dtype = \"bool\" if filter_type == \"bool\" else None\n\n        # After possibly _get_data and transposing, we are now in the\n        #  simple case where we can use BlockManager._reduce\n        res = df._data.reduce(op, axis=1, skipna=skipna, **kwds)\n        assert isinstance(res, dict)\n        if len(res):\n            assert len(res) == max(list(res.keys())) + 1, res.keys()\n        out = df._constructor_sliced(res, index=range(len(res)), dtype=out_dtype)\n        out.index = df.columns\n        return out\n\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n\n            if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                # work around https://github.com/numpy/numpy/issues/10489\n                # TODO: combine with hasattr(result, 'dtype') further down\n                # hard since we don't have `values` down there.\n                result = np.bool_(result)\n        except TypeError:\n            # e.g. in nanops trying to convert strs to float\n\n            # try by-column first\n            if filter_type is None and axis == 0:\n                # this can end up with a non-reduction\n                # but not always. if the types are mixed\n                # with datelike then need to make sure a series\n\n                # we only end up here if we have not specified\n                # numeric_only and yet we have tried a\n                # column-by-column reduction, where we have mixed type.\n                # So let's just do what we can\n                from pandas.core.apply import frame_apply\n\n                opa = frame_apply(\n                    self, func=f, result_type=\"expand\", ignore_failures=True\n                )\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n\n            # TODO: why doesnt axis matter here?\n            data = _get_data(axis_matters=False)\n            with np.errstate(all=\"ignore\"):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n\n    if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == \"numeric\":\n                result = result.astype(np.float64)\n            elif filter_type == \"bool\" and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n\n            # try to coerce to the original dtypes item by item if we can\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n\n    if constructor is not None:\n        result = Series(result, index=labels)\n    return result\n",
    "1.1.2": null,
    "1.2.1": "class DataFrame(NDFrame)",
    "1.2.2": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv\nread_table\nread_clipboard\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
    "1.2.3": [
        "_constructor(self) -> Type['DataFrame']",
        "notna(self) -> 'DataFrame'",
        "_get_agg_axis(self, axis_num)",
        "f(vals)",
        "f(x)",
        "_get_data(axis_matters)",
        "f(s)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_78/pandas/core/frame.py",
    "1.3.2": [
        "_constructor(self) -> Type['DataFrame']",
        "notna(self) -> 'DataFrame'",
        "_get_agg_axis(self, axis_num)",
        "f(vals)",
        "f(x)",
        "_get_data(axis_matters)",
        "f(s)"
    ],
    "1.4.1": [
        "    def test_subclassed_boolean_reductions(self, all_boolean_reductions):\n        # GH 25596\n\n        df = tm.SubclassedDataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        result = getattr(df, all_boolean_reductions)()\n        assert isinstance(result, tm.SubclassedSeries)",
        "    def test_subclassed_boolean_reductions(self, all_boolean_reductions):\n        # GH 25596\n\n        df = tm.SubclassedDataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        result = getattr(df, all_boolean_reductions)()\n        assert isinstance(result, tm.SubclassedSeries)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_78/pandas/tests/frame/test_subclass.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_78/pandas/tests/frame/test_subclass.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert False\nE        +  where False = isinstance(A    True\\nB    True\\nC    True\\ndtype: bool, <class 'pandas._testing.SubclassedSeries'>)\nE        +    where <class 'pandas._testing.SubclassedSeries'> = tm.SubclassedSeries"
        ],
        [
            "E       AssertionError: assert False\nE        +  where False = isinstance(A    True\\nB    True\\nC    True\\ndtype: bool, <class 'pandas._testing.SubclassedSeries'>)\nE        +    where <class 'pandas._testing.SubclassedSeries'> = tm.SubclassedSeries"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_subclass.TestDataFrameSubclassing object at 0x11cd02d60>\nall_boolean_reductions = 'all'\n\n    def test_subclassed_boolean_reductions(self, all_boolean_reductions):\n        # GH 25596\n    \n        df = tm.SubclassedDataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        result = getattr(df, all_boolean_reductions)()\n>       assert isinstance(result, tm.SubclassedSeries)",
            "\npandas/tests/frame/test_subclass.py:573: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_subclass.TestDataFrameSubclassing object at 0x11cd13520>\nall_boolean_reductions = 'any'\n\n    def test_subclassed_boolean_reductions(self, all_boolean_reductions):\n        # GH 25596\n    \n        df = tm.SubclassedDataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6], \"C\": [7, 8, 9]})\n        result = getattr(df, all_boolean_reductions)()\n>       assert isinstance(result, tm.SubclassedSeries)",
            "\npandas/tests/frame/test_subclass.py:573: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "axis": "0",
                "filter_type": "'bool'",
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas._testing.SubclassedDataFrame'>>",
                "self": "   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9",
                "self._get_agg_axis": "<bound method DataFrame._get_agg_axis of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "skipna": "True",
                "kwds": "{}",
                "self._get_numeric_data": "<bound method NDFrame._get_numeric_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._get_bool_data": "<bound method NDFrame._get_bool_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self.values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "self.ndim": "2",
                "self.dtypes": "A    int64\nB    int64\nC    int64\ndtype: object"
            },
            {
                "labels": "Index(['A', 'B', 'C'], dtype='object')",
                "constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "x": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "_get_data": "<function DataFrame._reduce.<locals>._get_data at 0x113f1e940>",
                "values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "f": "<function DataFrame._reduce.<locals>.f at 0x113f1eaf0>"
            }
        ],
        [
            {
                "axis": "0",
                "filter_type": "'bool'",
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas._testing.SubclassedDataFrame'>>",
                "self": "   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9",
                "self._get_agg_axis": "<bound method DataFrame._get_agg_axis of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "skipna": "True",
                "kwds": "{}",
                "self._get_numeric_data": "<bound method NDFrame._get_numeric_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._get_bool_data": "<bound method NDFrame._get_bool_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self.values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "self.ndim": "2",
                "self.dtypes": "A    int64\nB    int64\nC    int64\ndtype: object"
            },
            {
                "labels": "Index(['A', 'B', 'C'], dtype='object')",
                "constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "x": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "_get_data": "<function DataFrame._reduce.<locals>._get_data at 0x113fc2af0>",
                "values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "f": "<function DataFrame._reduce.<locals>.f at 0x113fc2a60>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "axis": "int",
                "filter_type": "str",
                "self._get_axis_number": "method",
                "self": "SubclassedDataFrame",
                "self._get_agg_axis": "method",
                "self._constructor": "type",
                "skipna": "bool",
                "kwds": "dict",
                "self._get_numeric_data": "method",
                "self._get_bool_data": "method",
                "self.values": "ndarray",
                "self.ndim": "int",
                "self.dtypes": "Series"
            },
            {
                "labels": "Index",
                "constructor": "type",
                "x": "ndarray",
                "_get_data": "function",
                "values": "ndarray",
                "f": "function"
            }
        ],
        [
            {
                "axis": "int",
                "filter_type": "str",
                "self._get_axis_number": "method",
                "self": "SubclassedDataFrame",
                "self._get_agg_axis": "method",
                "self._constructor": "type",
                "skipna": "bool",
                "kwds": "dict",
                "self._get_numeric_data": "method",
                "self._get_bool_data": "method",
                "self.values": "ndarray",
                "self.ndim": "int",
                "self.dtypes": "Series"
            },
            {
                "labels": "Index",
                "constructor": "type",
                "x": "ndarray",
                "_get_data": "function",
                "values": "ndarray",
                "f": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "axis": "0",
                "filter_type": "'bool'",
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas._testing.SubclassedDataFrame'>>",
                "self": "   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9",
                "self._get_agg_axis": "<bound method DataFrame._get_agg_axis of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "skipna": "True",
                "kwds": "{}",
                "self._get_numeric_data": "<bound method NDFrame._get_numeric_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._get_bool_data": "<bound method NDFrame._get_bool_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self.values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "self.ndim": "2",
                "self.dtypes": "A    int64\nB    int64\nC    int64\ndtype: object",
                "self._constructor_sliced": "<class 'pandas._testing.SubclassedSeries'>"
            },
            {
                "labels": "Index(['A', 'B', 'C'], dtype='object')",
                "constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "x": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "_get_data": "<function DataFrame._reduce.<locals>._get_data at 0x12009a700>",
                "values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "f": "<function DataFrame._reduce.<locals>.f at 0x12009a820>"
            }
        ],
        [
            {
                "axis": "0",
                "filter_type": "'bool'",
                "self._get_axis_number": "<bound method NDFrame._get_axis_number of <class 'pandas._testing.SubclassedDataFrame'>>",
                "self": "   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9",
                "self._get_agg_axis": "<bound method DataFrame._get_agg_axis of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "skipna": "True",
                "kwds": "{}",
                "self._get_numeric_data": "<bound method NDFrame._get_numeric_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self._get_bool_data": "<bound method NDFrame._get_bool_data of    A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9>",
                "self.values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "self.ndim": "2",
                "self.dtypes": "A    int64\nB    int64\nC    int64\ndtype: object",
                "self._constructor_sliced": "<class 'pandas._testing.SubclassedSeries'>"
            },
            {
                "labels": "Index(['A', 'B', 'C'], dtype='object')",
                "constructor": "<class 'pandas._testing.SubclassedDataFrame'>",
                "x": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "_get_data": "<function DataFrame._reduce.<locals>._get_data at 0x1200c8b80>",
                "values": "array([[1, 4, 7],\n       [2, 5, 8],\n       [3, 6, 9]])",
                "f": "<function DataFrame._reduce.<locals>.f at 0x1200c8790>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "axis": "int",
                "filter_type": "str",
                "self._get_axis_number": "method",
                "self": "SubclassedDataFrame",
                "self._get_agg_axis": "method",
                "self._constructor": "type",
                "skipna": "bool",
                "kwds": "dict",
                "self._get_numeric_data": "method",
                "self._get_bool_data": "method",
                "self.values": "ndarray",
                "self.ndim": "int",
                "self.dtypes": "Series",
                "self._constructor_sliced": "type"
            },
            {
                "labels": "Index",
                "constructor": "type",
                "x": "ndarray",
                "_get_data": "function",
                "values": "ndarray",
                "f": "function"
            }
        ],
        [
            {
                "axis": "int",
                "filter_type": "str",
                "self._get_axis_number": "method",
                "self": "SubclassedDataFrame",
                "self._get_agg_axis": "method",
                "self._constructor": "type",
                "skipna": "bool",
                "kwds": "dict",
                "self._get_numeric_data": "method",
                "self._get_bool_data": "method",
                "self.values": "ndarray",
                "self.ndim": "int",
                "self.dtypes": "Series",
                "self._constructor_sliced": "type"
            },
            {
                "labels": "Index",
                "constructor": "type",
                "x": "ndarray",
                "_get_data": "function",
                "values": "ndarray",
                "f": "function"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}