{
    "pandas": [
        {
            "bugID": 19,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 1070,
            "file_name": "/pandas/core/indexing.py",
            "replace_code": "def _getitem_axis(self, key, axis: int):\n\n    key = item_from_zerodim(key)\n    if is_iterator(key):\n        key = list(key)\n    \n    labels = self.obj._get_axis(axis)\n    key_partial_string = labels._get_partial_string_timestamp_match_key(key)\n    \n    if isinstance(key_partial_string, slice):\n        self._validate_key(key_partial_string, axis)\n        return self._get_slice_axis(key_partial_string, axis=axis)\n    elif com.is_bool_indexer(key_partial_string):\n        return self._getbool_axis(key_partial_string, axis=axis)\n    elif is_list_like_indexer(key_partial_string):\n        if isinstance(labels, ABCMultiIndex):\n            if isinstance(key_partial_string, (ABCSeries, np.ndarray)) and key_partial_string.ndim <= 1:\n                key_partial_string = list(key_partial_string)\n            elif isinstance(key_partial_string, ABCDataFrame):\n                raise NotImplementedError(\n                    \"Indexing a MultiIndex with a \"\n                    \"DataFrame key is not \"\n                    \"implemented\"\n                )\n            elif hasattr(key_partial_string, \"ndim\") and key_partial_string.ndim > 1:\n                raise NotImplementedError(\n                    \"Indexing a MultiIndex with a \"\n                    \"multidimensional key is not \"\n                    \"implemented\"\n                )\n            if (\n                not isinstance(key_partial_string, tuple)\n                and len(key_partial_string)\n                and not isinstance(key_partial_string[0], tuple)\n            ):\n                key_partial_string = tuple([key_partial_string])\n        if not (isinstance(key_partial_string, tuple) and isinstance(labels, ABCMultiIndex)):\n            if hasattr(key_partial_string, \"ndim\") and key_partial_string.ndim > 1:\n                raise ValueError(\"Cannot index with multidimensional key\")\n            return self._getitem_iterable(key_partial_string, axis=axis)\n        if is_nested_tuple(key_partial_string, labels):\n            locs = labels.get_locs(key_partial_string)\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = locs\n            return self.obj.iloc[tuple(indexer)]\n    self._validate_key(key_partial_string, axis)\n    return self._get_label(key_partial_string, axis=axis)"
        }
    ]
}