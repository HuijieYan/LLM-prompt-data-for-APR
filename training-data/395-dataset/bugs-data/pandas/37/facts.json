{
    "1.1.1": "def astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if isinstance(dtype, StringDtype):\n        if copy:\n            return self.copy()\n        return self\n    return super().astype(dtype, copy)\n",
    "1.1.2": null,
    "1.2.1": "class StringArray(PandasArray)",
    "1.2.2": "Extension array for string data.\n\n.. versionadded:: 1.0.0\n\n.. warning::\n\n   StringArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : array-like\n    The array of data.\n\n    .. warning::\n\n       Currently, this expects an object-dtype ndarray\n       where the elements are Python strings or :attr:`pandas.NA`.\n       This may change without warning in the future. Use\n       :meth:`pandas.array` with ``dtype=\"string\"`` for a stable way of\n       creating a `StringArray` from any sequence.\n\ncopy : bool, default False\n    Whether to copy the array of data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\narray\n    The recommended function for creating a StringArray.\nSeries.str\n    The string methods are available on Series backed by\n    a StringArray.\n\nNotes\n-----\nStringArray returns a BooleanArray for comparison methods.\n\nExamples\n--------\n>>> pd.array(['This is', 'some text', None, 'data.'], dtype=\"string\")\n<StringArray>\n['This is', 'some text', <NA>, 'data.']\nLength: 4, dtype: string\n\nUnlike ``object`` dtype arrays, ``StringArray`` doesn't allow non-string\nvalues.\n\n>>> pd.array(['1', 1], dtype=\"string\")\nTraceback (most recent call last):\n...\nValueError: StringArray requires an object-dtype ndarray of strings.\n\nFor comparison methods, this returns a :class:`pandas.BooleanArray`\n\n>>> pd.array([\"a\", None, \"c\"], dtype=\"string\") == \"a\"\n<BooleanArray>\n[True, <NA>, False]\nLength: 3, dtype: boolean",
    "1.2.3": [
        "astype(self, dtype, copy=True)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_37/pandas/core/arrays/string_.py",
    "1.3.2": [
        "astype(self, dtype, copy=True)"
    ],
    "1.4.1": [
        "def test_astype_int():\n    arr = pd.array([\"1\", pd.NA, \"3\"], dtype=\"string\")\n\n    result = arr.astype(\"Int64\")\n    expected = pd.array([1, pd.NA, 3], dtype=\"Int64\")\n    tm.assert_extension_array_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_37/pandas/tests/arrays/string_/test_string.py"
    ],
    "2.1.1": [
        [
            "E       TypeError: data type not understood"
        ]
    ],
    "2.1.2": [
        [
            "def test_astype_int():\n        arr = pd.array([\"1\", pd.NA, \"3\"], dtype=\"string\")\n    \n>       result = arr.astype(\"Int64\")\n\npandas/tests/arrays/string_/test_string.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/string_.py:274: in astype\n    return super().astype(dtype, copy)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string\ndtype = Int64Dtype(), copy = True\n\n    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to a NumPy array with 'dtype'.\n    \n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n    \n        Returns\n        -------\n        array : ndarray\n            NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n>       return np.array(self, dtype=dtype, copy=copy)",
            "\npandas/core/arrays/base.py:434: TypeError"
        ]
    ],
    "2.1.3": [
        [
            {
                "dtype": "'Int64'",
                "copy": "True",
                "self.copy": "<bound method PandasArray.copy of <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string>",
                "self": "<StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string"
            },
            {
                "dtype": "Int64Dtype()"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "dtype": "str",
                "copy": "bool",
                "self.copy": "method",
                "self": "StringArray"
            },
            {
                "dtype": "Int64Dtype"
            }
        ]
    ],
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}