{
    "pandas:37": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_37/pandas/core/arrays/string_.py": {
            "buggy_functions": [
                {
                    "function_name": "astype",
                    "function_code": "def astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if isinstance(dtype, StringDtype):\n        if copy:\n            return self.copy()\n        return self\n    return super().astype(dtype, copy)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 268,
                    "variables": {
                        "dtype": [
                            274,
                            269,
                            270
                        ],
                        "pandas_dtype": [
                            269
                        ],
                        "isinstance": [
                            270
                        ],
                        "StringDtype": [
                            270
                        ],
                        "copy": [
                            274,
                            271
                        ],
                        "self.copy": [
                            272
                        ],
                        "self": [
                            272,
                            273
                        ],
                        "astype": [
                            274
                        ],
                        "super": [
                            274
                        ]
                    },
                    "filtered_variables": {
                        "dtype": [
                            274,
                            269,
                            270
                        ],
                        "pandas_dtype": [
                            269
                        ],
                        "StringDtype": [
                            270
                        ],
                        "copy": [
                            274,
                            271
                        ],
                        "self.copy": [
                            272
                        ],
                        "self": [
                            272,
                            273
                        ],
                        "astype": [
                            274
                        ]
                    },
                    "diff_line_number": 273,
                    "class_data": {
                        "signature": "class StringArray(PandasArray)",
                        "docstring": "Extension array for string data.\n\n.. versionadded:: 1.0.0\n\n.. warning::\n\n   StringArray is considered experimental. The implementation and\n   parts of the API may change without warning.\n\nParameters\n----------\nvalues : array-like\n    The array of data.\n\n    .. warning::\n\n       Currently, this expects an object-dtype ndarray\n       where the elements are Python strings or :attr:`pandas.NA`.\n       This may change without warning in the future. Use\n       :meth:`pandas.array` with ``dtype=\"string\"`` for a stable way of\n       creating a `StringArray` from any sequence.\n\ncopy : bool, default False\n    Whether to copy the array of data.\n\nAttributes\n----------\nNone\n\nMethods\n-------\nNone\n\nSee Also\n--------\narray\n    The recommended function for creating a StringArray.\nSeries.str\n    The string methods are available on Series backed by\n    a StringArray.\n\nNotes\n-----\nStringArray returns a BooleanArray for comparison methods.\n\nExamples\n--------\n>>> pd.array(['This is', 'some text', None, 'data.'], dtype=\"string\")\n<StringArray>\n['This is', 'some text', <NA>, 'data.']\nLength: 4, dtype: string\n\nUnlike ``object`` dtype arrays, ``StringArray`` doesn't allow non-string\nvalues.\n\n>>> pd.array(['1', 1], dtype=\"string\")\nTraceback (most recent call last):\n...\nValueError: StringArray requires an object-dtype ndarray of strings.\n\nFor comparison methods, this returns a :class:`pandas.BooleanArray`\n\n>>> pd.array([\"a\", None, \"c\"], dtype=\"string\") == \"a\"\n<BooleanArray>\n[True, <NA>, False]\nLength: 3, dtype: boolean",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, copy=False):\n    values = extract_array(values)\n    skip_validation = isinstance(values, type(self))\n    super().__init__(values, copy=copy)\n    self._dtype = StringDtype()\n    if not skip_validation:\n        self._validate()",
                            "def _validate(self):\n    \"\"\"Validate that we only store NA or strings.\"\"\"\n    if len(self._ndarray) and (not lib.is_string_array(self._ndarray, skipna=True)):\n        raise ValueError('StringArray requires a sequence of strings or pandas.NA')\n    if self._ndarray.dtype != 'object':\n        raise ValueError(f\"StringArray requires a sequence of strings or pandas.NA. Got '{self._ndarray.dtype}' dtype instead.\")",
                            "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    if dtype:\n        assert dtype == 'string'\n    result = np.asarray(scalars, dtype='object')\n    if copy and result is scalars:\n        result = result.copy()\n    na_values = isna(result)\n    if na_values.any():\n        if result is scalars:\n            result = result.copy()\n        result[na_values] = StringDtype.na_value\n    return cls(result)",
                            "@classmethod\ndef _from_sequence_of_strings(cls, strings, dtype=None, copy=False):\n    return cls._from_sequence(strings, dtype=dtype, copy=copy)",
                            "def __arrow_array__(self, type=None):\n    \"\"\"\n    Convert myself into a pyarrow Array.\n    \"\"\"\n    import pyarrow as pa\n    if type is None:\n        type = pa.string()\n    values = self._ndarray.copy()\n    values[self.isna()] = None\n    return pa.array(values, type=type, from_pandas=True)",
                            "def _values_for_factorize(self):\n    arr = self._ndarray.copy()\n    mask = self.isna()\n    arr[mask] = -1\n    return (arr, -1)",
                            "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n    if isinstance(value, type(self)):\n        value = value._ndarray\n    key = check_array_indexer(self, key)\n    scalar_key = lib.is_scalar(key)\n    scalar_value = lib.is_scalar(value)\n    if scalar_key and (not scalar_value):\n        raise ValueError('setting an array element with a sequence.')\n    if scalar_value:\n        if isna(value):\n            value = StringDtype.na_value\n        elif not isinstance(value, str):\n            raise ValueError(f\"Cannot set non-string value '{value}' into a StringArray.\")\n    else:\n        if not is_array_like(value):\n            value = np.asarray(value, dtype=object)\n        if len(value) and (not lib.is_string_array(value, skipna=True)):\n            raise ValueError('Must provide strings.')\n    super().__setitem__(key, value)",
                            "def fillna(self, value=None, method=None, limit=None):\n    return super().fillna(value, method, limit)",
                            "def astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if isinstance(dtype, StringDtype):\n        if copy:\n            return self.copy()\n        return self\n    return super().astype(dtype, copy)",
                            "def _reduce(self, name, skipna=True, **kwargs):\n    raise TypeError(f\"Cannot perform reduction '{name}' with string dtype\")",
                            "def value_counts(self, dropna=False):\n    from pandas import value_counts\n    return value_counts(self._ndarray, dropna=dropna).astype('Int64')",
                            "@classmethod\ndef _create_arithmetic_method(cls, op):\n\n    def method(self, other):\n        from pandas.arrays import BooleanArray\n        assert op.__name__ in ops.ARITHMETIC_BINOPS | ops.COMPARISON_BINOPS\n        if isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame)):\n            return NotImplemented\n        elif isinstance(other, cls):\n            other = other._ndarray\n        mask = isna(self) | isna(other)\n        valid = ~mask\n        if not lib.is_scalar(other):\n            if len(other) != len(self):\n                raise ValueError(f'Lengths of operands do not match: {len(self)} != {len(other)}')\n            other = np.asarray(other)\n            other = other[valid]\n        if op.__name__ in ops.ARITHMETIC_BINOPS:\n            result = np.empty_like(self._ndarray, dtype='object')\n            result[mask] = StringDtype.na_value\n            result[valid] = op(self._ndarray[valid], other)\n            return StringArray(result)\n        else:\n            result = np.zeros(len(self._ndarray), dtype='bool')\n            result[valid] = op(self._ndarray[valid], other)\n            return BooleanArray(result, mask)\n    return compat.set_function_name(method, f'__{op.__name__}__', cls)",
                            "@classmethod\ndef _add_arithmetic_ops(cls):\n    cls.__add__ = cls._create_arithmetic_method(operator.add)\n    cls.__radd__ = cls._create_arithmetic_method(ops.radd)\n    cls.__mul__ = cls._create_arithmetic_method(operator.mul)\n    cls.__rmul__ = cls._create_arithmetic_method(ops.rmul)",
                            "def method(self, other):\n    from pandas.arrays import BooleanArray\n    assert op.__name__ in ops.ARITHMETIC_BINOPS | ops.COMPARISON_BINOPS\n    if isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame)):\n        return NotImplemented\n    elif isinstance(other, cls):\n        other = other._ndarray\n    mask = isna(self) | isna(other)\n    valid = ~mask\n    if not lib.is_scalar(other):\n        if len(other) != len(self):\n            raise ValueError(f'Lengths of operands do not match: {len(self)} != {len(other)}')\n        other = np.asarray(other)\n        other = other[valid]\n    if op.__name__ in ops.ARITHMETIC_BINOPS:\n        result = np.empty_like(self._ndarray, dtype='object')\n        result[mask] = StringDtype.na_value\n        result[valid] = op(self._ndarray[valid], other)\n        return StringArray(result)\n    else:\n        result = np.zeros(len(self._ndarray), dtype='bool')\n        result[valid] = op(self._ndarray[valid], other)\n        return BooleanArray(result, mask)"
                        ],
                        "constructor_variables": [
                            "skip_validation",
                            "values",
                            "_dtype"
                        ],
                        "class_level_variables": [
                            "_typ",
                            "_create_comparison_method"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, copy=False)",
                            "_validate(self)",
                            "_from_sequence(cls, scalars, dtype=None, copy=False)",
                            "_from_sequence_of_strings(cls, strings, dtype=None, copy=False)",
                            "__arrow_array__(self, type=None)",
                            "_values_for_factorize(self)",
                            "__setitem__(self, key, value)",
                            "fillna(self, value=None, method=None, limit=None)",
                            "astype(self, dtype, copy=True)",
                            "_reduce(self, name, skipna=True, **kwargs)",
                            "value_counts(self, dropna=False)",
                            "_create_arithmetic_method(cls, op)",
                            "_add_arithmetic_ops(cls)",
                            "method(self, other)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "dtype": {
                                    "variable_value": "'Int64'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "StringDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.copy": {
                                    "variable_value": "<bound method PandasArray.copy of <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "3"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "dtype": {
                                    "variable_value": "Int64Dtype()",
                                    "variable_type": "Int64Dtype",
                                    "variable_shape": null
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "StringDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.copy": {
                                    "variable_value": "<bound method PandasArray.copy of <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "3"
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "dtype": {
                                    "variable_value": "'Int64'",
                                    "variable_type": "str",
                                    "variable_shape": "5"
                                },
                                "pandas_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "StringDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self.copy": {
                                    "variable_value": "<bound method PandasArray.copy of <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string",
                                    "variable_type": "StringArray",
                                    "variable_shape": "3"
                                },
                                "_IntegerDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._ndarray.copy": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._ndarray": {
                                    "variable_value": "array(['1', <NA>, '3'], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "3"
                                },
                                "mask": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method PandasArray.isna of <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr.astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.numpy_dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "IntegerArray": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "astype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from pandas.core.arrays import PandasArray\nfrom pandas.core.construction import extract_array",
                    "start_line": 16,
                    "end_line": 17
                }
            ],
            "inscope_functions": [
                "@property\ndef type(self) -> Type[str]:\n    return str",
                "@classmethod\ndef construct_array_type(cls) -> Type[\"StringArray\"]:\n    \"\"\"\n    Return the array type associated with this dtype.\n\n    Returns\n    -------\n    type\n    \"\"\"\n    return StringArray",
                "def __repr__(self) -> str:\n    return \"StringDtype\"",
                "def __from_arrow__(\n    self, array: Union[\"pyarrow.Array\", \"pyarrow.ChunkedArray\"]\n) -> \"StringArray\":\n    \"\"\"\n    Construct StringArray from pyarrow Array/ChunkedArray.\n    \"\"\"\n    import pyarrow  # noqa: F811\n\n    if isinstance(array, pyarrow.Array):\n        chunks = [array]\n    else:\n        # pyarrow.ChunkedArray\n        chunks = array.chunks\n\n    results = []\n    for arr in chunks:\n        # using _from_sequence to ensure None is converted to NA\n        str_arr = StringArray._from_sequence(np.array(arr))\n        results.append(str_arr)\n\n    return StringArray._concat_same_type(results)",
                "def __init__(self, values, copy=False):\n    values = extract_array(values)\n    skip_validation = isinstance(values, type(self))\n\n    super().__init__(values, copy=copy)\n    self._dtype = StringDtype()\n    if not skip_validation:\n        self._validate()",
                "def _validate(self):\n    \"\"\"Validate that we only store NA or strings.\"\"\"\n    if len(self._ndarray) and not lib.is_string_array(self._ndarray, skipna=True):\n        raise ValueError(\"StringArray requires a sequence of strings or pandas.NA\")\n    if self._ndarray.dtype != \"object\":\n        raise ValueError(\n            \"StringArray requires a sequence of strings or pandas.NA. Got \"\n            f\"'{self._ndarray.dtype}' dtype instead.\"\n        )",
                "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    if dtype:\n        assert dtype == \"string\"\n\n    result = np.asarray(scalars, dtype=\"object\")\n    if copy and result is scalars:\n        result = result.copy()\n\n    # Standardize all missing-like values to NA\n    # TODO: it would be nice to do this in _validate / lib.is_string_array\n    # We are already doing a scan over the values there.\n    na_values = isna(result)\n    if na_values.any():\n        if result is scalars:\n            # force a copy now, if we haven't already\n            result = result.copy()\n        result[na_values] = StringDtype.na_value\n\n    return cls(result)",
                "@classmethod\ndef _from_sequence_of_strings(cls, strings, dtype=None, copy=False):\n    return cls._from_sequence(strings, dtype=dtype, copy=copy)",
                "def __arrow_array__(self, type=None):\n    \"\"\"\n    Convert myself into a pyarrow Array.\n    \"\"\"\n    import pyarrow as pa\n\n    if type is None:\n        type = pa.string()\n\n    values = self._ndarray.copy()\n    values[self.isna()] = None\n    return pa.array(values, type=type, from_pandas=True)",
                "def _values_for_factorize(self):\n    arr = self._ndarray.copy()\n    mask = self.isna()\n    arr[mask] = -1\n    return arr, -1",
                "def __setitem__(self, key, value):\n    value = extract_array(value, extract_numpy=True)\n    if isinstance(value, type(self)):\n        # extract_array doesn't extract PandasArray subclasses\n        value = value._ndarray\n\n    key = check_array_indexer(self, key)\n    scalar_key = lib.is_scalar(key)\n    scalar_value = lib.is_scalar(value)\n    if scalar_key and not scalar_value:\n        raise ValueError(\"setting an array element with a sequence.\")\n\n    # validate new items\n    if scalar_value:\n        if isna(value):\n            value = StringDtype.na_value\n        elif not isinstance(value, str):\n            raise ValueError(\n                f\"Cannot set non-string value '{value}' into a StringArray.\"\n            )\n    else:\n        if not is_array_like(value):\n            value = np.asarray(value, dtype=object)\n        if len(value) and not lib.is_string_array(value, skipna=True):\n            raise ValueError(\"Must provide strings.\")\n\n    super().__setitem__(key, value)",
                "def fillna(self, value=None, method=None, limit=None):\n    # TODO: validate dtype\n    return super().fillna(value, method, limit)",
                "def astype(self, dtype, copy=True):\n    dtype = pandas_dtype(dtype)\n    if isinstance(dtype, StringDtype):\n        if copy:\n            return self.copy()\n        return self\n    return super().astype(dtype, copy)",
                "def _reduce(self, name, skipna=True, **kwargs):\n    raise TypeError(f\"Cannot perform reduction '{name}' with string dtype\")",
                "def value_counts(self, dropna=False):\n    from pandas import value_counts\n\n    return value_counts(self._ndarray, dropna=dropna).astype(\"Int64\")",
                "@classmethod\ndef _create_arithmetic_method(cls, op):\n    # Note: this handles both arithmetic and comparison methods.\n    def method(self, other):\n        from pandas.arrays import BooleanArray\n\n        assert op.__name__ in ops.ARITHMETIC_BINOPS | ops.COMPARISON_BINOPS\n\n        if isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame)):\n            return NotImplemented\n\n        elif isinstance(other, cls):\n            other = other._ndarray\n\n        mask = isna(self) | isna(other)\n        valid = ~mask\n\n        if not lib.is_scalar(other):\n            if len(other) != len(self):\n                # prevent improper broadcasting when other is 2D\n                raise ValueError(\n                    f\"Lengths of operands do not match: {len(self)} != {len(other)}\"\n                )\n\n            other = np.asarray(other)\n            other = other[valid]\n\n        if op.__name__ in ops.ARITHMETIC_BINOPS:\n            result = np.empty_like(self._ndarray, dtype=\"object\")\n            result[mask] = StringDtype.na_value\n            result[valid] = op(self._ndarray[valid], other)\n            return StringArray(result)\n        else:\n            # logical\n            result = np.zeros(len(self._ndarray), dtype=\"bool\")\n            result[valid] = op(self._ndarray[valid], other)\n            return BooleanArray(result, mask)\n\n    return compat.set_function_name(method, f\"__{op.__name__}__\", cls)",
                "@classmethod\ndef _add_arithmetic_ops(cls):\n    cls.__add__ = cls._create_arithmetic_method(operator.add)\n    cls.__radd__ = cls._create_arithmetic_method(ops.radd)\n\n    cls.__mul__ = cls._create_arithmetic_method(operator.mul)\n    cls.__rmul__ = cls._create_arithmetic_method(ops.rmul)",
                "def method(self, other):\n    from pandas.arrays import BooleanArray\n\n    assert op.__name__ in ops.ARITHMETIC_BINOPS | ops.COMPARISON_BINOPS\n\n    if isinstance(other, (ABCIndexClass, ABCSeries, ABCDataFrame)):\n        return NotImplemented\n\n    elif isinstance(other, cls):\n        other = other._ndarray\n\n    mask = isna(self) | isna(other)\n    valid = ~mask\n\n    if not lib.is_scalar(other):\n        if len(other) != len(self):\n            # prevent improper broadcasting when other is 2D\n            raise ValueError(\n                f\"Lengths of operands do not match: {len(self)} != {len(other)}\"\n            )\n\n        other = np.asarray(other)\n        other = other[valid]\n\n    if op.__name__ in ops.ARITHMETIC_BINOPS:\n        result = np.empty_like(self._ndarray, dtype=\"object\")\n        result[mask] = StringDtype.na_value\n        result[valid] = op(self._ndarray[valid], other)\n        return StringArray(result)\n    else:\n        # logical\n        result = np.zeros(len(self._ndarray), dtype=\"bool\")\n        result[valid] = op(self._ndarray[valid], other)\n        return BooleanArray(result, mask)"
            ],
            "inscope_function_signatures": [
                "type(self) -> Type[str]",
                "construct_array_type(cls) -> Type['StringArray']",
                "__repr__(self) -> str",
                "__from_arrow__(self, array: Union['pyarrow.Array', 'pyarrow.ChunkedArray']) -> 'StringArray'",
                "__init__(self, values, copy=False)",
                "_validate(self)",
                "_from_sequence(cls, scalars, dtype=None, copy=False)",
                "_from_sequence_of_strings(cls, strings, dtype=None, copy=False)",
                "__arrow_array__(self, type=None)",
                "_values_for_factorize(self)",
                "__setitem__(self, key, value)",
                "fillna(self, value=None, method=None, limit=None)",
                "astype(self, dtype, copy=True)",
                "_reduce(self, name, skipna=True, **kwargs)",
                "value_counts(self, dropna=False)",
                "_create_arithmetic_method(cls, op)",
                "_add_arithmetic_ops(cls)",
                "method(self, other)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    21
                ],
                "ExtensionDtype": [
                    26
                ],
                "name": [
                    277,
                    54
                ],
                "na_value": [
                    57
                ],
                "libmissing.NA": [
                    57
                ],
                "libmissing": [
                    57
                ],
                "str": [
                    74,
                    252,
                    60,
                    61
                ],
                "property": [
                    59
                ],
                "Type": [
                    64,
                    60
                ],
                "StringArray": [
                    97,
                    72,
                    336,
                    337,
                    316,
                    94
                ],
                "classmethod": [
                    192,
                    325,
                    213,
                    285,
                    63
                ],
                "Union": [
                    78
                ],
                "isinstance": [
                    293,
                    296,
                    270,
                    238,
                    175,
                    85,
                    252
                ],
                "array": [
                    89,
                    85,
                    86
                ],
                "pyarrow.Array": [
                    85
                ],
                "pyarrow": [
                    85
                ],
                "chunks": [
                    89,
                    92,
                    86
                ],
                "array.chunks": [
                    89
                ],
                "results": [
                    97,
                    91,
                    95
                ],
                "arr": [
                    231,
                    233,
                    234,
                    92,
                    94
                ],
                "str_arr": [
                    94,
                    95
                ],
                "StringArray._from_sequence": [
                    94
                ],
                "np.array": [
                    94
                ],
                "np": [
                    258,
                    197,
                    309,
                    313,
                    94,
                    319
                ],
                "results.append": [
                    95
                ],
                "StringArray._concat_same_type": [
                    97
                ],
                "register_extension_dtype": [
                    25
                ],
                "PandasArray": [
                    100
                ],
                "_typ": [
                    171
                ],
                "values": [
                    226,
                    227,
                    228,
                    174,
                    175,
                    177
                ],
                "extract_array": [
                    237,
                    174
                ],
                "skip_validation": [
                    179,
                    175
                ],
                "type": [
                    224,
                    228,
                    238,
                    175,
                    223
                ],
                "self": [
                    272,
                    273,
                    282,
                    299,
                    175,
                    303,
                    178,
                    306,
                    180,
                    184,
                    313,
                    186,
                    315,
                    189,
                    319,
                    320,
                    226,
                    227,
                    231,
                    232,
                    238,
                    242
                ],
                "__init__": [
                    177
                ],
                "super": [
                    177,
                    266,
                    274,
                    262
                ],
                "copy": [
                    198,
                    271,
                    177,
                    274,
                    215
                ],
                "self._dtype": [
                    178
                ],
                "StringDtype": [
                    270,
                    209,
                    178,
                    314,
                    251
                ],
                "self._validate": [
                    180
                ],
                "len": [
                    259,
                    303,
                    306,
                    184,
                    319
                ],
                "self._ndarray": [
                    320,
                    226,
                    231,
                    282,
                    184,
                    313,
                    186,
                    315,
                    189,
                    319
                ],
                "lib.is_string_array": [
                    184,
                    259
                ],
                "lib": [
                    259,
                    302,
                    243,
                    244,
                    184
                ],
                "ValueError": [
                    260,
                    305,
                    246,
                    185,
                    187,
                    253
                ],
                "self._ndarray.dtype": [
                    186,
                    189
                ],
                "dtype": [
                    194,
                    195,
                    269,
                    270,
                    274,
                    215
                ],
                "result": [
                    320,
                    321,
                    197,
                    198,
                    199,
                    204,
                    206,
                    208,
                    209,
                    211,
                    313,
                    314,
                    315,
                    316,
                    319
                ],
                "np.asarray": [
                    258,
                    309,
                    197
                ],
                "scalars": [
                    206,
                    197,
                    198
                ],
                "result.copy": [
                    208,
                    199
                ],
                "na_values": [
                    209,
                    204,
                    205
                ],
                "isna": [
                    250,
                    299,
                    204
                ],
                "na_values.any": [
                    205
                ],
                "StringDtype.na_value": [
                    209,
                    314,
                    251
                ],
                "cls": [
                    323,
                    327,
                    296,
                    328,
                    330,
                    331,
                    211,
                    215
                ],
                "cls._from_sequence": [
                    215
                ],
                "strings": [
                    215
                ],
                "pa.string": [
                    224
                ],
                "pa": [
                    224,
                    228
                ],
                "self._ndarray.copy": [
                    226,
                    231
                ],
                "self.isna": [
                    232,
                    227
                ],
                "pa.array": [
                    228
                ],
                "mask": [
                    321,
                    232,
                    233,
                    299,
                    300,
                    314
                ],
                "value": [
                    257,
                    258,
                    259,
                    262,
                    266,
                    237,
                    238,
                    240,
                    244,
                    250,
                    251,
                    252,
                    254
                ],
                "value._ndarray": [
                    240
                ],
                "key": [
                    242,
                    243,
                    262
                ],
                "check_array_indexer": [
                    242
                ],
                "scalar_key": [
                    243,
                    245
                ],
                "lib.is_scalar": [
                    243,
                    244,
                    302
                ],
                "scalar_value": [
                    249,
                    244,
                    245
                ],
                "is_array_like": [
                    257
                ],
                "object": [
                    258
                ],
                "__setitem__": [
                    262
                ],
                "fillna": [
                    266
                ],
                "method": [
                    266,
                    323
                ],
                "limit": [
                    266
                ],
                "pandas_dtype": [
                    269
                ],
                "self.copy": [
                    272
                ],
                "astype": [
                    274,
                    282
                ],
                "TypeError": [
                    277
                ],
                "value_counts": [
                    282
                ],
                "dropna": [
                    282
                ],
                "op.__name__": [
                    312,
                    323,
                    291
                ],
                "op": [
                    320,
                    323,
                    291,
                    312,
                    315
                ],
                "ops.ARITHMETIC_BINOPS": [
                    312,
                    291
                ],
                "ops": [
                    312,
                    328,
                    331,
                    291
                ],
                "ops.COMPARISON_BINOPS": [
                    291
                ],
                "other": [
                    320,
                    293,
                    296,
                    297,
                    299,
                    302,
                    303,
                    306,
                    309,
                    310,
                    315
                ],
                "ABCIndexClass": [
                    293
                ],
                "ABCSeries": [
                    293
                ],
                "ABCDataFrame": [
                    293
                ],
                "NotImplemented": [
                    294
                ],
                "other._ndarray": [
                    297
                ],
                "valid": [
                    320,
                    315,
                    300,
                    310
                ],
                "np.empty_like": [
                    313
                ],
                "np.zeros": [
                    319
                ],
                "BooleanArray": [
                    321
                ],
                "compat.set_function_name": [
                    323
                ],
                "compat": [
                    323
                ],
                "cls.__add__": [
                    327
                ],
                "cls._create_arithmetic_method": [
                    328,
                    330,
                    331,
                    327
                ],
                "operator.add": [
                    327
                ],
                "operator": [
                    330,
                    327
                ],
                "cls.__radd__": [
                    328
                ],
                "ops.radd": [
                    328
                ],
                "cls.__mul__": [
                    330
                ],
                "operator.mul": [
                    330
                ],
                "cls.__rmul__": [
                    331
                ],
                "ops.rmul": [
                    331
                ],
                "_create_comparison_method": [
                    333
                ],
                "_create_arithmetic_method": [
                    333
                ],
                "StringArray._add_arithmetic_ops": [
                    336
                ],
                "StringArray._add_comparison_ops": [
                    337
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    21
                ],
                "ExtensionDtype": [
                    26
                ],
                "name": [
                    277,
                    54
                ],
                "na_value": [
                    57
                ],
                "libmissing.NA": [
                    57
                ],
                "libmissing": [
                    57
                ],
                "Type": [
                    64,
                    60
                ],
                "StringArray": [
                    97,
                    72,
                    336,
                    337,
                    316,
                    94
                ],
                "Union": [
                    78
                ],
                "array": [
                    89,
                    85,
                    86
                ],
                "pyarrow.Array": [
                    85
                ],
                "pyarrow": [
                    85
                ],
                "chunks": [
                    89,
                    92,
                    86
                ],
                "array.chunks": [
                    89
                ],
                "results": [
                    97,
                    91,
                    95
                ],
                "arr": [
                    231,
                    233,
                    234,
                    92,
                    94
                ],
                "str_arr": [
                    94,
                    95
                ],
                "StringArray._from_sequence": [
                    94
                ],
                "np.array": [
                    94
                ],
                "np": [
                    258,
                    197,
                    309,
                    313,
                    94,
                    319
                ],
                "results.append": [
                    95
                ],
                "StringArray._concat_same_type": [
                    97
                ],
                "register_extension_dtype": [
                    25
                ],
                "PandasArray": [
                    100
                ],
                "_typ": [
                    171
                ],
                "values": [
                    226,
                    227,
                    228,
                    174,
                    175,
                    177
                ],
                "extract_array": [
                    237,
                    174
                ],
                "skip_validation": [
                    179,
                    175
                ],
                "self": [
                    272,
                    273,
                    282,
                    299,
                    175,
                    303,
                    178,
                    306,
                    180,
                    184,
                    313,
                    186,
                    315,
                    189,
                    319,
                    320,
                    226,
                    227,
                    231,
                    232,
                    238,
                    242
                ],
                "__init__": [
                    177
                ],
                "copy": [
                    198,
                    271,
                    177,
                    274,
                    215
                ],
                "self._dtype": [
                    178
                ],
                "StringDtype": [
                    270,
                    209,
                    178,
                    314,
                    251
                ],
                "self._validate": [
                    180
                ],
                "self._ndarray": [
                    320,
                    226,
                    231,
                    282,
                    184,
                    313,
                    186,
                    315,
                    189,
                    319
                ],
                "lib.is_string_array": [
                    184,
                    259
                ],
                "lib": [
                    259,
                    302,
                    243,
                    244,
                    184
                ],
                "self._ndarray.dtype": [
                    186,
                    189
                ],
                "dtype": [
                    194,
                    195,
                    269,
                    270,
                    274,
                    215
                ],
                "result": [
                    320,
                    321,
                    197,
                    198,
                    199,
                    204,
                    206,
                    208,
                    209,
                    211,
                    313,
                    314,
                    315,
                    316,
                    319
                ],
                "np.asarray": [
                    258,
                    309,
                    197
                ],
                "scalars": [
                    206,
                    197,
                    198
                ],
                "result.copy": [
                    208,
                    199
                ],
                "na_values": [
                    209,
                    204,
                    205
                ],
                "isna": [
                    250,
                    299,
                    204
                ],
                "na_values.any": [
                    205
                ],
                "StringDtype.na_value": [
                    209,
                    314,
                    251
                ],
                "cls": [
                    323,
                    327,
                    296,
                    328,
                    330,
                    331,
                    211,
                    215
                ],
                "cls._from_sequence": [
                    215
                ],
                "strings": [
                    215
                ],
                "pa.string": [
                    224
                ],
                "pa": [
                    224,
                    228
                ],
                "self._ndarray.copy": [
                    226,
                    231
                ],
                "self.isna": [
                    232,
                    227
                ],
                "pa.array": [
                    228
                ],
                "mask": [
                    321,
                    232,
                    233,
                    299,
                    300,
                    314
                ],
                "value": [
                    257,
                    258,
                    259,
                    262,
                    266,
                    237,
                    238,
                    240,
                    244,
                    250,
                    251,
                    252,
                    254
                ],
                "value._ndarray": [
                    240
                ],
                "key": [
                    242,
                    243,
                    262
                ],
                "check_array_indexer": [
                    242
                ],
                "scalar_key": [
                    243,
                    245
                ],
                "lib.is_scalar": [
                    243,
                    244,
                    302
                ],
                "scalar_value": [
                    249,
                    244,
                    245
                ],
                "is_array_like": [
                    257
                ],
                "__setitem__": [
                    262
                ],
                "fillna": [
                    266
                ],
                "method": [
                    266,
                    323
                ],
                "limit": [
                    266
                ],
                "pandas_dtype": [
                    269
                ],
                "self.copy": [
                    272
                ],
                "astype": [
                    274,
                    282
                ],
                "value_counts": [
                    282
                ],
                "dropna": [
                    282
                ],
                "op.__name__": [
                    312,
                    323,
                    291
                ],
                "op": [
                    320,
                    323,
                    291,
                    312,
                    315
                ],
                "ops.ARITHMETIC_BINOPS": [
                    312,
                    291
                ],
                "ops": [
                    312,
                    328,
                    331,
                    291
                ],
                "ops.COMPARISON_BINOPS": [
                    291
                ],
                "other": [
                    320,
                    293,
                    296,
                    297,
                    299,
                    302,
                    303,
                    306,
                    309,
                    310,
                    315
                ],
                "ABCIndexClass": [
                    293
                ],
                "ABCSeries": [
                    293
                ],
                "ABCDataFrame": [
                    293
                ],
                "other._ndarray": [
                    297
                ],
                "valid": [
                    320,
                    315,
                    300,
                    310
                ],
                "np.empty_like": [
                    313
                ],
                "np.zeros": [
                    319
                ],
                "BooleanArray": [
                    321
                ],
                "compat.set_function_name": [
                    323
                ],
                "compat": [
                    323
                ],
                "cls.__add__": [
                    327
                ],
                "cls._create_arithmetic_method": [
                    328,
                    330,
                    331,
                    327
                ],
                "operator.add": [
                    327
                ],
                "operator": [
                    330,
                    327
                ],
                "cls.__radd__": [
                    328
                ],
                "ops.radd": [
                    328
                ],
                "cls.__mul__": [
                    330
                ],
                "operator.mul": [
                    330
                ],
                "cls.__rmul__": [
                    331
                ],
                "ops.rmul": [
                    331
                ],
                "_create_comparison_method": [
                    333
                ],
                "_create_arithmetic_method": [
                    333
                ],
                "StringArray._add_arithmetic_ops": [
                    336
                ],
                "StringArray._add_comparison_ops": [
                    337
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_37/pandas/tests/arrays/string_/test_string.py",
                "test_function": "test_astype_int",
                "test_function_code": "def test_astype_int():\n    arr = pd.array([\"1\", pd.NA, \"3\"], dtype=\"string\")\n\n    result = arr.astype(\"Int64\")\n    expected = pd.array([1, pd.NA, 3], dtype=\"Int64\")\n    tm.assert_extension_array_equal(result, expected)",
                "test_error": "TypeError: data type not understood",
                "full_test_error": "def test_astype_int():\n        arr = pd.array([\"1\", pd.NA, \"3\"], dtype=\"string\")\n    \n>       result = arr.astype(\"Int64\")\n\npandas/tests/arrays/string_/test_string.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/arrays/string_.py:274: in astype\n    return super().astype(dtype, copy)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string\ndtype = Int64Dtype(), copy = True\n\n    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to a NumPy array with 'dtype'.\n    \n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n    \n        Returns\n        -------\n        array : ndarray\n            NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n>       return np.array(self, dtype=dtype, copy=copy)\nE       TypeError: data type not understood\n\npandas/core/arrays/base.py:434: TypeError",
                "traceback": "pandas/core/arrays/string_.py:274: in astype\n    return super().astype(dtype, copy)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <StringArray>\n['1', <NA>, '3']\nLength: 3, dtype: string\ndtype = Int64Dtype(), copy = True\n\n    def astype(self, dtype, copy=True):\n        \"\"\"\n        Cast to a NumPy array with 'dtype'.\n    \n        Parameters\n        ----------\n        dtype : str or dtype\n            Typecode or data-type to which the array is cast.\n        copy : bool, default True\n            Whether to copy the data, even if not necessary. If False,\n            a copy is made only if the old dtype does not match the\n            new dtype.\n    \n        Returns\n        -------\n        array : ndarray\n            NumPy ndarray with 'dtype' for its dtype.\n        \"\"\"\n>       return np.array(self, dtype=dtype, copy=copy)\nE       TypeError: data type not understood\n\npandas/core/arrays/base.py:434: TypeError",
                "test_function_decorators": []
            }
        ]
    }
}