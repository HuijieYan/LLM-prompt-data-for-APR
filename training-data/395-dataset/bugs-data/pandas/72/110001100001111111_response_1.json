{
    "pandas": [
        {
            "bugID": 72,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 0,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 808,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def setitem(self, indexer, value):\n\n    \"\"\"\n    Set the value inplace, returning a a maybe different typed block.\n    \n    Parameters:\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n    \n    Returns\n    -------\n    Block\n    \"\"\"\n    transpose = self.ndim == 2\n    \n    # coerce None values, if appropriate\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n    \n    # convert value to Categorical type if needed\n    if pd.api.types.is_categorical_dtype(value):\n        value = pd.Categorical(value)\n    \n    # cast the values to a type that can hold nan (if necessary)\n    if not self._can_hold_element(value):\n        dtype, _ = maybe_promote(value)\n        self.values = self.values.astype(dtype)\n    \n    if transpose:\n        self.values = self.values.T\n    \n    # length checking\n    check_setitem_lengths(indexer, value, self.values)\n    \n    if not is_empty_indexer(indexer, value):\n        if is_scalar_indexer(indexer, value):\n            # setting a single element for each dim and with a rhs that could\n            # be e.g. a list\n            self.values[indexer] = value\n        else:\n            self.values[indexer] = value\n    \n    if transpose:\n        self.values = self.values.T\n    \n    block = self.make_block(self.values)\n    return block"
        }
    ]
}