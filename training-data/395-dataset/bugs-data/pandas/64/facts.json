{
    "1.1.1": "def __init__(\n    self,\n    df,\n    na_rep: str = \"\",\n    float_format: Optional[str] = None,\n    cols: Optional[Sequence[Label]] = None,\n    header: Union[Sequence[Label], bool] = True,\n    index: bool = True,\n    index_label: Optional[Union[Label, Sequence[Label]]] = None,\n    merge_cells: bool = False,\n    inf_rep: str = \"inf\",\n    style_converter: Optional[Callable] = None,\n):\n    self.rowcounter = 0\n    self.na_rep = na_rep\n    if hasattr(df, \"render\"):\n        self.styler = df\n        df = df.data\n        if style_converter is None:\n            style_converter = CSSToExcelConverter()\n        self.style_converter = style_converter\n    else:\n        self.styler = None\n    self.df = df\n    if cols is not None:\n\n        # all missing, raise\n        if not len(Index(cols) & df.columns):\n            raise KeyError(\"passes columns are not ALL present dataframe\")\n\n        if len(Index(cols) & df.columns) != len(cols):\n            # Deprecated in GH#17295, enforced in 1.0.0\n            raise KeyError(\"Not all names specified in 'columns' are found\")\n\n        self.df = df\n\n    self.columns = self.df.columns\n    self.float_format = float_format\n    self.index = index\n    self.index_label = index_label\n    self.header = header\n    self.merge_cells = merge_cells\n    self.inf_rep = inf_rep\n",
    "1.1.2": null,
    "1.2.1": "class ExcelFormatter()",
    "1.2.2": "Class for formatting a DataFrame to a list of ExcelCells,\n\nParameters\n----------\ndf : DataFrame or Styler\nna_rep: na representation\nfloat_format : string, default None\n        Format string for floating point numbers\ncols : sequence, optional\n    Columns to write\nheader : boolean or list of string, default True\n    Write out column names. If a list of string is given it is\n    assumed to be aliases for the column names\nindex : boolean, default True\n    output row names (index)\nindex_label : string or sequence, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the DataFrame uses MultiIndex.\nmerge_cells : boolean, default False\n        Format MultiIndex and Hierarchical Rows as merged cells.\ninf_rep : string, default `'inf'`\n    representation for np.inf values (which aren't representable in Excel)\n    A `'-'` sign will be added in front of -inf.\nstyle_converter : callable, optional\n    This translates Styler styles (CSS) into ExcelWriter styles.\n    Defaults to ``CSSToExcelConverter()``.\n    It should have signature css_declarations string -> excel style.\n    This is only called for body cells.",
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/io/formats/excel.py",
    "1.3.2": null,
    "1.4.1": [
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)",
        "    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n\n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n\n        tm.assert_frame_equal(expected, read_frame)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_64/pandas/tests/io/excel/test_writers.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ],
        [
            "E       AssertionError: DataFrame are different\nE       \nE       DataFrame shape mismatch\nE       [left]:  (3, 2)\nE       [right]: (3, 3)"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11cc6ed60>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpetbx2q4u.xlsx'\nto_excel_index = True, read_excel_index_col = 0\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d781250>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpgt1ch8tp.xlsm'\nto_excel_index = True, read_excel_index_col = 0\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d7567c0>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp1j04gwxu.xls'\nto_excel_index = True, read_excel_index_col = 0\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d756580>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp43y5b66d.xlsx'\nto_excel_index = True, read_excel_index_col = 0\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d6d11f0>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpva53bo6y.xlsx'\nto_excel_index = False, read_excel_index_col = None\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d96a490>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmp8u7sisp5.xlsm'\nto_excel_index = False, read_excel_index_col = None\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d96a070>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmpbg58q3aa.xls'\nto_excel_index = False, read_excel_index_col = None\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ],
        [
            "self = <pandas.tests.io.excel.test_writers.TestExcelWriter object at 0x11d72c0a0>\npath = '/var/folders/ng/72llsm517x12c2p18htksyjc0000gn/T/tmptjuil76r.xlsx'\nto_excel_index = False, read_excel_index_col = None\n\n    @pytest.mark.parametrize(\n        \"to_excel_index,read_excel_index_col\",\n        [\n            (True, 0),  # Include index in write to file\n            (False, None),  # Dont include index in write to file\n        ],\n    )\n    def test_write_subset_columns(self, path, to_excel_index, read_excel_index_col):\n        # GH 31677\n        write_frame = DataFrame({\"A\": [1, 1, 1], \"B\": [2, 2, 2], \"C\": [3, 3, 3]})\n        write_frame.to_excel(\n            path, \"col_subset_bug\", columns=[\"A\", \"B\"], index=to_excel_index\n        )\n    \n        expected = write_frame[[\"A\", \"B\"]]\n        read_frame = pd.read_excel(\n            path, \"col_subset_bug\", index_col=read_excel_index_col\n        )\n    \n>       tm.assert_frame_equal(expected, read_frame)",
            "\npandas/tests/io/excel/test_writers.py:1070: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x119939190>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x119d9c760>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1199d5f10>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1199d8b80>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x119da4ee0>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x119912e50>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x119ab77f0>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x119af4be0>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "self.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x118493460>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1188d9700>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1184c8370>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1188c8820>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "True",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "True",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1184ea6d0>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1184ec850>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1184c2340>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ],
        [
            {
                "self": "<pandas.io.formats.excel.ExcelFormatter object at 0x1184ead90>",
                "na_rep": "''",
                "df": "   A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3",
                "cols": "['A', 'B']",
                "df.columns": "Index(['A', 'B', 'C'], dtype='object')",
                "df.reindex": "<bound method DataFrame.reindex of    A  B  C\n0  1  2  3\n1  1  2  3\n2  1  2  3>",
                "index": "False",
                "header": "True",
                "merge_cells": "True",
                "inf_rep": "'inf'"
            },
            {
                "self.rowcounter": "0",
                "self.na_rep": "''",
                "self.df": "   A  B\n0  1  2\n1  1  2\n2  1  2",
                "self.columns": "Index(['A', 'B'], dtype='object')",
                "self.index": "False",
                "self.header": "True",
                "self.merge_cells": "True",
                "self.inf_rep": "'inf'"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ],
        [
            {
                "self": "ExcelFormatter",
                "na_rep": "str",
                "df": "DataFrame",
                "cols": "list",
                "df.columns": "Index",
                "df.reindex": "method",
                "index": "bool",
                "header": "bool",
                "merge_cells": "bool",
                "inf_rep": "str"
            },
            {
                "self.rowcounter": "int",
                "self.na_rep": "str",
                "self.df": "DataFrame",
                "self.columns": "Index",
                "self.index": "bool",
                "self.header": "bool",
                "self.merge_cells": "bool",
                "self.inf_rep": "str"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}