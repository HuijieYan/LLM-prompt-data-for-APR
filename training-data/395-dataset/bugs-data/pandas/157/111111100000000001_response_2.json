{
    "pandas": [
        {
            "bugID": 157,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 0,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 1591,
            "file_name": "pandas/core/reshape/merge.py",
            "replace_code": "def _get_merge_keys(self):\n\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                msg = (\n                    \"Incompatible merge keys at index {i}. Both sides are categories, but they are not equal.\".format(\n                        i=i\n                    )\n                )\n            else:\n                msg = (\n                    \"Incompatible merge keys at index {i}. They must be the same type.\".format(\n                        i=i\n                    )\n                )\n            raise MergeError(msg)\n    \n    # validate tolerance\n    if self.tolerance is not None:\n        if not isinstance(self.tolerance, (Timedelta, type(None))):\n            raise MergeError(\"Tolerance must be compatible with type Timedelta or None.\")\n        if isinstance(left_join_keys[-1].dtype, DatetimeTZDtype):\n            if self.tolerance and self.tolerance < Timedelta(0):\n                raise MergeError(\"Tolerance must be positive\")\n        elif isinstance(left_join_keys[-1].dtype, np.datetime64):\n            if self.tolerance and self.tolerance < Timedelta(0):\n                raise MergeError(\"Tolerance must be positive\")\n        elif isinstance(left_join_keys[-1].dtype, np.integer):\n            if self.tolerance and self.tolerance < 0:\n                raise MergeError(\"Tolerance must be positive\")\n        elif isinstance(left_join_keys[-1].dtype, np.floating):\n            if self.tolerance and self.tolerance < 0:\n                raise MergeError(\"Tolerance must be positive\")\n        else:\n            raise MergeError(\"Key must be integer, timestamp or float\")\n    \n    # validate allow_exact_matches\n    if not isinstance(self.allow_exact_matches, bool):\n        raise MergeError(\"allow_exact_matches must be a boolean value\")\n    \n    return left_join_keys, right_join_keys, join_names"
        }
    ]
}