{
    "1.1.1": "def _get_merge_keys(self):\n\n    # note this function has side effects\n    (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n\n    # validate index types are the same\n    for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n        if not is_dtype_equal(lk.dtype, rk.dtype):\n            if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                # The generic error message is confusing for categoricals.\n                #\n                # In this function, the join keys include both the original\n                # ones of the merge_asof() call, and also the keys passed\n                # to its by= argument. Unordered but equal categories\n                # are not supported for the former, but will fail\n                # later with a ValueError, so we don't *need* to check\n                # for them here.\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, both sides category, but not equal ones\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            else:\n                msg = (\n                    \"incompatible merge keys [{i}] {lkdtype} and \"\n                    \"{rkdtype}, must be the same type\".format(\n                        i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                    )\n                )\n            raise MergeError(msg)\n\n    # validate tolerance; must be a Timedelta if we have a DTI\n    if self.tolerance is not None:\n\n        if self.left_index:\n            lt = self.left.index\n        else:\n            lt = left_join_keys[-1]\n\n        msg = (\n            \"incompatible tolerance {tolerance}, must be compat \"\n            \"with type {lkdtype}\".format(\n                tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n            )\n        )\n\n        if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n            if not isinstance(self.tolerance, Timedelta):\n                raise MergeError(msg)\n            if self.tolerance < Timedelta(0):\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_int64_dtype(lt):\n            if not is_integer(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        elif is_float_dtype(lt):\n            if not is_number(self.tolerance):\n                raise MergeError(msg)\n            if self.tolerance < 0:\n                raise MergeError(\"tolerance must be positive\")\n\n        else:\n            raise MergeError(\"key must be integer, timestamp or float\")\n\n    # validate allow_exact_matches\n    if not is_bool(self.allow_exact_matches):\n        msg = \"allow_exact_matches must be boolean, passed {passed}\"\n        raise MergeError(msg.format(passed=self.allow_exact_matches))\n\n    return left_join_keys, right_join_keys, join_names\n",
    "1.1.2": null,
    "1.2.1": "class _AsOfMerge(_OrderedMerge)",
    "1.2.2": null,
    "1.2.3": [
        "_get_merge_keys(self)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_157/pandas/core/reshape/merge.py",
    "1.3.2": [
        "_get_merge_keys(self)",
        "_get_merge_keys(self)"
    ],
    "1.4.1": [
        "    def test_timedelta_tolerance_nearest(self):\n        # GH 27642\n\n        left = pd.DataFrame(\n            list(zip([0, 5, 10, 15, 20, 25], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"left\"],\n        )\n\n        left[\"time\"] = pd.to_timedelta(left[\"time\"], \"ms\")\n\n        right = pd.DataFrame(\n            list(zip([0, 3, 9, 12, 15, 18], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"right\"],\n        )\n\n        right[\"time\"] = pd.to_timedelta(right[\"time\"], \"ms\")\n\n        expected = pd.DataFrame(\n            list(\n                zip(\n                    [0, 5, 10, 15, 20, 25],\n                    [0, 1, 2, 3, 4, 5],\n                    [0, np.nan, 2, 4, np.nan, np.nan],\n                )\n            ),\n            columns=[\"time\", \"left\", \"right\"],\n        )\n\n        expected[\"time\"] = pd.to_timedelta(expected[\"time\"], \"ms\")\n\n        result = pd.merge_asof(\n            left, right, on=\"time\", tolerance=Timedelta(\"1ms\"), direction=\"nearest\"\n        )\n\n        assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_157/pandas/tests/reshape/merge/test_merge_asof.py"
    ],
    "2.1.1": [
        [
            "E               pandas.errors.MergeError: key must be integer, timestamp or float"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.reshape.merge.test_merge_asof.TestAsOfMerge object at 0x11e05c160>\n\n    def test_timedelta_tolerance_nearest(self):\n        # GH 27642\n    \n        left = pd.DataFrame(\n            list(zip([0, 5, 10, 15, 20, 25], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"left\"],\n        )\n    \n        left[\"time\"] = pd.to_timedelta(left[\"time\"], \"ms\")\n    \n        right = pd.DataFrame(\n            list(zip([0, 3, 9, 12, 15, 18], [0, 1, 2, 3, 4, 5])),\n            columns=[\"time\", \"right\"],\n        )\n    \n        right[\"time\"] = pd.to_timedelta(right[\"time\"], \"ms\")\n    \n        expected = pd.DataFrame(\n            list(\n                zip(\n                    [0, 5, 10, 15, 20, 25],\n                    [0, 1, 2, 3, 4, 5],\n                    [0, np.nan, 2, 4, np.nan, np.nan],\n                )\n            ),\n            columns=[\"time\", \"left\", \"right\"],\n        )\n    \n        expected[\"time\"] = pd.to_timedelta(expected[\"time\"], \"ms\")\n    \n>       result = pd.merge_asof(\n            left, right, on=\"time\", tolerance=Timedelta(\"1ms\"), direction=\"nearest\"\n        )\n\npandas/tests/reshape/merge/test_merge_asof.py:1291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/reshape/merge.py:509: in merge_asof\n    op = _AsOfMerge(\npandas/core/reshape/merge.py:1525: in __init__\n    _OrderedMerge.__init__(\npandas/core/reshape/merge.py:1415: in __init__\n    _MergeOperation.__init__(\npandas/core/reshape/merge.py:611: in __init__\n    ) = self._get_merge_keys()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.reshape.merge._AsOfMerge object at 0x11e3c80a0>\n\n    def _get_merge_keys(self):\n    \n        # note this function has side effects\n        (left_join_keys, right_join_keys, join_names) = super()._get_merge_keys()\n    \n        # validate index types are the same\n        for i, (lk, rk) in enumerate(zip(left_join_keys, right_join_keys)):\n            if not is_dtype_equal(lk.dtype, rk.dtype):\n                if is_categorical_dtype(lk.dtype) and is_categorical_dtype(rk.dtype):\n                    # The generic error message is confusing for categoricals.\n                    #\n                    # In this function, the join keys include both the original\n                    # ones of the merge_asof() call, and also the keys passed\n                    # to its by= argument. Unordered but equal categories\n                    # are not supported for the former, but will fail\n                    # later with a ValueError, so we don't *need* to check\n                    # for them here.\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, both sides category, but not equal ones\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                else:\n                    msg = (\n                        \"incompatible merge keys [{i}] {lkdtype} and \"\n                        \"{rkdtype}, must be the same type\".format(\n                            i=i, lkdtype=repr(lk.dtype), rkdtype=repr(rk.dtype)\n                        )\n                    )\n                raise MergeError(msg)\n    \n        # validate tolerance; must be a Timedelta if we have a DTI\n        if self.tolerance is not None:\n    \n            if self.left_index:\n                lt = self.left.index\n            else:\n                lt = left_join_keys[-1]\n    \n            msg = (\n                \"incompatible tolerance {tolerance}, must be compat \"\n                \"with type {lkdtype}\".format(\n                    tolerance=type(self.tolerance), lkdtype=repr(lt.dtype)\n                )\n            )\n    \n            if is_datetime64_dtype(lt) or is_datetime64tz_dtype(lt):\n                if not isinstance(self.tolerance, Timedelta):\n                    raise MergeError(msg)\n                if self.tolerance < Timedelta(0):\n                    raise MergeError(\"tolerance must be positive\")\n    \n            elif is_int64_dtype(lt):\n                if not is_integer(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n    \n            elif is_float_dtype(lt):\n                if not is_number(self.tolerance):\n                    raise MergeError(msg)\n                if self.tolerance < 0:\n                    raise MergeError(\"tolerance must be positive\")\n    \n            else:\n>               raise MergeError(\"key must be integer, timestamp or float\")",
            "\npandas/core/reshape/merge.py:1657: MergeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "self.tolerance": "Timedelta('0 days 00:00:00.001000')",
                "self": "<pandas.core.reshape.merge._AsOfMerge object at 0x1204553a0>",
                "self.left_index": "False",
                "self.left": "             time  left\n0        00:00:00     0\n1 00:00:00.005000     1\n2 00:00:00.010000     2\n3 00:00:00.015000     3\n4 00:00:00.020000     4\n5 00:00:00.025000     5",
                "self.allow_exact_matches": "True"
            },
            {
                "left_join_keys": "[array([       0,  5000000, 10000000, 15000000, 20000000, 25000000],\n      dtype='timedelta64[ns]')]",
                "right_join_keys": "[array([       0,  3000000,  9000000, 12000000, 15000000, 18000000],\n      dtype='timedelta64[ns]')]",
                "join_names": "['time']",
                "i": "0",
                "lk": "array([       0,  5000000, 10000000, 15000000, 20000000, 25000000],\n      dtype='timedelta64[ns]')",
                "rk": "array([       0,  3000000,  9000000, 12000000, 15000000, 18000000],\n      dtype='timedelta64[ns]')",
                "lk.dtype": "dtype('<m8[ns]')",
                "rk.dtype": "dtype('<m8[ns]')",
                "msg": "\"incompatible tolerance <class 'pandas._libs.tslibs.timedeltas.Timedelta'>, must be compat with type dtype('<m8[ns]')\"",
                "lt": "array([       0,  5000000, 10000000, 15000000, 20000000, 25000000],\n      dtype='timedelta64[ns]')",
                "lt.dtype": "dtype('<m8[ns]')"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.tolerance": "Timedelta",
                "self": "_AsOfMerge",
                "self.left_index": "bool",
                "self.left": "DataFrame",
                "self.allow_exact_matches": "bool"
            },
            {
                "left_join_keys": "list",
                "right_join_keys": "list",
                "join_names": "list",
                "i": "int",
                "lk": "ndarray",
                "rk": "ndarray",
                "lk.dtype": "dtype",
                "rk.dtype": "dtype",
                "msg": "str",
                "lt": "ndarray",
                "lt.dtype": "dtype"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}