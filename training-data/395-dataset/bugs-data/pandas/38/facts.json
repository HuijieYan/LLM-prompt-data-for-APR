{
    "1.1.1": "def _unstack_multiple(data, clocs, fill_value=None):\n    if len(clocs) == 0:\n        return data\n\n    # NOTE: This doesn't deal with hierarchical columns yet\n\n    index = data.index\n\n    # GH 19966 Make sure if MultiIndexed index has tuple name, they will be\n    # recognised as a whole\n    if clocs in index.names:\n        clocs = [clocs]\n    clocs = [index._get_level_number(i) for i in clocs]\n\n    rlocs = [i for i in range(index.nlevels) if i not in clocs]\n\n    clevels = [index.levels[i] for i in clocs]\n    ccodes = [index.codes[i] for i in clocs]\n    cnames = [index.names[i] for i in clocs]\n    rlevels = [index.levels[i] for i in rlocs]\n    rcodes = [index.codes[i] for i in rlocs]\n    rnames = [index.names[i] for i in rlocs]\n\n    shape = [len(x) for x in clevels]\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n\n    if rlocs == []:\n        # Everything is in clocs, so the dummy df has a regular index\n        dummy_index = Index(obs_ids, name=\"__placeholder__\")\n    else:\n        dummy_index = MultiIndex(\n            levels=rlevels + [obs_ids],\n            codes=rcodes + [comp_ids],\n            names=rnames + [\"__placeholder__\"],\n            verify_integrity=False,\n        )\n\n    if isinstance(data, Series):\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        new_levels = clevels\n        new_names = cnames\n        new_codes = recons_codes\n    else:\n        if isinstance(data.columns, MultiIndex):\n            result = data\n            for i in range(len(clocs)):\n                val = clocs[i]\n                result = result.unstack(val, fill_value=fill_value)\n                clocs = [v if i > v else v - 1 for v in clocs]\n\n            return result\n\n        dummy = data.copy()\n        dummy.index = dummy_index\n\n        unstacked = dummy.unstack(\"__placeholder__\", fill_value=fill_value)\n        if isinstance(unstacked, Series):\n            unstcols = unstacked.index\n        else:\n            unstcols = unstacked.columns\n        assert isinstance(unstcols, MultiIndex)  # for mypy\n        new_levels = [unstcols.levels[0]] + clevels\n        new_names = [data.columns.name] + cnames\n\n        new_codes = [unstcols.codes[0]]\n        for rec in recons_codes:\n            new_codes.append(rec.take(unstcols.codes[-1]))\n\n    new_columns = MultiIndex(\n        levels=new_levels, codes=new_codes, names=new_names, verify_integrity=False\n    )\n\n    if isinstance(unstacked, Series):\n        unstacked.index = new_columns\n    else:\n        unstacked.columns = new_columns\n\n    return unstacked\n",
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_38/pandas/core/reshape/reshape.py",
    "1.3.2": [
        "unstack(obj, level, fill_value=None)"
    ],
    "1.4.1": [
        "    def test_unstack_long_index(self):\n        # PH 32624: Error when using a lot of indices to unstack.\n        # The error occurred only, if a lot of indices are used.\n        df = pd.DataFrame(\n            [[1]],\n            columns=pd.MultiIndex.from_tuples([[0]], names=[\"c1\"]),\n            index=pd.MultiIndex.from_tuples(\n                [[0, 0, 1, 0, 0, 0, 1]],\n                names=[\"i1\", \"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"],\n            ),\n        )\n        result = df.unstack([\"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"])\n        expected = pd.DataFrame(\n            [[1]],\n            columns=pd.MultiIndex.from_tuples(\n                [[0, 0, 1, 0, 0, 0, 1]],\n                names=[\"c1\", \"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"],\n            ),\n            index=pd.Index([0], name=\"i1\"),\n        )\n        tm.assert_frame_equal(result, expected)",
        "    def test_unstack_multi_level_cols(self):\n        # PH 24729: Unstack a df with multi level columns\n        df = pd.DataFrame(\n            [[0.0, 0.0], [0.0, 0.0]],\n            columns=pd.MultiIndex.from_tuples(\n                [[\"B\", \"C\"], [\"B\", \"D\"]], names=[\"c1\", \"c2\"]\n            ),\n            index=pd.MultiIndex.from_tuples(\n                [[10, 20, 30], [10, 20, 40]], names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n        assert df.unstack([\"i2\", \"i1\"]).columns.names[-2:] == [\"i2\", \"i1\"]",
        "    def test_unstack_multi_level_rows_and_cols(self):\n        # PH 28306: Unstack df with multi level cols and rows\n        df = pd.DataFrame(\n            [[1, 2], [3, 4], [-1, -2], [-3, -4]],\n            columns=pd.MultiIndex.from_tuples([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]]),\n            index=pd.MultiIndex.from_tuples(\n                [\n                    [\"m1\", \"P3\", 222],\n                    [\"m1\", \"A5\", 111],\n                    [\"m2\", \"P3\", 222],\n                    [\"m2\", \"A5\", 111],\n                ],\n                names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n        result = df.unstack([\"i3\", \"i2\"])\n        expected = df.unstack([\"i3\"]).unstack([\"i2\"])\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_38/pandas/tests/frame/test_reshape.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_38/pandas/tests/frame/test_reshape.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_38/pandas/tests/frame/test_reshape.py"
    ],
    "2.1.1": [
        [
            "E           ValueError: 2 is not in list",
            "E               IndexError: Too many levels: Index has only 2 levels, not 3"
        ],
        [
            "E       AssertionError: assert FrozenList(['i2', 'i3']) == ['i2', 'i1']\nE         At index 1 diff: 'i3' != 'i1'\nE         Full diff:\nE         - ['i2', 'i1']\nE         + FrozenList(['i2', 'i3'])"
        ],
        [
            "E   AssertionError: DataFrame.index are different\nE   \nE   DataFrame.index values are different (100.0 %)\nE   [left]:  Index(['A5', 'P3'], dtype='object', name='i2')\nE   [right]: Index(['m1', 'm2'], dtype='object', name='i1')"
        ]
    ],
    "2.1.2": [
        [
            "self = MultiIndex([(0, 0)],\n           names=['i1', 'i6']), level = 2\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n>           level = self.names.index(level)",
            "\npandas/core/indexes/multi.py:1402: ValueError\n\nThe above exception was the direct cause of the following exception:\n\nself = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x11d1c8190>\n\n    def test_unstack_long_index(self):\n        # PH 32624: Error when using a lot of indices to unstack.\n        # The error occurred only, if a lot of indices are used.\n        df = pd.DataFrame(\n            [[1]],\n            columns=pd.MultiIndex.from_tuples([[0]], names=[\"c1\"]),\n            index=pd.MultiIndex.from_tuples(\n                [[0, 0, 1, 0, 0, 0, 1]],\n                names=[\"i1\", \"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"],\n            ),\n        )\n>       result = df.unstack([\"i2\", \"i3\", \"i4\", \"i5\", \"i6\", \"i7\"])\n\npandas/tests/frame/test_reshape.py:779: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/frame.py:6452: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:403: in unstack\n    return _unstack_multiple(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:365: in _unstack_multiple\n    result = result.unstack(val, fill_value=fill_value)\npandas/core/frame.py:6452: in unstack\n    return unstack(self, level, fill_value)\npandas/core/reshape/reshape.py:413: in unstack\n    return _unstack_frame(obj, level, fill_value=fill_value)\npandas/core/reshape/reshape.py:437: in _unstack_frame\n    return _Unstacker(\npandas/core/reshape/reshape.py:115: in __init__\n    self.level = self.index._get_level_number(level)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = MultiIndex([(0, 0)],\n           names=['i1', 'i6']), level = 2\n\n    def _get_level_number(self, level) -> int:\n        count = self.names.count(level)\n        if (count > 1) and not is_integer(level):\n            raise ValueError(\n                f\"The name {level} occurs multiple times, use a level number\"\n            )\n        try:\n            level = self.names.index(level)\n        except ValueError as err:\n            if not is_integer(level):\n                raise KeyError(f\"Level {level} not found\") from err\n            elif level < 0:\n                level += self.nlevels\n                if level < 0:\n                    orig_level = level - self.nlevels\n                    raise IndexError(\n                        f\"Too many levels: Index has only {self.nlevels} levels, \"\n                        f\"{orig_level} is not a valid level number\"\n                    ) from err\n            # Note: levels are zero-based\n            elif level >= self.nlevels:\n>               raise IndexError(\n                    f\"Too many levels: Index has only {self.nlevels} levels, \"\n                    f\"not {level + 1}\"\n                ) from err",
            "\npandas/core/indexes/multi.py:1416: IndexError"
        ],
        [
            "self = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x11dc992b0>\n\n    def test_unstack_multi_level_cols(self):\n        # PH 24729: Unstack a df with multi level columns\n        df = pd.DataFrame(\n            [[0.0, 0.0], [0.0, 0.0]],\n            columns=pd.MultiIndex.from_tuples(\n                [[\"B\", \"C\"], [\"B\", \"D\"]], names=[\"c1\", \"c2\"]\n            ),\n            index=pd.MultiIndex.from_tuples(\n                [[10, 20, 30], [10, 20, 40]], names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n>       assert df.unstack([\"i2\", \"i1\"]).columns.names[-2:] == [\"i2\", \"i1\"]",
            "\npandas/tests/frame/test_reshape.py:801: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_reshape.TestDataFrameReshape object at 0x11d351700>\n\n    def test_unstack_multi_level_rows_and_cols(self):\n        # PH 28306: Unstack df with multi level cols and rows\n        df = pd.DataFrame(\n            [[1, 2], [3, 4], [-1, -2], [-3, -4]],\n            columns=pd.MultiIndex.from_tuples([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]]),\n            index=pd.MultiIndex.from_tuples(\n                [\n                    [\"m1\", \"P3\", 222],\n                    [\"m1\", \"A5\", 111],\n                    [\"m2\", \"P3\", 222],\n                    [\"m2\", \"A5\", 111],\n                ],\n                names=[\"i1\", \"i2\", \"i3\"],\n            ),\n        )\n        result = df.unstack([\"i3\", \"i2\"])\n        expected = df.unstack([\"i3\"]).unstack([\"i2\"])\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/test_reshape.py:820: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj, index_values=index_values)",
            "\npandas/_libs/testing.pyx:180: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}