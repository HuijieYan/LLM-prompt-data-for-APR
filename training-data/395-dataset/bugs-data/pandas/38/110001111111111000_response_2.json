{
    "pandas": [
        {
            "bugID": 38,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 312,
            "file_name": "pandas/core/reshape/reshape.py",
            "replace_code": "def _unstack_multiple(data, clocs, fill_value=None):\n\n    if len(clocs) == 0:\n        return data\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n    \n    index = data.index\n    \n    # NOTE: This doesn't deal with hierarchical columns yet\n    \n    index = data.index\n    \n    # Keep the count of the levels\n    count_levels = len(clocs)\n    \n    # Converting each clocs into a a list of level index number of Index\n    level_index = []\n    for level in clocs:\n        level_index.append(index._get_level_number(level))\n    \n    # Keep the indices numbers of other levels\n    other_index = [i for i in range(index.nlevels) if i not in level_index]\n    \n    clevels = [index.levels[i] for i in level_index]\n    ccodes = [index.codes[i] for i in level_index]\n    cnames = [index.names[i] for i in level_index]\n    rlevels = [index.levels[i] for i in other_index]\n    rcodes = [index.codes[i] for i in other_index]\n    rnames = [index.names[i] for i in other_index]\n    \n    shape = [len(x) for x in clevels]\n    \n    # group_index = get_level_group_index(level_index, shape, xnull=False)\n    \n    # compress group indices\n    group_index = get_group_index(ccodes, shape, sort=False, xnull=False)\n    \n    # compress group indices to unique id codes\n    comp_ids, obs_ids = compress_group_index(group_index, sort=False)\n    \n    # decompress the unique id codes\n    recons_codes = decons_obs_group_ids(comp_ids, obs_ids, shape, ccodes, xnull=False)\n    \n    # Generate a placeholder MultiIndex object\n    dummy_index = MultiIndex(\n        levels=rlevels + [obs_ids],\n        codes=rcodes + [comp_ids],\n        names=rnames + [\"__placeholder__\"],\n        verify_integrity=False,\n    )\n    \n    # Generate multiIndex object and return the internalized representation of a DataFrame\n    return data.copy().unstack(\"__placeholder__\", fill_value=fill_value).reindex(\n            columns=MultiIndex(levels=clevels + [],\n                    codes= recons_codes + [[]]\n            )\n        )"
        }
    ]
}