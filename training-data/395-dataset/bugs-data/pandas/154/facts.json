{
    "1.1.1": "def _get_cythonized_result(\n    self,\n    how,\n    grouper,\n    aggregate=False,\n    cython_dtype=None,\n    needs_values=False,\n    needs_mask=False,\n    needs_ngroups=False,\n    result_is_index=False,\n    pre_processing=None,\n    post_processing=None,\n    **kwargs\n):\n    \n    if result_is_index and aggregate:\n        raise ValueError(\"'result_is_index' and 'aggregate' cannot both be True!\")\n    if post_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'post_processing' must be a callable!\")\n    if pre_processing:\n        if not callable(pre_processing):\n            raise ValueError(\"'pre_processing' must be a callable!\")\n        if not needs_values:\n            raise ValueError(\n                \"Cannot use 'pre_processing' without specifying 'needs_values'!\"\n            )\n\n    labels, _, ngroups = grouper.group_info\n    output = collections.OrderedDict()\n    base_func = getattr(libgroupby, how)\n\n    for name, obj in self._iterate_slices():\n        if aggregate:\n            result_sz = ngroups\n        else:\n            result_sz = len(obj.values)\n\n        if not cython_dtype:\n            cython_dtype = obj.values.dtype\n\n        result = np.zeros(result_sz, dtype=cython_dtype)\n        func = partial(base_func, result, labels)\n        inferences = None\n\n        if needs_values:\n            vals = obj.values\n            if pre_processing:\n                vals, inferences = pre_processing(vals)\n            func = partial(func, vals)\n\n        if needs_mask:\n            mask = isna(obj.values).view(np.uint8)\n            func = partial(func, mask)\n\n        if needs_ngroups:\n            func = partial(func, ngroups)\n\n        func(**kwargs)  # Call func to modify indexer values in place\n\n        if result_is_index:\n            result = algorithms.take_nd(obj.values, result)\n\n        if post_processing:\n            result = post_processing(result, inferences)\n\n        output[name] = result\n\n    if aggregate:\n        return self._wrap_aggregated_output(output)\n    else:\n        return self._wrap_transformed_output(output)\n",
    "1.1.2": "Get result for Cythonized functions.\n\nParameters\n----------\nhow : str, Cythonized function name to be called\ngrouper : Grouper object containing pertinent group info\naggregate : bool, default False\n    Whether the result should be aggregated to match the number of\n    groups\ncython_dtype : default None\n    Type of the array that will be modified by the Cython call. If\n    `None`, the type will be inferred from the values of each slice\nneeds_values : bool, default False\n    Whether the values should be a part of the Cython call\n    signature\nneeds_mask : bool, default False\n    Whether boolean mask needs to be part of the Cython call\n    signature\nneeds_ngroups : bool, default False\n    Whether number of groups is part of the Cython call signature\nresult_is_index : bool, default False\n    Whether the result of the Cython operation is an index of\n    values to be retrieved, instead of the actual values themselves\npre_processing : function, default None\n    Function to be applied to `values` prior to passing to Cython.\n    Function should return a tuple where the first element is the\n    values to be passed to Cython and the second element is an optional\n    type which the values should be converted to after being returned\n    by the Cython operation. Raises if `needs_values` is False.\npost_processing : function, default None\n    Function to be applied to result of Cython function. Should accept\n    an array of values as the first argument and type inferences as its\n    second argument, i.e. the signature should be\n    (ndarray, Type).\n**kwargs : dict\n    Extra arguments to be passed back to Cython funcs\n\nReturns\n-------\n`Series` or `DataFrame`  with filled values",
    "1.2.1": "class GroupBy(_GroupBy)",
    "1.2.2": "Class for grouping and aggregating relational data.\n\nSee aggregate, transform, and apply functions on this object.\n\nIt's easiest to use obj.groupby(...) to use GroupBy, but you can also do:\n\n::\n\n    grouped = groupby(obj, ...)\n\nParameters\n----------\nobj : pandas object\naxis : int, default 0\nlevel : int, default None\n    Level of MultiIndex\ngroupings : list of Grouping objects\n    Most users should ignore this\nexclusions : array-like, optional\n    List of columns to exclude\nname : string\n    Most users should ignore this\n\nReturns\n-------\n**Attributes**\ngroups : dict\n    {group name -> group labels}\nlen(grouped) : int\n    Number of groups\n\nNotes\n-----\nAfter grouping, see aggregate, apply, and transform functions. Here are\nsome other brief notes about usage. When grouping by multiple groups, the\nresult index will be a MultiIndex (hierarchical) by default.\n\nIteration produces (key, group) tuples, i.e. chunking the data by group. So\nyou can write code like:\n\n::\n\n    grouped = obj.groupby(keys, axis=axis)\n    for key, group in grouped:\n        # do something with the data\n\nFunction calls on GroupBy, if not specially implemented, \"dispatch\" to the\ngrouped data. So if you group a DataFrame and wish to invoke the std()\nmethod on each group, you can simply do:\n\n::\n\n    df.groupby(mapper).std()\n\nrather than\n\n::\n\n    df.groupby(mapper).aggregate(np.std)\n\nYou can pass arguments to these \"wrapped\" functions, too.\n\nSee the online documentation for full exposition on these topics and much\nmore",
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/core/groupby/groupby.py",
    "1.3.2": [
        "ngroups(self)",
        "_iterate_slices(self)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)",
        "@pytest.mark.parametrize(\n    \"op, expected\",\n    [\n        (\n            \"shift\",\n            {\n                \"time\": [\n                    None,\n                    None,\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    None,\n                    None,\n                ]\n            },\n        ),\n        (\n            \"bfill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n        (\n            \"ffill\",\n            {\n                \"time\": [\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 12:00:00\"),\n                    Timestamp(\"2019-01-01 12:30:00\"),\n                    Timestamp(\"2019-01-01 14:00:00\"),\n                    Timestamp(\"2019-01-01 14:30:00\"),\n                ]\n            },\n        ),\n    ],\n)\ndef test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n    # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n    tz = tz_naive_fixture\n    data = {\n        \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n        \"time\": [\n            Timestamp(\"2019-01-01 12:00:00\"),\n            Timestamp(\"2019-01-01 12:30:00\"),\n            None,\n            None,\n            Timestamp(\"2019-01-01 14:00:00\"),\n            Timestamp(\"2019-01-01 14:30:00\"),\n        ],\n    }\n    df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n\n    grouped = df.groupby(\"id\")\n    result = getattr(grouped, op)()\n    expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_154/pandas/tests/groupby/test_groupby.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, US/Eastern]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, US/Eastern]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, US/Eastern]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, Asia/Tokyo]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, Asia/Tokyo]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, Asia/Tokyo]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/US/Pacific')]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzfile('/usr/share/zoneinfo/Asia/Singapore')]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzutc()]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzutc()]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzutc()]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzlocal()]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzlocal()]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, tzlocal()]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, pytz.FixedOffset(300)]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, pytz.FixedOffset(-300)]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC+01:00]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC+01:00]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, UTC+01:00]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, foo]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, foo]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  datetime64[ns]\nE       [right]: datetime64[ns, foo]"
        ]
    ],
    "2.1.2": [
        [
            "tz_naive_fixture = 'UTC', op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'UTC', op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 14:00:00+00:00\n3 2019-01-01 14:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'UTC', op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'US/Eastern', op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00-05:00\n3 2019-01-01 12:30:00-05:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'US/Eastern', op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00-05:00\n1 2019-01-01 12:30:00-05:00\n2 2019-01-01 14:00:00-05:00\n3 2019-01-01 14:30:00-05:00\n4 2019-01-01 14:00:00-05:00\n5 2019-01-01 14:30:00-05:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'US/Eastern', op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00-05:00\n1 2019-01-01 12:30:00-05:00\n2 2019-01-01 12:00:00-05:00\n3 2019-01-01 12:30:00-05:00\n4 2019-01-01 14:00:00-05:00\n5 2019-01-01 14:30:00-05:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'Asia/Tokyo', op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+09:00\n3 2019-01-01 12:30:00+09:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'Asia/Tokyo', op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+09:00\n1 2019-01-01 12:30:00+09:00\n2 2019-01-01 14:00:00+09:00\n3 2019-01-01 14:30:00+09:00\n4 2019-01-01 14:00:00+09:00\n5 2019-01-01 14:30:00+09:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'Asia/Tokyo', op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+09:00\n1 2019-01-01 12:30:00+09:00\n2 2019-01-01 12:00:00+09:00\n3 2019-01-01 12:30:00+09:00\n4 2019-01-01 14:00:00+09:00\n5 2019-01-01 14:30:00+09:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'dateutil/US/Pacific', op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00-08:00\n3 2019-01-01 12:30:00-08:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'dateutil/US/Pacific', op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00-08:00\n1 2019-01-01 12:30:00-08:00\n2 2019-01-01 14:00:00-08:00\n3 2019-01-01 14:30:00-08:00\n4 2019-01-01 14:00:00-08:00\n5 2019-01-01 14:30:00-08:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'dateutil/US/Pacific', op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00-08:00\n1 2019-01-01 12:30:00-08:00\n2 2019-01-01 12:00:00-08:00\n3 2019-01-01 12:30:00-08:00\n4 2019-01-01 14:00:00-08:00\n5 2019-01-01 14:30:00-08:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'dateutil/Asia/Singapore', op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+08:00\n3 2019-01-01 12:30:00+08:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'dateutil/Asia/Singapore', op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+08:00\n1 2019-01-01 12:30:00+08:00\n2 2019-01-01 14:00:00+08:00\n3 2019-01-01 14:30:00+08:00\n4 2019-01-01 14:00:00+08:00\n5 2019-01-01 14:30:00+08:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = 'dateutil/Asia/Singapore', op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+08:00\n1 2019-01-01 12:30:00+08:00\n2 2019-01-01 12:00:00+08:00\n3 2019-01-01 12:30:00+08:00\n4 2019-01-01 14:00:00+08:00\n5 2019-01-01 14:30:00+08:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = tzutc(), op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = tzutc(), op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 14:00:00+00:00\n3 2019-01-01 14:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = tzutc(), op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = tzlocal(), op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = tzlocal(), op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 14:00:00+00:00\n3 2019-01-01 14:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = tzlocal(), op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = pytz.FixedOffset(300), op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+05:00\n3 2019-01-01 12:30:00+05:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = pytz.FixedOffset(300), op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+05:00\n1 2019-01-01 12:30:00+05:00\n2 2019-01-01 14:00:00+05:00\n3 2019-01-01 14:30:00+05:00\n4 2019-01-01 14:00:00+05:00\n5 2019-01-01 14:30:00+05:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = pytz.FixedOffset(300), op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+05:00\n1 2019-01-01 12:30:00+05:00\n2 2019-01-01 12:00:00+05:00\n3 2019-01-01 12:30:00+05:00\n4 2019-01-01 14:00:00+05:00\n5 2019-01-01 14:30:00+05:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = <UTC>, op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = <UTC>, op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 14:00:00+00:00\n3 2019-01-01 14:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = <UTC>, op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = pytz.FixedOffset(-300), op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00-05:00\n3 2019-01-01 12:30:00-05:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = pytz.FixedOffset(-300), op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00-05:00\n1 2019-01-01 12:30:00-05:00\n2 2019-01-01 14:00:00-05:00\n3 2019-01-01 14:30:00-05:00\n4 2019-01-01 14:00:00-05:00\n5 2019-01-01 14:30:00-05:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = pytz.FixedOffset(-300), op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00-05:00\n1 2019-01-01 12:30:00-05:00\n2 2019-01-01 12:00:00-05:00\n3 2019-01-01 12:30:00-05:00\n4 2019-01-01 14:00:00-05:00\n5 2019-01-01 14:30:00-05:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone.utc, op = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone.utc, op = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 14:00:00+00:00\n3 2019-01-01 14:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone.utc, op = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+00:00\n1 2019-01-01 12:30:00+00:00\n2 2019-01-01 12:00:00+00:00\n3 2019-01-01 12:30:00+00:00\n4 2019-01-01 14:00:00+00:00\n5 2019-01-01 14:30:00+00:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\nop = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00+01:00\n3 2019-01-01 12:30:00+01:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\nop = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00+01:00\n1 2019-01-01 12:30:00+01:00\n2 2019-01-01 14:00:00+01:00\n3 2019-01-01 14:30:00+01:00\n4 2019-01-01 14:00:00+01:00\n5 2019-01-01 14:30:00+01:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone(datetime.timedelta(seconds=3600))\nop = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00+01:00\n1 2019-01-01 12:30:00+01:00\n2 2019-01-01 12:00:00+01:00\n3 2019-01-01 12:30:00+01:00\n4 2019-01-01 14:00:00+01:00\n5 2019-01-01 14:30:00+01:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\nop = 'shift'\nexpected =                        time\n0                       NaT\n1                       NaT\n2 2019-01-01 12:00:00-01:00\n3 2019-01-01 12:30:00-01:00\n4                       NaT\n5                       NaT\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\nop = 'bfill'\nexpected =                        time\n0 2019-01-01 12:00:00-01:00\n1 2019-01-01 12:30:00-01:00\n2 2019-01-01 14:00:00-01:00\n3 2019-01-01 14:30:00-01:00\n4 2019-01-01 14:00:00-01:00\n5 2019-01-01 14:30:00-01:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ],
        [
            "tz_naive_fixture = datetime.timezone(datetime.timedelta(days=-1, seconds=82800), 'foo')\nop = 'ffill'\nexpected =                        time\n0 2019-01-01 12:00:00-01:00\n1 2019-01-01 12:30:00-01:00\n2 2019-01-01 12:00:00-01:00\n3 2019-01-01 12:30:00-01:00\n4 2019-01-01 14:00:00-01:00\n5 2019-01-01 14:30:00-01:00\n\n    @pytest.mark.parametrize(\n        \"op, expected\",\n        [\n            (\n                \"shift\",\n                {\n                    \"time\": [\n                        None,\n                        None,\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        None,\n                        None,\n                    ]\n                },\n            ),\n            (\n                \"bfill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n            (\n                \"ffill\",\n                {\n                    \"time\": [\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 12:00:00\"),\n                        Timestamp(\"2019-01-01 12:30:00\"),\n                        Timestamp(\"2019-01-01 14:00:00\"),\n                        Timestamp(\"2019-01-01 14:30:00\"),\n                    ]\n                },\n            ),\n        ],\n    )\n    def test_shift_bfill_ffill_tz(tz_naive_fixture, op, expected):\n        # GH19995, GH27992: Check that timezone does not drop in shift, bfill, and ffill\n        tz = tz_naive_fixture\n        data = {\n            \"id\": [\"A\", \"B\", \"A\", \"B\", \"A\", \"B\"],\n            \"time\": [\n                Timestamp(\"2019-01-01 12:00:00\"),\n                Timestamp(\"2019-01-01 12:30:00\"),\n                None,\n                None,\n                Timestamp(\"2019-01-01 14:00:00\"),\n                Timestamp(\"2019-01-01 14:30:00\"),\n            ],\n        }\n        df = DataFrame(data).assign(time=lambda x: x.time.dt.tz_localize(tz))\n    \n        grouped = df.groupby(\"id\")\n        result = getattr(grouped, op)()\n        expected = DataFrame(expected).assign(time=lambda x: x.time.dt.tz_localize(tz))\n>       assert_frame_equal(result, expected)",
            "\npandas/tests/groupby/test_groupby.py:1950: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}