{
    "pandas": [
        {
            "bugID": 71,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 30,
            "file_name": "pandas/core/reshape/tile.py",
            "replace_code": "def cut(\n    x,\n    bins,\n    right: bool = True,\n    labels=None,\n    retbins: bool = False,\n    precision: int = 3,\n    include_lowest: bool = False,\n    duplicates: str = \"raise\",\n):\n\n    if not isinstance(bins, list):\n        try:\n            if bins < 1:\n                raise ValueError(\"`bins` should be a positive integer.\")\n        except:\n            pass\n    else:\n        if np.array(bins).size == 0:\n            raise ValueError(\"Cannot cut empty array\")\n        \n        if np.isinf(np.nanmin(x)) or np.isinf(np.nanmax(x)):\n            raise ValueError(\"cannot specify integer `bins` when input data contains infinity\")\n        elif np.nanmin(x) == np.nanmax(x): \n            mn = np.nanmin(x) - 0.001 * abs(np.nanmin(x)) if np.nanmin(x) != 0 else 0.001\n            mx = np.nanmax(x) + 0.001 * abs(np.nanmax(x)) if np.nanmax(x) != 0 else 0.001\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n        else:  \n            mn = np.nanmin(x) + 0.0\n            mx = np.nanmax(x) + 0.0\n            bins = np.linspace(mn, mx, bins + 1, endpoint=True)\n            adj = (mx - mn) * 0.001  \n            if right:\n                bins[0] -= adj\n            else:\n                bins[-1] += adj\n    \n    fac, bins = _bins_to_cuts(\n        x, bins, right=right, labels=labels, precision=precision, include_lowest=include_lowest, dtype=dtype, duplicates=duplicates,\n    )\n    \n    return _postprocess_for_cut(fac, bins, retbins, dtype, x)"
        }
    ]
}