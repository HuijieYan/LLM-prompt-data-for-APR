{
    "1.1.1": null,
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_134/pandas/tseries/holiday.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_calendar_2031():\n    # See gh-27790\n    #\n    # Labor Day 2031 is on September 1. Saturday before is August 30.\n    # Next working day after August 30 ought to be Tuesday, September 2.\n\n    class testCalendar(AbstractHolidayCalendar):\n        rules = [USLaborDay]\n\n    cal = testCalendar()\n    workDay = offsets.CustomBusinessDay(calendar=cal)\n    Sat_before_Labor_Day_2031 = to_datetime(\"2031-08-30\")\n    next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay\n    assert next_working_day == to_datetime(\"2031-09-02\")"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_134/pandas/tests/tseries/holiday/test_calendar.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert Timestamp('2031-09-01 00:00:00') == Timestamp('2031-09-02 00:00:00')\nE         +Timestamp('2031-09-01 00:00:00')\nE         -Timestamp('2031-09-02 00:00:00')"
        ]
    ],
    "2.1.2": [
        [
            "def test_calendar_2031():\n        # See gh-27790\n        #\n        # Labor Day 2031 is on September 1. Saturday before is August 30.\n        # Next working day after August 30 ought to be Tuesday, September 2.\n    \n        class testCalendar(AbstractHolidayCalendar):\n            rules = [USLaborDay]\n    \n        cal = testCalendar()\n        workDay = offsets.CustomBusinessDay(calendar=cal)\n        Sat_before_Labor_Day_2031 = to_datetime(\"2031-08-30\")\n        next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay\n>       assert next_working_day == to_datetime(\"2031-09-02\")",
            "\npandas/tests/tseries/holiday/test_calendar.py:100: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}