{
    "pandas:134": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_134/pandas/tseries/holiday.py": {
            "buggy_functions": [],
            "snippets": [
                {
                    "snippet_code": "end_date = Timestamp(datetime(2030, 12, 31))\n    _cache = None",
                    "start_line": 349,
                    "end_line": 350
                }
            ],
            "inscope_functions": [
                "def next_monday(dt):\n    \"\"\"\n    If holiday falls on Saturday, use following Monday instead;\n    if holiday falls on Sunday, use Monday instead\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt + timedelta(2)\n    elif dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
                "def next_monday_or_tuesday(dt):\n    \"\"\"\n    For second holiday of two adjacent ones!\n    If holiday falls on Saturday, use following Monday instead;\n    if holiday falls on Sunday or Monday, use following Tuesday instead\n    (because Monday is already taken by adjacent holiday on the day before)\n    \"\"\"\n    dow = dt.weekday()\n    if dow == 5 or dow == 6:\n        return dt + timedelta(2)\n    elif dow == 0:\n        return dt + timedelta(1)\n    return dt",
                "def previous_friday(dt):\n    \"\"\"\n    If holiday falls on Saturday or Sunday, use previous Friday instead.\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt - timedelta(1)\n    elif dt.weekday() == 6:\n        return dt - timedelta(2)\n    return dt",
                "def sunday_to_monday(dt):\n    \"\"\"\n    If holiday falls on Sunday, use day thereafter (Monday) instead.\n    \"\"\"\n    if dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
                "def weekend_to_monday(dt):\n    \"\"\"\n    If holiday falls on Sunday or Saturday,\n    use day thereafter (Monday) instead.\n    Needed for holidays such as Christmas observation in Europe\n    \"\"\"\n    if dt.weekday() == 6:\n        return dt + timedelta(1)\n    elif dt.weekday() == 5:\n        return dt + timedelta(2)\n    return dt",
                "def nearest_workday(dt):\n    \"\"\"\n    If holiday falls on Saturday, use day before (Friday) instead;\n    if holiday falls on Sunday, use day thereafter (Monday) instead.\n    \"\"\"\n    if dt.weekday() == 5:\n        return dt - timedelta(1)\n    elif dt.weekday() == 6:\n        return dt + timedelta(1)\n    return dt",
                "def next_workday(dt):\n    \"\"\"\n    returns next weekday used for observances\n    \"\"\"\n    dt += timedelta(days=1)\n    while dt.weekday() > 4:\n        # Mon-Fri are 0-4\n        dt += timedelta(days=1)\n    return dt",
                "def previous_workday(dt):\n    \"\"\"\n    returns previous weekday used for observances\n    \"\"\"\n    dt -= timedelta(days=1)\n    while dt.weekday() > 4:\n        # Mon-Fri are 0-4\n        dt -= timedelta(days=1)\n    return dt",
                "def before_nearest_workday(dt):\n    \"\"\"\n    returns previous workday after nearest workday\n    \"\"\"\n    return previous_workday(nearest_workday(dt))",
                "def after_nearest_workday(dt):\n    \"\"\"\n    returns next workday after nearest workday\n    needed for Boxing day or multiple holidays in a series\n    \"\"\"\n    return next_workday(nearest_workday(dt))",
                "def register(cls):\n    try:\n        name = cls.name\n    except AttributeError:\n        name = cls.__name__\n    holiday_calendars[name] = cls",
                "def get_calendar(name):\n    \"\"\"\n    Return an instance of a calendar based on its name.\n\n    Parameters\n    ----------\n    name : str\n        Calendar name to return an instance of\n    \"\"\"\n    return holiday_calendars[name]()",
                "def HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar):\n    rules = AbstractHolidayCalendar.merge_class(base, other)\n    calendar_class = type(name, (base_class,), {\"rules\": rules, \"name\": name})\n    return calendar_class",
                "def __init__(\n    self,\n    name,\n    year=None,\n    month=None,\n    day=None,\n    offset=None,\n    observance=None,\n    start_date=None,\n    end_date=None,\n    days_of_week=None,\n):\n    \"\"\"\n    Parameters\n    ----------\n    name : str\n        Name of the holiday , defaults to class name\n    offset : array of pandas.tseries.offsets or\n            class from pandas.tseries.offsets\n        computes offset from date\n    observance: function\n        computes when holiday is given a pandas Timestamp\n    days_of_week:\n        provide a tuple of days e.g  (0,1,2,3,) for Monday Through Thursday\n        Monday=0,..,Sunday=6\n\n    Examples\n    --------\n    >>> from pandas.tseries.holiday import Holiday, nearest_workday\n    >>> from dateutil.relativedelta import MO\n    >>> USMemorialDay = Holiday('Memorial Day', month=5, day=31,\n                                offset=pd.DateOffset(weekday=MO(-1)))\n    >>> USLaborDay = Holiday('Labor Day', month=9, day=1,\n                            offset=pd.DateOffset(weekday=MO(1)))\n    >>> July3rd = Holiday('July 3rd', month=7, day=3,)\n    >>> NewYears = Holiday('New Years Day', month=1,  day=1,\n                           observance=nearest_workday),\n    >>> July3rd = Holiday('July 3rd', month=7, day=3,\n                          days_of_week=(0, 1, 2, 3))\n    \"\"\"\n    if offset is not None and observance is not None:\n        raise NotImplementedError(\"Cannot use both offset and observance.\")\n\n    self.name = name\n    self.year = year\n    self.month = month\n    self.day = day\n    self.offset = offset\n    self.start_date = (\n        Timestamp(start_date) if start_date is not None else start_date\n    )\n    self.end_date = Timestamp(end_date) if end_date is not None else end_date\n    self.observance = observance\n    assert days_of_week is None or type(days_of_week) == tuple\n    self.days_of_week = days_of_week",
                "def __repr__(self):\n    info = \"\"\n    if self.year is not None:\n        info += \"year={year}, \".format(year=self.year)\n    info += \"month={mon}, day={day}, \".format(mon=self.month, day=self.day)\n\n    if self.offset is not None:\n        info += \"offset={offset}\".format(offset=self.offset)\n\n    if self.observance is not None:\n        info += \"observance={obs}\".format(obs=self.observance)\n\n    repr = \"Holiday: {name} ({info})\".format(name=self.name, info=info)\n    return repr",
                "def dates(self, start_date, end_date, return_name=False):\n    \"\"\"\n    Calculate holidays observed between start date and end date\n\n    Parameters\n    ----------\n    start_date : starting date, datetime-like, optional\n    end_date : ending date, datetime-like, optional\n    return_name : bool, optional, default=False\n        If True, return a series that has dates and holiday names.\n        False will only return dates.\n    \"\"\"\n    start_date = Timestamp(start_date)\n    end_date = Timestamp(end_date)\n\n    filter_start_date = start_date\n    filter_end_date = end_date\n\n    if self.year is not None:\n        dt = Timestamp(datetime(self.year, self.month, self.day))\n        if return_name:\n            return Series(self.name, index=[dt])\n        else:\n            return [dt]\n\n    dates = self._reference_dates(start_date, end_date)\n    holiday_dates = self._apply_rule(dates)\n    if self.days_of_week is not None:\n        holiday_dates = holiday_dates[\n            np.in1d(holiday_dates.dayofweek, self.days_of_week)\n        ]\n\n    if self.start_date is not None:\n        filter_start_date = max(\n            self.start_date.tz_localize(filter_start_date.tz), filter_start_date\n        )\n    if self.end_date is not None:\n        filter_end_date = min(\n            self.end_date.tz_localize(filter_end_date.tz), filter_end_date\n        )\n    holiday_dates = holiday_dates[\n        (holiday_dates >= filter_start_date) & (holiday_dates <= filter_end_date)\n    ]\n    if return_name:\n        return Series(self.name, index=holiday_dates)\n    return holiday_dates",
                "def _reference_dates(self, start_date, end_date):\n    \"\"\"\n    Get reference dates for the holiday.\n\n    Return reference dates for the holiday also returning the year\n    prior to the start_date and year following the end_date.  This ensures\n    that any offsets to be applied will yield the holidays within\n    the passed in dates.\n    \"\"\"\n    if self.start_date is not None:\n        start_date = self.start_date.tz_localize(start_date.tz)\n\n    if self.end_date is not None:\n        end_date = self.end_date.tz_localize(start_date.tz)\n\n    year_offset = DateOffset(years=1)\n    reference_start_date = Timestamp(\n        datetime(start_date.year - 1, self.month, self.day)\n    )\n\n    reference_end_date = Timestamp(\n        datetime(end_date.year + 1, self.month, self.day)\n    )\n    # Don't process unnecessary holidays\n    dates = date_range(\n        start=reference_start_date,\n        end=reference_end_date,\n        freq=year_offset,\n        tz=start_date.tz,\n    )\n\n    return dates",
                "def _apply_rule(self, dates):\n    \"\"\"\n    Apply the given offset/observance to a DatetimeIndex of dates.\n\n    Parameters\n    ----------\n    dates : DatetimeIndex\n        Dates to apply the given offset/observance rule\n\n    Returns\n    -------\n    Dates with rules applied\n    \"\"\"\n    if self.observance is not None:\n        return dates.map(lambda d: self.observance(d))\n\n    if self.offset is not None:\n        if not isinstance(self.offset, list):\n            offsets = [self.offset]\n        else:\n            offsets = self.offset\n        for offset in offsets:\n\n            # if we are adding a non-vectorized value\n            # ignore the PerformanceWarnings:\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\", PerformanceWarning)\n                dates += offset\n    return dates",
                "def __new__(cls, clsname, bases, attrs):\n    calendar_class = super().__new__(cls, clsname, bases, attrs)\n    register(calendar_class)\n    return calendar_class",
                "def __init__(self, name=None, rules=None):\n    \"\"\"\n    Initializes holiday object with a given set a rules.  Normally\n    classes just have the rules defined within them.\n\n    Parameters\n    ----------\n    name : str\n        Name of the holiday calendar, defaults to class name\n    rules : array of Holiday objects\n        A set of rules used to create the holidays.\n    \"\"\"\n    super().__init__()\n    if name is None:\n        name = self.__class__.__name__\n    self.name = name\n\n    if rules is not None:\n        self.rules = rules",
                "def rule_from_name(self, name):\n    for rule in self.rules:\n        if rule.name == name:\n            return rule\n\n    return None",
                "def holidays(self, start=None, end=None, return_name=False):\n    \"\"\"\n    Returns a curve with holidays between start_date and end_date\n\n    Parameters\n    ----------\n    start : starting date, datetime-like, optional\n    end : ending date, datetime-like, optional\n    return_name : bool, optional\n        If True, return a series that has dates and holiday names.\n        False will only return a DatetimeIndex of dates.\n\n    Returns\n    -------\n        DatetimeIndex of holidays\n    \"\"\"\n    if self.rules is None:\n        raise Exception(\n            \"Holiday Calendar {name} does not have any \"\n            \"rules specified\".format(name=self.name)\n        )\n\n    if start is None:\n        start = AbstractHolidayCalendar.start_date\n\n    if end is None:\n        end = AbstractHolidayCalendar.end_date\n\n    start = Timestamp(start)\n    end = Timestamp(end)\n\n    holidays = None\n    # If we don't have a cache or the dates are outside the prior cache, we\n    # get them again\n    if self._cache is None or start < self._cache[0] or end > self._cache[1]:\n        for rule in self.rules:\n            rule_holidays = rule.dates(start, end, return_name=True)\n\n            if holidays is None:\n                holidays = rule_holidays\n            else:\n                holidays = holidays.append(rule_holidays)\n\n        self._cache = (start, end, holidays.sort_index())\n\n    holidays = self._cache[2]\n    holidays = holidays[start:end]\n\n    if return_name:\n        return holidays\n    else:\n        return holidays.index",
                "@staticmethod\ndef merge_class(base, other):\n    \"\"\"\n    Merge holiday calendars together. The base calendar\n    will take precedence to other. The merge will be done\n    based on each holiday's name.\n\n    Parameters\n    ----------\n    base : AbstractHolidayCalendar\n      instance/subclass or array of Holiday objects\n    other : AbstractHolidayCalendar\n      instance/subclass or array of Holiday objects\n    \"\"\"\n    try:\n        other = other.rules\n    except AttributeError:\n        pass\n\n    if not isinstance(other, list):\n        other = [other]\n    other_holidays = {holiday.name: holiday for holiday in other}\n\n    try:\n        base = base.rules\n    except AttributeError:\n        pass\n\n    if not isinstance(base, list):\n        base = [base]\n    base_holidays = {holiday.name: holiday for holiday in base}\n\n    other_holidays.update(base_holidays)\n    return list(other_holidays.values())",
                "def merge(self, other, inplace=False):\n    \"\"\"\n    Merge holiday calendars together.  The caller's class\n    rules take precedence.  The merge will be done\n    based on each holiday's name.\n\n    Parameters\n    ----------\n    other : holiday calendar\n    inplace : bool (default=False)\n        If True set rule_table to holidays, else return array of Holidays\n    \"\"\"\n    holidays = self.merge_class(self, other)\n    if inplace:\n        self.rules = holidays\n    else:\n        return holidays"
            ],
            "inscope_function_signatures": [
                "next_monday(dt)",
                "next_monday_or_tuesday(dt)",
                "previous_friday(dt)",
                "sunday_to_monday(dt)",
                "weekend_to_monday(dt)",
                "nearest_workday(dt)",
                "next_workday(dt)",
                "previous_workday(dt)",
                "before_nearest_workday(dt)",
                "after_nearest_workday(dt)",
                "register(cls)",
                "get_calendar(name)",
                "HolidayCalendarFactory(name, base, other, base_class=AbstractHolidayCalendar)",
                "__init__(self, name, year=None, month=None, day=None, offset=None, observance=None, start_date=None, end_date=None, days_of_week=None)",
                "__repr__(self)",
                "dates(self, start_date, end_date, return_name=False)",
                "_reference_dates(self, start_date, end_date)",
                "_apply_rule(self, dates)",
                "__new__(cls, clsname, bases, attrs)",
                "__init__(self, name=None, rules=None)",
                "rule_from_name(self, name)",
                "holidays(self, start=None, end=None, return_name=False)",
                "merge_class(base, other)",
                "merge(self, other, inplace=False)"
            ],
            "variables_in_file": {
                "dt.weekday": [
                    34,
                    68,
                    70,
                    103,
                    46,
                    48,
                    80,
                    82,
                    20,
                    22,
                    57,
                    92
                ],
                "dt": [
                    20,
                    21,
                    22,
                    23,
                    24,
                    34,
                    36,
                    38,
                    39,
                    46,
                    47,
                    48,
                    49,
                    50,
                    57,
                    58,
                    59,
                    68,
                    69,
                    70,
                    71,
                    72,
                    80,
                    81,
                    82,
                    83,
                    84,
                    91,
                    92,
                    220,
                    94,
                    95,
                    222,
                    224,
                    102,
                    103,
                    105,
                    106,
                    113,
                    121
                ],
                "timedelta": [
                    36,
                    69,
                    38,
                    71,
                    102,
                    105,
                    47,
                    49,
                    81,
                    83,
                    21,
                    23,
                    58,
                    91,
                    94
                ],
                "dow": [
                    34,
                    35,
                    37
                ],
                "previous_workday": [
                    113
                ],
                "nearest_workday": [
                    519,
                    523,
                    526,
                    528,
                    113,
                    121
                ],
                "next_workday": [
                    121
                ],
                "offset": [
                    177,
                    170,
                    308,
                    302
                ],
                "observance": [
                    170,
                    182
                ],
                "NotImplementedError": [
                    171
                ],
                "self.name": [
                    198,
                    173,
                    398,
                    367,
                    245,
                    222
                ],
                "self": [
                    257,
                    258,
                    260,
                    261,
                    265,
                    395,
                    269,
                    398,
                    413,
                    414,
                    294,
                    295,
                    422,
                    297,
                    298,
                    299,
                    424,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    301,
                    181,
                    182,
                    184,
                    188,
                    189,
                    190,
                    192,
                    193,
                    195,
                    196,
                    198,
                    219,
                    220,
                    222,
                    479,
                    481,
                    226,
                    227,
                    228,
                    230,
                    233,
                    235,
                    237,
                    366,
                    239,
                    367,
                    370,
                    245,
                    373
                ],
                "name": [
                    320,
                    332,
                    173,
                    365,
                    366,
                    367,
                    374,
                    534,
                    317,
                    319
                ],
                "self.year": [
                    174,
                    188,
                    219,
                    220,
                    189
                ],
                "year": [
                    174
                ],
                "self.month": [
                    265,
                    269,
                    175,
                    220,
                    190
                ],
                "month": [
                    175
                ],
                "self.day": [
                    265,
                    269,
                    176,
                    220,
                    190
                ],
                "day": [
                    176
                ],
                "self.offset": [
                    192,
                    193,
                    297,
                    298,
                    299,
                    301,
                    177
                ],
                "self.start_date": [
                    257,
                    258,
                    233,
                    235,
                    178
                ],
                "start_date": [
                    258,
                    226,
                    261,
                    265,
                    179,
                    276,
                    213,
                    216,
                    348
                ],
                "Timestamp": [
                    407,
                    264,
                    268,
                    179,
                    348,
                    213,
                    181,
                    214,
                    408,
                    220,
                    349
                ],
                "self.end_date": [
                    260,
                    261,
                    237,
                    239,
                    181
                ],
                "end_date": [
                    226,
                    261,
                    269,
                    181,
                    214,
                    217,
                    349
                ],
                "self.observance": [
                    195,
                    196,
                    294,
                    295,
                    182
                ],
                "days_of_week": [
                    184,
                    183
                ],
                "type": [
                    534,
                    335,
                    183
                ],
                "tuple": [
                    183
                ],
                "self.days_of_week": [
                    184,
                    228,
                    230
                ],
                "info": [
                    193,
                    196,
                    198,
                    187,
                    189,
                    190
                ],
                "format": [
                    193,
                    196,
                    198,
                    397,
                    189,
                    190
                ],
                "repr": [
                    198,
                    199
                ],
                "filter_start_date": [
                    216,
                    242,
                    234,
                    235
                ],
                "filter_end_date": [
                    217,
                    242,
                    238,
                    239
                ],
                "datetime": [
                    265,
                    269,
                    498,
                    348,
                    220,
                    349
                ],
                "return_name": [
                    427,
                    244,
                    221
                ],
                "Series": [
                    245,
                    222
                ],
                "dates": [
                    226,
                    227,
                    295,
                    272,
                    308,
                    309,
                    279
                ],
                "self._reference_dates": [
                    226
                ],
                "holiday_dates": [
                    227,
                    229,
                    230,
                    241,
                    242,
                    245,
                    246
                ],
                "self._apply_rule": [
                    227
                ],
                "np.in1d": [
                    230
                ],
                "np": [
                    230
                ],
                "holiday_dates.dayofweek": [
                    230
                ],
                "max": [
                    234
                ],
                "self.start_date.tz_localize": [
                    258,
                    235
                ],
                "filter_start_date.tz": [
                    235
                ],
                "min": [
                    238
                ],
                "self.end_date.tz_localize": [
                    261,
                    239
                ],
                "filter_end_date.tz": [
                    239
                ],
                "start_date.tz": [
                    258,
                    276,
                    261
                ],
                "year_offset": [
                    275,
                    263
                ],
                "DateOffset": [
                    487,
                    263,
                    489,
                    491,
                    494,
                    501,
                    504
                ],
                "reference_start_date": [
                    264,
                    273
                ],
                "start_date.year": [
                    265
                ],
                "reference_end_date": [
                    274,
                    268
                ],
                "end_date.year": [
                    269
                ],
                "date_range": [
                    272
                ],
                "dates.map": [
                    295
                ],
                "d": [
                    295
                ],
                "isinstance": [
                    298,
                    451,
                    460
                ],
                "list": [
                    465,
                    298,
                    451,
                    460
                ],
                "offsets": [
                    299,
                    301,
                    302
                ],
                "warnings.catch_warnings": [
                    306
                ],
                "warnings": [
                    306,
                    307
                ],
                "warnings.simplefilter": [
                    307
                ],
                "PerformanceWarning": [
                    307
                ],
                "holiday_calendars": [
                    312,
                    320,
                    332
                ],
                "cls.name": [
                    317
                ],
                "cls": [
                    320,
                    337,
                    317,
                    319
                ],
                "AttributeError": [
                    448,
                    457,
                    318
                ],
                "cls.__name__": [
                    319
                ],
                "calendar_class": [
                    337,
                    338,
                    339,
                    534,
                    535
                ],
                "__new__": [
                    337
                ],
                "super": [
                    337,
                    364
                ],
                "clsname": [
                    337
                ],
                "bases": [
                    337
                ],
                "attrs": [
                    337
                ],
                "register": [
                    338
                ],
                "HolidayCalendarMetaClass": [
                    342
                ],
                "rules": [
                    518,
                    369,
                    370,
                    533,
                    534,
                    347
                ],
                "_cache": [
                    350
                ],
                "__init__": [
                    364
                ],
                "self.__class__.__name__": [
                    366
                ],
                "self.__class__": [
                    366
                ],
                "self.rules": [
                    481,
                    395,
                    370,
                    373,
                    414
                ],
                "rule": [
                    373,
                    374,
                    375,
                    414,
                    415
                ],
                "rule.name": [
                    374
                ],
                "Exception": [
                    396
                ],
                "start": [
                    422,
                    425,
                    401,
                    402,
                    407,
                    413,
                    415
                ],
                "AbstractHolidayCalendar.start_date": [
                    402
                ],
                "AbstractHolidayCalendar": [
                    402,
                    532,
                    533,
                    405,
                    511
                ],
                "end": [
                    422,
                    425,
                    404,
                    405,
                    408,
                    413,
                    415
                ],
                "AbstractHolidayCalendar.end_date": [
                    405
                ],
                "holidays": [
                    417,
                    418,
                    481,
                    420,
                    483,
                    422,
                    424,
                    425,
                    428,
                    430,
                    410,
                    479
                ],
                "self._cache": [
                    424,
                    413,
                    422
                ],
                "rule_holidays": [
                    418,
                    420,
                    415
                ],
                "rule.dates": [
                    415
                ],
                "holidays.append": [
                    420
                ],
                "holidays.sort_index": [
                    422
                ],
                "holidays.index": [
                    430
                ],
                "other": [
                    451,
                    452,
                    453,
                    447,
                    533,
                    479
                ],
                "other.rules": [
                    447
                ],
                "other_holidays": [
                    464,
                    465,
                    453
                ],
                "holiday.name": [
                    453,
                    462
                ],
                "holiday": [
                    453,
                    462
                ],
                "base": [
                    456,
                    460,
                    461,
                    462,
                    533
                ],
                "base.rules": [
                    456
                ],
                "base_holidays": [
                    464,
                    462
                ],
                "other_holidays.update": [
                    464
                ],
                "other_holidays.values": [
                    465
                ],
                "staticmethod": [
                    432
                ],
                "self.merge_class": [
                    479
                ],
                "inplace": [
                    480
                ],
                "USMemorialDay": [
                    522,
                    486
                ],
                "Holiday": [
                    486,
                    519,
                    489,
                    490,
                    523,
                    493,
                    526,
                    496,
                    528,
                    503,
                    506,
                    508
                ],
                "MO": [
                    487,
                    489,
                    491,
                    501,
                    504
                ],
                "USLaborDay": [
                    489,
                    524
                ],
                "USColumbusDay": [
                    490,
                    525
                ],
                "USThanksgivingDay": [
                    493,
                    527
                ],
                "TH": [
                    494
                ],
                "USMartinLutherKingJr": [
                    496,
                    520
                ],
                "USPresidentsDay": [
                    521,
                    503
                ],
                "GoodFriday": [
                    506
                ],
                "Easter": [
                    506,
                    508
                ],
                "Day": [
                    506,
                    508
                ],
                "EasterMonday": [
                    508
                ],
                "AbstractHolidayCalendar.merge_class": [
                    533
                ],
                "base_class": [
                    534
                ]
            },
            "filtered_variables_in_file": {
                "dt.weekday": [
                    34,
                    68,
                    70,
                    103,
                    46,
                    48,
                    80,
                    82,
                    20,
                    22,
                    57,
                    92
                ],
                "dt": [
                    20,
                    21,
                    22,
                    23,
                    24,
                    34,
                    36,
                    38,
                    39,
                    46,
                    47,
                    48,
                    49,
                    50,
                    57,
                    58,
                    59,
                    68,
                    69,
                    70,
                    71,
                    72,
                    80,
                    81,
                    82,
                    83,
                    84,
                    91,
                    92,
                    220,
                    94,
                    95,
                    222,
                    224,
                    102,
                    103,
                    105,
                    106,
                    113,
                    121
                ],
                "timedelta": [
                    36,
                    69,
                    38,
                    71,
                    102,
                    105,
                    47,
                    49,
                    81,
                    83,
                    21,
                    23,
                    58,
                    91,
                    94
                ],
                "dow": [
                    34,
                    35,
                    37
                ],
                "previous_workday": [
                    113
                ],
                "nearest_workday": [
                    519,
                    523,
                    526,
                    528,
                    113,
                    121
                ],
                "next_workday": [
                    121
                ],
                "offset": [
                    177,
                    170,
                    308,
                    302
                ],
                "observance": [
                    170,
                    182
                ],
                "self.name": [
                    198,
                    173,
                    398,
                    367,
                    245,
                    222
                ],
                "self": [
                    257,
                    258,
                    260,
                    261,
                    265,
                    395,
                    269,
                    398,
                    413,
                    414,
                    294,
                    295,
                    422,
                    297,
                    298,
                    299,
                    424,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    301,
                    181,
                    182,
                    184,
                    188,
                    189,
                    190,
                    192,
                    193,
                    195,
                    196,
                    198,
                    219,
                    220,
                    222,
                    479,
                    481,
                    226,
                    227,
                    228,
                    230,
                    233,
                    235,
                    237,
                    366,
                    239,
                    367,
                    370,
                    245,
                    373
                ],
                "name": [
                    320,
                    332,
                    173,
                    365,
                    366,
                    367,
                    374,
                    534,
                    317,
                    319
                ],
                "self.year": [
                    174,
                    188,
                    219,
                    220,
                    189
                ],
                "year": [
                    174
                ],
                "self.month": [
                    265,
                    269,
                    175,
                    220,
                    190
                ],
                "month": [
                    175
                ],
                "self.day": [
                    265,
                    269,
                    176,
                    220,
                    190
                ],
                "day": [
                    176
                ],
                "self.offset": [
                    192,
                    193,
                    297,
                    298,
                    299,
                    301,
                    177
                ],
                "self.start_date": [
                    257,
                    258,
                    233,
                    235,
                    178
                ],
                "start_date": [
                    258,
                    226,
                    261,
                    265,
                    179,
                    276,
                    213,
                    216,
                    348
                ],
                "Timestamp": [
                    407,
                    264,
                    268,
                    179,
                    348,
                    213,
                    181,
                    214,
                    408,
                    220,
                    349
                ],
                "self.end_date": [
                    260,
                    261,
                    237,
                    239,
                    181
                ],
                "end_date": [
                    226,
                    261,
                    269,
                    181,
                    214,
                    217,
                    349
                ],
                "self.observance": [
                    195,
                    196,
                    294,
                    295,
                    182
                ],
                "days_of_week": [
                    184,
                    183
                ],
                "self.days_of_week": [
                    184,
                    228,
                    230
                ],
                "info": [
                    193,
                    196,
                    198,
                    187,
                    189,
                    190
                ],
                "filter_start_date": [
                    216,
                    242,
                    234,
                    235
                ],
                "filter_end_date": [
                    217,
                    242,
                    238,
                    239
                ],
                "datetime": [
                    265,
                    269,
                    498,
                    348,
                    220,
                    349
                ],
                "return_name": [
                    427,
                    244,
                    221
                ],
                "Series": [
                    245,
                    222
                ],
                "dates": [
                    226,
                    227,
                    295,
                    272,
                    308,
                    309,
                    279
                ],
                "self._reference_dates": [
                    226
                ],
                "holiday_dates": [
                    227,
                    229,
                    230,
                    241,
                    242,
                    245,
                    246
                ],
                "self._apply_rule": [
                    227
                ],
                "np.in1d": [
                    230
                ],
                "np": [
                    230
                ],
                "holiday_dates.dayofweek": [
                    230
                ],
                "self.start_date.tz_localize": [
                    258,
                    235
                ],
                "filter_start_date.tz": [
                    235
                ],
                "self.end_date.tz_localize": [
                    261,
                    239
                ],
                "filter_end_date.tz": [
                    239
                ],
                "start_date.tz": [
                    258,
                    276,
                    261
                ],
                "year_offset": [
                    275,
                    263
                ],
                "DateOffset": [
                    487,
                    263,
                    489,
                    491,
                    494,
                    501,
                    504
                ],
                "reference_start_date": [
                    264,
                    273
                ],
                "start_date.year": [
                    265
                ],
                "reference_end_date": [
                    274,
                    268
                ],
                "end_date.year": [
                    269
                ],
                "date_range": [
                    272
                ],
                "dates.map": [
                    295
                ],
                "d": [
                    295
                ],
                "offsets": [
                    299,
                    301,
                    302
                ],
                "warnings.catch_warnings": [
                    306
                ],
                "warnings": [
                    306,
                    307
                ],
                "warnings.simplefilter": [
                    307
                ],
                "PerformanceWarning": [
                    307
                ],
                "holiday_calendars": [
                    312,
                    320,
                    332
                ],
                "cls.name": [
                    317
                ],
                "cls": [
                    320,
                    337,
                    317,
                    319
                ],
                "cls.__name__": [
                    319
                ],
                "calendar_class": [
                    337,
                    338,
                    339,
                    534,
                    535
                ],
                "__new__": [
                    337
                ],
                "clsname": [
                    337
                ],
                "bases": [
                    337
                ],
                "attrs": [
                    337
                ],
                "register": [
                    338
                ],
                "HolidayCalendarMetaClass": [
                    342
                ],
                "rules": [
                    518,
                    369,
                    370,
                    533,
                    534,
                    347
                ],
                "_cache": [
                    350
                ],
                "__init__": [
                    364
                ],
                "self.__class__.__name__": [
                    366
                ],
                "self.__class__": [
                    366
                ],
                "self.rules": [
                    481,
                    395,
                    370,
                    373,
                    414
                ],
                "rule": [
                    373,
                    374,
                    375,
                    414,
                    415
                ],
                "rule.name": [
                    374
                ],
                "start": [
                    422,
                    425,
                    401,
                    402,
                    407,
                    413,
                    415
                ],
                "AbstractHolidayCalendar.start_date": [
                    402
                ],
                "AbstractHolidayCalendar": [
                    402,
                    532,
                    533,
                    405,
                    511
                ],
                "end": [
                    422,
                    425,
                    404,
                    405,
                    408,
                    413,
                    415
                ],
                "AbstractHolidayCalendar.end_date": [
                    405
                ],
                "holidays": [
                    417,
                    418,
                    481,
                    420,
                    483,
                    422,
                    424,
                    425,
                    428,
                    430,
                    410,
                    479
                ],
                "self._cache": [
                    424,
                    413,
                    422
                ],
                "rule_holidays": [
                    418,
                    420,
                    415
                ],
                "rule.dates": [
                    415
                ],
                "holidays.append": [
                    420
                ],
                "holidays.sort_index": [
                    422
                ],
                "holidays.index": [
                    430
                ],
                "other": [
                    451,
                    452,
                    453,
                    447,
                    533,
                    479
                ],
                "other.rules": [
                    447
                ],
                "other_holidays": [
                    464,
                    465,
                    453
                ],
                "holiday.name": [
                    453,
                    462
                ],
                "holiday": [
                    453,
                    462
                ],
                "base": [
                    456,
                    460,
                    461,
                    462,
                    533
                ],
                "base.rules": [
                    456
                ],
                "base_holidays": [
                    464,
                    462
                ],
                "other_holidays.update": [
                    464
                ],
                "other_holidays.values": [
                    465
                ],
                "self.merge_class": [
                    479
                ],
                "inplace": [
                    480
                ],
                "USMemorialDay": [
                    522,
                    486
                ],
                "Holiday": [
                    486,
                    519,
                    489,
                    490,
                    523,
                    493,
                    526,
                    496,
                    528,
                    503,
                    506,
                    508
                ],
                "MO": [
                    487,
                    489,
                    491,
                    501,
                    504
                ],
                "USLaborDay": [
                    489,
                    524
                ],
                "USColumbusDay": [
                    490,
                    525
                ],
                "USThanksgivingDay": [
                    493,
                    527
                ],
                "TH": [
                    494
                ],
                "USMartinLutherKingJr": [
                    496,
                    520
                ],
                "USPresidentsDay": [
                    521,
                    503
                ],
                "GoodFriday": [
                    506
                ],
                "Easter": [
                    506,
                    508
                ],
                "Day": [
                    506,
                    508
                ],
                "EasterMonday": [
                    508
                ],
                "AbstractHolidayCalendar.merge_class": [
                    533
                ],
                "base_class": [
                    534
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_134/pandas/tests/tseries/holiday/test_calendar.py",
                "test_function": "test_calendar_2031",
                "test_function_code": "def test_calendar_2031():\n    # See gh-27790\n    #\n    # Labor Day 2031 is on September 1. Saturday before is August 30.\n    # Next working day after August 30 ought to be Tuesday, September 2.\n\n    class testCalendar(AbstractHolidayCalendar):\n        rules = [USLaborDay]\n\n    cal = testCalendar()\n    workDay = offsets.CustomBusinessDay(calendar=cal)\n    Sat_before_Labor_Day_2031 = to_datetime(\"2031-08-30\")\n    next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay\n    assert next_working_day == to_datetime(\"2031-09-02\")",
                "test_error": "AssertionError: assert Timestamp('2031-09-01 00:00:00') == Timestamp('2031-09-02 00:00:00')   +Timestamp('2031-09-01 00:00:00')   -Timestamp('2031-09-02 00:00:00')",
                "full_test_error": "def test_calendar_2031():\n        # See gh-27790\n        #\n        # Labor Day 2031 is on September 1. Saturday before is August 30.\n        # Next working day after August 30 ought to be Tuesday, September 2.\n    \n        class testCalendar(AbstractHolidayCalendar):\n            rules = [USLaborDay]\n    \n        cal = testCalendar()\n        workDay = offsets.CustomBusinessDay(calendar=cal)\n        Sat_before_Labor_Day_2031 = to_datetime(\"2031-08-30\")\n        next_working_day = Sat_before_Labor_Day_2031 + 0 * workDay\n>       assert next_working_day == to_datetime(\"2031-09-02\")\nE       AssertionError: assert Timestamp('2031-09-01 00:00:00') == Timestamp('2031-09-02 00:00:00')\nE         +Timestamp('2031-09-01 00:00:00')\nE         -Timestamp('2031-09-02 00:00:00')\n\npandas/tests/tseries/holiday/test_calendar.py:100: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}