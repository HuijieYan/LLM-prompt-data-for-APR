{
    "pandas:9": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_9/pandas/core/arrays/categorical.py": {
            "buggy_functions": [
                {
                    "function_name": "__contains__",
                    "function_code": "def __contains__(self, key) -> bool:\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n\n    return contains(self, key, container=self._codes)\n",
                    "decorators": [],
                    "docstring": "Returns True if `key` is in this Categorical.",
                    "start_line": 1832,
                    "variables": {
                        "is_scalar": [
                            1837
                        ],
                        "key": [
                            1840,
                            1837
                        ],
                        "isna": [
                            1837
                        ],
                        "any": [
                            1838
                        ],
                        "self.isna": [
                            1838
                        ],
                        "self": [
                            1840,
                            1838
                        ],
                        "contains": [
                            1840
                        ],
                        "self._codes": [
                            1840
                        ],
                        "bool": [
                            1832
                        ]
                    },
                    "filtered_variables": {
                        "is_scalar": [
                            1837
                        ],
                        "key": [
                            1840,
                            1837
                        ],
                        "isna": [
                            1837
                        ],
                        "self.isna": [
                            1838
                        ],
                        "self": [
                            1840,
                            1838
                        ],
                        "contains": [
                            1840
                        ],
                        "self._codes": [
                            1840
                        ]
                    },
                    "diff_line_number": 1837,
                    "class_data": {
                        "signature": "class Categorical(NDArrayBackedExtensionArray, PandasObject)",
                        "docstring": "Represent a categorical variable in classic R / S-plus fashion.\n\n`Categoricals` can only take on only a limited, and usually fixed, number\nof possible values (`categories`). In contrast to statistical categorical\nvariables, a `Categorical` might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nAll values of the `Categorical` are either in `categories` or `np.nan`.\nAssigning values outside of `categories` will raise a `ValueError`. Order\nis defined by the order of the `categories`, not lexical order of the\nvalues.\n\nParameters\n----------\nvalues : list-like\n    The values of the categorical. If categories are given, values not in\n    categories will be replaced with NaN.\ncategories : Index-like (unique), optional\n    The unique categories for this categorical. If not given, the\n    categories are assumed to be the unique values of `values` (sorted, if\n    possible, otherwise in the order in which they appear).\nordered : bool, default False\n    Whether or not this categorical is treated as a ordered categorical.\n    If True, the resulting categorical will be ordered.\n    An ordered categorical respects, when sorted, the order of its\n    `categories` attribute (which in turn is the `categories` argument, if\n    provided).\ndtype : CategoricalDtype\n    An instance of ``CategoricalDtype`` to use for this categorical.\n\nAttributes\n----------\ncategories : Index\n    The categories of this categorical\ncodes : ndarray\n    The codes (integer positions, which point to the categories) of this\n    categorical, read only.\nordered : bool\n    Whether or not this Categorical is ordered.\ndtype : CategoricalDtype\n    The instance of ``CategoricalDtype`` storing the ``categories``\n    and ``ordered``.\n\nMethods\n-------\nfrom_codes\n__array__\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nCategoricalDtype : Type for categorical data.\nCategoricalIndex : An Index with an underlying ``Categorical``.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html>`_\nfor more.\n\nExamples\n--------\n>>> pd.Categorical([1, 2, 3, 1, 2, 3])\n[1, 2, 3, 1, 2, 3]\nCategories (3, int64): [1, 2, 3]\n\n>>> pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'])\n[a, b, c, a, b, c]\nCategories (3, object): [a, b, c]\n\nOrdered `Categoricals` can be sorted according to the custom order\nof the categories and can have a min and max value.\n\n>>> c = pd.Categorical(['a', 'b', 'c', 'a', 'b', 'c'], ordered=True,\n...                    categories=['c', 'b', 'a'])\n>>> c\n[a, b, c, a, b, c]\nCategories (3, object): [c < b < a]\n>>> c.min()\n'c'",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False):\n    dtype = CategoricalDtype._from_values_or_dtype(values, categories, ordered, dtype)\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n    null_mask = np.array(False)\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n            sanitize_dtype = np.dtype('O') if len(values) == 0 else None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError as err:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                raise TypeError(\"'values' is not ordered, please explicitly specify the categories order by passing in a categories argument.\") from err\n        except ValueError as err:\n            raise NotImplementedError('> 1 ndim Categorical are not supported at this time') from err\n        dtype = CategoricalDtype(categories, dtype.ordered)\n    elif is_categorical_dtype(values.dtype):\n        old_codes = values._values.codes if isinstance(values, ABCSeries) else values.codes\n        codes = recode_for_categories(old_codes, values.dtype.categories, dtype.categories)\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n    if null_mask.any():\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                            "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    return self.dtype.categories",
                            "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(new_dtype.categories):\n        raise ValueError('new categories need to have the same number of items as the old categories!')\n    self._dtype = new_dtype",
                            "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype.ordered",
                            "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n    \"\"\"\n    return self._dtype",
                            "@property\ndef _constructor(self) -> Type['Categorical']:\n    return Categorical",
                            "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                            "def _formatter(self, boxed=False):\n    return None",
                            "def astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    if is_extension_array_dtype(dtype):\n        return array(self, dtype=dtype, copy=copy)\n    if is_integer_dtype(dtype) and self.isna().any():\n        raise ValueError('Cannot convert float NaN to integer')\n    return np.array(self, dtype=dtype, copy=copy)",
                            "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                            "def tolist(self) -> List[Scalar]:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                            "@classmethod\ndef _from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n    cats = Index(inferred_categories)\n    known_categories = isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    if known_categories:\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors='coerce')\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors='coerce')\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors='coerce')\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = ['True', 'TRUE', 'true']\n            cats = cats.isin(true_values)\n    if known_categories:\n        categories = dtype.categories\n        codes = recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n        codes = recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n    return cls(codes, dtype=dtype, fastpath=True)",
                            "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like of int\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(categories=categories, ordered=ordered, dtype=dtype)\n    if dtype.categories is None:\n        msg = \"The categories must be provided in 'categories' or 'dtype'. Both were None.\"\n        raise ValueError(msg)\n    if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n        if isna(codes).any():\n            raise ValueError('codes cannot contain NA values')\n        codes = codes.to_numpy(dtype=np.int64)\n    else:\n        codes = np.asarray(codes)\n    if len(codes) and (not is_integer_dtype(codes)):\n        raise ValueError('codes need to be array-like integers')\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError('codes need to be between -1 and len(categories)-1')\n    return cls(codes, dtype=dtype, fastpath=True)",
                            "@property\ndef codes(self) -> np.ndarray:\n    \"\"\"\n    The category codes of this categorical.\n\n    Codes are an array of integers which are the positions of the actual\n    values in the categories array.\n\n    There is no setter, use the other categorical methods and the normal item\n    setter to change values in the categorical.\n\n    Returns\n    -------\n    ndarray[int]\n        A non-writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                            "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if not fastpath and self.dtype.categories is not None and (len(new_dtype.categories) != len(self.dtype.categories)):\n        raise ValueError('new categories need to have the same number of items than the old categories!')\n    self._dtype = new_dtype",
                            "def _set_dtype(self, dtype: CategoricalDtype) -> 'Categorical':\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                            "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                            "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    return self.set_ordered(True, inplace=inplace)",
                            "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    return self.set_ordered(False, inplace=inplace)",
                            "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes, which does not considers a S1 string equal to a single char\n    python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if ordered is None:\n        ordered = self.dtype.ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(cat.dtype.categories):\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = recode_for_categories(cat.codes, cat.categories, new_dtype.categories)\n        cat._codes = codes\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                            "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n        New categories which will replace old categories.\n\n        * list-like: all items must be unique and the number of items in\n          the new categories must match the existing number of categories.\n\n        * dict-like: specifies a mapping from\n          old categories to new. Categories not contained in the mapping\n          are passed through and extra categories in the mapping are\n          ignored.\n\n        * callable : a callable that is called on all items in the old\n          categories and whose return values comprise the new categories.\n\n        .. versionadded:: 0.23.0.\n\n    inplace : bool, default False\n        Whether or not to rename the categories inplace or return a copy of\n        this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                            "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError('items in new_categories are not the same as in old categories')\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                            "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        raise ValueError(f'new categories must not include old categories: {already_included}')\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                            "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_list_like(removals):\n        removals = [removals]\n    removal_set = set(removals)\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n    if any(isna(removals)):\n        not_included = {x for x in not_included if notna(x)}\n        new_categories = [x for x in new_categories if notna(x)]\n    if len(not_included) != 0:\n        raise ValueError(f'removals must all be in old categories: {not_included}')\n    return self.set_categories(new_categories, ordered=self.ordered, rename=False, inplace=inplace)",
                            "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    idx, inv = np.unique(cat._codes, return_inverse=True)\n    if idx.size != 0 and idx[0] == -1:\n        idx, inv = (idx[1:], inv - 1)\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(new_categories, ordered=self.ordered)\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n    if not inplace:\n        return cat",
                            "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(self._codes.copy(), categories=new_categories, ordered=self.ordered)\n    except ValueError:\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                            "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError('Categorical with ndim > 1.')\n    fill_value = self._validate_fill_value(fill_value)\n    codes = shift(codes, periods, axis=0, fill_value=fill_value)\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                            "def _validate_fill_value(self, fill_value):\n    \"\"\"\n    Convert a user-facing fill_value to a representation to use with our\n    underlying ndarray, raising ValueError if this is not possible.\n\n    Parameters\n    ----------\n    fill_value : object\n\n    Returns\n    -------\n    fill_value : int\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n    if isna(fill_value):\n        fill_value = -1\n    elif fill_value in self.categories:\n        fill_value = self.categories.get_loc(fill_value)\n    else:\n        raise ValueError(f\"'fill_value={fill_value}' is not present in this Categorical's categories\")\n    return fill_value",
                            "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and (not is_dtype_equal(dtype, self.categories.dtype)):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        ret = np.asarray(ret)\n    return ret",
                            "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(self, ufunc, method, *inputs, **kwargs)\n    if result is not NotImplemented:\n        return result\n    raise TypeError(f'Object with dtype {self.dtype} cannot perform the numpy op {ufunc.__name__}')",
                            "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception('invalid pickle state')\n    if '_dtype' not in state:\n        state['_dtype'] = CategoricalDtype(state['_categories'], state['_ordered'])\n    for k, v in state.items():\n        setattr(self, k, v)",
                            "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                            "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                            "@doc(_shared_docs['searchsorted'], klass='Categorical')\ndef searchsorted(self, value, side='left', sorter=None):\n    if is_scalar(value):\n        codes = self.categories.get_loc(value)\n        codes = self.codes.dtype.type(codes)\n    else:\n        locs = [self.categories.get_loc(x) for x in value]\n        codes = np.array(locs, dtype=self.codes.dtype)\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                            "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n    ret = self._codes == -1\n    return ret",
                            "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                            "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n    return result",
                            "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n    code, cat = (self._codes, self.categories)\n    ncat, mask = (len(cat), 0 <= code)\n    ix, clean = (np.arange(ncat), mask.all())\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n    return Series(count, index=CategoricalIndex(ix), dtype='int64')",
                            "def _internal_get_values(self):\n    \"\"\"\n    Return the values.\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    np.ndarray or Index\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    if needs_i8_conversion(self.categories.dtype):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype('object').take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                            "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError(f'Categorical is not ordered for operation {op}\\nyou can use .as_ordered() to change the Categorical to an ordered one\\n')",
                            "def _values_for_argsort(self):\n    return self._codes",
                            "def argsort(self, ascending=True, kind='quicksort', **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(ascending=ascending, kind=kind, **kwargs)",
                            "def sort_values(self, inplace: bool=False, ascending: bool=True, na_position: str='last'):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2, 2, NaN, 5]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2, 2, 5, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2, 2, 5]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5, 2, 2]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if na_position not in ['last', 'first']:\n        raise ValueError(f'invalid na_position: {repr(na_position)}')\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True)",
                            "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype('float64')\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        values = np.array(self.rename_categories(Series(self.categories).rank().values))\n    return values",
                            "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                            "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    warn('Categorical.to_dense is deprecated and will be removed in a future version.  Use np.asarray(cat) instead.', FutureWarning, stacklevel=2)\n    return np.asarray(self)",
                            "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(value, method, validate_scalar_dict_value=False)\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError('specifying a limit for fillna has not been implemented yet')\n    codes = self._codes\n    if method is not None:\n        values = np.asarray(self).reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(self.categories.dtype)[0]\n        codes = _get_codes_for_values(values, self.categories)\n    elif isinstance(value, (np.ndarray, Categorical, ABCSeries)):\n        mask = ~algorithms.isin(value, self.categories)\n        if not isna(value[mask]).all():\n            raise ValueError('fill value must be in categories')\n        values_codes = _get_codes_for_values(value, self.categories)\n        indexer = np.where(codes == -1)\n        codes = codes.copy()\n        codes[indexer] = values_codes[indexer]\n    elif is_hashable(value):\n        if not isna(value) and value not in self.categories:\n            raise ValueError('fill value must be in categories')\n        mask = codes == -1\n        if mask.any():\n            codes = codes.copy()\n            if isna(value):\n                codes[mask] = -1\n            else:\n                codes[mask] = self.categories.get_loc(value)\n    else:\n        raise TypeError(f\"'value' parameter must be a scalar, dict or Series, but you passed a {type(value).__name__}\")\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                            "def take(self: _T, indexer, allow_fill: bool=False, fill_value=None) -> _T:\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default False\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 1.0.0\n\n           Default value changed from ``True`` to ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (2, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``ValueError``.\n    \"\"\"\n    return NDArrayBackedExtensionArray.take(self, indexer, allow_fill=allow_fill, fill_value=fill_value)",
                            "@property\ndef _ndarray(self) -> np.ndarray:\n    return self._codes",
                            "def _from_backing_data(self, arr: np.ndarray) -> 'Categorical':\n    return self._constructor(arr, dtype=self.dtype, fastpath=True)",
                            "def take_nd(self, indexer, allow_fill: bool=False, fill_value=None):\n    warn('Categorical.take_nd is deprecated, use Categorical.take instead', FutureWarning, stacklevel=2)\n    return self.take(indexer, allow_fill=allow_fill, fill_value=fill_value)",
                            "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                            "def __contains__(self, key) -> bool:\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n    return contains(self, key, container=self._codes)",
                            "def _tidy_repr(self, max_vals=10, footer=True) -> str:\n    \"\"\"\n    a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num):]._get_repr(length=False, footer=False)\n    result = f'{head[:-1]}, ..., {tail[1:]}'\n    if footer:\n        result = f'{result}\\n{self._repr_footer()}'\n    return str(result)",
                            "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = 10 if get_option('display.max_categories') == 0 else get_option('display.max_categories')\n    from pandas.io.formats import format as fmt\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + ['...'] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                            "def _repr_categories_info(self) -> str:\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = f'Categories ({len(self.categories)}, {dtype}): '\n    width, height = get_terminal_size()\n    max_width = get_option('display.width') or width\n    if console.in_ipython_frontend():\n        max_width = 0\n    levstring = ''\n    start = True\n    cur_col_len = len(levheader)\n    sep_len, sep = (3, ' < ') if self.ordered else (2, ', ')\n    linesep = sep.rstrip() + '\\n'\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + ' ' * (len(levheader) + 1)\n            cur_col_len = len(levheader) + 1\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    return levheader + '[' + levstring.replace(' < ... < ', ' ... ') + ']'",
                            "def _repr_footer(self) -> str:\n    info = self._repr_categories_info()\n    return f'Length: {len(self)}\\n{info}'",
                            "def _get_repr(self, length=True, na_rep='NaN', footer=True) -> str:\n    from pandas.io.formats import format as fmt\n    formatter = fmt.CategoricalFormatter(self, length=length, na_rep=na_rep, footer=footer)\n    result = formatter.to_string()\n    return str(result)",
                            "def __repr__(self) -> str:\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace('\\n', ', ')\n        result = f'[], {msg}'\n    return result",
                            "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == 'i':\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                            "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n    key = check_array_indexer(self, key)\n    result = self._codes[key]\n    if result.ndim > 1:\n        deprecate_ndim_indexing(result)\n        return result\n    return self._constructor(result, dtype=self.dtype, fastpath=True)",
                            "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError('Cannot set a Categorical with another, without identical categories')\n        if not self.categories.equals(value.categories):\n            new_codes = recode_for_categories(value.codes, value.categories, self.categories)\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n    rvalue = value if is_list_like(value) else [value]\n    from pandas import Index\n    to_add = Index(rvalue).difference(self.categories)\n    if len(to_add) and (not isna(to_add).all()):\n        raise ValueError('Cannot setitem on a Categorical with a new category, set the categories first')\n    if isinstance(key, (int, np.integer)):\n        pass\n    elif isinstance(key, tuple):\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError('invalid slicing for a 1-ndim categorical')\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError('invalid slicing for a 1-ndim categorical')\n    elif isinstance(key, slice):\n        pass\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n    key = check_array_indexer(self, key)\n    self._codes[key] = lindexer",
                            "def _reverse_indexer(self) -> Dict[Hashable, np.ndarray]:\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    r, counts = libalgos.groupsort_indexer(self.codes.astype('int64'), categories.size)\n    counts = counts.cumsum()\n    _result = (r[start:end] for start, end in zip(counts, counts[1:]))\n    result = dict(zip(categories, _result))\n    return result",
                            "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        raise TypeError(f'Categorical cannot perform the operation {name}')\n    return func(**kwargs)",
                            "@deprecate_kwarg(old_arg_name='numeric_only', new_arg_name='skipna')\ndef min(self, skipna=True):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered('min')\n    if not len(self._codes):\n        return self.dtype.na_value\n    good = self._codes != -1\n    if not good.all():\n        if skipna and good.any():\n            pointer = self._codes[good].min()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.min()\n    return self.categories[pointer]",
                            "@deprecate_kwarg(old_arg_name='numeric_only', new_arg_name='skipna')\ndef max(self, skipna=True):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered('max')\n    if not len(self._codes):\n        return self.dtype.na_value\n    good = self._codes != -1\n    if not good.all():\n        if skipna and good.any():\n            pointer = self._codes[good].max()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.max()\n    return self.categories[pointer]",
                            "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                            "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    See Also\n    --------\n    pandas.unique\n    CategoricalIndex.unique\n    Series.unique\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list(\"baabc\")).unique()\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list(\"baabc\"), categories=list(\"abc\")).unique()\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(\n    ...     list(\"baabc\"), categories=list(\"abc\"), ordered=True\n    ... ).unique()\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n    \"\"\"\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n    cat._codes = unique_codes\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                            "def _values_for_factorize(self):\n    codes = self.codes.astype('int64')\n    return (codes, -1)",
                            "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(original.categories.take(uniques), dtype=original.dtype)",
                            "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            other_codes = other._codes\n        else:\n            other_codes = recode_for_categories(other.codes, other.categories, self.categories)\n        return np.array_equal(self._codes, other_codes)\n    return False",
                            "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                            "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n    from pandas.core.reshape.concat import concat\n    result = concat([counts, freqs], axis=1)\n    result.columns = ['counts', 'freqs']\n    result.index.name = 'categories'\n    return result",
                            "@property\ndef _can_hold_na(self):\n    return True",
                            "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import union_categoricals\n    return union_categoricals(to_concat)",
                            "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        values_type = type(values).__name__\n        raise TypeError(f'only list-like objects are allowed to be passed to isin(), you passed a [{values_type}]')\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)",
                            "def replace(self, to_replace, value, inplace: bool=False):\n    \"\"\"\n    Replaces all instances of one value with another\n\n    Parameters\n    ----------\n    to_replace: object\n        The value to be replaced\n\n    value: object\n        The value to replace it with\n\n    inplace: bool\n        Whether the operation is done in-place\n\n    Returns\n    -------\n    None if inplace is True, otherwise the new Categorical after replacement\n\n\n    Examples\n    --------\n    >>> s = pd.Categorical([1, 2, 1, 3])\n    >>> s.replace(1, 3)\n    [3, 2, 3, 3]\n    Categories (2, int64): [2, 3]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cat = self if inplace else self.copy()\n    if is_list_like(to_replace):\n        replace_dict = {replace_value: value for replace_value in to_replace}\n    else:\n        replace_dict = {to_replace: value}\n    for replace_value, new_value in replace_dict.items():\n        if new_value == replace_value:\n            continue\n        if replace_value in cat.categories:\n            if isna(new_value):\n                cat.remove_categories(replace_value, inplace=True)\n                continue\n            categories = cat.categories.tolist()\n            index = categories.index(replace_value)\n            if new_value in cat.categories:\n                value_index = categories.index(new_value)\n                cat._codes[cat._codes == index] = value_index\n                cat.remove_categories(replace_value, inplace=True)\n            else:\n                categories[index] = new_value\n                cat.rename_categories(categories, inplace=True)\n    if not inplace:\n        return cat"
                        ],
                        "constructor_variables": [
                            "_codes",
                            "null_mask",
                            "sanitize_dtype",
                            "values",
                            "_dtype",
                            "old_codes",
                            "dtype",
                            "codes",
                            "full_codes"
                        ],
                        "class_level_variables": [
                            "__array_priority__",
                            "_dtype",
                            "_deprecations",
                            "_typ",
                            "to_list",
                            "__eq__",
                            "__ne__",
                            "__lt__",
                            "__gt__",
                            "__le__",
                            "__ge__",
                            "isnull",
                            "notnull"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
                            "categories(self)",
                            "categories(self, categories)",
                            "ordered(self) -> Ordered",
                            "dtype(self) -> CategoricalDtype",
                            "_constructor(self) -> Type['Categorical']",
                            "_from_sequence(cls, scalars, dtype=None, copy=False)",
                            "_formatter(self, boxed=False)",
                            "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike",
                            "itemsize(self) -> int",
                            "tolist(self) -> List[Scalar]",
                            "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)",
                            "from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
                            "codes(self) -> np.ndarray",
                            "_set_categories(self, categories, fastpath=False)",
                            "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
                            "set_ordered(self, value, inplace=False)",
                            "as_ordered(self, inplace=False)",
                            "as_unordered(self, inplace=False)",
                            "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
                            "rename_categories(self, new_categories, inplace=False)",
                            "reorder_categories(self, new_categories, ordered=None, inplace=False)",
                            "add_categories(self, new_categories, inplace=False)",
                            "remove_categories(self, removals, inplace=False)",
                            "remove_unused_categories(self, inplace=False)",
                            "map(self, mapper)",
                            "shift(self, periods, fill_value=None)",
                            "_validate_fill_value(self, fill_value)",
                            "__array__(self, dtype=None) -> np.ndarray",
                            "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                            "__setstate__(self, state)",
                            "nbytes(self)",
                            "memory_usage(self, deep=False)",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "isna(self)",
                            "notna(self)",
                            "dropna(self)",
                            "value_counts(self, dropna=True)",
                            "_internal_get_values(self)",
                            "check_for_ordered(self, op)",
                            "_values_for_argsort(self)",
                            "argsort(self, ascending=True, kind='quicksort', **kwargs)",
                            "sort_values(self, inplace: bool=False, ascending: bool=True, na_position: str='last')",
                            "_values_for_rank(self)",
                            "view(self, dtype=None)",
                            "to_dense(self)",
                            "fillna(self, value=None, method=None, limit=None)",
                            "take(self: _T, indexer, allow_fill: bool=False, fill_value=None) -> _T",
                            "_ndarray(self) -> np.ndarray",
                            "_from_backing_data(self, arr: np.ndarray) -> 'Categorical'",
                            "take_nd(self, indexer, allow_fill: bool=False, fill_value=None)",
                            "__iter__(self)",
                            "__contains__(self, key) -> bool",
                            "_tidy_repr(self, max_vals=10, footer=True) -> str",
                            "_repr_categories(self)",
                            "_repr_categories_info(self) -> str",
                            "_repr_footer(self) -> str",
                            "_get_repr(self, length=True, na_rep='NaN', footer=True) -> str",
                            "__repr__(self) -> str",
                            "_maybe_coerce_indexer(self, indexer)",
                            "__getitem__(self, key)",
                            "__setitem__(self, key, value)",
                            "_reverse_indexer(self) -> Dict[Hashable, np.ndarray]",
                            "_reduce(self, name, axis=0, **kwargs)",
                            "min(self, skipna=True)",
                            "max(self, skipna=True)",
                            "mode(self, dropna=True)",
                            "unique(self)",
                            "_values_for_factorize(self)",
                            "_from_factorized(cls, uniques, original)",
                            "equals(self, other)",
                            "is_dtype_equal(self, other)",
                            "describe(self)",
                            "_can_hold_na(self)",
                            "_concat_same_type(self, to_concat)",
                            "isin(self, values)",
                            "replace(self, to_replace, value, inplace: bool=False)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, datetime64[ns]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                                   2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, -99 days, -98 days, -97 days, -96 days, ..., -4 days, -3 days, -2 days, -1 days, 0 days]\nLength: 101\nCategories (100, timedelta64[ns]): [-99 days, -98 days, -97 days, -96 days, ..., -3 days, -2 days,\n                                    -1 days, 0 days]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ],
                        [
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            },
                            {
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "[NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]",
                                    "variable_type": "Categorical",
                                    "variable_shape": "101"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method Categorical.isna of [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]\nLength: 101\nCategories (100, period[D]): [2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\n                              2016-04-07, 2016-04-08, 2016-04-09]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._codes": {
                                    "variable_value": "array([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\n       33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83,\n       84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],\n      dtype=int8)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "101"
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from pandas.core.dtypes.missing import isna, notna",
                    "start_line": 40,
                    "end_line": 41
                }
            ],
            "inscope_functions": [
                "def _cat_compare_op(op):\n    opname = f\"__{op.__name__}__\"\n\n    @unpack_zerodim_and_defer(opname)\n    def func(self, other):\n        if is_list_like(other) and len(other) != len(self):\n            # TODO: Could this fail if the categories are listlike objects?\n            raise ValueError(\"Lengths must match.\")\n\n        if not self.ordered:\n            if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n                raise TypeError(\n                    \"Unordered Categoricals can only compare equality or not\"\n                )\n        if isinstance(other, Categorical):\n            # Two Categoricals can only be be compared if the categories are\n            # the same (maybe up to ordering, depending on ordered)\n\n            msg = \"Categoricals can only be compared if 'categories' are the same.\"\n            if len(self.categories) != len(other.categories):\n                raise TypeError(msg + \" Categories are different lengths\")\n            elif self.ordered and not (self.categories == other.categories).all():\n                raise TypeError(msg)\n            elif not set(self.categories) == set(other.categories):\n                raise TypeError(msg)\n\n            if not (self.ordered == other.ordered):\n                raise TypeError(\n                    \"Categoricals can only be compared if 'ordered' is the same\"\n                )\n            if not self.ordered and not self.categories.equals(other.categories):\n                # both unordered and different order\n                other_codes = _get_codes_for_values(other, self.categories)\n            else:\n                other_codes = other._codes\n\n            f = getattr(self._codes, opname)\n            ret = f(other_codes)\n            mask = (self._codes == -1) | (other_codes == -1)\n            if mask.any():\n                # In other series, the leads to False, so do that here too\n                if opname == \"__ne__\":\n                    ret[(self._codes == -1) & (other_codes == -1)] = True\n                else:\n                    ret[mask] = False\n            return ret\n\n        if is_scalar(other):\n            if other in self.categories:\n                i = self.categories.get_loc(other)\n                ret = getattr(self._codes, opname)(i)\n\n                if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                    # check for NaN needed if we are not equal or larger\n                    mask = self._codes == -1\n                    ret[mask] = False\n                return ret\n            else:\n                if opname == \"__eq__\":\n                    return np.zeros(len(self), dtype=bool)\n                elif opname == \"__ne__\":\n                    return np.ones(len(self), dtype=bool)\n                else:\n                    raise TypeError(\n                        f\"Cannot compare a Categorical for op {opname} with a \"\n                        \"scalar, which is not a category.\"\n                    )\n        else:\n\n            # allow categorical vs object dtype array comparisons for equality\n            # these are only positional comparisons\n            if opname in [\"__eq__\", \"__ne__\"]:\n                return getattr(np.array(self), opname)(np.array(other))\n\n            raise TypeError(\n                f\"Cannot compare a Categorical for op {opname} with \"\n                f\"type {type(other)}.\\nIf you want to compare values, \"\n                \"use 'np.asarray(cat) <op> other'.\"\n            )\n\n    func.__name__ = opname\n\n    return func",
                "def contains(cat, key, container):\n    \"\"\"\n    Helper for membership check for ``key`` in ``cat``.\n\n    This is a helper method for :method:`__contains__`\n    and :class:`CategoricalIndex.__contains__`.\n\n    Returns True if ``key`` is in ``cat.categories`` and the\n    location of ``key`` in ``categories`` is in ``container``.\n\n    Parameters\n    ----------\n    cat : :class:`Categorical`or :class:`categoricalIndex`\n    key : a hashable object\n        The key to check membership for.\n    container : Container (e.g. list-like or mapping)\n        The container to check for membership in.\n\n    Returns\n    -------\n    is_in : bool\n        True if ``key`` is in ``self.categories`` and location of\n        ``key`` in ``categories`` is in ``container``, else False.\n\n    Notes\n    -----\n    This method does not check for NaN values. Do that separately\n    before calling this method.\n    \"\"\"\n    hash(key)\n\n    # get location of key in categories.\n    # If a KeyError, the key isn't in categories, so logically\n    #  can't be in container either.\n    try:\n        loc = cat.categories.get_loc(key)\n    except (KeyError, TypeError):\n        return False\n\n    # loc is the location of key in categories, but also the *value*\n    # for key in container. So, `key` may be in categories,\n    # but still not in `container`. Example ('b' in categories,\n    # but not in values):\n    # 'b' in Categorical(['a'], categories=['a', 'b'])  # False\n    if is_scalar(loc):\n        return loc in container\n    else:\n        # if categories is an IntervalIndex, loc is an array.\n        return any(loc_ in container for loc_ in loc)",
                "def _get_codes_for_values(values, categories):\n    \"\"\"\n    utility routine to turn values into codes given the specified categories\n    \"\"\"\n    dtype_equal = is_dtype_equal(values.dtype, categories.dtype)\n\n    if is_extension_array_dtype(categories.dtype) and is_object_dtype(values):\n        # Support inferring the correct extension dtype from an array of\n        # scalar objects. e.g.\n        # Categorical(array[Period, Period], categories=PeriodIndex(...))\n        cls = categories.dtype.construct_array_type()\n        values = maybe_cast_to_extension_array(cls, values)\n        if not isinstance(values, cls):\n            # exception raised in _from_sequence\n            values = ensure_object(values)\n            categories = ensure_object(categories)\n    elif not dtype_equal:\n        values = ensure_object(values)\n        categories = ensure_object(categories)\n\n    hash_klass, vals = _get_data_algo(values)\n    _, cats = _get_data_algo(categories)\n    t = hash_klass(len(cats))\n    t.map_locations(cats)\n    return coerce_indexer_dtype(t.lookup(vals), cats)",
                "def recode_for_categories(codes: np.ndarray, old_categories, new_categories):\n    \"\"\"\n    Convert a set of codes for to a new set of categories\n\n    Parameters\n    ----------\n    codes : np.ndarray\n    old_categories, new_categories : Index\n\n    Returns\n    -------\n    new_codes : np.ndarray[np.int64]\n\n    Examples\n    --------\n    >>> old_cat = pd.Index(['b', 'a', 'c'])\n    >>> new_cat = pd.Index(['a', 'b'])\n    >>> codes = np.array([0, 1, 1, 2])\n    >>> recode_for_categories(codes, old_cat, new_cat)\n    array([ 1,  0,  0, -1], dtype=int8)\n    \"\"\"\n    if len(old_categories) == 0:\n        # All null anyway, so just retain the nulls\n        return codes.copy()\n    elif new_categories.equals(old_categories):\n        # Same categories, so no need to actually recode\n        return codes.copy()\n    indexer = coerce_indexer_dtype(\n        new_categories.get_indexer(old_categories), new_categories\n    )\n    new_codes = take_1d(indexer, codes.copy(), fill_value=-1)\n    return new_codes",
                "def _convert_to_list_like(list_like):\n    if hasattr(list_like, \"dtype\"):\n        return list_like\n    if isinstance(list_like, list):\n        return list_like\n    if is_sequence(list_like) or isinstance(list_like, tuple) or is_iterator(list_like):\n        return list(list_like)\n    elif is_scalar(list_like):\n        return [list_like]\n    else:\n        # TODO: is this reached?\n        return [list_like]",
                "def factorize_from_iterable(values):\n    \"\"\"\n    Factorize an input `values` into `categories` and `codes`. Preserves\n    categorical dtype in `categories`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    values : list-like\n\n    Returns\n    -------\n    codes : ndarray\n    categories : Index\n        If `values` has a categorical dtype, then `categories` is\n        a CategoricalIndex keeping the categories and order of `values`.\n    \"\"\"\n    if not is_list_like(values):\n        raise TypeError(\"Input must be list-like\")\n\n    if is_categorical_dtype(values):\n        values = extract_array(values)\n        # The Categorical we want to build has the same categories\n        # as values but its codes are by def [0, ..., len(n_categories) - 1]\n        cat_codes = np.arange(len(values.categories), dtype=values.codes.dtype)\n        categories = Categorical.from_codes(cat_codes, dtype=values.dtype)\n        codes = values.codes\n    else:\n        # The value of ordered is irrelevant since we don't use cat as such,\n        # but only the resulting categories, the order of which is independent\n        # from ordered. Set ordered to False as default. See GH #15457\n        cat = Categorical(values, ordered=False)\n        categories = cat.categories\n        codes = cat.codes\n    return codes, categories",
                "def factorize_from_iterables(iterables):\n    \"\"\"\n    A higher-level wrapper over `factorize_from_iterable`.\n\n    *This is an internal function*\n\n    Parameters\n    ----------\n    iterables : list-like of list-likes\n\n    Returns\n    -------\n    codes_list : list of ndarrays\n    categories_list : list of Indexes\n\n    Notes\n    -----\n    See `factorize_from_iterable` for more info.\n    \"\"\"\n    if len(iterables) == 0:\n        # For consistency, it should return a list of 2 lists.\n        return [[], []]\n    return map(list, zip(*(factorize_from_iterable(it) for it in iterables)))",
                "@unpack_zerodim_and_defer(opname)\ndef func(self, other):\n    if is_list_like(other) and len(other) != len(self):\n        # TODO: Could this fail if the categories are listlike objects?\n        raise ValueError(\"Lengths must match.\")\n\n    if not self.ordered:\n        if opname in [\"__lt__\", \"__gt__\", \"__le__\", \"__ge__\"]:\n            raise TypeError(\n                \"Unordered Categoricals can only compare equality or not\"\n            )\n    if isinstance(other, Categorical):\n        # Two Categoricals can only be be compared if the categories are\n        # the same (maybe up to ordering, depending on ordered)\n\n        msg = \"Categoricals can only be compared if 'categories' are the same.\"\n        if len(self.categories) != len(other.categories):\n            raise TypeError(msg + \" Categories are different lengths\")\n        elif self.ordered and not (self.categories == other.categories).all():\n            raise TypeError(msg)\n        elif not set(self.categories) == set(other.categories):\n            raise TypeError(msg)\n\n        if not (self.ordered == other.ordered):\n            raise TypeError(\n                \"Categoricals can only be compared if 'ordered' is the same\"\n            )\n        if not self.ordered and not self.categories.equals(other.categories):\n            # both unordered and different order\n            other_codes = _get_codes_for_values(other, self.categories)\n        else:\n            other_codes = other._codes\n\n        f = getattr(self._codes, opname)\n        ret = f(other_codes)\n        mask = (self._codes == -1) | (other_codes == -1)\n        if mask.any():\n            # In other series, the leads to False, so do that here too\n            if opname == \"__ne__\":\n                ret[(self._codes == -1) & (other_codes == -1)] = True\n            else:\n                ret[mask] = False\n        return ret\n\n    if is_scalar(other):\n        if other in self.categories:\n            i = self.categories.get_loc(other)\n            ret = getattr(self._codes, opname)(i)\n\n            if opname not in {\"__eq__\", \"__ge__\", \"__gt__\"}:\n                # check for NaN needed if we are not equal or larger\n                mask = self._codes == -1\n                ret[mask] = False\n            return ret\n        else:\n            if opname == \"__eq__\":\n                return np.zeros(len(self), dtype=bool)\n            elif opname == \"__ne__\":\n                return np.ones(len(self), dtype=bool)\n            else:\n                raise TypeError(\n                    f\"Cannot compare a Categorical for op {opname} with a \"\n                    \"scalar, which is not a category.\"\n                )\n    else:\n\n        # allow categorical vs object dtype array comparisons for equality\n        # these are only positional comparisons\n        if opname in [\"__eq__\", \"__ne__\"]:\n            return getattr(np.array(self), opname)(np.array(other))\n\n        raise TypeError(\n            f\"Cannot compare a Categorical for op {opname} with \"\n            f\"type {type(other)}.\\nIf you want to compare values, \"\n            \"use 'np.asarray(cat) <op> other'.\"\n        )",
                "def __init__(\n    self, values, categories=None, ordered=None, dtype=None, fastpath=False\n):\n\n    dtype = CategoricalDtype._from_values_or_dtype(\n        values, categories, ordered, dtype\n    )\n    # At this point, dtype is always a CategoricalDtype, but\n    # we may have dtype.categories be None, and we need to\n    # infer categories in a factorization step further below\n\n    if fastpath:\n        self._codes = coerce_indexer_dtype(values, dtype.categories)\n        self._dtype = self._dtype.update_dtype(dtype)\n        return\n\n    # null_mask indicates missing values we want to exclude from inference.\n    # This means: only missing values in list-likes (not arrays/ndframes).\n    null_mask = np.array(False)\n\n    # sanitize input\n    if is_categorical_dtype(values):\n        if dtype.categories is None:\n            dtype = CategoricalDtype(values.categories, dtype.ordered)\n    elif not isinstance(values, (ABCIndexClass, ABCSeries)):\n        # sanitize_array coerces np.nan to a string under certain versions\n        # of numpy\n        values = maybe_infer_to_datetimelike(values, convert_dates=True)\n        if not isinstance(values, np.ndarray):\n            values = _convert_to_list_like(values)\n\n            # By convention, empty lists result in object dtype:\n            sanitize_dtype = np.dtype(\"O\") if len(values) == 0 else None\n            null_mask = isna(values)\n            if null_mask.any():\n                values = [values[idx] for idx in np.where(~null_mask)[0]]\n            values = sanitize_array(values, None, dtype=sanitize_dtype)\n\n    if dtype.categories is None:\n        try:\n            codes, categories = factorize(values, sort=True)\n        except TypeError as err:\n            codes, categories = factorize(values, sort=False)\n            if dtype.ordered:\n                # raise, as we don't have a sortable data structure and so\n                # the user should give us one by specifying categories\n                raise TypeError(\n                    \"'values' is not ordered, please \"\n                    \"explicitly specify the categories order \"\n                    \"by passing in a categories argument.\"\n                ) from err\n        except ValueError as err:\n\n            # FIXME\n            raise NotImplementedError(\n                \"> 1 ndim Categorical are not supported at this time\"\n            ) from err\n\n        # we're inferring from values\n        dtype = CategoricalDtype(categories, dtype.ordered)\n\n    elif is_categorical_dtype(values.dtype):\n        old_codes = (\n            values._values.codes if isinstance(values, ABCSeries) else values.codes\n        )\n        codes = recode_for_categories(\n            old_codes, values.dtype.categories, dtype.categories\n        )\n\n    else:\n        codes = _get_codes_for_values(values, dtype.categories)\n\n    if null_mask.any():\n        # Reinsert -1 placeholders for previously removed missing values\n        full_codes = -np.ones(null_mask.shape, dtype=codes.dtype)\n        full_codes[~null_mask] = codes\n        codes = full_codes\n\n    self._dtype = self._dtype.update_dtype(dtype)\n    self._codes = coerce_indexer_dtype(codes, dtype.categories)",
                "@property\ndef categories(self):\n    \"\"\"\n    The categories of this categorical.\n\n    Setting assigns new values to each category (effectively a rename of\n    each individual category).\n\n    The assigned value has to be a list-like object. All items must be\n    unique and the number of items in the new categories must be the same\n    as the number of items in the old categories.\n\n    Assigning to `categories` is a inplace operation!\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not validate as categories or if the\n        number of new categories is unequal the number of old categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    return self.dtype.categories",
                "@categories.setter\ndef categories(self, categories):\n    new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if self.dtype.categories is not None and len(self.dtype.categories) != len(\n        new_dtype.categories\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items as the old categories!\"\n        )\n    self._dtype = new_dtype",
                "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    return self.dtype.ordered",
                "@property\ndef dtype(self) -> CategoricalDtype:\n    \"\"\"\n    The :class:`~pandas.api.types.CategoricalDtype` for this instance.\n    \"\"\"\n    return self._dtype",
                "@property\ndef _constructor(self) -> Type[\"Categorical\"]:\n    return Categorical",
                "@classmethod\ndef _from_sequence(cls, scalars, dtype=None, copy=False):\n    return Categorical(scalars, dtype=dtype)",
                "def _formatter(self, boxed=False):\n    # Defer to CategoricalFormatter's formatter.\n    return None",
                "def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike:\n    \"\"\"\n    Coerce this type to another dtype\n\n    Parameters\n    ----------\n    dtype : numpy dtype or pandas type\n    copy : bool, default True\n        By default, astype always returns a newly allocated object.\n        If copy is set to False and dtype is categorical, the original\n        object is returned.\n    \"\"\"\n    if is_categorical_dtype(dtype):\n        dtype = cast(Union[str, CategoricalDtype], dtype)\n\n        # GH 10696/18593\n        dtype = self.dtype.update_dtype(dtype)\n        self = self.copy() if copy else self\n        if dtype == self.dtype:\n            return self\n        return self._set_dtype(dtype)\n    if is_extension_array_dtype(dtype):\n        return array(self, dtype=dtype, copy=copy)\n    if is_integer_dtype(dtype) and self.isna().any():\n        raise ValueError(\"Cannot convert float NaN to integer\")\n    return np.array(self, dtype=dtype, copy=copy)",
                "@cache_readonly\ndef itemsize(self) -> int:\n    \"\"\"\n    return the size of a single category\n    \"\"\"\n    return self.categories.itemsize",
                "def tolist(self) -> List[Scalar]:\n    \"\"\"\n    Return a list of the values.\n\n    These are each a scalar type, which is a Python scalar\n    (for str, int, float) or a pandas scalar\n    (for Timestamp/Timedelta/Interval/Period)\n    \"\"\"\n    return list(self)",
                "@classmethod\ndef _from_inferred_categories(\n    cls, inferred_categories, inferred_codes, dtype, true_values=None\n):\n    \"\"\"\n    Construct a Categorical from inferred values.\n\n    For inferred categories (`dtype` is None) the categories are sorted.\n    For explicit `dtype`, the `inferred_categories` are cast to the\n    appropriate type.\n\n    Parameters\n    ----------\n    inferred_categories : Index\n    inferred_codes : Index\n    dtype : CategoricalDtype or 'category'\n    true_values : list, optional\n        If none are provided, the default ones are\n        \"True\", \"TRUE\", and \"true.\"\n\n    Returns\n    -------\n    Categorical\n    \"\"\"\n    from pandas import Index, to_numeric, to_datetime, to_timedelta\n\n    cats = Index(inferred_categories)\n    known_categories = (\n        isinstance(dtype, CategoricalDtype) and dtype.categories is not None\n    )\n\n    if known_categories:\n        # Convert to a specialized type with `dtype` if specified.\n        if dtype.categories.is_numeric():\n            cats = to_numeric(inferred_categories, errors=\"coerce\")\n        elif is_datetime64_dtype(dtype.categories):\n            cats = to_datetime(inferred_categories, errors=\"coerce\")\n        elif is_timedelta64_dtype(dtype.categories):\n            cats = to_timedelta(inferred_categories, errors=\"coerce\")\n        elif dtype.categories.is_boolean():\n            if true_values is None:\n                true_values = [\"True\", \"TRUE\", \"true\"]\n\n            cats = cats.isin(true_values)\n\n    if known_categories:\n        # Recode from observation order to dtype.categories order.\n        categories = dtype.categories\n        codes = recode_for_categories(inferred_codes, cats, categories)\n    elif not cats.is_monotonic_increasing:\n        # Sort categories and recode for unknown categories.\n        unsorted = cats.copy()\n        categories = cats.sort_values()\n\n        codes = recode_for_categories(inferred_codes, unsorted, categories)\n        dtype = CategoricalDtype(categories, ordered=False)\n    else:\n        dtype = CategoricalDtype(cats, ordered=False)\n        codes = inferred_codes\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                "@classmethod\ndef from_codes(cls, codes, categories=None, ordered=None, dtype=None):\n    \"\"\"\n    Make a Categorical type from codes and categories or dtype.\n\n    This constructor is useful if you already have codes and\n    categories/dtype and so do not need the (computation intensive)\n    factorization step, which is usually done on the constructor.\n\n    If your data does not follow this convention, please use the normal\n    constructor.\n\n    Parameters\n    ----------\n    codes : array-like of int\n        An integer array, where each integer points to a category in\n        categories or dtype.categories, or else is -1 for NaN.\n    categories : index-like, optional\n        The categories for the categorical. Items need to be unique.\n        If the categories are not given here, then they must be provided\n        in `dtype`.\n    ordered : bool, optional\n        Whether or not this categorical is treated as an ordered\n        categorical. If not given here or in `dtype`, the resulting\n        categorical will be unordered.\n    dtype : CategoricalDtype or \"category\", optional\n        If :class:`CategoricalDtype`, cannot be used together with\n        `categories` or `ordered`.\n\n        .. versionadded:: 0.24.0\n\n           When `dtype` is provided, neither `categories` nor `ordered`\n           should be provided.\n\n    Returns\n    -------\n    Categorical\n\n    Examples\n    --------\n    >>> dtype = pd.CategoricalDtype(['a', 'b'], ordered=True)\n    >>> pd.Categorical.from_codes(codes=[0, 1, 0, 1], dtype=dtype)\n    [a, b, a, b]\n    Categories (2, object): [a < b]\n    \"\"\"\n    dtype = CategoricalDtype._from_values_or_dtype(\n        categories=categories, ordered=ordered, dtype=dtype\n    )\n    if dtype.categories is None:\n        msg = (\n            \"The categories must be provided in 'categories' or \"\n            \"'dtype'. Both were None.\"\n        )\n        raise ValueError(msg)\n\n    if is_extension_array_dtype(codes) and is_integer_dtype(codes):\n        # Avoid the implicit conversion of Int to object\n        if isna(codes).any():\n            raise ValueError(\"codes cannot contain NA values\")\n        codes = codes.to_numpy(dtype=np.int64)\n    else:\n        codes = np.asarray(codes)\n    if len(codes) and not is_integer_dtype(codes):\n        raise ValueError(\"codes need to be array-like integers\")\n\n    if len(codes) and (codes.max() >= len(dtype.categories) or codes.min() < -1):\n        raise ValueError(\"codes need to be between -1 and len(categories)-1\")\n\n    return cls(codes, dtype=dtype, fastpath=True)",
                "@property\ndef codes(self) -> np.ndarray:\n    \"\"\"\n    The category codes of this categorical.\n\n    Codes are an array of integers which are the positions of the actual\n    values in the categories array.\n\n    There is no setter, use the other categorical methods and the normal item\n    setter to change values in the categorical.\n\n    Returns\n    -------\n    ndarray[int]\n        A non-writable view of the `codes` array.\n    \"\"\"\n    v = self._codes.view()\n    v.flags.writeable = False\n    return v",
                "def _set_categories(self, categories, fastpath=False):\n    \"\"\"\n    Sets new categories inplace\n\n    Parameters\n    ----------\n    fastpath : bool, default False\n       Don't perform validation of the categories for uniqueness or nulls\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'b'])\n    >>> c\n    [a, b]\n    Categories (2, object): [a, b]\n\n    >>> c._set_categories(pd.Index(['a', 'c']))\n    >>> c\n    [a, c]\n    Categories (2, object): [a, c]\n    \"\"\"\n    if fastpath:\n        new_dtype = CategoricalDtype._from_fastpath(categories, self.ordered)\n    else:\n        new_dtype = CategoricalDtype(categories, ordered=self.ordered)\n    if (\n        not fastpath\n        and self.dtype.categories is not None\n        and len(new_dtype.categories) != len(self.dtype.categories)\n    ):\n        raise ValueError(\n            \"new categories need to have the same number of \"\n            \"items than the old categories!\"\n        )\n\n    self._dtype = new_dtype",
                "def _set_dtype(self, dtype: CategoricalDtype) -> \"Categorical\":\n    \"\"\"\n    Internal method for directly updating the CategoricalDtype\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Notes\n    -----\n    We don't do any validation here. It's assumed that the dtype is\n    a (valid) instance of `CategoricalDtype`.\n    \"\"\"\n    codes = recode_for_categories(self.codes, self.categories, dtype.categories)\n    return type(self)(codes, dtype=dtype, fastpath=True)",
                "def set_ordered(self, value, inplace=False):\n    \"\"\"\n    Set the ordered attribute to the boolean value.\n\n    Parameters\n    ----------\n    value : bool\n       Set whether this categorical is ordered (True) or not (False).\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to the value.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    new_dtype = CategoricalDtype(self.categories, ordered=value)\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    if not inplace:\n        return cat",
                "def as_ordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be ordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to True.\n\n    Returns\n    -------\n    Categorical\n        Ordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(True, inplace=inplace)",
                "def as_unordered(self, inplace=False):\n    \"\"\"\n    Set the Categorical to be unordered.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to set the ordered attribute in-place or return\n       a copy of this categorical with ordered set to False.\n\n    Returns\n    -------\n    Categorical\n        Unordered Categorical.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    return self.set_ordered(False, inplace=inplace)",
                "def set_categories(self, new_categories, ordered=None, rename=False, inplace=False):\n    \"\"\"\n    Set the categories to the specified new_categories.\n\n    `new_categories` can include new categories (which will result in\n    unused categories) or remove old categories (which results in values\n    set to NaN). If `rename==True`, the categories will simple be renamed\n    (less or more items than in old categories will result in values set to\n    NaN or in unused categories respectively).\n\n    This method can be used to perform more than one action of adding,\n    removing, and reordering simultaneously and is therefore faster than\n    performing the individual steps via the more specialised methods.\n\n    On the other hand this methods does not do checks (e.g., whether the\n    old categories are included in the new categories on a reorder), which\n    can result in surprising changes, for example when using special string\n    dtypes, which does not considers a S1 string equal to a single char\n    python string.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, default False\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    rename : bool, default False\n       Whether or not the new_categories should be considered as a rename\n       of the old categories or as reordered categories.\n    inplace : bool, default False\n       Whether or not to reorder the categories in-place or return a copy\n       of this categorical with reordered categories.\n\n    Returns\n    -------\n    Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If new_categories does not validate as categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if ordered is None:\n        ordered = self.dtype.ordered\n    new_dtype = CategoricalDtype(new_categories, ordered=ordered)\n\n    cat = self if inplace else self.copy()\n    if rename:\n        if cat.dtype.categories is not None and len(new_dtype.categories) < len(\n            cat.dtype.categories\n        ):\n            # remove all _codes which are larger and set to -1/NaN\n            cat._codes[cat._codes >= len(new_dtype.categories)] = -1\n    else:\n        codes = recode_for_categories(\n            cat.codes, cat.categories, new_dtype.categories\n        )\n        cat._codes = codes\n    cat._dtype = new_dtype\n\n    if not inplace:\n        return cat",
                "def rename_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Rename categories.\n\n    Parameters\n    ----------\n    new_categories : list-like, dict-like or callable\n\n        New categories which will replace old categories.\n\n        * list-like: all items must be unique and the number of items in\n          the new categories must match the existing number of categories.\n\n        * dict-like: specifies a mapping from\n          old categories to new. Categories not contained in the mapping\n          are passed through and extra categories in the mapping are\n          ignored.\n\n        * callable : a callable that is called on all items in the old\n          categories and whose return values comprise the new categories.\n\n        .. versionadded:: 0.23.0.\n\n    inplace : bool, default False\n        Whether or not to rename the categories inplace or return a copy of\n        this categorical with renamed categories.\n\n    Returns\n    -------\n    cat : Categorical or None\n       With ``inplace=False``, the new categorical is returned.\n       With ``inplace=True``, there is no return value.\n\n    Raises\n    ------\n    ValueError\n        If new categories are list-like and do not have the same number of\n        items than the current categories or do not validate as categories\n\n    See Also\n    --------\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n\n    Examples\n    --------\n    >>> c = pd.Categorical(['a', 'a', 'b'])\n    >>> c.rename_categories([0, 1])\n    [0, 0, 1]\n    Categories (2, int64): [0, 1]\n\n    For dict-like ``new_categories``, extra keys are ignored and\n    categories not in the dictionary are passed through\n\n    >>> c.rename_categories({'a': 'A', 'c': 'C'})\n    [A, A, b]\n    Categories (2, object): [A, b]\n\n    You may also provide a callable to create the new categories\n\n    >>> c.rename_categories(lambda x: x.upper())\n    [A, A, B]\n    Categories (2, object): [A, B]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n\n    if is_dict_like(new_categories):\n        cat.categories = [new_categories.get(item, item) for item in cat.categories]\n    elif callable(new_categories):\n        cat.categories = [new_categories(item) for item in cat.categories]\n    else:\n        cat.categories = new_categories\n    if not inplace:\n        return cat",
                "def reorder_categories(self, new_categories, ordered=None, inplace=False):\n    \"\"\"\n    Reorder categories as specified in new_categories.\n\n    `new_categories` need to include all old categories and no new category\n    items.\n\n    Parameters\n    ----------\n    new_categories : Index-like\n       The categories in new order.\n    ordered : bool, optional\n       Whether or not the categorical is treated as a ordered categorical.\n       If not given, do not change the ordered information.\n    inplace : bool, default False\n       Whether or not to reorder the categories inplace or return a copy of\n       this categorical with reordered categories.\n\n    Returns\n    -------\n    cat : Categorical with reordered categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories do not contain all old category items or any\n        new ones\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if set(self.dtype.categories) != set(new_categories):\n        raise ValueError(\n            \"items in new_categories are not the same as in old categories\"\n        )\n    return self.set_categories(new_categories, ordered=ordered, inplace=inplace)",
                "def add_categories(self, new_categories, inplace=False):\n    \"\"\"\n    Add new categories.\n\n    `new_categories` will be included at the last/highest place in the\n    categories and will be unused directly after this call.\n\n    Parameters\n    ----------\n    new_categories : category or list-like of category\n       The new categories to be included.\n    inplace : bool, default False\n       Whether or not to add the categories inplace or return a copy of\n       this categorical with added categories.\n\n    Returns\n    -------\n    cat : Categorical with new categories added or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the new categories include old categories or do not validate as\n        categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    remove_categories : Remove the specified categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(new_categories):\n        new_categories = [new_categories]\n    already_included = set(new_categories) & set(self.dtype.categories)\n    if len(already_included) != 0:\n        raise ValueError(\n            f\"new categories must not include old categories: {already_included}\"\n        )\n    new_categories = list(self.dtype.categories) + list(new_categories)\n    new_dtype = CategoricalDtype(new_categories, self.ordered)\n\n    cat = self if inplace else self.copy()\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(cat._codes, new_dtype.categories)\n    if not inplace:\n        return cat",
                "def remove_categories(self, removals, inplace=False):\n    \"\"\"\n    Remove the specified categories.\n\n    `removals` must be included in the old categories. Values which were in\n    the removed categories will be set to NaN\n\n    Parameters\n    ----------\n    removals : category or list of categories\n       The categories which should be removed.\n    inplace : bool, default False\n       Whether or not to remove the categories inplace or return a copy of\n       this categorical with removed categories.\n\n    Returns\n    -------\n    cat : Categorical with removed categories or None if inplace.\n\n    Raises\n    ------\n    ValueError\n        If the removals are not contained in the categories\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_unused_categories : Remove categories which are not used.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_list_like(removals):\n        removals = [removals]\n\n    removal_set = set(removals)\n    not_included = removal_set - set(self.dtype.categories)\n    new_categories = [c for c in self.dtype.categories if c not in removal_set]\n\n    # GH 10156\n    if any(isna(removals)):\n        not_included = {x for x in not_included if notna(x)}\n        new_categories = [x for x in new_categories if notna(x)]\n\n    if len(not_included) != 0:\n        raise ValueError(f\"removals must all be in old categories: {not_included}\")\n\n    return self.set_categories(\n        new_categories, ordered=self.ordered, rename=False, inplace=inplace\n    )",
                "def remove_unused_categories(self, inplace=False):\n    \"\"\"\n    Remove categories which are not used.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n       Whether or not to drop unused categories inplace or return a copy of\n       this categorical with unused categories dropped.\n\n    Returns\n    -------\n    cat : Categorical with unused categories dropped or None if inplace.\n\n    See Also\n    --------\n    rename_categories : Rename categories.\n    reorder_categories : Reorder categories.\n    add_categories : Add new categories.\n    remove_categories : Remove the specified categories.\n    set_categories : Set the categories to the specified ones.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n    idx, inv = np.unique(cat._codes, return_inverse=True)\n\n    if idx.size != 0 and idx[0] == -1:  # na sentinel\n        idx, inv = idx[1:], inv - 1\n\n    new_categories = cat.dtype.categories.take(idx)\n    new_dtype = CategoricalDtype._from_fastpath(\n        new_categories, ordered=self.ordered\n    )\n    cat._dtype = new_dtype\n    cat._codes = coerce_indexer_dtype(inv, new_dtype.categories)\n\n    if not inplace:\n        return cat",
                "def map(self, mapper):\n    \"\"\"\n    Map categories using input correspondence (dict, Series, or function).\n\n    Maps the categories to new categories. If the mapping correspondence is\n    one-to-one the result is a :class:`~pandas.Categorical` which has the\n    same order property as the original, otherwise a :class:`~pandas.Index`\n    is returned. NaN values are unaffected.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.Categorical or pandas.Index\n        Mapped categorical.\n\n    See Also\n    --------\n    CategoricalIndex.map : Apply a mapping correspondence on a\n        :class:`~pandas.CategoricalIndex`.\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'b', 'c'])\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a, b, c]\n    >>> cat.map(lambda x: x.upper())\n    [A, B, C]\n    Categories (3, object): [A, B, C]\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    [first, second, third]\n    Categories (3, object): [first, second, third]\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> cat = pd.Categorical(['a', 'b', 'c'], ordered=True)\n    >>> cat\n    [a, b, c]\n    Categories (3, object): [a < b < c]\n    >>> cat.map({'a': 3, 'b': 2, 'c': 1})\n    [3, 2, 1]\n    Categories (3, int64): [3 < 2 < 1]\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> cat.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> cat.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    new_categories = self.categories.map(mapper)\n    try:\n        return self.from_codes(\n            self._codes.copy(), categories=new_categories, ordered=self.ordered\n        )\n    except ValueError:\n        # NA values are represented in self._codes with -1\n        # np.take causes NA values to take final element in new_categories\n        if np.any(self._codes == -1):\n            new_categories = new_categories.insert(len(new_categories), np.nan)\n        return np.take(new_categories, self._codes)",
                "def shift(self, periods, fill_value=None):\n    \"\"\"\n    Shift Categorical by desired number of periods.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative\n    fill_value : object, optional\n        The scalar value to use for newly introduced missing values.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    shifted : Categorical\n    \"\"\"\n    # since categoricals always have ndim == 1, an axis parameter\n    # doesn't make any sense here.\n    codes = self.codes\n    if codes.ndim > 1:\n        raise NotImplementedError(\"Categorical with ndim > 1.\")\n\n    fill_value = self._validate_fill_value(fill_value)\n\n    codes = shift(codes, periods, axis=0, fill_value=fill_value)\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                "def _validate_fill_value(self, fill_value):\n    \"\"\"\n    Convert a user-facing fill_value to a representation to use with our\n    underlying ndarray, raising ValueError if this is not possible.\n\n    Parameters\n    ----------\n    fill_value : object\n\n    Returns\n    -------\n    fill_value : int\n\n    Raises\n    ------\n    ValueError\n    \"\"\"\n\n    if isna(fill_value):\n        fill_value = -1\n    elif fill_value in self.categories:\n        fill_value = self.categories.get_loc(fill_value)\n    else:\n        raise ValueError(\n            f\"'fill_value={fill_value}' is not present \"\n            \"in this Categorical's categories\"\n        )\n    return fill_value",
                "def __array__(self, dtype=None) -> np.ndarray:\n    \"\"\"\n    The numpy array interface.\n\n    Returns\n    -------\n    numpy.array\n        A numpy array of either the specified dtype or,\n        if dtype==None (default), the same dtype as\n        categorical.categories.dtype.\n    \"\"\"\n    ret = take_1d(self.categories.values, self._codes)\n    if dtype and not is_dtype_equal(dtype, self.categories.dtype):\n        return np.asarray(ret, dtype)\n    if is_extension_array_dtype(ret):\n        # When we're a Categorical[ExtensionArray], like Interval,\n        # we need to ensure __array__ get's all the way to an\n        # ndarray.\n        ret = np.asarray(ret)\n    return ret",
                "def __array_ufunc__(self, ufunc, method, *inputs, **kwargs):\n    # for binary ops, use our custom dunder methods\n    result = ops.maybe_dispatch_ufunc_to_dunder_op(\n        self, ufunc, method, *inputs, **kwargs\n    )\n    if result is not NotImplemented:\n        return result\n\n    # for all other cases, raise for now (similarly as what happens in\n    # Series.__array_prepare__)\n    raise TypeError(\n        f\"Object with dtype {self.dtype} cannot perform \"\n        f\"the numpy op {ufunc.__name__}\"\n    )",
                "def __setstate__(self, state):\n    \"\"\"Necessary for making this object picklable\"\"\"\n    if not isinstance(state, dict):\n        raise Exception(\"invalid pickle state\")\n\n    if \"_dtype\" not in state:\n        state[\"_dtype\"] = CategoricalDtype(state[\"_categories\"], state[\"_ordered\"])\n\n    for k, v in state.items():\n        setattr(self, k, v)",
                "@property\ndef nbytes(self):\n    return self._codes.nbytes + self.dtype.categories.values.nbytes",
                "def memory_usage(self, deep=False):\n    \"\"\"\n    Memory usage of my values\n\n    Parameters\n    ----------\n    deep : bool\n        Introspect the data deeply, interrogate\n        `object` dtypes for system-level memory consumption\n\n    Returns\n    -------\n    bytes used\n\n    Notes\n    -----\n    Memory usage does not include memory consumed by elements that\n    are not components of the array if deep=False\n\n    See Also\n    --------\n    numpy.ndarray.nbytes\n    \"\"\"\n    return self._codes.nbytes + self.dtype.categories.memory_usage(deep=deep)",
                "@doc(_shared_docs[\"searchsorted\"], klass=\"Categorical\")\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    # searchsorted is very performance sensitive. By converting codes\n    # to same dtype as self.codes, we get much faster performance.\n    if is_scalar(value):\n        codes = self.categories.get_loc(value)\n        codes = self.codes.dtype.type(codes)\n    else:\n        locs = [self.categories.get_loc(x) for x in value]\n        codes = np.array(locs, dtype=self.codes.dtype)\n    return self.codes.searchsorted(codes, side=side, sorter=sorter)",
                "def isna(self):\n    \"\"\"\n    Detect missing values\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    a boolean array of whether my values are null\n\n    See Also\n    --------\n    isna : Top-level isna.\n    isnull : Alias of isna.\n    Categorical.notna : Boolean inverse of Categorical.isna.\n\n    \"\"\"\n    ret = self._codes == -1\n    return ret",
                "def notna(self):\n    \"\"\"\n    Inverse of isna\n\n    Both missing values (-1 in .codes) and NA as a category are detected as\n    null.\n\n    Returns\n    -------\n    a boolean array of whether my values are not null\n\n    See Also\n    --------\n    notna : Top-level notna.\n    notnull : Alias of notna.\n    Categorical.isna : Boolean inverse of Categorical.notna.\n\n    \"\"\"\n    return ~self.isna()",
                "def dropna(self):\n    \"\"\"\n    Return the Categorical without null values.\n\n    Missing values (-1 in .codes) are detected.\n\n    Returns\n    -------\n    valid : Categorical\n    \"\"\"\n    result = self[self.notna()]\n\n    return result",
                "def value_counts(self, dropna=True):\n    \"\"\"\n    Return a Series containing counts of each category.\n\n    Every category will have an entry, even those with a count of 0.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't include counts of NaN.\n\n    Returns\n    -------\n    counts : Series\n\n    See Also\n    --------\n    Series.value_counts\n    \"\"\"\n    from pandas import Series, CategoricalIndex\n\n    code, cat = self._codes, self.categories\n    ncat, mask = len(cat), 0 <= code\n    ix, clean = np.arange(ncat), mask.all()\n\n    if dropna or clean:\n        obs = code if clean else code[mask]\n        count = np.bincount(obs, minlength=ncat or 0)\n    else:\n        count = np.bincount(np.where(mask, code, ncat))\n        ix = np.append(ix, -1)\n\n    ix = self._constructor(ix, dtype=self.dtype, fastpath=True)\n\n    return Series(count, index=CategoricalIndex(ix), dtype=\"int64\")",
                "def _internal_get_values(self):\n    \"\"\"\n    Return the values.\n\n    For internal compatibility with pandas formatting.\n\n    Returns\n    -------\n    np.ndarray or Index\n        A numpy array of the same dtype as categorical.categories.dtype or\n        Index if datetime / periods.\n    \"\"\"\n    # if we are a datetime and period index, return Index to keep metadata\n    if needs_i8_conversion(self.categories.dtype):\n        return self.categories.take(self._codes, fill_value=np.nan)\n    elif is_integer_dtype(self.categories) and -1 in self._codes:\n        return self.categories.astype(\"object\").take(self._codes, fill_value=np.nan)\n    return np.array(self)",
                "def check_for_ordered(self, op):\n    \"\"\" assert that we are ordered \"\"\"\n    if not self.ordered:\n        raise TypeError(\n            f\"Categorical is not ordered for operation {op}\\n\"\n            \"you can use .as_ordered() to change the \"\n            \"Categorical to an ordered one\\n\"\n        )",
                "def _values_for_argsort(self):\n    return self._codes",
                "def argsort(self, ascending=True, kind=\"quicksort\", **kwargs):\n    \"\"\"\n    Return the indices that would sort the Categorical.\n\n    .. versionchanged:: 0.25.0\n\n       Changed to sort missing values at the end.\n\n    Parameters\n    ----------\n    ascending : bool, default True\n        Whether the indices should result in an ascending\n        or descending sort.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, optional\n        Sorting algorithm.\n    **kwargs:\n        passed through to :func:`numpy.argsort`.\n\n    Returns\n    -------\n    numpy.array\n\n    See Also\n    --------\n    numpy.ndarray.argsort\n\n    Notes\n    -----\n    While an ordering is applied to the category values, arg-sorting\n    in this context refers more to organizing and grouping together\n    based on matching category values. Thus, this function can be\n    called on an unordered Categorical instance unlike the functions\n    'Categorical.min' and 'Categorical.max'.\n\n    Examples\n    --------\n    >>> pd.Categorical(['b', 'b', 'a', 'c']).argsort()\n    array([2, 0, 1, 3])\n\n    >>> cat = pd.Categorical(['b', 'b', 'a', 'c'],\n    ...                      categories=['c', 'b', 'a'],\n    ...                      ordered=True)\n    >>> cat.argsort()\n    array([3, 0, 1, 2])\n\n    Missing values are placed at the end\n\n    >>> cat = pd.Categorical([2, None, 1])\n    >>> cat.argsort()\n    array([2, 0, 1])\n    \"\"\"\n    return super().argsort(ascending=ascending, kind=kind, **kwargs)",
                "def sort_values(\n    self, inplace: bool = False, ascending: bool = True, na_position: str = \"last\",\n):\n    \"\"\"\n    Sort the Categorical by category value returning a new\n    Categorical by default.\n\n    While an ordering is applied to the category values, sorting in this\n    context refers more to organizing and grouping together based on\n    matching category values. Thus, this function can be called on an\n    unordered Categorical instance unlike the functions 'Categorical.min'\n    and 'Categorical.max'.\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        Do operation in place.\n    ascending : bool, default True\n        Order ascending. Passing False orders descending. The\n        ordering parameter provides the method by which the\n        category values are organized.\n    na_position : {'first', 'last'} (optional, default='last')\n        'first' puts NaNs at the beginning\n        'last' puts NaNs at the end\n\n    Returns\n    -------\n    Categorical or None\n\n    See Also\n    --------\n    Categorical.sort\n    Series.sort_values\n\n    Examples\n    --------\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n    >>> c\n    [1, 2, 2, 1, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values()\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, 1, 1]\n    Categories (3, int64): [1, 2, 5]\n\n    Inplace sorting can be done as well:\n\n    >>> c.sort_values(inplace=True)\n    >>> c\n    [1, 1, 2, 2, 5]\n    Categories (3, int64): [1, 2, 5]\n    >>>\n    >>> c = pd.Categorical([1, 2, 2, 1, 5])\n\n    'sort_values' behaviour with NaNs. Note that 'na_position'\n    is independent of the 'ascending' parameter:\n\n    >>> c = pd.Categorical([np.nan, 2, 2, np.nan, 5])\n    >>> c\n    [NaN, 2, 2, NaN, 5]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values()\n    [2, 2, 5, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False)\n    [5, 2, 2, NaN, NaN]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(na_position='first')\n    [NaN, NaN, 2, 2, 5]\n    Categories (2, int64): [2, 5]\n    >>> c.sort_values(ascending=False, na_position='first')\n    [NaN, NaN, 5, 2, 2]\n    Categories (2, int64): [2, 5]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if na_position not in [\"last\", \"first\"]:\n        raise ValueError(f\"invalid na_position: {repr(na_position)}\")\n\n    sorted_idx = nargsort(self, ascending=ascending, na_position=na_position)\n\n    if inplace:\n        self._codes = self._codes[sorted_idx]\n    else:\n        return self._constructor(\n            values=self._codes[sorted_idx], dtype=self.dtype, fastpath=True\n        )",
                "def _values_for_rank(self):\n    \"\"\"\n    For correctly ranking ordered categorical data. See GH#15420\n\n    Ordered categorical data should be ranked on the basis of\n    codes with -1 translated to NaN.\n\n    Returns\n    -------\n    numpy.array\n\n    \"\"\"\n    from pandas import Series\n\n    if self.ordered:\n        values = self.codes\n        mask = values == -1\n        if mask.any():\n            values = values.astype(\"float64\")\n            values[mask] = np.nan\n    elif self.categories.is_numeric():\n        values = np.array(self)\n    else:\n        #  reorder the categories (so rank can use the float codes)\n        #  instead of passing an object array to rank\n        values = np.array(\n            self.rename_categories(Series(self.categories).rank().values)\n        )\n    return values",
                "def view(self, dtype=None):\n    if dtype is not None:\n        raise NotImplementedError(dtype)\n    return self._constructor(values=self._codes, dtype=self.dtype, fastpath=True)",
                "def to_dense(self):\n    \"\"\"\n    Return my 'dense' representation\n\n    For internal compatibility with numpy arrays.\n\n    Returns\n    -------\n    dense : array\n    \"\"\"\n    warn(\n        \"Categorical.to_dense is deprecated and will be removed in \"\n        \"a future version.  Use np.asarray(cat) instead.\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return np.asarray(self)",
                "def fillna(self, value=None, method=None, limit=None):\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series\n        If a scalar value is passed it is used to fill all missing values.\n        Alternatively, a Series or dict can be used to fill in different\n        values for each index. The value should not be a list. The\n        value(s) passed should either be in the categories or should be\n        NaN.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use NEXT valid observation to fill gap\n    limit : int, default None\n        (Not implemented yet for Categorical!)\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled.\n\n    Returns\n    -------\n    filled : Categorical with NA/NaN filled\n    \"\"\"\n    value, method = validate_fillna_kwargs(\n        value, method, validate_scalar_dict_value=False\n    )\n\n    if value is None:\n        value = np.nan\n    if limit is not None:\n        raise NotImplementedError(\n            \"specifying a limit for fillna has not been implemented yet\"\n        )\n\n    codes = self._codes\n\n    # pad / bfill\n    if method is not None:\n\n        # TODO: dispatch when self.categories is EA-dtype\n        values = np.asarray(self).reshape(-1, len(self))\n        values = interpolate_2d(values, method, 0, None, value).astype(\n            self.categories.dtype\n        )[0]\n        codes = _get_codes_for_values(values, self.categories)\n\n    else:\n\n        # If value is a dict or a Series (a dict value has already\n        # been converted to a Series)\n        if isinstance(value, (np.ndarray, Categorical, ABCSeries)):\n            # We get ndarray or Categorical if called via Series.fillna,\n            #  where it will unwrap another aligned Series before getting here\n\n            mask = ~algorithms.isin(value, self.categories)\n            if not isna(value[mask]).all():\n                raise ValueError(\"fill value must be in categories\")\n\n            values_codes = _get_codes_for_values(value, self.categories)\n            indexer = np.where(codes == -1)\n            codes = codes.copy()\n            codes[indexer] = values_codes[indexer]\n\n        # If value is not a dict or Series it should be a scalar\n        elif is_hashable(value):\n            if not isna(value) and value not in self.categories:\n                raise ValueError(\"fill value must be in categories\")\n\n            mask = codes == -1\n            if mask.any():\n                codes = codes.copy()\n                if isna(value):\n                    codes[mask] = -1\n                else:\n                    codes[mask] = self.categories.get_loc(value)\n\n        else:\n            raise TypeError(\n                f\"'value' parameter must be a scalar, dict \"\n                f\"or Series, but you passed a {type(value).__name__}\"\n            )\n\n    return self._constructor(codes, dtype=self.dtype, fastpath=True)",
                "def take(self: _T, indexer, allow_fill: bool = False, fill_value=None) -> _T:\n    \"\"\"\n    Take elements from the Categorical.\n\n    Parameters\n    ----------\n    indexer : sequence of int\n        The indices in `self` to take. The meaning of negative values in\n        `indexer` depends on the value of `allow_fill`.\n    allow_fill : bool, default False\n        How to handle negative values in `indexer`.\n\n        * False: negative values in `indices` indicate positional indices\n          from the right. This is similar to\n          :func:`numpy.take`.\n\n        * True: negative values in `indices` indicate missing values\n          (the default). These values are set to `fill_value`. Any other\n          other negative values raise a ``ValueError``.\n\n        .. versionchanged:: 1.0.0\n\n           Default value changed from ``True`` to ``False``.\n\n    fill_value : object\n        The value to use for `indices` that are missing (-1), when\n        ``allow_fill=True``. This should be the category, i.e. a value\n        in ``self.categories``, not a code.\n\n    Returns\n    -------\n    Categorical\n        This Categorical will have the same categories and ordered as\n        `self`.\n\n    See Also\n    --------\n    Series.take : Similar method for Series.\n    numpy.ndarray.take : Similar method for NumPy arrays.\n\n    Examples\n    --------\n    >>> cat = pd.Categorical(['a', 'a', 'b'])\n    >>> cat\n    [a, a, b]\n    Categories (2, object): [a, b]\n\n    Specify ``allow_fill==False`` to have negative indices mean indexing\n    from the right.\n\n    >>> cat.take([0, -1, -2], allow_fill=False)\n    [a, b, a]\n    Categories (2, object): [a, b]\n\n    With ``allow_fill=True``, indices equal to ``-1`` mean \"missing\"\n    values that should be filled with the `fill_value`, which is\n    ``np.nan`` by default.\n\n    >>> cat.take([0, -1, -1], allow_fill=True)\n    [a, NaN, NaN]\n    Categories (2, object): [a, b]\n\n    The fill value can be specified.\n\n    >>> cat.take([0, -1, -1], allow_fill=True, fill_value='a')\n    [a, a, a]\n    Categories (2, object): [a, b]\n\n    Specifying a fill value that's not in ``self.categories``\n    will raise a ``ValueError``.\n    \"\"\"\n    return NDArrayBackedExtensionArray.take(\n        self, indexer, allow_fill=allow_fill, fill_value=fill_value\n    )",
                "@property\ndef _ndarray(self) -> np.ndarray:\n    return self._codes",
                "def _from_backing_data(self, arr: np.ndarray) -> \"Categorical\":\n    return self._constructor(arr, dtype=self.dtype, fastpath=True)",
                "def take_nd(self, indexer, allow_fill: bool = False, fill_value=None):\n    # GH#27745 deprecate alias that other EAs dont have\n    warn(\n        \"Categorical.take_nd is deprecated, use Categorical.take instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.take(indexer, allow_fill=allow_fill, fill_value=fill_value)",
                "def __iter__(self):\n    \"\"\"\n    Returns an Iterator over the values of this Categorical.\n    \"\"\"\n    return iter(self._internal_get_values().tolist())",
                "def __contains__(self, key) -> bool:\n    \"\"\"\n    Returns True if `key` is in this Categorical.\n    \"\"\"\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.isna().any()\n\n    return contains(self, key, container=self._codes)",
                "def _tidy_repr(self, max_vals=10, footer=True) -> str:\n    \"\"\"\n    a short repr displaying only max_vals and an optional (but default\n    footer)\n    \"\"\"\n    num = max_vals // 2\n    head = self[:num]._get_repr(length=False, footer=False)\n    tail = self[-(max_vals - num) :]._get_repr(length=False, footer=False)\n\n    result = f\"{head[:-1]}, ..., {tail[1:]}\"\n    if footer:\n        result = f\"{result}\\n{self._repr_footer()}\"\n\n    return str(result)",
                "def _repr_categories(self):\n    \"\"\"\n    return the base repr for the categories\n    \"\"\"\n    max_categories = (\n        10\n        if get_option(\"display.max_categories\") == 0\n        else get_option(\"display.max_categories\")\n    )\n    from pandas.io.formats import format as fmt\n\n    if len(self.categories) > max_categories:\n        num = max_categories // 2\n        head = fmt.format_array(self.categories[:num], None)\n        tail = fmt.format_array(self.categories[-num:], None)\n        category_strs = head + [\"...\"] + tail\n    else:\n        category_strs = fmt.format_array(self.categories, None)\n\n    # Strip all leading spaces, which format_array adds for columns...\n    category_strs = [x.strip() for x in category_strs]\n    return category_strs",
                "def _repr_categories_info(self) -> str:\n    \"\"\"\n    Returns a string representation of the footer.\n    \"\"\"\n    category_strs = self._repr_categories()\n    dtype = str(self.categories.dtype)\n    levheader = f\"Categories ({len(self.categories)}, {dtype}): \"\n    width, height = get_terminal_size()\n    max_width = get_option(\"display.width\") or width\n    if console.in_ipython_frontend():\n        # 0 = no breaks\n        max_width = 0\n    levstring = \"\"\n    start = True\n    cur_col_len = len(levheader)  # header\n    sep_len, sep = (3, \" < \") if self.ordered else (2, \", \")\n    linesep = sep.rstrip() + \"\\n\"  # remove whitespace\n    for val in category_strs:\n        if max_width != 0 and cur_col_len + sep_len + len(val) > max_width:\n            levstring += linesep + (\" \" * (len(levheader) + 1))\n            cur_col_len = len(levheader) + 1  # header + a whitespace\n        elif not start:\n            levstring += sep\n            cur_col_len += len(val)\n        levstring += val\n        start = False\n    # replace to simple save space by\n    return levheader + \"[\" + levstring.replace(\" < ... < \", \" ... \") + \"]\"",
                "def _repr_footer(self) -> str:\n    info = self._repr_categories_info()\n    return f\"Length: {len(self)}\\n{info}\"",
                "def _get_repr(self, length=True, na_rep=\"NaN\", footer=True) -> str:\n    from pandas.io.formats import format as fmt\n\n    formatter = fmt.CategoricalFormatter(\n        self, length=length, na_rep=na_rep, footer=footer\n    )\n    result = formatter.to_string()\n    return str(result)",
                "def __repr__(self) -> str:\n    \"\"\"\n    String representation.\n    \"\"\"\n    _maxlen = 10\n    if len(self._codes) > _maxlen:\n        result = self._tidy_repr(_maxlen)\n    elif len(self._codes) > 0:\n        result = self._get_repr(length=len(self) > _maxlen)\n    else:\n        msg = self._get_repr(length=False, footer=True).replace(\"\\n\", \", \")\n        result = f\"[], {msg}\"\n\n    return result",
                "def _maybe_coerce_indexer(self, indexer):\n    \"\"\"\n    return an indexer coerced to the codes dtype\n    \"\"\"\n    if isinstance(indexer, np.ndarray) and indexer.dtype.kind == \"i\":\n        indexer = indexer.astype(self._codes.dtype)\n    return indexer",
                "def __getitem__(self, key):\n    \"\"\"\n    Return an item.\n    \"\"\"\n    if isinstance(key, (int, np.integer)):\n        i = self._codes[key]\n        if i == -1:\n            return np.nan\n        else:\n            return self.categories[i]\n\n    key = check_array_indexer(self, key)\n\n    result = self._codes[key]\n    if result.ndim > 1:\n        deprecate_ndim_indexing(result)\n        return result\n    return self._constructor(result, dtype=self.dtype, fastpath=True)",
                "def __setitem__(self, key, value):\n    \"\"\"\n    Item assignment.\n\n    Raises\n    ------\n    ValueError\n        If (one or more) Value is not in categories or if a assigned\n        `Categorical` does not have the same categories\n    \"\"\"\n    value = extract_array(value, extract_numpy=True)\n\n    # require identical categories set\n    if isinstance(value, Categorical):\n        if not is_dtype_equal(self, value):\n            raise ValueError(\n                \"Cannot set a Categorical with another, \"\n                \"without identical categories\"\n            )\n        if not self.categories.equals(value.categories):\n            new_codes = recode_for_categories(\n                value.codes, value.categories, self.categories\n            )\n            value = Categorical.from_codes(new_codes, dtype=self.dtype)\n\n    rvalue = value if is_list_like(value) else [value]\n\n    from pandas import Index\n\n    to_add = Index(rvalue).difference(self.categories)\n\n    # no assignments of values not in categories, but it's always ok to set\n    # something to np.nan\n    if len(to_add) and not isna(to_add).all():\n        raise ValueError(\n            \"Cannot setitem on a Categorical with a new \"\n            \"category, set the categories first\"\n        )\n\n    # set by position\n    if isinstance(key, (int, np.integer)):\n        pass\n\n    # tuple of indexers (dataframe)\n    elif isinstance(key, tuple):\n        # only allow 1 dimensional slicing, but can\n        # in a 2-d case be passd (slice(None),....)\n        if len(key) == 2:\n            if not com.is_null_slice(key[0]):\n                raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n            key = key[1]\n        elif len(key) == 1:\n            key = key[0]\n        else:\n            raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n\n    # slicing in Series or Categorical\n    elif isinstance(key, slice):\n        pass\n\n    # else: array of True/False in Series or Categorical\n\n    lindexer = self.categories.get_indexer(rvalue)\n    lindexer = self._maybe_coerce_indexer(lindexer)\n\n    key = check_array_indexer(self, key)\n    self._codes[key] = lindexer",
                "def _reverse_indexer(self) -> Dict[Hashable, np.ndarray]:\n    \"\"\"\n    Compute the inverse of a categorical, returning\n    a dict of categories -> indexers.\n\n    *This is an internal function*\n\n    Returns\n    -------\n    dict of categories -> indexers\n\n    Examples\n    --------\n    >>> c = pd.Categorical(list('aabca'))\n    >>> c\n    [a, a, b, c, a]\n    Categories (3, object): [a, b, c]\n    >>> c.categories\n    Index(['a', 'b', 'c'], dtype='object')\n    >>> c.codes\n    array([0, 0, 1, 2, 0], dtype=int8)\n    >>> c._reverse_indexer()\n    {'a': array([0, 1, 4]), 'b': array([2]), 'c': array([3])}\n\n    \"\"\"\n    categories = self.categories\n    r, counts = libalgos.groupsort_indexer(\n        self.codes.astype(\"int64\"), categories.size\n    )\n    counts = counts.cumsum()\n    _result = (r[start:end] for start, end in zip(counts, counts[1:]))\n    result = dict(zip(categories, _result))\n    return result",
                "def _reduce(self, name, axis=0, **kwargs):\n    func = getattr(self, name, None)\n    if func is None:\n        raise TypeError(f\"Categorical cannot perform the operation {name}\")\n    return func(**kwargs)",
                "@deprecate_kwarg(old_arg_name=\"numeric_only\", new_arg_name=\"skipna\")\ndef min(self, skipna=True):\n    \"\"\"\n    The minimum value of the object.\n\n    Only ordered `Categoricals` have a minimum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    min : the minimum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"min\")\n\n    if not len(self._codes):\n        return self.dtype.na_value\n\n    good = self._codes != -1\n    if not good.all():\n        if skipna and good.any():\n            pointer = self._codes[good].min()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.min()\n    return self.categories[pointer]",
                "@deprecate_kwarg(old_arg_name=\"numeric_only\", new_arg_name=\"skipna\")\ndef max(self, skipna=True):\n    \"\"\"\n    The maximum value of the object.\n\n    Only ordered `Categoricals` have a maximum!\n\n    .. versionchanged:: 1.0.0\n\n       Returns an NA value on empty arrays\n\n    Raises\n    ------\n    TypeError\n        If the `Categorical` is not `ordered`.\n\n    Returns\n    -------\n    max : the maximum of this `Categorical`\n    \"\"\"\n    self.check_for_ordered(\"max\")\n\n    if not len(self._codes):\n        return self.dtype.na_value\n\n    good = self._codes != -1\n    if not good.all():\n        if skipna and good.any():\n            pointer = self._codes[good].max()\n        else:\n            return np.nan\n    else:\n        pointer = self._codes.max()\n    return self.categories[pointer]",
                "def mode(self, dropna=True):\n    \"\"\"\n    Returns the mode(s) of the Categorical.\n\n    Always returns `Categorical` even if only one value.\n\n    Parameters\n    ----------\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    modes : `Categorical` (sorted)\n    \"\"\"\n    codes = self._codes\n    if dropna:\n        good = self._codes != -1\n        codes = self._codes[good]\n    codes = sorted(htable.mode_int64(ensure_int64(codes), dropna))\n    return self._constructor(values=codes, dtype=self.dtype, fastpath=True)",
                "def unique(self):\n    \"\"\"\n    Return the ``Categorical`` which ``categories`` and ``codes`` are\n    unique. Unused categories are NOT returned.\n\n    - unordered category: values and categories are sorted by appearance\n      order.\n    - ordered category: values are sorted by appearance order, categories\n      keeps existing order.\n\n    Returns\n    -------\n    unique values : ``Categorical``\n\n    See Also\n    --------\n    pandas.unique\n    CategoricalIndex.unique\n    Series.unique\n\n    Examples\n    --------\n    An unordered Categorical will return categories in the\n    order of appearance.\n\n    >>> pd.Categorical(list(\"baabc\")).unique()\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    >>> pd.Categorical(list(\"baabc\"), categories=list(\"abc\")).unique()\n    [b, a, c]\n    Categories (3, object): [b, a, c]\n\n    An ordered Categorical preserves the category ordering.\n\n    >>> pd.Categorical(\n    ...     list(\"baabc\"), categories=list(\"abc\"), ordered=True\n    ... ).unique()\n    [b, a, c]\n    Categories (3, object): [a < b < c]\n    \"\"\"\n    # unlike np.unique, unique1d does not sort\n    unique_codes = unique1d(self.codes)\n    cat = self.copy()\n\n    # keep nan in codes\n    cat._codes = unique_codes\n\n    # exclude nan from indexer for categories\n    take_codes = unique_codes[unique_codes != -1]\n    if self.ordered:\n        take_codes = np.sort(take_codes)\n    return cat.set_categories(cat.categories.take(take_codes))",
                "def _values_for_factorize(self):\n    codes = self.codes.astype(\"int64\")\n    return codes, -1",
                "@classmethod\ndef _from_factorized(cls, uniques, original):\n    return original._constructor(\n        original.categories.take(uniques), dtype=original.dtype\n    )",
                "def equals(self, other):\n    \"\"\"\n    Returns True if categorical arrays are equal.\n\n    Parameters\n    ----------\n    other : `Categorical`\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if self.is_dtype_equal(other):\n        if self.categories.equals(other.categories):\n            # fastpath to avoid re-coding\n            other_codes = other._codes\n        else:\n            other_codes = recode_for_categories(\n                other.codes, other.categories, self.categories\n            )\n        return np.array_equal(self._codes, other_codes)\n    return False",
                "def is_dtype_equal(self, other):\n    \"\"\"\n    Returns True if categoricals are the same dtype\n      same categories, and same ordered\n\n    Parameters\n    ----------\n    other : Categorical\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    try:\n        return hash(self.dtype) == hash(other.dtype)\n    except (AttributeError, TypeError):\n        return False",
                "def describe(self):\n    \"\"\"\n    Describes this Categorical\n\n    Returns\n    -------\n    description: `DataFrame`\n        A dataframe with frequency and counts by category.\n    \"\"\"\n    counts = self.value_counts(dropna=False)\n    freqs = counts / float(counts.sum())\n\n    from pandas.core.reshape.concat import concat\n\n    result = concat([counts, freqs], axis=1)\n    result.columns = [\"counts\", \"freqs\"]\n    result.index.name = \"categories\"\n\n    return result",
                "@property\ndef _can_hold_na(self):\n    return True",
                "@classmethod\ndef _concat_same_type(self, to_concat):\n    from pandas.core.dtypes.concat import union_categoricals\n\n    return union_categoricals(to_concat)",
                "def isin(self, values):\n    \"\"\"\n    Check whether `values` are contained in Categorical.\n\n    Return a boolean NumPy Array showing whether each element in\n    the Categorical matches an element in the passed sequence of\n    `values` exactly.\n\n    Parameters\n    ----------\n    values : set or list-like\n        The sequence of values to test. Passing in a single string will\n        raise a ``TypeError``. Instead, turn a single string into a\n        list of one element.\n\n    Returns\n    -------\n    isin : numpy.ndarray (bool dtype)\n\n    Raises\n    ------\n    TypeError\n      * If `values` is not a set or list-like\n\n    See Also\n    --------\n    pandas.Series.isin : Equivalent method on Series.\n\n    Examples\n    --------\n    >>> s = pd.Categorical(['lama', 'cow', 'lama', 'beetle', 'lama',\n    ...                'hippo'])\n    >>> s.isin(['cow', 'lama'])\n    array([ True,  True,  True, False,  True, False])\n\n    Passing a single string as ``s.isin('lama')`` will raise an error. Use\n    a list of one element instead:\n\n    >>> s.isin(['lama'])\n    array([ True, False,  True, False,  True, False])\n    \"\"\"\n    if not is_list_like(values):\n        values_type = type(values).__name__\n        raise TypeError(\n            \"only list-like objects are allowed to be passed \"\n            f\"to isin(), you passed a [{values_type}]\"\n        )\n    values = sanitize_array(values, None, None)\n    null_mask = np.asarray(isna(values))\n    code_values = self.categories.get_indexer(values)\n    code_values = code_values[null_mask | (code_values >= 0)]\n    return algorithms.isin(self.codes, code_values)",
                "def replace(self, to_replace, value, inplace: bool = False):\n    \"\"\"\n    Replaces all instances of one value with another\n\n    Parameters\n    ----------\n    to_replace: object\n        The value to be replaced\n\n    value: object\n        The value to replace it with\n\n    inplace: bool\n        Whether the operation is done in-place\n\n    Returns\n    -------\n    None if inplace is True, otherwise the new Categorical after replacement\n\n\n    Examples\n    --------\n    >>> s = pd.Categorical([1, 2, 1, 3])\n    >>> s.replace(1, 3)\n    [3, 2, 3, 3]\n    Categories (2, int64): [2, 3]\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cat = self if inplace else self.copy()\n\n    # build a dict of (to replace -> value) pairs\n    if is_list_like(to_replace):\n        # if to_replace is list-like and value is scalar\n        replace_dict = {replace_value: value for replace_value in to_replace}\n    else:\n        # if both to_replace and value are scalar\n        replace_dict = {to_replace: value}\n\n    # other cases, like if both to_replace and value are list-like or if\n    # to_replace is a dict, are handled separately in NDFrame\n    for replace_value, new_value in replace_dict.items():\n        if new_value == replace_value:\n            continue\n        if replace_value in cat.categories:\n            if isna(new_value):\n                cat.remove_categories(replace_value, inplace=True)\n                continue\n            categories = cat.categories.tolist()\n            index = categories.index(replace_value)\n            if new_value in cat.categories:\n                value_index = categories.index(new_value)\n                cat._codes[cat._codes == index] = value_index\n                cat.remove_categories(replace_value, inplace=True)\n            else:\n                categories[index] = new_value\n                cat.rename_categories(categories, inplace=True)\n    if not inplace:\n        return cat",
                "def __init__(self, data):\n    self._validate(data)\n    self._parent = data.values\n    self._index = data.index\n    self._name = data.name\n    self._freeze()",
                "@staticmethod\ndef _validate(data):\n    if not is_categorical_dtype(data.dtype):\n        raise AttributeError(\"Can only use .cat accessor with a 'category' dtype\")",
                "def _delegate_property_get(self, name):\n    return getattr(self._parent, name)",
                "def _delegate_property_set(self, name, new_values):\n    return setattr(self._parent, name, new_values)",
                "@property\ndef codes(self):\n    \"\"\"\n    Return Series of codes as well as the index.\n    \"\"\"\n    from pandas import Series\n\n    return Series(self._parent.codes, index=self._index)",
                "def _delegate_method(self, name, *args, **kwargs):\n    from pandas import Series\n\n    method = getattr(self._parent, name)\n    res = method(*args, **kwargs)\n    if res is not None:\n        return Series(res, index=self._index, name=self._name)"
            ],
            "inscope_function_signatures": [
                "_cat_compare_op(op)",
                "contains(cat, key, container)",
                "_get_codes_for_values(values, categories)",
                "recode_for_categories(codes: np.ndarray, old_categories, new_categories)",
                "_convert_to_list_like(list_like)",
                "factorize_from_iterable(values)",
                "factorize_from_iterables(iterables)",
                "func(self, other)",
                "__init__(self, values, categories=None, ordered=None, dtype=None, fastpath=False)",
                "categories(self)",
                "categories(self, categories)",
                "ordered(self) -> Ordered",
                "dtype(self) -> CategoricalDtype",
                "_constructor(self) -> Type['Categorical']",
                "_from_sequence(cls, scalars, dtype=None, copy=False)",
                "_formatter(self, boxed=False)",
                "astype(self, dtype: Dtype, copy: bool=True) -> ArrayLike",
                "itemsize(self) -> int",
                "tolist(self) -> List[Scalar]",
                "_from_inferred_categories(cls, inferred_categories, inferred_codes, dtype, true_values=None)",
                "from_codes(cls, codes, categories=None, ordered=None, dtype=None)",
                "codes(self) -> np.ndarray",
                "_set_categories(self, categories, fastpath=False)",
                "_set_dtype(self, dtype: CategoricalDtype) -> 'Categorical'",
                "set_ordered(self, value, inplace=False)",
                "as_ordered(self, inplace=False)",
                "as_unordered(self, inplace=False)",
                "set_categories(self, new_categories, ordered=None, rename=False, inplace=False)",
                "rename_categories(self, new_categories, inplace=False)",
                "reorder_categories(self, new_categories, ordered=None, inplace=False)",
                "add_categories(self, new_categories, inplace=False)",
                "remove_categories(self, removals, inplace=False)",
                "remove_unused_categories(self, inplace=False)",
                "map(self, mapper)",
                "shift(self, periods, fill_value=None)",
                "_validate_fill_value(self, fill_value)",
                "__array__(self, dtype=None) -> np.ndarray",
                "__array_ufunc__(self, ufunc, method, *inputs, **kwargs)",
                "__setstate__(self, state)",
                "nbytes(self)",
                "memory_usage(self, deep=False)",
                "searchsorted(self, value, side='left', sorter=None)",
                "isna(self)",
                "notna(self)",
                "dropna(self)",
                "value_counts(self, dropna=True)",
                "_internal_get_values(self)",
                "check_for_ordered(self, op)",
                "_values_for_argsort(self)",
                "argsort(self, ascending=True, kind='quicksort', **kwargs)",
                "sort_values(self, inplace: bool=False, ascending: bool=True, na_position: str='last')",
                "_values_for_rank(self)",
                "view(self, dtype=None)",
                "to_dense(self)",
                "fillna(self, value=None, method=None, limit=None)",
                "take(self: _T, indexer, allow_fill: bool=False, fill_value=None) -> _T",
                "_ndarray(self) -> np.ndarray",
                "_from_backing_data(self, arr: np.ndarray) -> 'Categorical'",
                "take_nd(self, indexer, allow_fill: bool=False, fill_value=None)",
                "__iter__(self)",
                "__contains__(self, key) -> bool",
                "_tidy_repr(self, max_vals=10, footer=True) -> str",
                "_repr_categories(self)",
                "_repr_categories_info(self) -> str",
                "_repr_footer(self) -> str",
                "_get_repr(self, length=True, na_rep='NaN', footer=True) -> str",
                "__repr__(self) -> str",
                "_maybe_coerce_indexer(self, indexer)",
                "__getitem__(self, key)",
                "__setitem__(self, key, value)",
                "_reverse_indexer(self) -> Dict[Hashable, np.ndarray]",
                "_reduce(self, name, axis=0, **kwargs)",
                "min(self, skipna=True)",
                "max(self, skipna=True)",
                "mode(self, dropna=True)",
                "unique(self)",
                "_values_for_factorize(self)",
                "_from_factorized(cls, uniques, original)",
                "equals(self, other)",
                "is_dtype_equal(self, other)",
                "describe(self)",
                "_can_hold_na(self)",
                "_concat_same_type(self, to_concat)",
                "isin(self, values)",
                "replace(self, to_replace, value, inplace: bool=False)",
                "__init__(self, data)",
                "_validate(data)",
                "_delegate_property_get(self, name)",
                "_delegate_property_set(self, name, new_values)",
                "codes(self)",
                "_delegate_method(self, name, *args, **kwargs)"
            ],
            "variables_in_file": {
                "opname": [
                    130,
                    131,
                    100,
                    69,
                    134,
                    139,
                    109,
                    111,
                    117,
                    119,
                    123,
                    60,
                    62,
                    95
                ],
                "op.__name__": [
                    60
                ],
                "op": [
                    60,
                    1437
                ],
                "is_list_like": [
                    64,
                    1028,
                    1989,
                    2344,
                    979,
                    2387,
                    2678
                ],
                "other": [
                    131,
                    135,
                    64,
                    2243,
                    2244,
                    2246,
                    73,
                    2249,
                    78,
                    80,
                    82,
                    85,
                    89,
                    91,
                    2268,
                    93,
                    106,
                    107,
                    108
                ],
                "len": [
                    1927,
                    1929,
                    1930,
                    1164,
                    1040,
                    1686,
                    409,
                    2717,
                    670,
                    808,
                    812,
                    2095,
                    2607,
                    64,
                    326,
                    2633,
                    1868,
                    1997,
                    78,
                    2130,
                    982,
                    2011,
                    120,
                    1886,
                    2015,
                    614,
                    1894,
                    617,
                    1898,
                    1899,
                    1900,
                    1903,
                    118,
                    1911,
                    1400,
                    2685
                ],
                "self": [
                    2562,
                    1032,
                    1033,
                    2057,
                    2059,
                    2571,
                    2576,
                    1043,
                    1044,
                    2068,
                    2579,
                    1578,
                    1581,
                    1070,
                    1583,
                    1584,
                    2093,
                    2095,
                    2096,
                    2098,
                    2101,
                    1078,
                    2105,
                    2106,
                    64,
                    1601,
                    1602,
                    68,
                    1607,
                    1608,
                    1613,
                    78,
                    80,
                    2128,
                    82,
                    2130,
                    1620,
                    85,
                    2131,
                    2133,
                    2136,
                    89,
                    91,
                    2140,
                    2141,
                    95,
                    97,
                    101,
                    1638,
                    107,
                    108,
                    109,
                    2160,
                    113,
                    2162,
                    2163,
                    2165,
                    118,
                    120,
                    638,
                    131,
                    1155,
                    1157,
                    1158,
                    1163,
                    1165,
                    1680,
                    1686,
                    664,
                    1688,
                    666,
                    1690,
                    669,
                    670,
                    2209,
                    2210,
                    1700,
                    677,
                    1704,
                    1193,
                    2217,
                    1197,
                    2222,
                    1711,
                    1201,
                    692,
                    693,
                    1720,
                    1728,
                    2243,
                    708,
                    709,
                    2244,
                    1223,
                    1224,
                    2249,
                    2251,
                    730,
                    1243,
                    1244,
                    2268,
                    1256,
                    2281,
                    748,
                    1264,
                    1277,
                    1281,
                    1802,
                    1810,
                    1813,
                    1306,
                    1824,
                    1313,
                    1314,
                    803,
                    1316,
                    1317,
                    806,
                    1318,
                    1830,
                    1838,
                    1840,
                    2352,
                    306,
                    307,
                    2354,
                    1848,
                    1337,
                    1849,
                    1853,
                    1868,
                    1870,
                    1871,
                    1360,
                    2384,
                    1874,
                    1884,
                    1885,
                    1374,
                    1886,
                    1895,
                    372,
                    373,
                    1910,
                    1399,
                    1911,
                    891,
                    1917,
                    1410,
                    1927,
                    1928,
                    1929,
                    1930,
                    1932,
                    1427,
                    404,
                    1428,
                    1429,
                    1430,
                    408,
                    409,
                    1431,
                    1435,
                    1942,
                    1950,
                    416,
                    1954,
                    1443,
                    1956,
                    1958,
                    423,
                    1962,
                    939,
                    430,
                    943,
                    1978,
                    1983,
                    1985,
                    1987,
                    1993,
                    460,
                    461,
                    462,
                    463,
                    464,
                    466,
                    467,
                    469,
                    981,
                    986,
                    987,
                    476,
                    989,
                    486,
                    2026,
                    2027,
                    2029,
                    2030,
                    2547,
                    2548,
                    2549,
                    2550,
                    2551,
                    2559
                ],
                "ValueError": [
                    1160,
                    1041,
                    412,
                    672,
                    1702,
                    1576,
                    940,
                    1712,
                    1979,
                    66,
                    1226,
                    1998,
                    468,
                    983,
                    345,
                    605,
                    610,
                    615,
                    618
                ],
                "self.ordered": [
                    1601,
                    68,
                    1158,
                    1895,
                    2217,
                    664,
                    80,
                    1044,
                    85,
                    1078,
                    1435,
                    408,
                    89,
                    666,
                    987
                ],
                "TypeError": [
                    133,
                    70,
                    2679,
                    2346,
                    79,
                    335,
                    81,
                    1263,
                    83,
                    180,
                    340,
                    86,
                    2070,
                    122,
                    1723,
                    1436,
                    2269
                ],
                "isinstance": [
                    1696,
                    322,
                    357,
                    518,
                    2021,
                    2597,
                    73,
                    2649,
                    2004,
                    1941,
                    1270,
                    2008,
                    1977,
                    2651,
                    1949,
                    318
                ],
                "Categorical": [
                    1696,
                    1987,
                    2692,
                    73,
                    434,
                    2420,
                    438,
                    2423,
                    1977,
                    2686
                ],
                "msg": [
                    1932,
                    77,
                    1933,
                    79,
                    81,
                    83,
                    601,
                    605
                ],
                "self.categories": [
                    1155,
                    2057,
                    1427,
                    1428,
                    1429,
                    1430,
                    1688,
                    1690,
                    1313,
                    1954,
                    1316,
                    1700,
                    1704,
                    1711,
                    2352,
                    692,
                    1720,
                    2106,
                    1983,
                    1985,
                    708,
                    2244,
                    1223,
                    1224,
                    1607,
                    1993,
                    2249,
                    1868,
                    1613,
                    78,
                    1870,
                    80,
                    1871,
                    82,
                    1874,
                    89,
                    1243,
                    1244,
                    91,
                    476,
                    1885,
                    1886,
                    2141,
                    2026,
                    107,
                    108,
                    1399
                ],
                "other.categories": [
                    2244,
                    2249,
                    78,
                    80,
                    82,
                    89
                ],
                "all": [
                    80,
                    1997,
                    1701
                ],
                "set": [
                    1031,
                    1032,
                    939,
                    82,
                    981
                ],
                "other.ordered": [
                    85
                ],
                "self.categories.equals": [
                    89,
                    2244,
                    1983
                ],
                "other_codes": [
                    96,
                    97,
                    101,
                    2246,
                    2248,
                    2251,
                    91,
                    93
                ],
                "_get_codes_for_values": [
                    1704,
                    1690,
                    91,
                    364
                ],
                "other._codes": [
                    93,
                    2246
                ],
                "f": [
                    96,
                    95
                ],
                "getattr": [
                    131,
                    109,
                    2576,
                    2068,
                    95,
                    2559
                ],
                "self._codes": [
                    1281,
                    1158,
                    1927,
                    1929,
                    1163,
                    1165,
                    1680,
                    1810,
                    1428,
                    1429,
                    1430,
                    1942,
                    1306,
                    1950,
                    1443,
                    1958,
                    1581,
                    2095,
                    1584,
                    1840,
                    306,
                    2098,
                    2101,
                    1337,
                    2105,
                    2251,
                    2130,
                    1620,
                    2133,
                    2136,
                    1243,
                    2140,
                    95,
                    97,
                    101,
                    109,
                    2030,
                    2160,
                    113,
                    2162,
                    2163,
                    373,
                    1399,
                    638
                ],
                "ret": [
                    96,
                    1250,
                    1251,
                    101,
                    103,
                    104,
                    109,
                    114,
                    115,
                    1337,
                    1338,
                    1243,
                    1245,
                    1246
                ],
                "mask": [
                    97,
                    98,
                    1603,
                    1604,
                    1700,
                    1606,
                    103,
                    1701,
                    1720,
                    113,
                    114,
                    1714,
                    1715,
                    1718,
                    1400,
                    1401,
                    1404,
                    1407
                ],
                "mask.any": [
                    98,
                    1715,
                    1604
                ],
                "is_scalar": [
                    1312,
                    106,
                    1837,
                    188,
                    2653
                ],
                "i": [
                    1954,
                    108,
                    109,
                    1950,
                    1951
                ],
                "self.categories.get_loc": [
                    1313,
                    1316,
                    1224,
                    108,
                    1720
                ],
                "np.zeros": [
                    118
                ],
                "np": [
                    1408,
                    131,
                    1674,
                    1163,
                    1164,
                    1165,
                    1809,
                    1428,
                    1812,
                    1430,
                    1431,
                    1686,
                    1941,
                    1949,
                    1696,
                    1952,
                    1317,
                    1705,
                    2218,
                    1071,
                    2351,
                    2612,
                    2103,
                    312,
                    322,
                    2685,
                    326,
                    1606,
                    1608,
                    329,
                    2251,
                    1612,
                    1232,
                    2004,
                    469,
                    2138,
                    1245,
                    1250,
                    611,
                    613,
                    1638,
                    623,
                    368,
                    2032,
                    118,
                    120,
                    1401,
                    1405,
                    1407
                ],
                "bool": [
                    1730,
                    1832,
                    2356,
                    118,
                    120,
                    1817,
                    1499,
                    444
                ],
                "np.ones": [
                    120,
                    368
                ],
                "np.array": [
                    131,
                    1317,
                    1608,
                    1612,
                    469,
                    1431,
                    312
                ],
                "type": [
                    2345,
                    1725,
                    693,
                    135
                ],
                "unpack_zerodim_and_defer": [
                    62
                ],
                "func.__name__": [
                    139
                ],
                "func": [
                    139,
                    141,
                    2068,
                    2069,
                    2071
                ],
                "hash": [
                    2268,
                    173
                ],
                "key": [
                    2016,
                    1956,
                    2021,
                    1958,
                    1837,
                    173,
                    2029,
                    1840,
                    2030,
                    179,
                    2004,
                    2014,
                    2008,
                    2011,
                    2012,
                    1949,
                    1950,
                    2015
                ],
                "loc": [
                    192,
                    179,
                    188,
                    189
                ],
                "cat.categories.get_loc": [
                    179
                ],
                "cat.categories": [
                    896,
                    898,
                    2403,
                    2405,
                    2693,
                    2219,
                    815,
                    179,
                    894,
                    2399
                ],
                "cat": [
                    896,
                    898,
                    900,
                    2692,
                    2693,
                    2694,
                    2210,
                    2213,
                    806,
                    808,
                    809,
                    2219,
                    812,
                    1070,
                    815,
                    1071,
                    817,
                    818,
                    179,
                    1076,
                    821,
                    1080,
                    1081,
                    1084,
                    709,
                    710,
                    712,
                    2384,
                    989,
                    990,
                    991,
                    2399,
                    993,
                    2401,
                    2403,
                    2405,
                    2407,
                    2408,
                    2411,
                    2413,
                    1399,
                    1400,
                    891,
                    894
                ],
                "KeyError": [
                    180
                ],
                "container": [
                    192,
                    189
                ],
                "any": [
                    192,
                    609,
                    1036,
                    1838,
                    467
                ],
                "loc_": [
                    192
                ],
                "NDArrayBackedExtensionArray": [
                    1801,
                    195
                ],
                "PandasObject": [
                    291,
                    195,
                    2436
                ],
                "__array_priority__": [
                    288
                ],
                "_dtype": [
                    289
                ],
                "CategoricalDtype": [
                    518,
                    664,
                    408,
                    666,
                    289,
                    545,
                    547,
                    804,
                    679,
                    298,
                    426,
                    1077,
                    317,
                    708,
                    457,
                    597,
                    987,
                    353,
                    1274
                ],
                "_deprecations": [
                    291
                ],
                "PandasObject._deprecations": [
                    291
                ],
                "frozenset": [
                    291
                ],
                "_typ": [
                    292
                ],
                "dtype": [
                    518,
                    523,
                    525,
                    527,
                    529,
                    537,
                    545,
                    547,
                    550,
                    298,
                    299,
                    306,
                    307,
                    692,
                    693,
                    438,
                    316,
                    317,
                    456,
                    457,
                    332,
                    460,
                    462,
                    464,
                    337,
                    465,
                    466,
                    467,
                    469,
                    597,
                    598,
                    600,
                    1618,
                    1619,
                    1244,
                    1245,
                    1885,
                    1886,
                    353,
                    360,
                    617,
                    364,
                    620,
                    372,
                    373
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    298,
                    597
                ],
                "values": [
                    2692,
                    1686,
                    1687,
                    1690,
                    2589,
                    2591,
                    2596,
                    2597,
                    2599,
                    2344,
                    2345,
                    2602,
                    299,
                    2605,
                    2350,
                    2351,
                    2352,
                    306,
                    315,
                    317,
                    318,
                    321,
                    322,
                    323,
                    1602,
                    1603,
                    326,
                    327,
                    1605,
                    329,
                    330,
                    1606,
                    1608,
                    1612,
                    334,
                    1613,
                    336,
                    1615,
                    355,
                    357,
                    360,
                    364,
                    2678,
                    2681,
                    2682,
                    2685,
                    2686,
                    2687
                ],
                "categories": [
                    2693,
                    2695,
                    2057,
                    2059,
                    2063,
                    406,
                    664,
                    408,
                    666,
                    537,
                    538,
                    2589,
                    542,
                    2591,
                    544,
                    545,
                    2595,
                    2600,
                    299,
                    2603,
                    2606,
                    334,
                    336,
                    598,
                    353,
                    2403,
                    2404,
                    2406,
                    2410,
                    2411,
                    2686
                ],
                "ordered": [
                    802,
                    803,
                    804,
                    299,
                    943,
                    598
                ],
                "fastpath": [
                    305,
                    668,
                    663
                ],
                "coerce_indexer_dtype": [
                    2639,
                    2609,
                    306,
                    373,
                    1081,
                    991
                ],
                "dtype.categories": [
                    518,
                    360,
                    617,
                    523,
                    364,
                    332,
                    525,
                    527,
                    529,
                    306,
                    692,
                    373,
                    600,
                    537,
                    316
                ],
                "self._dtype": [
                    416,
                    677,
                    430,
                    307,
                    372
                ],
                "self._dtype.update_dtype": [
                    307,
                    372
                ],
                "null_mask": [
                    327,
                    328,
                    329,
                    366,
                    2351,
                    368,
                    369,
                    2353,
                    312
                ],
                "is_categorical_dtype": [
                    355,
                    456,
                    2555,
                    2681,
                    315
                ],
                "values.categories": [
                    2685,
                    317
                ],
                "dtype.ordered": [
                    337,
                    317,
                    353
                ],
                "ABCIndexClass": [
                    318
                ],
                "ABCSeries": [
                    1696,
                    357,
                    318
                ],
                "maybe_infer_to_datetimelike": [
                    321
                ],
                "np.ndarray": [
                    1696,
                    322,
                    623,
                    1232,
                    1809,
                    2032,
                    1812,
                    1941,
                    2612
                ],
                "_convert_to_list_like": [
                    323
                ],
                "sanitize_dtype": [
                    330,
                    326
                ],
                "np.dtype": [
                    326
                ],
                "isna": [
                    2400,
                    609,
                    1221,
                    1701,
                    327,
                    1036,
                    1837,
                    1997,
                    1711,
                    2351,
                    1717,
                    1340
                ],
                "null_mask.any": [
                    328,
                    366
                ],
                "idx": [
                    329,
                    1071,
                    1073,
                    1074,
                    1076
                ],
                "np.where": [
                    329,
                    1705,
                    1407
                ],
                "sanitize_array": [
                    330,
                    2350
                ],
                "codes": [
                    2694,
                    2695,
                    1680,
                    538,
                    1690,
                    544,
                    1313,
                    1314,
                    548,
                    1317,
                    550,
                    1318,
                    1193,
                    1194,
                    1705,
                    1706,
                    1707,
                    814,
                    1199,
                    2222,
                    817,
                    1201,
                    1714,
                    692,
                    693,
                    1716,
                    1718,
                    1720,
                    2223,
                    1728,
                    2635,
                    334,
                    2638,
                    336,
                    2642,
                    607,
                    609,
                    611,
                    613,
                    614,
                    359,
                    617,
                    364,
                    620,
                    368,
                    369,
                    370,
                    2160,
                    2163,
                    373,
                    2164,
                    2165,
                    2687
                ],
                "factorize": [
                    336,
                    334
                ],
                "err": [
                    344,
                    350
                ],
                "NotImplementedError": [
                    1676,
                    1619,
                    1195,
                    348
                ],
                "values.dtype": [
                    360,
                    355,
                    2589,
                    2686
                ],
                "old_codes": [
                    360,
                    356
                ],
                "values._values.codes": [
                    357
                ],
                "values._values": [
                    357
                ],
                "values.codes": [
                    2685,
                    357,
                    2687
                ],
                "recode_for_categories": [
                    544,
                    1984,
                    359,
                    2248,
                    814,
                    692,
                    538
                ],
                "values.dtype.categories": [
                    360
                ],
                "full_codes": [
                    368,
                    369,
                    370
                ],
                "null_mask.shape": [
                    368
                ],
                "codes.dtype": [
                    368
                ],
                "self.dtype.categories": [
                    1281,
                    1032,
                    1033,
                    939,
                    1306,
                    404,
                    981,
                    409,
                    986,
                    669,
                    670
                ],
                "self.dtype": [
                    1281,
                    1410,
                    1032,
                    1033,
                    404,
                    1813,
                    409,
                    1306,
                    669,
                    670,
                    803,
                    423,
                    1962,
                    939,
                    1584,
                    1201,
                    2096,
                    1728,
                    1987,
                    460,
                    462,
                    2131,
                    1620,
                    981,
                    986,
                    2268,
                    1264,
                    2165
                ],
                "property": [
                    418,
                    2564,
                    425,
                    622,
                    432,
                    1808,
                    2293,
                    375,
                    1279
                ],
                "new_dtype": [
                    664,
                    408,
                    666,
                    410,
                    670,
                    416,
                    804,
                    677,
                    808,
                    812,
                    815,
                    818,
                    1077,
                    1080,
                    1081,
                    708,
                    710,
                    987,
                    990,
                    991
                ],
                "new_dtype.categories": [
                    808,
                    812,
                    815,
                    1081,
                    410,
                    670,
                    991
                ],
                "categories.setter": [
                    406
                ],
                "self.dtype.ordered": [
                    803,
                    423
                ],
                "Ordered": [
                    419
                ],
                "Type": [
                    433
                ],
                "scalars": [
                    438
                ],
                "classmethod": [
                    552,
                    490,
                    2225,
                    436,
                    2297
                ],
                "Dtype": [
                    444
                ],
                "cast": [
                    457
                ],
                "Union": [
                    457
                ],
                "str": [
                    1920,
                    1922,
                    457,
                    1842,
                    1909,
                    1880,
                    1913,
                    1499,
                    1885,
                    1855
                ],
                "self.dtype.update_dtype": [
                    460
                ],
                "copy": [
                    469,
                    466,
                    461
                ],
                "self.copy": [
                    2210,
                    709,
                    806,
                    461,
                    1070,
                    2384,
                    891,
                    989
                ],
                "self._set_dtype": [
                    464
                ],
                "is_extension_array_dtype": [
                    465,
                    2591,
                    1246,
                    607
                ],
                "array": [
                    466
                ],
                "is_integer_dtype": [
                    467,
                    1429,
                    614,
                    607
                ],
                "self.isna": [
                    1360,
                    467,
                    1838
                ],
                "ArrayLike": [
                    444
                ],
                "self.categories.itemsize": [
                    476
                ],
                "cache_readonly": [
                    471
                ],
                "int": [
                    472,
                    2004,
                    1949
                ],
                "list": [
                    2720,
                    486,
                    2649,
                    986,
                    2652
                ],
                "List": [
                    478
                ],
                "Scalar": [
                    478
                ],
                "to_list": [
                    488
                ],
                "tolist": [
                    488,
                    1830
                ],
                "cats": [
                    547,
                    516,
                    524,
                    526,
                    2606,
                    528,
                    2607,
                    2608,
                    2609,
                    533,
                    538,
                    539,
                    541,
                    542
                ],
                "Index": [
                    1993,
                    516
                ],
                "inferred_categories": [
                    528,
                    516,
                    524,
                    526
                ],
                "known_categories": [
                    521,
                    517,
                    535
                ],
                "dtype.categories.is_numeric": [
                    523
                ],
                "to_numeric": [
                    524
                ],
                "is_datetime64_dtype": [
                    525
                ],
                "to_datetime": [
                    526
                ],
                "is_timedelta64_dtype": [
                    527
                ],
                "to_timedelta": [
                    528
                ],
                "dtype.categories.is_boolean": [
                    529
                ],
                "true_values": [
                    530,
                    531,
                    533
                ],
                "cats.isin": [
                    533
                ],
                "inferred_codes": [
                    544,
                    538,
                    548
                ],
                "cats.is_monotonic_increasing": [
                    539
                ],
                "unsorted": [
                    544,
                    541
                ],
                "cats.copy": [
                    541
                ],
                "cats.sort_values": [
                    542
                ],
                "cls": [
                    2595,
                    2596,
                    2597,
                    550,
                    620
                ],
                "codes.to_numpy": [
                    611
                ],
                "np.int64": [
                    611
                ],
                "np.asarray": [
                    1250,
                    613,
                    1638,
                    2351,
                    1686,
                    1245
                ],
                "codes.max": [
                    617
                ],
                "codes.min": [
                    617
                ],
                "v": [
                    640,
                    1276,
                    1277,
                    638,
                    639
                ],
                "self._codes.view": [
                    638
                ],
                "v.flags.writeable": [
                    639
                ],
                "v.flags": [
                    639
                ],
                "CategoricalDtype._from_fastpath": [
                    664,
                    1077
                ],
                "self.codes": [
                    2209,
                    1314,
                    1602,
                    1317,
                    1318,
                    1193,
                    2059,
                    2222,
                    2354,
                    692
                ],
                "inplace": [
                    899,
                    1027,
                    1044,
                    801,
                    806,
                    1574,
                    938,
                    1580,
                    1069,
                    1070,
                    943,
                    820,
                    1083,
                    707,
                    709,
                    711,
                    2383,
                    2384,
                    978,
                    729,
                    730,
                    989,
                    992,
                    747,
                    748,
                    2412,
                    890,
                    891
                ],
                "validate_bool_kwarg": [
                    801,
                    707,
                    1027,
                    1574,
                    938,
                    747,
                    1069,
                    2383,
                    978,
                    729,
                    890
                ],
                "value": [
                    1669,
                    1670,
                    1673,
                    1674,
                    1687,
                    1312,
                    1313,
                    1696,
                    1316,
                    1700,
                    1701,
                    1704,
                    1710,
                    1711,
                    1717,
                    1974,
                    1720,
                    1977,
                    1978,
                    1725,
                    1983,
                    1985,
                    1987,
                    708,
                    1989,
                    2389,
                    2392
                ],
                "cat._dtype": [
                    1080,
                    818,
                    990,
                    710
                ],
                "self.set_ordered": [
                    730,
                    748
                ],
                "new_categories": [
                    896,
                    898,
                    1155,
                    1158,
                    1033,
                    1164,
                    1165,
                    1038,
                    1044,
                    804,
                    939,
                    943,
                    1076,
                    1078,
                    2636,
                    2640,
                    979,
                    980,
                    981,
                    986,
                    987,
                    893,
                    894,
                    895
                ],
                "rename": [
                    807
                ],
                "cat.dtype.categories": [
                    808,
                    809,
                    1076
                ],
                "cat.dtype": [
                    808,
                    809,
                    1076
                ],
                "cat._codes": [
                    2213,
                    2407,
                    812,
                    1071,
                    817,
                    1081,
                    991
                ],
                "cat.codes": [
                    2694,
                    815
                ],
                "is_dict_like": [
                    893
                ],
                "new_categories.get": [
                    894
                ],
                "item": [
                    896,
                    894
                ],
                "callable": [
                    895
                ],
                "self.set_categories": [
                    1043,
                    943
                ],
                "already_included": [
                    984,
                    981,
                    982
                ],
                "removals": [
                    1036,
                    1028,
                    1029,
                    1031
                ],
                "removal_set": [
                    1032,
                    1033,
                    1031
                ],
                "not_included": [
                    1032,
                    1040,
                    1037,
                    1041
                ],
                "c": [
                    1033
                ],
                "x": [
                    1316,
                    1037,
                    1038,
                    1877
                ],
                "notna": [
                    1362,
                    1037,
                    1038
                ],
                "inv": [
                    1081,
                    1074,
                    1071
                ],
                "np.unique": [
                    1071
                ],
                "idx.size": [
                    1073
                ],
                "cat.dtype.categories.take": [
                    1076
                ],
                "self.categories.map": [
                    1155
                ],
                "mapper": [
                    1155
                ],
                "self.from_codes": [
                    1157
                ],
                "self._codes.copy": [
                    1158
                ],
                "np.any": [
                    1163
                ],
                "new_categories.insert": [
                    1164
                ],
                "np.nan": [
                    1952,
                    1606,
                    1674,
                    1164,
                    1428,
                    1430,
                    2103,
                    2138
                ],
                "np.take": [
                    1165
                ],
                "__eq__": [
                    1167
                ],
                "_cat_compare_op": [
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172
                ],
                "operator.eq": [
                    1167
                ],
                "operator": [
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172
                ],
                "__ne__": [
                    1168
                ],
                "operator.ne": [
                    1168
                ],
                "__lt__": [
                    1169
                ],
                "operator.lt": [
                    1169
                ],
                "__gt__": [
                    1170
                ],
                "operator.gt": [
                    1170
                ],
                "__le__": [
                    1171
                ],
                "operator.le": [
                    1171
                ],
                "__ge__": [
                    1172
                ],
                "operator.ge": [
                    1172
                ],
                "codes.ndim": [
                    1194
                ],
                "fill_value": [
                    1824,
                    1221,
                    1222,
                    1223,
                    1224,
                    1802,
                    1227,
                    1197,
                    1230,
                    1199
                ],
                "self._validate_fill_value": [
                    1197
                ],
                "shift": [
                    1199
                ],
                "periods": [
                    1199
                ],
                "self._constructor": [
                    1728,
                    1410,
                    1962,
                    1583,
                    1201,
                    1620,
                    1813,
                    2165
                ],
                "take_1d": [
                    2642,
                    1243
                ],
                "self.categories.values": [
                    1243
                ],
                "is_dtype_equal": [
                    1978,
                    1244,
                    2589
                ],
                "self.categories.dtype": [
                    1688,
                    1427,
                    1244,
                    1885
                ],
                "result": [
                    1920,
                    1928,
                    1930,
                    1933,
                    1935,
                    2063,
                    2064,
                    1958,
                    1959,
                    1960,
                    1961,
                    1962,
                    1851,
                    1853,
                    1855,
                    1374,
                    1376,
                    1255,
                    1258,
                    1259,
                    2286,
                    2287,
                    2288,
                    2290,
                    1919
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1255
                ],
                "ops": [
                    1255
                ],
                "ufunc": [
                    1256,
                    1265
                ],
                "method": [
                    1669,
                    1670,
                    1256,
                    2576,
                    2577,
                    1683,
                    1687
                ],
                "inputs": [
                    1256
                ],
                "kwargs": [
                    1256,
                    2577,
                    2071,
                    1496
                ],
                "NotImplemented": [
                    1258
                ],
                "ufunc.__name__": [
                    1265
                ],
                "state": [
                    1273,
                    1274,
                    1276,
                    1270
                ],
                "dict": [
                    1270,
                    2063
                ],
                "Exception": [
                    1271
                ],
                "k": [
                    1276,
                    1277
                ],
                "state.items": [
                    1276
                ],
                "setattr": [
                    2562,
                    1277
                ],
                "self._codes.nbytes": [
                    1281,
                    1306
                ],
                "self.dtype.categories.values.nbytes": [
                    1281
                ],
                "self.dtype.categories.values": [
                    1281
                ],
                "self.dtype.categories.memory_usage": [
                    1306
                ],
                "deep": [
                    1306
                ],
                "self.codes.dtype.type": [
                    1314
                ],
                "self.codes.dtype": [
                    1314,
                    1317
                ],
                "locs": [
                    1316,
                    1317
                ],
                "self.codes.searchsorted": [
                    1318
                ],
                "side": [
                    1318
                ],
                "sorter": [
                    1318
                ],
                "doc": [
                    1308
                ],
                "_shared_docs": [
                    1308
                ],
                "isnull": [
                    1340
                ],
                "notnull": [
                    1362
                ],
                "self.notna": [
                    1374
                ],
                "code": [
                    1400,
                    1404,
                    1407,
                    1399
                ],
                "ncat": [
                    1400,
                    1401,
                    1405,
                    1407
                ],
                "ix": [
                    1408,
                    1401,
                    1410,
                    1412
                ],
                "clean": [
                    1401,
                    1403,
                    1404
                ],
                "np.arange": [
                    1401,
                    2685
                ],
                "mask.all": [
                    1401
                ],
                "dropna": [
                    2161,
                    1403,
                    2164
                ],
                "obs": [
                    1404,
                    1405
                ],
                "count": [
                    1412,
                    1405,
                    1407
                ],
                "np.bincount": [
                    1405,
                    1407
                ],
                "np.append": [
                    1408
                ],
                "Series": [
                    2579,
                    2571,
                    1412,
                    1613
                ],
                "CategoricalIndex": [
                    1412
                ],
                "needs_i8_conversion": [
                    1427
                ],
                "self.categories.take": [
                    1428
                ],
                "take": [
                    1430
                ],
                "self.categories.astype": [
                    1430
                ],
                "argsort": [
                    1496
                ],
                "super": [
                    1496
                ],
                "ascending": [
                    1496,
                    1578
                ],
                "kind": [
                    1496
                ],
                "na_position": [
                    1576,
                    1578,
                    1575
                ],
                "repr": [
                    1576
                ],
                "sorted_idx": [
                    1584,
                    1578,
                    1581
                ],
                "nargsort": [
                    1578
                ],
                "values.astype": [
                    1605
                ],
                "self.categories.is_numeric": [
                    1607
                ],
                "self.rename_categories": [
                    1613
                ],
                "rank": [
                    1613
                ],
                "warn": [
                    1632,
                    1819
                ],
                "FutureWarning": [
                    1635,
                    1821
                ],
                "validate_fillna_kwargs": [
                    1669
                ],
                "limit": [
                    1675
                ],
                "reshape": [
                    1686
                ],
                "astype": [
                    1687
                ],
                "interpolate_2d": [
                    1687
                ],
                "algorithms.isin": [
                    2354,
                    1700
                ],
                "algorithms": [
                    2354,
                    1700
                ],
                "values_codes": [
                    1704,
                    1707
                ],
                "indexer": [
                    1824,
                    1705,
                    1802,
                    1707,
                    2639,
                    2642,
                    1941,
                    1942,
                    1943
                ],
                "codes.copy": [
                    1706,
                    2635,
                    2638,
                    2642,
                    1716
                ],
                "is_hashable": [
                    1710
                ],
                "__name__": [
                    2345,
                    1725
                ],
                "_T": [
                    1730
                ],
                "NDArrayBackedExtensionArray.take": [
                    1801
                ],
                "allow_fill": [
                    1824,
                    1802
                ],
                "arr": [
                    1813
                ],
                "self.take": [
                    1824
                ],
                "iter": [
                    1830
                ],
                "self._internal_get_values": [
                    1830
                ],
                "contains": [
                    1840
                ],
                "num": [
                    1869,
                    1870,
                    1871,
                    1847,
                    1848,
                    1849
                ],
                "max_vals": [
                    1849,
                    1847
                ],
                "head": [
                    1848,
                    1872,
                    1851,
                    1870
                ],
                "_get_repr": [
                    1848,
                    1849
                ],
                "tail": [
                    1872,
                    1849,
                    1851,
                    1871
                ],
                "footer": [
                    1852,
                    1917
                ],
                "self._repr_footer": [
                    1853
                ],
                "max_categories": [
                    1868,
                    1861,
                    1869
                ],
                "get_option": [
                    1864,
                    1888,
                    1863
                ],
                "fmt.format_array": [
                    1874,
                    1870,
                    1871
                ],
                "fmt": [
                    1874,
                    1916,
                    1870,
                    1871
                ],
                "category_strs": [
                    1897,
                    1872,
                    1874,
                    1877,
                    1878,
                    1884
                ],
                "x.strip": [
                    1877
                ],
                "self._repr_categories": [
                    1884
                ],
                "levheader": [
                    1894,
                    1899,
                    1900,
                    1907,
                    1886
                ],
                "width": [
                    1888,
                    1887
                ],
                "height": [
                    1887
                ],
                "get_terminal_size": [
                    1887
                ],
                "max_width": [
                    1888,
                    1898,
                    1891
                ],
                "console.in_ipython_frontend": [
                    1889
                ],
                "console": [
                    1889
                ],
                "levstring": [
                    1892,
                    1899,
                    1902,
                    1904,
                    1907
                ],
                "start": [
                    1905,
                    1901,
                    1893,
                    2062
                ],
                "cur_col_len": [
                    1898,
                    1900,
                    1894,
                    1903
                ],
                "sep_len": [
                    1898,
                    1895
                ],
                "sep": [
                    1896,
                    1902,
                    1895
                ],
                "linesep": [
                    1896,
                    1899
                ],
                "sep.rstrip": [
                    1896
                ],
                "val": [
                    1904,
                    1897,
                    1898,
                    1903
                ],
                "levstring.replace": [
                    1907
                ],
                "info": [
                    1910,
                    1911
                ],
                "self._repr_categories_info": [
                    1910
                ],
                "formatter": [
                    1916,
                    1919
                ],
                "fmt.CategoricalFormatter": [
                    1916
                ],
                "length": [
                    1917
                ],
                "na_rep": [
                    1917
                ],
                "formatter.to_string": [
                    1919
                ],
                "_maxlen": [
                    1928,
                    1930,
                    1926,
                    1927
                ],
                "self._tidy_repr": [
                    1928
                ],
                "self._get_repr": [
                    1930,
                    1932
                ],
                "replace": [
                    1932
                ],
                "indexer.dtype.kind": [
                    1941
                ],
                "indexer.dtype": [
                    1941
                ],
                "indexer.astype": [
                    1942
                ],
                "self._codes.dtype": [
                    1942
                ],
                "np.integer": [
                    2004,
                    1949
                ],
                "check_array_indexer": [
                    1956,
                    2029
                ],
                "result.ndim": [
                    1959
                ],
                "deprecate_ndim_indexing": [
                    1960
                ],
                "extract_array": [
                    2682,
                    1974
                ],
                "value.categories": [
                    1985,
                    1983
                ],
                "new_codes": [
                    1984,
                    2642,
                    1987,
                    2643
                ],
                "value.codes": [
                    1985
                ],
                "Categorical.from_codes": [
                    1987,
                    2686
                ],
                "rvalue": [
                    1993,
                    2026,
                    1989
                ],
                "to_add": [
                    1993,
                    1997
                ],
                "difference": [
                    1993
                ],
                "tuple": [
                    2008,
                    2651
                ],
                "com.is_null_slice": [
                    2012
                ],
                "com": [
                    2012
                ],
                "AssertionError": [
                    2018,
                    2013
                ],
                "slice": [
                    2021
                ],
                "lindexer": [
                    2026,
                    2027,
                    2030
                ],
                "self.categories.get_indexer": [
                    2352,
                    2026
                ],
                "self._maybe_coerce_indexer": [
                    2027
                ],
                "r": [
                    2058,
                    2062
                ],
                "counts": [
                    2281,
                    2058,
                    2282,
                    2061,
                    2062,
                    2286
                ],
                "libalgos.groupsort_indexer": [
                    2058
                ],
                "libalgos": [
                    2058
                ],
                "self.codes.astype": [
                    2059,
                    2222
                ],
                "categories.size": [
                    2059
                ],
                "counts.cumsum": [
                    2061
                ],
                "_result": [
                    2062,
                    2063
                ],
                "end": [
                    2062
                ],
                "zip": [
                    2720,
                    2062,
                    2063
                ],
                "Dict": [
                    2032
                ],
                "Hashable": [
                    2032
                ],
                "name": [
                    2562,
                    2576,
                    2068,
                    2070,
                    2559
                ],
                "self.check_for_ordered": [
                    2128,
                    2093
                ],
                "self.dtype.na_value": [
                    2096,
                    2131
                ],
                "good": [
                    2098,
                    2099,
                    2100,
                    2101,
                    2133,
                    2134,
                    2135,
                    2162,
                    2163,
                    2136
                ],
                "good.all": [
                    2099,
                    2134
                ],
                "skipna": [
                    2100,
                    2135
                ],
                "good.any": [
                    2100,
                    2135
                ],
                "pointer": [
                    2101,
                    2136,
                    2105,
                    2106,
                    2140,
                    2141
                ],
                "min": [
                    2101
                ],
                "self._codes.min": [
                    2105
                ],
                "deprecate_kwarg": [
                    2073,
                    2108
                ],
                "max": [
                    2136
                ],
                "self._codes.max": [
                    2140
                ],
                "sorted": [
                    2164
                ],
                "htable.mode_int64": [
                    2164
                ],
                "htable": [
                    2164
                ],
                "ensure_int64": [
                    2164
                ],
                "unique_codes": [
                    2216,
                    2209,
                    2213
                ],
                "unique1d": [
                    2209
                ],
                "take_codes": [
                    2216,
                    2218,
                    2219
                ],
                "np.sort": [
                    2218
                ],
                "cat.set_categories": [
                    2219
                ],
                "cat.categories.take": [
                    2219
                ],
                "original._constructor": [
                    2227
                ],
                "original": [
                    2227,
                    2228
                ],
                "original.categories.take": [
                    2228
                ],
                "original.categories": [
                    2228
                ],
                "uniques": [
                    2228
                ],
                "original.dtype": [
                    2228
                ],
                "self.is_dtype_equal": [
                    2243
                ],
                "other.codes": [
                    2249
                ],
                "np.array_equal": [
                    2251
                ],
                "other.dtype": [
                    2268
                ],
                "AttributeError": [
                    2556,
                    2269
                ],
                "self.value_counts": [
                    2281
                ],
                "freqs": [
                    2282,
                    2286
                ],
                "float": [
                    2282
                ],
                "counts.sum": [
                    2282
                ],
                "concat": [
                    2286
                ],
                "result.columns": [
                    2287
                ],
                "result.index.name": [
                    2288
                ],
                "result.index": [
                    2288
                ],
                "union_categoricals": [
                    2301
                ],
                "to_concat": [
                    2301
                ],
                "values_type": [
                    2345,
                    2348
                ],
                "code_values": [
                    2352,
                    2353,
                    2354
                ],
                "to_replace": [
                    2392,
                    2387,
                    2389
                ],
                "replace_dict": [
                    2392,
                    2396,
                    2389
                ],
                "replace_value": [
                    2401,
                    2404,
                    2408,
                    2389,
                    2396,
                    2397,
                    2399
                ],
                "new_value": [
                    2400,
                    2405,
                    2406,
                    2410,
                    2396,
                    2397
                ],
                "replace_dict.items": [
                    2396
                ],
                "cat.remove_categories": [
                    2408,
                    2401
                ],
                "cat.categories.tolist": [
                    2403
                ],
                "index": [
                    2410,
                    2404,
                    2407
                ],
                "categories.index": [
                    2404,
                    2406
                ],
                "value_index": [
                    2406,
                    2407
                ],
                "cat.rename_categories": [
                    2411
                ],
                "PandasDelegate": [
                    2436
                ],
                "NoNewAttributesMixin": [
                    2436
                ],
                "self._validate": [
                    2547
                ],
                "data": [
                    2547,
                    2548,
                    2549,
                    2550,
                    2555
                ],
                "self._parent": [
                    2562,
                    2571,
                    2576,
                    2548,
                    2559
                ],
                "data.values": [
                    2548
                ],
                "self._index": [
                    2579,
                    2571,
                    2549
                ],
                "data.index": [
                    2549
                ],
                "self._name": [
                    2579,
                    2550
                ],
                "data.name": [
                    2550
                ],
                "self._freeze": [
                    2551
                ],
                "data.dtype": [
                    2555
                ],
                "staticmethod": [
                    2553
                ],
                "new_values": [
                    2562
                ],
                "self._parent.codes": [
                    2571
                ],
                "res": [
                    2577,
                    2578,
                    2579
                ],
                "args": [
                    2577
                ],
                "delegate_names": [
                    2419,
                    2422
                ],
                "dtype_equal": [
                    2601,
                    2589
                ],
                "categories.dtype": [
                    2595,
                    2589,
                    2591
                ],
                "is_object_dtype": [
                    2591
                ],
                "categories.dtype.construct_array_type": [
                    2595
                ],
                "maybe_cast_to_extension_array": [
                    2596
                ],
                "ensure_object": [
                    2600,
                    2602,
                    2603,
                    2599
                ],
                "hash_klass": [
                    2605,
                    2607
                ],
                "vals": [
                    2609,
                    2605
                ],
                "_get_data_algo": [
                    2605,
                    2606
                ],
                "_": [
                    2606
                ],
                "t": [
                    2608,
                    2609,
                    2607
                ],
                "t.map_locations": [
                    2608
                ],
                "t.lookup": [
                    2609
                ],
                "old_categories": [
                    2640,
                    2633,
                    2636
                ],
                "new_categories.equals": [
                    2636
                ],
                "new_categories.get_indexer": [
                    2640
                ],
                "hasattr": [
                    2647
                ],
                "list_like": [
                    2657,
                    2647,
                    2648,
                    2649,
                    2650,
                    2651,
                    2652,
                    2653,
                    2654
                ],
                "is_sequence": [
                    2651
                ],
                "is_iterator": [
                    2651
                ],
                "cat_codes": [
                    2685,
                    2686
                ],
                "values.codes.dtype": [
                    2685
                ],
                "iterables": [
                    2720,
                    2717
                ],
                "map": [
                    2720
                ],
                "factorize_from_iterable": [
                    2720
                ],
                "it": [
                    2720
                ]
            },
            "filtered_variables_in_file": {
                "opname": [
                    130,
                    131,
                    100,
                    69,
                    134,
                    139,
                    109,
                    111,
                    117,
                    119,
                    123,
                    60,
                    62,
                    95
                ],
                "op.__name__": [
                    60
                ],
                "op": [
                    60,
                    1437
                ],
                "is_list_like": [
                    64,
                    1028,
                    1989,
                    2344,
                    979,
                    2387,
                    2678
                ],
                "other": [
                    131,
                    135,
                    64,
                    2243,
                    2244,
                    2246,
                    73,
                    2249,
                    78,
                    80,
                    82,
                    85,
                    89,
                    91,
                    2268,
                    93,
                    106,
                    107,
                    108
                ],
                "self": [
                    2562,
                    1032,
                    1033,
                    2057,
                    2059,
                    2571,
                    2576,
                    1043,
                    1044,
                    2068,
                    2579,
                    1578,
                    1581,
                    1070,
                    1583,
                    1584,
                    2093,
                    2095,
                    2096,
                    2098,
                    2101,
                    1078,
                    2105,
                    2106,
                    64,
                    1601,
                    1602,
                    68,
                    1607,
                    1608,
                    1613,
                    78,
                    80,
                    2128,
                    82,
                    2130,
                    1620,
                    85,
                    2131,
                    2133,
                    2136,
                    89,
                    91,
                    2140,
                    2141,
                    95,
                    97,
                    101,
                    1638,
                    107,
                    108,
                    109,
                    2160,
                    113,
                    2162,
                    2163,
                    2165,
                    118,
                    120,
                    638,
                    131,
                    1155,
                    1157,
                    1158,
                    1163,
                    1165,
                    1680,
                    1686,
                    664,
                    1688,
                    666,
                    1690,
                    669,
                    670,
                    2209,
                    2210,
                    1700,
                    677,
                    1704,
                    1193,
                    2217,
                    1197,
                    2222,
                    1711,
                    1201,
                    692,
                    693,
                    1720,
                    1728,
                    2243,
                    708,
                    709,
                    2244,
                    1223,
                    1224,
                    2249,
                    2251,
                    730,
                    1243,
                    1244,
                    2268,
                    1256,
                    2281,
                    748,
                    1264,
                    1277,
                    1281,
                    1802,
                    1810,
                    1813,
                    1306,
                    1824,
                    1313,
                    1314,
                    803,
                    1316,
                    1317,
                    806,
                    1318,
                    1830,
                    1838,
                    1840,
                    2352,
                    306,
                    307,
                    2354,
                    1848,
                    1337,
                    1849,
                    1853,
                    1868,
                    1870,
                    1871,
                    1360,
                    2384,
                    1874,
                    1884,
                    1885,
                    1374,
                    1886,
                    1895,
                    372,
                    373,
                    1910,
                    1399,
                    1911,
                    891,
                    1917,
                    1410,
                    1927,
                    1928,
                    1929,
                    1930,
                    1932,
                    1427,
                    404,
                    1428,
                    1429,
                    1430,
                    408,
                    409,
                    1431,
                    1435,
                    1942,
                    1950,
                    416,
                    1954,
                    1443,
                    1956,
                    1958,
                    423,
                    1962,
                    939,
                    430,
                    943,
                    1978,
                    1983,
                    1985,
                    1987,
                    1993,
                    460,
                    461,
                    462,
                    463,
                    464,
                    466,
                    467,
                    469,
                    981,
                    986,
                    987,
                    476,
                    989,
                    486,
                    2026,
                    2027,
                    2029,
                    2030,
                    2547,
                    2548,
                    2549,
                    2550,
                    2551,
                    2559
                ],
                "self.ordered": [
                    1601,
                    68,
                    1158,
                    1895,
                    2217,
                    664,
                    80,
                    1044,
                    85,
                    1078,
                    1435,
                    408,
                    89,
                    666,
                    987
                ],
                "Categorical": [
                    1696,
                    1987,
                    2692,
                    73,
                    434,
                    2420,
                    438,
                    2423,
                    1977,
                    2686
                ],
                "msg": [
                    1932,
                    77,
                    1933,
                    79,
                    81,
                    83,
                    601,
                    605
                ],
                "self.categories": [
                    1155,
                    2057,
                    1427,
                    1428,
                    1429,
                    1430,
                    1688,
                    1690,
                    1313,
                    1954,
                    1316,
                    1700,
                    1704,
                    1711,
                    2352,
                    692,
                    1720,
                    2106,
                    1983,
                    1985,
                    708,
                    2244,
                    1223,
                    1224,
                    1607,
                    1993,
                    2249,
                    1868,
                    1613,
                    78,
                    1870,
                    80,
                    1871,
                    82,
                    1874,
                    89,
                    1243,
                    1244,
                    91,
                    476,
                    1885,
                    1886,
                    2141,
                    2026,
                    107,
                    108,
                    1399
                ],
                "other.categories": [
                    2244,
                    2249,
                    78,
                    80,
                    82,
                    89
                ],
                "other.ordered": [
                    85
                ],
                "self.categories.equals": [
                    89,
                    2244,
                    1983
                ],
                "other_codes": [
                    96,
                    97,
                    101,
                    2246,
                    2248,
                    2251,
                    91,
                    93
                ],
                "_get_codes_for_values": [
                    1704,
                    1690,
                    91,
                    364
                ],
                "other._codes": [
                    93,
                    2246
                ],
                "f": [
                    96,
                    95
                ],
                "self._codes": [
                    1281,
                    1158,
                    1927,
                    1929,
                    1163,
                    1165,
                    1680,
                    1810,
                    1428,
                    1429,
                    1430,
                    1942,
                    1306,
                    1950,
                    1443,
                    1958,
                    1581,
                    2095,
                    1584,
                    1840,
                    306,
                    2098,
                    2101,
                    1337,
                    2105,
                    2251,
                    2130,
                    1620,
                    2133,
                    2136,
                    1243,
                    2140,
                    95,
                    97,
                    101,
                    109,
                    2030,
                    2160,
                    113,
                    2162,
                    2163,
                    373,
                    1399,
                    638
                ],
                "ret": [
                    96,
                    1250,
                    1251,
                    101,
                    103,
                    104,
                    109,
                    114,
                    115,
                    1337,
                    1338,
                    1243,
                    1245,
                    1246
                ],
                "mask": [
                    97,
                    98,
                    1603,
                    1604,
                    1700,
                    1606,
                    103,
                    1701,
                    1720,
                    113,
                    114,
                    1714,
                    1715,
                    1718,
                    1400,
                    1401,
                    1404,
                    1407
                ],
                "mask.any": [
                    98,
                    1715,
                    1604
                ],
                "is_scalar": [
                    1312,
                    106,
                    1837,
                    188,
                    2653
                ],
                "i": [
                    1954,
                    108,
                    109,
                    1950,
                    1951
                ],
                "self.categories.get_loc": [
                    1313,
                    1316,
                    1224,
                    108,
                    1720
                ],
                "np.zeros": [
                    118
                ],
                "np": [
                    1408,
                    131,
                    1674,
                    1163,
                    1164,
                    1165,
                    1809,
                    1428,
                    1812,
                    1430,
                    1431,
                    1686,
                    1941,
                    1949,
                    1696,
                    1952,
                    1317,
                    1705,
                    2218,
                    1071,
                    2351,
                    2612,
                    2103,
                    312,
                    322,
                    2685,
                    326,
                    1606,
                    1608,
                    329,
                    2251,
                    1612,
                    1232,
                    2004,
                    469,
                    2138,
                    1245,
                    1250,
                    611,
                    613,
                    1638,
                    623,
                    368,
                    2032,
                    118,
                    120,
                    1401,
                    1405,
                    1407
                ],
                "np.ones": [
                    120,
                    368
                ],
                "np.array": [
                    131,
                    1317,
                    1608,
                    1612,
                    469,
                    1431,
                    312
                ],
                "unpack_zerodim_and_defer": [
                    62
                ],
                "func.__name__": [
                    139
                ],
                "func": [
                    139,
                    141,
                    2068,
                    2069,
                    2071
                ],
                "key": [
                    2016,
                    1956,
                    2021,
                    1958,
                    1837,
                    173,
                    2029,
                    1840,
                    2030,
                    179,
                    2004,
                    2014,
                    2008,
                    2011,
                    2012,
                    1949,
                    1950,
                    2015
                ],
                "loc": [
                    192,
                    179,
                    188,
                    189
                ],
                "cat.categories.get_loc": [
                    179
                ],
                "cat.categories": [
                    896,
                    898,
                    2403,
                    2405,
                    2693,
                    2219,
                    815,
                    179,
                    894,
                    2399
                ],
                "cat": [
                    896,
                    898,
                    900,
                    2692,
                    2693,
                    2694,
                    2210,
                    2213,
                    806,
                    808,
                    809,
                    2219,
                    812,
                    1070,
                    815,
                    1071,
                    817,
                    818,
                    179,
                    1076,
                    821,
                    1080,
                    1081,
                    1084,
                    709,
                    710,
                    712,
                    2384,
                    989,
                    990,
                    991,
                    2399,
                    993,
                    2401,
                    2403,
                    2405,
                    2407,
                    2408,
                    2411,
                    2413,
                    1399,
                    1400,
                    891,
                    894
                ],
                "container": [
                    192,
                    189
                ],
                "loc_": [
                    192
                ],
                "NDArrayBackedExtensionArray": [
                    1801,
                    195
                ],
                "PandasObject": [
                    291,
                    195,
                    2436
                ],
                "__array_priority__": [
                    288
                ],
                "_dtype": [
                    289
                ],
                "CategoricalDtype": [
                    518,
                    664,
                    408,
                    666,
                    289,
                    545,
                    547,
                    804,
                    679,
                    298,
                    426,
                    1077,
                    317,
                    708,
                    457,
                    597,
                    987,
                    353,
                    1274
                ],
                "_deprecations": [
                    291
                ],
                "PandasObject._deprecations": [
                    291
                ],
                "_typ": [
                    292
                ],
                "dtype": [
                    518,
                    523,
                    525,
                    527,
                    529,
                    537,
                    545,
                    547,
                    550,
                    298,
                    299,
                    306,
                    307,
                    692,
                    693,
                    438,
                    316,
                    317,
                    456,
                    457,
                    332,
                    460,
                    462,
                    464,
                    337,
                    465,
                    466,
                    467,
                    469,
                    597,
                    598,
                    600,
                    1618,
                    1619,
                    1244,
                    1245,
                    1885,
                    1886,
                    353,
                    360,
                    617,
                    364,
                    620,
                    372,
                    373
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    298,
                    597
                ],
                "values": [
                    2692,
                    1686,
                    1687,
                    1690,
                    2589,
                    2591,
                    2596,
                    2597,
                    2599,
                    2344,
                    2345,
                    2602,
                    299,
                    2605,
                    2350,
                    2351,
                    2352,
                    306,
                    315,
                    317,
                    318,
                    321,
                    322,
                    323,
                    1602,
                    1603,
                    326,
                    327,
                    1605,
                    329,
                    330,
                    1606,
                    1608,
                    1612,
                    334,
                    1613,
                    336,
                    1615,
                    355,
                    357,
                    360,
                    364,
                    2678,
                    2681,
                    2682,
                    2685,
                    2686,
                    2687
                ],
                "categories": [
                    2693,
                    2695,
                    2057,
                    2059,
                    2063,
                    406,
                    664,
                    408,
                    666,
                    537,
                    538,
                    2589,
                    542,
                    2591,
                    544,
                    545,
                    2595,
                    2600,
                    299,
                    2603,
                    2606,
                    334,
                    336,
                    598,
                    353,
                    2403,
                    2404,
                    2406,
                    2410,
                    2411,
                    2686
                ],
                "ordered": [
                    802,
                    803,
                    804,
                    299,
                    943,
                    598
                ],
                "fastpath": [
                    305,
                    668,
                    663
                ],
                "coerce_indexer_dtype": [
                    2639,
                    2609,
                    306,
                    373,
                    1081,
                    991
                ],
                "dtype.categories": [
                    518,
                    360,
                    617,
                    523,
                    364,
                    332,
                    525,
                    527,
                    529,
                    306,
                    692,
                    373,
                    600,
                    537,
                    316
                ],
                "self._dtype": [
                    416,
                    677,
                    430,
                    307,
                    372
                ],
                "self._dtype.update_dtype": [
                    307,
                    372
                ],
                "null_mask": [
                    327,
                    328,
                    329,
                    366,
                    2351,
                    368,
                    369,
                    2353,
                    312
                ],
                "is_categorical_dtype": [
                    355,
                    456,
                    2555,
                    2681,
                    315
                ],
                "values.categories": [
                    2685,
                    317
                ],
                "dtype.ordered": [
                    337,
                    317,
                    353
                ],
                "ABCIndexClass": [
                    318
                ],
                "ABCSeries": [
                    1696,
                    357,
                    318
                ],
                "maybe_infer_to_datetimelike": [
                    321
                ],
                "np.ndarray": [
                    1696,
                    322,
                    623,
                    1232,
                    1809,
                    2032,
                    1812,
                    1941,
                    2612
                ],
                "_convert_to_list_like": [
                    323
                ],
                "sanitize_dtype": [
                    330,
                    326
                ],
                "np.dtype": [
                    326
                ],
                "isna": [
                    2400,
                    609,
                    1221,
                    1701,
                    327,
                    1036,
                    1837,
                    1997,
                    1711,
                    2351,
                    1717,
                    1340
                ],
                "null_mask.any": [
                    328,
                    366
                ],
                "idx": [
                    329,
                    1071,
                    1073,
                    1074,
                    1076
                ],
                "np.where": [
                    329,
                    1705,
                    1407
                ],
                "sanitize_array": [
                    330,
                    2350
                ],
                "codes": [
                    2694,
                    2695,
                    1680,
                    538,
                    1690,
                    544,
                    1313,
                    1314,
                    548,
                    1317,
                    550,
                    1318,
                    1193,
                    1194,
                    1705,
                    1706,
                    1707,
                    814,
                    1199,
                    2222,
                    817,
                    1201,
                    1714,
                    692,
                    693,
                    1716,
                    1718,
                    1720,
                    2223,
                    1728,
                    2635,
                    334,
                    2638,
                    336,
                    2642,
                    607,
                    609,
                    611,
                    613,
                    614,
                    359,
                    617,
                    364,
                    620,
                    368,
                    369,
                    370,
                    2160,
                    2163,
                    373,
                    2164,
                    2165,
                    2687
                ],
                "factorize": [
                    336,
                    334
                ],
                "err": [
                    344,
                    350
                ],
                "values.dtype": [
                    360,
                    355,
                    2589,
                    2686
                ],
                "old_codes": [
                    360,
                    356
                ],
                "values._values.codes": [
                    357
                ],
                "values._values": [
                    357
                ],
                "values.codes": [
                    2685,
                    357,
                    2687
                ],
                "recode_for_categories": [
                    544,
                    1984,
                    359,
                    2248,
                    814,
                    692,
                    538
                ],
                "values.dtype.categories": [
                    360
                ],
                "full_codes": [
                    368,
                    369,
                    370
                ],
                "null_mask.shape": [
                    368
                ],
                "codes.dtype": [
                    368
                ],
                "self.dtype.categories": [
                    1281,
                    1032,
                    1033,
                    939,
                    1306,
                    404,
                    981,
                    409,
                    986,
                    669,
                    670
                ],
                "self.dtype": [
                    1281,
                    1410,
                    1032,
                    1033,
                    404,
                    1813,
                    409,
                    1306,
                    669,
                    670,
                    803,
                    423,
                    1962,
                    939,
                    1584,
                    1201,
                    2096,
                    1728,
                    1987,
                    460,
                    462,
                    2131,
                    1620,
                    981,
                    986,
                    2268,
                    1264,
                    2165
                ],
                "new_dtype": [
                    664,
                    408,
                    666,
                    410,
                    670,
                    416,
                    804,
                    677,
                    808,
                    812,
                    815,
                    818,
                    1077,
                    1080,
                    1081,
                    708,
                    710,
                    987,
                    990,
                    991
                ],
                "new_dtype.categories": [
                    808,
                    812,
                    815,
                    1081,
                    410,
                    670,
                    991
                ],
                "categories.setter": [
                    406
                ],
                "self.dtype.ordered": [
                    803,
                    423
                ],
                "Ordered": [
                    419
                ],
                "Type": [
                    433
                ],
                "scalars": [
                    438
                ],
                "Dtype": [
                    444
                ],
                "cast": [
                    457
                ],
                "Union": [
                    457
                ],
                "self.dtype.update_dtype": [
                    460
                ],
                "copy": [
                    469,
                    466,
                    461
                ],
                "self.copy": [
                    2210,
                    709,
                    806,
                    461,
                    1070,
                    2384,
                    891,
                    989
                ],
                "self._set_dtype": [
                    464
                ],
                "is_extension_array_dtype": [
                    465,
                    2591,
                    1246,
                    607
                ],
                "array": [
                    466
                ],
                "is_integer_dtype": [
                    467,
                    1429,
                    614,
                    607
                ],
                "self.isna": [
                    1360,
                    467,
                    1838
                ],
                "ArrayLike": [
                    444
                ],
                "self.categories.itemsize": [
                    476
                ],
                "cache_readonly": [
                    471
                ],
                "List": [
                    478
                ],
                "Scalar": [
                    478
                ],
                "to_list": [
                    488
                ],
                "tolist": [
                    488,
                    1830
                ],
                "cats": [
                    547,
                    516,
                    524,
                    526,
                    2606,
                    528,
                    2607,
                    2608,
                    2609,
                    533,
                    538,
                    539,
                    541,
                    542
                ],
                "Index": [
                    1993,
                    516
                ],
                "inferred_categories": [
                    528,
                    516,
                    524,
                    526
                ],
                "known_categories": [
                    521,
                    517,
                    535
                ],
                "dtype.categories.is_numeric": [
                    523
                ],
                "to_numeric": [
                    524
                ],
                "is_datetime64_dtype": [
                    525
                ],
                "to_datetime": [
                    526
                ],
                "is_timedelta64_dtype": [
                    527
                ],
                "to_timedelta": [
                    528
                ],
                "dtype.categories.is_boolean": [
                    529
                ],
                "true_values": [
                    530,
                    531,
                    533
                ],
                "cats.isin": [
                    533
                ],
                "inferred_codes": [
                    544,
                    538,
                    548
                ],
                "cats.is_monotonic_increasing": [
                    539
                ],
                "unsorted": [
                    544,
                    541
                ],
                "cats.copy": [
                    541
                ],
                "cats.sort_values": [
                    542
                ],
                "cls": [
                    2595,
                    2596,
                    2597,
                    550,
                    620
                ],
                "codes.to_numpy": [
                    611
                ],
                "np.int64": [
                    611
                ],
                "np.asarray": [
                    1250,
                    613,
                    1638,
                    2351,
                    1686,
                    1245
                ],
                "codes.max": [
                    617
                ],
                "codes.min": [
                    617
                ],
                "v": [
                    640,
                    1276,
                    1277,
                    638,
                    639
                ],
                "self._codes.view": [
                    638
                ],
                "v.flags.writeable": [
                    639
                ],
                "v.flags": [
                    639
                ],
                "CategoricalDtype._from_fastpath": [
                    664,
                    1077
                ],
                "self.codes": [
                    2209,
                    1314,
                    1602,
                    1317,
                    1318,
                    1193,
                    2059,
                    2222,
                    2354,
                    692
                ],
                "inplace": [
                    899,
                    1027,
                    1044,
                    801,
                    806,
                    1574,
                    938,
                    1580,
                    1069,
                    1070,
                    943,
                    820,
                    1083,
                    707,
                    709,
                    711,
                    2383,
                    2384,
                    978,
                    729,
                    730,
                    989,
                    992,
                    747,
                    748,
                    2412,
                    890,
                    891
                ],
                "validate_bool_kwarg": [
                    801,
                    707,
                    1027,
                    1574,
                    938,
                    747,
                    1069,
                    2383,
                    978,
                    729,
                    890
                ],
                "value": [
                    1669,
                    1670,
                    1673,
                    1674,
                    1687,
                    1312,
                    1313,
                    1696,
                    1316,
                    1700,
                    1701,
                    1704,
                    1710,
                    1711,
                    1717,
                    1974,
                    1720,
                    1977,
                    1978,
                    1725,
                    1983,
                    1985,
                    1987,
                    708,
                    1989,
                    2389,
                    2392
                ],
                "cat._dtype": [
                    1080,
                    818,
                    990,
                    710
                ],
                "self.set_ordered": [
                    730,
                    748
                ],
                "new_categories": [
                    896,
                    898,
                    1155,
                    1158,
                    1033,
                    1164,
                    1165,
                    1038,
                    1044,
                    804,
                    939,
                    943,
                    1076,
                    1078,
                    2636,
                    2640,
                    979,
                    980,
                    981,
                    986,
                    987,
                    893,
                    894,
                    895
                ],
                "rename": [
                    807
                ],
                "cat.dtype.categories": [
                    808,
                    809,
                    1076
                ],
                "cat.dtype": [
                    808,
                    809,
                    1076
                ],
                "cat._codes": [
                    2213,
                    2407,
                    812,
                    1071,
                    817,
                    1081,
                    991
                ],
                "cat.codes": [
                    2694,
                    815
                ],
                "is_dict_like": [
                    893
                ],
                "new_categories.get": [
                    894
                ],
                "item": [
                    896,
                    894
                ],
                "self.set_categories": [
                    1043,
                    943
                ],
                "already_included": [
                    984,
                    981,
                    982
                ],
                "removals": [
                    1036,
                    1028,
                    1029,
                    1031
                ],
                "removal_set": [
                    1032,
                    1033,
                    1031
                ],
                "not_included": [
                    1032,
                    1040,
                    1037,
                    1041
                ],
                "c": [
                    1033
                ],
                "x": [
                    1316,
                    1037,
                    1038,
                    1877
                ],
                "notna": [
                    1362,
                    1037,
                    1038
                ],
                "inv": [
                    1081,
                    1074,
                    1071
                ],
                "np.unique": [
                    1071
                ],
                "idx.size": [
                    1073
                ],
                "cat.dtype.categories.take": [
                    1076
                ],
                "self.categories.map": [
                    1155
                ],
                "mapper": [
                    1155
                ],
                "self.from_codes": [
                    1157
                ],
                "self._codes.copy": [
                    1158
                ],
                "np.any": [
                    1163
                ],
                "new_categories.insert": [
                    1164
                ],
                "np.nan": [
                    1952,
                    1606,
                    1674,
                    1164,
                    1428,
                    1430,
                    2103,
                    2138
                ],
                "np.take": [
                    1165
                ],
                "__eq__": [
                    1167
                ],
                "_cat_compare_op": [
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172
                ],
                "operator.eq": [
                    1167
                ],
                "operator": [
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172
                ],
                "__ne__": [
                    1168
                ],
                "operator.ne": [
                    1168
                ],
                "__lt__": [
                    1169
                ],
                "operator.lt": [
                    1169
                ],
                "__gt__": [
                    1170
                ],
                "operator.gt": [
                    1170
                ],
                "__le__": [
                    1171
                ],
                "operator.le": [
                    1171
                ],
                "__ge__": [
                    1172
                ],
                "operator.ge": [
                    1172
                ],
                "codes.ndim": [
                    1194
                ],
                "fill_value": [
                    1824,
                    1221,
                    1222,
                    1223,
                    1224,
                    1802,
                    1227,
                    1197,
                    1230,
                    1199
                ],
                "self._validate_fill_value": [
                    1197
                ],
                "shift": [
                    1199
                ],
                "periods": [
                    1199
                ],
                "self._constructor": [
                    1728,
                    1410,
                    1962,
                    1583,
                    1201,
                    1620,
                    1813,
                    2165
                ],
                "take_1d": [
                    2642,
                    1243
                ],
                "self.categories.values": [
                    1243
                ],
                "is_dtype_equal": [
                    1978,
                    1244,
                    2589
                ],
                "self.categories.dtype": [
                    1688,
                    1427,
                    1244,
                    1885
                ],
                "result": [
                    1920,
                    1928,
                    1930,
                    1933,
                    1935,
                    2063,
                    2064,
                    1958,
                    1959,
                    1960,
                    1961,
                    1962,
                    1851,
                    1853,
                    1855,
                    1374,
                    1376,
                    1255,
                    1258,
                    1259,
                    2286,
                    2287,
                    2288,
                    2290,
                    1919
                ],
                "ops.maybe_dispatch_ufunc_to_dunder_op": [
                    1255
                ],
                "ops": [
                    1255
                ],
                "ufunc": [
                    1256,
                    1265
                ],
                "method": [
                    1669,
                    1670,
                    1256,
                    2576,
                    2577,
                    1683,
                    1687
                ],
                "inputs": [
                    1256
                ],
                "kwargs": [
                    1256,
                    2577,
                    2071,
                    1496
                ],
                "ufunc.__name__": [
                    1265
                ],
                "state": [
                    1273,
                    1274,
                    1276,
                    1270
                ],
                "k": [
                    1276,
                    1277
                ],
                "state.items": [
                    1276
                ],
                "self._codes.nbytes": [
                    1281,
                    1306
                ],
                "self.dtype.categories.values.nbytes": [
                    1281
                ],
                "self.dtype.categories.values": [
                    1281
                ],
                "self.dtype.categories.memory_usage": [
                    1306
                ],
                "deep": [
                    1306
                ],
                "self.codes.dtype.type": [
                    1314
                ],
                "self.codes.dtype": [
                    1314,
                    1317
                ],
                "locs": [
                    1316,
                    1317
                ],
                "self.codes.searchsorted": [
                    1318
                ],
                "side": [
                    1318
                ],
                "sorter": [
                    1318
                ],
                "doc": [
                    1308
                ],
                "_shared_docs": [
                    1308
                ],
                "isnull": [
                    1340
                ],
                "notnull": [
                    1362
                ],
                "self.notna": [
                    1374
                ],
                "code": [
                    1400,
                    1404,
                    1407,
                    1399
                ],
                "ncat": [
                    1400,
                    1401,
                    1405,
                    1407
                ],
                "ix": [
                    1408,
                    1401,
                    1410,
                    1412
                ],
                "clean": [
                    1401,
                    1403,
                    1404
                ],
                "np.arange": [
                    1401,
                    2685
                ],
                "mask.all": [
                    1401
                ],
                "dropna": [
                    2161,
                    1403,
                    2164
                ],
                "obs": [
                    1404,
                    1405
                ],
                "count": [
                    1412,
                    1405,
                    1407
                ],
                "np.bincount": [
                    1405,
                    1407
                ],
                "np.append": [
                    1408
                ],
                "Series": [
                    2579,
                    2571,
                    1412,
                    1613
                ],
                "CategoricalIndex": [
                    1412
                ],
                "needs_i8_conversion": [
                    1427
                ],
                "self.categories.take": [
                    1428
                ],
                "take": [
                    1430
                ],
                "self.categories.astype": [
                    1430
                ],
                "argsort": [
                    1496
                ],
                "ascending": [
                    1496,
                    1578
                ],
                "kind": [
                    1496
                ],
                "na_position": [
                    1576,
                    1578,
                    1575
                ],
                "sorted_idx": [
                    1584,
                    1578,
                    1581
                ],
                "nargsort": [
                    1578
                ],
                "values.astype": [
                    1605
                ],
                "self.categories.is_numeric": [
                    1607
                ],
                "self.rename_categories": [
                    1613
                ],
                "rank": [
                    1613
                ],
                "warn": [
                    1632,
                    1819
                ],
                "validate_fillna_kwargs": [
                    1669
                ],
                "limit": [
                    1675
                ],
                "reshape": [
                    1686
                ],
                "astype": [
                    1687
                ],
                "interpolate_2d": [
                    1687
                ],
                "algorithms.isin": [
                    2354,
                    1700
                ],
                "algorithms": [
                    2354,
                    1700
                ],
                "values_codes": [
                    1704,
                    1707
                ],
                "indexer": [
                    1824,
                    1705,
                    1802,
                    1707,
                    2639,
                    2642,
                    1941,
                    1942,
                    1943
                ],
                "codes.copy": [
                    1706,
                    2635,
                    2638,
                    2642,
                    1716
                ],
                "is_hashable": [
                    1710
                ],
                "_T": [
                    1730
                ],
                "NDArrayBackedExtensionArray.take": [
                    1801
                ],
                "allow_fill": [
                    1824,
                    1802
                ],
                "arr": [
                    1813
                ],
                "self.take": [
                    1824
                ],
                "self._internal_get_values": [
                    1830
                ],
                "contains": [
                    1840
                ],
                "num": [
                    1869,
                    1870,
                    1871,
                    1847,
                    1848,
                    1849
                ],
                "max_vals": [
                    1849,
                    1847
                ],
                "head": [
                    1848,
                    1872,
                    1851,
                    1870
                ],
                "_get_repr": [
                    1848,
                    1849
                ],
                "tail": [
                    1872,
                    1849,
                    1851,
                    1871
                ],
                "footer": [
                    1852,
                    1917
                ],
                "self._repr_footer": [
                    1853
                ],
                "max_categories": [
                    1868,
                    1861,
                    1869
                ],
                "get_option": [
                    1864,
                    1888,
                    1863
                ],
                "fmt.format_array": [
                    1874,
                    1870,
                    1871
                ],
                "fmt": [
                    1874,
                    1916,
                    1870,
                    1871
                ],
                "category_strs": [
                    1897,
                    1872,
                    1874,
                    1877,
                    1878,
                    1884
                ],
                "x.strip": [
                    1877
                ],
                "self._repr_categories": [
                    1884
                ],
                "levheader": [
                    1894,
                    1899,
                    1900,
                    1907,
                    1886
                ],
                "width": [
                    1888,
                    1887
                ],
                "height": [
                    1887
                ],
                "get_terminal_size": [
                    1887
                ],
                "max_width": [
                    1888,
                    1898,
                    1891
                ],
                "console.in_ipython_frontend": [
                    1889
                ],
                "console": [
                    1889
                ],
                "levstring": [
                    1892,
                    1899,
                    1902,
                    1904,
                    1907
                ],
                "start": [
                    1905,
                    1901,
                    1893,
                    2062
                ],
                "cur_col_len": [
                    1898,
                    1900,
                    1894,
                    1903
                ],
                "sep_len": [
                    1898,
                    1895
                ],
                "sep": [
                    1896,
                    1902,
                    1895
                ],
                "linesep": [
                    1896,
                    1899
                ],
                "sep.rstrip": [
                    1896
                ],
                "val": [
                    1904,
                    1897,
                    1898,
                    1903
                ],
                "levstring.replace": [
                    1907
                ],
                "info": [
                    1910,
                    1911
                ],
                "self._repr_categories_info": [
                    1910
                ],
                "formatter": [
                    1916,
                    1919
                ],
                "fmt.CategoricalFormatter": [
                    1916
                ],
                "length": [
                    1917
                ],
                "na_rep": [
                    1917
                ],
                "formatter.to_string": [
                    1919
                ],
                "_maxlen": [
                    1928,
                    1930,
                    1926,
                    1927
                ],
                "self._tidy_repr": [
                    1928
                ],
                "self._get_repr": [
                    1930,
                    1932
                ],
                "replace": [
                    1932
                ],
                "indexer.dtype.kind": [
                    1941
                ],
                "indexer.dtype": [
                    1941
                ],
                "indexer.astype": [
                    1942
                ],
                "self._codes.dtype": [
                    1942
                ],
                "np.integer": [
                    2004,
                    1949
                ],
                "check_array_indexer": [
                    1956,
                    2029
                ],
                "result.ndim": [
                    1959
                ],
                "deprecate_ndim_indexing": [
                    1960
                ],
                "extract_array": [
                    2682,
                    1974
                ],
                "value.categories": [
                    1985,
                    1983
                ],
                "new_codes": [
                    1984,
                    2642,
                    1987,
                    2643
                ],
                "value.codes": [
                    1985
                ],
                "Categorical.from_codes": [
                    1987,
                    2686
                ],
                "rvalue": [
                    1993,
                    2026,
                    1989
                ],
                "to_add": [
                    1993,
                    1997
                ],
                "difference": [
                    1993
                ],
                "com.is_null_slice": [
                    2012
                ],
                "com": [
                    2012
                ],
                "lindexer": [
                    2026,
                    2027,
                    2030
                ],
                "self.categories.get_indexer": [
                    2352,
                    2026
                ],
                "self._maybe_coerce_indexer": [
                    2027
                ],
                "r": [
                    2058,
                    2062
                ],
                "counts": [
                    2281,
                    2058,
                    2282,
                    2061,
                    2062,
                    2286
                ],
                "libalgos.groupsort_indexer": [
                    2058
                ],
                "libalgos": [
                    2058
                ],
                "self.codes.astype": [
                    2059,
                    2222
                ],
                "categories.size": [
                    2059
                ],
                "counts.cumsum": [
                    2061
                ],
                "_result": [
                    2062,
                    2063
                ],
                "end": [
                    2062
                ],
                "Dict": [
                    2032
                ],
                "Hashable": [
                    2032
                ],
                "name": [
                    2562,
                    2576,
                    2068,
                    2070,
                    2559
                ],
                "self.check_for_ordered": [
                    2128,
                    2093
                ],
                "self.dtype.na_value": [
                    2096,
                    2131
                ],
                "good": [
                    2098,
                    2099,
                    2100,
                    2101,
                    2133,
                    2134,
                    2135,
                    2162,
                    2163,
                    2136
                ],
                "good.all": [
                    2099,
                    2134
                ],
                "skipna": [
                    2100,
                    2135
                ],
                "good.any": [
                    2100,
                    2135
                ],
                "pointer": [
                    2101,
                    2136,
                    2105,
                    2106,
                    2140,
                    2141
                ],
                "self._codes.min": [
                    2105
                ],
                "deprecate_kwarg": [
                    2073,
                    2108
                ],
                "self._codes.max": [
                    2140
                ],
                "htable.mode_int64": [
                    2164
                ],
                "htable": [
                    2164
                ],
                "ensure_int64": [
                    2164
                ],
                "unique_codes": [
                    2216,
                    2209,
                    2213
                ],
                "unique1d": [
                    2209
                ],
                "take_codes": [
                    2216,
                    2218,
                    2219
                ],
                "np.sort": [
                    2218
                ],
                "cat.set_categories": [
                    2219
                ],
                "cat.categories.take": [
                    2219
                ],
                "original._constructor": [
                    2227
                ],
                "original": [
                    2227,
                    2228
                ],
                "original.categories.take": [
                    2228
                ],
                "original.categories": [
                    2228
                ],
                "uniques": [
                    2228
                ],
                "original.dtype": [
                    2228
                ],
                "self.is_dtype_equal": [
                    2243
                ],
                "other.codes": [
                    2249
                ],
                "np.array_equal": [
                    2251
                ],
                "other.dtype": [
                    2268
                ],
                "self.value_counts": [
                    2281
                ],
                "freqs": [
                    2282,
                    2286
                ],
                "counts.sum": [
                    2282
                ],
                "concat": [
                    2286
                ],
                "result.columns": [
                    2287
                ],
                "result.index.name": [
                    2288
                ],
                "result.index": [
                    2288
                ],
                "union_categoricals": [
                    2301
                ],
                "to_concat": [
                    2301
                ],
                "values_type": [
                    2345,
                    2348
                ],
                "code_values": [
                    2352,
                    2353,
                    2354
                ],
                "to_replace": [
                    2392,
                    2387,
                    2389
                ],
                "replace_dict": [
                    2392,
                    2396,
                    2389
                ],
                "replace_value": [
                    2401,
                    2404,
                    2408,
                    2389,
                    2396,
                    2397,
                    2399
                ],
                "new_value": [
                    2400,
                    2405,
                    2406,
                    2410,
                    2396,
                    2397
                ],
                "replace_dict.items": [
                    2396
                ],
                "cat.remove_categories": [
                    2408,
                    2401
                ],
                "cat.categories.tolist": [
                    2403
                ],
                "index": [
                    2410,
                    2404,
                    2407
                ],
                "categories.index": [
                    2404,
                    2406
                ],
                "value_index": [
                    2406,
                    2407
                ],
                "cat.rename_categories": [
                    2411
                ],
                "PandasDelegate": [
                    2436
                ],
                "NoNewAttributesMixin": [
                    2436
                ],
                "self._validate": [
                    2547
                ],
                "data": [
                    2547,
                    2548,
                    2549,
                    2550,
                    2555
                ],
                "self._parent": [
                    2562,
                    2571,
                    2576,
                    2548,
                    2559
                ],
                "data.values": [
                    2548
                ],
                "self._index": [
                    2579,
                    2571,
                    2549
                ],
                "data.index": [
                    2549
                ],
                "self._name": [
                    2579,
                    2550
                ],
                "data.name": [
                    2550
                ],
                "self._freeze": [
                    2551
                ],
                "data.dtype": [
                    2555
                ],
                "new_values": [
                    2562
                ],
                "self._parent.codes": [
                    2571
                ],
                "res": [
                    2577,
                    2578,
                    2579
                ],
                "args": [
                    2577
                ],
                "delegate_names": [
                    2419,
                    2422
                ],
                "dtype_equal": [
                    2601,
                    2589
                ],
                "categories.dtype": [
                    2595,
                    2589,
                    2591
                ],
                "is_object_dtype": [
                    2591
                ],
                "categories.dtype.construct_array_type": [
                    2595
                ],
                "maybe_cast_to_extension_array": [
                    2596
                ],
                "ensure_object": [
                    2600,
                    2602,
                    2603,
                    2599
                ],
                "hash_klass": [
                    2605,
                    2607
                ],
                "vals": [
                    2609,
                    2605
                ],
                "_get_data_algo": [
                    2605,
                    2606
                ],
                "_": [
                    2606
                ],
                "t": [
                    2608,
                    2609,
                    2607
                ],
                "t.map_locations": [
                    2608
                ],
                "t.lookup": [
                    2609
                ],
                "old_categories": [
                    2640,
                    2633,
                    2636
                ],
                "new_categories.equals": [
                    2636
                ],
                "new_categories.get_indexer": [
                    2640
                ],
                "list_like": [
                    2657,
                    2647,
                    2648,
                    2649,
                    2650,
                    2651,
                    2652,
                    2653,
                    2654
                ],
                "is_sequence": [
                    2651
                ],
                "is_iterator": [
                    2651
                ],
                "cat_codes": [
                    2685,
                    2686
                ],
                "values.codes.dtype": [
                    2685
                ],
                "iterables": [
                    2720,
                    2717
                ],
                "factorize_from_iterable": [
                    2720
                ],
                "it": [
                    2720
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_9/pandas/core/indexes/category.py": {
            "buggy_functions": [
                {
                    "function_name": "__contains__",
                    "function_code": "@doc(Index.__contains__)\ndef __contains__(self, key: Any) -> bool:\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.hasnans\n\n    hash(key)\n    return contains(self, key, container=self._engine)\n",
                    "decorators": [
                        "doc(Index.__contains__)"
                    ],
                    "docstring": null,
                    "start_line": 365,
                    "variables": {
                        "Any": [
                            366
                        ],
                        "is_scalar": [
                            368
                        ],
                        "key": [
                            368,
                            371,
                            372
                        ],
                        "isna": [
                            368
                        ],
                        "self.hasnans": [
                            369
                        ],
                        "self": [
                            369,
                            372
                        ],
                        "hash": [
                            371
                        ],
                        "contains": [
                            372
                        ],
                        "self._engine": [
                            372
                        ],
                        "doc": [
                            365
                        ],
                        "Index.__contains__": [
                            365
                        ],
                        "Index": [
                            365
                        ],
                        "bool": [
                            366
                        ]
                    },
                    "filtered_variables": {
                        "Any": [
                            366
                        ],
                        "is_scalar": [
                            368
                        ],
                        "key": [
                            368,
                            371,
                            372
                        ],
                        "isna": [
                            368
                        ],
                        "self.hasnans": [
                            369
                        ],
                        "self": [
                            369,
                            372
                        ],
                        "contains": [
                            372
                        ],
                        "self._engine": [
                            372
                        ],
                        "doc": [
                            365
                        ],
                        "Index.__contains__": [
                            365
                        ],
                        "Index": [
                            365
                        ]
                    },
                    "diff_line_number": 368,
                    "class_data": {
                        "signature": "class CategoricalIndex(ExtensionIndex, accessor.PandasDelegate)",
                        "docstring": "Index based on an underlying :class:`Categorical`.\n\nCategoricalIndex, like Categorical, can only take on a limited,\nand usually fixed, number of possible values (`categories`). Also,\nlike Categorical, it might have an order, but numerical operations\n(additions, divisions, ...) are not possible.\n\nParameters\n----------\ndata : array-like (1-dimensional)\n    The values of the categorical. If `categories` are given, values not in\n    `categories` will be replaced with NaN.\ncategories : index-like, optional\n    The categories for the categorical. Items need to be unique.\n    If the categories are not given here (and also not in `dtype`), they\n    will be inferred from the `data`.\nordered : bool, optional\n    Whether or not this categorical is treated as an ordered\n    categorical. If not given here or in `dtype`, the resulting\n    categorical will be unordered.\ndtype : CategoricalDtype or \"category\", optional\n    If :class:`CategoricalDtype`, cannot be used together with\n    `categories` or `ordered`.\ncopy : bool, default False\n    Make a copy of input ndarray.\nname : object, optional\n    Name to be stored in the index.\n\nAttributes\n----------\ncodes\ncategories\nordered\n\nMethods\n-------\nrename_categories\nreorder_categories\nadd_categories\nremove_categories\nremove_unused_categories\nset_categories\nas_ordered\nas_unordered\nmap\n\nRaises\n------\nValueError\n    If the categories do not validate.\nTypeError\n    If an explicit ``ordered=True`` is given but no `categories` and the\n    `values` are not sortable.\n\nSee Also\n--------\nIndex : The base pandas Index type.\nCategorical : A categorical array.\nCategoricalDtype : Type for categorical data.\n\nNotes\n-----\nSee the `user guide\n<https://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html#categoricalindex>`_\nfor more.\n\nExamples\n--------\n>>> pd.CategoricalIndex([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"])\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'],\n                 categories=['a', 'b', 'c'], ordered=False, dtype='category')\n\n``CategoricalIndex`` can also be instantiated from a ``Categorical``:\n\n>>> c = pd.Categorical([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"])\n>>> pd.CategoricalIndex(c)\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'],\n                 categories=['a', 'b', 'c'], ordered=False, dtype='category')\n\nOrdered ``CategoricalIndex`` can have a min and max value.\n\n>>> ci = pd.CategoricalIndex(\n...     [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"], ordered=True, categories=[\"c\", \"b\", \"a\"]\n... )\n>>> ci\nCategoricalIndex(['a', 'b', 'c', 'a', 'b', 'c'],\n                 categories=['c', 'b', 'a'], ordered=True, dtype='category')\n>>> ci.min()\n'c'",
                        "constructor_docstring": null,
                        "functions": [
                            "@property\ndef _engine_type(self):\n    return {np.int8: libindex.Int8Engine, np.int16: libindex.Int16Engine, np.int32: libindex.Int32Engine, np.int64: libindex.Int64Engine}[self.codes.dtype.type]",
                            "def __new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None):\n    dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n    name = maybe_extract_name(name, data, cls)\n    if not is_categorical_dtype(data):\n        if is_scalar(data):\n            if data is not None or categories is None:\n                raise cls._scalar_data_error(data)\n            data = []\n    assert isinstance(dtype, CategoricalDtype), dtype\n    data = extract_array(data, extract_numpy=True)\n    if not isinstance(data, Categorical):\n        data = Categorical(data, dtype=dtype)\n    elif isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n        data = data._set_dtype(dtype)\n    data = data.copy() if copy else data\n    return cls._simple_new(data, name=name)",
                            "def _create_from_codes(self, codes, dtype=None, name=None):\n    \"\"\"\n    *this is an internal non-public method*\n\n    create the correct categorical from codes\n\n    Parameters\n    ----------\n    codes : new codes\n    dtype: CategoricalDtype, defaults to existing\n    name : optional name attribute, defaults to existing\n\n    Returns\n    -------\n    CategoricalIndex\n    \"\"\"\n    if dtype is None:\n        dtype = self.dtype\n    if name is None:\n        name = self.name\n    cat = Categorical.from_codes(codes, dtype=dtype)\n    return CategoricalIndex(cat, name=name)",
                            "@classmethod\ndef _simple_new(cls, values: Categorical, name: Label=None):\n    assert isinstance(values, Categorical), type(values)\n    result = object.__new__(cls)\n    result._data = values\n    result.name = name\n    result._cache = {}\n    result._reset_identity()\n    result._no_setting_name = False\n    return result",
                            "@doc(Index._shallow_copy)\ndef _shallow_copy(self, values=None, name: Label=no_default):\n    name = self.name if name is no_default else name\n    if values is not None:\n        values = Categorical(values, dtype=self.dtype)\n    return super()._shallow_copy(values=values, name=name)",
                            "def _is_dtype_compat(self, other) -> bool:\n    \"\"\"\n    *this is an internal non-public method*\n\n    provide a comparison between the dtype of self and other (coercing if\n    needed)\n\n    Raises\n    ------\n    TypeError if the dtypes are not compatible\n    \"\"\"\n    if is_categorical_dtype(other):\n        if isinstance(other, CategoricalIndex):\n            other = other._values\n        if not other.is_dtype_equal(self):\n            raise TypeError('categories must match existing categories when appending')\n    else:\n        values = other\n        if not is_list_like(values):\n            values = [values]\n        cat = Categorical(other, dtype=self.dtype)\n        other = CategoricalIndex(cat)\n        if not other.isin(values).all():\n            raise TypeError('cannot append a non-category item to a CategoricalIndex')\n    return other",
                            "def equals(self, other) -> bool:\n    \"\"\"\n    Determine if two CategoricalIndex objects contain the same elements.\n\n    Returns\n    -------\n    bool\n        If two CategoricalIndex objects have equal elements True,\n        otherwise False.\n    \"\"\"\n    if self.is_(other):\n        return True\n    if not isinstance(other, Index):\n        return False\n    try:\n        other = self._is_dtype_compat(other)\n        if isinstance(other, type(self)):\n            other = other._data\n        return self._data.equals(other)\n    except (TypeError, ValueError):\n        pass\n    return False",
                            "@property\ndef _formatter_func(self):\n    return self.categories._formatter_func",
                            "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value)\n    \"\"\"\n    max_categories = 10 if get_option('display.max_categories') == 0 else get_option('display.max_categories')\n    attrs = [('categories', ibase.default_pprint(self.categories, max_seq_items=max_categories)), ('ordered', self.ordered)]\n    if self.name is not None:\n        attrs.append(('name', ibase.default_pprint(self.name)))\n    attrs.append(('dtype', f\"'{self.dtype.name}'\"))\n    max_seq_items = get_option('display.max_seq_items') or len(self)\n    if len(self) > max_seq_items:\n        attrs.append(('length', len(self)))\n    return attrs",
                            "@property\ndef inferred_type(self) -> str:\n    return 'categorical'",
                            "@property\ndef values(self):\n    \"\"\" return the underlying data, which is a Categorical \"\"\"\n    return self._data",
                            "@property\ndef _has_complex_internals(self) -> bool:\n    return True",
                            "@doc(Index.__contains__)\ndef __contains__(self, key: Any) -> bool:\n    if is_scalar(key) and isna(key):\n        return self.hasnans\n    hash(key)\n    return contains(self, key, container=self._engine)",
                            "@doc(Index.astype)\ndef astype(self, dtype, copy=True):\n    if is_interval_dtype(dtype):\n        from pandas import IntervalIndex\n        return IntervalIndex(np.array(self))\n    elif is_categorical_dtype(dtype):\n        dtype = self.dtype.update_dtype(dtype)\n        if dtype == self.dtype:\n            return self.copy() if copy else self\n    return Index.astype(self, dtype=dtype, copy=copy)",
                            "@cache_readonly\ndef _isnan(self):\n    \"\"\" return if each value is nan\"\"\"\n    return self._data.codes == -1",
                            "@doc(Index.fillna)\ndef fillna(self, value, downcast=None):\n    self._assert_can_do_op(value)\n    return CategoricalIndex(self._data.fillna(value), name=self.name)",
                            "@cache_readonly\ndef _engine(self):\n    codes = self.codes\n    return self._engine_type(lambda: codes, len(self))",
                            "@doc(Index.unique)\ndef unique(self, level=None):\n    if level is not None:\n        self._validate_index_level(level)\n    result = self._values.unique()\n    return type(self)._simple_new(result, name=self.name)",
                            "@doc(Index.duplicated)\ndef duplicated(self, keep='first'):\n    codes = self.codes.astype('i8')\n    return duplicated_int64(codes, keep)",
                            "def _to_safe_for_reshape(self):\n    \"\"\" convert to object if we are a categorical \"\"\"\n    return self.astype('object')",
                            "def _maybe_cast_indexer(self, key):\n    code = self.categories.get_loc(key)\n    code = self.codes.dtype.type(code)\n    return code",
                            "@doc(Index.where)\ndef where(self, cond, other=None):\n    if other is None:\n        other = self._na_value\n    values = np.where(cond, self._values, other)\n    cat = Categorical(values, dtype=self.dtype)\n    return type(self)._simple_new(cat, name=self.name)",
                            "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values as necessary)\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index\n    indexer : np.ndarray or None\n        Indices of output values in original index\n\n    \"\"\"\n    if method is not None:\n        raise NotImplementedError('argument method is not implemented for CategoricalIndex.reindex')\n    if level is not None:\n        raise NotImplementedError('argument level is not implemented for CategoricalIndex.reindex')\n    if limit is not None:\n        raise NotImplementedError('argument limit is not implemented for CategoricalIndex.reindex')\n    target = ibase.ensure_index(target)\n    missing: List[int]\n    if self.equals(target):\n        indexer = None\n        missing = []\n    else:\n        indexer, missing = self.get_indexer_non_unique(np.array(target))\n    if len(self.codes) and indexer is not None:\n        new_target = self.take(indexer)\n    else:\n        new_target = target\n    if len(missing):\n        cats = self.categories.get_indexer(target)\n        if (cats == -1).any():\n            result = Index(np.array(self), name=self.name)\n            new_target, indexer, _ = result._reindex_non_unique(np.array(target))\n        else:\n            codes = new_target.codes.copy()\n            codes[indexer == -1] = cats[missing]\n            new_target = self._create_from_codes(codes)\n    new_target = np.asarray(new_target)\n    if is_categorical_dtype(target):\n        new_target = target._shallow_copy(new_target, name=self.name)\n    else:\n        new_target = Index(new_target, name=self.name)\n    return (new_target, indexer)",
                            "def _reindex_non_unique(self, target):\n    \"\"\"\n    reindex from a non-unique; which CategoricalIndex's are almost\n    always\n    \"\"\"\n    new_target, indexer = self.reindex(target)\n    new_indexer = None\n    check = indexer == -1\n    if check.any():\n        new_indexer = np.arange(len(self.take(indexer)))\n        new_indexer[check] = -1\n    cats = self.categories.get_indexer(target)\n    if not (cats == -1).any():\n        new_target = self._shallow_copy(new_target)\n    return (new_target, indexer, new_indexer)",
                            "@Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    method = missing.clean_reindex_fill_method(method)\n    target = ibase.ensure_index(target)\n    if self.is_unique and self.equals(target):\n        return np.arange(len(self), dtype='intp')\n    if method == 'pad' or method == 'backfill':\n        raise NotImplementedError(\"method='pad' and method='backfill' not implemented yet for CategoricalIndex\")\n    elif method == 'nearest':\n        raise NotImplementedError(\"method='nearest' not implemented yet for CategoricalIndex\")\n    if isinstance(target, CategoricalIndex) and self._values.is_dtype_equal(target):\n        if self._values.equals(target._values):\n            codes = target.codes\n        else:\n            codes = recode_for_categories(target.codes, target.categories, self._values.categories)\n    elif isinstance(target, CategoricalIndex):\n        code_indexer = self.categories.get_indexer(target.categories)\n        codes = take_1d(code_indexer, target.codes, fill_value=-1)\n    else:\n        codes = self.categories.get_indexer(target)\n    indexer, _ = self._engine.get_indexer_non_unique(codes)\n    return ensure_platform_int(indexer)",
                            "@Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ibase.ensure_index(target)\n    if isinstance(target, CategoricalIndex):\n        if target.categories is self.categories:\n            target = target.codes\n            indexer, missing = self._engine.get_indexer_non_unique(target)\n            return (ensure_platform_int(indexer), missing)\n        target = target._values\n    codes = self.categories.get_indexer(target)\n    indexer, missing = self._engine.get_indexer_non_unique(codes)\n    return (ensure_platform_int(indexer), missing)",
                            "@doc(Index._convert_list_indexer)\ndef _convert_list_indexer(self, keyarr):\n    if self.categories._defer_to_indexing:\n        indexer = self.categories._convert_list_indexer(keyarr)\n        return Index(self.codes).get_indexer_for(indexer)\n    indexer = self.categories.get_indexer(np.asarray(keyarr))\n    if (indexer == -1).any():\n        raise KeyError('a list-indexer must only include values that are in the categories')\n    return self.get_indexer(keyarr)",
                            "@doc(Index._convert_arr_indexer)\ndef _convert_arr_indexer(self, keyarr):\n    keyarr = com.asarray_tuplesafe(keyarr)\n    if self.categories._defer_to_indexing:\n        return keyarr\n    return self._shallow_copy(keyarr)",
                            "@doc(Index._convert_index_indexer)\ndef _convert_index_indexer(self, keyarr):\n    return self._shallow_copy(keyarr)",
                            "def take_nd(self, *args, **kwargs):\n    \"\"\"Alias for `take`\"\"\"\n    warnings.warn('CategoricalIndex.take_nd is deprecated, use CategoricalIndex.take instead', FutureWarning, stacklevel=2)\n    return self.take(*args, **kwargs)",
                            "@doc(Index._maybe_cast_slice_bound)\ndef _maybe_cast_slice_bound(self, label, side, kind):\n    if kind == 'loc':\n        return label\n    return super()._maybe_cast_slice_bound(label, side, kind)",
                            "def map(self, mapper):\n    \"\"\"\n    Map values using input correspondence (a dict, Series, or function).\n\n    Maps the values (their categories, not the codes) of the index to new\n    categories. If the mapping correspondence is one-to-one the result is a\n    :class:`~pandas.CategoricalIndex` which has the same order property as\n    the original, otherwise an :class:`~pandas.Index` is returned.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.CategoricalIndex or pandas.Index\n        Mapped index.\n\n    See Also\n    --------\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> idx = pd.CategoricalIndex(['a', 'b', 'c'])\n    >>> idx\n    CategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\n                      ordered=False, dtype='category')\n    >>> idx.map(lambda x: x.upper())\n    CategoricalIndex(['A', 'B', 'C'], categories=['A', 'B', 'C'],\n                     ordered=False, dtype='category')\n    >>> idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    CategoricalIndex(['first', 'second', 'third'], categories=['first',\n                     'second', 'third'], ordered=False, dtype='category')\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> idx = pd.CategoricalIndex(['a', 'b', 'c'], ordered=True)\n    >>> idx\n    CategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\n                     ordered=True, dtype='category')\n    >>> idx.map({'a': 3, 'b': 2, 'c': 1})\n    CategoricalIndex([3, 2, 1], categories=[3, 2, 1], ordered=True,\n                     dtype='category')\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> idx.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> idx.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    mapped = self._values.map(mapper)\n    return Index(mapped, name=self.name)",
                            "def delete(self, loc):\n    \"\"\"\n    Make new Index with passed location(-s) deleted\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    return self._create_from_codes(np.delete(self.codes, loc))",
                            "def insert(self, loc: int, item):\n    \"\"\"\n    Make new Index inserting new item at location. Follows\n    Python list.append semantics for negative values\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n\n    Returns\n    -------\n    new_index : Index\n\n    Raises\n    ------\n    ValueError if the item is not in the categories\n\n    \"\"\"\n    code = self.categories.get_indexer([item])\n    if code == -1 and (not (is_scalar(item) and isna(item))):\n        raise TypeError('cannot insert an item into a CategoricalIndex that is not already an existing category')\n    codes = self.codes\n    codes = np.concatenate((codes[:loc], code, codes[loc:]))\n    return self._create_from_codes(codes)",
                            "def _concat(self, to_concat, name):\n    return CategoricalIndex._concat_same_dtype(self, to_concat, name)",
                            "def _concat_same_dtype(self, to_concat, name):\n    \"\"\"\n    Concatenate to_concat which has the same class\n    ValueError if other is not in the categories\n    \"\"\"\n    codes = np.concatenate([self._is_dtype_compat(c).codes for c in to_concat])\n    result = self._create_from_codes(codes, name=name)\n    result.name = name\n    return result",
                            "def _delegate_method(self, name: str, *args, **kwargs):\n    \"\"\" method delegation to the ._values \"\"\"\n    method = getattr(self._values, name)\n    if 'inplace' in kwargs:\n        raise ValueError('cannot use inplace with CategoricalIndex')\n    res = method(*args, **kwargs)\n    if is_scalar(res):\n        return res\n    return CategoricalIndex(res, name=self.name)",
                            "def _wrap_joined_index(self, joined: np.ndarray, other: 'CategoricalIndex') -> 'CategoricalIndex':\n    name = get_op_result_name(self, other)\n    return self._create_from_codes(joined, name=name)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ",
                            "codes",
                            "categories",
                            "_data",
                            "_attributes"
                        ],
                        "class_decorators": [
                            "inherit_names(['argsort', '_internal_get_values', 'tolist', 'codes', 'categories', 'ordered', '_reverse_indexer', 'searchsorted', 'is_dtype_equal', 'min', 'max'], Categorical)",
                            "accessor.delegate_names(delegate=Categorical, accessors=['rename_categories', 'reorder_categories', 'add_categories', 'remove_categories', 'remove_unused_categories', 'set_categories', 'as_ordered', 'as_unordered'], typ='method', overwrite=True)"
                        ],
                        "function_signatures": [
                            "_engine_type(self)",
                            "__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None)",
                            "_create_from_codes(self, codes, dtype=None, name=None)",
                            "_simple_new(cls, values: Categorical, name: Label=None)",
                            "_shallow_copy(self, values=None, name: Label=no_default)",
                            "_is_dtype_compat(self, other) -> bool",
                            "equals(self, other) -> bool",
                            "_formatter_func(self)",
                            "_format_attrs(self)",
                            "inferred_type(self) -> str",
                            "values(self)",
                            "_has_complex_internals(self) -> bool",
                            "__contains__(self, key: Any) -> bool",
                            "astype(self, dtype, copy=True)",
                            "_isnan(self)",
                            "fillna(self, value, downcast=None)",
                            "_engine(self)",
                            "unique(self, level=None)",
                            "duplicated(self, keep='first')",
                            "_to_safe_for_reshape(self)",
                            "_maybe_cast_indexer(self, key)",
                            "where(self, cond, other=None)",
                            "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                            "_reindex_non_unique(self, target)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                            "get_indexer_non_unique(self, target)",
                            "_convert_list_indexer(self, keyarr)",
                            "_convert_arr_indexer(self, keyarr)",
                            "_convert_index_indexer(self, keyarr)",
                            "take_nd(self, *args, **kwargs)",
                            "_maybe_cast_slice_bound(self, label, side, kind)",
                            "map(self, mapper)",
                            "delete(self, loc)",
                            "insert(self, loc: int, item)",
                            "_concat(self, to_concat, name)",
                            "_concat_same_dtype(self, to_concat, name)",
                            "_delegate_method(self, name: str, *args, **kwargs)",
                            "_wrap_joined_index(self, joined: np.ndarray, other: 'CategoricalIndex') -> 'CategoricalIndex'"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_scalar": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x11e496e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "DatetimeIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n               '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n               '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n               '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n               '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n               '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n               '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n               '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n               '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n               '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n               '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n               '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n               '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n               '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n               '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n               '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n               '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n               '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n               '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n               '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n               '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n               '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n               '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n               '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n               '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n              dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01 00:00:00, 2016-01-02 00:00:00, 2016-01-03 00:00:00, 2016-01-04 00:00:00, 2016-01-05 00:00:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x1143e6e00>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "TimedeltaIndex(['-99 days', '-98 days', '-97 days', '-96 days', '-95 days',\n                '-94 days', '-93 days', '-92 days', '-91 days', '-90 days',\n                '-89 days', '-88 days', '-87 days', '-86 days', '-85 days',\n                '-84 days', '-83 days', '-82 days', '-81 days', '-80 days',\n                '-79 days', '-78 days', '-77 days', '-76 days', '-75 days',\n                '-74 days', '-73 days', '-72 days', '-71 days', '-70 days',\n                '-69 days', '-68 days', '-67 days', '-66 days', '-65 days',\n                '-64 days', '-63 days', '-62 days', '-61 days', '-60 days',\n                '-59 days', '-58 days', '-57 days', '-56 days', '-55 days',\n                '-54 days', '-53 days', '-52 days', '-51 days', '-50 days',\n                '-49 days', '-48 days', '-47 days', '-46 days', '-45 days',\n                '-44 days', '-43 days', '-42 days', '-41 days', '-40 days',\n                '-39 days', '-38 days', '-37 days', '-36 days', '-35 days',\n                '-34 days', '-33 days', '-32 days', '-31 days', '-30 days',\n                '-29 days', '-28 days', '-27 days', '-26 days', '-25 days',\n                '-24 days', '-23 days', '-22 days', '-21 days', '-20 days',\n                '-19 days', '-18 days', '-17 days', '-16 days', '-15 days',\n                '-14 days', '-13 days', '-12 days', '-11 days', '-10 days',\n                 '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                 '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n               dtype='timedelta64[ns]', freq=None)",
                                    "variable_type": "TimedeltaIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       NaT, '-99 days', '-98 days', '-97 days', '-96 days',\n                  '-95 days', '-94 days', '-93 days', '-92 days', '-91 days',\n                  ...\n                   '-9 days',  '-8 days',  '-7 days',  '-6 days',  '-5 days',\n                   '-4 days',  '-3 days',  '-2 days',  '-1 days',   '0 days'],\n                 categories=[-99 days +00:00:00, -98 days +00:00:00, -97 days +00:00:00, -96 days +00:00:00, -95 days +00:00:00, -94 days +00:00:00, -93 days +00:00:00, -92 days +00:00:00, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429090>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "nan",
                                    "variable_type": "float",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "NaT",
                                    "variable_type": "NaTType",
                                    "variable_shape": null
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.datetime64('NaT')",
                                    "variable_type": "datetime64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "Any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_valid_nat_for_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "numpy.timedelta64('NaT')",
                                    "variable_type": "timedelta64",
                                    "variable_shape": "()"
                                },
                                "self.categories.dtype": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.categories": {
                                    "variable_value": "PeriodIndex(['2016-01-01', '2016-01-02', '2016-01-03', '2016-01-04',\n             '2016-01-05', '2016-01-06', '2016-01-07', '2016-01-08',\n             '2016-01-09', '2016-01-10', '2016-01-11', '2016-01-12',\n             '2016-01-13', '2016-01-14', '2016-01-15', '2016-01-16',\n             '2016-01-17', '2016-01-18', '2016-01-19', '2016-01-20',\n             '2016-01-21', '2016-01-22', '2016-01-23', '2016-01-24',\n             '2016-01-25', '2016-01-26', '2016-01-27', '2016-01-28',\n             '2016-01-29', '2016-01-30', '2016-01-31', '2016-02-01',\n             '2016-02-02', '2016-02-03', '2016-02-04', '2016-02-05',\n             '2016-02-06', '2016-02-07', '2016-02-08', '2016-02-09',\n             '2016-02-10', '2016-02-11', '2016-02-12', '2016-02-13',\n             '2016-02-14', '2016-02-15', '2016-02-16', '2016-02-17',\n             '2016-02-18', '2016-02-19', '2016-02-20', '2016-02-21',\n             '2016-02-22', '2016-02-23', '2016-02-24', '2016-02-25',\n             '2016-02-26', '2016-02-27', '2016-02-28', '2016-02-29',\n             '2016-03-01', '2016-03-02', '2016-03-03', '2016-03-04',\n             '2016-03-05', '2016-03-06', '2016-03-07', '2016-03-08',\n             '2016-03-09', '2016-03-10', '2016-03-11', '2016-03-12',\n             '2016-03-13', '2016-03-14', '2016-03-15', '2016-03-16',\n             '2016-03-17', '2016-03-18', '2016-03-19', '2016-03-20',\n             '2016-03-21', '2016-03-22', '2016-03-23', '2016-03-24',\n             '2016-03-25', '2016-03-26', '2016-03-27', '2016-03-28',\n             '2016-03-29', '2016-03-30', '2016-03-31', '2016-04-01',\n             '2016-04-02', '2016-04-03', '2016-04-04', '2016-04-05',\n             '2016-04-06', '2016-04-07', '2016-04-08', '2016-04-09'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "100"
                                },
                                "self": {
                                    "variable_value": "CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\n                  '2016-01-04', '2016-01-05', '2016-01-06', '2016-01-07',\n                  '2016-01-08', '2016-01-09',\n                  ...\n                  '2016-03-31', '2016-04-01', '2016-04-02', '2016-04-03',\n                  '2016-04-04', '2016-04-05', '2016-04-06', '2016-04-07',\n                  '2016-04-08', '2016-04-09'],\n                 categories=[2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, 2016-01-05, 2016-01-06, 2016-01-07, 2016-01-08, ...], ordered=False, dtype='category', length=101)",
                                    "variable_type": "CategoricalIndex",
                                    "variable_shape": "101"
                                },
                                "self.hasnans": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "contains": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._engine": {
                                    "variable_value": "<pandas._libs.index.Int8Engine object at 0x114429450>",
                                    "variable_type": "Int8Engine",
                                    "variable_shape": null
                                },
                                "doc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index.__contains__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "from pandas.core.dtypes.missing import isna",
                    "start_line": 22,
                    "end_line": 23
                }
            ],
            "inscope_functions": [
                "@property\ndef _engine_type(self):\n    # self.codes can have dtype int8, int16, int32 or int64, so we need\n    # to return the corresponding engine type (libindex.Int8Engine, etc.).\n    return {\n        np.int8: libindex.Int8Engine,\n        np.int16: libindex.Int16Engine,\n        np.int32: libindex.Int32Engine,\n        np.int64: libindex.Int64Engine,\n    }[self.codes.dtype.type]",
                "def __new__(\n    cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None\n):\n\n    dtype = CategoricalDtype._from_values_or_dtype(data, categories, ordered, dtype)\n\n    name = maybe_extract_name(name, data, cls)\n\n    if not is_categorical_dtype(data):\n        # don't allow scalars\n        # if data is None, then categories must be provided\n        if is_scalar(data):\n            if data is not None or categories is None:\n                raise cls._scalar_data_error(data)\n            data = []\n\n    assert isinstance(dtype, CategoricalDtype), dtype\n    data = extract_array(data, extract_numpy=True)\n\n    if not isinstance(data, Categorical):\n        data = Categorical(data, dtype=dtype)\n    elif isinstance(dtype, CategoricalDtype) and dtype != data.dtype:\n        # we want to silently ignore dtype='category'\n        data = data._set_dtype(dtype)\n\n    data = data.copy() if copy else data\n\n    return cls._simple_new(data, name=name)",
                "def _create_from_codes(self, codes, dtype=None, name=None):\n    \"\"\"\n    *this is an internal non-public method*\n\n    create the correct categorical from codes\n\n    Parameters\n    ----------\n    codes : new codes\n    dtype: CategoricalDtype, defaults to existing\n    name : optional name attribute, defaults to existing\n\n    Returns\n    -------\n    CategoricalIndex\n    \"\"\"\n    if dtype is None:\n        dtype = self.dtype\n    if name is None:\n        name = self.name\n    cat = Categorical.from_codes(codes, dtype=dtype)\n    return CategoricalIndex(cat, name=name)",
                "@classmethod\ndef _simple_new(cls, values: Categorical, name: Label = None):\n    assert isinstance(values, Categorical), type(values)\n    result = object.__new__(cls)\n\n    result._data = values\n    result.name = name\n    result._cache = {}\n\n    result._reset_identity()\n    result._no_setting_name = False\n    return result",
                "@doc(Index._shallow_copy)\ndef _shallow_copy(self, values=None, name: Label = no_default):\n    name = self.name if name is no_default else name\n\n    if values is not None:\n        values = Categorical(values, dtype=self.dtype)\n\n    return super()._shallow_copy(values=values, name=name)",
                "def _is_dtype_compat(self, other) -> bool:\n    \"\"\"\n    *this is an internal non-public method*\n\n    provide a comparison between the dtype of self and other (coercing if\n    needed)\n\n    Raises\n    ------\n    TypeError if the dtypes are not compatible\n    \"\"\"\n    if is_categorical_dtype(other):\n        if isinstance(other, CategoricalIndex):\n            other = other._values\n        if not other.is_dtype_equal(self):\n            raise TypeError(\n                \"categories must match existing categories when appending\"\n            )\n    else:\n        values = other\n        if not is_list_like(values):\n            values = [values]\n        cat = Categorical(other, dtype=self.dtype)\n        other = CategoricalIndex(cat)\n        if not other.isin(values).all():\n            raise TypeError(\n                \"cannot append a non-category item to a CategoricalIndex\"\n            )\n\n    return other",
                "def equals(self, other) -> bool:\n    \"\"\"\n    Determine if two CategoricalIndex objects contain the same elements.\n\n    Returns\n    -------\n    bool\n        If two CategoricalIndex objects have equal elements True,\n        otherwise False.\n    \"\"\"\n    if self.is_(other):\n        return True\n\n    if not isinstance(other, Index):\n        return False\n\n    try:\n        other = self._is_dtype_compat(other)\n        if isinstance(other, type(self)):\n            other = other._data\n        return self._data.equals(other)\n    except (TypeError, ValueError):\n        pass\n\n    return False",
                "@property\ndef _formatter_func(self):\n    return self.categories._formatter_func",
                "def _format_attrs(self):\n    \"\"\"\n    Return a list of tuples of the (attr,formatted_value)\n    \"\"\"\n    max_categories = (\n        10\n        if get_option(\"display.max_categories\") == 0\n        else get_option(\"display.max_categories\")\n    )\n    attrs = [\n        (\n            \"categories\",\n            ibase.default_pprint(self.categories, max_seq_items=max_categories),\n        ),\n        (\"ordered\", self.ordered),\n    ]\n    if self.name is not None:\n        attrs.append((\"name\", ibase.default_pprint(self.name)))\n    attrs.append((\"dtype\", f\"'{self.dtype.name}'\"))\n    max_seq_items = get_option(\"display.max_seq_items\") or len(self)\n    if len(self) > max_seq_items:\n        attrs.append((\"length\", len(self)))\n    return attrs",
                "@property\ndef inferred_type(self) -> str:\n    return \"categorical\"",
                "@property\ndef values(self):\n    \"\"\" return the underlying data, which is a Categorical \"\"\"\n    return self._data",
                "@property\ndef _has_complex_internals(self) -> bool:\n    # used to avoid libreduction code paths, which raise or require conversion\n    return True",
                "@doc(Index.__contains__)\ndef __contains__(self, key: Any) -> bool:\n    # if key is a NaN, check if any NaN is in self.\n    if is_scalar(key) and isna(key):\n        return self.hasnans\n\n    hash(key)\n    return contains(self, key, container=self._engine)",
                "@doc(Index.astype)\ndef astype(self, dtype, copy=True):\n    if is_interval_dtype(dtype):\n        from pandas import IntervalIndex\n\n        return IntervalIndex(np.array(self))\n    elif is_categorical_dtype(dtype):\n        # GH 18630\n        dtype = self.dtype.update_dtype(dtype)\n        if dtype == self.dtype:\n            return self.copy() if copy else self\n\n    return Index.astype(self, dtype=dtype, copy=copy)",
                "@cache_readonly\ndef _isnan(self):\n    \"\"\" return if each value is nan\"\"\"\n    return self._data.codes == -1",
                "@doc(Index.fillna)\ndef fillna(self, value, downcast=None):\n    self._assert_can_do_op(value)\n    return CategoricalIndex(self._data.fillna(value), name=self.name)",
                "@cache_readonly\ndef _engine(self):\n    # we are going to look things up with the codes themselves.\n    # To avoid a reference cycle, bind `codes` to a local variable, so\n    # `self` is not passed into the lambda.\n    codes = self.codes\n    return self._engine_type(lambda: codes, len(self))",
                "@doc(Index.unique)\ndef unique(self, level=None):\n    if level is not None:\n        self._validate_index_level(level)\n    result = self._values.unique()\n    # Use _simple_new instead of _shallow_copy to ensure we keep dtype\n    #  of result, not self.\n    return type(self)._simple_new(result, name=self.name)",
                "@doc(Index.duplicated)\ndef duplicated(self, keep=\"first\"):\n    codes = self.codes.astype(\"i8\")\n    return duplicated_int64(codes, keep)",
                "def _to_safe_for_reshape(self):\n    \"\"\" convert to object if we are a categorical \"\"\"\n    return self.astype(\"object\")",
                "def _maybe_cast_indexer(self, key):\n    code = self.categories.get_loc(key)\n    code = self.codes.dtype.type(code)\n    return code",
                "@doc(Index.where)\ndef where(self, cond, other=None):\n    # TODO: Investigate an alternative implementation with\n    # 1. copy the underlying Categorical\n    # 2. setitem with `cond` and `other`\n    # 3. Rebuild CategoricalIndex.\n    if other is None:\n        other = self._na_value\n    values = np.where(cond, self._values, other)\n    cat = Categorical(values, dtype=self.dtype)\n    return type(self)._simple_new(cat, name=self.name)",
                "def reindex(self, target, method=None, level=None, limit=None, tolerance=None):\n    \"\"\"\n    Create index with target's values (move/add/delete values as necessary)\n\n    Returns\n    -------\n    new_index : pd.Index\n        Resulting index\n    indexer : np.ndarray or None\n        Indices of output values in original index\n\n    \"\"\"\n    if method is not None:\n        raise NotImplementedError(\n            \"argument method is not implemented for CategoricalIndex.reindex\"\n        )\n    if level is not None:\n        raise NotImplementedError(\n            \"argument level is not implemented for CategoricalIndex.reindex\"\n        )\n    if limit is not None:\n        raise NotImplementedError(\n            \"argument limit is not implemented for CategoricalIndex.reindex\"\n        )\n\n    target = ibase.ensure_index(target)\n\n    missing: List[int]\n    if self.equals(target):\n        indexer = None\n        missing = []\n    else:\n        indexer, missing = self.get_indexer_non_unique(np.array(target))\n\n    if len(self.codes) and indexer is not None:\n        new_target = self.take(indexer)\n    else:\n        new_target = target\n\n    # filling in missing if needed\n    if len(missing):\n        cats = self.categories.get_indexer(target)\n\n        if (cats == -1).any():\n            # coerce to a regular index here!\n            result = Index(np.array(self), name=self.name)\n            new_target, indexer, _ = result._reindex_non_unique(np.array(target))\n        else:\n\n            codes = new_target.codes.copy()\n            codes[indexer == -1] = cats[missing]\n            new_target = self._create_from_codes(codes)\n\n    # we always want to return an Index type here\n    # to be consistent with .reindex for other index types (e.g. they don't\n    # coerce based on the actual values, only on the dtype)\n    # unless we had an initial Categorical to begin with\n    # in which case we are going to conform to the passed Categorical\n    new_target = np.asarray(new_target)\n    if is_categorical_dtype(target):\n        new_target = target._shallow_copy(new_target, name=self.name)\n    else:\n        new_target = Index(new_target, name=self.name)\n\n    return new_target, indexer",
                "def _reindex_non_unique(self, target):\n    \"\"\"\n    reindex from a non-unique; which CategoricalIndex's are almost\n    always\n    \"\"\"\n    new_target, indexer = self.reindex(target)\n    new_indexer = None\n\n    check = indexer == -1\n    if check.any():\n        new_indexer = np.arange(len(self.take(indexer)))\n        new_indexer[check] = -1\n\n    cats = self.categories.get_indexer(target)\n    if not (cats == -1).any():\n        # .reindex returns normal Index. Revert to CategoricalIndex if\n        # all targets are included in my categories\n        new_target = self._shallow_copy(new_target)\n\n    return new_target, indexer, new_indexer",
                "@Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    method = missing.clean_reindex_fill_method(method)\n    target = ibase.ensure_index(target)\n\n    if self.is_unique and self.equals(target):\n        return np.arange(len(self), dtype=\"intp\")\n\n    if method == \"pad\" or method == \"backfill\":\n        raise NotImplementedError(\n            \"method='pad' and method='backfill' not \"\n            \"implemented yet for CategoricalIndex\"\n        )\n    elif method == \"nearest\":\n        raise NotImplementedError(\n            \"method='nearest' not implemented yet for CategoricalIndex\"\n        )\n\n    if isinstance(target, CategoricalIndex) and self._values.is_dtype_equal(target):\n        if self._values.equals(target._values):\n            # we have the same codes\n            codes = target.codes\n        else:\n            codes = recode_for_categories(\n                target.codes, target.categories, self._values.categories\n            )\n    else:\n        if isinstance(target, CategoricalIndex):\n            code_indexer = self.categories.get_indexer(target.categories)\n            codes = take_1d(code_indexer, target.codes, fill_value=-1)\n        else:\n            codes = self.categories.get_indexer(target)\n\n    indexer, _ = self._engine.get_indexer_non_unique(codes)\n    return ensure_platform_int(indexer)",
                "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ibase.ensure_index(target)\n\n    if isinstance(target, CategoricalIndex):\n        # Indexing on codes is more efficient if categories are the same:\n        if target.categories is self.categories:\n            target = target.codes\n            indexer, missing = self._engine.get_indexer_non_unique(target)\n            return ensure_platform_int(indexer), missing\n        target = target._values\n\n    codes = self.categories.get_indexer(target)\n    indexer, missing = self._engine.get_indexer_non_unique(codes)\n    return ensure_platform_int(indexer), missing",
                "@doc(Index._convert_list_indexer)\ndef _convert_list_indexer(self, keyarr):\n    # Return our indexer or raise if all of the values are not included in\n    # the categories\n\n    if self.categories._defer_to_indexing:\n        indexer = self.categories._convert_list_indexer(keyarr)\n        return Index(self.codes).get_indexer_for(indexer)\n\n    indexer = self.categories.get_indexer(np.asarray(keyarr))\n    if (indexer == -1).any():\n        raise KeyError(\n            \"a list-indexer must only include values that are in the categories\"\n        )\n\n    return self.get_indexer(keyarr)",
                "@doc(Index._convert_arr_indexer)\ndef _convert_arr_indexer(self, keyarr):\n    keyarr = com.asarray_tuplesafe(keyarr)\n\n    if self.categories._defer_to_indexing:\n        return keyarr\n\n    return self._shallow_copy(keyarr)",
                "@doc(Index._convert_index_indexer)\ndef _convert_index_indexer(self, keyarr):\n    return self._shallow_copy(keyarr)",
                "def take_nd(self, *args, **kwargs):\n    \"\"\"Alias for `take`\"\"\"\n    warnings.warn(\n        \"CategoricalIndex.take_nd is deprecated, use CategoricalIndex.take instead\",\n        FutureWarning,\n        stacklevel=2,\n    )\n    return self.take(*args, **kwargs)",
                "@doc(Index._maybe_cast_slice_bound)\ndef _maybe_cast_slice_bound(self, label, side, kind):\n    if kind == \"loc\":\n        return label\n\n    return super()._maybe_cast_slice_bound(label, side, kind)",
                "def map(self, mapper):\n    \"\"\"\n    Map values using input correspondence (a dict, Series, or function).\n\n    Maps the values (their categories, not the codes) of the index to new\n    categories. If the mapping correspondence is one-to-one the result is a\n    :class:`~pandas.CategoricalIndex` which has the same order property as\n    the original, otherwise an :class:`~pandas.Index` is returned.\n\n    If a `dict` or :class:`~pandas.Series` is used any unmapped category is\n    mapped to `NaN`. Note that if this happens an :class:`~pandas.Index`\n    will be returned.\n\n    Parameters\n    ----------\n    mapper : function, dict, or Series\n        Mapping correspondence.\n\n    Returns\n    -------\n    pandas.CategoricalIndex or pandas.Index\n        Mapped index.\n\n    See Also\n    --------\n    Index.map : Apply a mapping correspondence on an\n        :class:`~pandas.Index`.\n    Series.map : Apply a mapping correspondence on a\n        :class:`~pandas.Series`.\n    Series.apply : Apply more complex functions on a\n        :class:`~pandas.Series`.\n\n    Examples\n    --------\n    >>> idx = pd.CategoricalIndex(['a', 'b', 'c'])\n    >>> idx\n    CategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\n                      ordered=False, dtype='category')\n    >>> idx.map(lambda x: x.upper())\n    CategoricalIndex(['A', 'B', 'C'], categories=['A', 'B', 'C'],\n                     ordered=False, dtype='category')\n    >>> idx.map({'a': 'first', 'b': 'second', 'c': 'third'})\n    CategoricalIndex(['first', 'second', 'third'], categories=['first',\n                     'second', 'third'], ordered=False, dtype='category')\n\n    If the mapping is one-to-one the ordering of the categories is\n    preserved:\n\n    >>> idx = pd.CategoricalIndex(['a', 'b', 'c'], ordered=True)\n    >>> idx\n    CategoricalIndex(['a', 'b', 'c'], categories=['a', 'b', 'c'],\n                     ordered=True, dtype='category')\n    >>> idx.map({'a': 3, 'b': 2, 'c': 1})\n    CategoricalIndex([3, 2, 1], categories=[3, 2, 1], ordered=True,\n                     dtype='category')\n\n    If the mapping is not one-to-one an :class:`~pandas.Index` is returned:\n\n    >>> idx.map({'a': 'first', 'b': 'second', 'c': 'first'})\n    Index(['first', 'second', 'first'], dtype='object')\n\n    If a `dict` is used, all unmapped categories are mapped to `NaN` and\n    the result is an :class:`~pandas.Index`:\n\n    >>> idx.map({'a': 'first', 'b': 'second'})\n    Index(['first', 'second', nan], dtype='object')\n    \"\"\"\n    mapped = self._values.map(mapper)\n    return Index(mapped, name=self.name)",
                "def delete(self, loc):\n    \"\"\"\n    Make new Index with passed location(-s) deleted\n\n    Returns\n    -------\n    new_index : Index\n    \"\"\"\n    return self._create_from_codes(np.delete(self.codes, loc))",
                "def insert(self, loc: int, item):\n    \"\"\"\n    Make new Index inserting new item at location. Follows\n    Python list.append semantics for negative values\n\n    Parameters\n    ----------\n    loc : int\n    item : object\n\n    Returns\n    -------\n    new_index : Index\n\n    Raises\n    ------\n    ValueError if the item is not in the categories\n\n    \"\"\"\n    code = self.categories.get_indexer([item])\n    if (code == -1) and not (is_scalar(item) and isna(item)):\n        raise TypeError(\n            \"cannot insert an item into a CategoricalIndex \"\n            \"that is not already an existing category\"\n        )\n\n    codes = self.codes\n    codes = np.concatenate((codes[:loc], code, codes[loc:]))\n    return self._create_from_codes(codes)",
                "def _concat(self, to_concat, name):\n    # if calling index is category, don't check dtype of others\n    return CategoricalIndex._concat_same_dtype(self, to_concat, name)",
                "def _concat_same_dtype(self, to_concat, name):\n    \"\"\"\n    Concatenate to_concat which has the same class\n    ValueError if other is not in the categories\n    \"\"\"\n    codes = np.concatenate([self._is_dtype_compat(c).codes for c in to_concat])\n    result = self._create_from_codes(codes, name=name)\n    # if name is None, _create_from_codes sets self.name\n    result.name = name\n    return result",
                "def _delegate_method(self, name: str, *args, **kwargs):\n    \"\"\" method delegation to the ._values \"\"\"\n    method = getattr(self._values, name)\n    if \"inplace\" in kwargs:\n        raise ValueError(\"cannot use inplace with CategoricalIndex\")\n    res = method(*args, **kwargs)\n    if is_scalar(res):\n        return res\n    return CategoricalIndex(res, name=self.name)",
                "def _wrap_joined_index(\n    self, joined: np.ndarray, other: \"CategoricalIndex\"\n) -> \"CategoricalIndex\":\n    name = get_op_result_name(self, other)\n    return self._create_from_codes(joined, name=name)"
            ],
            "inscope_function_signatures": [
                "_engine_type(self)",
                "__new__(cls, data=None, categories=None, ordered=None, dtype=None, copy=False, name=None)",
                "_create_from_codes(self, codes, dtype=None, name=None)",
                "_simple_new(cls, values: Categorical, name: Label=None)",
                "_shallow_copy(self, values=None, name: Label=no_default)",
                "_is_dtype_compat(self, other) -> bool",
                "equals(self, other) -> bool",
                "_formatter_func(self)",
                "_format_attrs(self)",
                "inferred_type(self) -> str",
                "values(self)",
                "_has_complex_internals(self) -> bool",
                "__contains__(self, key: Any) -> bool",
                "astype(self, dtype, copy=True)",
                "_isnan(self)",
                "fillna(self, value, downcast=None)",
                "_engine(self)",
                "unique(self, level=None)",
                "duplicated(self, keep='first')",
                "_to_safe_for_reshape(self)",
                "_maybe_cast_indexer(self, key)",
                "where(self, cond, other=None)",
                "reindex(self, target, method=None, level=None, limit=None, tolerance=None)",
                "_reindex_non_unique(self, target)",
                "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                "get_indexer_non_unique(self, target)",
                "_convert_list_indexer(self, keyarr)",
                "_convert_arr_indexer(self, keyarr)",
                "_convert_index_indexer(self, keyarr)",
                "take_nd(self, *args, **kwargs)",
                "_maybe_cast_slice_bound(self, label, side, kind)",
                "map(self, mapper)",
                "delete(self, loc)",
                "insert(self, loc: int, item)",
                "_concat(self, to_concat, name)",
                "_concat_same_dtype(self, to_concat, name)",
                "_delegate_method(self, name: str, *args, **kwargs)",
                "_wrap_joined_index(self, joined: np.ndarray, other: 'CategoricalIndex') -> 'CategoricalIndex'"
            ],
            "variables_in_file": {
                "_index_doc_kwargs": [
                    528,
                    35,
                    36,
                    564
                ],
                "dict": [
                    35,
                    36
                ],
                "ibase._index_doc_kwargs": [
                    35
                ],
                "ibase": [
                    35,
                    337,
                    466,
                    531,
                    342,
                    566
                ],
                "_index_doc_kwargs.update": [
                    36
                ],
                "ExtensionIndex": [
                    70
                ],
                "accessor.PandasDelegate": [
                    70
                ],
                "accessor": [
                    70,
                    55
                ],
                "_typ": [
                    163
                ],
                "codes": [
                    403,
                    404,
                    417,
                    418,
                    165,
                    549,
                    551,
                    557,
                    559,
                    561,
                    576,
                    577,
                    732,
                    733,
                    734,
                    745,
                    234,
                    490,
                    491,
                    492,
                    746
                ],
                "np.ndarray": [
                    762,
                    165
                ],
                "np": [
                    704,
                    165,
                    486,
                    487,
                    517,
                    745,
                    589,
                    174,
                    175,
                    176,
                    177,
                    499,
                    437,
                    534,
                    473,
                    762,
                    379,
                    733
                ],
                "categories": [
                    197,
                    189,
                    166
                ],
                "Index": [
                    386,
                    503,
                    580,
                    166,
                    486,
                    393,
                    587,
                    619,
                    365,
                    429,
                    305,
                    597,
                    374,
                    406,
                    694,
                    252,
                    606,
                    415
                ],
                "_data": [
                    167
                ],
                "Categorical": [
                    257,
                    167,
                    234,
                    204,
                    205,
                    238,
                    239,
                    53,
                    438,
                    56,
                    283
                ],
                "np.int8": [
                    174
                ],
                "np.int16": [
                    175
                ],
                "np.int32": [
                    176
                ],
                "np.int64": [
                    177
                ],
                "libindex.Int8Engine": [
                    174
                ],
                "libindex": [
                    176,
                    177,
                    174,
                    175
                ],
                "libindex.Int16Engine": [
                    175
                ],
                "libindex.Int32Engine": [
                    176
                ],
                "libindex.Int64Engine": [
                    177
                ],
                "self.codes.dtype.type": [
                    426,
                    178
                ],
                "self.codes.dtype": [
                    426,
                    178
                ],
                "self.codes": [
                    704,
                    417,
                    426,
                    587,
                    178,
                    403,
                    475,
                    732
                ],
                "self": [
                    512,
                    517,
                    520,
                    524,
                    533,
                    534,
                    546,
                    547,
                    552,
                    556,
                    559,
                    561,
                    570,
                    572,
                    576,
                    577,
                    585,
                    586,
                    587,
                    589,
                    595,
                    601,
                    604,
                    608,
                    617,
                    178,
                    693,
                    694,
                    704,
                    725,
                    732,
                    734,
                    738,
                    231,
                    233,
                    745,
                    746,
                    753,
                    759,
                    764,
                    765,
                    254,
                    257,
                    275,
                    283,
                    302,
                    309,
                    310,
                    312,
                    323,
                    337,
                    339,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    358,
                    369,
                    372,
                    379,
                    382,
                    383,
                    384,
                    386,
                    391,
                    395,
                    396,
                    403,
                    404,
                    409,
                    410,
                    413,
                    417,
                    422,
                    425,
                    426,
                    436,
                    437,
                    438,
                    439,
                    469,
                    473,
                    475,
                    476,
                    482,
                    486,
                    492,
                    501,
                    503
                ],
                "property": [
                    321,
                    355,
                    360,
                    169,
                    351
                ],
                "_attributes": [
                    180
                ],
                "dtype": [
                    386,
                    230,
                    231,
                    201,
                    234,
                    205,
                    206,
                    208,
                    376,
                    380,
                    189,
                    382,
                    383
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    189
                ],
                "CategoricalDtype": [
                    201,
                    189,
                    206
                ],
                "data": [
                    193,
                    196,
                    197,
                    198,
                    199,
                    202,
                    204,
                    205,
                    206,
                    208,
                    210,
                    212,
                    189,
                    191
                ],
                "ordered": [
                    189
                ],
                "name": [
                    738,
                    259,
                    232,
                    233,
                    746,
                    235,
                    748,
                    753,
                    243,
                    212,
                    764,
                    765,
                    254,
                    191
                ],
                "maybe_extract_name": [
                    191
                ],
                "cls": [
                    240,
                    212,
                    198,
                    191
                ],
                "is_categorical_dtype": [
                    272,
                    193,
                    380,
                    500
                ],
                "is_scalar": [
                    368,
                    196,
                    757,
                    726
                ],
                "cls._scalar_data_error": [
                    198
                ],
                "isinstance": [
                    546,
                    201,
                    555,
                    204,
                    206,
                    239,
                    273,
                    305,
                    310,
                    568
                ],
                "extract_array": [
                    202
                ],
                "data.dtype": [
                    206
                ],
                "data._set_dtype": [
                    208
                ],
                "copy": [
                    384,
                    210,
                    386
                ],
                "data.copy": [
                    210
                ],
                "cls._simple_new": [
                    212
                ],
                "self.dtype": [
                    257,
                    231,
                    438,
                    343,
                    283,
                    382,
                    383
                ],
                "self.name": [
                    503,
                    486,
                    233,
                    759,
                    396,
                    341,
                    342,
                    439,
                    501,
                    694,
                    413,
                    254
                ],
                "cat": [
                    234,
                    235,
                    438,
                    439,
                    283,
                    284
                ],
                "Categorical.from_codes": [
                    234
                ],
                "CategoricalIndex": [
                    768,
                    769,
                    546,
                    738,
                    770,
                    235,
                    396,
                    555,
                    273,
                    759,
                    568,
                    284
                ],
                "Label": [
                    253,
                    238
                ],
                "values": [
                    256,
                    257,
                    259,
                    239,
                    242,
                    437,
                    438,
                    280,
                    281,
                    282,
                    285
                ],
                "type": [
                    439,
                    413,
                    310,
                    239
                ],
                "result": [
                    486,
                    487,
                    746,
                    748,
                    749,
                    240,
                    242,
                    243,
                    244,
                    246,
                    247,
                    248,
                    410,
                    413
                ],
                "object.__new__": [
                    240
                ],
                "object": [
                    240
                ],
                "result._data": [
                    242
                ],
                "result.name": [
                    243,
                    748
                ],
                "result._cache": [
                    244
                ],
                "result._reset_identity": [
                    246
                ],
                "result._no_setting_name": [
                    247
                ],
                "classmethod": [
                    237
                ],
                "no_default": [
                    253,
                    254
                ],
                "_shallow_copy": [
                    259
                ],
                "super": [
                    624,
                    259
                ],
                "doc": [
                    580,
                    393,
                    619,
                    365,
                    429,
                    597,
                    406,
                    374,
                    252,
                    606,
                    415
                ],
                "Index._shallow_copy": [
                    252
                ],
                "other": [
                    272,
                    273,
                    274,
                    275,
                    280,
                    283,
                    284,
                    285,
                    290,
                    302,
                    305,
                    435,
                    436,
                    309,
                    310,
                    311,
                    312,
                    437,
                    764
                ],
                "other._values": [
                    274
                ],
                "other.is_dtype_equal": [
                    275
                ],
                "TypeError": [
                    313,
                    276,
                    286,
                    727
                ],
                "is_list_like": [
                    281
                ],
                "all": [
                    285
                ],
                "other.isin": [
                    285
                ],
                "bool": [
                    361,
                    292,
                    261,
                    366
                ],
                "self.is_": [
                    302
                ],
                "self._is_dtype_compat": [
                    745,
                    309
                ],
                "other._data": [
                    311
                ],
                "self._data.equals": [
                    312
                ],
                "self._data": [
                    312,
                    396,
                    358,
                    391
                ],
                "ValueError": [
                    313,
                    755
                ],
                "self.categories._formatter_func": [
                    323
                ],
                "self.categories": [
                    576,
                    482,
                    323,
                    520,
                    425,
                    585,
                    586,
                    556,
                    589,
                    559,
                    337,
                    725,
                    601,
                    570
                ],
                "max_categories": [
                    337,
                    329
                ],
                "get_option": [
                    344,
                    331,
                    332
                ],
                "attrs": [
                    334,
                    342,
                    343,
                    346,
                    347
                ],
                "ibase.default_pprint": [
                    337,
                    342
                ],
                "self.ordered": [
                    339
                ],
                "attrs.append": [
                    346,
                    342,
                    343
                ],
                "self.dtype.name": [
                    343
                ],
                "max_seq_items": [
                    344,
                    345
                ],
                "len": [
                    481,
                    517,
                    404,
                    534,
                    344,
                    345,
                    346,
                    475
                ],
                "str": [
                    352,
                    751
                ],
                "Any": [
                    366
                ],
                "key": [
                    368,
                    425,
                    371,
                    372
                ],
                "isna": [
                    368,
                    726
                ],
                "self.hasnans": [
                    369
                ],
                "hash": [
                    371
                ],
                "contains": [
                    372
                ],
                "self._engine": [
                    577,
                    561,
                    372,
                    572
                ],
                "Index.__contains__": [
                    365
                ],
                "is_interval_dtype": [
                    376
                ],
                "IntervalIndex": [
                    379
                ],
                "np.array": [
                    473,
                    379,
                    486,
                    487
                ],
                "self.dtype.update_dtype": [
                    382
                ],
                "self.copy": [
                    384
                ],
                "Index.astype": [
                    386,
                    374
                ],
                "self._data.codes": [
                    391
                ],
                "cache_readonly": [
                    388,
                    398
                ],
                "self._assert_can_do_op": [
                    395
                ],
                "value": [
                    395,
                    396
                ],
                "self._data.fillna": [
                    396
                ],
                "Index.fillna": [
                    393
                ],
                "self._engine_type": [
                    404
                ],
                "level": [
                    408,
                    409,
                    457
                ],
                "self._validate_index_level": [
                    409
                ],
                "self._values.unique": [
                    410
                ],
                "self._values": [
                    546,
                    547,
                    552,
                    753,
                    437,
                    693,
                    410
                ],
                "_simple_new": [
                    413,
                    439
                ],
                "Index.unique": [
                    406
                ],
                "self.codes.astype": [
                    417
                ],
                "duplicated_int64": [
                    418
                ],
                "keep": [
                    418
                ],
                "Index.duplicated": [
                    415
                ],
                "self.astype": [
                    422
                ],
                "code": [
                    425,
                    426,
                    427,
                    725,
                    726,
                    733
                ],
                "self.categories.get_loc": [
                    425
                ],
                "self._na_value": [
                    436
                ],
                "np.where": [
                    437
                ],
                "cond": [
                    437
                ],
                "Index.where": [
                    429
                ],
                "method": [
                    453,
                    753,
                    530,
                    756,
                    536,
                    541
                ],
                "NotImplementedError": [
                    454,
                    458,
                    462,
                    537,
                    542
                ],
                "limit": [
                    461
                ],
                "target": [
                    512,
                    520,
                    531,
                    533,
                    546,
                    547,
                    549,
                    552,
                    555,
                    556,
                    557,
                    559,
                    566,
                    568,
                    570,
                    571,
                    572,
                    574,
                    576,
                    466,
                    469,
                    473,
                    478,
                    482,
                    487,
                    500,
                    501
                ],
                "ibase.ensure_index": [
                    466,
                    531,
                    566
                ],
                "missing": [
                    481,
                    577,
                    578,
                    491,
                    530,
                    468,
                    471,
                    473,
                    572,
                    573
                ],
                "List": [
                    468
                ],
                "int": [
                    706,
                    468
                ],
                "self.equals": [
                    533,
                    469
                ],
                "indexer": [
                    512,
                    515,
                    517,
                    526,
                    561,
                    562,
                    572,
                    573,
                    577,
                    578,
                    586,
                    587,
                    589,
                    590,
                    470,
                    473,
                    475,
                    476,
                    487,
                    491,
                    505
                ],
                "self.get_indexer_non_unique": [
                    473
                ],
                "new_target": [
                    512,
                    487,
                    490,
                    492,
                    524,
                    526,
                    499,
                    501,
                    503,
                    505,
                    476,
                    478
                ],
                "self.take": [
                    617,
                    476,
                    517
                ],
                "cats": [
                    482,
                    484,
                    520,
                    521,
                    491
                ],
                "self.categories.get_indexer": [
                    576,
                    482,
                    520,
                    556,
                    589,
                    559,
                    725
                ],
                "any": [
                    521,
                    484,
                    590
                ],
                "_": [
                    561,
                    487
                ],
                "result._reindex_non_unique": [
                    487
                ],
                "new_target.codes.copy": [
                    490
                ],
                "new_target.codes": [
                    490
                ],
                "self._create_from_codes": [
                    704,
                    746,
                    492,
                    765,
                    734
                ],
                "np.asarray": [
                    499,
                    589
                ],
                "target._shallow_copy": [
                    501
                ],
                "self.reindex": [
                    512
                ],
                "new_indexer": [
                    513,
                    517,
                    518,
                    526
                ],
                "check": [
                    515,
                    516,
                    518
                ],
                "check.any": [
                    516
                ],
                "np.arange": [
                    517,
                    534
                ],
                "self._shallow_copy": [
                    608,
                    524,
                    604
                ],
                "missing.clean_reindex_fill_method": [
                    530
                ],
                "self.is_unique": [
                    533
                ],
                "self._values.is_dtype_equal": [
                    546
                ],
                "self._values.equals": [
                    547
                ],
                "target._values": [
                    547,
                    574
                ],
                "target.codes": [
                    552,
                    571,
                    557,
                    549
                ],
                "recode_for_categories": [
                    551
                ],
                "target.categories": [
                    552,
                    570,
                    556
                ],
                "self._values.categories": [
                    552
                ],
                "code_indexer": [
                    556,
                    557
                ],
                "take_1d": [
                    557
                ],
                "self._engine.get_indexer_non_unique": [
                    577,
                    561,
                    572
                ],
                "ensure_platform_int": [
                    562,
                    578,
                    573
                ],
                "Appender": [
                    528,
                    564
                ],
                "_index_shared_docs": [
                    528,
                    564
                ],
                "self.categories._defer_to_indexing": [
                    601,
                    585
                ],
                "self.categories._convert_list_indexer": [
                    586
                ],
                "keyarr": [
                    608,
                    586,
                    589,
                    595,
                    599,
                    602,
                    604
                ],
                "get_indexer_for": [
                    587
                ],
                "KeyError": [
                    591
                ],
                "self.get_indexer": [
                    595
                ],
                "Index._convert_list_indexer": [
                    580
                ],
                "com.asarray_tuplesafe": [
                    599
                ],
                "com": [
                    599
                ],
                "Index._convert_arr_indexer": [
                    597
                ],
                "Index._convert_index_indexer": [
                    606
                ],
                "warnings.warn": [
                    612
                ],
                "warnings": [
                    612
                ],
                "FutureWarning": [
                    614
                ],
                "args": [
                    617,
                    756
                ],
                "kwargs": [
                    617,
                    754,
                    756
                ],
                "kind": [
                    624,
                    621
                ],
                "label": [
                    624,
                    622
                ],
                "_maybe_cast_slice_bound": [
                    624
                ],
                "side": [
                    624
                ],
                "Index._maybe_cast_slice_bound": [
                    619
                ],
                "mapped": [
                    693,
                    694
                ],
                "self._values.map": [
                    693
                ],
                "mapper": [
                    693
                ],
                "np.delete": [
                    704
                ],
                "loc": [
                    704,
                    733
                ],
                "item": [
                    725,
                    726
                ],
                "np.concatenate": [
                    745,
                    733
                ],
                "CategoricalIndex._concat_same_dtype": [
                    738
                ],
                "to_concat": [
                    745,
                    738
                ],
                "c": [
                    745
                ],
                "getattr": [
                    753
                ],
                "res": [
                    756,
                    757,
                    758,
                    759
                ],
                "get_op_result_name": [
                    764
                ],
                "joined": [
                    765
                ],
                "inherit_names": [
                    39
                ],
                "accessor.delegate_names": [
                    55
                ],
                "CategoricalIndex._add_numeric_methods_add_sub_disabled": [
                    768
                ],
                "CategoricalIndex._add_numeric_methods_disabled": [
                    769
                ],
                "CategoricalIndex._add_logical_methods_disabled": [
                    770
                ]
            },
            "filtered_variables_in_file": {
                "_index_doc_kwargs": [
                    528,
                    35,
                    36,
                    564
                ],
                "ibase._index_doc_kwargs": [
                    35
                ],
                "ibase": [
                    35,
                    337,
                    466,
                    531,
                    342,
                    566
                ],
                "_index_doc_kwargs.update": [
                    36
                ],
                "ExtensionIndex": [
                    70
                ],
                "accessor.PandasDelegate": [
                    70
                ],
                "accessor": [
                    70,
                    55
                ],
                "_typ": [
                    163
                ],
                "codes": [
                    403,
                    404,
                    417,
                    418,
                    165,
                    549,
                    551,
                    557,
                    559,
                    561,
                    576,
                    577,
                    732,
                    733,
                    734,
                    745,
                    234,
                    490,
                    491,
                    492,
                    746
                ],
                "np.ndarray": [
                    762,
                    165
                ],
                "np": [
                    704,
                    165,
                    486,
                    487,
                    517,
                    745,
                    589,
                    174,
                    175,
                    176,
                    177,
                    499,
                    437,
                    534,
                    473,
                    762,
                    379,
                    733
                ],
                "categories": [
                    197,
                    189,
                    166
                ],
                "Index": [
                    386,
                    503,
                    580,
                    166,
                    486,
                    393,
                    587,
                    619,
                    365,
                    429,
                    305,
                    597,
                    374,
                    406,
                    694,
                    252,
                    606,
                    415
                ],
                "_data": [
                    167
                ],
                "Categorical": [
                    257,
                    167,
                    234,
                    204,
                    205,
                    238,
                    239,
                    53,
                    438,
                    56,
                    283
                ],
                "np.int8": [
                    174
                ],
                "np.int16": [
                    175
                ],
                "np.int32": [
                    176
                ],
                "np.int64": [
                    177
                ],
                "libindex.Int8Engine": [
                    174
                ],
                "libindex": [
                    176,
                    177,
                    174,
                    175
                ],
                "libindex.Int16Engine": [
                    175
                ],
                "libindex.Int32Engine": [
                    176
                ],
                "libindex.Int64Engine": [
                    177
                ],
                "self.codes.dtype.type": [
                    426,
                    178
                ],
                "self.codes.dtype": [
                    426,
                    178
                ],
                "self.codes": [
                    704,
                    417,
                    426,
                    587,
                    178,
                    403,
                    475,
                    732
                ],
                "self": [
                    512,
                    517,
                    520,
                    524,
                    533,
                    534,
                    546,
                    547,
                    552,
                    556,
                    559,
                    561,
                    570,
                    572,
                    576,
                    577,
                    585,
                    586,
                    587,
                    589,
                    595,
                    601,
                    604,
                    608,
                    617,
                    178,
                    693,
                    694,
                    704,
                    725,
                    732,
                    734,
                    738,
                    231,
                    233,
                    745,
                    746,
                    753,
                    759,
                    764,
                    765,
                    254,
                    257,
                    275,
                    283,
                    302,
                    309,
                    310,
                    312,
                    323,
                    337,
                    339,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    358,
                    369,
                    372,
                    379,
                    382,
                    383,
                    384,
                    386,
                    391,
                    395,
                    396,
                    403,
                    404,
                    409,
                    410,
                    413,
                    417,
                    422,
                    425,
                    426,
                    436,
                    437,
                    438,
                    439,
                    469,
                    473,
                    475,
                    476,
                    482,
                    486,
                    492,
                    501,
                    503
                ],
                "_attributes": [
                    180
                ],
                "dtype": [
                    386,
                    230,
                    231,
                    201,
                    234,
                    205,
                    206,
                    208,
                    376,
                    380,
                    189,
                    382,
                    383
                ],
                "CategoricalDtype._from_values_or_dtype": [
                    189
                ],
                "CategoricalDtype": [
                    201,
                    189,
                    206
                ],
                "data": [
                    193,
                    196,
                    197,
                    198,
                    199,
                    202,
                    204,
                    205,
                    206,
                    208,
                    210,
                    212,
                    189,
                    191
                ],
                "ordered": [
                    189
                ],
                "name": [
                    738,
                    259,
                    232,
                    233,
                    746,
                    235,
                    748,
                    753,
                    243,
                    212,
                    764,
                    765,
                    254,
                    191
                ],
                "maybe_extract_name": [
                    191
                ],
                "cls": [
                    240,
                    212,
                    198,
                    191
                ],
                "is_categorical_dtype": [
                    272,
                    193,
                    380,
                    500
                ],
                "is_scalar": [
                    368,
                    196,
                    757,
                    726
                ],
                "cls._scalar_data_error": [
                    198
                ],
                "extract_array": [
                    202
                ],
                "data.dtype": [
                    206
                ],
                "data._set_dtype": [
                    208
                ],
                "copy": [
                    384,
                    210,
                    386
                ],
                "data.copy": [
                    210
                ],
                "cls._simple_new": [
                    212
                ],
                "self.dtype": [
                    257,
                    231,
                    438,
                    343,
                    283,
                    382,
                    383
                ],
                "self.name": [
                    503,
                    486,
                    233,
                    759,
                    396,
                    341,
                    342,
                    439,
                    501,
                    694,
                    413,
                    254
                ],
                "cat": [
                    234,
                    235,
                    438,
                    439,
                    283,
                    284
                ],
                "Categorical.from_codes": [
                    234
                ],
                "CategoricalIndex": [
                    768,
                    769,
                    546,
                    738,
                    770,
                    235,
                    396,
                    555,
                    273,
                    759,
                    568,
                    284
                ],
                "Label": [
                    253,
                    238
                ],
                "values": [
                    256,
                    257,
                    259,
                    239,
                    242,
                    437,
                    438,
                    280,
                    281,
                    282,
                    285
                ],
                "result": [
                    486,
                    487,
                    746,
                    748,
                    749,
                    240,
                    242,
                    243,
                    244,
                    246,
                    247,
                    248,
                    410,
                    413
                ],
                "object.__new__": [
                    240
                ],
                "result._data": [
                    242
                ],
                "result.name": [
                    243,
                    748
                ],
                "result._cache": [
                    244
                ],
                "result._reset_identity": [
                    246
                ],
                "result._no_setting_name": [
                    247
                ],
                "no_default": [
                    253,
                    254
                ],
                "_shallow_copy": [
                    259
                ],
                "doc": [
                    580,
                    393,
                    619,
                    365,
                    429,
                    597,
                    406,
                    374,
                    252,
                    606,
                    415
                ],
                "Index._shallow_copy": [
                    252
                ],
                "other": [
                    272,
                    273,
                    274,
                    275,
                    280,
                    283,
                    284,
                    285,
                    290,
                    302,
                    305,
                    435,
                    436,
                    309,
                    310,
                    311,
                    312,
                    437,
                    764
                ],
                "other._values": [
                    274
                ],
                "other.is_dtype_equal": [
                    275
                ],
                "is_list_like": [
                    281
                ],
                "other.isin": [
                    285
                ],
                "self.is_": [
                    302
                ],
                "self._is_dtype_compat": [
                    745,
                    309
                ],
                "other._data": [
                    311
                ],
                "self._data.equals": [
                    312
                ],
                "self._data": [
                    312,
                    396,
                    358,
                    391
                ],
                "self.categories._formatter_func": [
                    323
                ],
                "self.categories": [
                    576,
                    482,
                    323,
                    520,
                    425,
                    585,
                    586,
                    556,
                    589,
                    559,
                    337,
                    725,
                    601,
                    570
                ],
                "max_categories": [
                    337,
                    329
                ],
                "get_option": [
                    344,
                    331,
                    332
                ],
                "attrs": [
                    334,
                    342,
                    343,
                    346,
                    347
                ],
                "ibase.default_pprint": [
                    337,
                    342
                ],
                "self.ordered": [
                    339
                ],
                "attrs.append": [
                    346,
                    342,
                    343
                ],
                "self.dtype.name": [
                    343
                ],
                "max_seq_items": [
                    344,
                    345
                ],
                "Any": [
                    366
                ],
                "key": [
                    368,
                    425,
                    371,
                    372
                ],
                "isna": [
                    368,
                    726
                ],
                "self.hasnans": [
                    369
                ],
                "contains": [
                    372
                ],
                "self._engine": [
                    577,
                    561,
                    372,
                    572
                ],
                "Index.__contains__": [
                    365
                ],
                "is_interval_dtype": [
                    376
                ],
                "IntervalIndex": [
                    379
                ],
                "np.array": [
                    473,
                    379,
                    486,
                    487
                ],
                "self.dtype.update_dtype": [
                    382
                ],
                "self.copy": [
                    384
                ],
                "Index.astype": [
                    386,
                    374
                ],
                "self._data.codes": [
                    391
                ],
                "cache_readonly": [
                    388,
                    398
                ],
                "self._assert_can_do_op": [
                    395
                ],
                "value": [
                    395,
                    396
                ],
                "self._data.fillna": [
                    396
                ],
                "Index.fillna": [
                    393
                ],
                "self._engine_type": [
                    404
                ],
                "level": [
                    408,
                    409,
                    457
                ],
                "self._validate_index_level": [
                    409
                ],
                "self._values.unique": [
                    410
                ],
                "self._values": [
                    546,
                    547,
                    552,
                    753,
                    437,
                    693,
                    410
                ],
                "_simple_new": [
                    413,
                    439
                ],
                "Index.unique": [
                    406
                ],
                "self.codes.astype": [
                    417
                ],
                "duplicated_int64": [
                    418
                ],
                "keep": [
                    418
                ],
                "Index.duplicated": [
                    415
                ],
                "self.astype": [
                    422
                ],
                "code": [
                    425,
                    426,
                    427,
                    725,
                    726,
                    733
                ],
                "self.categories.get_loc": [
                    425
                ],
                "self._na_value": [
                    436
                ],
                "np.where": [
                    437
                ],
                "cond": [
                    437
                ],
                "Index.where": [
                    429
                ],
                "method": [
                    453,
                    753,
                    530,
                    756,
                    536,
                    541
                ],
                "limit": [
                    461
                ],
                "target": [
                    512,
                    520,
                    531,
                    533,
                    546,
                    547,
                    549,
                    552,
                    555,
                    556,
                    557,
                    559,
                    566,
                    568,
                    570,
                    571,
                    572,
                    574,
                    576,
                    466,
                    469,
                    473,
                    478,
                    482,
                    487,
                    500,
                    501
                ],
                "ibase.ensure_index": [
                    466,
                    531,
                    566
                ],
                "missing": [
                    481,
                    577,
                    578,
                    491,
                    530,
                    468,
                    471,
                    473,
                    572,
                    573
                ],
                "List": [
                    468
                ],
                "self.equals": [
                    533,
                    469
                ],
                "indexer": [
                    512,
                    515,
                    517,
                    526,
                    561,
                    562,
                    572,
                    573,
                    577,
                    578,
                    586,
                    587,
                    589,
                    590,
                    470,
                    473,
                    475,
                    476,
                    487,
                    491,
                    505
                ],
                "self.get_indexer_non_unique": [
                    473
                ],
                "new_target": [
                    512,
                    487,
                    490,
                    492,
                    524,
                    526,
                    499,
                    501,
                    503,
                    505,
                    476,
                    478
                ],
                "self.take": [
                    617,
                    476,
                    517
                ],
                "cats": [
                    482,
                    484,
                    520,
                    521,
                    491
                ],
                "self.categories.get_indexer": [
                    576,
                    482,
                    520,
                    556,
                    589,
                    559,
                    725
                ],
                "_": [
                    561,
                    487
                ],
                "result._reindex_non_unique": [
                    487
                ],
                "new_target.codes.copy": [
                    490
                ],
                "new_target.codes": [
                    490
                ],
                "self._create_from_codes": [
                    704,
                    746,
                    492,
                    765,
                    734
                ],
                "np.asarray": [
                    499,
                    589
                ],
                "target._shallow_copy": [
                    501
                ],
                "self.reindex": [
                    512
                ],
                "new_indexer": [
                    513,
                    517,
                    518,
                    526
                ],
                "check": [
                    515,
                    516,
                    518
                ],
                "check.any": [
                    516
                ],
                "np.arange": [
                    517,
                    534
                ],
                "self._shallow_copy": [
                    608,
                    524,
                    604
                ],
                "missing.clean_reindex_fill_method": [
                    530
                ],
                "self.is_unique": [
                    533
                ],
                "self._values.is_dtype_equal": [
                    546
                ],
                "self._values.equals": [
                    547
                ],
                "target._values": [
                    547,
                    574
                ],
                "target.codes": [
                    552,
                    571,
                    557,
                    549
                ],
                "recode_for_categories": [
                    551
                ],
                "target.categories": [
                    552,
                    570,
                    556
                ],
                "self._values.categories": [
                    552
                ],
                "code_indexer": [
                    556,
                    557
                ],
                "take_1d": [
                    557
                ],
                "self._engine.get_indexer_non_unique": [
                    577,
                    561,
                    572
                ],
                "ensure_platform_int": [
                    562,
                    578,
                    573
                ],
                "Appender": [
                    528,
                    564
                ],
                "_index_shared_docs": [
                    528,
                    564
                ],
                "self.categories._defer_to_indexing": [
                    601,
                    585
                ],
                "self.categories._convert_list_indexer": [
                    586
                ],
                "keyarr": [
                    608,
                    586,
                    589,
                    595,
                    599,
                    602,
                    604
                ],
                "get_indexer_for": [
                    587
                ],
                "self.get_indexer": [
                    595
                ],
                "Index._convert_list_indexer": [
                    580
                ],
                "com.asarray_tuplesafe": [
                    599
                ],
                "com": [
                    599
                ],
                "Index._convert_arr_indexer": [
                    597
                ],
                "Index._convert_index_indexer": [
                    606
                ],
                "warnings.warn": [
                    612
                ],
                "warnings": [
                    612
                ],
                "args": [
                    617,
                    756
                ],
                "kwargs": [
                    617,
                    754,
                    756
                ],
                "kind": [
                    624,
                    621
                ],
                "label": [
                    624,
                    622
                ],
                "_maybe_cast_slice_bound": [
                    624
                ],
                "side": [
                    624
                ],
                "Index._maybe_cast_slice_bound": [
                    619
                ],
                "mapped": [
                    693,
                    694
                ],
                "self._values.map": [
                    693
                ],
                "mapper": [
                    693
                ],
                "np.delete": [
                    704
                ],
                "loc": [
                    704,
                    733
                ],
                "item": [
                    725,
                    726
                ],
                "np.concatenate": [
                    745,
                    733
                ],
                "CategoricalIndex._concat_same_dtype": [
                    738
                ],
                "to_concat": [
                    745,
                    738
                ],
                "c": [
                    745
                ],
                "res": [
                    756,
                    757,
                    758,
                    759
                ],
                "get_op_result_name": [
                    764
                ],
                "joined": [
                    765
                ],
                "inherit_names": [
                    39
                ],
                "accessor.delegate_names": [
                    55
                ],
                "CategoricalIndex._add_numeric_methods_add_sub_disabled": [
                    768
                ],
                "CategoricalIndex._add_numeric_methods_disabled": [
                    769
                ],
                "CategoricalIndex._add_logical_methods_disabled": [
                    770
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_9/pandas/tests/indexes/categorical/test_indexing.py",
                "test_function": "test_contains_na_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\"unwrap\", [True, False])\n    def test_contains_na_dtype(self, unwrap):\n        dti = pd.date_range(\"2016-01-01\", periods=100).insert(0, pd.NaT)\n        pi = dti.to_period(\"D\")\n        tdi = dti - dti[-1]\n        ci = CategoricalIndex(dti)\n\n        obj = ci\n        if unwrap:\n            obj = ci._data\n\n        assert np.nan in obj\n        assert None in obj\n        assert pd.NaT in obj\n        assert np.datetime64(\"NaT\") in obj\n        assert np.timedelta64(\"NaT\") not in obj\n\n        obj2 = CategoricalIndex(tdi)\n        if unwrap:\n            obj2 = obj2._data\n\n        assert np.nan in obj2\n        assert None in obj2\n        assert pd.NaT in obj2\n        assert np.datetime64(\"NaT\") not in obj2\n        assert np.timedelta64(\"NaT\") in obj2\n\n        obj3 = CategoricalIndex(pi)\n        if unwrap:\n            obj3 = obj3._data\n\n        assert np.nan in obj3\n        assert None in obj3\n        assert pd.NaT in obj3\n        assert np.datetime64(\"NaT\") not in obj3\n        assert np.timedelta64(\"NaT\") not in obj3",
                "test_error": "AssertionError: assert numpy.timedelta64('NaT') not in [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]...-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\\n                                   2016-04-07, 2016-04-08, 2016-04-09]  +  where numpy.timedelta64('NaT') = <class 'numpy.timedelta64'>('NaT')  +    where <class 'numpy.timedelta64'> = np.timedelta64",
                "full_test_error": "self = <pandas.tests.indexes.categorical.test_indexing.TestContains object at 0x11bd10be0>\nunwrap = True\n\n    @pytest.mark.parametrize(\"unwrap\", [True, False])\n    def test_contains_na_dtype(self, unwrap):\n        dti = pd.date_range(\"2016-01-01\", periods=100).insert(0, pd.NaT)\n        pi = dti.to_period(\"D\")\n        tdi = dti - dti[-1]\n        ci = CategoricalIndex(dti)\n    \n        obj = ci\n        if unwrap:\n            obj = ci._data\n    \n        assert np.nan in obj\n        assert None in obj\n        assert pd.NaT in obj\n        assert np.datetime64(\"NaT\") in obj\n>       assert np.timedelta64(\"NaT\") not in obj\nE       AssertionError: assert numpy.timedelta64('NaT') not in [NaT, 2016-01-01, 2016-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-05, 2016-04-06, 2016-04-07, 2016-04-08, 2016-04-09]...-01-02, 2016-01-03, 2016-01-04, ..., 2016-04-06,\\n                                   2016-04-07, 2016-04-08, 2016-04-09]\nE        +  where numpy.timedelta64('NaT') = <class 'numpy.timedelta64'>('NaT')\nE        +    where <class 'numpy.timedelta64'> = np.timedelta64\n\npandas/tests/indexes/categorical/test_indexing.py:303: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('unwrap', [True, False])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_9/pandas/tests/indexes/categorical/test_indexing.py",
                "test_function": "test_contains_na_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\"unwrap\", [True, False])\n    def test_contains_na_dtype(self, unwrap):\n        dti = pd.date_range(\"2016-01-01\", periods=100).insert(0, pd.NaT)\n        pi = dti.to_period(\"D\")\n        tdi = dti - dti[-1]\n        ci = CategoricalIndex(dti)\n\n        obj = ci\n        if unwrap:\n            obj = ci._data\n\n        assert np.nan in obj\n        assert None in obj\n        assert pd.NaT in obj\n        assert np.datetime64(\"NaT\") in obj\n        assert np.timedelta64(\"NaT\") not in obj\n\n        obj2 = CategoricalIndex(tdi)\n        if unwrap:\n            obj2 = obj2._data\n\n        assert np.nan in obj2\n        assert None in obj2\n        assert pd.NaT in obj2\n        assert np.datetime64(\"NaT\") not in obj2\n        assert np.timedelta64(\"NaT\") in obj2\n\n        obj3 = CategoricalIndex(pi)\n        if unwrap:\n            obj3 = obj3._data\n\n        assert np.nan in obj3\n        assert None in obj3\n        assert pd.NaT in obj3\n        assert np.datetime64(\"NaT\") not in obj3\n        assert np.timedelta64(\"NaT\") not in obj3",
                "test_error": "AssertionError: assert numpy.timedelta64('NaT') not in CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\\n                  '2016-01-04', '2016-01-05'...0:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)  +  where numpy.timedelta64('NaT') = <class 'numpy.timedelta64'>('NaT')  +    where <class 'numpy.timedelta64'> = np.timedelta64",
                "full_test_error": "self = <pandas.tests.indexes.categorical.test_indexing.TestContains object at 0x11be163a0>\nunwrap = False\n\n    @pytest.mark.parametrize(\"unwrap\", [True, False])\n    def test_contains_na_dtype(self, unwrap):\n        dti = pd.date_range(\"2016-01-01\", periods=100).insert(0, pd.NaT)\n        pi = dti.to_period(\"D\")\n        tdi = dti - dti[-1]\n        ci = CategoricalIndex(dti)\n    \n        obj = ci\n        if unwrap:\n            obj = ci._data\n    \n        assert np.nan in obj\n        assert None in obj\n        assert pd.NaT in obj\n        assert np.datetime64(\"NaT\") in obj\n>       assert np.timedelta64(\"NaT\") not in obj\nE       AssertionError: assert numpy.timedelta64('NaT') not in CategoricalIndex([       'NaT', '2016-01-01', '2016-01-02', '2016-01-03',\\n                  '2016-01-04', '2016-01-05'...0:00, 2016-01-06 00:00:00, 2016-01-07 00:00:00, 2016-01-08 00:00:00, ...], ordered=False, dtype='category', length=101)\nE        +  where numpy.timedelta64('NaT') = <class 'numpy.timedelta64'>('NaT')\nE        +    where <class 'numpy.timedelta64'> = np.timedelta64\n\npandas/tests/indexes/categorical/test_indexing.py:303: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('unwrap', [True, False])"
                ]
            }
        ]
    }
}