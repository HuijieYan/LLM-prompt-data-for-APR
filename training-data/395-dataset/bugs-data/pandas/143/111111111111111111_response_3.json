{
    "pandas": [
        {
            "bugID": 143,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 1
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(self, target, method=None, limit=None, tolerance=None):\n    from pandas.core.indexes.base import ensure_platform_int\n    import numpy as np\n    from pandas.api.types import is_integer_dtype, is_list_like\n    from pandas.core.dtypes.common import is_integer\n    from pandas.core.indexes.numeric import Int64Index\n    from pandas.core.indexes.range import RangeIndex, _index_shared_docs\n    from pandas.util._decorators import Appender\n    if limit is not None and method == 'pad':\n        start, stop, step = self.start, self.stop, self.step\n        locs = np.arange(start, stop, step)\n        locs = locs[(locs >= start) & (locs <= stop)]\n        if len(locs) <= limit:\n            indexer = np.arange(len(target))\n        else:\n            indexer = np.full(len(target), -1)\n            indexer[locs[locs >= start][:limit] - start] = np.arange(limit)\n        return indexer\n    else:\n        return super().get_indexer(target, method=method, limit=limit, tolerance=tolerance)"
        }
    ]
}