{
    "1.1.1": "@Appender(_index_shared_docs[\"get_indexer\"])\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    if not (method is None and tolerance is None and is_list_like(target)):\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n\n    if self.step > 0:\n        start, stop, step = self.start, self.stop, self.step\n    else:\n        # Work on reversed range for simplicity:\n        start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n\n    target_array = np.asarray(target)\n    if not (is_integer_dtype(target_array) and target_array.ndim == 1):\n        # checks/conversions/roundings are delegated to general method\n        return super().get_indexer(target, method=method, tolerance=tolerance)\n\n    locs = target_array - start\n    valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n    locs[~valid] = -1\n    locs[valid] = locs[valid] / step\n\n    if step != self.step:\n        # We reversed this range: transform to original locs\n        locs[valid] = len(self) - 1 - locs[valid]\n    return ensure_platform_int(locs)\n",
    "1.1.2": null,
    "1.2.1": "class RangeIndex(Int64Index)",
    "1.2.2": "Immutable Index implementing a monotonic integer range.\n\nRangeIndex is a memory-saving special case of Int64Index limited to\nrepresenting monotonic ranges. Using RangeIndex may in some instances\nimprove computing speed.\n\nThis is the default index type used\nby DataFrame and Series when no explicit index is provided by the user.\n\nParameters\n----------\nstart : int (default: 0), or other RangeIndex instance\n    If int and \"stop\" is not given, interpreted as \"stop\" instead.\nstop : int (default: 0)\nstep : int (default: 1)\nname : object, optional\n    Name to be stored in the index\ncopy : bool, default False\n    Unused, accepted for homogeneity with other index types.\n\nAttributes\n----------\nstart\nstop\nstep\n\nMethods\n-------\nfrom_range\n\nSee Also\n--------\nIndex : The base pandas Index type.\nInt64Index : Index of int64 data.",
    "1.2.3": [
        "start(self)",
        "stop(self)",
        "step(self)",
        "get_indexer(self, target, method=None, limit=None, tolerance=None)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_143/pandas/core/indexes/range.py",
    "1.3.2": [
        "start(self)",
        "stop(self)",
        "step(self)",
        "get_indexer(self, target, method=None, limit=None, tolerance=None)"
    ],
    "1.4.1": [
        "    def test_reindex_limit(self):\n        # GH 28631\n        data = [[\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"], [\"C\", \"C\", \"C\"], [\"D\", \"D\", \"D\"]]\n        exp_data = [\n            [\"A\", \"A\", \"A\"],\n            [\"B\", \"B\", \"B\"],\n            [\"C\", \"C\", \"C\"],\n            [\"D\", \"D\", \"D\"],\n            [\"D\", \"D\", \"D\"],\n            [np.nan, np.nan, np.nan],\n        ]\n        df = DataFrame(data)\n        result = df.reindex([0, 1, 2, 3, 4, 5], method=\"ffill\", limit=1)\n        expected = DataFrame(exp_data)\n        tm.assert_frame_equal(result, expected)",
        "    def test_get_indexer_limit(self):\n        # GH 28631\n        idx = RangeIndex(4)\n        target = RangeIndex(6)\n        result = idx.get_indexer(target, method=\"pad\", limit=1)\n        expected = np.array([0, 1, 2, 3, 3, -1], dtype=np.intp)\n        tm.assert_numpy_array_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_143/pandas/tests/frame/test_indexing.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_143/pandas/tests/indexes/test_range.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: DataFrame.iloc[:, 0] are different\nE   \nE   DataFrame.iloc[:, 0] values are different (16.66667 %)\nE   [left]:  [A, B, C, D, D, D]\nE   [right]: [A, B, C, D, D, nan]"
        ],
        [
            "E           AssertionError: numpy array are different\nE           \nE           numpy array values are different (16.66667 %)\nE           [left]:  [0, 1, 2, 3, 3, 3]\nE           [right]: [0, 1, 2, 3, 3, -1]"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_indexing.TestDataFrameIndexing object at 0x1158342e0>\n\n    def test_reindex_limit(self):\n        # GH 28631\n        data = [[\"A\", \"A\", \"A\"], [\"B\", \"B\", \"B\"], [\"C\", \"C\", \"C\"], [\"D\", \"D\", \"D\"]]\n        exp_data = [\n            [\"A\", \"A\", \"A\"],\n            [\"B\", \"B\", \"B\"],\n            [\"C\", \"C\", \"C\"],\n            [\"D\", \"D\", \"D\"],\n            [\"D\", \"D\", \"D\"],\n            [np.nan, np.nan, np.nan],\n        ]\n        df = DataFrame(data)\n        result = df.reindex([0, 1, 2, 3, 4, 5], method=\"ffill\", limit=1)\n        expected = DataFrame(exp_data)\n>       tm.assert_frame_equal(result, expected)\n\npandas/tests/frame/test_indexing.py:2234: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:176: AssertionError"
        ],
        [
            "self = <pandas.tests.indexes.test_range.TestRangeIndex object at 0x11d924760>\n\n    def test_get_indexer_limit(self):\n        # GH 28631\n        idx = RangeIndex(4)\n        target = RangeIndex(6)\n        result = idx.get_indexer(target, method=\"pad\", limit=1)\n        expected = np.array([0, 1, 2, 3, 3, -1], dtype=np.intp)\n>       tm.assert_numpy_array_equal(result, expected)\n\npandas/tests/indexes/test_range.py:425: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = array([0, 1, 2, 3, 3, 3]), right = array([ 0,  1,  2,  3,  3, -1])\nerr_msg = None\n\n    def _raise(left, right, err_msg):\n        if err_msg is None:\n            if left.shape != right.shape:\n                raise_assert_detail(\n                    obj,\n                    \"{obj} shapes are different\".format(obj=obj),\n                    left.shape,\n                    right.shape,\n                )\n    \n            diff = 0\n            for l, r in zip(left, right):\n                # count up differences\n                if not array_equivalent(l, r, strict_nan=strict_nan):\n                    diff += 1\n    \n            diff = diff * 100.0 / left.size\n            msg = \"{obj} values are different ({pct} %)\".format(\n                obj=obj, pct=np.round(diff, 5)\n            )\n>           raise_assert_detail(obj, msg, left, right)",
            "\npandas/util/testing.py:1004: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "method": "'pad'",
                "target": "Int64Index([0, 1, 2, 3, 4, 5], dtype='int64')",
                "self.step": "1",
                "self": "RangeIndex(start=0, stop=4, step=1)",
                "self.start": "0",
                "self.stop": "4"
            },
            {}
        ],
        [
            {
                "method": "'pad'",
                "target": "RangeIndex(start=0, stop=6, step=1)",
                "self.step": "1",
                "self": "RangeIndex(start=0, stop=4, step=1)",
                "self.start": "0",
                "self.stop": "4"
            },
            {}
        ]
    ],
    "2.1.4": [
        [
            {
                "method": "str",
                "target": "Int64Index",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {}
        ],
        [
            {
                "method": "str",
                "target": "RangeIndex",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {}
        ]
    ],
    "2.1.5": [
        [
            {
                "method": "'pad'",
                "limit": "1",
                "target": "Int64Index([0, 1, 2, 3, 4, 5], dtype='int64')",
                "self.step": "1",
                "self": "RangeIndex(start=0, stop=4, step=1)",
                "self.start": "0",
                "self.stop": "4"
            },
            {}
        ],
        [
            {
                "method": "'pad'",
                "limit": "1",
                "target": "RangeIndex(start=0, stop=6, step=1)",
                "self.step": "1",
                "self": "RangeIndex(start=0, stop=4, step=1)",
                "self.start": "0",
                "self.stop": "4"
            },
            {}
        ]
    ],
    "2.1.6": [
        [
            {
                "method": "str",
                "limit": "int",
                "target": "Int64Index",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {}
        ],
        [
            {
                "method": "str",
                "limit": "int",
                "target": "RangeIndex",
                "self.step": "int",
                "self": "RangeIndex",
                "self.start": "int",
                "self.stop": "int"
            },
            {}
        ]
    ],
    "3.1.1": [
        "BUG: DataFrame.reindex not following limit - \u65b9\u6cd5\u53c2\u6570\u7684\u9519\u8bef\n"
    ],
    "3.1.2": [
        "Python\u7248\u672c: 3.6.5\n\u7248\u672c:pandas == 0.24.2\n\nimport pandas as pd\n\nData = [\n    [\"A\", \"A\", \"A\"],\n    [\"B\", \"B\", \"B\"],\n    [\"C\", \"C\", \"C\"],\n    [\"D\", \"D\", \"D\"],\n]\ntest1 = pd.DataFrame(Data)\nprint(test1)\nprint(\"------------\")\ntest1 = test1.reindex([0, 1, 2, 3, 4, 5], method=\"ffill\", limit=1)\nprint(test1)\n\nlimit\u53c2\u6570\u9650\u5236\u6570\u636e\u7ee7\u7eed\u5411\u540e\u586b\u5145\n\n\u7248\u672c:pandas==0.25.1\n\nimport pandas as pd\n\nData = [\n    [\"A\", \"A\", \"A\"],\n    [\"B\", \"B\", \"B\"],\n    [\"C\", \"C\", \"C\"],\n    [\"D\", \"D\", \"D\"],\n]\ntest1 = pd.DataFrame(Data)\nprint(test1)\nprint(\"------------\")\ntest1 = test1.reindex([0, 1, 2, 3, 4, 5], method=\"ffill\", limit=1)\nprint(test1)\n\nlimit\u53c2\u6570\u5e76\u6ca1\u6709\u9650\u5236\u6570\u636e\u7ee7\u7eed\u5411\u540e\u586b\u5145\n"
    ]
}