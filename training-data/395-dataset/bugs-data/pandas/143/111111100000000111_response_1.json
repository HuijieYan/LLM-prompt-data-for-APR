{
    "pandas": [
        {
            "bugID": 143,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 1,
                "7": 1
            },
            "start_line": 381,
            "file_name": "pandas/core/indexes/range.py",
            "replace_code": "def get_indexer(self, target, method=None, limit=None, tolerance=None):\n    import numpy as np\n    from pandas.api.types import is_integer_dtype, is_list_like\n    from pandas.core.indexes.numeric import Int64Index\n    from pandas.core.algorithms import ensure_platform_int\n    from pandas.core.indexes.common import _index_shared_docs\n    from pandas.util._decorators import Appender\n    if method is None and tolerance is None and is_list_like(target):\n        if self.step > 0:\n            start, stop, step = self.start, self.stop, self.step\n        else:\n            start, stop, step = (self.stop - self.step, self.start + 1, -self.step)\n        \n        target_array = np.asarray(target)\n        if is_integer_dtype(target_array) and target_array.ndim == 1:\n            locs = target_array - start\n            valid = (locs % step == 0) & (locs >= 0) & (target_array < stop)\n            locs[~valid] = -1\n            locs[valid] = locs[valid] / step\n    \n            if step != self.step:\n                locs[valid] = len(self) - 1 - locs[valid]\n            return ensure_platform_int(locs)\n    \n    return super().get_indexer(target, method=method, tolerance=tolerance)"
        }
    ]
}