{
    "pandas:2": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_2/pandas/core/indexing.py": {
            "buggy_functions": [
                {
                    "function_name": "__setitem__",
                    "function_code": "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        # scalar callable may return tuple\n        key = com.apply_if_callable(key, self.obj)\n\n    if not isinstance(key, tuple):\n        key = _tuplify(self.ndim, key)\n    if len(key) != self.ndim:\n        raise ValueError(\"Not enough indexers for scalar access (setting)!\")\n\n    key = list(self._convert_key(key, is_setter=True))\n    self.obj._set_value(*key, value=value, takeable=self._takeable)\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 2010,
                    "end_line": 2023,
                    "variables": {
                        "isinstance": [
                            2017,
                            2011
                        ],
                        "key": [
                            2017,
                            2018,
                            2019,
                            2022,
                            2023,
                            2011,
                            2012,
                            2015
                        ],
                        "tuple": [
                            2017,
                            2011,
                            2012
                        ],
                        "com.apply_if_callable": [
                            2012,
                            2015
                        ],
                        "com": [
                            2012,
                            2015
                        ],
                        "x": [
                            2012
                        ],
                        "self.obj": [
                            2023,
                            2012,
                            2015
                        ],
                        "self": [
                            2018,
                            2019,
                            2022,
                            2023,
                            2012,
                            2015
                        ],
                        "_tuplify": [
                            2018
                        ],
                        "self.ndim": [
                            2018,
                            2019
                        ],
                        "len": [
                            2019
                        ],
                        "ValueError": [
                            2020
                        ],
                        "list": [
                            2022
                        ],
                        "self._convert_key": [
                            2022
                        ],
                        "self.obj._set_value": [
                            2023
                        ],
                        "value": [
                            2023
                        ],
                        "self._takeable": [
                            2023
                        ]
                    },
                    "filtered_variables": {
                        "key": [
                            2017,
                            2018,
                            2019,
                            2022,
                            2023,
                            2011,
                            2012,
                            2015
                        ],
                        "com.apply_if_callable": [
                            2012,
                            2015
                        ],
                        "com": [
                            2012,
                            2015
                        ],
                        "x": [
                            2012
                        ],
                        "self.obj": [
                            2023,
                            2012,
                            2015
                        ],
                        "self": [
                            2018,
                            2019,
                            2022,
                            2023,
                            2012,
                            2015
                        ],
                        "_tuplify": [
                            2018
                        ],
                        "self.ndim": [
                            2018,
                            2019
                        ],
                        "self._convert_key": [
                            2022
                        ],
                        "self.obj._set_value": [
                            2023
                        ],
                        "value": [
                            2023
                        ],
                        "self._takeable": [
                            2023
                        ]
                    },
                    "diff_line_number": 2018,
                    "class_data": {
                        "signature": "class _ScalarAccessIndexer(_NDFrameIndexerBase)",
                        "docstring": "Access scalars quickly.",
                        "constructor_docstring": null,
                        "functions": [
                            "def _convert_key(self, key, is_setter: bool=False):\n    raise AbstractMethodError(self)",
                            "def __getitem__(self, key):\n    if not isinstance(key, tuple):\n        if not is_list_like_indexer(key):\n            key = tuple([key])\n        else:\n            raise ValueError('Invalid call for scalar access (getting)!')\n    key = self._convert_key(key)\n    return self.obj._get_value(*key, takeable=self._takeable)",
                            "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple((com.apply_if_callable(x, self.obj) for x in key))\n    else:\n        key = com.apply_if_callable(key, self.obj)\n    if not isinstance(key, tuple):\n        key = _tuplify(self.ndim, key)\n    if len(key) != self.ndim:\n        raise ValueError('Not enough indexers for scalar access (setting)!')\n    key = list(self._convert_key(key, is_setter=True))\n    self.obj._set_value(*key, value=value, takeable=self._takeable)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "_convert_key(self, key, is_setter: bool=False)",
                            "__getitem__(self, key)",
                            "__setitem__(self, key, value)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "        a\n(1, 2)  1\n(3, 4)  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11d37fae0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x11d37fae0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "[(1, 2), 'a']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "        a\n(1, 2)  2\n(3, 4)  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11d37fae0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x11d37fae0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "     a\n1 3  1\n2 4  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11d38cc20>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x11d38cc20>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "[(1, 3), 'a']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "     a\n1 3  3\n2 4  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11d38cc20>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x11d38cc20>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "        a\n(1, 2)  1\n(3, 4)  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x114854f90>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x114854f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "[(1, 2), 'a']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "        a\n(1, 2)  2\n(3, 4)  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x114854f90>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x114854f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "(1, 2)    2\n(3, 4)    2\nName: a, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x114854f90>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x114854f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "[(1, 2)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "(1, 2)    3\n(3, 4)    2\nName: a, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x114854f90>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x114854f90>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "     a\n1 3  1\n2 4  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x114a09770>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x114a09770>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "[(1, 3), 'a']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "     a\n1 3  3\n2 4  2",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "(2, 1)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x114a09770>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x114a09770>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "3",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "key": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "1  3    4\n2  4    2\nName: a, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1148905e0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x1148905e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "key": {
                                    "variable_value": "[(1, 3)]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "com.apply_if_callable": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "com": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.obj": {
                                    "variable_value": "1  3    5\n2  4    2\nName: a, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(2,)"
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1148905e0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "_tuplify": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._convert_key": {
                                    "variable_value": "<bound method _AtIndexer._convert_key of <pandas.core.indexing._AtIndexer object at 0x1148905e0>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.obj._set_value": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "value": {
                                    "variable_value": "5",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._takeable": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "_convert_key",
                    "function_code": "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    return key\n",
                    "decorators": [],
                    "docstring": "Require they keys to be the same type as the index. (so we don't\nfallback)",
                    "start_line": 2030,
                    "end_line": 2039,
                    "variables": {
                        "bool": [
                            2030
                        ],
                        "is_setter": [
                            2036
                        ],
                        "list": [
                            2037
                        ],
                        "key": [
                            2037,
                            2039
                        ]
                    },
                    "filtered_variables": {
                        "is_setter": [
                            2036
                        ],
                        "key": [
                            2037,
                            2039
                        ]
                    },
                    "diff_line_number": 2034,
                    "class_data": {
                        "signature": "class _AtIndexer(_ScalarAccessIndexer)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def _convert_key(self, key, is_setter: bool=False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    if is_setter:\n        return list(key)\n    return key",
                            "@property\ndef _axes_are_unique(self) -> bool:\n    assert self.ndim == 2\n    return self.obj.index.is_unique and self.obj.columns.is_unique",
                            "def __getitem__(self, key):\n    if self.ndim == 2 and (not self._axes_are_unique):\n        if not isinstance(key, tuple) or not all((is_scalar(x) for x in key)):\n            raise ValueError('Invalid call for scalar access (getting)!')\n        return self.obj.loc[key]\n    return super().__getitem__(key)",
                            "def __setitem__(self, key, value):\n    if self.ndim == 2 and (not self._axes_are_unique):\n        if not isinstance(key, tuple) or not all((is_scalar(x) for x in key)):\n            raise ValueError('Invalid call for scalar access (setting)!')\n        self.obj.loc[key] = value\n        return\n    return super().__setitem__(key, value)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_takeable"
                        ],
                        "class_decorators": [
                            "doc(IndexingMixin.at)"
                        ],
                        "function_signatures": [
                            "_convert_key(self, key, is_setter: bool=False)",
                            "_axes_are_unique(self) -> bool",
                            "__getitem__(self, key)",
                            "__setitem__(self, key, value)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ],
                        [
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            },
                            {
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416270>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416270>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416270>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416270>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 2)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134164a0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 2),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416900>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416900>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416900>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x113416900>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11342f220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11342f220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11342f220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x11342f220>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3), 'a')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134387c0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134387c0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_setter": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134387c0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "(1, 3)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            },
                            {
                                "self.ndim": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.indexing._AtIndexer object at 0x1134387c0>",
                                    "variable_type": "_AtIndexer",
                                    "variable_shape": null
                                },
                                "key": {
                                    "variable_value": "((1, 3),)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "is_setter": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]:\n    \"\"\"\n    Given an indexer for the first dimension, create an equivalent tuple\n    for indexing over all dimensions.\n\n    Parameters\n    ----------\n    ndim : int\n    loc : object\n\n    Returns\n    -------\n    tuple\n    \"\"\"\n    _tup: List[Union[Hashable, slice]]\n    _tup = [slice(None, None) for _ in range(ndim)]\n    _tup[0] = loc\n    return tuple(_tup)",
                "def convert_to_index_sliceable(obj: \"DataFrame\", key):\n    \"\"\"\n    If we are index sliceable, then return my slicer, otherwise return None.\n    \"\"\"\n    idx = obj.index\n    if isinstance(key, slice):\n        return idx._convert_slice_indexer(key, kind=\"getitem\")\n\n    elif isinstance(key, str):\n\n        # we are an actual column\n        if key in obj.columns:\n            return None\n\n        # We might have a datetimelike string that we can translate to a\n        # slice here via partial string indexing\n        if idx._supports_partial_string_indexing:\n            try:\n                return idx._get_string_slice(key)\n            except (KeyError, ValueError, NotImplementedError):\n                return None\n\n    return None",
                "def check_bool_indexer(index: Index, key) -> np.ndarray:\n    \"\"\"\n    Check if key is a valid boolean indexer for an object with such index and\n    perform reindexing or conversion if needed.\n\n    This function assumes that is_bool_indexer(key) == True.\n\n    Parameters\n    ----------\n    index : Index\n        Index of the object on which the indexing is done.\n    key : list-like\n        Boolean indexer to check.\n\n    Returns\n    -------\n    np.array\n        Resulting key.\n\n    Raises\n    ------\n    IndexError\n        If the key does not have the same length as index.\n    IndexingError\n        If the index of the key is unalignable to index.\n    \"\"\"\n    result = key\n    if isinstance(key, ABCSeries) and not key.index.equals(index):\n        result = result.reindex(index)\n        mask = isna(result._values)\n        if mask.any():\n            raise IndexingError(\n                \"Unalignable boolean Series provided as \"\n                \"indexer (index of the boolean Series and of \"\n                \"the indexed object do not match).\"\n            )\n        result = result.astype(bool)._values\n    elif is_object_dtype(key):\n        # key might be object-dtype bool, check_array_indexer needs bool array\n        result = np.asarray(result, dtype=bool)\n        result = check_array_indexer(index, result)\n    else:\n        result = check_array_indexer(index, result)\n\n    return result",
                "def convert_missing_indexer(indexer):\n    \"\"\"\n    Reverse convert a missing indexer, which is a dict\n    return the scalar indexer and a boolean indicating if we converted\n    \"\"\"\n    if isinstance(indexer, dict):\n\n        # a missing key (but not a tuple indexer)\n        indexer = indexer[\"key\"]\n\n        if isinstance(indexer, bool):\n            raise KeyError(\"cannot use a single bool to index into setitem\")\n        return indexer, True\n\n    return indexer, False",
                "def convert_from_missing_indexer_tuple(indexer, axes):\n    \"\"\"\n    Create a filtered indexer that doesn't have any missing indexers.\n    \"\"\"\n\n    def get_indexer(_i, _idx):\n        return axes[_i].get_loc(_idx[\"key\"]) if isinstance(_idx, dict) else _idx\n\n    return tuple(get_indexer(_i, _idx) for _i, _idx in enumerate(indexer))",
                "def maybe_convert_ix(*args):\n    \"\"\"\n    We likely want to take the cross-product.\n    \"\"\"\n    ixify = True\n    for arg in args:\n        if not isinstance(arg, (np.ndarray, list, ABCSeries, Index)):\n            ixify = False\n\n    if ixify:\n        return np.ix_(*args)\n    else:\n        return args",
                "def is_nested_tuple(tup, labels) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # check for a compatible nested tuple and multiindexes among the axes\n    if not isinstance(tup, tuple):\n        return False\n\n    for k in tup:\n        if is_list_like(k) or isinstance(k, slice):\n            return isinstance(labels, ABCMultiIndex)\n\n    return False",
                "def is_label_like(key) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # select a label or row\n    return not isinstance(key, slice) and not is_list_like_indexer(key)",
                "def need_slice(obj) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    return (\n        obj.start is not None\n        or obj.stop is not None\n        or (obj.step is not None and obj.step != 1)\n    )",
                "def _non_reducing_slice(slice_):\n    \"\"\"\n    Ensure that a slice doesn't reduce to a Series or Scalar.\n\n    Any user-passed `subset` should have this called on it\n    to make sure we're always working with DataFrames.\n    \"\"\"\n    # default to column slice, like DataFrame\n    # ['A', 'B'] -> IndexSlices[:, ['A', 'B']]\n    kinds = (ABCSeries, np.ndarray, Index, list, str)\n    if isinstance(slice_, kinds):\n        slice_ = IndexSlice[:, slice_]\n\n    def pred(part) -> bool:\n        \"\"\"\n        Returns\n        -------\n        bool\n            True if slice does *not* reduce,\n            False if `part` is a tuple.\n        \"\"\"\n        # true when slice does *not* reduce, False when part is a tuple,\n        # i.e. MultiIndex slice\n        return (isinstance(part, slice) or is_list_like(part)) and not isinstance(\n            part, tuple\n        )\n\n    if not is_list_like(slice_):\n        if not isinstance(slice_, slice):\n            # a 1-d slice, like df.loc[1]\n            slice_ = [[slice_]]\n        else:\n            # slice(a, b, c)\n            slice_ = [slice_]  # to tuplize later\n    else:\n        slice_ = [part if pred(part) else [part] for part in slice_]\n    return tuple(slice_)",
                "def _maybe_numeric_slice(df, slice_, include_bool=False):\n    \"\"\"\n    Want nice defaults for background_gradient that don't break\n    with non-numeric data. But if slice_ is passed go with that.\n    \"\"\"\n    if slice_ is None:\n        dtypes = [np.number]\n        if include_bool:\n            dtypes.append(bool)\n        slice_ = IndexSlice[:, df.select_dtypes(include=dtypes).columns]\n    return slice_",
                "def __getitem__(self, arg):\n    return arg",
                "@property\ndef iloc(self) -> \"_iLocIndexer\":\n    \"\"\"\n    Purely integer-location based indexing for selection by position.\n\n    ``.iloc[]`` is primarily integer position based (from ``0`` to\n    ``length-1`` of the axis), but may also be used with a boolean\n    array.\n\n    Allowed inputs are:\n\n    - An integer, e.g. ``5``.\n    - A list or array of integers, e.g. ``[4, 3, 0]``.\n    - A slice object with ints, e.g. ``1:7``.\n    - A boolean array.\n    - A ``callable`` function with one argument (the calling Series or\n      DataFrame) and that returns valid output for indexing (one of the above).\n      This is useful in method chains, when you don't have a reference to the\n      calling object, but would like to base your selection on some value.\n\n    ``.iloc`` will raise ``IndexError`` if a requested indexer is\n    out-of-bounds, except *slice* indexers which allow out-of-bounds\n    indexing (this conforms with python/numpy *slice* semantics).\n\n    See more at :ref:`Selection by Position <indexing.integer>`.\n\n    See Also\n    --------\n    DataFrame.iat : Fast integer location scalar accessor.\n    DataFrame.loc : Purely label-location based indexer for selection by label.\n    Series.iloc : Purely integer-location based indexing for\n                   selection by position.\n\n    Examples\n    --------\n    >>> mydict = [{'a': 1, 'b': 2, 'c': 3, 'd': 4},\n    ...           {'a': 100, 'b': 200, 'c': 300, 'd': 400},\n    ...           {'a': 1000, 'b': 2000, 'c': 3000, 'd': 4000 }]\n    >>> df = pd.DataFrame(mydict)\n    >>> df\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    **Indexing just the rows**\n\n    With a scalar integer.\n\n    >>> type(df.iloc[0])\n    <class 'pandas.core.series.Series'>\n    >>> df.iloc[0]\n    a    1\n    b    2\n    c    3\n    d    4\n    Name: 0, dtype: int64\n\n    With a list of integers.\n\n    >>> df.iloc[[0]]\n       a  b  c  d\n    0  1  2  3  4\n    >>> type(df.iloc[[0]])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> df.iloc[[0, 1]]\n         a    b    c    d\n    0    1    2    3    4\n    1  100  200  300  400\n\n    With a `slice` object.\n\n    >>> df.iloc[:3]\n          a     b     c     d\n    0     1     2     3     4\n    1   100   200   300   400\n    2  1000  2000  3000  4000\n\n    With a boolean mask the same length as the index.\n\n    >>> df.iloc[[True, False, True]]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    With a callable, useful in method chains. The `x` passed\n    to the ``lambda`` is the DataFrame being sliced. This selects\n    the rows whose index label even.\n\n    >>> df.iloc[lambda x: x.index % 2 == 0]\n          a     b     c     d\n    0     1     2     3     4\n    2  1000  2000  3000  4000\n\n    **Indexing both axes**\n\n    You can mix the indexer types for the index and columns. Use ``:`` to\n    select the entire axis.\n\n    With scalar integers.\n\n    >>> df.iloc[0, 1]\n    2\n\n    With lists of integers.\n\n    >>> df.iloc[[0, 2], [1, 3]]\n          b     d\n    0     2     4\n    2  2000  4000\n\n    With `slice` objects.\n\n    >>> df.iloc[1:3, 0:3]\n          a     b     c\n    1   100   200   300\n    2  1000  2000  3000\n\n    With a boolean array whose length matches the columns.\n\n    >>> df.iloc[:, [True, False, True, False]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n\n    With a callable function that expects the Series or DataFrame.\n\n    >>> df.iloc[:, lambda df: [0, 2]]\n          a     c\n    0     1     3\n    1   100   300\n    2  1000  3000\n    \"\"\"\n    return _iLocIndexer(\"iloc\", self)",
                "@property\ndef loc(self) -> \"_LocIndexer\":\n    \"\"\"\n    Access a group of rows and columns by label(s) or a boolean array.\n\n    ``.loc[]`` is primarily label based, but may also be used with a\n    boolean array.\n\n    Allowed inputs are:\n\n    - A single label, e.g. ``5`` or ``'a'``, (note that ``5`` is\n      interpreted as a *label* of the index, and **never** as an\n      integer position along the index).\n    - A list or array of labels, e.g. ``['a', 'b', 'c']``.\n    - A slice object with labels, e.g. ``'a':'f'``.\n\n      .. warning:: Note that contrary to usual python slices, **both** the\n          start and the stop are included\n\n    - A boolean array of the same length as the axis being sliced,\n      e.g. ``[True, False, True]``.\n    - A ``callable`` function with one argument (the calling Series or\n      DataFrame) and that returns valid output for indexing (one of the above)\n\n    See more at :ref:`Selection by Label <indexing.label>`\n\n    Raises\n    ------\n    KeyError\n        If any items are not found.\n\n    See Also\n    --------\n    DataFrame.at : Access a single value for a row/column label pair.\n    DataFrame.iloc : Access group of rows and columns by integer position(s).\n    DataFrame.xs : Returns a cross-section (row(s) or column(s)) from the\n        Series/DataFrame.\n    Series.loc : Access group of values using labels.\n\n    Examples\n    --------\n    **Getting values**\n\n    >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n    ...      index=['cobra', 'viper', 'sidewinder'],\n    ...      columns=['max_speed', 'shield'])\n    >>> df\n                max_speed  shield\n    cobra               1       2\n    viper               4       5\n    sidewinder          7       8\n\n    Single label. Note this returns the row as a Series.\n\n    >>> df.loc['viper']\n    max_speed    4\n    shield       5\n    Name: viper, dtype: int64\n\n    List of labels. Note using ``[[]]`` returns a DataFrame.\n\n    >>> df.loc[['viper', 'sidewinder']]\n                max_speed  shield\n    viper               4       5\n    sidewinder          7       8\n\n    Single label for row and column\n\n    >>> df.loc['cobra', 'shield']\n    2\n\n    Slice with labels for row and single label for column. As mentioned\n    above, note that both the start and stop of the slice are included.\n\n    >>> df.loc['cobra':'viper', 'max_speed']\n    cobra    1\n    viper    4\n    Name: max_speed, dtype: int64\n\n    Boolean list with the same length as the row axis\n\n    >>> df.loc[[False, False, True]]\n                max_speed  shield\n    sidewinder          7       8\n\n    Conditional that returns a boolean Series\n\n    >>> df.loc[df['shield'] > 6]\n                max_speed  shield\n    sidewinder          7       8\n\n    Conditional that returns a boolean Series with column labels specified\n\n    >>> df.loc[df['shield'] > 6, ['max_speed']]\n                max_speed\n    sidewinder          7\n\n    Callable that returns a boolean Series\n\n    >>> df.loc[lambda df: df['shield'] == 8]\n                max_speed  shield\n    sidewinder          7       8\n\n    **Setting values**\n\n    Set value for all items matching the list of labels\n\n    >>> df.loc[['viper', 'sidewinder'], ['shield']] = 50\n    >>> df\n                max_speed  shield\n    cobra               1       2\n    viper               4      50\n    sidewinder          7      50\n\n    Set value for an entire row\n\n    >>> df.loc['cobra'] = 10\n    >>> df\n                max_speed  shield\n    cobra              10      10\n    viper               4      50\n    sidewinder          7      50\n\n    Set value for an entire column\n\n    >>> df.loc[:, 'max_speed'] = 30\n    >>> df\n                max_speed  shield\n    cobra              30      10\n    viper              30      50\n    sidewinder         30      50\n\n    Set value for rows matching callable condition\n\n    >>> df.loc[df['shield'] > 35] = 0\n    >>> df\n                max_speed  shield\n    cobra              30      10\n    viper               0       0\n    sidewinder          0       0\n\n    **Getting values on a DataFrame with an index that has integer labels**\n\n    Another example using integers for the index\n\n    >>> df = pd.DataFrame([[1, 2], [4, 5], [7, 8]],\n    ...      index=[7, 8, 9], columns=['max_speed', 'shield'])\n    >>> df\n       max_speed  shield\n    7          1       2\n    8          4       5\n    9          7       8\n\n    Slice with integer labels for rows. As mentioned above, note that both\n    the start and stop of the slice are included.\n\n    >>> df.loc[7:9]\n       max_speed  shield\n    7          1       2\n    8          4       5\n    9          7       8\n\n    **Getting values with a MultiIndex**\n\n    A number of examples using a DataFrame with a MultiIndex\n\n    >>> tuples = [\n    ...    ('cobra', 'mark i'), ('cobra', 'mark ii'),\n    ...    ('sidewinder', 'mark i'), ('sidewinder', 'mark ii'),\n    ...    ('viper', 'mark ii'), ('viper', 'mark iii')\n    ... ]\n    >>> index = pd.MultiIndex.from_tuples(tuples)\n    >>> values = [[12, 2], [0, 4], [10, 20],\n    ...         [1, 4], [7, 1], [16, 36]]\n    >>> df = pd.DataFrame(values, columns=['max_speed', 'shield'], index=index)\n    >>> df\n                         max_speed  shield\n    cobra      mark i           12       2\n               mark ii           0       4\n    sidewinder mark i           10      20\n               mark ii           1       4\n    viper      mark ii           7       1\n               mark iii         16      36\n\n    Single label. Note this returns a DataFrame with a single index.\n\n    >>> df.loc['cobra']\n             max_speed  shield\n    mark i          12       2\n    mark ii          0       4\n\n    Single index tuple. Note this returns a Series.\n\n    >>> df.loc[('cobra', 'mark ii')]\n    max_speed    0\n    shield       4\n    Name: (cobra, mark ii), dtype: int64\n\n    Single label for row and column. Similar to passing in a tuple, this\n    returns a Series.\n\n    >>> df.loc['cobra', 'mark i']\n    max_speed    12\n    shield        2\n    Name: (cobra, mark i), dtype: int64\n\n    Single tuple. Note using ``[[]]`` returns a DataFrame.\n\n    >>> df.loc[[('cobra', 'mark ii')]]\n                   max_speed  shield\n    cobra mark ii          0       4\n\n    Single tuple for the index with a single label for the column\n\n    >>> df.loc[('cobra', 'mark i'), 'shield']\n    2\n\n    Slice from index tuple to single label\n\n    >>> df.loc[('cobra', 'mark i'):'viper']\n                         max_speed  shield\n    cobra      mark i           12       2\n               mark ii           0       4\n    sidewinder mark i           10      20\n               mark ii           1       4\n    viper      mark ii           7       1\n               mark iii         16      36\n\n    Slice from index tuple to index tuple\n\n    >>> df.loc[('cobra', 'mark i'):('viper', 'mark ii')]\n                        max_speed  shield\n    cobra      mark i          12       2\n               mark ii          0       4\n    sidewinder mark i          10      20\n               mark ii          1       4\n    viper      mark ii          7       1\n    \"\"\"\n    return _LocIndexer(\"loc\", self)",
                "@property\ndef at(self) -> \"_AtIndexer\":\n    \"\"\"\n    Access a single value for a row/column label pair.\n\n    Similar to ``loc``, in that both provide label-based lookups. Use\n    ``at`` if you only need to get or set a single value in a DataFrame\n    or Series.\n\n    Raises\n    ------\n    KeyError\n        If 'label' does not exist in DataFrame.\n\n    See Also\n    --------\n    DataFrame.iat : Access a single value for a row/column pair by integer\n        position.\n    DataFrame.loc : Access a group of rows and columns by label(s).\n    Series.at : Access a single value using a label.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n    ...                   index=[4, 5, 6], columns=['A', 'B', 'C'])\n    >>> df\n        A   B   C\n    4   0   2   3\n    5   0   4   1\n    6  10  20  30\n\n    Get value at specified row/column pair\n\n    >>> df.at[4, 'B']\n    2\n\n    Set value at specified row/column pair\n\n    >>> df.at[4, 'B'] = 10\n    >>> df.at[4, 'B']\n    10\n\n    Get value within a Series\n\n    >>> df.loc[5].at['B']\n    4\n    \"\"\"\n    return _AtIndexer(\"at\", self)",
                "@property\ndef iat(self) -> \"_iAtIndexer\":\n    \"\"\"\n    Access a single value for a row/column pair by integer position.\n\n    Similar to ``iloc``, in that both provide integer-based lookups. Use\n    ``iat`` if you only need to get or set a single value in a DataFrame\n    or Series.\n\n    Raises\n    ------\n    IndexError\n        When integer position is out of bounds.\n\n    See Also\n    --------\n    DataFrame.at : Access a single value for a row/column label pair.\n    DataFrame.loc : Access a group of rows and columns by label(s).\n    DataFrame.iloc : Access a group of rows and columns by integer position(s).\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[0, 2, 3], [0, 4, 1], [10, 20, 30]],\n    ...                   columns=['A', 'B', 'C'])\n    >>> df\n        A   B   C\n    0   0   2   3\n    1   0   4   1\n    2  10  20  30\n\n    Get value at specified row/column pair\n\n    >>> df.iat[1, 2]\n    1\n\n    Set value at specified row/column pair\n\n    >>> df.iat[1, 2] = 10\n    >>> df.iat[1, 2]\n    10\n\n    Get value within a series\n\n    >>> df.loc[0].iat[1]\n    2\n    \"\"\"\n    return _iAtIndexer(\"iat\", self)",
                "def __call__(self, axis=None):\n    # we need to return a copy of ourselves\n    new_self = type(self)(self.name, self.obj)\n\n    if axis is not None:\n        axis = self.obj._get_axis_number(axis)\n    new_self.axis = axis\n    return new_self",
                "def _get_setitem_indexer(self, key):\n    \"\"\"\n    Convert a potentially-label-based key into a positional indexer.\n    \"\"\"\n    if self.name == \"loc\":\n        self._ensure_listlike_indexer(key)\n\n    if self.axis is not None:\n        return self._convert_tuple(key, is_setter=True)\n\n    ax = self.obj._get_axis(0)\n\n    if isinstance(ax, ABCMultiIndex) and self.name != \"iloc\":\n        try:\n            return ax.get_loc(key)\n        except (TypeError, KeyError, InvalidIndexError):\n            # TypeError e.g. passed a bool\n            pass\n\n    if isinstance(key, tuple):\n        try:\n            return self._convert_tuple(key, is_setter=True)\n        except IndexingError:\n            pass\n\n    if isinstance(key, range):\n        return list(key)\n\n    try:\n        return self._convert_to_indexer(key, axis=0, is_setter=True)\n    except TypeError as e:\n\n        # invalid indexer type vs 'other' indexing errors\n        if \"cannot do\" in str(e):\n            raise\n        elif \"unhashable type\" in str(e):\n            raise\n        raise IndexingError(key) from e",
                "def _ensure_listlike_indexer(self, key, axis=None):\n    \"\"\"\n    Ensure that a list-like of column labels are all present by adding them if\n    they do not already exist.\n\n    Parameters\n    ----------\n    key : list-like of column labels\n        Target labels.\n    axis : key axis if known\n    \"\"\"\n    column_axis = 1\n\n    # column only exists in 2-dimensional DataFrame\n    if self.ndim != 2:\n        return\n\n    if isinstance(key, tuple):\n        # key may be a tuple if we are .loc\n        # in that case, set key to the column part of key\n        key = key[column_axis]\n        axis = column_axis\n\n    if (\n        axis == column_axis\n        and not isinstance(self.obj.columns, ABCMultiIndex)\n        and is_list_like_indexer(key)\n        and not com.is_bool_indexer(key)\n        and all(is_hashable(k) for k in key)\n    ):\n        for k in key:\n            if k not in self.obj:\n                self.obj[k] = np.nan",
                "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        key = com.apply_if_callable(key, self.obj)\n    indexer = self._get_setitem_indexer(key)\n    self._has_valid_setitem_indexer(key)\n\n    iloc = self if self.name == \"iloc\" else self.obj.iloc\n    iloc._setitem_with_indexer(indexer, value)",
                "def _validate_key(self, key, axis: int):\n    \"\"\"\n    Ensure that key is valid for current indexer.\n\n    Parameters\n    ----------\n    key : scalar, slice or list-like\n        Key requested.\n    axis : int\n        Dimension on which the indexing is being made.\n\n    Raises\n    ------\n    TypeError\n        If the key (or some element of it) has wrong type.\n    IndexError\n        If the key (or some element of it) is out of bounds.\n    KeyError\n        If the key was not found.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "def _has_valid_tuple(self, key: Tuple):\n    \"\"\"\n    Check the key for valid keys across my indexer.\n    \"\"\"\n    for i, k in enumerate(key):\n        if i >= self.ndim:\n            raise IndexingError(\"Too many indexers\")\n        try:\n            self._validate_key(k, i)\n        except ValueError as err:\n            raise ValueError(\n                \"Location based indexing can only have \"\n                f\"[{self._valid_types}] types\"\n            ) from err",
                "def _is_nested_tuple_indexer(self, tup: Tuple) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    if any(isinstance(ax, ABCMultiIndex) for ax in self.obj.axes):\n        return any(is_nested_tuple(tup, ax) for ax in self.obj.axes)\n    return False",
                "def _convert_tuple(self, key, is_setter: bool = False):\n    keyidx = []\n    if self.axis is not None:\n        axis = self.obj._get_axis_number(self.axis)\n        for i in range(self.ndim):\n            if i == axis:\n                keyidx.append(\n                    self._convert_to_indexer(key, axis=axis, is_setter=is_setter)\n                )\n            else:\n                keyidx.append(slice(None))\n    else:\n        for i, k in enumerate(key):\n            if i >= self.ndim:\n                raise IndexingError(\"Too many indexers\")\n            idx = self._convert_to_indexer(k, axis=i, is_setter=is_setter)\n            keyidx.append(idx)\n    return tuple(keyidx)",
                "def _getitem_tuple_same_dim(self, tup: Tuple):\n    \"\"\"\n    Index with indexers that should return an object of the same dimension\n    as self.obj.\n\n    This is only called after a failed call to _getitem_lowerdim.\n    \"\"\"\n    retval = self.obj\n    for i, key in enumerate(tup):\n        if com.is_null_slice(key):\n            continue\n\n        retval = getattr(retval, self.name)._getitem_axis(key, axis=i)\n        # We should never have retval.ndim < self.ndim, as that should\n        #  be handled by the _getitem_lowerdim call above.\n        assert retval.ndim == self.ndim\n\n    return retval",
                "def _getitem_lowerdim(self, tup: Tuple):\n\n    # we can directly get the axis result since the axis is specified\n    if self.axis is not None:\n        axis = self.obj._get_axis_number(self.axis)\n        return self._getitem_axis(tup, axis=axis)\n\n    # we may have a nested tuples indexer here\n    if self._is_nested_tuple_indexer(tup):\n        return self._getitem_nested_tuple(tup)\n\n    # we maybe be using a tuple to represent multiple dimensions here\n    ax0 = self.obj._get_axis(0)\n    # ...but iloc should handle the tuple as simple integer-location\n    # instead of checking it as multiindex representation (GH 13797)\n    if isinstance(ax0, ABCMultiIndex) and self.name != \"iloc\":\n        result = self._handle_lowerdim_multi_index_axis0(tup)\n        if result is not None:\n            return result\n\n    if len(tup) > self.ndim:\n        raise IndexingError(\"Too many indexers. handle elsewhere\")\n\n    for i, key in enumerate(tup):\n        if is_label_like(key):\n            # We don't need to check for tuples here because those are\n            #  caught by the _is_nested_tuple_indexer check above.\n            section = self._getitem_axis(key, axis=i)\n\n            # We should never have a scalar section here, because\n            #  _getitem_lowerdim is only called after a check for\n            #  is_scalar_access, which that would be.\n            if section.ndim == self.ndim:\n                # we're in the middle of slicing through a MultiIndex\n                # revise the key wrt to `section` by inserting an _NS\n                new_key = tup[:i] + (_NS,) + tup[i + 1 :]\n\n            else:\n                # Note: the section.ndim == self.ndim check above\n                #  rules out having DataFrame here, so we dont need to worry\n                #  about transposing.\n                new_key = tup[:i] + tup[i + 1 :]\n\n                if len(new_key) == 1:\n                    new_key = new_key[0]\n\n            # Slices should return views, but calling iloc/loc with a null\n            # slice returns a new object.\n            if com.is_null_slice(new_key):\n                return section\n            # This is an elided recursive call to iloc/loc\n            return getattr(section, self.name)[new_key]\n\n    raise IndexingError(\"not applicable\")",
                "def _getitem_nested_tuple(self, tup: Tuple):\n    # we have a nested tuple so have at least 1 multi-index level\n    # we should be able to match up the dimensionality here\n\n    # we have too many indexers for our dim, but have at least 1\n    # multi-index dimension, try to see if we have something like\n    # a tuple passed to a series with a multi-index\n    if len(tup) > self.ndim:\n        if self.name != \"loc\":\n            # This should never be reached, but lets be explicit about it\n            raise ValueError(\"Too many indices\")\n        result = self._handle_lowerdim_multi_index_axis0(tup)\n        if result is not None:\n            return result\n\n        # this is a series with a multi-index specified a tuple of\n        # selectors\n        axis = self.axis or 0\n        return self._getitem_axis(tup, axis=axis)\n\n    # handle the multi-axis by taking sections and reducing\n    # this is iterative\n    obj = self.obj\n    axis = 0\n    for key in tup:\n\n        if com.is_null_slice(key):\n            axis += 1\n            continue\n\n        current_ndim = obj.ndim\n        obj = getattr(obj, self.name)._getitem_axis(key, axis=axis)\n        axis += 1\n\n        # if we have a scalar, we are done\n        if is_scalar(obj) or not hasattr(obj, \"ndim\"):\n            break\n\n        # has the dim of the obj changed?\n        # GH 7199\n        if obj.ndim < current_ndim:\n            axis -= 1\n\n    return obj",
                "def _convert_to_indexer(self, key, axis: int, is_setter: bool = False):\n    raise AbstractMethodError(self)",
                "def __getitem__(self, key):\n    if type(key) is tuple:\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        if self._is_scalar_access(key):\n            try:\n                return self.obj._get_value(*key, takeable=self._takeable)\n            except (KeyError, IndexError, AttributeError):\n                # AttributeError for IntervalTree get_value\n                pass\n        return self._getitem_tuple(key)\n    else:\n        # we by definition only have the 0th axis\n        axis = self.axis or 0\n\n        maybe_callable = com.apply_if_callable(key, self.obj)\n        return self._getitem_axis(maybe_callable, axis=axis)",
                "def _is_scalar_access(self, key: Tuple):\n    raise NotImplementedError()",
                "def _getitem_tuple(self, tup: Tuple):\n    raise AbstractMethodError(self)",
                "def _getitem_axis(self, key, axis: int):\n    raise NotImplementedError()",
                "def _has_valid_setitem_indexer(self, indexer) -> bool:\n    raise AbstractMethodError(self)",
                "def _getbool_axis(self, key, axis: int):\n    # caller is responsible for ensuring non-None axis\n    labels = self.obj._get_axis(axis)\n    key = check_bool_indexer(labels, key)\n    inds = key.nonzero()[0]\n    return self.obj._take_with_is_copy(inds, axis=axis)",
                "@doc(_LocationIndexer._validate_key)\ndef _validate_key(self, key, axis: int):\n\n    # valid for a collection of labels (we check their presence later)\n    # slice of labels (where start-end in labels)\n    # slice of integers (only if in the labels)\n    # boolean\n    pass",
                "def _has_valid_setitem_indexer(self, indexer) -> bool:\n    return True",
                "def _is_scalar_access(self, key: Tuple) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # this is a shortcut accessor to both .loc and .iloc\n    # that provide the equivalent access of .at and .iat\n    # a) avoid getting things via sections and (to minimize dtype changes)\n    # b) provide a performant path\n    if len(key) != self.ndim:\n        return False\n\n    for i, k in enumerate(key):\n        if not is_scalar(k):\n            return False\n\n        ax = self.obj.axes[i]\n        if isinstance(ax, ABCMultiIndex):\n            return False\n\n        if isinstance(k, str) and ax._supports_partial_string_indexing:\n            # partial string indexing, df.loc['2000', 'A']\n            # should not be considered scalar\n            return False\n\n        if not ax.is_unique:\n            return False\n\n    return True",
                "def _multi_take_opportunity(self, tup: Tuple) -> bool:\n    \"\"\"\n    Check whether there is the possibility to use ``_multi_take``.\n\n    Currently the limit is that all axes being indexed, must be indexed with\n    list-likes.\n\n    Parameters\n    ----------\n    tup : tuple\n        Tuple of indexers, one per axis.\n\n    Returns\n    -------\n    bool\n        Whether the current indexing,\n        can be passed through `_multi_take`.\n    \"\"\"\n    if not all(is_list_like_indexer(x) for x in tup):\n        return False\n\n    # just too complicated\n    if any(com.is_bool_indexer(x) for x in tup):\n        return False\n\n    return True",
                "def _multi_take(self, tup: Tuple):\n    \"\"\"\n    Create the indexers for the passed tuple of keys, and\n    executes the take operation. This allows the take operation to be\n    executed all at once, rather than once for each dimension.\n    Improving efficiency.\n\n    Parameters\n    ----------\n    tup : tuple\n        Tuple of indexers, one per axis.\n\n    Returns\n    -------\n    values: same type as the object being indexed\n    \"\"\"\n    # GH 836\n    d = {\n        axis: self._get_listlike_indexer(key, axis)\n        for (key, axis) in zip(tup, self.obj._AXIS_ORDERS)\n    }\n    return self.obj._reindex_with_indexers(d, copy=True, allow_dups=True)",
                "def _getitem_iterable(self, key, axis: int):\n    \"\"\"\n    Index current object with an an iterable collection of keys.\n\n    Parameters\n    ----------\n    key : iterable\n        Targeted labels.\n    axis: int\n        Dimension on which the indexing is being made.\n\n    Raises\n    ------\n    KeyError\n        If no key was found. Will change in the future to raise if not all\n        keys were found.\n\n    Returns\n    -------\n    scalar, DataFrame, or Series: indexed value(s).\n    \"\"\"\n    # we assume that not com.is_bool_indexer(key), as that is\n    #  handled before we get here.\n    self._validate_key(key, axis)\n\n    # A collection of keys\n    keyarr, indexer = self._get_listlike_indexer(key, axis, raise_missing=False)\n    return self.obj._reindex_with_indexers(\n        {axis: [keyarr, indexer]}, copy=True, allow_dups=True\n    )",
                "def _getitem_tuple(self, tup: Tuple):\n    try:\n        return self._getitem_lowerdim(tup)\n    except IndexingError:\n        pass\n\n    # no multi-index, so validate all of the indexers\n    self._has_valid_tuple(tup)\n\n    # ugly hack for GH #836\n    if self._multi_take_opportunity(tup):\n        return self._multi_take(tup)\n\n    return self._getitem_tuple_same_dim(tup)",
                "def _get_label(self, label, axis: int):\n    # GH#5667 this will fail if the label is not present in the axis.\n    return self.obj.xs(label, axis=axis)",
                "def _handle_lowerdim_multi_index_axis0(self, tup: Tuple):\n    # we have an axis0 multi-index, handle or raise\n    axis = self.axis or 0\n    try:\n        # fast path for series or for tup devoid of slices\n        return self._get_label(tup, axis=axis)\n    except TypeError:\n        # slices are unhashable\n        pass\n    except KeyError as ek:\n        # raise KeyError if number of indexers match\n        # else IndexingError will be raised\n        if len(tup) <= self.obj.index.nlevels and len(tup) > self.ndim:\n            raise ek\n\n    return None",
                "def _getitem_axis(self, key, axis: int):\n    key = item_from_zerodim(key)\n    if is_iterator(key):\n        key = list(key)\n\n    labels = self.obj._get_axis(axis)\n    key = labels._get_partial_string_timestamp_match_key(key)\n\n    if isinstance(key, slice):\n        self._validate_key(key, axis)\n        return self._get_slice_axis(key, axis=axis)\n    elif com.is_bool_indexer(key):\n        return self._getbool_axis(key, axis=axis)\n    elif is_list_like_indexer(key):\n\n        # an iterable multi-selection\n        if not (isinstance(key, tuple) and isinstance(labels, ABCMultiIndex)):\n\n            if hasattr(key, \"ndim\") and key.ndim > 1:\n                raise ValueError(\"Cannot index with multidimensional key\")\n\n            return self._getitem_iterable(key, axis=axis)\n\n        # nested tuple slicing\n        if is_nested_tuple(key, labels):\n            locs = labels.get_locs(key)\n            indexer = [slice(None)] * self.ndim\n            indexer[axis] = locs\n            return self.obj.iloc[tuple(indexer)]\n\n    # fall thru to straight lookup\n    self._validate_key(key, axis)\n    return self._get_label(key, axis=axis)",
                "def _get_slice_axis(self, slice_obj: slice, axis: int):\n    \"\"\"\n    This is pretty simple as we just have to deal with labels.\n    \"\"\"\n    # caller is responsible for ensuring non-None axis\n    obj = self.obj\n    if not need_slice(slice_obj):\n        return obj.copy(deep=False)\n\n    labels = obj._get_axis(axis)\n    indexer = labels.slice_indexer(\n        slice_obj.start, slice_obj.stop, slice_obj.step, kind=\"loc\"\n    )\n\n    if isinstance(indexer, slice):\n        return self.obj._slice(indexer, axis=axis)\n    else:\n        # DatetimeIndex overrides Index.slice_indexer and may\n        #  return a DatetimeIndex instead of a slice object.\n        return self.obj.take(indexer, axis=axis)",
                "def _convert_to_indexer(self, key, axis: int, is_setter: bool = False):\n    \"\"\"\n    Convert indexing key into something we can use to do actual fancy\n    indexing on a ndarray.\n\n    Examples\n    ix[:5] -> slice(0, 5)\n    ix[[1,2,3]] -> [1,2,3]\n    ix[['foo', 'bar', 'baz']] -> [i, j, k] (indices of foo, bar, baz)\n\n    Going by Zen of Python?\n    'In the face of ambiguity, refuse the temptation to guess.'\n    raise AmbiguousIndexError with integer labels?\n    - No, prefer label-based indexing\n    \"\"\"\n    labels = self.obj._get_axis(axis)\n\n    if isinstance(key, slice):\n        return labels._convert_slice_indexer(key, kind=\"loc\")\n\n    # see if we are positional in nature\n    is_int_index = labels.is_integer()\n    is_int_positional = is_integer(key) and not is_int_index\n\n    if is_scalar(key) or isinstance(labels, ABCMultiIndex):\n        # Otherwise get_loc will raise InvalidIndexError\n\n        # if we are a label return me\n        try:\n            return labels.get_loc(key)\n        except LookupError:\n            if isinstance(key, tuple) and isinstance(labels, ABCMultiIndex):\n                if len(key) == labels.nlevels:\n                    return {\"key\": key}\n                raise\n        except TypeError:\n            pass\n        except ValueError:\n            if not is_int_positional:\n                raise\n\n    # a positional\n    if is_int_positional:\n\n        # if we are setting and its not a valid location\n        # its an insert which fails by definition\n\n        # always valid\n        return {\"key\": key}\n\n    if is_nested_tuple(key, labels):\n        return labels.get_locs(key)\n\n    elif is_list_like_indexer(key):\n\n        if com.is_bool_indexer(key):\n            key = check_bool_indexer(labels, key)\n            (inds,) = key.nonzero()\n            return inds\n        else:\n            # When setting, missing keys are not allowed, even with .loc:\n            return self._get_listlike_indexer(key, axis, raise_missing=True)[1]\n    else:\n        try:\n            return labels.get_loc(key)\n        except LookupError:\n            # allow a not found key only if we are a setter\n            if not is_list_like_indexer(key):\n                return {\"key\": key}\n            raise",
                "def _get_listlike_indexer(self, key, axis: int, raise_missing: bool = False):\n    \"\"\"\n    Transform a list-like of keys into a new index and an indexer.\n\n    Parameters\n    ----------\n    key : list-like\n        Targeted labels.\n    axis: int\n        Dimension on which the indexing is being made.\n    raise_missing: bool, default False\n        Whether to raise a KeyError if some labels were not found.\n        Will be removed in the future, and then this method will always behave as\n        if ``raise_missing=True``.\n\n    Raises\n    ------\n    KeyError\n        If at least one key was requested but none was found, and\n        raise_missing=True.\n\n    Returns\n    -------\n    keyarr: Index\n        New index (coinciding with 'key' if the axis is unique).\n    values : array-like\n        Indexer for the return object, -1 denotes keys not found.\n    \"\"\"\n    ax = self.obj._get_axis(axis)\n\n    # Have the index compute an indexer or return None\n    # if it cannot handle:\n    indexer, keyarr = ax._convert_listlike_indexer(key)\n    # We only act on all found values:\n    if indexer is not None and (indexer != -1).all():\n        self._validate_read_indexer(\n            keyarr, indexer, axis, raise_missing=raise_missing\n        )\n        return ax[indexer], indexer\n\n    if ax.is_unique and not getattr(ax, \"is_overlapping\", False):\n        indexer = ax.get_indexer_for(keyarr)\n        keyarr = ax.reindex(keyarr)[0]\n    else:\n        keyarr, indexer, new_indexer = ax._reindex_non_unique(keyarr)\n\n    self._validate_read_indexer(keyarr, indexer, axis, raise_missing=raise_missing)\n    return keyarr, indexer",
                "def _validate_read_indexer(\n    self, key, indexer, axis: int, raise_missing: bool = False\n):\n    \"\"\"\n    Check that indexer can be used to return a result.\n\n    e.g. at least one element was found,\n    unless the list of keys was actually empty.\n\n    Parameters\n    ----------\n    key : list-like\n        Targeted labels (only used to show correct error message).\n    indexer: array-like of booleans\n        Indices corresponding to the key,\n        (with -1 indicating not found).\n    axis: int\n        Dimension on which the indexing is being made.\n    raise_missing: bool\n        Whether to raise a KeyError if some labels are not found. Will be\n        removed in the future, and then this method will always behave as\n        if raise_missing=True.\n\n    Raises\n    ------\n    KeyError\n        If at least one key was requested but none was found, and\n        raise_missing=True.\n    \"\"\"\n    ax = self.obj._get_axis(axis)\n\n    if len(key) == 0:\n        return\n\n    # Count missing values:\n    missing = (indexer < 0).sum()\n\n    if missing:\n        if missing == len(indexer):\n            axis_name = self.obj._get_axis_name(axis)\n            raise KeyError(f\"None of [{key}] are in the [{axis_name}]\")\n\n        # We (temporarily) allow for some missing keys with .loc, except in\n        # some cases (e.g. setting) in which \"raise_missing\" will be False\n        if raise_missing:\n            not_found = list(set(key) - set(ax))\n            raise KeyError(f\"{not_found} not in index\")\n\n        # we skip the warning on Categorical\n        # as this check is actually done (check for\n        # non-missing values), but a bit later in the\n        # code, so we want to avoid warning & then\n        # just raising\n        if not ax.is_categorical():\n            raise KeyError(\n                \"Passing list-likes to .loc or [] with any missing labels \"\n                \"is no longer supported, see \"\n                \"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#deprecate-loc-reindex-listlike\"  # noqa:E501\n            )",
                "def _validate_key(self, key, axis: int):\n    if com.is_bool_indexer(key):\n        if hasattr(key, \"index\") and isinstance(key.index, Index):\n            if key.index.inferred_type == \"integer\":\n                raise NotImplementedError(\n                    \"iLocation based boolean \"\n                    \"indexing on an integer type \"\n                    \"is not available\"\n                )\n            raise ValueError(\n                \"iLocation based boolean indexing cannot use \"\n                \"an indexable as a mask\"\n            )\n        return\n\n    if isinstance(key, slice):\n        return\n    elif is_integer(key):\n        self._validate_integer(key, axis)\n    elif isinstance(key, tuple):\n        # a tuple should already have been caught by this point\n        # so don't treat a tuple as a valid indexer\n        raise IndexingError(\"Too many indexers\")\n    elif is_list_like_indexer(key):\n        arr = np.array(key)\n        len_axis = len(self.obj._get_axis(axis))\n\n        # check that the key has a numeric dtype\n        if not is_numeric_dtype(arr.dtype):\n            raise IndexError(f\".iloc requires numeric indexers, got {arr}\")\n\n        # check that the key does not exceed the maximum size of the index\n        if len(arr) and (arr.max() >= len_axis or arr.min() < -len_axis):\n            raise IndexError(\"positional indexers are out-of-bounds\")\n    else:\n        raise ValueError(f\"Can only index by location with a [{self._valid_types}]\")",
                "def _has_valid_setitem_indexer(self, indexer) -> bool:\n    \"\"\"\n    Validate that a positional indexer cannot enlarge its target\n    will raise if needed, does not modify the indexer externally.\n\n    Returns\n    -------\n    bool\n    \"\"\"\n    if isinstance(indexer, dict):\n        raise IndexError(\"iloc cannot enlarge its target object\")\n    else:\n        if not isinstance(indexer, tuple):\n            indexer = _tuplify(self.ndim, indexer)\n        for ax, i in zip(self.obj.axes, indexer):\n            if isinstance(i, slice):\n                # should check the stop slice?\n                pass\n            elif is_list_like_indexer(i):\n                # should check the elements?\n                pass\n            elif is_integer(i):\n                if i >= len(ax):\n                    raise IndexError(\"iloc cannot enlarge its target object\")\n            elif isinstance(i, dict):\n                raise IndexError(\"iloc cannot enlarge its target object\")\n\n    return True",
                "def _is_scalar_access(self, key: Tuple) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n    \"\"\"\n    # this is a shortcut accessor to both .loc and .iloc\n    # that provide the equivalent access of .at and .iat\n    # a) avoid getting things via sections and (to minimize dtype changes)\n    # b) provide a performant path\n    if len(key) != self.ndim:\n        return False\n\n    for k in key:\n        if not is_integer(k):\n            return False\n\n    return True",
                "def _validate_integer(self, key: int, axis: int) -> None:\n    \"\"\"\n    Check that 'key' is a valid position in the desired axis.\n\n    Parameters\n    ----------\n    key : int\n        Requested position.\n    axis : int\n        Desired axis.\n\n    Raises\n    ------\n    IndexError\n        If 'key' is not a valid position in axis 'axis'.\n    \"\"\"\n    len_axis = len(self.obj._get_axis(axis))\n    if key >= len_axis or key < -len_axis:\n        raise IndexError(\"single positional indexer is out-of-bounds\")",
                "def _getitem_tuple(self, tup: Tuple):\n\n    self._has_valid_tuple(tup)\n    try:\n        return self._getitem_lowerdim(tup)\n    except IndexingError:\n        pass\n\n    return self._getitem_tuple_same_dim(tup)",
                "def _get_list_axis(self, key, axis: int):\n    \"\"\"\n    Return Series values by list or array of integers.\n\n    Parameters\n    ----------\n    key : list-like positional indexer\n    axis : int\n\n    Returns\n    -------\n    Series object\n\n    Notes\n    -----\n    `axis` can only be zero.\n    \"\"\"\n    try:\n        return self.obj._take_with_is_copy(key, axis=axis)\n    except IndexError as err:\n        # re-raise with different error message\n        raise IndexError(\"positional indexers are out-of-bounds\") from err",
                "def _getitem_axis(self, key, axis: int):\n    if isinstance(key, slice):\n        return self._get_slice_axis(key, axis=axis)\n\n    if isinstance(key, list):\n        key = np.asarray(key)\n\n    if com.is_bool_indexer(key):\n        self._validate_key(key, axis)\n        return self._getbool_axis(key, axis=axis)\n\n    # a list of integers\n    elif is_list_like_indexer(key):\n        return self._get_list_axis(key, axis=axis)\n\n    # a single integer\n    else:\n        key = item_from_zerodim(key)\n        if not is_integer(key):\n            raise TypeError(\"Cannot index by location index with a non-integer key\")\n\n        # validate the location\n        self._validate_integer(key, axis)\n\n        return self.obj._ixs(key, axis=axis)",
                "def _get_slice_axis(self, slice_obj: slice, axis: int):\n    # caller is responsible for ensuring non-None axis\n    obj = self.obj\n\n    if not need_slice(slice_obj):\n        return obj.copy(deep=False)\n\n    labels = obj._get_axis(axis)\n    labels._validate_positional_slice(slice_obj)\n    return self.obj._slice(slice_obj, axis=axis)",
                "def _convert_to_indexer(self, key, axis: int, is_setter: bool = False):\n    \"\"\"\n    Much simpler as we only have to deal with our valid types.\n    \"\"\"\n    return key",
                "def _get_setitem_indexer(self, key):\n    # GH#32257 Fall through to let numpy do validation\n    return key",
                "def _setitem_with_indexer(self, indexer, value):\n    \"\"\"\n    _setitem_with_indexer is for setting values on a Series/DataFrame\n    using positional indexers.\n\n    If the relevant keys are not present, the Series/DataFrame may be\n    expanded.\n\n    This method is currently broken when dealing with non-unique Indexes,\n    since it goes from positional indexers back to labels when calling\n    BlockManager methods, see GH#12991, GH#22046, GH#15686.\n    \"\"\"\n\n    # also has the side effect of consolidating in-place\n    from pandas import Series\n\n    info_axis = self.obj._info_axis_number\n\n    # maybe partial set\n    take_split_path = self.obj._is_mixed_type\n\n    # if there is only one block/type, still have to take split path\n    # unless the block is one-dimensional or it can hold the value\n    if not take_split_path and self.obj._mgr.blocks:\n        (blk,) = self.obj._mgr.blocks\n        if 1 < blk.ndim:  # in case of dict, keys are indices\n            val = list(value.values()) if isinstance(value, dict) else value\n            take_split_path = not blk._can_hold_element(val)\n\n    # if we have any multi-indexes that have non-trivial slices\n    # (not null slices) then we must take the split path, xref\n    # GH 10360, GH 27841\n    if isinstance(indexer, tuple) and len(indexer) == len(self.obj.axes):\n        for i, ax in zip(indexer, self.obj.axes):\n            if isinstance(ax, ABCMultiIndex) and not (\n                is_integer(i) or com.is_null_slice(i)\n            ):\n                take_split_path = True\n                break\n\n    if isinstance(indexer, tuple):\n        nindexer = []\n        for i, idx in enumerate(indexer):\n            if isinstance(idx, dict):\n\n                # reindex the axis to the new value\n                # and set inplace\n                key, _ = convert_missing_indexer(idx)\n\n                # if this is the items axes, then take the main missing\n                # path first\n                # this correctly sets the dtype and avoids cache issues\n                # essentially this separates out the block that is needed\n                # to possibly be modified\n                if self.ndim > 1 and i == info_axis:\n\n                    # add the new item, and set the value\n                    # must have all defined axes if we have a scalar\n                    # or a list-like on the non-info axes if we have a\n                    # list-like\n                    len_non_info_axes = (\n                        len(_ax) for _i, _ax in enumerate(self.obj.axes) if _i != i\n                    )\n                    if any(not l for l in len_non_info_axes):\n                        if not is_list_like_indexer(value):\n                            raise ValueError(\n                                \"cannot set a frame with no \"\n                                \"defined index and a scalar\"\n                            )\n                        self.obj[key] = value\n                        return\n\n                    # add a new item with the dtype setup\n                    self.obj[key] = _infer_fill_value(value)\n\n                    new_indexer = convert_from_missing_indexer_tuple(\n                        indexer, self.obj.axes\n                    )\n                    self._setitem_with_indexer(new_indexer, value)\n\n                    return\n\n                # reindex the axis\n                # make sure to clear the cache because we are\n                # just replacing the block manager here\n                # so the object is the same\n                index = self.obj._get_axis(i)\n                labels = index.insert(len(index), key)\n                self.obj._mgr = self.obj.reindex(labels, axis=i)._mgr\n                self.obj._maybe_update_cacher(clear=True)\n                self.obj._is_copy = None\n\n                nindexer.append(labels.get_loc(key))\n\n            else:\n                nindexer.append(idx)\n\n        indexer = tuple(nindexer)\n    else:\n\n        indexer, missing = convert_missing_indexer(indexer)\n\n        if missing:\n            self._setitem_with_indexer_missing(indexer, value)\n            return\n\n    # set\n    item_labels = self.obj._get_axis(info_axis)\n\n    # align and set the values\n    if take_split_path:\n        # Above we only set take_split_path to True for 2D cases\n        assert self.ndim == 2\n        assert info_axis == 1\n\n        if not isinstance(indexer, tuple):\n            indexer = _tuplify(self.ndim, indexer)\n\n        if isinstance(value, ABCSeries):\n            value = self._align_series(indexer, value)\n\n        info_idx = indexer[info_axis]\n        if is_integer(info_idx):\n            info_idx = [info_idx]\n        labels = item_labels[info_idx]\n\n        # Ensure we have something we can iterate over\n        ilocs = info_idx\n        if isinstance(info_idx, slice):\n            ri = Index(range(len(self.obj.columns)))\n            ilocs = ri[info_idx]\n\n        plane_indexer = indexer[:1]\n        lplane_indexer = length_of_indexer(plane_indexer[0], self.obj.index)\n        # lplane_indexer gives the expected length of obj[indexer[0]]\n\n        if len(labels) == 1:\n            # We can operate on a single column\n\n            # require that we are setting the right number of values that\n            # we are indexing\n            if is_list_like_indexer(value) and 0 != lplane_indexer != len(value):\n                # Exclude zero-len for e.g. boolean masking that is all-false\n                raise ValueError(\n                    \"cannot set using a multi-index \"\n                    \"selection indexer with a different \"\n                    \"length than the value\"\n                )\n\n        pi = plane_indexer[0] if lplane_indexer == 1 else plane_indexer\n\n        def isetter(loc, v):\n            # positional setting on column loc\n            ser = self.obj._ixs(loc, axis=1)\n\n            # perform the equivalent of a setitem on the info axis\n            # as we have a null slice or a slice with full bounds\n            # which means essentially reassign to the columns of a\n            # multi-dim object\n            # GH6149 (null slice), GH10408 (full bounds)\n            if isinstance(pi, tuple) and all(\n                com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n                for idx in pi\n            ):\n                ser = v\n            else:\n                # set the item, possibly having a dtype change\n                ser._consolidate_inplace()\n                ser = ser.copy()\n                ser._mgr = ser._mgr.setitem(indexer=pi, value=v)\n                ser._maybe_update_cacher(clear=True)\n\n            # reset the sliced object if unique\n            self.obj._iset_item(loc, ser)\n\n        # we need an iterable, with a ndim of at least 1\n        # eg. don't pass through np.array(0)\n        if is_list_like_indexer(value) and getattr(value, \"ndim\", 1) > 0:\n\n            # we have an equal len Frame\n            if isinstance(value, ABCDataFrame):\n                sub_indexer = list(indexer)\n                multiindex_indexer = isinstance(labels, ABCMultiIndex)\n                # TODO: we are implicitly assuming value.columns is unique\n\n                for loc in ilocs:\n                    item = item_labels[loc]\n                    if item in value:\n                        sub_indexer[info_axis] = item\n                        v = self._align_series(\n                            tuple(sub_indexer), value[item], multiindex_indexer\n                        )\n                    else:\n                        v = np.nan\n\n                    isetter(loc, v)\n\n            # we have an equal len ndarray/convertible to our labels\n            # hasattr first, to avoid coercing to ndarray without reason.\n            # But we may be relying on the ndarray coercion to check ndim.\n            # Why not just convert to an ndarray earlier on if needed?\n            elif np.ndim(value) == 2:\n\n                # note that this coerces the dtype if we are mixed\n                # GH 7551\n                value = np.array(value, dtype=object)\n                if len(ilocs) != value.shape[1]:\n                    raise ValueError(\n                        \"Must have equal len keys and value \"\n                        \"when setting with an ndarray\"\n                    )\n\n                for i, loc in enumerate(ilocs):\n                    # setting with a list, re-coerces\n                    isetter(loc, value[:, i].tolist())\n\n            elif (\n                len(labels) == 1\n                and lplane_indexer == len(value)\n                and not is_scalar(plane_indexer[0])\n            ):\n                # we have an equal len list/ndarray\n                # We only get here with len(labels) == len(ilocs) == 1\n                isetter(ilocs[0], value)\n\n            elif lplane_indexer == 0 and len(value) == len(self.obj.index):\n                # We get here in one case via .loc with a all-False mask\n                pass\n\n            else:\n                # per-label values\n                if len(ilocs) != len(value):\n                    raise ValueError(\n                        \"Must have equal len keys and value \"\n                        \"when setting with an iterable\"\n                    )\n\n                for loc, v in zip(ilocs, value):\n                    isetter(loc, v)\n        else:\n\n            # scalar value\n            for loc in ilocs:\n                isetter(loc, value)\n\n    else:\n        if isinstance(indexer, tuple):\n\n            # if we are setting on the info axis ONLY\n            # set using those methods to avoid block-splitting\n            # logic here\n            if (\n                len(indexer) > info_axis\n                and is_integer(indexer[info_axis])\n                and all(\n                    com.is_null_slice(idx)\n                    for i, idx in enumerate(indexer)\n                    if i != info_axis\n                )\n                and item_labels.is_unique\n            ):\n                self.obj[item_labels[indexer[info_axis]]] = value\n                return\n\n            indexer = maybe_convert_ix(*indexer)\n\n        if isinstance(value, (ABCSeries, dict)):\n            # TODO(EA): ExtensionBlock.setitem this causes issues with\n            # setting for extensionarrays that store dicts. Need to decide\n            # if it's worth supporting that.\n            value = self._align_series(indexer, Series(value))\n\n        elif isinstance(value, ABCDataFrame):\n            value = self._align_frame(indexer, value)\n\n        # check for chained assignment\n        self.obj._check_is_chained_assignment_possible()\n\n        # actually do the set\n        self.obj._consolidate_inplace()\n        self.obj._mgr = self.obj._mgr.setitem(indexer=indexer, value=value)\n        self.obj._maybe_update_cacher(clear=True)",
                "def _setitem_with_indexer_missing(self, indexer, value):\n    \"\"\"\n    Insert new row(s) or column(s) into the Series or DataFrame.\n    \"\"\"\n    from pandas import Series\n\n    # reindex the axis to the new value\n    # and set inplace\n    if self.ndim == 1:\n        index = self.obj.index\n        new_index = index.insert(len(index), indexer)\n\n        # we have a coerced indexer, e.g. a float\n        # that matches in an Int64Index, so\n        # we will not create a duplicate index, rather\n        # index to that element\n        # e.g. 0.0 -> 0\n        # GH#12246\n        if index.is_unique:\n            new_indexer = index.get_indexer([new_index[-1]])\n            if (new_indexer != -1).any():\n                return self._setitem_with_indexer(new_indexer, value)\n\n        # this preserves dtype of the value\n        new_values = Series([value])._values\n        if len(self.obj._values):\n            # GH#22717 handle casting compatibility that np.concatenate\n            #  does incorrectly\n            new_values = concat_compat([self.obj._values, new_values])\n        self.obj._mgr = self.obj._constructor(\n            new_values, index=new_index, name=self.obj.name\n        )._mgr\n        self.obj._maybe_update_cacher(clear=True)\n\n    elif self.ndim == 2:\n\n        if not len(self.obj.columns):\n            # no columns and scalar\n            raise ValueError(\"cannot set a frame with no defined columns\")\n\n        if isinstance(value, ABCSeries):\n            # append a Series\n            value = value.reindex(index=self.obj.columns, copy=True)\n            value.name = indexer\n\n        else:\n            # a list-list\n            if is_list_like_indexer(value):\n                # must have conforming columns\n                if len(value) != len(self.obj.columns):\n                    raise ValueError(\"cannot set a row with mismatched columns\")\n\n            value = Series(value, index=self.obj.columns, name=indexer)\n\n        self.obj._mgr = self.obj.append(value)._mgr\n        self.obj._maybe_update_cacher(clear=True)",
                "def _align_series(self, indexer, ser: ABCSeries, multiindex_indexer: bool = False):\n    \"\"\"\n    Parameters\n    ----------\n    indexer : tuple, slice, scalar\n        Indexer used to get the locations that will be set to `ser`.\n    ser : pd.Series\n        Values to assign to the locations specified by `indexer`.\n    multiindex_indexer : boolean, optional\n        Defaults to False. Should be set to True if `indexer` was from\n        a `pd.MultiIndex`, to avoid unnecessary broadcasting.\n\n    Returns\n    -------\n    `np.array` of `ser` broadcast to the appropriate shape for assignment\n    to the locations selected by `indexer`\n    \"\"\"\n    if isinstance(indexer, (slice, np.ndarray, list, Index)):\n        indexer = tuple([indexer])\n\n    if isinstance(indexer, tuple):\n\n        # flatten np.ndarray indexers\n        def ravel(i):\n            return i.ravel() if isinstance(i, np.ndarray) else i\n\n        indexer = tuple(map(ravel, indexer))\n\n        aligners = [not com.is_null_slice(idx) for idx in indexer]\n        sum_aligners = sum(aligners)\n        single_aligner = sum_aligners == 1\n        is_frame = self.ndim == 2\n        obj = self.obj\n\n        # are we a single alignable value on a non-primary\n        # dim (e.g. panel: 1,2, or frame: 0) ?\n        # hence need to align to a single axis dimension\n        # rather that find all valid dims\n\n        # frame\n        if is_frame:\n            single_aligner = single_aligner and aligners[0]\n\n        # we have a frame, with multiple indexers on both axes; and a\n        # series, so need to broadcast (see GH5206)\n        if sum_aligners == self.ndim and all(is_sequence(_) for _ in indexer):\n            ser = ser.reindex(obj.axes[0][indexer[0]], copy=True)._values\n\n            # single indexer\n            if len(indexer) > 1 and not multiindex_indexer:\n                len_indexer = len(indexer[1])\n                ser = np.tile(ser, len_indexer).reshape(len_indexer, -1).T\n\n            return ser\n\n        for i, idx in enumerate(indexer):\n            ax = obj.axes[i]\n\n            # multiple aligners (or null slices)\n            if is_sequence(idx) or isinstance(idx, slice):\n                if single_aligner and com.is_null_slice(idx):\n                    continue\n                new_ix = ax[idx]\n                if not is_list_like_indexer(new_ix):\n                    new_ix = Index([new_ix])\n                else:\n                    new_ix = Index(new_ix)\n                if ser.index.equals(new_ix) or not len(new_ix):\n                    return ser._values.copy()\n\n                return ser.reindex(new_ix)._values\n\n            # 2 dims\n            elif single_aligner:\n\n                # reindex along index\n                ax = self.obj.axes[1]\n                if ser.index.equals(ax) or not len(ax):\n                    return ser._values.copy()\n                return ser.reindex(ax)._values\n\n    elif is_scalar(indexer):\n        ax = self.obj._get_axis(1)\n\n        if ser.index.equals(ax):\n            return ser._values.copy()\n\n        return ser.reindex(ax)._values\n\n    raise ValueError(\"Incompatible indexer with Series\")",
                "def _align_frame(self, indexer, df: ABCDataFrame):\n    is_frame = self.ndim == 2\n\n    if isinstance(indexer, tuple):\n\n        idx, cols = None, None\n        sindexers = []\n        for i, ix in enumerate(indexer):\n            ax = self.obj.axes[i]\n            if is_sequence(ix) or isinstance(ix, slice):\n                if isinstance(ix, np.ndarray):\n                    ix = ix.ravel()\n                if idx is None:\n                    idx = ax[ix]\n                elif cols is None:\n                    cols = ax[ix]\n                else:\n                    break\n            else:\n                sindexers.append(i)\n\n        if idx is not None and cols is not None:\n\n            if df.index.equals(idx) and df.columns.equals(cols):\n                val = df.copy()._values\n            else:\n                val = df.reindex(idx, columns=cols)._values\n            return val\n\n    elif (isinstance(indexer, slice) or is_list_like_indexer(indexer)) and is_frame:\n        ax = self.obj.index[indexer]\n        if df.index.equals(ax):\n            val = df.copy()._values\n        else:\n\n            # we have a multi-index and are trying to align\n            # with a particular, level GH3738\n            if (\n                isinstance(ax, ABCMultiIndex)\n                and isinstance(df.index, ABCMultiIndex)\n                and ax.nlevels != df.index.nlevels\n            ):\n                raise TypeError(\n                    \"cannot align on a multi-index with out \"\n                    \"specifying the join levels\"\n                )\n\n            val = df.reindex(index=ax)._values\n        return val\n\n    raise ValueError(\"Incompatible indexer with DataFrame\")",
                "def _convert_key(self, key, is_setter: bool = False):\n    raise AbstractMethodError(self)",
                "def __getitem__(self, key):\n    if not isinstance(key, tuple):\n\n        # we could have a convertible item here (e.g. Timestamp)\n        if not is_list_like_indexer(key):\n            key = tuple([key])\n        else:\n            raise ValueError(\"Invalid call for scalar access (getting)!\")\n\n    key = self._convert_key(key)\n    return self.obj._get_value(*key, takeable=self._takeable)",
                "def __setitem__(self, key, value):\n    if isinstance(key, tuple):\n        key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n    else:\n        # scalar callable may return tuple\n        key = com.apply_if_callable(key, self.obj)\n\n    if not isinstance(key, tuple):\n        key = _tuplify(self.ndim, key)\n    if len(key) != self.ndim:\n        raise ValueError(\"Not enough indexers for scalar access (setting)!\")\n\n    key = list(self._convert_key(key, is_setter=True))\n    self.obj._set_value(*key, value=value, takeable=self._takeable)",
                "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require they keys to be the same type as the index. (so we don't\n    fallback)\n    \"\"\"\n    # allow arbitrary setting\n    if is_setter:\n        return list(key)\n\n    return key",
                "@property\ndef _axes_are_unique(self) -> bool:\n    # Only relevant for self.ndim == 2\n    assert self.ndim == 2\n    return self.obj.index.is_unique and self.obj.columns.is_unique",
                "def __getitem__(self, key):\n\n    if self.ndim == 2 and not self._axes_are_unique:\n        # GH#33041 fall back to .loc\n        if not isinstance(key, tuple) or not all(is_scalar(x) for x in key):\n            raise ValueError(\"Invalid call for scalar access (getting)!\")\n        return self.obj.loc[key]\n\n    return super().__getitem__(key)",
                "def __setitem__(self, key, value):\n    if self.ndim == 2 and not self._axes_are_unique:\n        # GH#33041 fall back to .loc\n        if not isinstance(key, tuple) or not all(is_scalar(x) for x in key):\n            raise ValueError(\"Invalid call for scalar access (setting)!\")\n\n        self.obj.loc[key] = value\n        return\n\n    return super().__setitem__(key, value)",
                "def _convert_key(self, key, is_setter: bool = False):\n    \"\"\"\n    Require integer args. (and convert to label arguments)\n    \"\"\"\n    for a, i in zip(self.obj.axes, key):\n        if not is_integer(i):\n            raise ValueError(\"iAt based indexing can only have integer indexers\")\n    return key",
                "def get_indexer(_i, _idx):\n    return axes[_i].get_loc(_idx[\"key\"]) if isinstance(_idx, dict) else _idx",
                "def pred(part) -> bool:\n    \"\"\"\n    Returns\n    -------\n    bool\n        True if slice does *not* reduce,\n        False if `part` is a tuple.\n    \"\"\"\n    # true when slice does *not* reduce, False when part is a tuple,\n    # i.e. MultiIndex slice\n    return (isinstance(part, slice) or is_list_like(part)) and not isinstance(\n        part, tuple\n    )",
                "def isetter(loc, v):\n    # positional setting on column loc\n    ser = self.obj._ixs(loc, axis=1)\n\n    # perform the equivalent of a setitem on the info axis\n    # as we have a null slice or a slice with full bounds\n    # which means essentially reassign to the columns of a\n    # multi-dim object\n    # GH6149 (null slice), GH10408 (full bounds)\n    if isinstance(pi, tuple) and all(\n        com.is_null_slice(idx) or com.is_full_slice(idx, len(self.obj))\n        for idx in pi\n    ):\n        ser = v\n    else:\n        # set the item, possibly having a dtype change\n        ser._consolidate_inplace()\n        ser = ser.copy()\n        ser._mgr = ser._mgr.setitem(indexer=pi, value=v)\n        ser._maybe_update_cacher(clear=True)\n\n    # reset the sliced object if unique\n    self.obj._iset_item(loc, ser)",
                "def ravel(i):\n    return i.ravel() if isinstance(i, np.ndarray) else i"
            ],
            "inscope_function_signatures": [
                "_tuplify(ndim: int, loc: Hashable) -> Tuple[Union[Hashable, slice], ...]",
                "convert_to_index_sliceable(obj: 'DataFrame', key)",
                "check_bool_indexer(index: Index, key) -> np.ndarray",
                "convert_missing_indexer(indexer)",
                "convert_from_missing_indexer_tuple(indexer, axes)",
                "maybe_convert_ix(*args)",
                "is_nested_tuple(tup, labels) -> bool",
                "is_label_like(key) -> bool",
                "need_slice(obj) -> bool",
                "_non_reducing_slice(slice_)",
                "_maybe_numeric_slice(df, slice_, include_bool=False)",
                "__getitem__(self, arg)",
                "iloc(self) -> '_iLocIndexer'",
                "loc(self) -> '_LocIndexer'",
                "at(self) -> '_AtIndexer'",
                "iat(self) -> '_iAtIndexer'",
                "__call__(self, axis=None)",
                "_get_setitem_indexer(self, key)",
                "_ensure_listlike_indexer(self, key, axis=None)",
                "__setitem__(self, key, value)",
                "_validate_key(self, key, axis: int)",
                "_has_valid_tuple(self, key: Tuple)",
                "_is_nested_tuple_indexer(self, tup: Tuple) -> bool",
                "_convert_tuple(self, key, is_setter: bool=False)",
                "_getitem_tuple_same_dim(self, tup: Tuple)",
                "_getitem_lowerdim(self, tup: Tuple)",
                "_getitem_nested_tuple(self, tup: Tuple)",
                "_convert_to_indexer(self, key, axis: int, is_setter: bool=False)",
                "__getitem__(self, key)",
                "_is_scalar_access(self, key: Tuple)",
                "_getitem_tuple(self, tup: Tuple)",
                "_getitem_axis(self, key, axis: int)",
                "_has_valid_setitem_indexer(self, indexer) -> bool",
                "_getbool_axis(self, key, axis: int)",
                "_validate_key(self, key, axis: int)",
                "_has_valid_setitem_indexer(self, indexer) -> bool",
                "_is_scalar_access(self, key: Tuple) -> bool",
                "_multi_take_opportunity(self, tup: Tuple) -> bool",
                "_multi_take(self, tup: Tuple)",
                "_getitem_iterable(self, key, axis: int)",
                "_getitem_tuple(self, tup: Tuple)",
                "_get_label(self, label, axis: int)",
                "_handle_lowerdim_multi_index_axis0(self, tup: Tuple)",
                "_getitem_axis(self, key, axis: int)",
                "_get_slice_axis(self, slice_obj: slice, axis: int)",
                "_convert_to_indexer(self, key, axis: int, is_setter: bool=False)",
                "_get_listlike_indexer(self, key, axis: int, raise_missing: bool=False)",
                "_validate_read_indexer(self, key, indexer, axis: int, raise_missing: bool=False)",
                "_validate_key(self, key, axis: int)",
                "_has_valid_setitem_indexer(self, indexer) -> bool",
                "_is_scalar_access(self, key: Tuple) -> bool",
                "_validate_integer(self, key: int, axis: int) -> None",
                "_getitem_tuple(self, tup: Tuple)",
                "_get_list_axis(self, key, axis: int)",
                "_getitem_axis(self, key, axis: int)",
                "_get_slice_axis(self, slice_obj: slice, axis: int)",
                "_convert_to_indexer(self, key, axis: int, is_setter: bool=False)",
                "_get_setitem_indexer(self, key)",
                "_setitem_with_indexer(self, indexer, value)",
                "_setitem_with_indexer_missing(self, indexer, value)",
                "_align_series(self, indexer, ser: ABCSeries, multiindex_indexer: bool=False)",
                "_align_frame(self, indexer, df: ABCDataFrame)",
                "_convert_key(self, key, is_setter: bool=False)",
                "__getitem__(self, key)",
                "__setitem__(self, key, value)",
                "_convert_key(self, key, is_setter: bool=False)",
                "_axes_are_unique(self) -> bool",
                "__getitem__(self, key)",
                "__setitem__(self, key, value)",
                "_convert_key(self, key, is_setter: bool=False)",
                "get_indexer(_i, _idx)",
                "pred(part) -> bool",
                "isetter(loc, v)",
                "ravel(i)"
            ],
            "variables_in_file": {
                "TYPE_CHECKING": [
                    32
                ],
                "_NS": [
                    36,
                    788
                ],
                "slice": [
                    1946,
                    2083,
                    36,
                    1966,
                    2097,
                    1458,
                    2098,
                    1332,
                    2229,
                    1078,
                    2108,
                    2242,
                    1863,
                    1096,
                    1483,
                    1104,
                    725,
                    1369,
                    1118,
                    1634,
                    2281,
                    2286,
                    1905,
                    1142
                ],
                "arg": [
                    2208,
                    81,
                    2209
                ],
                "IndexSlice": [
                    2306,
                    84,
                    2269
                ],
                "_IndexSlice": [
                    84
                ],
                "Exception": [
                    87
                ],
                "_iLocIndexer": [
                    231
                ],
                "self": [
                    2049,
                    1026,
                    1538,
                    1539,
                    1029,
                    1030,
                    2053,
                    520,
                    2058,
                    1036,
                    2063,
                    1041,
                    1044,
                    1045,
                    1047,
                    1560,
                    1051,
                    2077,
                    1055,
                    1567,
                    1058,
                    1575,
                    1065,
                    1579,
                    1582,
                    1584,
                    1075,
                    1079,
                    568,
                    1080,
                    1082,
                    1592,
                    1594,
                    1595,
                    1596,
                    577,
                    1091,
                    580,
                    1096,
                    1609,
                    1098,
                    588,
                    589,
                    1101,
                    591,
                    592,
                    1102,
                    594,
                    1613,
                    596,
                    1109,
                    1618,
                    1622,
                    1625,
                    605,
                    1119,
                    1123,
                    1635,
                    613,
                    1639,
                    1140,
                    1659,
                    637,
                    1667,
                    648,
                    654,
                    655,
                    1679,
                    659,
                    661,
                    662,
                    663,
                    665,
                    1695,
                    1186,
                    688,
                    695,
                    698,
                    702,
                    1731,
                    711,
                    712,
                    1224,
                    717,
                    718,
                    719,
                    1231,
                    722,
                    728,
                    730,
                    1242,
                    741,
                    231,
                    1767,
                    746,
                    749,
                    1776,
                    1779,
                    756,
                    757,
                    758,
                    1782,
                    761,
                    762,
                    1274,
                    1785,
                    765,
                    1786,
                    1787,
                    768,
                    769,
                    1284,
                    773,
                    1797,
                    1798,
                    780,
                    785,
                    1810,
                    1814,
                    1817,
                    1818,
                    1819,
                    1821,
                    1823,
                    1825,
                    804,
                    1831,
                    1838,
                    815,
                    816,
                    1841,
                    819,
                    1843,
                    1844,
                    1335,
                    825,
                    826,
                    830,
                    1342,
                    839,
                    1352,
                    1877,
                    854,
                    1367,
                    1368,
                    1878,
                    858,
                    859,
                    861,
                    865,
                    1891,
                    868,
                    870,
                    871,
                    877,
                    1393,
                    883,
                    887,
                    890,
                    1922,
                    1928,
                    1418,
                    1426,
                    1938,
                    1428,
                    1432,
                    1945,
                    927,
                    934,
                    1452,
                    1967,
                    1459,
                    1465,
                    1466,
                    1470,
                    1479,
                    1481,
                    1996,
                    1485,
                    1492,
                    471,
                    2007,
                    2008,
                    2012,
                    2015,
                    2018,
                    2019,
                    996,
                    997,
                    2022,
                    999,
                    2023,
                    1522,
                    1525,
                    1529,
                    1530,
                    2044,
                    2045
                ],
                "property": [
                    96,
                    233,
                    522,
                    473,
                    2041
                ],
                "_LocIndexer": [
                    471
                ],
                "_AtIndexer": [
                    520
                ],
                "_iAtIndexer": [
                    568
                ],
                "_NDFrameIndexerBase": [
                    571,
                    1990
                ],
                "_valid_types": [
                    896,
                    572,
                    1308
                ],
                "str": [
                    617,
                    938,
                    619,
                    2267,
                    572,
                    2111
                ],
                "axis": [
                    1026,
                    644,
                    1029,
                    1284,
                    647,
                    1031,
                    1274,
                    1418,
                    1051,
                    1481,
                    1055,
                    1058,
                    1186,
                    1452,
                    1075,
                    1459,
                    1079,
                    1080,
                    825,
                    826,
                    1082,
                    1335,
                    573,
                    1342,
                    831,
                    1465,
                    1466,
                    1470,
                    579,
                    580,
                    581,
                    835,
                    839,
                    840,
                    1091,
                    1097,
                    1224,
                    1479,
                    1101,
                    718,
                    1102,
                    720,
                    849,
                    722,
                    1232,
                    1490,
                    1492,
                    1113,
                    1242,
                    1119,
                    1123,
                    868,
                    996,
                    997,
                    871,
                    1140,
                    757,
                    758,
                    887,
                    890
                ],
                "new_self": [
                    577,
                    581,
                    582
                ],
                "type": [
                    857,
                    577
                ],
                "self.name": [
                    768,
                    577,
                    804,
                    839,
                    746,
                    588,
                    816,
                    596,
                    665
                ],
                "self.obj": [
                    1538,
                    1539,
                    2053,
                    1030,
                    2063,
                    1051,
                    2077,
                    1567,
                    1575,
                    1065,
                    1579,
                    1582,
                    1075,
                    1592,
                    1594,
                    1595,
                    1596,
                    577,
                    580,
                    1098,
                    1613,
                    594,
                    1109,
                    1119,
                    1123,
                    1635,
                    1639,
                    1140,
                    1659,
                    1667,
                    648,
                    654,
                    655,
                    1679,
                    659,
                    661,
                    665,
                    1731,
                    711,
                    712,
                    1224,
                    718,
                    741,
                    1767,
                    757,
                    1782,
                    1785,
                    1274,
                    1786,
                    1787,
                    765,
                    1284,
                    1798,
                    1814,
                    1817,
                    1818,
                    1819,
                    1821,
                    1825,
                    1831,
                    1838,
                    1841,
                    1843,
                    1844,
                    830,
                    1342,
                    1878,
                    1368,
                    858,
                    861,
                    870,
                    887,
                    890,
                    1922,
                    1928,
                    1418,
                    1945,
                    934,
                    1452,
                    1967,
                    1481,
                    1485,
                    1492,
                    2008,
                    2012,
                    2015,
                    997,
                    999,
                    2023,
                    1522,
                    1525,
                    1529,
                    1530,
                    2045
                ],
                "self.obj._get_axis_number": [
                    580,
                    757,
                    718
                ],
                "new_self.axis": [
                    581
                ],
                "self._ensure_listlike_indexer": [
                    589
                ],
                "key": [
                    1026,
                    2051,
                    1029,
                    2053,
                    2055,
                    2060,
                    2063,
                    1553,
                    2066,
                    2077,
                    2080,
                    1575,
                    1579,
                    1071,
                    1072,
                    1073,
                    1076,
                    1078,
                    1079,
                    1080,
                    1081,
                    1082,
                    1083,
                    1593,
                    2108,
                    1086,
                    1598,
                    1088,
                    2109,
                    2111,
                    1091,
                    2114,
                    1094,
                    1095,
                    2121,
                    589,
                    1101,
                    1102,
                    592,
                    598,
                    603,
                    605,
                    609,
                    610,
                    613,
                    2154,
                    2155,
                    621,
                    2165,
                    1142,
                    1143,
                    1147,
                    1149,
                    640,
                    1154,
                    643,
                    1156,
                    1157,
                    1158,
                    649,
                    650,
                    651,
                    653,
                    658,
                    659,
                    661,
                    662,
                    663,
                    1173,
                    1175,
                    1176,
                    1178,
                    1180,
                    1181,
                    1182,
                    1186,
                    1189,
                    1192,
                    1193,
                    694,
                    2242,
                    1228,
                    722,
                    727,
                    742,
                    743,
                    746,
                    1276,
                    1285,
                    776,
                    777,
                    1290,
                    780,
                    1318,
                    1319,
                    1320,
                    1332,
                    1334,
                    1335,
                    1336,
                    1340,
                    1341,
                    832,
                    834,
                    839,
                    857,
                    858,
                    859,
                    861,
                    865,
                    870,
                    1393,
                    1396,
                    888,
                    889,
                    1419,
                    927,
                    930,
                    1452,
                    1458,
                    1459,
                    1461,
                    1462,
                    1464,
                    1465,
                    1466,
                    1469,
                    1470,
                    1474,
                    1475,
                    1479,
                    1481,
                    1999,
                    2002,
                    2003,
                    2007,
                    2008,
                    1498,
                    2011,
                    2012,
                    1502,
                    2015,
                    2017,
                    2018,
                    2019,
                    996,
                    997,
                    2022,
                    2023,
                    2037,
                    2039
                ],
                "self.axis": [
                    868,
                    717,
                    718,
                    591,
                    756,
                    757,
                    825,
                    1055
                ],
                "self._convert_tuple": [
                    592,
                    605
                ],
                "ax": [
                    1922,
                    1539,
                    1540,
                    1923,
                    1925,
                    1928,
                    1290,
                    1930,
                    1933,
                    1298,
                    1945,
                    1950,
                    1952,
                    934,
                    935,
                    938,
                    943,
                    1967,
                    1968,
                    1975,
                    1977,
                    1984,
                    711,
                    712,
                    1224,
                    1228,
                    594,
                    1234,
                    596,
                    1236,
                    598,
                    1237,
                    1238,
                    1240,
                    1368,
                    1376,
                    1902,
                    1908,
                    1274
                ],
                "self.obj._get_axis": [
                    1224,
                    1928,
                    1418,
                    1613,
                    594,
                    1075,
                    1140,
                    887,
                    1592,
                    1274,
                    765,
                    1342
                ],
                "isinstance": [
                    640,
                    768,
                    1538,
                    1666,
                    1156,
                    1540,
                    2051,
                    2180,
                    648,
                    2185,
                    1546,
                    2060,
                    1549,
                    658,
                    1940,
                    1686,
                    2198,
                    1688,
                    1946,
                    1947,
                    2209,
                    1829,
                    935,
                    1319,
                    938,
                    1966,
                    2225,
                    1458,
                    1332,
                    1461,
                    1078,
                    1975,
                    1336,
                    1976,
                    2229,
                    2230,
                    2108,
                    1086,
                    2111,
                    2242,
                    711,
                    1863,
                    1866,
                    1870,
                    1999,
                    1363,
                    596,
                    1621,
                    1366,
                    1624,
                    1369,
                    1752,
                    603,
                    2011,
                    2268,
                    1118,
                    609,
                    1378,
                    1634,
                    2017,
                    2281,
                    2155,
                    1772,
                    2286,
                    1905,
                    1778,
                    1142,
                    1532,
                    1149
                ],
                "ABCMultiIndex": [
                    768,
                    1156,
                    1540,
                    935,
                    648,
                    711,
                    596,
                    1976,
                    1975,
                    1688,
                    2230,
                    1149,
                    1086
                ],
                "ax.get_loc": [
                    598
                ],
                "TypeError": [
                    1059,
                    1476,
                    614,
                    1160,
                    599,
                    1979
                ],
                "KeyError": [
                    1285,
                    1062,
                    2122,
                    1291,
                    2186,
                    1299,
                    599,
                    862
                ],
                "InvalidIndexError": [
                    599
                ],
                "tuple": [
                    640,
                    1538,
                    1666,
                    1156,
                    2051,
                    1546,
                    2060,
                    658,
                    659,
                    1940,
                    2200,
                    1696,
                    2225,
                    2100,
                    1336,
                    1086,
                    1603,
                    1864,
                    1098,
                    1866,
                    1999,
                    1872,
                    2003,
                    1621,
                    1366,
                    1752,
                    857,
                    858,
                    603,
                    732,
                    2011,
                    2012,
                    2017,
                    2282,
                    2294
                ],
                "IndexingError": [
                    774,
                    806,
                    621,
                    1037,
                    2159,
                    1429,
                    696,
                    729,
                    1339,
                    606
                ],
                "range": [
                    609,
                    2098,
                    1635,
                    719
                ],
                "list": [
                    2209,
                    610,
                    2022,
                    1863,
                    1290,
                    1073,
                    1461,
                    2037,
                    1687,
                    2267,
                    1532
                ],
                "self._convert_to_indexer": [
                    730,
                    722,
                    613
                ],
                "e": [
                    617,
                    619,
                    621
                ],
                "column_axis": [
                    634,
                    643,
                    644,
                    647
                ],
                "self.ndim": [
                    2049,
                    773,
                    1797,
                    2058,
                    785,
                    1938,
                    1560,
                    1823,
                    927,
                    1065,
                    815,
                    695,
                    1096,
                    719,
                    1618,
                    1877,
                    1622,
                    1367,
                    728,
                    2018,
                    1891,
                    2019,
                    749,
                    1393,
                    2044,
                    637
                ],
                "self.obj.columns": [
                    1825,
                    1635,
                    1831,
                    648,
                    1838,
                    1841,
                    2045
                ],
                "is_list_like_indexer": [
                    1570,
                    2242,
                    1192,
                    649,
                    969,
                    1836,
                    1966,
                    1647,
                    2002,
                    1683,
                    1909,
                    1372,
                    1178,
                    1083,
                    1340,
                    1469
                ],
                "com.is_bool_indexer": [
                    1318,
                    650,
                    973,
                    1464,
                    1081,
                    1180
                ],
                "com": [
                    1667,
                    1541,
                    650,
                    659,
                    661,
                    1180,
                    801,
                    1318,
                    1464,
                    1081,
                    834,
                    973,
                    1874,
                    858,
                    2012,
                    2015,
                    1761,
                    870,
                    743,
                    1906
                ],
                "all": [
                    1760,
                    1666,
                    1891,
                    2051,
                    969,
                    651,
                    2060,
                    1230
                ],
                "is_hashable": [
                    651
                ],
                "k": [
                    930,
                    931,
                    938,
                    651,
                    653,
                    654,
                    655,
                    1396,
                    1397,
                    694,
                    727,
                    2228,
                    730,
                    698,
                    2229
                ],
                "np.nan": [
                    1699,
                    655
                ],
                "np": [
                    2209,
                    1699,
                    2213,
                    1863,
                    1897,
                    1707,
                    1870,
                    655,
                    1711,
                    2128,
                    2267,
                    1462,
                    2167,
                    1947,
                    1341,
                    2303
                ],
                "com.apply_if_callable": [
                    870,
                    659,
                    661,
                    858,
                    2012,
                    2015
                ],
                "x": [
                    2051,
                    969,
                    2060,
                    973,
                    659,
                    858,
                    2012
                ],
                "indexer": [
                    1280,
                    1538,
                    1283,
                    1539,
                    1029,
                    2180,
                    1031,
                    1799,
                    1927,
                    1546,
                    2183,
                    1548,
                    2185,
                    2187,
                    2189,
                    1940,
                    662,
                    1687,
                    1944,
                    2200,
                    666,
                    1832,
                    1582,
                    1966,
                    1967,
                    1841,
                    1603,
                    1606,
                    1863,
                    1096,
                    1097,
                    1098,
                    1609,
                    1228,
                    1864,
                    1230,
                    1866,
                    1232,
                    1872,
                    1234,
                    1363,
                    1874,
                    1237,
                    1366,
                    1367,
                    1240,
                    1368,
                    1114,
                    1242,
                    1243,
                    1621,
                    1118,
                    1119,
                    1625,
                    1622,
                    1627,
                    1123,
                    1758,
                    1759,
                    1638,
                    1762,
                    1767,
                    1891,
                    1770,
                    1892,
                    1895,
                    1896,
                    1901,
                    1752,
                    1776,
                    1779,
                    1786
                ],
                "self._get_setitem_indexer": [
                    662
                ],
                "self._has_valid_setitem_indexer": [
                    663
                ],
                "iloc": [
                    665,
                    666
                ],
                "self.obj.iloc": [
                    665,
                    1098
                ],
                "iloc._setitem_with_indexer": [
                    666
                ],
                "value": [
                    2063,
                    1810,
                    1683,
                    2066,
                    1813,
                    1686,
                    666,
                    1693,
                    1696,
                    1570,
                    1829,
                    1575,
                    1831,
                    1832,
                    1579,
                    1707,
                    1836,
                    1838,
                    1711,
                    1584,
                    1712,
                    1841,
                    1843,
                    1720,
                    1724,
                    1729,
                    1731,
                    1609,
                    1737,
                    1743,
                    1749,
                    1624,
                    1625,
                    1767,
                    2023,
                    1772,
                    1647,
                    1776,
                    1778,
                    1779,
                    1786,
                    1532
                ],
                "int": [
                    906,
                    1049,
                    1434,
                    668,
                    2083,
                    1317,
                    1196,
                    1070,
                    1457,
                    1483,
                    1104,
                    853,
                    1494,
                    1246,
                    1125,
                    1003,
                    879,
                    885,
                    1402
                ],
                "AbstractMethodError": [
                    1996,
                    877,
                    688,
                    883,
                    854
                ],
                "Tuple": [
                    705,
                    2083,
                    1383,
                    808,
                    873,
                    1034,
                    876,
                    1424,
                    753,
                    690,
                    978,
                    917,
                    951,
                    1053,
                    734
                ],
                "i": [
                    1539,
                    1541,
                    776,
                    780,
                    1548,
                    788,
                    1560,
                    1944,
                    794,
                    1945,
                    2077,
                    2078,
                    1567,
                    930,
                    1956,
                    934,
                    694,
                    695,
                    1592,
                    1718,
                    698,
                    1594,
                    1720,
                    1870,
                    719,
                    720,
                    727,
                    1368,
                    1369,
                    728,
                    730,
                    1372,
                    1375,
                    1376,
                    1378,
                    1762,
                    1763,
                    742,
                    746,
                    1901,
                    1902
                ],
                "enumerate": [
                    930,
                    1762,
                    742,
                    776,
                    1548,
                    1901,
                    1944,
                    694,
                    727,
                    1718,
                    2200,
                    1567
                ],
                "self._validate_key": [
                    1026,
                    1101,
                    1079,
                    1465,
                    698
                ],
                "ValueError": [
                    2052,
                    1162,
                    2061,
                    1935,
                    2079,
                    1571,
                    1827,
                    1326,
                    1839,
                    1713,
                    818,
                    699,
                    700,
                    1089,
                    1987,
                    1352,
                    1738,
                    2122,
                    2005,
                    2020,
                    1649
                ],
                "self._valid_types": [
                    1352,
                    702
                ],
                "err": [
                    1455,
                    703
                ],
                "any": [
                    1569,
                    711,
                    712,
                    973,
                    1809
                ],
                "self.obj.axes": [
                    1538,
                    1539,
                    1922,
                    934,
                    711,
                    712,
                    1582,
                    1368,
                    1945,
                    2077,
                    1567
                ],
                "is_nested_tuple": [
                    712,
                    1094,
                    1175
                ],
                "tup": [
                    769,
                    773,
                    776,
                    1036,
                    1041,
                    1426,
                    788,
                    1044,
                    1045,
                    1047,
                    1428,
                    1432,
                    794,
                    1058,
                    1065,
                    815,
                    2225,
                    819,
                    2228,
                    826,
                    832,
                    712,
                    969,
                    973,
                    997,
                    742,
                    758,
                    761,
                    762
                ],
                "bool": [
                    2305,
                    2185,
                    914,
                    917,
                    2073,
                    2218,
                    1196,
                    1846,
                    951,
                    2235,
                    705,
                    2245,
                    1354,
                    715,
                    1995,
                    853,
                    1494,
                    1246,
                    2271,
                    1125,
                    1383,
                    2030,
                    882,
                    2164,
                    2167,
                    2042,
                    895
                ],
                "keyidx": [
                    716,
                    721,
                    725,
                    731,
                    732
                ],
                "keyidx.append": [
                    721,
                    731,
                    725
                ],
                "is_setter": [
                    730,
                    722,
                    2036
                ],
                "idx": [
                    1667,
                    1668,
                    1548,
                    1549,
                    1553,
                    1942,
                    1949,
                    1950,
                    1958,
                    1960,
                    1963,
                    2107,
                    2109,
                    1601,
                    2119,
                    2121,
                    1874,
                    730,
                    731,
                    1761,
                    1762,
                    1901,
                    1905,
                    1906,
                    1908
                ],
                "retval": [
                    749,
                    746,
                    741,
                    751
                ],
                "com.is_null_slice": [
                    801,
                    834,
                    1667,
                    1761,
                    1541,
                    743,
                    1874,
                    1906
                ],
                "_getitem_axis": [
                    746,
                    839
                ],
                "getattr": [
                    804,
                    839,
                    746,
                    1683,
                    1236
                ],
                "retval.ndim": [
                    749
                ],
                "self._getitem_axis": [
                    826,
                    780,
                    758,
                    871
                ],
                "self._is_nested_tuple_indexer": [
                    761
                ],
                "self._getitem_nested_tuple": [
                    762
                ],
                "ax0": [
                    768,
                    765
                ],
                "result": [
                    769,
                    770,
                    771,
                    2154,
                    2156,
                    2157,
                    819,
                    820,
                    821,
                    2164,
                    2167,
                    2168,
                    2170,
                    2172
                ],
                "self._handle_lowerdim_multi_index_axis0": [
                    769,
                    819
                ],
                "len": [
                    1538,
                    1283,
                    1667,
                    773,
                    1157,
                    1799,
                    1923,
                    1418,
                    1814,
                    796,
                    1567,
                    927,
                    1825,
                    1065,
                    1838,
                    815,
                    1712,
                    1593,
                    1723,
                    1724,
                    1342,
                    1731,
                    1349,
                    1737,
                    1758,
                    1376,
                    1635,
                    2019,
                    1895,
                    1896,
                    1642,
                    1647,
                    1393,
                    1913,
                    1276
                ],
                "is_label_like": [
                    777
                ],
                "section": [
                    785,
                    802,
                    780,
                    804
                ],
                "section.ndim": [
                    785
                ],
                "new_key": [
                    801,
                    804,
                    788,
                    794,
                    796,
                    797
                ],
                "obj": [
                    2107,
                    830,
                    2114,
                    838,
                    839,
                    843,
                    2252,
                    1485,
                    2253,
                    2254,
                    848,
                    1488,
                    1490,
                    851,
                    1109,
                    1878,
                    1111,
                    1113,
                    1892,
                    1902
                ],
                "current_ndim": [
                    848,
                    838
                ],
                "obj.ndim": [
                    848,
                    838
                ],
                "is_scalar": [
                    931,
                    2051,
                    1927,
                    1725,
                    843,
                    2060,
                    1149
                ],
                "hasattr": [
                    1088,
                    843,
                    1319
                ],
                "self._is_scalar_access": [
                    859
                ],
                "self.obj._get_value": [
                    2008,
                    861
                ],
                "self._takeable": [
                    2008,
                    861,
                    2023
                ],
                "IndexError": [
                    1377,
                    1346,
                    1379,
                    1350,
                    1420,
                    1453,
                    1455,
                    1364,
                    862
                ],
                "AttributeError": [
                    862
                ],
                "self._getitem_tuple": [
                    865
                ],
                "maybe_callable": [
                    870,
                    871
                ],
                "NotImplementedError": [
                    880,
                    1321,
                    874,
                    2122
                ],
                "labels": [
                    1154,
                    1156,
                    1157,
                    1175,
                    1176,
                    1688,
                    1181,
                    1189,
                    1075,
                    1076,
                    2230,
                    1593,
                    1594,
                    1723,
                    1086,
                    1598,
                    1094,
                    1095,
                    1490,
                    1491,
                    1113,
                    1114,
                    1630,
                    1642,
                    887,
                    1140,
                    1143,
                    888,
                    1146,
                    1149
                ],
                "check_bool_indexer": [
                    888,
                    1181
                ],
                "inds": [
                    889,
                    890,
                    1182,
                    1183
                ],
                "key.nonzero": [
                    889,
                    1182
                ],
                "self.obj._take_with_is_copy": [
                    890,
                    1452
                ],
                "_LocationIndexer": [
                    905,
                    1307,
                    894
                ],
                "_takeable": [
                    1312,
                    2028,
                    2071,
                    895
                ],
                "doc": [
                    905,
                    2026,
                    2069,
                    1306,
                    893
                ],
                "_LocationIndexer._validate_key": [
                    905
                ],
                "ax._supports_partial_string_indexing": [
                    938
                ],
                "ax.is_unique": [
                    1236,
                    943
                ],
                "d": [
                    995,
                    999
                ],
                "self._get_listlike_indexer": [
                    1186,
                    996,
                    1029
                ],
                "zip": [
                    1539,
                    997,
                    1743,
                    1368,
                    2077
                ],
                "self.obj._AXIS_ORDERS": [
                    997
                ],
                "self.obj._reindex_with_indexers": [
                    1030,
                    999
                ],
                "keyarr": [
                    1029,
                    1031,
                    1228,
                    1232,
                    1237,
                    1238,
                    1240,
                    1242,
                    1243
                ],
                "self._getitem_lowerdim": [
                    1428,
                    1036
                ],
                "self._has_valid_tuple": [
                    1041,
                    1426
                ],
                "self._multi_take_opportunity": [
                    1044
                ],
                "self._multi_take": [
                    1045
                ],
                "self._getitem_tuple_same_dim": [
                    1432,
                    1047
                ],
                "self.obj.xs": [
                    1051
                ],
                "label": [
                    1051
                ],
                "self._get_label": [
                    1058,
                    1102
                ],
                "self.obj.index.nlevels": [
                    1065
                ],
                "self.obj.index": [
                    1731,
                    1798,
                    1639,
                    1065,
                    1967,
                    2045
                ],
                "ek": [
                    1066
                ],
                "item_from_zerodim": [
                    1474,
                    1071
                ],
                "is_iterator": [
                    1072
                ],
                "labels._get_partial_string_timestamp_match_key": [
                    1076
                ],
                "self._get_slice_axis": [
                    1080,
                    1459
                ],
                "self._getbool_axis": [
                    1466,
                    1082
                ],
                "key.ndim": [
                    1088
                ],
                "self._getitem_iterable": [
                    1091
                ],
                "locs": [
                    1097,
                    1095
                ],
                "labels.get_locs": [
                    1176,
                    1095
                ],
                "need_slice": [
                    1110,
                    1487
                ],
                "slice_obj": [
                    1487,
                    1491,
                    1492,
                    1110,
                    1115
                ],
                "obj.copy": [
                    1488,
                    1111
                ],
                "obj._get_axis": [
                    1113,
                    1490
                ],
                "labels.slice_indexer": [
                    1114
                ],
                "slice_obj.start": [
                    1115
                ],
                "slice_obj.stop": [
                    1115
                ],
                "slice_obj.step": [
                    1115
                ],
                "self.obj._slice": [
                    1492,
                    1119
                ],
                "self.obj.take": [
                    1123
                ],
                "labels._convert_slice_indexer": [
                    1143
                ],
                "is_int_index": [
                    1146,
                    1147
                ],
                "labels.is_integer": [
                    1146
                ],
                "is_int_positional": [
                    1147,
                    1163,
                    1167
                ],
                "is_integer": [
                    1475,
                    1541,
                    1759,
                    1397,
                    1334,
                    1147,
                    1628,
                    2078,
                    1375
                ],
                "labels.get_loc": [
                    1154,
                    1189,
                    1598
                ],
                "LookupError": [
                    1155,
                    1190
                ],
                "labels.nlevels": [
                    1157
                ],
                "ax._convert_listlike_indexer": [
                    1228
                ],
                "self._validate_read_indexer": [
                    1242,
                    1231
                ],
                "raise_missing": [
                    1232,
                    1289,
                    1242
                ],
                "ax.get_indexer_for": [
                    1237
                ],
                "ax.reindex": [
                    1238
                ],
                "new_indexer": [
                    1581,
                    1808,
                    1584,
                    1809,
                    1810,
                    1240
                ],
                "ax._reindex_non_unique": [
                    1240
                ],
                "missing": [
                    1280,
                    1282,
                    1283,
                    1606,
                    1608
                ],
                "sum": [
                    1280,
                    1875
                ],
                "axis_name": [
                    1284,
                    1285
                ],
                "self.obj._get_axis_name": [
                    1284
                ],
                "not_found": [
                    1290,
                    1291
                ],
                "set": [
                    1290
                ],
                "ax.is_categorical": [
                    1298
                ],
                "IndexingMixin.loc": [
                    893
                ],
                "IndexingMixin": [
                    1306,
                    2069,
                    2026,
                    893
                ],
                "key.index": [
                    1320,
                    2155,
                    1319
                ],
                "Index": [
                    2209,
                    1635,
                    1863,
                    1319,
                    2128,
                    1910,
                    1912,
                    2267
                ],
                "key.index.inferred_type": [
                    1320
                ],
                "self._validate_integer": [
                    1479,
                    1335
                ],
                "arr": [
                    1345,
                    1346,
                    1349,
                    1341
                ],
                "np.array": [
                    1341,
                    1711
                ],
                "len_axis": [
                    1418,
                    1419,
                    1349,
                    1342
                ],
                "is_numeric_dtype": [
                    1345
                ],
                "arr.dtype": [
                    1345
                ],
                "arr.max": [
                    1349
                ],
                "arr.min": [
                    1349
                ],
                "dict": [
                    1378,
                    2180,
                    1772,
                    1549,
                    1363,
                    2198,
                    1532
                ],
                "_tuplify": [
                    2018,
                    1622,
                    1367
                ],
                "np.asarray": [
                    1462,
                    2167
                ],
                "self._get_list_axis": [
                    1470
                ],
                "self.obj._ixs": [
                    1481,
                    1659
                ],
                "labels._validate_positional_slice": [
                    1491
                ],
                "info_axis": [
                    1763,
                    1767,
                    1613,
                    1758,
                    1522,
                    1619,
                    1560,
                    1627,
                    1694,
                    1759
                ],
                "self.obj._info_axis_number": [
                    1522
                ],
                "take_split_path": [
                    1543,
                    1616,
                    1525,
                    1529,
                    1533
                ],
                "self.obj._is_mixed_type": [
                    1525
                ],
                "self.obj._mgr.blocks": [
                    1529,
                    1530
                ],
                "self.obj._mgr": [
                    1786,
                    1843,
                    1594,
                    1529,
                    1530,
                    1818
                ],
                "blk": [
                    1530,
                    1531,
                    1533
                ],
                "blk.ndim": [
                    1531
                ],
                "val": [
                    1984,
                    1985,
                    1961,
                    1963,
                    1964,
                    1969,
                    1532,
                    1533
                ],
                "value.values": [
                    1532
                ],
                "blk._can_hold_element": [
                    1533
                ],
                "nindexer": [
                    1601,
                    1603,
                    1547,
                    1598
                ],
                "_": [
                    1553,
                    2098,
                    1891
                ],
                "convert_missing_indexer": [
                    1553,
                    1606
                ],
                "len_non_info_axes": [
                    1569,
                    1566
                ],
                "_ax": [
                    1567
                ],
                "_i": [
                    2200,
                    2198,
                    1567
                ],
                "l": [
                    1569
                ],
                "_infer_fill_value": [
                    1579
                ],
                "convert_from_missing_indexer_tuple": [
                    1581
                ],
                "self._setitem_with_indexer": [
                    1584,
                    1810
                ],
                "index": [
                    1798,
                    1799,
                    2155,
                    2156,
                    1807,
                    1808,
                    1592,
                    1593,
                    2170,
                    2168
                ],
                "index.insert": [
                    1593,
                    1799
                ],
                "_mgr": [
                    1843,
                    1594,
                    1818
                ],
                "self.obj.reindex": [
                    1594
                ],
                "self.obj._maybe_update_cacher": [
                    1595,
                    1844,
                    1821,
                    1787
                ],
                "self.obj._is_copy": [
                    1596
                ],
                "nindexer.append": [
                    1601,
                    1598
                ],
                "self._setitem_with_indexer_missing": [
                    1609
                ],
                "item_labels": [
                    1765,
                    1767,
                    1613,
                    1692,
                    1630
                ],
                "ABCSeries": [
                    2209,
                    1829,
                    2155,
                    1772,
                    1846,
                    1624,
                    2267
                ],
                "self._align_series": [
                    1776,
                    1625,
                    1695
                ],
                "info_idx": [
                    1633,
                    1634,
                    1636,
                    1627,
                    1628,
                    1629,
                    1630
                ],
                "ilocs": [
                    1633,
                    1729,
                    1636,
                    1737,
                    1743,
                    1712,
                    1748,
                    1718,
                    1691
                ],
                "ri": [
                    1635,
                    1636
                ],
                "plane_indexer": [
                    1725,
                    1655,
                    1638,
                    1639
                ],
                "lplane_indexer": [
                    1731,
                    1639,
                    1647,
                    1655,
                    1724
                ],
                "length_of_indexer": [
                    1639
                ],
                "pi": [
                    1666,
                    1675,
                    1668,
                    1655
                ],
                "ser": [
                    1923,
                    1924,
                    1925,
                    1670,
                    1673,
                    1674,
                    1675,
                    1676,
                    1930,
                    1931,
                    1679,
                    1933,
                    1892,
                    1897,
                    1899,
                    1913,
                    1914,
                    1659,
                    1916
                ],
                "loc": [
                    1701,
                    1691,
                    1679,
                    1743,
                    1744,
                    2099,
                    1748,
                    1749,
                    1718,
                    1720,
                    1659,
                    1692
                ],
                "com.is_full_slice": [
                    1667
                ],
                "v": [
                    1699,
                    1701,
                    1670,
                    1675,
                    1743,
                    1744,
                    1695
                ],
                "ser._consolidate_inplace": [
                    1673
                ],
                "ser.copy": [
                    1674
                ],
                "ser._mgr": [
                    1675
                ],
                "ser._mgr.setitem": [
                    1675
                ],
                "ser._maybe_update_cacher": [
                    1676
                ],
                "self.obj._iset_item": [
                    1679
                ],
                "ABCDataFrame": [
                    1937,
                    1778,
                    1686
                ],
                "sub_indexer": [
                    1696,
                    1694,
                    1687
                ],
                "multiindex_indexer": [
                    1688,
                    1696,
                    1895
                ],
                "item": [
                    1696,
                    1692,
                    1693,
                    1694
                ],
                "isetter": [
                    1729,
                    1701,
                    1744,
                    1749,
                    1720
                ],
                "np.ndim": [
                    1707
                ],
                "object": [
                    1711
                ],
                "value.shape": [
                    1712
                ],
                "tolist": [
                    1720
                ],
                "item_labels.is_unique": [
                    1765
                ],
                "maybe_convert_ix": [
                    1770
                ],
                "Series": [
                    1776,
                    1841,
                    1813
                ],
                "self._align_frame": [
                    1779
                ],
                "self.obj._check_is_chained_assignment_possible": [
                    1782
                ],
                "self.obj._consolidate_inplace": [
                    1785
                ],
                "self.obj._mgr.setitem": [
                    1786
                ],
                "new_index": [
                    1808,
                    1819,
                    1799
                ],
                "index.is_unique": [
                    1807
                ],
                "index.get_indexer": [
                    1808
                ],
                "new_values": [
                    1817,
                    1819,
                    1813
                ],
                "_values": [
                    1984,
                    1892,
                    1925,
                    1961,
                    1963,
                    1933,
                    1969,
                    2164,
                    1813,
                    1916
                ],
                "self.obj._values": [
                    1817,
                    1814
                ],
                "concat_compat": [
                    1817
                ],
                "self.obj._constructor": [
                    1818
                ],
                "self.obj.name": [
                    1819
                ],
                "value.reindex": [
                    1831
                ],
                "value.name": [
                    1832
                ],
                "self.obj.append": [
                    1843
                ],
                "np.ndarray": [
                    2209,
                    1863,
                    1870,
                    2267,
                    2128,
                    1947
                ],
                "i.ravel": [
                    1870
                ],
                "map": [
                    1872
                ],
                "ravel": [
                    1872
                ],
                "aligners": [
                    1874,
                    1875,
                    1887
                ],
                "sum_aligners": [
                    1891,
                    1875,
                    1876
                ],
                "single_aligner": [
                    1906,
                    1876,
                    1919,
                    1887
                ],
                "is_frame": [
                    1938,
                    1966,
                    1877,
                    1886
                ],
                "is_sequence": [
                    1905,
                    1946,
                    1891
                ],
                "ser.reindex": [
                    1916,
                    1892,
                    1925,
                    1933
                ],
                "obj.axes": [
                    1892,
                    1902
                ],
                "len_indexer": [
                    1896,
                    1897
                ],
                "T": [
                    1897
                ],
                "reshape": [
                    1897
                ],
                "np.tile": [
                    1897
                ],
                "new_ix": [
                    1908,
                    1909,
                    1910,
                    1912,
                    1913,
                    1916
                ],
                "ser.index.equals": [
                    1913,
                    1930,
                    1923
                ],
                "ser.index": [
                    1913,
                    1930,
                    1923
                ],
                "ser._values.copy": [
                    1914,
                    1931,
                    1924
                ],
                "ser._values": [
                    1914,
                    1931,
                    1924
                ],
                "cols": [
                    1952,
                    1958,
                    1960,
                    1963,
                    1942,
                    1951
                ],
                "sindexers": [
                    1956,
                    1943
                ],
                "ix": [
                    1952,
                    1944,
                    1946,
                    1947,
                    1948,
                    1950
                ],
                "ix.ravel": [
                    1948
                ],
                "sindexers.append": [
                    1956
                ],
                "df.index.equals": [
                    1960,
                    1968
                ],
                "df.index": [
                    1960,
                    1976,
                    1977,
                    1968
                ],
                "df": [
                    1984,
                    2306,
                    1960,
                    1961,
                    1963,
                    1968,
                    1969,
                    1976,
                    1977
                ],
                "df.columns.equals": [
                    1960
                ],
                "df.columns": [
                    1960
                ],
                "df.copy": [
                    1961,
                    1969
                ],
                "df.reindex": [
                    1984,
                    1963
                ],
                "ax.nlevels": [
                    1977
                ],
                "df.index.nlevels": [
                    1977
                ],
                "IndexingMixin.iloc": [
                    1306
                ],
                "self._convert_key": [
                    2022,
                    2007
                ],
                "self.obj._set_value": [
                    2023
                ],
                "_ScalarAccessIndexer": [
                    2027,
                    2070
                ],
                "self.obj.index.is_unique": [
                    2045
                ],
                "self.obj.columns.is_unique": [
                    2045
                ],
                "self._axes_are_unique": [
                    2049,
                    2058
                ],
                "self.obj.loc": [
                    2053,
                    2063
                ],
                "__getitem__": [
                    2055
                ],
                "super": [
                    2066,
                    2055
                ],
                "__setitem__": [
                    2066
                ],
                "IndexingMixin.at": [
                    2026
                ],
                "a": [
                    2077
                ],
                "IndexingMixin.iat": [
                    2069
                ],
                "Hashable": [
                    2097,
                    2083
                ],
                "_tup": [
                    2097,
                    2098,
                    2099,
                    2100
                ],
                "List": [
                    2097
                ],
                "Union": [
                    2097,
                    2083
                ],
                "ndim": [
                    2098
                ],
                "obj.index": [
                    2107
                ],
                "idx._convert_slice_indexer": [
                    2109
                ],
                "obj.columns": [
                    2114
                ],
                "idx._supports_partial_string_indexing": [
                    2119
                ],
                "idx._get_string_slice": [
                    2121
                ],
                "key.index.equals": [
                    2155
                ],
                "result.reindex": [
                    2156
                ],
                "mask": [
                    2157,
                    2158
                ],
                "isna": [
                    2157
                ],
                "result._values": [
                    2157
                ],
                "mask.any": [
                    2158
                ],
                "result.astype": [
                    2164
                ],
                "is_object_dtype": [
                    2165
                ],
                "check_array_indexer": [
                    2168,
                    2170
                ],
                "_idx": [
                    2200,
                    2198
                ],
                "get_loc": [
                    2198
                ],
                "axes": [
                    2198
                ],
                "get_indexer": [
                    2200
                ],
                "ixify": [
                    2210,
                    2212,
                    2207
                ],
                "args": [
                    2208,
                    2213,
                    2215
                ],
                "np.ix_": [
                    2213
                ],
                "is_list_like": [
                    2285,
                    2281,
                    2229
                ],
                "obj.start": [
                    2252
                ],
                "obj.stop": [
                    2253
                ],
                "obj.step": [
                    2254
                ],
                "kinds": [
                    2267,
                    2268
                ],
                "slice_": [
                    2306,
                    2307,
                    2285,
                    2286,
                    2288,
                    2291,
                    2293,
                    2294,
                    2268,
                    2269,
                    2302
                ],
                "part": [
                    2281,
                    2282,
                    2293
                ],
                "pred": [
                    2293
                ],
                "dtypes": [
                    2305,
                    2306,
                    2303
                ],
                "np.number": [
                    2303
                ],
                "include_bool": [
                    2304
                ],
                "dtypes.append": [
                    2305
                ],
                "columns": [
                    2306
                ],
                "df.select_dtypes": [
                    2306
                ]
            },
            "filtered_variables_in_file": {
                "TYPE_CHECKING": [
                    32
                ],
                "_NS": [
                    36,
                    788
                ],
                "arg": [
                    2208,
                    81,
                    2209
                ],
                "IndexSlice": [
                    2306,
                    84,
                    2269
                ],
                "_IndexSlice": [
                    84
                ],
                "_iLocIndexer": [
                    231
                ],
                "self": [
                    2049,
                    1026,
                    1538,
                    1539,
                    1029,
                    1030,
                    2053,
                    520,
                    2058,
                    1036,
                    2063,
                    1041,
                    1044,
                    1045,
                    1047,
                    1560,
                    1051,
                    2077,
                    1055,
                    1567,
                    1058,
                    1575,
                    1065,
                    1579,
                    1582,
                    1584,
                    1075,
                    1079,
                    568,
                    1080,
                    1082,
                    1592,
                    1594,
                    1595,
                    1596,
                    577,
                    1091,
                    580,
                    1096,
                    1609,
                    1098,
                    588,
                    589,
                    1101,
                    591,
                    592,
                    1102,
                    594,
                    1613,
                    596,
                    1109,
                    1618,
                    1622,
                    1625,
                    605,
                    1119,
                    1123,
                    1635,
                    613,
                    1639,
                    1140,
                    1659,
                    637,
                    1667,
                    648,
                    654,
                    655,
                    1679,
                    659,
                    661,
                    662,
                    663,
                    665,
                    1695,
                    1186,
                    688,
                    695,
                    698,
                    702,
                    1731,
                    711,
                    712,
                    1224,
                    717,
                    718,
                    719,
                    1231,
                    722,
                    728,
                    730,
                    1242,
                    741,
                    231,
                    1767,
                    746,
                    749,
                    1776,
                    1779,
                    756,
                    757,
                    758,
                    1782,
                    761,
                    762,
                    1274,
                    1785,
                    765,
                    1786,
                    1787,
                    768,
                    769,
                    1284,
                    773,
                    1797,
                    1798,
                    780,
                    785,
                    1810,
                    1814,
                    1817,
                    1818,
                    1819,
                    1821,
                    1823,
                    1825,
                    804,
                    1831,
                    1838,
                    815,
                    816,
                    1841,
                    819,
                    1843,
                    1844,
                    1335,
                    825,
                    826,
                    830,
                    1342,
                    839,
                    1352,
                    1877,
                    854,
                    1367,
                    1368,
                    1878,
                    858,
                    859,
                    861,
                    865,
                    1891,
                    868,
                    870,
                    871,
                    877,
                    1393,
                    883,
                    887,
                    890,
                    1922,
                    1928,
                    1418,
                    1426,
                    1938,
                    1428,
                    1432,
                    1945,
                    927,
                    934,
                    1452,
                    1967,
                    1459,
                    1465,
                    1466,
                    1470,
                    1479,
                    1481,
                    1996,
                    1485,
                    1492,
                    471,
                    2007,
                    2008,
                    2012,
                    2015,
                    2018,
                    2019,
                    996,
                    997,
                    2022,
                    999,
                    2023,
                    1522,
                    1525,
                    1529,
                    1530,
                    2044,
                    2045
                ],
                "_LocIndexer": [
                    471
                ],
                "_AtIndexer": [
                    520
                ],
                "_iAtIndexer": [
                    568
                ],
                "_NDFrameIndexerBase": [
                    571,
                    1990
                ],
                "_valid_types": [
                    896,
                    572,
                    1308
                ],
                "axis": [
                    1026,
                    644,
                    1029,
                    1284,
                    647,
                    1031,
                    1274,
                    1418,
                    1051,
                    1481,
                    1055,
                    1058,
                    1186,
                    1452,
                    1075,
                    1459,
                    1079,
                    1080,
                    825,
                    826,
                    1082,
                    1335,
                    573,
                    1342,
                    831,
                    1465,
                    1466,
                    1470,
                    579,
                    580,
                    581,
                    835,
                    839,
                    840,
                    1091,
                    1097,
                    1224,
                    1479,
                    1101,
                    718,
                    1102,
                    720,
                    849,
                    722,
                    1232,
                    1490,
                    1492,
                    1113,
                    1242,
                    1119,
                    1123,
                    868,
                    996,
                    997,
                    871,
                    1140,
                    757,
                    758,
                    887,
                    890
                ],
                "new_self": [
                    577,
                    581,
                    582
                ],
                "self.name": [
                    768,
                    577,
                    804,
                    839,
                    746,
                    588,
                    816,
                    596,
                    665
                ],
                "self.obj": [
                    1538,
                    1539,
                    2053,
                    1030,
                    2063,
                    1051,
                    2077,
                    1567,
                    1575,
                    1065,
                    1579,
                    1582,
                    1075,
                    1592,
                    1594,
                    1595,
                    1596,
                    577,
                    580,
                    1098,
                    1613,
                    594,
                    1109,
                    1119,
                    1123,
                    1635,
                    1639,
                    1140,
                    1659,
                    1667,
                    648,
                    654,
                    655,
                    1679,
                    659,
                    661,
                    665,
                    1731,
                    711,
                    712,
                    1224,
                    718,
                    741,
                    1767,
                    757,
                    1782,
                    1785,
                    1274,
                    1786,
                    1787,
                    765,
                    1284,
                    1798,
                    1814,
                    1817,
                    1818,
                    1819,
                    1821,
                    1825,
                    1831,
                    1838,
                    1841,
                    1843,
                    1844,
                    830,
                    1342,
                    1878,
                    1368,
                    858,
                    861,
                    870,
                    887,
                    890,
                    1922,
                    1928,
                    1418,
                    1945,
                    934,
                    1452,
                    1967,
                    1481,
                    1485,
                    1492,
                    2008,
                    2012,
                    2015,
                    997,
                    999,
                    2023,
                    1522,
                    1525,
                    1529,
                    1530,
                    2045
                ],
                "self.obj._get_axis_number": [
                    580,
                    757,
                    718
                ],
                "new_self.axis": [
                    581
                ],
                "self._ensure_listlike_indexer": [
                    589
                ],
                "key": [
                    1026,
                    2051,
                    1029,
                    2053,
                    2055,
                    2060,
                    2063,
                    1553,
                    2066,
                    2077,
                    2080,
                    1575,
                    1579,
                    1071,
                    1072,
                    1073,
                    1076,
                    1078,
                    1079,
                    1080,
                    1081,
                    1082,
                    1083,
                    1593,
                    2108,
                    1086,
                    1598,
                    1088,
                    2109,
                    2111,
                    1091,
                    2114,
                    1094,
                    1095,
                    2121,
                    589,
                    1101,
                    1102,
                    592,
                    598,
                    603,
                    605,
                    609,
                    610,
                    613,
                    2154,
                    2155,
                    621,
                    2165,
                    1142,
                    1143,
                    1147,
                    1149,
                    640,
                    1154,
                    643,
                    1156,
                    1157,
                    1158,
                    649,
                    650,
                    651,
                    653,
                    658,
                    659,
                    661,
                    662,
                    663,
                    1173,
                    1175,
                    1176,
                    1178,
                    1180,
                    1181,
                    1182,
                    1186,
                    1189,
                    1192,
                    1193,
                    694,
                    2242,
                    1228,
                    722,
                    727,
                    742,
                    743,
                    746,
                    1276,
                    1285,
                    776,
                    777,
                    1290,
                    780,
                    1318,
                    1319,
                    1320,
                    1332,
                    1334,
                    1335,
                    1336,
                    1340,
                    1341,
                    832,
                    834,
                    839,
                    857,
                    858,
                    859,
                    861,
                    865,
                    870,
                    1393,
                    1396,
                    888,
                    889,
                    1419,
                    927,
                    930,
                    1452,
                    1458,
                    1459,
                    1461,
                    1462,
                    1464,
                    1465,
                    1466,
                    1469,
                    1470,
                    1474,
                    1475,
                    1479,
                    1481,
                    1999,
                    2002,
                    2003,
                    2007,
                    2008,
                    1498,
                    2011,
                    2012,
                    1502,
                    2015,
                    2017,
                    2018,
                    2019,
                    996,
                    997,
                    2022,
                    2023,
                    2037,
                    2039
                ],
                "self.axis": [
                    868,
                    717,
                    718,
                    591,
                    756,
                    757,
                    825,
                    1055
                ],
                "self._convert_tuple": [
                    592,
                    605
                ],
                "ax": [
                    1922,
                    1539,
                    1540,
                    1923,
                    1925,
                    1928,
                    1290,
                    1930,
                    1933,
                    1298,
                    1945,
                    1950,
                    1952,
                    934,
                    935,
                    938,
                    943,
                    1967,
                    1968,
                    1975,
                    1977,
                    1984,
                    711,
                    712,
                    1224,
                    1228,
                    594,
                    1234,
                    596,
                    1236,
                    598,
                    1237,
                    1238,
                    1240,
                    1368,
                    1376,
                    1902,
                    1908,
                    1274
                ],
                "self.obj._get_axis": [
                    1224,
                    1928,
                    1418,
                    1613,
                    594,
                    1075,
                    1140,
                    887,
                    1592,
                    1274,
                    765,
                    1342
                ],
                "ABCMultiIndex": [
                    768,
                    1156,
                    1540,
                    935,
                    648,
                    711,
                    596,
                    1976,
                    1975,
                    1688,
                    2230,
                    1149,
                    1086
                ],
                "ax.get_loc": [
                    598
                ],
                "InvalidIndexError": [
                    599
                ],
                "IndexingError": [
                    774,
                    806,
                    621,
                    1037,
                    2159,
                    1429,
                    696,
                    729,
                    1339,
                    606
                ],
                "self._convert_to_indexer": [
                    730,
                    722,
                    613
                ],
                "e": [
                    617,
                    619,
                    621
                ],
                "column_axis": [
                    634,
                    643,
                    644,
                    647
                ],
                "self.ndim": [
                    2049,
                    773,
                    1797,
                    2058,
                    785,
                    1938,
                    1560,
                    1823,
                    927,
                    1065,
                    815,
                    695,
                    1096,
                    719,
                    1618,
                    1877,
                    1622,
                    1367,
                    728,
                    2018,
                    1891,
                    2019,
                    749,
                    1393,
                    2044,
                    637
                ],
                "self.obj.columns": [
                    1825,
                    1635,
                    1831,
                    648,
                    1838,
                    1841,
                    2045
                ],
                "is_list_like_indexer": [
                    1570,
                    2242,
                    1192,
                    649,
                    969,
                    1836,
                    1966,
                    1647,
                    2002,
                    1683,
                    1909,
                    1372,
                    1178,
                    1083,
                    1340,
                    1469
                ],
                "com.is_bool_indexer": [
                    1318,
                    650,
                    973,
                    1464,
                    1081,
                    1180
                ],
                "com": [
                    1667,
                    1541,
                    650,
                    659,
                    661,
                    1180,
                    801,
                    1318,
                    1464,
                    1081,
                    834,
                    973,
                    1874,
                    858,
                    2012,
                    2015,
                    1761,
                    870,
                    743,
                    1906
                ],
                "is_hashable": [
                    651
                ],
                "k": [
                    930,
                    931,
                    938,
                    651,
                    653,
                    654,
                    655,
                    1396,
                    1397,
                    694,
                    727,
                    2228,
                    730,
                    698,
                    2229
                ],
                "np.nan": [
                    1699,
                    655
                ],
                "np": [
                    2209,
                    1699,
                    2213,
                    1863,
                    1897,
                    1707,
                    1870,
                    655,
                    1711,
                    2128,
                    2267,
                    1462,
                    2167,
                    1947,
                    1341,
                    2303
                ],
                "com.apply_if_callable": [
                    870,
                    659,
                    661,
                    858,
                    2012,
                    2015
                ],
                "x": [
                    2051,
                    969,
                    2060,
                    973,
                    659,
                    858,
                    2012
                ],
                "indexer": [
                    1280,
                    1538,
                    1283,
                    1539,
                    1029,
                    2180,
                    1031,
                    1799,
                    1927,
                    1546,
                    2183,
                    1548,
                    2185,
                    2187,
                    2189,
                    1940,
                    662,
                    1687,
                    1944,
                    2200,
                    666,
                    1832,
                    1582,
                    1966,
                    1967,
                    1841,
                    1603,
                    1606,
                    1863,
                    1096,
                    1097,
                    1098,
                    1609,
                    1228,
                    1864,
                    1230,
                    1866,
                    1232,
                    1872,
                    1234,
                    1363,
                    1874,
                    1237,
                    1366,
                    1367,
                    1240,
                    1368,
                    1114,
                    1242,
                    1243,
                    1621,
                    1118,
                    1119,
                    1625,
                    1622,
                    1627,
                    1123,
                    1758,
                    1759,
                    1638,
                    1762,
                    1767,
                    1891,
                    1770,
                    1892,
                    1895,
                    1896,
                    1901,
                    1752,
                    1776,
                    1779,
                    1786
                ],
                "self._get_setitem_indexer": [
                    662
                ],
                "self._has_valid_setitem_indexer": [
                    663
                ],
                "iloc": [
                    665,
                    666
                ],
                "self.obj.iloc": [
                    665,
                    1098
                ],
                "iloc._setitem_with_indexer": [
                    666
                ],
                "value": [
                    2063,
                    1810,
                    1683,
                    2066,
                    1813,
                    1686,
                    666,
                    1693,
                    1696,
                    1570,
                    1829,
                    1575,
                    1831,
                    1832,
                    1579,
                    1707,
                    1836,
                    1838,
                    1711,
                    1584,
                    1712,
                    1841,
                    1843,
                    1720,
                    1724,
                    1729,
                    1731,
                    1609,
                    1737,
                    1743,
                    1749,
                    1624,
                    1625,
                    1767,
                    2023,
                    1772,
                    1647,
                    1776,
                    1778,
                    1779,
                    1786,
                    1532
                ],
                "AbstractMethodError": [
                    1996,
                    877,
                    688,
                    883,
                    854
                ],
                "Tuple": [
                    705,
                    2083,
                    1383,
                    808,
                    873,
                    1034,
                    876,
                    1424,
                    753,
                    690,
                    978,
                    917,
                    951,
                    1053,
                    734
                ],
                "i": [
                    1539,
                    1541,
                    776,
                    780,
                    1548,
                    788,
                    1560,
                    1944,
                    794,
                    1945,
                    2077,
                    2078,
                    1567,
                    930,
                    1956,
                    934,
                    694,
                    695,
                    1592,
                    1718,
                    698,
                    1594,
                    1720,
                    1870,
                    719,
                    720,
                    727,
                    1368,
                    1369,
                    728,
                    730,
                    1372,
                    1375,
                    1376,
                    1378,
                    1762,
                    1763,
                    742,
                    746,
                    1901,
                    1902
                ],
                "self._validate_key": [
                    1026,
                    1101,
                    1079,
                    1465,
                    698
                ],
                "self._valid_types": [
                    1352,
                    702
                ],
                "err": [
                    1455,
                    703
                ],
                "self.obj.axes": [
                    1538,
                    1539,
                    1922,
                    934,
                    711,
                    712,
                    1582,
                    1368,
                    1945,
                    2077,
                    1567
                ],
                "is_nested_tuple": [
                    712,
                    1094,
                    1175
                ],
                "tup": [
                    769,
                    773,
                    776,
                    1036,
                    1041,
                    1426,
                    788,
                    1044,
                    1045,
                    1047,
                    1428,
                    1432,
                    794,
                    1058,
                    1065,
                    815,
                    2225,
                    819,
                    2228,
                    826,
                    832,
                    712,
                    969,
                    973,
                    997,
                    742,
                    758,
                    761,
                    762
                ],
                "keyidx": [
                    716,
                    721,
                    725,
                    731,
                    732
                ],
                "keyidx.append": [
                    721,
                    731,
                    725
                ],
                "is_setter": [
                    730,
                    722,
                    2036
                ],
                "idx": [
                    1667,
                    1668,
                    1548,
                    1549,
                    1553,
                    1942,
                    1949,
                    1950,
                    1958,
                    1960,
                    1963,
                    2107,
                    2109,
                    1601,
                    2119,
                    2121,
                    1874,
                    730,
                    731,
                    1761,
                    1762,
                    1901,
                    1905,
                    1906,
                    1908
                ],
                "retval": [
                    749,
                    746,
                    741,
                    751
                ],
                "com.is_null_slice": [
                    801,
                    834,
                    1667,
                    1761,
                    1541,
                    743,
                    1874,
                    1906
                ],
                "_getitem_axis": [
                    746,
                    839
                ],
                "retval.ndim": [
                    749
                ],
                "self._getitem_axis": [
                    826,
                    780,
                    758,
                    871
                ],
                "self._is_nested_tuple_indexer": [
                    761
                ],
                "self._getitem_nested_tuple": [
                    762
                ],
                "ax0": [
                    768,
                    765
                ],
                "result": [
                    769,
                    770,
                    771,
                    2154,
                    2156,
                    2157,
                    819,
                    820,
                    821,
                    2164,
                    2167,
                    2168,
                    2170,
                    2172
                ],
                "self._handle_lowerdim_multi_index_axis0": [
                    769,
                    819
                ],
                "is_label_like": [
                    777
                ],
                "section": [
                    785,
                    802,
                    780,
                    804
                ],
                "section.ndim": [
                    785
                ],
                "new_key": [
                    801,
                    804,
                    788,
                    794,
                    796,
                    797
                ],
                "obj": [
                    2107,
                    830,
                    2114,
                    838,
                    839,
                    843,
                    2252,
                    1485,
                    2253,
                    2254,
                    848,
                    1488,
                    1490,
                    851,
                    1109,
                    1878,
                    1111,
                    1113,
                    1892,
                    1902
                ],
                "current_ndim": [
                    848,
                    838
                ],
                "obj.ndim": [
                    848,
                    838
                ],
                "is_scalar": [
                    931,
                    2051,
                    1927,
                    1725,
                    843,
                    2060,
                    1149
                ],
                "self._is_scalar_access": [
                    859
                ],
                "self.obj._get_value": [
                    2008,
                    861
                ],
                "self._takeable": [
                    2008,
                    861,
                    2023
                ],
                "self._getitem_tuple": [
                    865
                ],
                "maybe_callable": [
                    870,
                    871
                ],
                "labels": [
                    1154,
                    1156,
                    1157,
                    1175,
                    1176,
                    1688,
                    1181,
                    1189,
                    1075,
                    1076,
                    2230,
                    1593,
                    1594,
                    1723,
                    1086,
                    1598,
                    1094,
                    1095,
                    1490,
                    1491,
                    1113,
                    1114,
                    1630,
                    1642,
                    887,
                    1140,
                    1143,
                    888,
                    1146,
                    1149
                ],
                "check_bool_indexer": [
                    888,
                    1181
                ],
                "inds": [
                    889,
                    890,
                    1182,
                    1183
                ],
                "key.nonzero": [
                    889,
                    1182
                ],
                "self.obj._take_with_is_copy": [
                    890,
                    1452
                ],
                "_LocationIndexer": [
                    905,
                    1307,
                    894
                ],
                "_takeable": [
                    1312,
                    2028,
                    2071,
                    895
                ],
                "doc": [
                    905,
                    2026,
                    2069,
                    1306,
                    893
                ],
                "_LocationIndexer._validate_key": [
                    905
                ],
                "ax._supports_partial_string_indexing": [
                    938
                ],
                "ax.is_unique": [
                    1236,
                    943
                ],
                "d": [
                    995,
                    999
                ],
                "self._get_listlike_indexer": [
                    1186,
                    996,
                    1029
                ],
                "self.obj._AXIS_ORDERS": [
                    997
                ],
                "self.obj._reindex_with_indexers": [
                    1030,
                    999
                ],
                "keyarr": [
                    1029,
                    1031,
                    1228,
                    1232,
                    1237,
                    1238,
                    1240,
                    1242,
                    1243
                ],
                "self._getitem_lowerdim": [
                    1428,
                    1036
                ],
                "self._has_valid_tuple": [
                    1041,
                    1426
                ],
                "self._multi_take_opportunity": [
                    1044
                ],
                "self._multi_take": [
                    1045
                ],
                "self._getitem_tuple_same_dim": [
                    1432,
                    1047
                ],
                "self.obj.xs": [
                    1051
                ],
                "label": [
                    1051
                ],
                "self._get_label": [
                    1058,
                    1102
                ],
                "self.obj.index.nlevels": [
                    1065
                ],
                "self.obj.index": [
                    1731,
                    1798,
                    1639,
                    1065,
                    1967,
                    2045
                ],
                "ek": [
                    1066
                ],
                "item_from_zerodim": [
                    1474,
                    1071
                ],
                "is_iterator": [
                    1072
                ],
                "labels._get_partial_string_timestamp_match_key": [
                    1076
                ],
                "self._get_slice_axis": [
                    1080,
                    1459
                ],
                "self._getbool_axis": [
                    1466,
                    1082
                ],
                "key.ndim": [
                    1088
                ],
                "self._getitem_iterable": [
                    1091
                ],
                "locs": [
                    1097,
                    1095
                ],
                "labels.get_locs": [
                    1176,
                    1095
                ],
                "need_slice": [
                    1110,
                    1487
                ],
                "slice_obj": [
                    1487,
                    1491,
                    1492,
                    1110,
                    1115
                ],
                "obj.copy": [
                    1488,
                    1111
                ],
                "obj._get_axis": [
                    1113,
                    1490
                ],
                "labels.slice_indexer": [
                    1114
                ],
                "slice_obj.start": [
                    1115
                ],
                "slice_obj.stop": [
                    1115
                ],
                "slice_obj.step": [
                    1115
                ],
                "self.obj._slice": [
                    1492,
                    1119
                ],
                "self.obj.take": [
                    1123
                ],
                "labels._convert_slice_indexer": [
                    1143
                ],
                "is_int_index": [
                    1146,
                    1147
                ],
                "labels.is_integer": [
                    1146
                ],
                "is_int_positional": [
                    1147,
                    1163,
                    1167
                ],
                "is_integer": [
                    1475,
                    1541,
                    1759,
                    1397,
                    1334,
                    1147,
                    1628,
                    2078,
                    1375
                ],
                "labels.get_loc": [
                    1154,
                    1189,
                    1598
                ],
                "labels.nlevels": [
                    1157
                ],
                "ax._convert_listlike_indexer": [
                    1228
                ],
                "self._validate_read_indexer": [
                    1242,
                    1231
                ],
                "raise_missing": [
                    1232,
                    1289,
                    1242
                ],
                "ax.get_indexer_for": [
                    1237
                ],
                "ax.reindex": [
                    1238
                ],
                "new_indexer": [
                    1581,
                    1808,
                    1584,
                    1809,
                    1810,
                    1240
                ],
                "ax._reindex_non_unique": [
                    1240
                ],
                "missing": [
                    1280,
                    1282,
                    1283,
                    1606,
                    1608
                ],
                "axis_name": [
                    1284,
                    1285
                ],
                "self.obj._get_axis_name": [
                    1284
                ],
                "not_found": [
                    1290,
                    1291
                ],
                "ax.is_categorical": [
                    1298
                ],
                "IndexingMixin.loc": [
                    893
                ],
                "IndexingMixin": [
                    1306,
                    2069,
                    2026,
                    893
                ],
                "key.index": [
                    1320,
                    2155,
                    1319
                ],
                "Index": [
                    2209,
                    1635,
                    1863,
                    1319,
                    2128,
                    1910,
                    1912,
                    2267
                ],
                "key.index.inferred_type": [
                    1320
                ],
                "self._validate_integer": [
                    1479,
                    1335
                ],
                "arr": [
                    1345,
                    1346,
                    1349,
                    1341
                ],
                "np.array": [
                    1341,
                    1711
                ],
                "len_axis": [
                    1418,
                    1419,
                    1349,
                    1342
                ],
                "is_numeric_dtype": [
                    1345
                ],
                "arr.dtype": [
                    1345
                ],
                "arr.max": [
                    1349
                ],
                "arr.min": [
                    1349
                ],
                "_tuplify": [
                    2018,
                    1622,
                    1367
                ],
                "np.asarray": [
                    1462,
                    2167
                ],
                "self._get_list_axis": [
                    1470
                ],
                "self.obj._ixs": [
                    1481,
                    1659
                ],
                "labels._validate_positional_slice": [
                    1491
                ],
                "info_axis": [
                    1763,
                    1767,
                    1613,
                    1758,
                    1522,
                    1619,
                    1560,
                    1627,
                    1694,
                    1759
                ],
                "self.obj._info_axis_number": [
                    1522
                ],
                "take_split_path": [
                    1543,
                    1616,
                    1525,
                    1529,
                    1533
                ],
                "self.obj._is_mixed_type": [
                    1525
                ],
                "self.obj._mgr.blocks": [
                    1529,
                    1530
                ],
                "self.obj._mgr": [
                    1786,
                    1843,
                    1594,
                    1529,
                    1530,
                    1818
                ],
                "blk": [
                    1530,
                    1531,
                    1533
                ],
                "blk.ndim": [
                    1531
                ],
                "val": [
                    1984,
                    1985,
                    1961,
                    1963,
                    1964,
                    1969,
                    1532,
                    1533
                ],
                "value.values": [
                    1532
                ],
                "blk._can_hold_element": [
                    1533
                ],
                "nindexer": [
                    1601,
                    1603,
                    1547,
                    1598
                ],
                "_": [
                    1553,
                    2098,
                    1891
                ],
                "convert_missing_indexer": [
                    1553,
                    1606
                ],
                "len_non_info_axes": [
                    1569,
                    1566
                ],
                "_ax": [
                    1567
                ],
                "_i": [
                    2200,
                    2198,
                    1567
                ],
                "l": [
                    1569
                ],
                "_infer_fill_value": [
                    1579
                ],
                "convert_from_missing_indexer_tuple": [
                    1581
                ],
                "self._setitem_with_indexer": [
                    1584,
                    1810
                ],
                "index": [
                    1798,
                    1799,
                    2155,
                    2156,
                    1807,
                    1808,
                    1592,
                    1593,
                    2170,
                    2168
                ],
                "index.insert": [
                    1593,
                    1799
                ],
                "_mgr": [
                    1843,
                    1594,
                    1818
                ],
                "self.obj.reindex": [
                    1594
                ],
                "self.obj._maybe_update_cacher": [
                    1595,
                    1844,
                    1821,
                    1787
                ],
                "self.obj._is_copy": [
                    1596
                ],
                "nindexer.append": [
                    1601,
                    1598
                ],
                "self._setitem_with_indexer_missing": [
                    1609
                ],
                "item_labels": [
                    1765,
                    1767,
                    1613,
                    1692,
                    1630
                ],
                "ABCSeries": [
                    2209,
                    1829,
                    2155,
                    1772,
                    1846,
                    1624,
                    2267
                ],
                "self._align_series": [
                    1776,
                    1625,
                    1695
                ],
                "info_idx": [
                    1633,
                    1634,
                    1636,
                    1627,
                    1628,
                    1629,
                    1630
                ],
                "ilocs": [
                    1633,
                    1729,
                    1636,
                    1737,
                    1743,
                    1712,
                    1748,
                    1718,
                    1691
                ],
                "ri": [
                    1635,
                    1636
                ],
                "plane_indexer": [
                    1725,
                    1655,
                    1638,
                    1639
                ],
                "lplane_indexer": [
                    1731,
                    1639,
                    1647,
                    1655,
                    1724
                ],
                "length_of_indexer": [
                    1639
                ],
                "pi": [
                    1666,
                    1675,
                    1668,
                    1655
                ],
                "ser": [
                    1923,
                    1924,
                    1925,
                    1670,
                    1673,
                    1674,
                    1675,
                    1676,
                    1930,
                    1931,
                    1679,
                    1933,
                    1892,
                    1897,
                    1899,
                    1913,
                    1914,
                    1659,
                    1916
                ],
                "loc": [
                    1701,
                    1691,
                    1679,
                    1743,
                    1744,
                    2099,
                    1748,
                    1749,
                    1718,
                    1720,
                    1659,
                    1692
                ],
                "com.is_full_slice": [
                    1667
                ],
                "v": [
                    1699,
                    1701,
                    1670,
                    1675,
                    1743,
                    1744,
                    1695
                ],
                "ser._consolidate_inplace": [
                    1673
                ],
                "ser.copy": [
                    1674
                ],
                "ser._mgr": [
                    1675
                ],
                "ser._mgr.setitem": [
                    1675
                ],
                "ser._maybe_update_cacher": [
                    1676
                ],
                "self.obj._iset_item": [
                    1679
                ],
                "ABCDataFrame": [
                    1937,
                    1778,
                    1686
                ],
                "sub_indexer": [
                    1696,
                    1694,
                    1687
                ],
                "multiindex_indexer": [
                    1688,
                    1696,
                    1895
                ],
                "item": [
                    1696,
                    1692,
                    1693,
                    1694
                ],
                "isetter": [
                    1729,
                    1701,
                    1744,
                    1749,
                    1720
                ],
                "np.ndim": [
                    1707
                ],
                "value.shape": [
                    1712
                ],
                "tolist": [
                    1720
                ],
                "item_labels.is_unique": [
                    1765
                ],
                "maybe_convert_ix": [
                    1770
                ],
                "Series": [
                    1776,
                    1841,
                    1813
                ],
                "self._align_frame": [
                    1779
                ],
                "self.obj._check_is_chained_assignment_possible": [
                    1782
                ],
                "self.obj._consolidate_inplace": [
                    1785
                ],
                "self.obj._mgr.setitem": [
                    1786
                ],
                "new_index": [
                    1808,
                    1819,
                    1799
                ],
                "index.is_unique": [
                    1807
                ],
                "index.get_indexer": [
                    1808
                ],
                "new_values": [
                    1817,
                    1819,
                    1813
                ],
                "_values": [
                    1984,
                    1892,
                    1925,
                    1961,
                    1963,
                    1933,
                    1969,
                    2164,
                    1813,
                    1916
                ],
                "self.obj._values": [
                    1817,
                    1814
                ],
                "concat_compat": [
                    1817
                ],
                "self.obj._constructor": [
                    1818
                ],
                "self.obj.name": [
                    1819
                ],
                "value.reindex": [
                    1831
                ],
                "value.name": [
                    1832
                ],
                "self.obj.append": [
                    1843
                ],
                "np.ndarray": [
                    2209,
                    1863,
                    1870,
                    2267,
                    2128,
                    1947
                ],
                "i.ravel": [
                    1870
                ],
                "ravel": [
                    1872
                ],
                "aligners": [
                    1874,
                    1875,
                    1887
                ],
                "sum_aligners": [
                    1891,
                    1875,
                    1876
                ],
                "single_aligner": [
                    1906,
                    1876,
                    1919,
                    1887
                ],
                "is_frame": [
                    1938,
                    1966,
                    1877,
                    1886
                ],
                "is_sequence": [
                    1905,
                    1946,
                    1891
                ],
                "ser.reindex": [
                    1916,
                    1892,
                    1925,
                    1933
                ],
                "obj.axes": [
                    1892,
                    1902
                ],
                "len_indexer": [
                    1896,
                    1897
                ],
                "T": [
                    1897
                ],
                "reshape": [
                    1897
                ],
                "np.tile": [
                    1897
                ],
                "new_ix": [
                    1908,
                    1909,
                    1910,
                    1912,
                    1913,
                    1916
                ],
                "ser.index.equals": [
                    1913,
                    1930,
                    1923
                ],
                "ser.index": [
                    1913,
                    1930,
                    1923
                ],
                "ser._values.copy": [
                    1914,
                    1931,
                    1924
                ],
                "ser._values": [
                    1914,
                    1931,
                    1924
                ],
                "cols": [
                    1952,
                    1958,
                    1960,
                    1963,
                    1942,
                    1951
                ],
                "sindexers": [
                    1956,
                    1943
                ],
                "ix": [
                    1952,
                    1944,
                    1946,
                    1947,
                    1948,
                    1950
                ],
                "ix.ravel": [
                    1948
                ],
                "sindexers.append": [
                    1956
                ],
                "df.index.equals": [
                    1960,
                    1968
                ],
                "df.index": [
                    1960,
                    1976,
                    1977,
                    1968
                ],
                "df": [
                    1984,
                    2306,
                    1960,
                    1961,
                    1963,
                    1968,
                    1969,
                    1976,
                    1977
                ],
                "df.columns.equals": [
                    1960
                ],
                "df.columns": [
                    1960
                ],
                "df.copy": [
                    1961,
                    1969
                ],
                "df.reindex": [
                    1984,
                    1963
                ],
                "ax.nlevels": [
                    1977
                ],
                "df.index.nlevels": [
                    1977
                ],
                "IndexingMixin.iloc": [
                    1306
                ],
                "self._convert_key": [
                    2022,
                    2007
                ],
                "self.obj._set_value": [
                    2023
                ],
                "_ScalarAccessIndexer": [
                    2027,
                    2070
                ],
                "self.obj.index.is_unique": [
                    2045
                ],
                "self.obj.columns.is_unique": [
                    2045
                ],
                "self._axes_are_unique": [
                    2049,
                    2058
                ],
                "self.obj.loc": [
                    2053,
                    2063
                ],
                "__getitem__": [
                    2055
                ],
                "__setitem__": [
                    2066
                ],
                "IndexingMixin.at": [
                    2026
                ],
                "a": [
                    2077
                ],
                "IndexingMixin.iat": [
                    2069
                ],
                "Hashable": [
                    2097,
                    2083
                ],
                "_tup": [
                    2097,
                    2098,
                    2099,
                    2100
                ],
                "List": [
                    2097
                ],
                "Union": [
                    2097,
                    2083
                ],
                "ndim": [
                    2098
                ],
                "obj.index": [
                    2107
                ],
                "idx._convert_slice_indexer": [
                    2109
                ],
                "obj.columns": [
                    2114
                ],
                "idx._supports_partial_string_indexing": [
                    2119
                ],
                "idx._get_string_slice": [
                    2121
                ],
                "key.index.equals": [
                    2155
                ],
                "result.reindex": [
                    2156
                ],
                "mask": [
                    2157,
                    2158
                ],
                "isna": [
                    2157
                ],
                "result._values": [
                    2157
                ],
                "mask.any": [
                    2158
                ],
                "result.astype": [
                    2164
                ],
                "is_object_dtype": [
                    2165
                ],
                "check_array_indexer": [
                    2168,
                    2170
                ],
                "_idx": [
                    2200,
                    2198
                ],
                "get_loc": [
                    2198
                ],
                "axes": [
                    2198
                ],
                "get_indexer": [
                    2200
                ],
                "ixify": [
                    2210,
                    2212,
                    2207
                ],
                "args": [
                    2208,
                    2213,
                    2215
                ],
                "np.ix_": [
                    2213
                ],
                "is_list_like": [
                    2285,
                    2281,
                    2229
                ],
                "obj.start": [
                    2252
                ],
                "obj.stop": [
                    2253
                ],
                "obj.step": [
                    2254
                ],
                "kinds": [
                    2267,
                    2268
                ],
                "slice_": [
                    2306,
                    2307,
                    2285,
                    2286,
                    2288,
                    2291,
                    2293,
                    2294,
                    2268,
                    2269,
                    2302
                ],
                "part": [
                    2281,
                    2282,
                    2293
                ],
                "pred": [
                    2293
                ],
                "dtypes": [
                    2305,
                    2306,
                    2303
                ],
                "np.number": [
                    2303
                ],
                "include_bool": [
                    2304
                ],
                "dtypes.append": [
                    2305
                ],
                "columns": [
                    2306
                ],
                "df.select_dtypes": [
                    2306
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_2/pandas/tests/indexing/test_scalar.py",
                "test_function": "test_at_with_tuple_index_get",
                "test_function_code": "def test_at_with_tuple_index_get():\n    # GH 26989\n    # DataFrame.at getter works with Index of tuples\n    df = DataFrame({\"a\": [1, 2]}, index=[(1, 2), (3, 4)])\n    assert df.index.nlevels == 1\n    assert df.at[(1, 2), \"a\"] == 1\n\n    # Series.at getter works with Index of tuples\n    series = df[\"a\"]\n    assert series.index.nlevels == 1\n    assert series.at[(1, 2)] == 1",
                "test_error": "TypeError: _get_value() got multiple values for argument 'takeable'",
                "full_test_error": "def test_at_with_tuple_index_get():\n        # GH 26989\n        # DataFrame.at getter works with Index of tuples\n        df = DataFrame({\"a\": [1, 2]}, index=[(1, 2), (3, 4)])\n        assert df.index.nlevels == 1\n        assert df.at[(1, 2), \"a\"] == 1\n    \n        # Series.at getter works with Index of tuples\n        series = df[\"a\"]\n        assert series.index.nlevels == 1\n>       assert series.at[(1, 2)] == 1\n\npandas/tests/indexing/test_scalar.py:366: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2055: in __getitem__\n    return super().__getitem__(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11281c8b0>, key = (1, 2)\n\n    def __getitem__(self, key):\n        if not isinstance(key, tuple):\n    \n            # we could have a convertible item here (e.g. Timestamp)\n            if not is_list_like_indexer(key):\n                key = tuple([key])\n            else:\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n    \n        key = self._convert_key(key)\n>       return self.obj._get_value(*key, takeable=self._takeable)\nE       TypeError: _get_value() got multiple values for argument 'takeable'\n\npandas/core/indexing.py:2008: TypeError",
                "traceback": "pandas/core/indexing.py:2055: in __getitem__\n    return super().__getitem__(key)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11281c8b0>, key = (1, 2)\n\n    def __getitem__(self, key):\n        if not isinstance(key, tuple):\n    \n            # we could have a convertible item here (e.g. Timestamp)\n            if not is_list_like_indexer(key):\n                key = tuple([key])\n            else:\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n    \n        key = self._convert_key(key)\n>       return self.obj._get_value(*key, takeable=self._takeable)\nE       TypeError: _get_value() got multiple values for argument 'takeable'\n\npandas/core/indexing.py:2008: TypeError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_2/pandas/tests/indexing/test_scalar.py",
                "test_function": "test_at_with_tuple_index_set",
                "test_function_code": "def test_at_with_tuple_index_set():\n    # GH 26989\n    # DataFrame.at setter works with Index of tuples\n    df = DataFrame({\"a\": [1, 2]}, index=[(1, 2), (3, 4)])\n    assert df.index.nlevels == 1\n    df.at[(1, 2), \"a\"] = 2\n    assert df.at[(1, 2), \"a\"] == 2\n\n    # Series.at setter works with Index of tuples\n    series = df[\"a\"]\n    assert series.index.nlevels == 1\n    series.at[1, 2] = 3\n    assert series.at[1, 2] == 3",
                "test_error": "ValueError: Not enough indexers for scalar access (setting)!",
                "full_test_error": "def test_at_with_tuple_index_set():\n        # GH 26989\n        # DataFrame.at setter works with Index of tuples\n        df = DataFrame({\"a\": [1, 2]}, index=[(1, 2), (3, 4)])\n        assert df.index.nlevels == 1\n        df.at[(1, 2), \"a\"] = 2\n        assert df.at[(1, 2), \"a\"] == 2\n    \n        # Series.at setter works with Index of tuples\n        series = df[\"a\"]\n        assert series.index.nlevels == 1\n>       series.at[1, 2] = 3\n\npandas/tests/indexing/test_scalar.py:380: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2066: in __setitem__\n    return super().__setitem__(key, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11279d1d0>, key = (1, 2)\nvalue = 3\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            # scalar callable may return tuple\n            key = com.apply_if_callable(key, self.obj)\n    \n        if not isinstance(key, tuple):\n            key = _tuplify(self.ndim, key)\n        if len(key) != self.ndim:\n>           raise ValueError(\"Not enough indexers for scalar access (setting)!\")\nE           ValueError: Not enough indexers for scalar access (setting)!\n\npandas/core/indexing.py:2020: ValueError",
                "traceback": "pandas/core/indexing.py:2066: in __setitem__\n    return super().__setitem__(key, value)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11279d1d0>, key = (1, 2)\nvalue = 3\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            # scalar callable may return tuple\n            key = com.apply_if_callable(key, self.obj)\n    \n        if not isinstance(key, tuple):\n            key = _tuplify(self.ndim, key)\n        if len(key) != self.ndim:\n>           raise ValueError(\"Not enough indexers for scalar access (setting)!\")\nE           ValueError: Not enough indexers for scalar access (setting)!\n\npandas/core/indexing.py:2020: ValueError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_2/pandas/tests/indexing/test_scalar.py",
                "test_function": "test_multiindex_at_get",
                "test_function_code": "def test_multiindex_at_get():\n    # GH 26989\n    # DataFrame.at and DataFrame.loc getter works with MultiIndex\n    df = DataFrame({\"a\": [1, 2]}, index=[[1, 2], [3, 4]])\n    assert df.index.nlevels == 2\n    assert df.at[(1, 3), \"a\"] == 1\n    assert df.loc[(1, 3), \"a\"] == 1\n\n    # Series.at and Series.loc getter works with MultiIndex\n    series = df[\"a\"]\n    assert series.index.nlevels == 2\n    assert series.at[1, 3] == 1\n    assert series.loc[1, 3] == 1",
                "test_error": "TypeError: _get_value() got multiple values for argument 'takeable'",
                "full_test_error": "def test_multiindex_at_get():\n        # GH 26989\n        # DataFrame.at and DataFrame.loc getter works with MultiIndex\n        df = DataFrame({\"a\": [1, 2]}, index=[[1, 2], [3, 4]])\n        assert df.index.nlevels == 2\n        assert df.at[(1, 3), \"a\"] == 1\n        assert df.loc[(1, 3), \"a\"] == 1\n    \n        # Series.at and Series.loc getter works with MultiIndex\n        series = df[\"a\"]\n        assert series.index.nlevels == 2\n>       assert series.at[1, 3] == 1\n\npandas/tests/indexing/test_scalar.py:395: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2055: in __getitem__\n    return super().__getitem__(key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11279d7c0>, key = (1, 3)\n\n    def __getitem__(self, key):\n        if not isinstance(key, tuple):\n    \n            # we could have a convertible item here (e.g. Timestamp)\n            if not is_list_like_indexer(key):\n                key = tuple([key])\n            else:\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n    \n        key = self._convert_key(key)\n>       return self.obj._get_value(*key, takeable=self._takeable)\nE       TypeError: _get_value() got multiple values for argument 'takeable'\n\npandas/core/indexing.py:2008: TypeError",
                "traceback": "pandas/core/indexing.py:2055: in __getitem__\n    return super().__getitem__(key)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x11279d7c0>, key = (1, 3)\n\n    def __getitem__(self, key):\n        if not isinstance(key, tuple):\n    \n            # we could have a convertible item here (e.g. Timestamp)\n            if not is_list_like_indexer(key):\n                key = tuple([key])\n            else:\n                raise ValueError(\"Invalid call for scalar access (getting)!\")\n    \n        key = self._convert_key(key)\n>       return self.obj._get_value(*key, takeable=self._takeable)\nE       TypeError: _get_value() got multiple values for argument 'takeable'\n\npandas/core/indexing.py:2008: TypeError",
                "test_function_decorators": []
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_2/pandas/tests/indexing/test_scalar.py",
                "test_function": "test_multiindex_at_set",
                "test_function_code": "def test_multiindex_at_set():\n    # GH 26989\n    # DataFrame.at and DataFrame.loc setter works with MultiIndex\n    df = DataFrame({\"a\": [1, 2]}, index=[[1, 2], [3, 4]])\n    assert df.index.nlevels == 2\n    df.at[(1, 3), \"a\"] = 3\n    assert df.at[(1, 3), \"a\"] == 3\n    df.loc[(1, 3), \"a\"] = 4\n    assert df.loc[(1, 3), \"a\"] == 4\n\n    # Series.at and Series.loc setter works with MultiIndex\n    series = df[\"a\"]\n    assert series.index.nlevels == 2\n    series.at[1, 3] = 5\n    assert series.at[1, 3] == 5\n    series.loc[1, 3] = 6\n    assert series.loc[1, 3] == 6",
                "test_error": "ValueError: Not enough indexers for scalar access (setting)!",
                "full_test_error": "def test_multiindex_at_set():\n        # GH 26989\n        # DataFrame.at and DataFrame.loc setter works with MultiIndex\n        df = DataFrame({\"a\": [1, 2]}, index=[[1, 2], [3, 4]])\n        assert df.index.nlevels == 2\n        df.at[(1, 3), \"a\"] = 3\n        assert df.at[(1, 3), \"a\"] == 3\n        df.loc[(1, 3), \"a\"] = 4\n        assert df.loc[(1, 3), \"a\"] == 4\n    \n        # Series.at and Series.loc setter works with MultiIndex\n        series = df[\"a\"]\n        assert series.index.nlevels == 2\n>       series.at[1, 3] = 5\n\npandas/tests/indexing/test_scalar.py:412: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/indexing.py:2066: in __setitem__\n    return super().__setitem__(key, value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x112732090>, key = (1, 3)\nvalue = 5\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            # scalar callable may return tuple\n            key = com.apply_if_callable(key, self.obj)\n    \n        if not isinstance(key, tuple):\n            key = _tuplify(self.ndim, key)\n        if len(key) != self.ndim:\n>           raise ValueError(\"Not enough indexers for scalar access (setting)!\")\nE           ValueError: Not enough indexers for scalar access (setting)!\n\npandas/core/indexing.py:2020: ValueError",
                "traceback": "pandas/core/indexing.py:2066: in __setitem__\n    return super().__setitem__(key, value)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.indexing._AtIndexer object at 0x112732090>, key = (1, 3)\nvalue = 5\n\n    def __setitem__(self, key, value):\n        if isinstance(key, tuple):\n            key = tuple(com.apply_if_callable(x, self.obj) for x in key)\n        else:\n            # scalar callable may return tuple\n            key = com.apply_if_callable(key, self.obj)\n    \n        if not isinstance(key, tuple):\n            key = _tuplify(self.ndim, key)\n        if len(key) != self.ndim:\n>           raise ValueError(\"Not enough indexers for scalar access (setting)!\")\nE           ValueError: Not enough indexers for scalar access (setting)!\n\npandas/core/indexing.py:2020: ValueError",
                "test_function_decorators": []
            }
        ]
    }
}