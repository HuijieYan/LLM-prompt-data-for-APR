{
    "pandas:105": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/core/frame.py": {
            "buggy_functions": [
                {
                    "function_name": "transpose",
                    "function_code": "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    return super().transpose(1, 0, **kwargs)\n",
                    "decorators": [],
                    "docstring": "Transpose index and columns.\n\nReflect the DataFrame over its main diagonal by writing rows as columns\nand vice-versa. The property :attr:`.T` is an accessor to the method\n:meth:`transpose`.\n\nParameters\n----------\n*args, **kwargs\n    Additional arguments and keywords have no effect but might be\n    accepted for compatibility with numpy.\n\nReturns\n-------\nDataFrame\n    The transposed DataFrame.\n\nSee Also\n--------\nnumpy.transpose : Permute the dimensions of a given array.\n\nNotes\n-----\nTransposing a DataFrame with mixed dtypes will result in a homogeneous\nDataFrame with the `object` dtype. In such a case, a copy of the data\nis always made.\n\nExamples\n--------\n**Square DataFrame with homogeneous dtype**\n\n>>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df1 = pd.DataFrame(data=d1)\n>>> df1\n   col1  col2\n0     1     3\n1     2     4\n\n>>> df1_transposed = df1.T # or df1.transpose()\n>>> df1_transposed\n      0  1\ncol1  1  2\ncol2  3  4\n\nWhen the dtype is homogeneous in the original DataFrame, we get a\ntransposed DataFrame with the same dtype:\n\n>>> df1.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n>>> df1_transposed.dtypes\n0    int64\n1    int64\ndtype: object\n\n**Non-square DataFrame with mixed dtypes**\n\n>>> d2 = {'name': ['Alice', 'Bob'],\n...       'score': [9.5, 8],\n...       'employed': [False, True],\n...       'kids': [0, 0]}\n>>> df2 = pd.DataFrame(data=d2)\n>>> df2\n    name  score  employed  kids\n0  Alice    9.5     False     0\n1    Bob    8.0      True     0\n\n>>> df2_transposed = df2.T # or df2.transpose()\n>>> df2_transposed\n              0     1\nname      Alice   Bob\nscore       9.5     8\nemployed  False  True\nkids          0     0\n\nWhen the DataFrame has mixed dtypes, we get a transposed DataFrame with\nthe `object` dtype:\n\n>>> df2.dtypes\nname         object\nscore       float64\nemployed       bool\nkids          int64\ndtype: object\n>>> df2_transposed.dtypes\n0    object\n1    object\ndtype: object",
                    "start_line": 2488,
                    "variables": {
                        "nv.validate_transpose": [
                            2580
                        ],
                        "nv": [
                            2580
                        ],
                        "args": [
                            2580
                        ],
                        "dict": [
                            2580
                        ],
                        "transpose": [
                            2581
                        ],
                        "super": [
                            2581
                        ],
                        "kwargs": [
                            2581
                        ]
                    },
                    "filtered_variables": {
                        "nv.validate_transpose": [
                            2580
                        ],
                        "nv": [
                            2580
                        ],
                        "args": [
                            2580
                        ],
                        "transpose": [
                            2581
                        ],
                        "kwargs": [
                            2581
                        ]
                    },
                    "diff_line_number": 2488,
                    "class_data": {
                        "signature": "class DataFrame(NDFrame)",
                        "docstring": "Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n\nData structure also contains labeled axes (rows and columns).\nArithmetic operations align on both row and column labels. Can be\nthought of as a dict-like container for Series objects. The primary\npandas data structure.\n\nParameters\n----------\ndata : ndarray (structured or homogeneous), Iterable, dict, or DataFrame\n    Dict can contain Series, arrays, constants, or list-like objects.\n\n    .. versionchanged:: 0.23.0\n       If data is a dict, column order follows insertion-order for\n       Python 3.6 and later.\n\n    .. versionchanged:: 0.25.0\n       If data is a list of dicts, column order follows insertion-order\n       for Python 3.6 and later.\n\nindex : Index or array-like\n    Index to use for resulting frame. Will default to RangeIndex if\n    no indexing information part of input data and no index provided.\ncolumns : Index or array-like\n    Column labels to use for resulting frame. Will default to\n    RangeIndex (0, 1, 2, ..., n) if no column labels are provided.\ndtype : dtype, default None\n    Data type to force. Only a single dtype is allowed. If None, infer.\ncopy : bool, default False\n    Copy data from inputs. Only affects DataFrame / 2d ndarray input.\n\nSee Also\n--------\nDataFrame.from_records : Constructor from tuples, also record arrays.\nDataFrame.from_dict : From dicts of Series, arrays, or dicts.\nread_csv\nread_table\nread_clipboard\n\nExamples\n--------\nConstructing DataFrame from a dictionary.\n\n>>> d = {'col1': [1, 2], 'col2': [3, 4]}\n>>> df = pd.DataFrame(data=d)\n>>> df\n   col1  col2\n0     1     3\n1     2     4\n\nNotice that the inferred dtype is int64.\n\n>>> df.dtypes\ncol1    int64\ncol2    int64\ndtype: object\n\nTo enforce a single dtype:\n\n>>> df = pd.DataFrame(data=d, dtype=np.int8)\n>>> df.dtypes\ncol1    int8\ncol2    int8\ndtype: object\n\nConstructing DataFrame from numpy ndarray:\n\n>>> df2 = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]),\n...                    columns=['a', 'b', 'c'])\n>>> df2\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9",
                        "constructor_docstring": null,
                        "functions": [
                            "@property\ndef _constructor(self) -> Type['DataFrame']:\n    return DataFrame",
                            "@property\ndef _constructor_expanddim(self):\n    raise NotImplementedError('Not supported for DataFrames!')",
                            "def __init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n    if isinstance(data, DataFrame):\n        data = data._data\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy)\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data.soften_mask()\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, 'name', None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n    elif isinstance(data, abc.Iterable) and (not isinstance(data, (str, bytes))):\n        if not isinstance(data, (abc.Sequence, ExtensionArray)):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], 'ndim', 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(f'DataFrame constructor called with incompatible data and dtype: {e}')\n            raise exc from e\n        if arr.ndim == 0 and index is not None and (columns is not None):\n            values = cast_scalar_to_array((len(index), len(columns)), data, dtype=dtype)\n            mgr = init_ndarray(values, index, columns, dtype=values.dtype, copy=False)\n        else:\n            raise ValueError('DataFrame constructor not properly called!')\n    NDFrame.__init__(self, mgr, fastpath=True)",
                            "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list representing the axes of the DataFrame.\n\n    It has the row axis labels and column axis labels as the only members.\n    They are returned in that order.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.axes\n    [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n    dtype='object')]\n    \"\"\"\n    return [self.index, self.columns]",
                            "@property\ndef shape(self) -> Tuple[int, int]:\n    \"\"\"\n    Return a tuple representing the dimensionality of the DataFrame.\n\n    See Also\n    --------\n    ndarray.shape\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.shape\n    (2, 2)\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n    ...                    'col3': [5, 6]})\n    >>> df.shape\n    (2, 3)\n    \"\"\"\n    return (len(self.index), len(self.columns))",
                            "@property\ndef _is_homogeneous_type(self) -> bool:\n    \"\"\"\n    Whether all the columns in a DataFrame have the same type.\n\n    Returns\n    -------\n    bool\n\n    See Also\n    --------\n    Index._is_homogeneous_type : Whether the object has a single\n        dtype.\n    MultiIndex._is_homogeneous_type : Whether all the levels of a\n        MultiIndex have the same dtype.\n\n    Examples\n    --------\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n    True\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n    False\n\n    Items with the same type but different sizes are considered\n    different types.\n\n    >>> DataFrame({\n    ...    \"A\": np.array([1, 2], dtype=np.int32),\n    ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n    False\n    \"\"\"\n    if self._data.any_extension_types:\n        return len({block.dtype for block in self._data.blocks}) == 1\n    else:\n        return not self._data.is_mixed_type",
                            "def _repr_fits_vertical_(self) -> bool:\n    \"\"\"\n    Check length against max_rows.\n    \"\"\"\n    max_rows = get_option('display.max_rows')\n    return len(self) <= max_rows",
                            "def _repr_fits_horizontal_(self, ignore_width: bool=False) -> bool:\n    \"\"\"\n    Check if full repr fits in horizontal boundaries imposed by the display\n    options width and max_columns.\n\n    In case off non-interactive session, no boundaries apply.\n\n    `ignore_width` is here so ipnb+HTML output can behave the way\n    users expect. display.max_columns remains in effect.\n    GH3541, GH3573\n    \"\"\"\n    width, height = console.get_console_size()\n    max_columns = get_option('display.max_columns')\n    nb_columns = len(self.columns)\n    if max_columns and nb_columns > max_columns or (not ignore_width and width and (nb_columns > width // 2)):\n        return False\n    if ignore_width or not console.in_interactive_session():\n        return True\n    if get_option('display.width') is not None or console.in_ipython_frontend():\n        max_rows = 1\n    else:\n        max_rows = get_option('display.max_rows')\n    buf = StringIO()\n    d = self\n    if not max_rows is None:\n        d = d.iloc[:min(max_rows, len(d))]\n    else:\n        return True\n    d.to_string(buf=buf)\n    value = buf.getvalue()\n    repr_width = max((len(l) for l in value.split('\\n')))\n    return repr_width < width",
                            "def _info_repr(self) -> bool:\n    \"\"\"\n    True if the repr should show the info view.\n    \"\"\"\n    info_repr_option = get_option('display.large_repr') == 'info'\n    return info_repr_option and (not (self._repr_fits_horizontal_() and self._repr_fits_vertical_()))",
                            "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular DataFrame.\n    \"\"\"\n    buf = StringIO('')\n    if self._info_repr():\n        self.info(buf=buf)\n        return buf.getvalue()\n    max_rows = get_option('display.max_rows')\n    min_rows = get_option('display.min_rows')\n    max_cols = get_option('display.max_columns')\n    max_colwidth = get_option('display.max_colwidth')\n    show_dimensions = get_option('display.show_dimensions')\n    if get_option('display.expand_frame_repr'):\n        width, _ = console.get_console_size()\n    else:\n        width = None\n    self.to_string(buf=buf, max_rows=max_rows, min_rows=min_rows, max_cols=max_cols, line_width=width, max_colwidth=max_colwidth, show_dimensions=show_dimensions)\n    return buf.getvalue()",
                            "def _repr_html_(self) -> Optional[str]:\n    \"\"\"\n    Return a html representation for a particular DataFrame.\n\n    Mainly for IPython notebook.\n    \"\"\"\n    if self._info_repr():\n        buf = StringIO('')\n        self.info(buf=buf)\n        val = buf.getvalue().replace('<', '&lt;', 1)\n        val = val.replace('>', '&gt;', 1)\n        return '<pre>' + val + '</pre>'\n    if get_option('display.notebook_repr_html'):\n        max_rows = get_option('display.max_rows')\n        min_rows = get_option('display.min_rows')\n        max_cols = get_option('display.max_columns')\n        show_dimensions = get_option('display.show_dimensions')\n        formatter = fmt.DataFrameFormatter(self, columns=None, col_space=None, na_rep='NaN', formatters=None, float_format=None, sparsify=None, justify=None, index_names=True, header=True, index=True, bold_rows=True, escape=True, max_rows=max_rows, min_rows=min_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal='.', table_id=None, render_links=False)\n        return formatter.to_html(notebook=True)\n    else:\n        return None",
                            "@Substitution(header_type='bool or sequence', header='Write out the column names. If a list of strings is given, it is assumed to be aliases for the column names', col_space_type='int', col_space='The minimum width of each column')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]:\n    \"\"\"\n    Render a DataFrame to a console-friendly tabular output.\n    %(shared_params)s\n    line_width : int, optional\n        Width to wrap a line in characters.\n    max_colwidth : int, optional\n        Max width to truncate each column in characters. By default, no limit.\n\n        .. versionadded:: 1.0.0\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n    %(returns)s\n    See Also\n    --------\n    to_html : Convert DataFrame to HTML.\n\n    Examples\n    --------\n    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n    >>> df = pd.DataFrame(d)\n    >>> print(df.to_string())\n       col1  col2\n    0     1     4\n    1     2     5\n    2     3     6\n    \"\"\"\n    from pandas import option_context\n    with option_context('display.max_colwidth', max_colwidth):\n        formatter = fmt.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, min_rows=min_rows, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, line_width=line_width)\n        return formatter.to_string(buf=buf, encoding=encoding)",
                            "@property\ndef style(self):\n    \"\"\"\n    Returns a Styler object.\n\n    Contains methods for building a styled HTML representation of the DataFrame.\n    a styled HTML representation fo the DataFrame.\n\n    See Also\n    --------\n    io.formats.style.Styler\n    \"\"\"\n    from pandas.io.formats.style import Styler\n    return Styler(self)",
                            "@Appender(_shared_docs['items'])\ndef items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    if self.columns.is_unique and hasattr(self, '_item_cache'):\n        for k in self.columns:\n            yield (k, self._get_item_cache(k))\n    else:\n        for i, k in enumerate(self.columns):\n            yield (k, self._ixs(i, axis=1))",
                            "@Appender(_shared_docs['items'])\ndef iteritems(self):\n    yield from self.items()",
                            "def iterrows(self):\n    \"\"\"\n    Iterate over DataFrame rows as (index, Series) pairs.\n\n    Yields\n    ------\n    index : label or tuple of label\n        The index of the row. A tuple for a `MultiIndex`.\n    data : Series\n        The data of the row as a Series.\n\n    it : generator\n        A generator that iterates over the rows of the frame.\n\n    See Also\n    --------\n    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n\n    1. Because ``iterrows`` returns a Series for each row,\n       it does **not** preserve dtypes across the rows (dtypes are\n       preserved across columns for DataFrames). For example,\n\n       >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n       >>> row = next(df.iterrows())[1]\n       >>> row\n       int      1.0\n       float    1.5\n       Name: 0, dtype: float64\n       >>> print(row['int'].dtype)\n       float64\n       >>> print(df['int'].dtype)\n       int64\n\n       To preserve dtypes while iterating over the rows, it is better\n       to use :meth:`itertuples` which returns namedtuples of the values\n       and which is generally faster than ``iterrows``.\n\n    2. You should **never modify** something you are iterating over.\n       This is not guaranteed to work in all cases. Depending on the\n       data types, the iterator returns a copy and not a view, and writing\n       to it will have no effect.\n    \"\"\"\n    columns = self.columns\n    klass = self._constructor_sliced\n    for k, v in zip(self.index, self.values):\n        s = klass(v, index=columns, name=k)\n        yield (k, s)",
                            "def itertuples(self, index=True, name='Pandas'):\n    \"\"\"\n    Iterate over DataFrame rows as namedtuples.\n\n    Parameters\n    ----------\n    index : bool, default True\n        If True, return the index as the first element of the tuple.\n    name : str or None, default \"Pandas\"\n        The name of the returned namedtuples or None to return regular\n        tuples.\n\n    Returns\n    -------\n    iterator\n        An object to iterate over namedtuples for each row in the\n        DataFrame with the first field possibly being the index and\n        following fields being the column values.\n\n    See Also\n    --------\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n        pairs.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    The column names will be renamed to positional names if they are\n    invalid Python identifiers, repeated, or start with an underscore.\n    With a large number of columns (>255), regular tuples are returned.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n    ...                   index=['dog', 'hawk'])\n    >>> df\n          num_legs  num_wings\n    dog          4          0\n    hawk         2          2\n    >>> for row in df.itertuples():\n    ...     print(row)\n    ...\n    Pandas(Index='dog', num_legs=4, num_wings=0)\n    Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n    By setting the `index` parameter to False we can remove the index\n    as the first element of the tuple:\n\n    >>> for row in df.itertuples(index=False):\n    ...     print(row)\n    ...\n    Pandas(num_legs=4, num_wings=0)\n    Pandas(num_legs=2, num_wings=2)\n\n    With the `name` parameter set we set a custom name for the yielded\n    namedtuples:\n\n    >>> for row in df.itertuples(name='Animal'):\n    ...     print(row)\n    ...\n    Animal(Index='dog', num_legs=4, num_wings=0)\n    Animal(Index='hawk', num_legs=2, num_wings=2)\n    \"\"\"\n    arrays = []\n    fields = list(self.columns)\n    if index:\n        arrays.append(self.index)\n        fields.insert(0, 'Index')\n    arrays.extend((self.iloc[:, k] for k in range(len(self.columns))))\n    if name is not None and len(self.columns) + index < 256:\n        itertuple = collections.namedtuple(name, fields, rename=True)\n        return map(itertuple._make, zip(*arrays))\n    return zip(*arrays)",
                            "def __len__(self) -> int:\n    \"\"\"\n    Returns length of info axis, but here we use the index.\n    \"\"\"\n    return len(self.index)",
                            "def dot(self, other):\n    \"\"\"\n    Compute the matrix multiplication between the DataFrame and other.\n\n    This method computes the matrix product between the DataFrame and the\n    values of an other Series, DataFrame or a numpy array.\n\n    It can also be called using ``self @ other`` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the matrix product with.\n\n    Returns\n    -------\n    Series or DataFrame\n        If other is a Series, return the matrix product between self and\n        other as a Serie. If other is a DataFrame or a numpy.array, return\n        the matrix product of self and other in a DataFrame of a np.array.\n\n    See Also\n    --------\n    Series.dot: Similar method for Series.\n\n    Notes\n    -----\n    The dimensions of DataFrame and other must be compatible in order to\n    compute the matrix multiplication. In addition, the column names of\n    DataFrame and the index of other must contain the same values, as they\n    will be aligned prior to the multiplication.\n\n    The dot method for Series computes the inner product, instead of the\n    matrix product here.\n\n    Examples\n    --------\n    Here we multiply a DataFrame with a Series.\n\n    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n    >>> s = pd.Series([1, 1, 2, 1])\n    >>> df.dot(s)\n    0    -4\n    1     5\n    dtype: int64\n\n    Here we multiply a DataFrame with another DataFrame.\n\n    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(other)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note that the dot method give the same result as @\n\n    >>> df @ other\n        0   1\n    0   1   4\n    1   2   2\n\n    The dot method works also if other is an np.array.\n\n    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(arr)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note how shuffling of the objects does not change the result.\n\n    >>> s2 = s.reindex([1, 0, 2, 3])\n    >>> df.dot(s2)\n    0    -4\n    1     5\n    dtype: int64\n    \"\"\"\n    if isinstance(other, (Series, DataFrame)):\n        common = self.columns.union(other.index)\n        if len(common) > len(self.columns) or len(common) > len(other.index):\n            raise ValueError('matrices are not aligned')\n        left = self.reindex(columns=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        left = self\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[1] != rvals.shape[0]:\n            raise ValueError(f'Dot product shape mismatch, {lvals.shape} vs {rvals.shape}')\n    if isinstance(other, DataFrame):\n        return self._constructor(np.dot(lvals, rvals), index=left.index, columns=other.columns)\n    elif isinstance(other, Series):\n        return Series(np.dot(lvals, rvals), index=left.index)\n    elif isinstance(rvals, (np.ndarray, Index)):\n        result = np.dot(lvals, rvals)\n        if result.ndim == 2:\n            return self._constructor(result, index=left.index)\n        else:\n            return Series(result, index=left.index)\n    else:\n        raise TypeError(f'unsupported type: {type(other)}')",
                            "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                            "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.T.dot(np.transpose(other)).T",
                            "@classmethod\ndef from_dict(cls, data, orient='columns', dtype=None, columns=None):\n    \"\"\"\n    Construct DataFrame from dict of array-like or dicts.\n\n    Creates DataFrame object from dictionary by columns or by index\n    allowing dtype specification.\n\n    Parameters\n    ----------\n    data : dict\n        Of the form {field : array-like} or {field : dict}.\n    orient : {'columns', 'index'}, default 'columns'\n        The \"orientation\" of the data. If the keys of the passed dict\n        should be the columns of the resulting DataFrame, pass 'columns'\n        (default). Otherwise if the keys should be rows, pass 'index'.\n    dtype : dtype, default None\n        Data type to force, otherwise infer.\n    columns : list, default None\n        Column labels to use when ``orient='index'``. Raises a ValueError\n        if used with ``orient='columns'``.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.from_records : DataFrame from ndarray (structured\n        dtype), list of tuples, dict, or DataFrame.\n    DataFrame : DataFrame object creation using constructor.\n\n    Examples\n    --------\n    By default the keys of the dict become the DataFrame columns:\n\n    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data)\n       col_1 col_2\n    0      3     a\n    1      2     b\n    2      1     c\n    3      0     d\n\n    Specify ``orient='index'`` to create the DataFrame using dictionary\n    keys as rows:\n\n    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data, orient='index')\n           0  1  2  3\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n\n    When using the 'index' orientation, the column names can be\n    specified manually:\n\n    >>> pd.DataFrame.from_dict(data, orient='index',\n    ...                        columns=['A', 'B', 'C', 'D'])\n           A  B  C  D\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n    \"\"\"\n    index = None\n    orient = orient.lower()\n    if orient == 'index':\n        if len(data) > 0:\n            if isinstance(list(data.values())[0], (Series, dict)):\n                data = _from_nested_dict(data)\n            else:\n                data, index = (list(data.values()), list(data.keys()))\n    elif orient == 'columns':\n        if columns is not None:\n            raise ValueError(\"cannot use columns parameter with orient='columns'\")\n    else:\n        raise ValueError('only recognize index or columns for orient')\n    return cls(data, index=index, columns=columns, dtype=dtype)",
                            "def to_numpy(self, dtype=None, copy=False):\n    \"\"\"\n    Convert the DataFrame to a NumPy array.\n\n    .. versionadded:: 0.24.0\n\n    By default, the dtype of the returned array will be the common NumPy\n    dtype of all types in the DataFrame. For example, if the dtypes are\n    ``float16`` and ``float32``, the results dtype will be ``float32``.\n    This may require copying data and coercing values, which may be\n    expensive.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to pass to :meth:`numpy.asarray`.\n    copy : bool, default False\n        Whether to ensure that the returned value is a not a view on\n        another array. Note that ``copy=False`` does not *ensure* that\n        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n        a copy is made, even if not strictly necessary.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.to_numpy : Similar method for Series.\n\n    Examples\n    --------\n    >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n    array([[1, 3],\n           [2, 4]])\n\n    With heterogeneous data, the lowest common type will have to\n    be used.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n    >>> df.to_numpy()\n    array([[1. , 3. ],\n           [2. , 4.5]])\n\n    For a mix of numeric and non-numeric types, the output array will\n    have object dtype.\n\n    >>> df['C'] = pd.date_range('2000', periods=2)\n    >>> df.to_numpy()\n    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n    \"\"\"\n    result = np.array(self.values, dtype=dtype, copy=copy)\n    return result",
                            "def to_dict(self, orient='dict', into=dict):\n    \"\"\"\n    Convert the DataFrame to a dictionary.\n\n    The type of the key-value pairs can be customized with the parameters\n    (see below).\n\n    Parameters\n    ----------\n    orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n        Determines the type of the values of the dictionary.\n\n        - 'dict' (default) : dict like {column -> {index -> value}}\n        - 'list' : dict like {column -> [values]}\n        - 'series' : dict like {column -> Series(values)}\n        - 'split' : dict like\n          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n        - 'records' : list like\n          [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n\n        Abbreviations are allowed. `s` indicates `series` and `sp`\n        indicates `split`.\n\n    into : class, default dict\n        The collections.abc.Mapping subclass used for all Mappings\n        in the return value.  Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    dict, list or collections.abc.Mapping\n        Return a collections.abc.Mapping object representing the DataFrame.\n        The resulting transformation depends on the `orient` parameter.\n\n    See Also\n    --------\n    DataFrame.from_dict: Create a DataFrame from a dictionary.\n    DataFrame.to_json: Convert a DataFrame to JSON format.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2],\n    ...                    'col2': [0.5, 0.75]},\n    ...                   index=['row1', 'row2'])\n    >>> df\n          col1  col2\n    row1     1  0.50\n    row2     2  0.75\n    >>> df.to_dict()\n    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n    You can specify the return orientation.\n\n    >>> df.to_dict('series')\n    {'col1': row1    1\n             row2    2\n    Name: col1, dtype: int64,\n    'col2': row1    0.50\n            row2    0.75\n    Name: col2, dtype: float64}\n\n    >>> df.to_dict('split')\n    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n     'data': [[1, 0.5], [2, 0.75]]}\n\n    >>> df.to_dict('records')\n    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n    >>> df.to_dict('index')\n    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n    You can also specify the mapping type.\n\n    >>> from collections import OrderedDict, defaultdict\n    >>> df.to_dict(into=OrderedDict)\n    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n    If you want a `defaultdict`, you need to initialize it:\n\n    >>> dd = defaultdict(list)\n    >>> df.to_dict('records', into=dd)\n    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n    \"\"\"\n    if not self.columns.is_unique:\n        warnings.warn('DataFrame columns are not unique, some columns will be omitted.', UserWarning, stacklevel=2)\n    into_c = com.standardize_mapping(into)\n    if orient.lower().startswith('d'):\n        return into_c(((k, v.to_dict(into)) for k, v in self.items()))\n    elif orient.lower().startswith('l'):\n        return into_c(((k, v.tolist()) for k, v in self.items()))\n    elif orient.lower().startswith('sp'):\n        return into_c((('index', self.index.tolist()), ('columns', self.columns.tolist()), ('data', [list(map(com.maybe_box_datetimelike, t)) for t in self.itertuples(index=False, name=None)])))\n    elif orient.lower().startswith('s'):\n        return into_c(((k, com.maybe_box_datetimelike(v)) for k, v in self.items()))\n    elif orient.lower().startswith('r'):\n        columns = self.columns.tolist()\n        rows = (dict(zip(columns, row)) for row in self.itertuples(index=False, name=None))\n        return [into_c(((k, com.maybe_box_datetimelike(v)) for k, v in row.items())) for row in rows]\n    elif orient.lower().startswith('i'):\n        if not self.index.is_unique:\n            raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n        return into_c(((t[0], dict(zip(self.columns, t[1:]))) for t in self.itertuples(name=None)))\n    else:\n        raise ValueError(f\"orient '{orient}' not understood\")",
                            "def to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None):\n    \"\"\"\n    Write a DataFrame to a Google BigQuery table.\n\n    This function requires the `pandas-gbq package\n    <https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    destination_table : str\n        Name of table to be written, in the form ``dataset.tablename``.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    chunksize : int, optional\n        Number of rows to be inserted in each chunk from the dataframe.\n        Set to ``None`` to load the whole dataframe at once.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    if_exists : str, default 'fail'\n        Behavior when the destination table exists. Value can be one of:\n\n        ``'fail'``\n            If table exists, do nothing.\n        ``'replace'``\n            If table exists, drop it, recreate it, and insert data.\n        ``'append'``\n            If table exists, insert data. Create if does not exist.\n    auth_local_webserver : bool, default False\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n    table_schema : list of dicts, optional\n        List of BigQuery table fields to which according DataFrame\n        columns conform to, e.g. ``[{'name': 'col1', 'type':\n        'STRING'},...]``. If schema is not provided, it will be\n        generated according to dtypes of DataFrame columns. See\n        BigQuery API documentation on available names of a field.\n\n        *New in version 0.3.1 of pandas-gbq*.\n    location : str, optional\n        Location where the load job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of the\n        target dataset.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    progress_bar : bool, default True\n        Use the library `tqdm` to show the progress bar for the upload,\n        chunk by chunk.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to\n        override default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service\n        Account :class:`google.oauth2.service_account.Credentials`\n        directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n\n        .. versionadded:: 0.24.0\n\n    See Also\n    --------\n    pandas_gbq.to_gbq : This function in the pandas-gbq library.\n    read_gbq : Read a DataFrame from Google BigQuery.\n    \"\"\"\n    from pandas.io import gbq\n    gbq.to_gbq(self, destination_table, project_id=project_id, chunksize=chunksize, reauth=reauth, if_exists=if_exists, auth_local_webserver=auth_local_webserver, table_schema=table_schema, location=location, progress_bar=progress_bar, credentials=credentials)",
                            "@classmethod\ndef from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None):\n    \"\"\"\n    Convert structured or record ndarray to DataFrame.\n\n    Parameters\n    ----------\n    data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n    index : str, list of fields, array-like\n        Field of array to use as the index, alternately a specific set of\n        input labels to use.\n    exclude : sequence, default None\n        Columns or fields to exclude.\n    columns : sequence, default None\n        Column names to use. If the passed data do not have names\n        associated with them, this argument provides names for the\n        columns. Otherwise this argument indicates the order of the columns\n        in the result (any names not found in the data will become all-NA\n        columns).\n    coerce_float : bool, default False\n        Attempt to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    nrows : int, default None\n        Number of rows to read if data is an iterator.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    if columns is not None:\n        columns = ensure_index(columns)\n    if is_iterator(data):\n        if nrows == 0:\n            return cls()\n        try:\n            first_row = next(data)\n        except StopIteration:\n            return cls(index=index, columns=columns)\n        dtype = None\n        if hasattr(first_row, 'dtype') and first_row.dtype.names:\n            dtype = first_row.dtype\n        values = [first_row]\n        if nrows is None:\n            values += data\n        else:\n            values.extend(itertools.islice(data, nrows - 1))\n        if dtype is not None:\n            data = np.array(values, dtype=dtype)\n        else:\n            data = values\n    if isinstance(data, dict):\n        if columns is None:\n            columns = arr_columns = ensure_index(sorted(data))\n            arrays = [data[k] for k in columns]\n        else:\n            arrays = []\n            arr_columns = []\n            for k, v in data.items():\n                if k in columns:\n                    arr_columns.append(k)\n                    arrays.append(v)\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n    elif isinstance(data, (np.ndarray, DataFrame)):\n        arrays, columns = to_arrays(data, columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        arr_columns = columns\n    else:\n        arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n        arr_columns = ensure_index(arr_columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        else:\n            columns = arr_columns\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n    result_index = None\n    if index is not None:\n        if isinstance(index, str) or not hasattr(index, '__iter__'):\n            i = columns.get_loc(index)\n            exclude.add(index)\n            if len(arrays) > 0:\n                result_index = Index(arrays[i], name=index)\n            else:\n                result_index = Index([], name=index)\n        else:\n            try:\n                index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n            except (KeyError, TypeError):\n                result_index = index\n            else:\n                result_index = ensure_index_from_sequences(index_data, names=index)\n                exclude.update(index)\n    if any(exclude):\n        arr_exclude = [x for x in exclude if x in arr_columns]\n        to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n        arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n        arr_columns = arr_columns.drop(arr_exclude)\n        columns = columns.drop(exclude)\n    mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n    return cls(mgr)",
                            "def to_records(self, index=True, column_dtypes=None, index_dtypes=None):\n    \"\"\"\n    Convert DataFrame to a NumPy record array.\n\n    Index will be included as the first field of the record array if\n    requested.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include index in resulting record array, stored in 'index'\n        field or using the index label, if set.\n    column_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all columns. If\n        a dictionary, a mapping of column names and indices (zero-indexed)\n        to specific data types.\n    index_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all index levels. If\n        a dictionary, a mapping of index level names and indices\n        (zero-indexed) to specific data types.\n\n        This mapping is applied only if `index=True`.\n\n    Returns\n    -------\n    numpy.recarray\n        NumPy ndarray with the DataFrame labels as fields and each row\n        of the DataFrame as entries.\n\n    See Also\n    --------\n    DataFrame.from_records: Convert structured or record ndarray\n        to DataFrame.\n    numpy.recarray: An ndarray that allows field access using\n        attributes, analogous to typed columns in a\n        spreadsheet.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n    ...                   index=['a', 'b'])\n    >>> df\n       A     B\n    a  1  0.50\n    b  2  0.75\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    If the DataFrame index has no label then the recarray field name\n    is set to 'index'. If the index has a label then this is used as the\n    field name:\n\n    >>> df.index = df.index.rename(\"I\")\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    The index can be excluded from the record array:\n\n    >>> df.to_records(index=False)\n    rec.array([(1, 0.5 ), (2, 0.75)],\n              dtype=[('A', '<i8'), ('B', '<f8')])\n\n    Data types can be specified for the columns:\n\n    >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n    As well as for the index:\n\n    >>> df.to_records(index_dtypes=\"<S2\")\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n    >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n    >>> df.to_records(index_dtypes=index_dtypes)\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n    \"\"\"\n    if index:\n        if isinstance(self.index, ABCMultiIndex):\n            ix_vals = list(map(np.array, zip(*self.index.values)))\n        else:\n            ix_vals = [self.index.values]\n        arrays = ix_vals + [self[c]._internal_get_values() for c in self.columns]\n        count = 0\n        index_names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i, n in enumerate(index_names):\n                if n is None:\n                    index_names[i] = f'level_{count}'\n                    count += 1\n        elif index_names[0] is None:\n            index_names = ['index']\n        names = [str(name) for name in itertools.chain(index_names, self.columns)]\n    else:\n        arrays = [self[c]._internal_get_values() for c in self.columns]\n        names = [str(c) for c in self.columns]\n        index_names = []\n    index_len = len(index_names)\n    formats = []\n    for i, v in enumerate(arrays):\n        index = i\n        if index < index_len:\n            dtype_mapping = index_dtypes\n            name = index_names[index]\n        else:\n            index -= index_len\n            dtype_mapping = column_dtypes\n            name = self.columns[index]\n        if is_dict_like(dtype_mapping):\n            if name in dtype_mapping:\n                dtype_mapping = dtype_mapping[name]\n            elif index in dtype_mapping:\n                dtype_mapping = dtype_mapping[index]\n            else:\n                dtype_mapping = None\n        if dtype_mapping is None:\n            formats.append(v.dtype)\n        elif isinstance(dtype_mapping, (type, np.dtype, str)):\n            formats.append(dtype_mapping)\n        else:\n            element = 'row' if i < index_len else 'column'\n            msg = f'Invalid dtype {dtype_mapping} specified for {element} {name}'\n            raise ValueError(msg)\n    return np.rec.fromarrays(arrays, dtype={'names': names, 'formats': formats})",
                            "@classmethod\ndef _from_arrays(cls, arrays, columns, index, dtype=None):\n    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n    return cls(mgr)",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_stata(self, path, convert_dates=None, write_index=True, byteorder=None, time_stamp=None, data_label=None, variable_labels=None, version=114, convert_strl=None):\n    \"\"\"\n    Export DataFrame object to Stata dta format.\n\n    Writes the DataFrame to a Stata dataset file.\n    \"dta\" files contain a Stata dataset.\n\n    Parameters\n    ----------\n    path : str, buffer or path object\n        String, path object (pathlib.Path or py._path.local.LocalPath) or\n        object implementing a binary write() function. If using a buffer\n        then the buffer will not be automatically closed after the file\n        data has been written.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    convert_dates : dict\n        Dictionary mapping columns containing datetime types to stata\n        internal format to use when writing the dates. Options are 'tc',\n        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n        or a name. Datetime columns that do not have a conversion type\n        specified will be converted to 'tc'. Raises NotImplementedError if\n        a datetime column has timezone information.\n    write_index : bool\n        Write the index to Stata dataset.\n    byteorder : str\n        Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n    time_stamp : datetime\n        A datetime to use as file creation date.  Default is the current\n        time.\n    data_label : str, optional\n        A label for the data set.  Must be 80 characters or smaller.\n    variable_labels : dict\n        Dictionary containing columns as keys and variable labels as\n        values. Each label must be 80 characters or smaller.\n    version : {114, 117}, default 114\n        Version to use in the output dta file.  Version 114 can be used\n        read by Stata 10 and later.  Version 117 can be read by Stata 13\n        or later. Version 114 limits string variables to 244 characters or\n        fewer while 117 allows strings with lengths up to 2,000,000\n        characters.\n\n        .. versionadded:: 0.23.0\n\n    convert_strl : list, optional\n        List of column names to convert to string columns to Stata StrL\n        format. Only available if version is 117.  Storing strings in the\n        StrL format can produce smaller dta files if strings have more than\n        8 characters and values are repeated.\n\n        .. versionadded:: 0.23.0\n\n    Raises\n    ------\n    NotImplementedError\n        * If datetimes contain timezone information\n        * Column dtype is not representable in Stata\n    ValueError\n        * Columns listed in convert_dates are neither datetime64[ns]\n          or datetime.datetime\n        * Column listed in convert_dates is not in DataFrame\n        * Categorical label contains more than 32,000 characters\n\n    See Also\n    --------\n    read_stata : Import Stata data files.\n    io.stata.StataWriter : Low-level writer for Stata data files.\n    io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n    ...                               'parrot'],\n    ...                    'speed': [350, 18, 361, 15]})\n    >>> df.to_stata('animals.dta')  # doctest: +SKIP\n    \"\"\"\n    kwargs = {}\n    if version not in (114, 117):\n        raise ValueError('Only formats 114 and 117 supported.')\n    if version == 114:\n        if convert_strl is not None:\n            raise ValueError('strl support is only available when using format 117')\n        from pandas.io.stata import StataWriter as statawriter\n    else:\n        from pandas.io.stata import StataWriter117 as statawriter\n        kwargs['convert_strl'] = convert_strl\n    writer = statawriter(path, self, convert_dates=convert_dates, byteorder=byteorder, time_stamp=time_stamp, data_label=data_label, write_index=write_index, variable_labels=variable_labels, **kwargs)\n    writer.write_file()",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_feather(self, path):\n    \"\"\"\n    Write out the binary feather-format for DataFrames.\n\n    Parameters\n    ----------\n    path : str\n        String file path.\n    \"\"\"\n    from pandas.io.feather_format import to_feather\n    to_feather(self, path)",
                            "@deprecate_kwarg(old_arg_name='fname', new_arg_name='path')\ndef to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs):\n    \"\"\"\n    Write a DataFrame to the binary parquet format.\n\n    .. versionadded:: 0.21.0\n\n    This function writes the dataframe as a `parquet file\n    <https://parquet.apache.org/>`_. You can choose different parquet\n    backends, and have the option of compression. See\n    :ref:`the user guide <io.parquet>` for more details.\n\n    Parameters\n    ----------\n    path : str\n        File path or Root Directory path. Will be used as Root Directory\n        path while writing a partitioned dataset.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n        Parquet library to use. If 'auto', then the option\n        ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n        behavior is to try 'pyarrow', falling back to 'fastparquet' if\n        'pyarrow' is unavailable.\n    compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n        Name of the compression to use. Use ``None`` for no compression.\n    index : bool, default None\n        If ``True``, include the dataframe's index(es) in the file output.\n        If ``False``, they will not be written to the file.\n        If ``None``, similar to ``True`` the dataframe's index(es)\n        will be saved. However, instead of being saved as values,\n        the RangeIndex will be stored as a range in the metadata so it\n        doesn't require much space and is faster. Other indexes will\n        be included as columns in the file output.\n\n        .. versionadded:: 0.24.0\n\n    partition_cols : list, optional, default None\n        Column names by which to partition the dataset.\n        Columns are partitioned in the order they are given.\n\n        .. versionadded:: 0.24.0\n\n    **kwargs\n        Additional arguments passed to the parquet library. See\n        :ref:`pandas io <io.parquet>` for more details.\n\n    See Also\n    --------\n    read_parquet : Read a parquet file.\n    DataFrame.to_csv : Write a csv file.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_hdf : Write to hdf.\n\n    Notes\n    -----\n    This function requires either the `fastparquet\n    <https://pypi.org/project/fastparquet>`_ or `pyarrow\n    <https://arrow.apache.org/docs/python/>`_ library.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.to_parquet('df.parquet.gzip',\n    ...               compression='gzip')  # doctest: +SKIP\n    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n       col1  col2\n    0     1     3\n    1     2     4\n    \"\"\"\n    from pandas.io.parquet import to_parquet\n    to_parquet(self, path, engine, compression=compression, index=index, partition_cols=partition_cols, **kwargs)",
                            "@Substitution(header_type='bool', header='Whether to print column labels, default True', col_space_type='str or int', col_space='The minimum width of each column in CSS length units.  An int is assumed to be px units.\\n\\n            .. versionadded:: 0.25.0\\n                Ability to use str')\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None):\n    \"\"\"\n    Render a DataFrame as an HTML table.\n    %(shared_params)s\n    bold_rows : bool, default True\n        Make the row labels bold in the output.\n    classes : str or list or tuple, default None\n        CSS class(es) to apply to the resulting html table.\n    escape : bool, default True\n        Convert the characters <, >, and & to HTML-safe sequences.\n    notebook : {True, False}, default False\n        Whether the generated HTML is for IPython Notebook.\n    border : int\n        A ``border=border`` attribute is included in the opening\n        `<table>` tag. Default ``pd.options.display.html.border``.\n    encoding : str, default \"utf-8\"\n        Set character encoding\n\n        .. versionadded:: 1.0\n    table_id : str, optional\n        A css id is included in the opening `<table>` tag if specified.\n\n        .. versionadded:: 0.23.0\n\n    render_links : bool, default False\n        Convert URLs to HTML links.\n\n        .. versionadded:: 0.24.0\n    %(returns)s\n    See Also\n    --------\n    to_string : Convert DataFrame to a string.\n    \"\"\"\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError('Invalid value for justify parameter')\n    formatter = fmt.DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, formatters=formatters, float_format=float_format, sparsify=sparsify, justify=justify, index_names=index_names, header=header, index=index, bold_rows=bold_rows, escape=escape, max_rows=max_rows, max_cols=max_cols, show_dimensions=show_dimensions, decimal=decimal, table_id=table_id, render_links=render_links)\n    return formatter.to_html(buf=buf, classes=classes, notebook=notebook, border=border, encoding=encoding)",
                            "def info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None):\n    \"\"\"\n    Print a concise summary of a DataFrame.\n\n    This method prints information about a DataFrame including\n    the index dtype and column dtypes, non-null values and memory usage.\n\n    Parameters\n    ----------\n    verbose : bool, optional\n        Whether to print the full summary. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is followed.\n    buf : writable buffer, defaults to sys.stdout\n        Where to send the output. By default, the output is printed to\n        sys.stdout. Pass a writable buffer if you need to further process\n        the output.\n    max_cols : int, optional\n        When to switch from the verbose to the truncated output. If the\n        DataFrame has more than `max_cols` columns, the truncated output\n        is used. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is used.\n    memory_usage : bool, str, optional\n        Specifies whether total memory usage of the DataFrame\n        elements (including the index) should be displayed. By default,\n        this follows the ``pandas.options.display.memory_usage`` setting.\n\n        True always show memory usage. False never shows memory usage.\n        A value of 'deep' is equivalent to \"True with deep introspection\".\n        Memory usage is shown in human-readable units (base-2\n        representation). Without deep introspection a memory estimation is\n        made based in column dtype and number of rows assuming values\n        consume the same memory amount for corresponding dtypes. With deep\n        memory introspection, a real memory usage calculation is performed\n        at the cost of computational resources.\n    null_counts : bool, optional\n        Whether to show the non-null counts. By default, this is shown\n        only if the frame is smaller than\n        ``pandas.options.display.max_info_rows`` and\n        ``pandas.options.display.max_info_columns``. A value of True always\n        shows the counts, and False never shows the counts.\n\n    Returns\n    -------\n    None\n        This method prints a summary of a DataFrame and returns None.\n\n    See Also\n    --------\n    DataFrame.describe: Generate descriptive statistics of DataFrame\n        columns.\n    DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n    Examples\n    --------\n    >>> int_values = [1, 2, 3, 4, 5]\n    >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n    >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n    >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n    ...                   \"float_col\": float_values})\n    >>> df\n       int_col text_col  float_col\n    0        1    alpha       0.00\n    1        2     beta       0.25\n    2        3    gamma       0.50\n    3        4    delta       0.75\n    4        5  epsilon       1.00\n\n    Prints information of all columns:\n\n    >>> df.info(verbose=True)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Data columns (total 3 columns):\n    int_col      5 non-null int64\n    text_col     5 non-null object\n    float_col    5 non-null float64\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Prints a summary of columns count and its dtypes but not per column\n    information:\n\n    >>> df.info(verbose=False)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Columns: 3 entries, int_col to float_col\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n    buffer content and writes to a text file:\n\n    >>> import io\n    >>> buffer = io.StringIO()\n    >>> df.info(buf=buffer)\n    >>> s = buffer.getvalue()\n    >>> with open(\"df_info.txt\", \"w\",\n    ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n    ...     f.write(s)\n    260\n\n    The `memory_usage` parameter allows deep introspection mode, specially\n    useful for big DataFrames and fine-tune memory optimization:\n\n    >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    >>> df = pd.DataFrame({\n    ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    ... })\n    >>> df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 22.9+ MB\n\n    >>> df.info(memory_usage='deep')\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 188.8 MB\n    \"\"\"\n    if buf is None:\n        buf = sys.stdout\n    lines = []\n    lines.append(str(type(self)))\n    lines.append(self.index._summary())\n    if len(self.columns) == 0:\n        lines.append(f'Empty {type(self).__name__}')\n        fmt.buffer_put_lines(buf, lines)\n        return\n    cols = self.columns\n    if max_cols is None:\n        max_cols = get_option('display.max_info_columns', len(self.columns) + 1)\n    max_rows = get_option('display.max_info_rows', len(self) + 1)\n    if null_counts is None:\n        show_counts = len(self.columns) <= max_cols and len(self) < max_rows\n    else:\n        show_counts = null_counts\n    exceeds_info_cols = len(self.columns) > max_cols\n\n    def _verbose_repr():\n        lines.append(f'Data columns (total {len(self.columns)} columns):')\n        space = max((len(pprint_thing(k)) for k in self.columns)) + 4\n        counts = None\n        tmpl = '{count}{dtype}'\n        if show_counts:\n            counts = self.count()\n            if len(cols) != len(counts):\n                raise AssertionError(f'Columns must equal counts ({len(cols)} != {len(counts)})')\n            tmpl = '{count} non-null {dtype}'\n        dtypes = self.dtypes\n        for i, col in enumerate(self.columns):\n            dtype = dtypes.iloc[i]\n            col = pprint_thing(col)\n            count = ''\n            if show_counts:\n                count = counts.iloc[i]\n            lines.append(_put_str(col, space) + tmpl.format(count=count, dtype=dtype))\n\n    def _non_verbose_repr():\n        lines.append(self.columns._summary(name='Columns'))\n\n    def _sizeof_fmt(num, size_qualifier):\n        for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n            if num < 1024.0:\n                return f'{num:3.1f}{size_qualifier} {x}'\n            num /= 1024.0\n        return f'{num:3.1f}{size_qualifier} PB'\n    if verbose:\n        _verbose_repr()\n    elif verbose is False:\n        _non_verbose_repr()\n    elif exceeds_info_cols:\n        _non_verbose_repr()\n    else:\n        _verbose_repr()\n    counts = self._data.get_dtype_counts()\n    dtypes = [f'{k[0]}({k[1]:d})' for k in sorted(counts.items())]\n    lines.append(f\"dtypes: {', '.join(dtypes)}\")\n    if memory_usage is None:\n        memory_usage = get_option('display.memory_usage')\n    if memory_usage:\n        size_qualifier = ''\n        if memory_usage == 'deep':\n            deep = True\n        else:\n            deep = False\n            if 'object' in counts or self.index._is_memory_usage_qualified():\n                size_qualifier = '+'\n        mem_usage = self.memory_usage(index=True, deep=deep).sum()\n        lines.append(f'memory usage: {_sizeof_fmt(mem_usage, size_qualifier)}\\n')\n    fmt.buffer_put_lines(buf, lines)",
                            "def memory_usage(self, index=True, deep=False):\n    \"\"\"\n    Return the memory usage of each column in bytes.\n\n    The memory usage can optionally include the contribution of\n    the index and elements of `object` dtype.\n\n    This value is displayed in `DataFrame.info` by default. This can be\n    suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the DataFrame's\n        index in returned Series. If ``index=True``, the memory usage of\n        the index is the first item in the output.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned values.\n\n    Returns\n    -------\n    Series\n        A Series whose index is the original column names and whose values\n        is the memory usage of each column in bytes.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n        ndarray.\n    Series.memory_usage : Bytes consumed by a Series.\n    Categorical : Memory-efficient array for string values with\n        many repeated values.\n    DataFrame.info : Concise summary of a DataFrame.\n\n    Examples\n    --------\n    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n    >>> data = dict([(t, np.ones(shape=5000).astype(t))\n    ...              for t in dtypes])\n    >>> df = pd.DataFrame(data)\n    >>> df.head()\n       int64  float64            complex128  object  bool\n    0      1      1.0    1.000000+0.000000j       1  True\n    1      1      1.0    1.000000+0.000000j       1  True\n    2      1      1.0    1.000000+0.000000j       1  True\n    3      1      1.0    1.000000+0.000000j       1  True\n    4      1      1.0    1.000000+0.000000j       1  True\n\n    >>> df.memory_usage()\n    Index           128\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    >>> df.memory_usage(index=False)\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    The memory footprint of `object` dtype columns is ignored by default:\n\n    >>> df.memory_usage(deep=True)\n    Index            128\n    int64          40000\n    float64        40000\n    complex128     80000\n    object        160000\n    bool            5000\n    dtype: int64\n\n    Use a Categorical for efficient storage of an object-dtype column with\n    many repeated values.\n\n    >>> df['object'].astype('category').memory_usage(deep=True)\n    5216\n    \"\"\"\n    result = Series([c.memory_usage(index=False, deep=deep) for col, c in self.items()], index=self.columns)\n    if index:\n        result = Series(self.index.memory_usage(deep=deep), index=['Index']).append(result)\n    return result",
                            "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    return super().transpose(1, 0, **kwargs)",
                            "def _ixs(self, i: int, axis: int=0):\n    \"\"\"\n    Parameters\n    ----------\n    i : int\n    axis : int\n\n    Notes\n    -----\n    If slice passed, the resulting data will be a view.\n    \"\"\"\n    if axis == 0:\n        new_values = self._data.fast_xs(i)\n        copy = isinstance(new_values, np.ndarray) and new_values.base is None\n        result = self._constructor_sliced(new_values, index=self.columns, name=self.index[i], dtype=new_values.dtype)\n        result._set_is_copy(self, copy=copy)\n        return result\n    else:\n        label = self.columns[i]\n        values = self._data.iget(i)\n        if len(self.index) and (not len(values)):\n            values = np.array([np.nan] * len(self.index), dtype=object)\n        result = self._box_col_values(values, label)\n        result._set_as_cached(label, self)\n        return result",
                            "def __getitem__(self, key):\n    key = lib.item_from_zerodim(key)\n    key = com.apply_if_callable(key, self)\n    if is_hashable(key):\n        if self.columns.is_unique and key in self.columns:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            return self._get_item_cache(key)\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        return self._slice(indexer, axis=0)\n    if isinstance(key, DataFrame):\n        return self.where(key)\n    if com.is_bool_indexer(key):\n        return self._getitem_bool_array(key)\n    is_single_key = isinstance(key, tuple) or not is_list_like(key)\n    if is_single_key:\n        if self.columns.nlevels > 1:\n            return self._getitem_multilevel(key)\n        indexer = self.columns.get_loc(key)\n        if is_integer(indexer):\n            indexer = [indexer]\n    else:\n        if is_iterator(key):\n            key = list(key)\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n    if getattr(indexer, 'dtype', None) == bool:\n        indexer = np.where(indexer)[0]\n    data = self.take(indexer, axis=1)\n    if is_single_key:\n        if data.shape[1] == 1 and (not isinstance(self.columns, ABCMultiIndex)):\n            data = data[key]\n    return data",
                            "def _getitem_bool_array(self, key):\n    if isinstance(key, Series) and (not key.index.equals(self.index)):\n        warnings.warn('Boolean Series key will be reindexed to match DataFrame index.', UserWarning, stacklevel=3)\n    elif len(key) != len(self.index):\n        raise ValueError(f'Item wrong length {len(key)} instead of {len(self.index)}.')\n    key = check_bool_indexer(self.index, key)\n    indexer = key.nonzero()[0]\n    return self.take(indexer, axis=0)",
                            "def _getitem_multilevel(self, key):\n    loc = self.columns.get_loc(key)\n    if isinstance(loc, (slice, Series, np.ndarray, Index)):\n        new_columns = self.columns[loc]\n        result_columns = maybe_droplevels(new_columns, key)\n        if self._is_mixed_type:\n            result = self.reindex(columns=new_columns)\n            result.columns = result_columns\n        else:\n            new_values = self.values[:, loc]\n            result = self._constructor(new_values, index=self.index, columns=result_columns)\n            result = result.__finalize__(self)\n        if len(result.columns) == 1:\n            top = result.columns[0]\n            if isinstance(top, tuple):\n                top = top[0]\n            if top == '':\n                result = result['']\n                if isinstance(result, Series):\n                    result = self._constructor_sliced(result, index=self.index, name=key)\n        result._set_is_copy(self)\n        return result\n    else:\n        return self._get_item_cache(key)",
                            "def _get_value(self, index, col, takeable: bool=False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n    try:\n        return engine.get_value(series._values, index)\n    except KeyError:\n        if self.index.nlevels > 1:\n            raise\n    except (TypeError, ValueError):\n        pass\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)",
                            "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        return self._setitem_slice(indexer, value)\n    if isinstance(key, DataFrame) or getattr(key, 'ndim', None) == 2:\n        self._setitem_frame(key, value)\n    elif isinstance(key, (Series, np.ndarray, list, Index)):\n        self._setitem_array(key, value)\n    else:\n        self._set_item(key, value)",
                            "def _setitem_slice(self, key, value):\n    self._check_setitem_copy()\n    self.loc[key] = value",
                            "def _setitem_array(self, key, value):\n    if com.is_bool_indexer(key):\n        if len(key) != len(self.index):\n            raise ValueError(f'Item wrong length {len(key)} instead of {len(self.index)}!')\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(indexer, value)\n    elif isinstance(value, DataFrame):\n        if len(value.columns) != len(key):\n            raise ValueError('Columns must be same length as key')\n        for k1, k2 in zip(key, value.columns):\n            self[k1] = value[k2]\n    else:\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=False)[1]\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer((slice(None), indexer), value)",
                            "def _setitem_frame(self, key, value):\n    if isinstance(key, np.ndarray):\n        if key.shape != self.shape:\n            raise ValueError('Array conditional must be same shape as self')\n        key = self._constructor(key, **self._construct_axes_dict())\n    if key.values.size and (not is_bool_dtype(key.values)):\n        raise TypeError('Must pass DataFrame or 2-d ndarray with boolean values only')\n    self._check_inplace_setting(value)\n    self._check_setitem_copy()\n    self._where(-key, value, inplace=True)",
                            "def _set_item(self, key, value):\n    \"\"\"\n    Add series to DataFrame in specified column.\n\n    If series is a numpy-array (not a Series/TimeSeries), it must be the\n    same length as the DataFrames index or an error will be thrown.\n\n    Series/TimeSeries will be conformed to the DataFrames index to\n    ensure homogeneity.\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(key, value)\n    NDFrame._set_item(self, key, value)\n    if len(self):\n        self._check_setitem_copy()",
                            "def _set_value(self, index, col, value, takeable: bool=False):\n    \"\"\"\n    Put single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    value : scalar\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    DataFrame\n        If label pair is contained, will be reference to calling DataFrame,\n        otherwise a new object.\n    \"\"\"\n    try:\n        if takeable is True:\n            series = self._iget_item_cache(col)\n            return series._set_value(index, value, takeable=True)\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        engine.set_value(series._values, index, value)\n        return self\n    except (KeyError, TypeError):\n        if takeable:\n            self.iloc[index, col] = value\n        else:\n            self.loc[index, col] = value\n        self._item_cache.pop(col, None)\n        return self",
                            "def _ensure_valid_index(self, value):\n    \"\"\"\n    Ensure that if we don't have an index, that we can create one from the\n    passed value.\n    \"\"\"\n    if not len(self.index) and is_list_like(value) and len(value):\n        try:\n            value = Series(value)\n        except (ValueError, NotImplementedError, TypeError):\n            raise ValueError('Cannot set a frame with no defined index and a value that cannot be converted to a Series')\n        self._data = self._data.reindex_axis(value.index.copy(), axis=1, fill_value=np.nan)",
                            "def _box_item_values(self, key, values):\n    items = self.columns[self.columns.get_loc(key)]\n    if values.ndim == 2:\n        return self._constructor(values.T, columns=items, index=self.index)\n    else:\n        return self._box_col_values(values, items)",
                            "def _box_col_values(self, values, items):\n    \"\"\"\n    Provide boxed values for a column.\n    \"\"\"\n    klass = self._constructor_sliced\n    return klass(values, index=self.index, name=items, fastpath=True)",
                            "def query(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Query the columns of a DataFrame with a boolean expression.\n\n    Parameters\n    ----------\n    expr : str\n        The query string to evaluate.  You can refer to variables\n        in the environment by prefixing them with an '@' character like\n        ``@a + b``.\n\n        .. versionadded:: 0.25.0\n\n        You can refer to column names that contain spaces by surrounding\n        them in backticks.\n\n        For example, if one of your columns is called ``a a`` and you want\n        to sum it with ``b``, your query should be ```a a` + b``.\n\n    inplace : bool\n        Whether the query should modify the data in place or return\n        a modified copy.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame resulting from the provided query expression.\n\n    See Also\n    --------\n    eval : Evaluate a string describing operations on\n        DataFrame columns.\n    DataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\n    Notes\n    -----\n    The result of the evaluation of this expression is first passed to\n    :attr:`DataFrame.loc` and if that fails because of a\n    multidimensional key (e.g., a DataFrame) then the result will be passed\n    to :meth:`DataFrame.__getitem__`.\n\n    This method uses the top-level :func:`eval` function to\n    evaluate the passed query.\n\n    The :meth:`~pandas.DataFrame.query` method uses a slightly\n    modified Python syntax by default. For example, the ``&`` and ``|``\n    (bitwise) operators have the precedence of their boolean cousins,\n    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n    however the semantics are different.\n\n    You can change the semantics of the expression by passing the keyword\n    argument ``parser='python'``. This enforces the same semantics as\n    evaluation in Python space. Likewise, you can pass ``engine='python'``\n    to evaluate an expression using Python itself as a backend. This is not\n    recommended as it is inefficient compared to using ``numexpr`` as the\n    engine.\n\n    The :attr:`DataFrame.index` and\n    :attr:`DataFrame.columns` attributes of the\n    :class:`~pandas.DataFrame` instance are placed in the query namespace\n    by default, which allows you to treat both the index and columns of the\n    frame as a column in the frame.\n    The identifier ``index`` is used for the frame index; you can also\n    use the name of the index to identify it in a query. Please note that\n    Python keywords may not be used as identifiers.\n\n    For further details and examples see the ``query`` documentation in\n    :ref:`indexing <indexing.query>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6),\n    ...                    'B': range(10, 0, -2),\n    ...                    'C C': range(10, 5, -1)})\n    >>> df\n       A   B  C C\n    0  1  10   10\n    1  2   8    9\n    2  3   6    8\n    3  4   4    7\n    4  5   2    6\n    >>> df.query('A > B')\n       A  B  C C\n    4  5  2    6\n\n    The previous expression is equivalent to\n\n    >>> df[df.A > df.B]\n       A  B  C C\n    4  5  2    6\n\n    For columns with spaces in their name, you can use backtick quoting.\n\n    >>> df.query('B == `C C`')\n       A   B  C C\n    0  1  10   10\n\n    The previous expression is equivalent to\n\n    >>> df[df.B == df['C C']]\n       A   B  C C\n    0  1  10   10\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(expr, str):\n        msg = f'expr must be a string to be evaluated, {type(expr)} given'\n        raise ValueError(msg)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    kwargs['target'] = None\n    res = self.eval(expr, **kwargs)\n    try:\n        new_data = self.loc[res]\n    except ValueError:\n        new_data = self[res]\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return new_data",
                            "def eval(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Evaluate a string describing operations on DataFrame columns.\n\n    Operates on columns only, not specific rows or elements.  This allows\n    `eval` to run arbitrary code, which can make you vulnerable to code\n    injection if you pass user input to this function.\n\n    Parameters\n    ----------\n    expr : str\n        The expression string to evaluate.\n    inplace : bool, default False\n        If the expression contains an assignment, whether to perform the\n        operation inplace and mutate the existing DataFrame. Otherwise,\n        a new DataFrame is returned.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by\n        :meth:`~pandas.DataFrame.query`.\n\n    Returns\n    -------\n    ndarray, scalar, or pandas object\n        The result of the evaluation.\n\n    See Also\n    --------\n    DataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\n    DataFrame.assign : Can evaluate an expression or function to create new\n        values for a column.\n    eval : Evaluate a Python expression as a string using various\n        backends.\n\n    Notes\n    -----\n    For more details see the API documentation for :func:`~eval`.\n    For detailed examples see :ref:`enhancing performance with eval\n    <enhancingperf.eval>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n    >>> df.eval('A + B')\n    0    11\n    1    10\n    2     9\n    3     8\n    4     7\n    dtype: int64\n\n    Assignment is allowed though by default the original DataFrame is not\n    modified.\n\n    >>> df.eval('C = A + B')\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n\n    Use ``inplace=True`` to modify the original DataFrame.\n\n    >>> df.eval('C = A + B', inplace=True)\n    >>> df\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    \"\"\"\n    from pandas.core.computation.eval import eval as _eval\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    resolvers = kwargs.pop('resolvers', None)\n    kwargs['level'] = kwargs.pop('level', 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_space_character_free_column_resolvers()\n        resolvers = (column_resolvers, index_resolvers)\n    if 'target' not in kwargs:\n        kwargs['target'] = self\n    kwargs['resolvers'] = kwargs.get('resolvers', ()) + tuple(resolvers)\n    return _eval(expr, inplace=inplace, **kwargs)",
                            "def select_dtypes(self, include=None, exclude=None):\n    \"\"\"\n    Return a subset of the DataFrame's columns based on the column dtypes.\n\n    Parameters\n    ----------\n    include, exclude : scalar or list-like\n        A selection of dtypes or strings to be included/excluded. At least\n        one of these parameters must be supplied.\n\n    Returns\n    -------\n    DataFrame\n        The subset of the frame including the dtypes in ``include`` and\n        excluding the dtypes in ``exclude``.\n\n    Raises\n    ------\n    ValueError\n        * If both of ``include`` and ``exclude`` are empty\n        * If ``include`` and ``exclude`` have overlapping elements\n        * If any kind of string dtype is passed in.\n\n    Notes\n    -----\n    * To select all *numeric* types, use ``np.number`` or ``'number'``\n    * To select strings you must use the ``object`` dtype, but note that\n      this will return *all* object dtype columns\n    * See the `numpy dtype hierarchy\n      <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n      ``'datetime64'``\n    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n      ``'timedelta64'``\n    * To select Pandas categorical dtypes, use ``'category'``\n    * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n      0.20.0) or ``'datetime64[ns, tz]'``\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'a': [1, 2] * 3,\n    ...                    'b': [True, False] * 3,\n    ...                    'c': [1.0, 2.0] * 3})\n    >>> df\n            a      b  c\n    0       1   True  1.0\n    1       2  False  2.0\n    2       1   True  1.0\n    3       2  False  2.0\n    4       1   True  1.0\n    5       2  False  2.0\n\n    >>> df.select_dtypes(include='bool')\n       b\n    0  True\n    1  False\n    2  True\n    3  False\n    4  True\n    5  False\n\n    >>> df.select_dtypes(include=['float64'])\n       c\n    0  1.0\n    1  2.0\n    2  1.0\n    3  2.0\n    4  1.0\n    5  2.0\n\n    >>> df.select_dtypes(exclude=['int'])\n           b    c\n    0   True  1.0\n    1  False  2.0\n    2   True  1.0\n    3  False  2.0\n    4   True  1.0\n    5  False  2.0\n    \"\"\"\n    if not is_list_like(include):\n        include = (include,) if include is not None else ()\n    if not is_list_like(exclude):\n        exclude = (exclude,) if exclude is not None else ()\n    selection = (frozenset(include), frozenset(exclude))\n    if not any(selection):\n        raise ValueError('at least one of include or exclude must be nonempty')\n    include = frozenset((infer_dtype_from_object(x) for x in include))\n    exclude = frozenset((infer_dtype_from_object(x) for x in exclude))\n    for dtypes in (include, exclude):\n        invalidate_string_dtypes(dtypes)\n    if not include.isdisjoint(exclude):\n        raise ValueError(f'include and exclude overlap on {include & exclude}')\n    keep_these = np.full(self.shape[1], True)\n\n    def extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]:\n        extracted_dtypes = [unique_dtype for unique_dtype in unique_dtypes if issubclass(unique_dtype.type, tuple(dtypes_set))]\n        return extracted_dtypes\n    unique_dtypes = self.dtypes.unique()\n    if include:\n        included_dtypes = extract_unique_dtypes_from_dtypes_set(include, unique_dtypes)\n        keep_these &= self.dtypes.isin(included_dtypes)\n    if exclude:\n        excluded_dtypes = extract_unique_dtypes_from_dtypes_set(exclude, unique_dtypes)\n        keep_these &= ~self.dtypes.isin(excluded_dtypes)\n    return self.iloc[:, keep_these.values]",
                            "def insert(self, loc, column, value, allow_duplicates=False):\n    \"\"\"\n    Insert column into DataFrame at specified location.\n\n    Raises a ValueError if `column` is already contained in the DataFrame,\n    unless `allow_duplicates` is set to True.\n\n    Parameters\n    ----------\n    loc : int\n        Insertion index. Must verify 0 <= loc <= len(columns).\n    column : str, number, or hashable object\n        Label of the inserted column.\n    value : int, Series, or array-like\n    allow_duplicates : bool, optional\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(column, value, broadcast=False)\n    self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
                            "def assign(self, **kwargs):\n    \"\"\"\n    Assign new columns to a DataFrame.\n\n    Returns a new object with all original columns in addition to new ones.\n    Existing columns that are re-assigned will be overwritten.\n\n    Parameters\n    ----------\n    **kwargs : dict of {str: callable or Series}\n        The column names are keywords. If the values are\n        callable, they are computed on the DataFrame and\n        assigned to the new columns. The callable must not\n        change input DataFrame (though pandas doesn't check it).\n        If the values are not callable, (e.g. a Series, scalar, or array),\n        they are simply assigned.\n\n    Returns\n    -------\n    DataFrame\n        A new DataFrame with the new columns in addition to\n        all the existing columns.\n\n    Notes\n    -----\n    Assigning multiple columns within the same ``assign`` is possible.\n    Later items in '\\\\*\\\\*kwargs' may refer to newly created or modified\n    columns in 'df'; items are computed and assigned into 'df' in order.\n\n    .. versionchanged:: 0.23.0\n\n       Keyword argument order is maintained.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n    ...                   index=['Portland', 'Berkeley'])\n    >>> df\n              temp_c\n    Portland    17.0\n    Berkeley    25.0\n\n    Where the value is a callable, evaluated on `df`:\n\n    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    Alternatively, the same behavior can be achieved by directly\n    referencing an existing Series or sequence:\n\n    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    You can create multiple columns within the same assign where one\n    of the columns depends on another one defined within the same assign:\n\n    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n    ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n              temp_c  temp_f  temp_k\n    Portland    17.0    62.6  290.15\n    Berkeley    25.0    77.0  298.15\n    \"\"\"\n    data = self.copy()\n    for k, v in kwargs.items():\n        data[k] = com.apply_if_callable(v, data)\n    return data",
                            "def _sanitize_column(self, key, value, broadcast=True):\n    \"\"\"\n    Ensures new columns (which go into the BlockManager as new blocks) are\n    always copied and converted into an array.\n\n    Parameters\n    ----------\n    key : object\n    value : scalar, Series, or array-like\n    broadcast : bool, default True\n        If ``key`` matches multiple duplicate column names in the\n        DataFrame, this parameter indicates whether ``value`` should be\n        tiled so that the returned array contains a (duplicated) column for\n        each occurrence of the key. If False, ``value`` will not be tiled.\n\n    Returns\n    -------\n    numpy.ndarray\n    \"\"\"\n\n    def reindexer(value):\n        if value.index.equals(self.index) or not len(self.index):\n            value = value._values.copy()\n        else:\n            try:\n                value = value.reindex(self.index)._values\n            except ValueError as err:\n                if not value.index.is_unique:\n                    raise err\n                raise TypeError('incompatible index of inserted column with frame index')\n        return value\n    if isinstance(value, Series):\n        value = reindexer(value)\n    elif isinstance(value, DataFrame):\n        if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n            loc = self.columns.get_loc(key)\n            if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                cols = maybe_droplevels(self.columns[loc], key)\n                if len(cols) and (not cols.equals(value.columns)):\n                    value = value.reindex(cols, axis=1)\n        value = reindexer(value).T\n    elif isinstance(value, ExtensionArray):\n        value = value.copy()\n        value = sanitize_index(value, self.index, copy=False)\n    elif isinstance(value, Index) or is_sequence(value):\n        value = sanitize_index(value, self.index, copy=False)\n        if not isinstance(value, (np.ndarray, Index)):\n            if isinstance(value, list) and len(value) > 0:\n                value = maybe_convert_platform(value)\n            else:\n                value = com.asarray_tuplesafe(value)\n        elif value.ndim == 2:\n            value = value.copy().T\n        elif isinstance(value, Index):\n            value = value.copy(deep=True)\n        else:\n            value = value.copy()\n        if is_object_dtype(value.dtype):\n            value = maybe_infer_to_datetimelike(value)\n    else:\n        infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n        value = cast_scalar_to_array(len(self.index), value)\n        value = maybe_cast_to_datetime(value, infer_dtype)\n    if is_extension_array_dtype(value):\n        return value\n    if broadcast and key in self.columns and (value.ndim == 1):\n        if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n            existing_piece = self[key]\n            if isinstance(existing_piece, DataFrame):\n                value = np.tile(value, (len(existing_piece.columns), 1))\n    return np.atleast_2d(np.asarray(value))",
                            "@property\ndef _series(self):\n    return {item: Series(self._data.iget(idx), index=self.index, name=item) for idx, item in enumerate(self.columns)}",
                            "def lookup(self, row_labels, col_labels):\n    \"\"\"\n    Label-based \"fancy indexing\" function for DataFrame.\n\n    Given equal-length arrays of row and column labels, return an\n    array of the values corresponding to each (row, col) pair.\n\n    Parameters\n    ----------\n    row_labels : sequence\n        The row labels to use for lookup.\n    col_labels : sequence\n        The column labels to use for lookup.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    Examples\n    --------\n    values : ndarray\n        The found values\n    \"\"\"\n    n = len(row_labels)\n    if n != len(col_labels):\n        raise ValueError('Row labels must have same size as column labels')\n    thresh = 1000\n    if not self._is_mixed_type or n > thresh:\n        values = self.values\n        ridx = self.index.get_indexer(row_labels)\n        cidx = self.columns.get_indexer(col_labels)\n        if (ridx == -1).any():\n            raise KeyError('One or more row labels was not found')\n        if (cidx == -1).any():\n            raise KeyError('One or more column labels was not found')\n        flat_index = ridx * len(self.columns) + cidx\n        result = values.flat[flat_index]\n    else:\n        result = np.empty(n, dtype='O')\n        for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n            result[i] = self._get_value(r, c)\n    if is_object_dtype(result):\n        result = lib.maybe_convert_objects(result)\n    return result",
                            "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    frame = self\n    columns = axes['columns']\n    if columns is not None:\n        frame = frame._reindex_columns(columns, method, copy, level, fill_value, limit, tolerance)\n    index = axes['index']\n    if index is not None:\n        frame = frame._reindex_index(index, method, copy, level, fill_value, limit, tolerance)\n    return frame",
                            "def _reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None):\n    new_index, indexer = self.index.reindex(new_index, method=method, level=level, limit=limit, tolerance=tolerance)\n    return self._reindex_with_indexers({0: [new_index, indexer]}, copy=copy, fill_value=fill_value, allow_dups=False)",
                            "def _reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None):\n    new_columns, indexer = self.columns.reindex(new_columns, method=method, level=level, limit=limit, tolerance=tolerance)\n    return self._reindex_with_indexers({1: [new_columns, indexer]}, copy=copy, fill_value=fill_value, allow_dups=False)",
                            "def _reindex_multi(self, axes, copy, fill_value):\n    \"\"\"\n    We are guaranteed non-Nones in the axes.\n    \"\"\"\n    new_index, row_indexer = self.index.reindex(axes['index'])\n    new_columns, col_indexer = self.columns.reindex(axes['columns'])\n    if row_indexer is not None and col_indexer is not None:\n        indexer = (row_indexer, col_indexer)\n        new_values = algorithms.take_2d_multi(self.values, indexer, fill_value=fill_value)\n        return self._constructor(new_values, index=new_index, columns=new_columns)\n    else:\n        return self._reindex_with_indexers({0: [new_index, row_indexer], 1: [new_columns, col_indexer]}, copy=copy, fill_value=fill_value)",
                            "@Appender(_shared_docs['align'] % _shared_doc_kwargs)\ndef align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None):\n    return super().align(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis, broadcast_axis=broadcast_axis)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.reindex.__doc__)\n@rewrite_axis_style_signature('labels', [('method', None), ('copy', True), ('level', None), ('fill_value', np.nan), ('limit', None), ('tolerance', None)])\ndef reindex(self, *args, **kwargs):\n    axes = validate_axis_style_args(self, args, kwargs, 'labels', 'reindex')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('labels', None)\n    return super().reindex(**kwargs)",
                            "def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise'):\n    \"\"\"\n    Drop specified labels from rows or columns.\n\n    Remove rows or columns by specifying label names and corresponding\n    axis, or by specifying directly index or column names. When using a\n    multi-index, labels on different levels can be removed by specifying\n    the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index or column labels to drop.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Whether to drop labels from the index (0 or 'index') or\n        columns (1 or 'columns').\n    index : single label or list-like\n        Alternative to specifying axis (``labels, axis=0``\n        is equivalent to ``index=labels``).\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        Alternative to specifying axis (``labels, axis=1``\n        is equivalent to ``columns=labels``).\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level from which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are\n        dropped.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame without the removed index or column labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis.\n\n    See Also\n    --------\n    DataFrame.loc : Label-location based indexer for selection by label.\n    DataFrame.dropna : Return DataFrame with labels on given axis omitted\n        where (all or any) data are missing.\n    DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n        removed, optionally only considering certain columns.\n    Series.drop : Return Series with specified index labels removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n    ...                   columns=['A', 'B', 'C', 'D'])\n    >>> df\n       A  B   C   D\n    0  0  1   2   3\n    1  4  5   6   7\n    2  8  9  10  11\n\n    Drop columns\n\n    >>> df.drop(['B', 'C'], axis=1)\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    >>> df.drop(columns=['B', 'C'])\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    Drop a row by index\n\n    >>> df.drop([0, 1])\n       A  B   C   D\n    2  8  9  10  11\n\n    Drop columns and/or rows of MultiIndex DataFrame\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n    ...                         [250, 150], [1.5, 0.8], [320, 250],\n    ...                         [1, 0.8], [0.3, 0.2]])\n    >>> df\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n            length  1.5     1.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n            length  1.5     0.8\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n            length  0.3     0.2\n\n    >>> df.drop(index='cow', columns='small')\n                    big\n    lama    speed   45.0\n            weight  200.0\n            length  1.5\n    falcon  speed   320.0\n            weight  1.0\n            length  0.3\n\n    >>> df.drop(index='length', level=1)\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n    \"\"\"\n    return super().drop(labels=labels, axis=axis, index=index, columns=columns, level=level, inplace=inplace, errors=errors)",
                            "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False), ('level', None), ('errors', 'ignore')])\ndef rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes labels.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    mapper : dict-like or function\n        Dict-like or functions transformations to apply to\n        that axis' values. Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index`` and\n        ``columns``.\n    index : dict-like or function\n        Alternative to specifying axis (``mapper, axis=0``\n        is equivalent to ``index=mapper``).\n    columns : dict-like or function\n        Alternative to specifying axis (``mapper, axis=1``\n        is equivalent to ``columns=mapper``).\n    axis : int or str\n        Axis to target with ``mapper``. Can be either the axis name\n        ('index', 'columns') or number (0, 1). The default is 'index'.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new DataFrame. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with the renamed axis labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    DataFrame.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Rename columns using a mapping:\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Rename index using a mapping:\n\n    >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n       A  B\n    x  1  4\n    y  2  5\n    z  3  6\n\n    Cast index labels to a different type:\n\n    >>> df.index\n    RangeIndex(start=0, stop=3, step=1)\n    >>> df.rename(index=str).index\n    Index(['0', '1', '2'], dtype='object')\n\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n    Traceback (most recent call last):\n    KeyError: ['C'] not found in axis\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n    \"\"\"\n    axes = validate_axis_style_args(self, args, kwargs, 'mapper', 'rename')\n    kwargs.update(axes)\n    kwargs.pop('axis', None)\n    kwargs.pop('mapper', None)\n    return super().rename(**kwargs)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.fillna.__doc__)\ndef fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs):\n    return super().fillna(value=value, method=method, axis=axis, inplace=inplace, limit=limit, downcast=downcast, **kwargs)",
                            "@Appender(_shared_docs['replace'] % _shared_doc_kwargs)\ndef replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad'):\n    return super().replace(to_replace=to_replace, value=value, inplace=inplace, limit=limit, regex=regex, method=method)",
                            "@Appender(_shared_docs['shift'] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    return super().shift(periods=periods, freq=freq, axis=axis, fill_value=fill_value)",
                            "def set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False):\n    \"\"\"\n    Set the DataFrame index using existing columns.\n\n    Set the DataFrame index (row labels) using one or more existing\n    columns or arrays (of the correct length). The index can replace the\n    existing index or expand on it.\n\n    Parameters\n    ----------\n    keys : label or array-like or list of labels/arrays\n        This parameter can be either a single column key, a single array of\n        the same length as the calling DataFrame, or a list containing an\n        arbitrary combination of column keys and arrays. Here, \"array\"\n        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n        instances of :class:`~collections.abc.Iterator`.\n    drop : bool, default True\n        Delete columns to be used as the new index.\n    append : bool, default False\n        Whether to append columns to existing index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    verify_integrity : bool, default False\n        Check the new index for duplicates. Otherwise defer the check until\n        necessary. Setting to False will improve the performance of this\n        method.\n\n    Returns\n    -------\n    DataFrame\n        Changed row labels.\n\n    See Also\n    --------\n    DataFrame.reset_index : Opposite of set_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n    ...                    'year': [2012, 2014, 2013, 2014],\n    ...                    'sale': [55, 40, 84, 31]})\n    >>> df\n       month  year  sale\n    0      1  2012    55\n    1      4  2014    40\n    2      7  2013    84\n    3     10  2014    31\n\n    Set the index to become the 'month' column:\n\n    >>> df.set_index('month')\n           year  sale\n    month\n    1      2012    55\n    4      2014    40\n    7      2013    84\n    10     2014    31\n\n    Create a MultiIndex using columns 'year' and 'month':\n\n    >>> df.set_index(['year', 'month'])\n                sale\n    year  month\n    2012  1     55\n    2014  4     40\n    2013  7     84\n    2014  10    31\n\n    Create a MultiIndex using an Index and a column:\n\n    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n             month  sale\n       year\n    1  2012  1      55\n    2  2014  4      40\n    3  2013  7      84\n    4  2014  10     31\n\n    Create a MultiIndex using two Series:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> df.set_index([s, s**2])\n          month  year  sale\n    1 1       1  2012    55\n    2 4       4  2014    40\n    3 9       7  2013    84\n    4 16     10  2014    31\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not isinstance(keys, list):\n        keys = [keys]\n    err_msg = 'The parameter \"keys\" may be a column key, one-dimensional array, or a list containing only valid column keys and one-dimensional arrays.'\n    missing = []\n    for col in keys:\n        if isinstance(col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)):\n            if getattr(col, 'ndim', 1) != 1:\n                raise ValueError(err_msg)\n        else:\n            try:\n                found = col in self.columns\n            except TypeError:\n                raise TypeError(f'{err_msg}. Received column of type {type(col)}')\n            else:\n                if not found:\n                    missing.append(col)\n    if missing:\n        raise KeyError(f'None of {missing} are in the columns')\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n    arrays = []\n    names = []\n    if append:\n        names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n    to_remove = []\n    for col in keys:\n        if isinstance(col, ABCMultiIndex):\n            for n in range(col.nlevels):\n                arrays.append(col._get_level_values(n))\n            names.extend(col.names)\n        elif isinstance(col, (ABCIndexClass, ABCSeries)):\n            arrays.append(col)\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray)):\n            arrays.append(col)\n            names.append(None)\n        elif isinstance(col, abc.Iterator):\n            arrays.append(list(col))\n            names.append(None)\n        else:\n            arrays.append(frame[col]._values)\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n        if len(arrays[-1]) != len(self):\n            raise ValueError(f'Length mismatch: Expected {len(self)} rows, received array of length {len(arrays[-1])}')\n    index = ensure_index_from_sequences(arrays, names)\n    if verify_integrity and (not index.is_unique):\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError(f'Index has duplicate keys: {duplicates}')\n    for c in set(to_remove):\n        del frame[c]\n    index._cleanup()\n    frame.index = index\n    if not inplace:\n        return frame",
                            "def reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']:\n    \"\"\"\n    Reset the index, or a level of it.\n\n    Reset the index of the DataFrame, and use the default one instead.\n    If the DataFrame has a MultiIndex, this method can remove one or more\n    levels.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default None\n        Only remove the given levels from the index. Removes all levels by\n        default.\n    drop : bool, default False\n        Do not try to insert index into dataframe columns. This resets\n        the index to the default integer index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    col_level : int or str, default 0\n        If the columns have multiple levels, determines which level the\n        labels are inserted into. By default it is inserted into the first\n        level.\n    col_fill : object, default ''\n        If the columns have multiple levels, determines how the other\n        levels are named. If None then the index name is repeated.\n\n    Returns\n    -------\n    DataFrame or None\n        DataFrame with the new index or None if ``inplace=True``.\n\n    See Also\n    --------\n    DataFrame.set_index : Opposite of reset_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 389.0),\n    ...                    ('bird', 24.0),\n    ...                    ('mammal', 80.5),\n    ...                    ('mammal', np.nan)],\n    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n    ...                   columns=('class', 'max_speed'))\n    >>> df\n             class  max_speed\n    falcon    bird      389.0\n    parrot    bird       24.0\n    lion    mammal       80.5\n    monkey  mammal        NaN\n\n    When we reset the index, the old index is added as a column, and a\n    new sequential index is used:\n\n    >>> df.reset_index()\n        index   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    We can use the `drop` parameter to avoid the old index being added as\n    a column:\n\n    >>> df.reset_index(drop=True)\n        class  max_speed\n    0    bird      389.0\n    1    bird       24.0\n    2  mammal       80.5\n    3  mammal        NaN\n\n    You can also use `reset_index` with `MultiIndex`.\n\n    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n    ...                                    ('bird', 'parrot'),\n    ...                                    ('mammal', 'lion'),\n    ...                                    ('mammal', 'monkey')],\n    ...                                   names=['class', 'name'])\n    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n    ...                                      ('species', 'type')])\n    >>> df = pd.DataFrame([(389.0, 'fly'),\n    ...                    ( 24.0, 'fly'),\n    ...                    ( 80.5, 'run'),\n    ...                    (np.nan, 'jump')],\n    ...                   index=index,\n    ...                   columns=columns)\n    >>> df\n                   speed species\n                     max    type\n    class  name\n    bird   falcon  389.0     fly\n           parrot   24.0     fly\n    mammal lion     80.5     run\n           monkey    NaN    jump\n\n    If the index has multiple levels, we can reset a subset of them:\n\n    >>> df.reset_index(level='class')\n             class  speed species\n                      max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    If we are not dropping the index, by default, it is placed in the top\n    level. We can place it in another level:\n\n    >>> df.reset_index(level='class', col_level=1)\n                    speed species\n             class    max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    When the index is inserted under another level, we can specify under\n    which one with the parameter `col_fill`:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                  species  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n\n    If we specify a nonexistent level for `col_fill`, it is created:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                    genus  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if inplace:\n        new_obj = self\n    else:\n        new_obj = self.copy()\n\n    def _maybe_casted_values(index, labels=None):\n        values = index._values\n        if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n            if values.dtype == np.object_:\n                values = lib.maybe_convert_objects(values)\n        if labels is not None:\n            mask = labels == -1\n            if mask.all():\n                values = np.empty(len(mask))\n                values.fill(np.nan)\n            else:\n                values = values.take(labels)\n                values_type = type(values)\n                values_dtype = values.dtype\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values._data\n                if mask.any():\n                    values, _ = maybe_upcast_putmask(values, mask, np.nan)\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values_type(values, dtype=values_dtype)\n        return values\n    new_index = ibase.default_index(len(new_obj))\n    if level is not None:\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n        level = [self.index._get_level_number(lev) for lev in level]\n        if len(level) < self.index.nlevels:\n            new_index = self.index.droplevel(level)\n    if not drop:\n        to_insert: Iterable[Tuple[Any, Optional[Any]]]\n        if isinstance(self.index, ABCMultiIndex):\n            names = [n if n is not None else f'level_{i}' for i, n in enumerate(self.index.names)]\n            to_insert = zip(self.index.levels, self.index.codes)\n        else:\n            default = 'index' if 'index' not in self else 'level_0'\n            names = [default] if self.index.name is None else [self.index.name]\n            to_insert = ((self.index, None),)\n        multi_col = isinstance(self.columns, ABCMultiIndex)\n        for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n            if not (level is None or i in level):\n                continue\n            name = names[i]\n            if multi_col:\n                col_name = list(name) if isinstance(name, tuple) else [name]\n                if col_fill is None:\n                    if len(col_name) not in (1, self.columns.nlevels):\n                        raise ValueError(f'col_fill=None is incompatible with incomplete column name {name}')\n                    col_fill = col_name[0]\n                lev_num = self.columns._get_level_number(col_level)\n                name_lst = [col_fill] * lev_num + col_name\n                missing = self.columns.nlevels - len(name_lst)\n                name_lst += [col_fill] * missing\n                name = tuple(name_lst)\n            level_values = _maybe_casted_values(lev, lab)\n            new_obj.insert(0, name, level_values)\n    new_obj.index = new_index\n    if not inplace:\n        return new_obj\n    return None",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isna(self):\n    return super().isna()",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isnull(self):\n    return super().isnull()",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notna(self):\n    return super().notna()",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notnull(self):\n    return super().notnull()",
                            "def dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False):\n    \"\"\"\n    Remove missing values.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Determine if rows or columns which contain missing values are\n        removed.\n\n        * 0, or 'index' : Drop rows which contain missing values.\n        * 1, or 'columns' : Drop columns which contain missing value.\n\n        .. versionchanged:: 1.0.0\n\n           Pass tuple or list to drop on multiple axes.\n           Only a single axis is allowed.\n\n    how : {'any', 'all'}, default 'any'\n        Determine if row or column is removed from DataFrame, when we have\n        at least one NA or all NA.\n\n        * 'any' : If any NA values are present, drop that row or column.\n        * 'all' : If all values are NA, drop that row or column.\n\n    thresh : int, optional\n        Require that many non-NA values.\n    subset : array-like, optional\n        Labels along other axis to consider, e.g. if you are dropping rows\n        these would be a list of columns to include.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with NA entries dropped from it.\n\n    See Also\n    --------\n    DataFrame.isna: Indicate missing values.\n    DataFrame.notna : Indicate existing (non-missing) values.\n    DataFrame.fillna : Replace missing values.\n    Series.dropna : Drop missing values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n    ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n    ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n    ...                             pd.NaT]})\n    >>> df\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Drop the rows where at least one element is missing.\n\n    >>> df.dropna()\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n\n    Drop the columns where at least one element is missing.\n\n    >>> df.dropna(axis='columns')\n           name\n    0    Alfred\n    1    Batman\n    2  Catwoman\n\n    Drop the rows where all elements are missing.\n\n    >>> df.dropna(how='all')\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Keep only the rows with at least 2 non-NA values.\n\n    >>> df.dropna(thresh=2)\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Define in which columns to look for missing values.\n\n    >>> df.dropna(subset=['name', 'born'])\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n\n    Keep the DataFrame with valid entries in the same variable.\n\n    >>> df.dropna(inplace=True)\n    >>> df\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if isinstance(axis, (tuple, list)):\n        raise TypeError('supplying multiple axes to axis is no longer supported.')\n    axis = self._get_axis_number(axis)\n    agg_axis = 1 - axis\n    agg_obj = self\n    if subset is not None:\n        ax = self._get_axis(agg_axis)\n        indices = ax.get_indexer_for(subset)\n        check = indices == -1\n        if check.any():\n            raise KeyError(list(np.compress(check, subset)))\n        agg_obj = self.take(indices, axis=agg_axis)\n    count = agg_obj.count(axis=agg_axis)\n    if thresh is not None:\n        mask = count >= thresh\n    elif how == 'any':\n        mask = count == len(agg_obj._get_axis(agg_axis))\n    elif how == 'all':\n        mask = count > 0\n    elif how is not None:\n        raise ValueError(f'invalid how option: {how}')\n    else:\n        raise TypeError('must specify how or thresh')\n    result = self.loc(axis=axis)[mask]\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                            "def drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False) -> Optional['DataFrame']:\n    \"\"\"\n    Return DataFrame with duplicate rows removed.\n\n    Considering certain columns is optional. Indexes, including time indexes\n    are ignored.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to keep.\n        - ``first`` : Drop duplicates except for the first occurrence.\n        - ``last`` : Drop duplicates except for the last occurrence.\n        - False : Drop all duplicates.\n    inplace : bool, default False\n        Whether to drop duplicates in place or to return a copy.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with duplicates removed or None if ``inplace=True``.\n    \"\"\"\n    if self.empty:\n        return self.copy()\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    duplicated = self.duplicated(subset, keep=keep)\n    if inplace:\n        inds, = (-duplicated)._ndarray_values.nonzero()\n        new_data = self._data.take(inds)\n        self._update_inplace(new_data)\n    else:\n        return self[-duplicated]\n    return None",
                            "def duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series':\n    \"\"\"\n    Return boolean Series denoting duplicate rows.\n\n    Considering certain columns is optional.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to mark.\n\n        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.sorting import get_group_index\n    from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n    if self.empty:\n        return Series(dtype=bool)\n\n    def f(vals):\n        labels, shape = algorithms.factorize(vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n        return (labels.astype('i8', copy=False), len(shape))\n    if subset is None:\n        subset = self.columns\n    elif not np.iterable(subset) or isinstance(subset, str) or (isinstance(subset, tuple) and subset in self.columns):\n        subset = (subset,)\n    subset = cast(Iterable, subset)\n    diff = Index(subset).difference(self.columns)\n    if not diff.empty:\n        raise KeyError(diff)\n    vals = (col.values for name, col in self.items() if name in subset)\n    labels, shape = map(list, zip(*map(f, vals)))\n    ids = get_group_index(labels, shape, sort=False, xnull=False)\n    return Series(duplicated_int64(ids, keep), index=self.index)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_values.__doc__)\ndef sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last'):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    if not isinstance(by, list):\n        by = [by]\n    if is_sequence(ascending) and len(by) != len(ascending):\n        raise ValueError(f'Length of ascending ({len(ascending)}) != length of by ({len(by)})')\n    if len(by) > 1:\n        from pandas.core.sorting import lexsort_indexer\n        keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n        indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n    else:\n        from pandas.core.sorting import nargsort\n        by = by[0]\n        k = self._get_label_or_level_values(by, axis=axis)\n        if isinstance(ascending, (tuple, list)):\n            ascending = ascending[0]\n        indexer = nargsort(k, kind=kind, ascending=ascending, na_position=na_position)\n    new_data = self._data.take(indexer, axis=self._get_block_manager_axis(axis), verify=False)\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_index.__doc__)\ndef sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    labels = labels._sort_levels_monotonic()\n    if level is not None:\n        new_axis, indexer = labels.sortlevel(level, ascending=ascending, sort_remaining=sort_remaining)\n    elif isinstance(labels, ABCMultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n        indexer = lexsort_indexer(labels._get_codes_for_sorting(), orders=ascending, na_position=na_position)\n    else:\n        from pandas.core.sorting import nargsort\n        if ascending and labels.is_monotonic_increasing or (not ascending and labels.is_monotonic_decreasing):\n            if inplace:\n                return\n            else:\n                return self.copy()\n        indexer = nargsort(labels, kind=kind, ascending=ascending, na_position=na_position)\n    baxis = self._get_block_manager_axis(axis)\n    new_data = self._data.take(indexer, axis=baxis, verify=False)\n    new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "def nlargest(self, n, columns, keep='first'):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in descending order.\n\n    Return the first `n` rows with the largest values in `columns`, in\n    descending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=False).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows to return.\n    columns : label or list of labels\n        Column label(s) to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - `first` : prioritize the first occurrence(s)\n        - `last` : prioritize the last occurrence(s)\n        - ``all`` : do not drop any duplicates, even it means\n                    selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The first `n` rows ordered by the given columns in descending\n        order.\n\n    See Also\n    --------\n    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n        ascending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Notes\n    -----\n    This function cannot be used with all column types. For example, when\n    specifying columns with `object` or `category` dtypes, ``TypeError`` is\n    raised.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nlargest`` to select the three\n    rows having the largest values in column \"population\".\n\n    >>> df.nlargest(3, 'population')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Malta       434000    12011      MT\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nlargest(3, 'population', keep='last')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nlargest(3, 'population', keep='all')\n              population      GDP alpha-2\n    France      65000000  2583560      FR\n    Italy       59000000  1937894      IT\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n\n    To order by the largest values in column \"population\" and then \"GDP\",\n    we can specify multiple columns like in the next example.\n\n    >>> df.nlargest(3, ['population', 'GDP'])\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()",
                            "def nsmallest(self, n, columns, keep='first'):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in ascending order.\n\n    Return the first `n` rows with the smallest values in `columns`, in\n    ascending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=True).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of items to retrieve.\n    columns : list or str\n        Column name or names to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - ``first`` : take the first occurrence.\n        - ``last`` : take the last occurrence.\n        - ``all`` : do not drop any duplicates, even it means\n          selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n        descending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nsmallest`` to select the\n    three rows having the smallest values in column \"a\".\n\n    >>> df.nsmallest(3, 'population')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nsmallest(3, 'population', keep='last')\n              population  GDP alpha-2\n    Anguilla       11300  311      AI\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nsmallest(3, 'population', keep='all')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    To order by the largest values in column \"a\" and then \"c\", we can\n    specify multiple columns like in the next example.\n\n    >>> df.nsmallest(3, ['population', 'GDP'])\n              population  GDP alpha-2\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n    Anguilla       11300  311      AI\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nsmallest()",
                            "def swaplevel(self, i=-2, j=-1, axis=0):\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis.\n\n    Parameters\n    ----------\n    i, j : int or str\n        Levels of the indices to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    result = self.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        result.index = result.index.swaplevel(i, j)\n    else:\n        result.columns = result.columns.swaplevel(i, j)\n    return result",
                            "def reorder_levels(self, order, axis=0):\n    \"\"\"\n    Rearrange index levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int or list of str\n        List representing new level order. Reference level by number\n        (position) or by key (label).\n    axis : int\n        Where to reorder levels.\n\n    Returns\n    -------\n    type of caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if not isinstance(self._get_axis(axis), ABCMultiIndex):\n        raise TypeError('Can only reorder levels on a hierarchical axis.')\n    result = self.copy()\n    if axis == 0:\n        result.index = result.index.reorder_levels(order)\n    else:\n        result.columns = result.columns.reorder_levels(order)\n    return result",
                            "def _combine_frame(self, other, func, fill_value=None, level=None):\n    this, other = self.align(other, join='outer', level=level, copy=False)\n    if fill_value is None:\n        _arith_op = func\n    else:\n\n        def _arith_op(left, right):\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n    if ops.should_series_dispatch(this, other, func):\n        new_data = ops.dispatch_to_series(this, other, _arith_op)\n    else:\n        with np.errstate(all='ignore'):\n            res_values = _arith_op(this.values, other.values)\n        new_data = dispatch_fill_zeros(func, this.values, other.values, res_values)\n    return this._construct_result(new_data)",
                            "def _combine_match_index(self, other, func):\n    if ops.should_series_dispatch(self, other, func):\n        new_data = ops.dispatch_to_series(self, other, func)\n    else:\n        with np.errstate(all='ignore'):\n            new_data = func(self.values.T, other.values).T\n    return new_data",
                            "def _construct_result(self, result) -> 'DataFrame':\n    \"\"\"\n    Wrap the result of an arithmetic, comparison, or logical operation.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    out = self._constructor(result, index=self.index, copy=False)\n    out.columns = self.columns\n    return out",
                            "def combine(self, other, func, fill_value=None, overwrite=True):\n    \"\"\"\n    Perform column-wise combine with another DataFrame.\n\n    Combines a DataFrame with `other` DataFrame using `func`\n    to element-wise combine columns. The row and column indexes of the\n    resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        The DataFrame to merge column-wise.\n    func : function\n        Function that takes two series as inputs and return a Series or a\n        scalar. Used to merge the two dataframes column by columns.\n    fill_value : scalar value, default None\n        The value to fill NaNs with prior to passing any column to the\n        merge func.\n    overwrite : bool, default True\n        If True, columns in `self` that do not exist in `other` will be\n        overwritten with NaNs.\n\n    Returns\n    -------\n    DataFrame\n        Combination of the provided DataFrames.\n\n    See Also\n    --------\n    DataFrame.combine_first : Combine two DataFrame objects and default to\n        non-null values in frame calling the method.\n\n    Examples\n    --------\n    Combine using a simple function that chooses the smaller column.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n    >>> df1.combine(df2, take_smaller)\n       A  B\n    0  0  3\n    1  0  3\n\n    Example using a true element-wise combine function.\n\n    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, np.minimum)\n       A  B\n    0  1  2\n    1  0  3\n\n    Using `fill_value` fills Nones prior to passing the column to the\n    merge function.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n       A    B\n    0  0 -5.0\n    1  0  4.0\n\n    However, if the same element in both dataframes is None, that None\n    is preserved\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n        A    B\n    0  0 -5.0\n    1  0  3.0\n\n    Example that demonstrates the use of `overwrite` and behavior when\n    the axis differ between the dataframes.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n    >>> df1.combine(df2, take_smaller)\n         A    B     C\n    0  NaN  NaN   NaN\n    1  NaN  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    >>> df1.combine(df2, take_smaller, overwrite=False)\n         A    B     C\n    0  0.0  NaN   NaN\n    1  0.0  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    Demonstrating the preference of the passed in dataframe.\n\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n    >>> df2.combine(df1, take_smaller)\n       A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 NaN\n    2  NaN  3.0 NaN\n\n    >>> df2.combine(df1, take_smaller, overwrite=False)\n         A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 1.0\n    2  NaN  3.0 1.0\n    \"\"\"\n    other_idxlen = len(other.index)\n    this, other = self.align(other, copy=False)\n    new_index = this.index\n    if other.empty and len(new_index) == len(self.index):\n        return self.copy()\n    if self.empty and len(other) == other_idxlen:\n        return other.copy()\n    new_columns = this.columns.union(other.columns)\n    do_fill = fill_value is not None\n    result = {}\n    for col in new_columns:\n        series = this[col]\n        otherSeries = other[col]\n        this_dtype = series.dtype\n        other_dtype = otherSeries.dtype\n        this_mask = isna(series)\n        other_mask = isna(otherSeries)\n        if not overwrite and other_mask.all():\n            result[col] = this[col].copy()\n            continue\n        if do_fill:\n            series = series.copy()\n            otherSeries = otherSeries.copy()\n            series[this_mask] = fill_value\n            otherSeries[other_mask] = fill_value\n        if col not in self.columns:\n            new_dtype = other_dtype\n            try:\n                series = series.astype(new_dtype, copy=False)\n            except ValueError:\n                pass\n        else:\n            new_dtype = find_common_type([this_dtype, other_dtype])\n            if not is_dtype_equal(this_dtype, new_dtype):\n                series = series.astype(new_dtype)\n            if not is_dtype_equal(other_dtype, new_dtype):\n                otherSeries = otherSeries.astype(new_dtype)\n        arr = func(series, otherSeries)\n        arr = maybe_downcast_to_dtype(arr, this_dtype)\n        result[col] = arr\n    return self._constructor(result, index=new_index, columns=new_columns)",
                            "def combine_first(self, other):\n    \"\"\"\n    Update null elements with value in the same location in `other`.\n\n    Combine two DataFrame objects by filling null values in one DataFrame\n    with non-null values from other DataFrame. The row and column indexes\n    of the resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        Provided DataFrame to use to fill null values.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.combine : Perform series-wise operation on two DataFrames\n        using a given function.\n\n    Examples\n    --------\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine_first(df2)\n         A    B\n    0  1.0  3.0\n    1  0.0  4.0\n\n    Null values still persist if the location of that null value\n    does not exist in `other`\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n    >>> df1.combine_first(df2)\n         A    B    C\n    0  NaN  4.0  NaN\n    1  0.0  3.0  1.0\n    2  NaN  3.0  1.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    def extract_values(arr):\n        if isinstance(arr, (ABCIndexClass, ABCSeries)):\n            arr = arr._values\n        if needs_i8_conversion(arr):\n            if is_extension_array_dtype(arr.dtype):\n                arr = arr.asi8\n            else:\n                arr = arr.view('i8')\n        return arr\n\n    def combiner(x, y):\n        mask = isna(x)\n        if isinstance(mask, (ABCIndexClass, ABCSeries)):\n            mask = mask._values\n        x_values = extract_values(x)\n        y_values = extract_values(y)\n        if y.name not in self.columns:\n            return y_values\n        return expressions.where(mask, y_values, x_values)\n    return self.combine(other, combiner, overwrite=False)",
                            "def update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore'):\n    \"\"\"\n    Modify in place using non-NA values from another DataFrame.\n\n    Aligns on indices. There is no return value.\n\n    Parameters\n    ----------\n    other : DataFrame, or object coercible into a DataFrame\n        Should have at least one matching index/column label\n        with the original DataFrame. If a Series is passed,\n        its name attribute must be set, and that will be\n        used as the column name to align with the original DataFrame.\n    join : {'left'}, default 'left'\n        Only left join is implemented, keeping the index and columns of the\n        original object.\n    overwrite : bool, default True\n        How to handle non-NA values for overlapping keys:\n\n        * True: overwrite original DataFrame's values\n          with values from `other`.\n        * False: only update values that are NA in\n          the original DataFrame.\n\n    filter_func : callable(1d-array) -> bool 1d-array, optional\n        Can choose to replace values other than NA. Return True for values\n        that should be updated.\n    errors : {'raise', 'ignore'}, default 'ignore'\n        If 'raise', will raise a ValueError if the DataFrame and `other`\n        both contain non-NA data in the same place.\n\n        .. versionchanged:: 0.24.0\n           Changed from `raise_conflict=False|True`\n           to `errors='ignore'|'raise'`.\n\n    Returns\n    -------\n    None : method directly changes calling object\n\n    Raises\n    ------\n    ValueError\n        * When `errors='raise'` and there's overlapping non-NA data.\n        * When `errors` is not either `'ignore'` or `'raise'`\n    NotImplementedError\n        * If `join != 'left'`\n\n    See Also\n    --------\n    dict.update : Similar method for dictionaries.\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n    ...                        'C': [7, 8, 9]})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    The DataFrame's length does not increase as a result of the update,\n    only values at matching index/column labels are updated.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  d\n    1  b  e\n    2  c  f\n\n    For Series, it's name attribute must be set.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n    >>> df.update(new_column)\n    >>> df\n       A  B\n    0  a  d\n    1  b  y\n    2  c  e\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  x\n    1  b  d\n    2  c  e\n\n    If `other` contains NaNs the corresponding values are not updated\n    in the original dataframe.\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n    >>> df.update(new_df)\n    >>> df\n       A      B\n    0  1    4.0\n    1  2  500.0\n    2  3    6.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n    if join != 'left':\n        raise NotImplementedError('Only left join is supported')\n    if errors not in ['ignore', 'raise']:\n        raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n    if not isinstance(other, DataFrame):\n        other = DataFrame(other)\n    other = other.reindex_like(self)\n    for col in self.columns:\n        this = self[col]._values\n        that = other[col]._values\n        if filter_func is not None:\n            with np.errstate(all='ignore'):\n                mask = ~filter_func(this) | isna(that)\n        else:\n            if errors == 'raise':\n                mask_this = notna(that)\n                mask_that = notna(this)\n                if any(mask_this & mask_that):\n                    raise ValueError('Data overlaps.')\n            if overwrite:\n                mask = isna(that)\n            else:\n                mask = notna(this)\n        if mask.all():\n            continue\n        self[col] = expressions.where(mask, this, that)",
                            "@Substitution('')\n@Appender(_shared_docs['pivot'])\ndef pivot(self, index=None, columns=None, values=None):\n    from pandas.core.reshape.pivot import pivot\n    return pivot(self, index=index, columns=columns, values=values)",
                            "@Substitution('')\n@Appender(_shared_docs['pivot_table'])\ndef pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False):\n    from pandas.core.reshape.pivot import pivot_table\n    return pivot_table(self, values=values, index=index, columns=columns, aggfunc=aggfunc, fill_value=fill_value, margins=margins, dropna=dropna, margins_name=margins_name, observed=observed)",
                            "def stack(self, level=-1, dropna=True):\n    \"\"\"\n    Stack the prescribed level(s) from columns to index.\n\n    Return a reshaped DataFrame or Series having a multi-level\n    index with one or more new inner-most levels compared to the current\n    DataFrame. The new inner-most levels are created by pivoting the\n    columns of the current dataframe:\n\n      - if the columns have a single level, the output is a Series;\n      - if the columns have multiple levels, the new index\n        level(s) is (are) taken from the prescribed level(s) and\n        the output is a DataFrame.\n\n    The new index levels are sorted.\n\n    Parameters\n    ----------\n    level : int, str, list, default -1\n        Level(s) to stack from the column axis onto the index\n        axis, defined as one index or label, or a list of indices\n        or labels.\n    dropna : bool, default True\n        Whether to drop rows in the resulting Frame/Series with\n        missing values. Stacking a column level onto the index\n        axis can create combinations of index and column values\n        that are missing from the original dataframe. See Examples\n        section.\n\n    Returns\n    -------\n    DataFrame or Series\n        Stacked dataframe or series.\n\n    See Also\n    --------\n    DataFrame.unstack : Unstack prescribed level(s) from index axis\n         onto column axis.\n    DataFrame.pivot : Reshape dataframe from long format to wide\n         format.\n    DataFrame.pivot_table : Create a spreadsheet-style pivot table\n         as a DataFrame.\n\n    Notes\n    -----\n    The function is named by analogy with a collection of books\n    being reorganized from being side by side on a horizontal\n    position (the columns of the dataframe) to being stacked\n    vertically on top of each other (in the index of the\n    dataframe).\n\n    Examples\n    --------\n    **Single level columns**\n\n    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=['weight', 'height'])\n\n    Stacking a dataframe with a single level column axis returns a Series:\n\n    >>> df_single_level_cols\n         weight height\n    cat       0      1\n    dog       2      3\n    >>> df_single_level_cols.stack()\n    cat  weight    0\n         height    1\n    dog  weight    2\n         height    3\n    dtype: int64\n\n    **Multi level columns: simple case**\n\n    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('weight', 'pounds')])\n    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol1)\n\n    Stacking a dataframe with a multi-level column axis:\n\n    >>> df_multi_level_cols1\n         weight\n             kg    pounds\n    cat       1        2\n    dog       2        4\n    >>> df_multi_level_cols1.stack()\n                weight\n    cat kg           1\n        pounds       2\n    dog kg           2\n        pounds       4\n\n    **Missing values**\n\n    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('height', 'm')])\n    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    It is common to have missing values when stacking a dataframe\n    with multi-level columns, as the stacked dataframe typically\n    has more values than the original dataframe. Missing values\n    are filled with NaNs:\n\n    >>> df_multi_level_cols2\n        weight height\n            kg      m\n    cat    1.0    2.0\n    dog    3.0    4.0\n    >>> df_multi_level_cols2.stack()\n            height  weight\n    cat kg     NaN     1.0\n        m      2.0     NaN\n    dog kg     NaN     3.0\n        m      4.0     NaN\n\n    **Prescribing the level(s) to be stacked**\n\n    The first parameter controls which level or levels are stacked:\n\n    >>> df_multi_level_cols2.stack(0)\n                 kg    m\n    cat height  NaN  2.0\n        weight  1.0  NaN\n    dog height  NaN  4.0\n        weight  3.0  NaN\n    >>> df_multi_level_cols2.stack([0, 1])\n    cat  height  m     2.0\n         weight  kg    1.0\n    dog  height  m     4.0\n         weight  kg    3.0\n    dtype: float64\n\n    **Dropping missing values**\n\n    >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    Note that rows where all values are missing are dropped by\n    default but this behaviour can be controlled via the dropna\n    keyword parameter:\n\n    >>> df_multi_level_cols3\n        weight height\n            kg      m\n    cat    NaN    1.0\n    dog    2.0    3.0\n    >>> df_multi_level_cols3.stack(dropna=False)\n            height  weight\n    cat kg     NaN     NaN\n        m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    >>> df_multi_level_cols3.stack(dropna=True)\n            height  weight\n    cat m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    \"\"\"\n    from pandas.core.reshape.reshape import stack, stack_multiple\n    if isinstance(level, (tuple, list)):\n        return stack_multiple(self, level, dropna=dropna)\n    else:\n        return stack(self, level, dropna=dropna)",
                            "def explode(self, column: Union[str, Tuple]) -> 'DataFrame':\n    \"\"\"\n    Transform each element of a list-like to a row, replicating index values.\n\n    .. versionadded:: 0.25.0\n\n    Parameters\n    ----------\n    column : str or tuple\n        Column to explode.\n\n    Returns\n    -------\n    DataFrame\n        Exploded lists to rows of the subset columns;\n        index will be duplicated for these rows.\n\n    Raises\n    ------\n    ValueError :\n        if columns of the frame are not unique.\n\n    See Also\n    --------\n    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n        index labels.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    Series.explode : Explode a DataFrame from list-like columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n    >>> df\n               A  B\n    0  [1, 2, 3]  1\n    1        foo  1\n    2         []  1\n    3     [3, 4]  1\n\n    >>> df.explode('A')\n         A  B\n    0    1  1\n    0    2  1\n    0    3  1\n    1  foo  1\n    2  NaN  1\n    3    3  1\n    3    4  1\n    \"\"\"\n    if not (is_scalar(column) or isinstance(column, tuple)):\n        raise ValueError('column must be a scalar')\n    if not self.columns.is_unique:\n        raise ValueError('columns must be unique')\n    df = self.reset_index(drop=True)\n    assert df is not None\n    result = df[column].explode()\n    result = df.drop([column], axis=1).join(result)\n    result.index = self.index.take(result.index)\n    result = result.reindex(columns=self.columns, copy=False)\n    return result",
                            "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Pivot a level of the (necessarily hierarchical) index labels.\n\n    Returns a DataFrame having a new level of column labels whose inner-most level\n    consists of the pivoted index labels.\n\n    If the index is not a MultiIndex, the output will be a Series\n    (the analogue of stack when the columns are not a MultiIndex).\n\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default -1 (last level)\n        Level(s) of index to unstack, can pass level name.\n    fill_value : int, str or dict\n        Replace NaN with this value if the unstack produces missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot a table based on column values.\n    DataFrame.stack : Pivot a level of the column labels (inverse operation\n        from `unstack`).\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n    ...                                    ('two', 'a'), ('two', 'b')])\n    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n    >>> s\n    one  a   1.0\n         b   2.0\n    two  a   3.0\n         b   4.0\n    dtype: float64\n\n    >>> s.unstack(level=-1)\n         a   b\n    one  1.0  2.0\n    two  3.0  4.0\n\n    >>> s.unstack(level=0)\n       one  two\n    a  1.0   3.0\n    b  2.0   4.0\n\n    >>> df = s.unstack(level=0)\n    >>> df.unstack()\n    one  a  1.0\n         b  2.0\n    two  a  3.0\n         b  4.0\n    dtype: float64\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n    return unstack(self, level, fill_value)",
                            "@Appender(_shared_docs['melt'] % dict(caller='df.melt(', versionadded='.. versionadded:: 0.20.0\\n', other='melt'))\ndef melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None):\n    from pandas.core.reshape.melt import melt\n    return melt(self, id_vars=id_vars, value_vars=value_vars, var_name=var_name, value_name=value_name, col_level=col_level)",
                            "def diff(self, periods=1, axis=0):\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a DataFrame element compared with another\n    element in the DataFrame (default is the element in the same column\n    of the previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Take difference over rows (0) or columns (1).\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    Series.diff: First discrete difference for a Series.\n    DataFrame.pct_change: Percent change over given number of periods.\n    DataFrame.shift: Shift index by desired number of periods with an\n        optional time freq.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n    ...                    'b': [1, 1, 2, 3, 5, 8],\n    ...                    'c': [1, 4, 9, 16, 25, 36]})\n    >>> df\n       a  b   c\n    0  1  1   1\n    1  2  1   4\n    2  3  2   9\n    3  4  3  16\n    4  5  5  25\n    5  6  8  36\n\n    >>> df.diff()\n         a    b     c\n    0  NaN  NaN   NaN\n    1  1.0  0.0   3.0\n    2  1.0  1.0   5.0\n    3  1.0  1.0   7.0\n    4  1.0  2.0   9.0\n    5  1.0  3.0  11.0\n\n    Difference with previous column\n\n    >>> df.diff(axis=1)\n        a    b     c\n    0 NaN  0.0   0.0\n    1 NaN -1.0   3.0\n    2 NaN -1.0   7.0\n    3 NaN -1.0  13.0\n    4 NaN  0.0  20.0\n    5 NaN  2.0  28.0\n\n    Difference with 3rd previous row\n\n    >>> df.diff(periods=3)\n         a    b     c\n    0  NaN  NaN   NaN\n    1  NaN  NaN   NaN\n    2  NaN  NaN   NaN\n    3  3.0  2.0  15.0\n    4  3.0  4.0  21.0\n    5  3.0  6.0  27.0\n\n    Difference with following row\n\n    >>> df.diff(periods=-1)\n         a    b     c\n    0 -1.0  0.0  -3.0\n    1 -1.0 -1.0  -5.0\n    2 -1.0 -1.0  -7.0\n    3 -1.0 -2.0  -9.0\n    4 -1.0 -3.0 -11.0\n    5  NaN  NaN   NaN\n    \"\"\"\n    bm_axis = self._get_block_manager_axis(axis)\n    new_data = self._data.diff(n=periods, axis=bm_axis)\n    return self._constructor(new_data)",
                            "def _gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]:\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self\n    elif subset.ndim == 1:\n        return subset\n    return subset[key]",
                            "@Substitution(see_also=_agg_summary_and_see_also_doc, examples=_agg_examples_doc, versionadded='\\n.. versionadded:: 0.20.0\\n', **_shared_doc_kwargs)\n@Appender(_shared_docs['aggregate'])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    result = None\n    try:\n        result, how = self._aggregate(func, *args, axis=axis, **kwargs)\n    except TypeError:\n        pass\n    if result is None:\n        return self.apply(func, axis=axis, args=args, **kwargs)\n    return result",
                            "def _aggregate(self, arg, axis=0, *args, **kwargs):\n    if axis == 1:\n        result, how = self.T._aggregate(arg, *args, **kwargs)\n        result = result.T if result is not None else result\n        return (result, how)\n    return super()._aggregate(arg, *args, **kwargs)",
                            "@Appender(_shared_docs['transform'] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    if axis == 1:\n        return self.T.transform(func, *args, **kwargs).T\n    return super().transform(func, *args, **kwargs)",
                            "def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n    \"\"\"\n    Apply a function along an axis of the DataFrame.\n\n    Objects passed to the function are Series objects whose index is\n    either the DataFrame's index (``axis=0``) or the DataFrame's columns\n    (``axis=1``). By default (``result_type=None``), the final return type\n    is inferred from the return type of the applied function. Otherwise,\n    it depends on the `result_type` argument.\n\n    Parameters\n    ----------\n    func : function\n        Function to apply to each column or row.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis along which the function is applied:\n\n        * 0 or 'index': apply function to each column.\n        * 1 or 'columns': apply function to each row.\n\n    raw : bool, default False\n        Determines if row or column is passed as a Series or ndarray object:\n\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray objects\n          instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n\n    result_type : {'expand', 'reduce', 'broadcast', None}, default None\n        These only act when ``axis=1`` (columns):\n\n        * 'expand' : list-like results will be turned into columns.\n        * 'reduce' : returns a Series if possible rather than expanding\n          list-like results. This is the opposite of 'expand'.\n        * 'broadcast' : results will be broadcast to the original shape\n          of the DataFrame, the original index and columns will be\n          retained.\n\n        The default behaviour (None) depends on the return value of the\n        applied function: list-like results will be returned as a Series\n        of those. However if the apply function returns a Series these\n        are expanded to columns.\n\n        .. versionadded:: 0.23.0\n\n    args : tuple\n        Positional arguments to pass to `func` in addition to the\n        array/series.\n    **kwds\n        Additional keyword arguments to pass as keywords arguments to\n        `func`.\n\n    Returns\n    -------\n    Series or DataFrame\n        Result of applying ``func`` along the given axis of the\n        DataFrame.\n\n    See Also\n    --------\n    DataFrame.applymap: For elementwise operations.\n    DataFrame.aggregate: Only perform aggregating type operations.\n    DataFrame.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n    >>> df\n       A  B\n    0  4  9\n    1  4  9\n    2  4  9\n\n    Using a numpy universal function (in this case the same as\n    ``np.sqrt(df)``):\n\n    >>> df.apply(np.sqrt)\n         A    B\n    0  2.0  3.0\n    1  2.0  3.0\n    2  2.0  3.0\n\n    Using a reducing function on either axis\n\n    >>> df.apply(np.sum, axis=0)\n    A    12\n    B    27\n    dtype: int64\n\n    >>> df.apply(np.sum, axis=1)\n    0    13\n    1    13\n    2    13\n    dtype: int64\n\n    Returning a list-like will result in a Series\n\n    >>> df.apply(lambda x: [1, 2], axis=1)\n    0    [1, 2]\n    1    [1, 2]\n    2    [1, 2]\n    dtype: object\n\n    Passing result_type='expand' will expand list-like results\n    to columns of a Dataframe\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n       0  1\n    0  1  2\n    1  1  2\n    2  1  2\n\n    Returning a Series inside the function is similar to passing\n    ``result_type='expand'``. The resulting column names\n    will be the Series index.\n\n    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n       foo  bar\n    0    1    2\n    1    1    2\n    2    1    2\n\n    Passing ``result_type='broadcast'`` will ensure the same shape\n    result, whether list-like or scalar is returned by the function,\n    and broadcast it along the axis. The resulting column names will\n    be the originals.\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n       A  B\n    0  1  2\n    1  1  2\n    2  1  2\n    \"\"\"\n    from pandas.core.apply import frame_apply\n    op = frame_apply(self, func=func, axis=axis, raw=raw, result_type=result_type, args=args, kwds=kwds)\n    return op.get_result()",
                            "def applymap(self, func):\n    \"\"\"\n    Apply a function to a Dataframe elementwise.\n\n    This method applies a function that accepts and returns a scalar\n    to every element of a DataFrame.\n\n    Parameters\n    ----------\n    func : callable\n        Python function, returns a single value from a single value.\n\n    Returns\n    -------\n    DataFrame\n        Transformed DataFrame.\n\n    See Also\n    --------\n    DataFrame.apply : Apply a function along input axis of DataFrame.\n\n    Notes\n    -----\n    In the current implementation applymap calls `func` twice on the\n    first column/row to decide whether it can take a fast or slow\n    code path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    column/row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n    >>> df\n           0      1\n    0  1.000  2.120\n    1  3.356  4.567\n\n    >>> df.applymap(lambda x: len(str(x)))\n       0  1\n    0  3  4\n    1  5  5\n\n    Note that a vectorized version of `func` often exists, which will\n    be much faster. You could square each number elementwise.\n\n    >>> df.applymap(lambda x: x**2)\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n\n    But it's better to avoid applymap in that case.\n\n    >>> df ** 2\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n    \"\"\"\n\n    def infer(x):\n        if x.empty:\n            return lib.map_infer(x, func)\n        return lib.map_infer(x.astype(object).values, func)\n    return self.apply(infer)",
                            "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and (not ignore_index):\n            raise TypeError('Can only append a Series if ignore_index=True or if the Series has a name')\n        index = Index([other.name], name=self.index.name)\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = other.reindex(combined_columns, copy=False).to_frame().T.infer_objects().rename_axis(index.names, copy=False)\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n    from pandas.core.reshape.concat import concat\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(to_concat, ignore_index=ignore_index, verify_integrity=verify_integrity, sort=sort)",
                            "def join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False):\n    \"\"\"\n    Join columns of another DataFrame.\n\n    Join columns with `other` DataFrame either on index or on a key\n    column. Efficiently join multiple DataFrame objects by index at once by\n    passing a list.\n\n    Parameters\n    ----------\n    other : DataFrame, Series, or list of DataFrame\n        Index should be similar to one of the columns in this one. If a\n        Series is passed, its name attribute must be set, and that will be\n        used as the column name in the resulting joined DataFrame.\n    on : str, list of str, or array-like, optional\n        Column or index level name(s) in the caller to join on the index\n        in `other`, otherwise joins index-on-index. If multiple\n        values given, the `other` DataFrame must have a MultiIndex. Can\n        pass an array as the join key if it is not already contained in\n        the calling DataFrame. Like an Excel VLOOKUP operation.\n    how : {'left', 'right', 'outer', 'inner'}, default 'left'\n        How to handle the operation of the two objects.\n\n        * left: use calling frame's index (or column if on is specified)\n        * right: use `other`'s index.\n        * outer: form union of calling frame's index (or column if on is\n          specified) with `other`'s index, and sort it.\n          lexicographically.\n        * inner: form intersection of calling frame's index (or column if\n          on is specified) with `other`'s index, preserving the order\n          of the calling's one.\n    lsuffix : str, default ''\n        Suffix to use from left frame's overlapping columns.\n    rsuffix : str, default ''\n        Suffix to use from right frame's overlapping columns.\n    sort : bool, default False\n        Order result DataFrame lexicographically by the join key. If False,\n        the order of the join key depends on the join type (how keyword).\n\n    Returns\n    -------\n    DataFrame\n        A dataframe containing columns from both the caller and `other`.\n\n    See Also\n    --------\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Notes\n    -----\n    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n    passing a list of `DataFrame` objects.\n\n    Support for specifying index levels as the `on` parameter was added\n    in version 0.23.0.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n    >>> df\n      key   A\n    0  K0  A0\n    1  K1  A1\n    2  K2  A2\n    3  K3  A3\n    4  K4  A4\n    5  K5  A5\n\n    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n    ...                       'B': ['B0', 'B1', 'B2']})\n\n    >>> other\n      key   B\n    0  K0  B0\n    1  K1  B1\n    2  K2  B2\n\n    Join DataFrames using their indexes.\n\n    >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n      key_caller   A key_other    B\n    0         K0  A0        K0   B0\n    1         K1  A1        K1   B1\n    2         K2  A2        K2   B2\n    3         K3  A3       NaN  NaN\n    4         K4  A4       NaN  NaN\n    5         K5  A5       NaN  NaN\n\n    If we want to join using the key columns, we need to set key to be\n    the index in both `df` and `other`. The joined DataFrame will have\n    key as its index.\n\n    >>> df.set_index('key').join(other.set_index('key'))\n          A    B\n    key\n    K0   A0   B0\n    K1   A1   B1\n    K2   A2   B2\n    K3   A3  NaN\n    K4   A4  NaN\n    K5   A5  NaN\n\n    Another option to join using the key columns is to use the `on`\n    parameter. DataFrame.join always uses `other`'s index but we can use\n    any column in `df`. This method preserves the original DataFrame's\n    index in the result.\n\n    >>> df.join(other.set_index('key'), on='key')\n      key   A    B\n    0  K0  A0   B0\n    1  K1  A1   B1\n    2  K2  A2   B2\n    3  K3  A3  NaN\n    4  K4  A4  NaN\n    5  K5  A5  NaN\n    \"\"\"\n    return self._join_compat(other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort)",
                            "def _join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError('Other Series must have a name')\n        other = DataFrame({other.name: other})\n    if isinstance(other, DataFrame):\n        return merge(self, other, left_on=on, how=how, left_index=on is None, right_index=True, suffixes=(lsuffix, rsuffix), sort=sort)\n    else:\n        if on is not None:\n            raise ValueError('Joining multiple DataFrames only supported for joining on index')\n        frames = [self] + list(other)\n        can_concat = all((df.index.is_unique for df in frames))\n        if can_concat:\n            if how == 'left':\n                res = concat(frames, axis=1, join='outer', verify_integrity=True, sort=sort)\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(frames, axis=1, join=how, verify_integrity=True, sort=sort)\n        joined = frames[0]\n        for frame in frames[1:]:\n            joined = merge(joined, frame, how=how, left_index=True, right_index=True)\n        return joined",
                            "@Substitution('')\n@Appender(_merge_doc, indents=2)\ndef merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None):\n    from pandas.core.reshape.merge import merge\n    return merge(self, right, how=how, on=on, left_on=left_on, right_on=right_on, left_index=left_index, right_index=right_index, sort=sort, suffixes=suffixes, copy=copy, indicator=indicator, validate=validate)",
                            "def round(self, decimals=0, *args, **kwargs):\n    \"\"\"\n    Round a DataFrame to a variable number of decimal places.\n\n    Parameters\n    ----------\n    decimals : int, dict, Series\n        Number of decimal places to round each column to. If an int is\n        given, round each column to the same number of places.\n        Otherwise dict and Series round to variable numbers of places.\n        Column names should be in the keys if `decimals` is a\n        dict-like, or in the index if `decimals` is a Series. Any\n        columns not included in `decimals` will be left as is. Elements\n        of `decimals` which are not columns of the input will be\n        ignored.\n    *args\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n    **kwargs\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame with the affected columns rounded to the specified\n        number of decimal places.\n\n    See Also\n    --------\n    numpy.around : Round a numpy array to the given number of decimals.\n    Series.round : Round a Series to the given number of decimals.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df\n        dogs  cats\n    0  0.21  0.32\n    1  0.01  0.67\n    2  0.66  0.03\n    3  0.21  0.18\n\n    By providing an integer each column is rounded to the same number\n    of decimal places\n\n    >>> df.round(1)\n        dogs  cats\n    0   0.2   0.3\n    1   0.0   0.7\n    2   0.7   0.0\n    3   0.2   0.2\n\n    With a dict, the number of places for specific columns can be\n    specified with the column names as key and the number of decimal\n    places as value\n\n    >>> df.round({'dogs': 1, 'cats': 0})\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n\n    Using a Series, the number of places for specific columns can be\n    specified with the column names as index and the number of\n    decimal places as value\n\n    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n    >>> df.round(decimals)\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    def _dict_round(df, decimals):\n        for col, vals in df.items():\n            try:\n                yield _series_round(vals, decimals[col])\n            except KeyError:\n                yield vals\n\n    def _series_round(s, decimals):\n        if is_integer_dtype(s) or is_float_dtype(s):\n            return s.round(decimals)\n        return s\n    nv.validate_round(args, kwargs)\n    if isinstance(decimals, (dict, Series)):\n        if isinstance(decimals, Series):\n            if not decimals.index.is_unique:\n                raise ValueError('Index of decimals must be unique')\n        new_cols = list(_dict_round(self, decimals))\n    elif is_integer(decimals):\n        new_cols = [_series_round(v, decimals) for _, v in self.items()]\n    else:\n        raise TypeError('decimals must be an integer, a dict-like or a Series')\n    if len(new_cols) > 0:\n        return self._constructor(concat(new_cols, axis=1), index=self.index, columns=self.columns)\n    else:\n        return self",
                            "def corr(self, method='pearson', min_periods=1):\n    \"\"\"\n    Compute pairwise correlation of columns, excluding NA/null values.\n\n    Parameters\n    ----------\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float. Note that the returned matrix from corr\n            will have 1 along the diagonals and will be symmetric\n            regardless of the callable's behavior.\n\n            .. versionadded:: 0.24.0\n\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result. Currently only available for Pearson\n        and Spearman correlation.\n\n    Returns\n    -------\n    DataFrame\n        Correlation matrix.\n\n    See Also\n    --------\n    DataFrame.corrwith\n    Series.corr\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.corr(method=histogram_intersection)\n          dogs  cats\n    dogs   1.0   0.3\n    cats   0.3   1.0\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n    if method == 'pearson':\n        correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n    elif method == 'spearman':\n        correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=min_periods)\n    elif method == 'kendall' or callable(method):\n        if min_periods is None:\n            min_periods = 1\n        mat = ensure_float64(mat).T\n        corrf = nanops.get_corr_func(method)\n        K = len(cols)\n        correl = np.empty((K, K), dtype=float)\n        mask = np.isfinite(mat)\n        for i, ac in enumerate(mat):\n            for j, bc in enumerate(mat):\n                if i > j:\n                    continue\n                valid = mask[i] & mask[j]\n                if valid.sum() < min_periods:\n                    c = np.nan\n                elif i == j:\n                    c = 1.0\n                elif not valid.all():\n                    c = corrf(ac[valid], bc[valid])\n                else:\n                    c = corrf(ac, bc)\n                correl[i, j] = c\n                correl[j, i] = c\n    else:\n        raise ValueError(f\"method must be either 'pearson', 'spearman', 'kendall', or a callable, '{method}' was supplied\")\n    return self._constructor(correl, index=idx, columns=cols)",
                            "def cov(self, min_periods=None):\n    \"\"\"\n    Compute pairwise covariance of columns, excluding NA/null values.\n\n    Compute the pairwise covariance among the series of a DataFrame.\n    The returned data frame is the `covariance matrix\n    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n    of the DataFrame.\n\n    Both NA and null values are automatically excluded from the\n    calculation. (See the note below about bias from missing values.)\n    A threshold can be set for the minimum number of\n    observations for each value created. Comparisons with observations\n    below this threshold will be returned as ``NaN``.\n\n    This method is generally used for the analysis of time series data to\n    understand the relationship between different measures\n    across time.\n\n    Parameters\n    ----------\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result.\n\n    Returns\n    -------\n    DataFrame\n        The covariance matrix of the series of the DataFrame.\n\n    See Also\n    --------\n    Series.cov : Compute covariance with another Series.\n    core.window.EWM.cov: Exponential weighted sample covariance.\n    core.window.Expanding.cov : Expanding sample covariance.\n    core.window.Rolling.cov : Rolling sample covariance.\n\n    Notes\n    -----\n    Returns the covariance matrix of the DataFrame's time series.\n    The covariance is normalized by N-1.\n\n    For DataFrames that have Series that are missing data (assuming that\n    data is `missing at random\n    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n    the returned covariance matrix will be an unbiased estimate\n    of the variance and covariance between the member Series.\n\n    However, for many applications this estimate may not be acceptable\n    because the estimate covariance matrix is not guaranteed to be positive\n    semi-definite. This could lead to estimate correlations having\n    absolute values which are greater than one, and/or a non-invertible\n    covariance matrix. See `Estimation of covariance matrices\n    <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n    matrices>`__ for more details.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.cov()\n              dogs      cats\n    dogs  0.666667 -1.000000\n    cats -1.000000  1.666667\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(1000, 5),\n    ...                   columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df.cov()\n              a         b         c         d         e\n    a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n    b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n    e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n    **Minimum number of periods**\n\n    This method also supports an optional ``min_periods`` keyword\n    that specifies the required minimum number of non-NA observations for\n    each column pair in order to have a valid result:\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(20, 3),\n    ...                   columns=['a', 'b', 'c'])\n    >>> df.loc[df.index[:5], 'a'] = np.nan\n    >>> df.loc[df.index[5:10], 'b'] = np.nan\n    >>> df.cov(min_periods=12)\n              a         b         c\n    a  0.316741       NaN -0.150812\n    b       NaN  1.248003  0.191417\n    c -0.150812  0.191417  0.895202\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n    if notna(mat).all():\n        if min_periods is not None and min_periods > len(mat):\n            baseCov = np.empty((mat.shape[1], mat.shape[1]))\n            baseCov.fill(np.nan)\n        else:\n            baseCov = np.cov(mat.T)\n        baseCov = baseCov.reshape((len(cols), len(cols)))\n    else:\n        baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)\n    return self._constructor(baseCov, index=idx, columns=cols)",
                            "def corrwith(self, other, axis=0, drop=False, method='pearson'):\n    \"\"\"\n    Compute pairwise correlation.\n\n    Pairwise correlation is computed between rows or columns of\n    DataFrame with rows or columns of Series or DataFrame. DataFrames\n    are first aligned along both axes before computing the\n    correlations.\n\n    Parameters\n    ----------\n    other : DataFrame, Series\n        Object with which to compute correlations.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n        row-wise.\n    drop : bool, default False\n        Drop missing indices from result.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Pairwise correlations.\n\n    See Also\n    --------\n    DataFrame.corr\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    this = self._get_numeric_data()\n    if isinstance(other, Series):\n        return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n    other = other._get_numeric_data()\n    left, right = this.align(other, join='inner', copy=False)\n    if axis == 1:\n        left = left.T\n        right = right.T\n    if method == 'pearson':\n        left = left + right * 0\n        right = right + left * 0\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n        correl = num / dom\n    elif method in ['kendall', 'spearman'] or callable(method):\n\n        def c(x):\n            return nanops.nancorr(x[0], x[1], method=method)\n        correl = Series(map(c, zip(left.values.T, right.values.T)), index=left.columns)\n    else:\n        raise ValueError(f\"Invalid method {method} was passed, valid methods are: 'pearson', 'kendall', 'spearman', or callable\")\n    if not drop:\n        raxis = 1 if axis == 0 else 0\n        result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n        idx_diff = result_index.difference(correl.index)\n        if len(idx_diff) > 0:\n            correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n    return correl",
                            "def count(self, axis=0, level=None, numeric_only=False):\n    \"\"\"\n    Count non-NA cells for each column or row.\n\n    The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n    on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index' counts are generated for each column.\n        If 1 or 'columns' counts are generated for each **row**.\n    level : int or str, optional\n        If the axis is a `MultiIndex` (hierarchical), count along a\n        particular `level`, collapsing into a `DataFrame`.\n        A `str` specifies the level name.\n    numeric_only : bool, default False\n        Include only `float`, `int` or `boolean` data.\n\n    Returns\n    -------\n    Series or DataFrame\n        For each column/row the number of non-NA/null entries.\n        If `level` is specified returns a `DataFrame`.\n\n    See Also\n    --------\n    Series.count: Number of non-NA elements in a Series.\n    DataFrame.shape: Number of DataFrame rows and columns (including NA\n        elements).\n    DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n        elements.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary:\n\n    >>> df = pd.DataFrame({\"Person\":\n    ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n    ...                    \"Age\": [24., np.nan, 21., 33, 26],\n    ...                    \"Single\": [False, True, True, True, False]})\n    >>> df\n       Person   Age  Single\n    0    John  24.0   False\n    1    Myla   NaN    True\n    2   Lewis  21.0    True\n    3    John  33.0    True\n    4    Myla  26.0   False\n\n    Notice the uncounted NA values:\n\n    >>> df.count()\n    Person    5\n    Age       4\n    Single    5\n    dtype: int64\n\n    Counts for each **row**:\n\n    >>> df.count(axis='columns')\n    0    3\n    1    2\n    2    3\n    3    3\n    4    3\n    dtype: int64\n\n    Counts for one level of a `MultiIndex`:\n\n    >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n            Age\n    Person\n    John      2\n    Lewis     1\n    Myla      1\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if level is not None:\n        return self._count_level(level, axis=axis, numeric_only=numeric_only)\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n    if len(frame._get_axis(axis)) == 0:\n        result = Series(0, index=frame._get_agg_axis(axis))\n    elif frame._is_mixed_type or frame._data.any_extension_types:\n        result = notna(frame).sum(axis=axis)\n    else:\n        series_counts = notna(frame).sum(axis=axis)\n        counts = series_counts.values\n        result = Series(counts, index=frame._get_agg_axis(axis))\n    return result.astype('int64')",
                            "def _count_level(self, level, axis=0, numeric_only=False):\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n    count_axis = frame._get_axis(axis)\n    agg_axis = frame._get_agg_axis(axis)\n    if not isinstance(count_axis, ABCMultiIndex):\n        raise TypeError(f'Can only count levels on hierarchical {self._get_axis_name(axis)}.')\n    if frame._is_mixed_type:\n        mask = notna(frame).values\n    else:\n        mask = notna(frame.values)\n    if axis == 1:\n        mask = mask.T\n    if isinstance(level, str):\n        level = count_axis._get_level_number(level)\n    level_name = count_axis._names[level]\n    level_index = count_axis.levels[level]._shallow_copy(name=level_name)\n    level_codes = ensure_int64(count_axis.codes[level])\n    counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0)\n    result = DataFrame(counts, index=level_index, columns=agg_axis)\n    if axis == 1:\n        return result.T\n    else:\n        return result",
                            "def _reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds):\n    if axis is None and filter_type == 'bool':\n        labels = None\n        constructor = None\n    else:\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == 'numeric':\n            data = self._get_numeric_data()\n        elif filter_type == 'bool':\n            if axis_matters:\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:\n            msg = f'Generating numeric_only data with filter_type {filter_type} not supported.'\n            raise NotImplementedError(msg)\n        return data\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n            if filter_type == 'bool' and is_object_dtype(values) and (axis is None):\n                result = np.bool_(result)\n        except TypeError:\n            if filter_type is None and axis == 0:\n                from pandas.core.apply import frame_apply\n                opa = frame_apply(self, func=f, result_type='expand', ignore_failures=True)\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n            data = _get_data(axis_matters=False)\n            with np.errstate(all='ignore'):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n    if hasattr(result, 'dtype') and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == 'numeric':\n                result = result.astype(np.float64)\n            elif filter_type == 'bool' and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n    if constructor is not None:\n        result = Series(result, index=labels)\n    return result",
                            "def nunique(self, axis=0, dropna=True):\n    \"\"\"\n    Count distinct observations over requested axis.\n\n    Return Series with number of distinct observations. Can ignore NaN\n    values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n        column-wise.\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    Series\n\n    See Also\n    --------\n    Series.nunique: Method nunique for Series.\n    DataFrame.count: Count non-NA cells for each column or row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n    >>> df.nunique()\n    A    3\n    B    1\n    dtype: int64\n\n    >>> df.nunique(axis=1)\n    0    1\n    1    2\n    2    2\n    dtype: int64\n    \"\"\"\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)",
                            "def idxmin(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of minimum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of minima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmin\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmin``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                            "def idxmax(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of maximum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of maxima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmax\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmax``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                            "def _get_agg_axis(self, axis_num):\n    \"\"\"\n    Let's be explicit about this.\n    \"\"\"\n    if axis_num == 0:\n        return self.columns\n    elif axis_num == 1:\n        return self.index\n    else:\n        raise ValueError(f'Axis must be 0 or 1 (got {repr(axis_num)})')",
                            "def mode(self, axis=0, numeric_only=False, dropna=True):\n    \"\"\"\n    Get the mode(s) of each element along the selected axis.\n\n    The mode of a set of values is the value that appears most often.\n    It can be multiple values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to iterate over while searching for the mode:\n\n        * 0 or 'index' : get mode of each column\n        * 1 or 'columns' : get mode of each row.\n\n    numeric_only : bool, default False\n        If True, only apply to numeric columns.\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The modes of each column or row.\n\n    See Also\n    --------\n    Series.mode : Return the highest frequency value in a Series.\n    Series.value_counts : Return the counts of values in a Series.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 2, 2),\n    ...                    ('mammal', 4, np.nan),\n    ...                    ('arthropod', 8, 0),\n    ...                    ('bird', 2, np.nan)],\n    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n    ...                   columns=('species', 'legs', 'wings'))\n    >>> df\n               species  legs  wings\n    falcon        bird     2    2.0\n    horse       mammal     4    NaN\n    spider   arthropod     8    0.0\n    ostrich       bird     2    NaN\n\n    By default, missing values are not considered, and the mode of wings\n    are both 0 and 2. The second row of species and legs contains ``NaN``,\n    because they have only one mode, but the DataFrame has two rows.\n\n    >>> df.mode()\n      species  legs  wings\n    0    bird   2.0    0.0\n    1     NaN   NaN    2.0\n\n    Setting ``dropna=False`` ``NaN`` values are considered and they can be\n    the mode (like for wings).\n\n    >>> df.mode(dropna=False)\n      species  legs  wings\n    0    bird     2    NaN\n\n    Setting ``numeric_only=True``, only the mode of numeric columns is\n    computed, and columns of other types are ignored.\n\n    >>> df.mode(numeric_only=True)\n       legs  wings\n    0   2.0    0.0\n    1   NaN    2.0\n\n    To compute the mode over columns and not rows, use the axis parameter:\n\n    >>> df.mode(axis='columns', numeric_only=True)\n               0    1\n    falcon   2.0  NaN\n    horse    4.0  NaN\n    spider   0.0  8.0\n    ostrich  2.0  NaN\n    \"\"\"\n    data = self if not numeric_only else self._get_numeric_data()\n\n    def f(s):\n        return s.mode(dropna=dropna)\n    return data.apply(f, axis=axis)",
                            "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear'):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n    ...                   columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n\n    Specifying `numeric_only=False` will also compute the quantile of\n    datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2],\n    ...                    'B': [pd.Timestamp('2010'),\n    ...                          pd.Timestamp('2011')],\n    ...                    'C': [pd.Timedelta('1 days'),\n    ...                          pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    validate_percentile(q)\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n    if is_transposed:\n        data = data.T\n    if len(data.columns) == 0:\n        cols = Index([], name=self.columns.name)\n        if is_list_like(q):\n            return self._constructor([], index=q, columns=cols)\n        return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n    result = data._data.quantile(qs=q, axis=1, interpolation=interpolation, transposed=is_transposed)\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n    if is_transposed:\n        result = result.T\n    return result",
                            "def to_timestamp(self, freq=None, how='start', axis=0, copy=True):\n    \"\"\"\n    Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    DataFrame with DatetimeIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n    else:\n        raise AssertionError(f'Axis must be 0 or 1. Got {axis}')\n    return self._constructor(new_data)",
                            "def to_period(self, freq=None, axis=0, copy=True):\n    \"\"\"\n    Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n    Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default\n        Frequency of the PeriodIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    TimeSeries with PeriodIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_period(freq=freq))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_period(freq=freq))\n    else:\n        raise AssertionError(f'Axis must be 0 or 1. Got {axis}')\n    return self._constructor(new_data)",
                            "def isin(self, values):\n    \"\"\"\n    Whether each element in the DataFrame is contained in values.\n\n    Parameters\n    ----------\n    values : iterable, Series, DataFrame or dict\n        The result will only be true at a location if all the\n        labels match. If `values` is a Series, that's the index. If\n        `values` is a dict, the keys must be the column names,\n        which must match. If `values` is a DataFrame,\n        then both the index and column labels must match.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame of booleans showing whether each element in the DataFrame\n        is contained in values.\n\n    See Also\n    --------\n    DataFrame.eq: Equality test for DataFrame.\n    Series.isin: Equivalent method on Series.\n    Series.str.contains: Test if pattern or regex is contained within a\n        string of a Series or Index.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n    ...                   index=['falcon', 'dog'])\n    >>> df\n            num_legs  num_wings\n    falcon         2          2\n    dog            4          0\n\n    When ``values`` is a list check whether every value in the DataFrame\n    is present in the list (which animals have 0 or 2 legs or wings)\n\n    >>> df.isin([0, 2])\n            num_legs  num_wings\n    falcon      True       True\n    dog        False       True\n\n    When ``values`` is a dict, we can pass values to check for each\n    column separately:\n\n    >>> df.isin({'num_wings': [0, 3]})\n            num_legs  num_wings\n    falcon     False      False\n    dog        False       True\n\n    When ``values`` is a Series or DataFrame the index and column must\n    match. Note that 'falcon' does not match based on the number of legs\n    in df2.\n\n    >>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n    ...                      index=['spider', 'falcon'])\n    >>> df.isin(other)\n            num_legs  num_wings\n    falcon      True       True\n    dog        False      False\n    \"\"\"\n    if isinstance(values, dict):\n        from pandas.core.reshape.concat import concat\n        values = collections.defaultdict(list, values)\n        return concat((self.iloc[:, [i]].isin(values[col]) for i, col in enumerate(self.columns)), axis=1)\n    elif isinstance(values, Series):\n        if not values.index.is_unique:\n            raise ValueError('cannot compute isin with a duplicate axis.')\n        return self.eq(values.reindex_like(self), axis='index')\n    elif isinstance(values, DataFrame):\n        if not (values.columns.is_unique and values.index.is_unique):\n            raise ValueError('cannot compute isin with a duplicate axis.')\n        return self.eq(values.reindex_like(self))\n    else:\n        if not is_list_like(values):\n            raise TypeError(f'only list-like or dict-like objects are allowed to be passed to DataFrame.isin(), you passed a {repr(type(values).__name__)}')\n        return DataFrame(algorithms.isin(self.values.ravel(), values).reshape(self.shape), self.index, self.columns)",
                            "def _verbose_repr():\n    lines.append(f'Data columns (total {len(self.columns)} columns):')\n    space = max((len(pprint_thing(k)) for k in self.columns)) + 4\n    counts = None\n    tmpl = '{count}{dtype}'\n    if show_counts:\n        counts = self.count()\n        if len(cols) != len(counts):\n            raise AssertionError(f'Columns must equal counts ({len(cols)} != {len(counts)})')\n        tmpl = '{count} non-null {dtype}'\n    dtypes = self.dtypes\n    for i, col in enumerate(self.columns):\n        dtype = dtypes.iloc[i]\n        col = pprint_thing(col)\n        count = ''\n        if show_counts:\n            count = counts.iloc[i]\n        lines.append(_put_str(col, space) + tmpl.format(count=count, dtype=dtype))",
                            "def _non_verbose_repr():\n    lines.append(self.columns._summary(name='Columns'))",
                            "def _sizeof_fmt(num, size_qualifier):\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if num < 1024.0:\n            return f'{num:3.1f}{size_qualifier} {x}'\n        num /= 1024.0\n    return f'{num:3.1f}{size_qualifier} PB'",
                            "def extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]:\n    extracted_dtypes = [unique_dtype for unique_dtype in unique_dtypes if issubclass(unique_dtype.type, tuple(dtypes_set))]\n    return extracted_dtypes",
                            "def reindexer(value):\n    if value.index.equals(self.index) or not len(self.index):\n        value = value._values.copy()\n    else:\n        try:\n            value = value.reindex(self.index)._values\n        except ValueError as err:\n            if not value.index.is_unique:\n                raise err\n            raise TypeError('incompatible index of inserted column with frame index')\n    return value",
                            "def _maybe_casted_values(index, labels=None):\n    values = index._values\n    if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n        if values.dtype == np.object_:\n            values = lib.maybe_convert_objects(values)\n    if labels is not None:\n        mask = labels == -1\n        if mask.all():\n            values = np.empty(len(mask))\n            values.fill(np.nan)\n        else:\n            values = values.take(labels)\n            values_type = type(values)\n            values_dtype = values.dtype\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values._data\n            if mask.any():\n                values, _ = maybe_upcast_putmask(values, mask, np.nan)\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values_type(values, dtype=values_dtype)\n    return values",
                            "def f(vals):\n    labels, shape = algorithms.factorize(vals, size_hint=min(len(self), _SIZE_HINT_LIMIT))\n    return (labels.astype('i8', copy=False), len(shape))",
                            "def extract_values(arr):\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n    if needs_i8_conversion(arr):\n        if is_extension_array_dtype(arr.dtype):\n            arr = arr.asi8\n        else:\n            arr = arr.view('i8')\n    return arr",
                            "def combiner(x, y):\n    mask = isna(x)\n    if isinstance(mask, (ABCIndexClass, ABCSeries)):\n        mask = mask._values\n    x_values = extract_values(x)\n    y_values = extract_values(y)\n    if y.name not in self.columns:\n        return y_values\n    return expressions.where(mask, y_values, x_values)",
                            "def infer(x):\n    if x.empty:\n        return lib.map_infer(x, func)\n    return lib.map_infer(x.astype(object).values, func)",
                            "def _dict_round(df, decimals):\n    for col, vals in df.items():\n        try:\n            yield _series_round(vals, decimals[col])\n        except KeyError:\n            yield vals",
                            "def _series_round(s, decimals):\n    if is_integer_dtype(s) or is_float_dtype(s):\n        return s.round(decimals)\n    return s",
                            "def f(x):\n    return op(x, axis=axis, skipna=skipna, **kwds)",
                            "def _get_data(axis_matters):\n    if filter_type is None or filter_type == 'numeric':\n        data = self._get_numeric_data()\n    elif filter_type == 'bool':\n        if axis_matters:\n            data = self._get_bool_data() if axis == 0 else self\n        else:\n            data = self._get_bool_data()\n    else:\n        msg = f'Generating numeric_only data with filter_type {filter_type} not supported.'\n        raise NotImplementedError(msg)\n    return data",
                            "def f(s):\n    return s.mode(dropna=dropna)",
                            "def _arith_op(left, right):\n    left, right = ops.fill_binop(left, right, fill_value)\n    return func(left, right)",
                            "def c(x):\n    return nanops.nancorr(x[0], x[1], method=method)"
                        ],
                        "constructor_variables": [
                            "data",
                            "arr",
                            "exc",
                            "index",
                            "data_columns",
                            "mgr",
                            "mask",
                            "values",
                            "columns",
                            "dtype"
                        ],
                        "class_level_variables": [
                            "_typ",
                            "_constructor_sliced",
                            "_deprecations",
                            "_accessors",
                            "T",
                            "_agg_summary_and_see_also_doc",
                            "_agg_examples_doc",
                            "agg",
                            "plot",
                            "hist",
                            "boxplot",
                            "sparse"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "_constructor(self) -> Type['DataFrame']",
                            "_constructor_expanddim(self)",
                            "__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
                            "axes(self) -> List[Index]",
                            "shape(self) -> Tuple[int, int]",
                            "_is_homogeneous_type(self) -> bool",
                            "_repr_fits_vertical_(self) -> bool",
                            "_repr_fits_horizontal_(self, ignore_width: bool=False) -> bool",
                            "_info_repr(self) -> bool",
                            "__repr__(self) -> str",
                            "_repr_html_(self) -> Optional[str]",
                            "to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]",
                            "style(self)",
                            "items(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                            "iteritems(self)",
                            "iterrows(self)",
                            "itertuples(self, index=True, name='Pandas')",
                            "__len__(self) -> int",
                            "dot(self, other)",
                            "__matmul__(self, other)",
                            "__rmatmul__(self, other)",
                            "from_dict(cls, data, orient='columns', dtype=None, columns=None)",
                            "to_numpy(self, dtype=None, copy=False)",
                            "to_dict(self, orient='dict', into=dict)",
                            "to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None)",
                            "from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None)",
                            "to_records(self, index=True, column_dtypes=None, index_dtypes=None)",
                            "_from_arrays(cls, arrays, columns, index, dtype=None)",
                            "to_stata(self, path, convert_dates=None, write_index=True, byteorder=None, time_stamp=None, data_label=None, variable_labels=None, version=114, convert_strl=None)",
                            "to_feather(self, path)",
                            "to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs)",
                            "to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None)",
                            "info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None)",
                            "memory_usage(self, index=True, deep=False)",
                            "transpose(self, *args, **kwargs)",
                            "_ixs(self, i: int, axis: int=0)",
                            "__getitem__(self, key)",
                            "_getitem_bool_array(self, key)",
                            "_getitem_multilevel(self, key)",
                            "_get_value(self, index, col, takeable: bool=False)",
                            "__setitem__(self, key, value)",
                            "_setitem_slice(self, key, value)",
                            "_setitem_array(self, key, value)",
                            "_setitem_frame(self, key, value)",
                            "_set_item(self, key, value)",
                            "_set_value(self, index, col, value, takeable: bool=False)",
                            "_ensure_valid_index(self, value)",
                            "_box_item_values(self, key, values)",
                            "_box_col_values(self, values, items)",
                            "query(self, expr, inplace=False, **kwargs)",
                            "eval(self, expr, inplace=False, **kwargs)",
                            "select_dtypes(self, include=None, exclude=None)",
                            "insert(self, loc, column, value, allow_duplicates=False)",
                            "assign(self, **kwargs)",
                            "_sanitize_column(self, key, value, broadcast=True)",
                            "_series(self)",
                            "lookup(self, row_labels, col_labels)",
                            "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                            "_reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
                            "_reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
                            "_reindex_multi(self, axes, copy, fill_value)",
                            "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                            "reindex(self, *args, **kwargs)",
                            "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
                            "rename(self, *args, **kwargs)",
                            "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)",
                            "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                            "set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
                            "reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']",
                            "isna(self)",
                            "isnull(self)",
                            "notna(self)",
                            "notnull(self)",
                            "dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
                            "drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False) -> Optional['DataFrame']",
                            "duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series'",
                            "sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
                            "sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
                            "nlargest(self, n, columns, keep='first')",
                            "nsmallest(self, n, columns, keep='first')",
                            "swaplevel(self, i=-2, j=-1, axis=0)",
                            "reorder_levels(self, order, axis=0)",
                            "_combine_frame(self, other, func, fill_value=None, level=None)",
                            "_combine_match_index(self, other, func)",
                            "_construct_result(self, result) -> 'DataFrame'",
                            "combine(self, other, func, fill_value=None, overwrite=True)",
                            "combine_first(self, other)",
                            "update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore')",
                            "pivot(self, index=None, columns=None, values=None)",
                            "pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
                            "stack(self, level=-1, dropna=True)",
                            "explode(self, column: Union[str, Tuple]) -> 'DataFrame'",
                            "unstack(self, level=-1, fill_value=None)",
                            "melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)",
                            "diff(self, periods=1, axis=0)",
                            "_gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]",
                            "aggregate(self, func, axis=0, *args, **kwargs)",
                            "_aggregate(self, arg, axis=0, *args, **kwargs)",
                            "transform(self, func, axis=0, *args, **kwargs)",
                            "apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
                            "applymap(self, func)",
                            "append(self, other, ignore_index=False, verify_integrity=False, sort=False)",
                            "join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                            "_join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                            "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)",
                            "round(self, decimals=0, *args, **kwargs)",
                            "corr(self, method='pearson', min_periods=1)",
                            "cov(self, min_periods=None)",
                            "corrwith(self, other, axis=0, drop=False, method='pearson')",
                            "count(self, axis=0, level=None, numeric_only=False)",
                            "_count_level(self, level, axis=0, numeric_only=False)",
                            "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                            "nunique(self, axis=0, dropna=True)",
                            "idxmin(self, axis=0, skipna=True)",
                            "idxmax(self, axis=0, skipna=True)",
                            "_get_agg_axis(self, axis_num)",
                            "mode(self, axis=0, numeric_only=False, dropna=True)",
                            "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
                            "to_timestamp(self, freq=None, how='start', axis=0, copy=True)",
                            "to_period(self, freq=None, axis=0, copy=True)",
                            "isin(self, values)",
                            "_verbose_repr()",
                            "_non_verbose_repr()",
                            "_sizeof_fmt(num, size_qualifier)",
                            "extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]",
                            "reindexer(value)",
                            "_maybe_casted_values(index, labels=None)",
                            "f(vals)",
                            "extract_values(arr)",
                            "combiner(x, y)",
                            "infer(x)",
                            "_dict_round(df, decimals)",
                            "_series_round(s, decimals)",
                            "f(x)",
                            "_get_data(axis_matters)",
                            "f(s)",
                            "_arith_op(left, right)",
                            "c(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[2M]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-01",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-01', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "1"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[2M]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[2M]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-01",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[2M]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[Period('2016-01', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-01', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['2016-01']\nLength: 1, dtype: period[2M]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "         0\n0  2016-01",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "1"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11edcdac0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of          0\n0  2016-01>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[2M]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-03",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-03', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "1"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[2M]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[2M]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-03",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[2M]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[Period('2016-03', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-03', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['2016-03']\nLength: 1, dtype: period[2M]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "         0\n0  2016-03",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=1, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "1"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11ee917c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of          0\n0  2016-03>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[19D]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['1994-04-01']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-04-20']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-05-09']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-05-28']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-06-16']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-07-05']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-07-24']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-08-12']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-08-31']\nLength: 1, dtype: period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "            0           1           2  ...           6           7           8\n0  1994-04-01  1994-04-20  1994-05-09  ...  1994-07-24  1994-08-12  1994-08-31\n\n[1 rows x 9 columns]",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11eddd440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of             0           1           2  ...           6           7           8\n0  1994-04-01  1994-04-20  1994-05-09  ...  1994-07-24  1994-08-12  1994-08-31\n\n[1 rows x 9 columns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[19D]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     0    1    2    3    4    5    6    7    8\n0  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11edda600>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of      0    1    2    3    4    5    6    7    8\n0  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[19D]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['1994-04-01']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-04-20']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-05-09']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-05-28']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-06-16']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-07-05']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-07-24']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-08-12']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-08-31']\nLength: 1, dtype: period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "            0           1           2  ...           6           7           8\n0  1994-04-01  1994-04-20  1994-05-09  ...  1994-07-24  1994-08-12  1994-08-31\n\n[1 rows x 9 columns]",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11ee917c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of             0           1           2  ...           6           7           8\n0  1994-04-01  1994-04-20  1994-05-09  ...  1994-07-24  1994-08-12  1994-08-31\n\n[1 rows x 9 columns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[19D]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     0    1    2    3    4    5    6    7    8\n0  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11ee002c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of      0    1    2    3    4    5    6    7    8\n0  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[19D]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['1994-04-01']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-04-20']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-05-09']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-05-28']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-06-16']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-07-05']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-07-24']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-08-12']\nLength: 1, dtype: period[19D], <PeriodArray>\n['1994-08-31']\nLength: 1, dtype: period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "            0           1           2  ...           6           7           8\n0  1994-04-01  1994-04-20  1994-05-09  ...  1994-07-24  1994-08-12  1994-08-31\n\n[1 rows x 9 columns]",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11ee01840>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of             0           1           2  ...           6           7           8\n0  1994-04-01  1994-04-20  1994-05-09  ...  1994-07-24  1994-08-12  1994-08-31\n\n[1 rows x 9 columns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "args": {
                                    "variable_value": "()",
                                    "variable_type": "tuple",
                                    "variable_shape": "0"
                                },
                                "dtypes": {
                                    "variable_value": "[period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "self.dtypes": {
                                    "variable_value": "0    period[19D]\ndtype: object",
                                    "variable_type": "Series",
                                    "variable_shape": "1"
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "self._is_homogeneous_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "is_extension_array_dtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dtype": {
                                    "variable_value": "period[19D]",
                                    "variable_type": "PeriodDtype",
                                    "variable_shape": "()"
                                },
                                "arr_type": {
                                    "variable_value": "<class 'pandas.core.arrays.period.PeriodArray'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110b254a0>"
                                },
                                "dtype.construct_array_type": {
                                    "variable_value": "<bound method PeriodDtype.construct_array_type of <class 'pandas.core.dtypes.dtypes.PeriodDtype'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "new_values": {
                                    "variable_value": "[<PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D], <PeriodArray>\n['NaT']\nLength: 1, dtype: period[19D]]",
                                    "variable_type": "list",
                                    "variable_shape": "9"
                                },
                                "arr_type._from_sequence": {
                                    "variable_value": "<bound method PeriodArray._from_sequence of <class 'pandas.core.arrays.period.PeriodArray'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "row": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "     0    1    2    3    4    5    6    7    8\n0  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x11130a1d0>"
                                },
                                "self.index": {
                                    "variable_value": "RangeIndex(start=0, stop=9, step=1)",
                                    "variable_type": "RangeIndex",
                                    "variable_shape": "9"
                                },
                                "self.columns": {
                                    "variable_value": "Int64Index([0], dtype='int64')",
                                    "variable_type": "Int64Index",
                                    "variable_shape": "1"
                                },
                                "self.values.T": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "copy": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of list object at 0x11ee093c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result.__finalize__": {
                                    "variable_value": "<bound method NDFrame.__finalize__ of      0    1    2    3    4    5    6    7    8\n0  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _from_nested_dict(data):\n    # TODO: this should be seriously cythonized\n    new_data = {}\n    for index, s in data.items():\n        for col, v in s.items():\n            new_data[col] = new_data.get(col, {})\n            new_data[col][index] = v\n    return new_data",
                "def _put_str(s, space):\n    return str(s)[:space].ljust(space)",
                "@property\ndef _constructor(self) -> Type[\"DataFrame\"]:\n    return DataFrame",
                "@property\ndef _constructor_expanddim(self):\n    raise NotImplementedError(\"Not supported for DataFrames!\")",
                "def __init__(\n    self,\n    data=None,\n    index: Optional[Axes] = None,\n    columns: Optional[Axes] = None,\n    dtype: Optional[Dtype] = None,\n    copy: bool = False,\n):\n    if data is None:\n        data = {}\n    if dtype is not None:\n        dtype = self._validate_dtype(dtype)\n\n    if isinstance(data, DataFrame):\n        data = data._data\n\n    if isinstance(data, BlockManager):\n        mgr = self._init_mgr(\n            data, axes=dict(index=index, columns=columns), dtype=dtype, copy=copy\n        )\n    elif isinstance(data, dict):\n        mgr = init_dict(data, index, columns, dtype=dtype)\n    elif isinstance(data, ma.MaskedArray):\n        import numpy.ma.mrecords as mrecords\n\n        # masked recarray\n        if isinstance(data, mrecords.MaskedRecords):\n            mgr = masked_rec_array_to_mgr(data, index, columns, dtype, copy)\n\n        # a masked array\n        else:\n            mask = ma.getmaskarray(data)\n            if mask.any():\n                data, fill_value = maybe_upcast(data, copy=True)\n                data.soften_mask()  # set hardmask False if it was True\n                data[mask] = fill_value\n            else:\n                data = data.copy()\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n    elif isinstance(data, (np.ndarray, Series, Index)):\n        if data.dtype.names:\n            data_columns = list(data.dtype.names)\n            data = {k: data[k] for k in data_columns}\n            if columns is None:\n                columns = data_columns\n            mgr = init_dict(data, index, columns, dtype=dtype)\n        elif getattr(data, \"name\", None) is not None:\n            mgr = init_dict({data.name: data}, index, columns, dtype=dtype)\n        else:\n            mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n\n    # For data is list-like, or Iterable (will consume into list)\n    elif isinstance(data, abc.Iterable) and not isinstance(data, (str, bytes)):\n        if not isinstance(data, (abc.Sequence, ExtensionArray)):\n            data = list(data)\n        if len(data) > 0:\n            if is_list_like(data[0]) and getattr(data[0], \"ndim\", 1) == 1:\n                if is_named_tuple(data[0]) and columns is None:\n                    columns = data[0]._fields\n                arrays, columns = to_arrays(data, columns, dtype=dtype)\n                columns = ensure_index(columns)\n\n                # set the index\n                if index is None:\n                    if isinstance(data[0], Series):\n                        index = get_names_from_index(data)\n                    elif isinstance(data[0], Categorical):\n                        index = ibase.default_index(len(data[0]))\n                    else:\n                        index = ibase.default_index(len(data))\n\n                mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n            else:\n                mgr = init_ndarray(data, index, columns, dtype=dtype, copy=copy)\n        else:\n            mgr = init_dict({}, index, columns, dtype=dtype)\n    else:\n        try:\n            arr = np.array(data, dtype=dtype, copy=copy)\n        except (ValueError, TypeError) as e:\n            exc = TypeError(\n                \"DataFrame constructor called with \"\n                f\"incompatible data and dtype: {e}\"\n            )\n            raise exc from e\n\n        if arr.ndim == 0 and index is not None and columns is not None:\n            values = cast_scalar_to_array(\n                (len(index), len(columns)), data, dtype=dtype\n            )\n            mgr = init_ndarray(\n                values, index, columns, dtype=values.dtype, copy=False\n            )\n        else:\n            raise ValueError(\"DataFrame constructor not properly called!\")\n\n    NDFrame.__init__(self, mgr, fastpath=True)",
                "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return a list representing the axes of the DataFrame.\n\n    It has the row axis labels and column axis labels as the only members.\n    They are returned in that order.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.axes\n    [RangeIndex(start=0, stop=2, step=1), Index(['col1', 'col2'],\n    dtype='object')]\n    \"\"\"\n    return [self.index, self.columns]",
                "@property\ndef shape(self) -> Tuple[int, int]:\n    \"\"\"\n    Return a tuple representing the dimensionality of the DataFrame.\n\n    See Also\n    --------\n    ndarray.shape\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.shape\n    (2, 2)\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4],\n    ...                    'col3': [5, 6]})\n    >>> df.shape\n    (2, 3)\n    \"\"\"\n    return len(self.index), len(self.columns)",
                "@property\ndef _is_homogeneous_type(self) -> bool:\n    \"\"\"\n    Whether all the columns in a DataFrame have the same type.\n\n    Returns\n    -------\n    bool\n\n    See Also\n    --------\n    Index._is_homogeneous_type : Whether the object has a single\n        dtype.\n    MultiIndex._is_homogeneous_type : Whether all the levels of a\n        MultiIndex have the same dtype.\n\n    Examples\n    --------\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3, 4]})._is_homogeneous_type\n    True\n    >>> DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.0]})._is_homogeneous_type\n    False\n\n    Items with the same type but different sizes are considered\n    different types.\n\n    >>> DataFrame({\n    ...    \"A\": np.array([1, 2], dtype=np.int32),\n    ...    \"B\": np.array([1, 2], dtype=np.int64)})._is_homogeneous_type\n    False\n    \"\"\"\n    if self._data.any_extension_types:\n        return len({block.dtype for block in self._data.blocks}) == 1\n    else:\n        return not self._data.is_mixed_type",
                "def _repr_fits_vertical_(self) -> bool:\n    \"\"\"\n    Check length against max_rows.\n    \"\"\"\n    max_rows = get_option(\"display.max_rows\")\n    return len(self) <= max_rows",
                "def _repr_fits_horizontal_(self, ignore_width: bool = False) -> bool:\n    \"\"\"\n    Check if full repr fits in horizontal boundaries imposed by the display\n    options width and max_columns.\n\n    In case off non-interactive session, no boundaries apply.\n\n    `ignore_width` is here so ipnb+HTML output can behave the way\n    users expect. display.max_columns remains in effect.\n    GH3541, GH3573\n    \"\"\"\n    width, height = console.get_console_size()\n    max_columns = get_option(\"display.max_columns\")\n    nb_columns = len(self.columns)\n\n    # exceed max columns\n    if (max_columns and nb_columns > max_columns) or (\n        (not ignore_width) and width and nb_columns > (width // 2)\n    ):\n        return False\n\n    # used by repr_html under IPython notebook or scripts ignore terminal\n    # dims\n    if ignore_width or not console.in_interactive_session():\n        return True\n\n    if get_option(\"display.width\") is not None or console.in_ipython_frontend():\n        # check at least the column row for excessive width\n        max_rows = 1\n    else:\n        max_rows = get_option(\"display.max_rows\")\n\n    # when auto-detecting, so width=None and not in ipython front end\n    # check whether repr fits horizontal by actually checking\n    # the width of the rendered repr\n    buf = StringIO()\n\n    # only care about the stuff we'll actually print out\n    # and to_string on entire frame may be expensive\n    d = self\n\n    if not (max_rows is None):  # unlimited rows\n        # min of two, where one may be None\n        d = d.iloc[: min(max_rows, len(d))]\n    else:\n        return True\n\n    d.to_string(buf=buf)\n    value = buf.getvalue()\n    repr_width = max(len(l) for l in value.split(\"\\n\"))\n\n    return repr_width < width",
                "def _info_repr(self) -> bool:\n    \"\"\"\n    True if the repr should show the info view.\n    \"\"\"\n    info_repr_option = get_option(\"display.large_repr\") == \"info\"\n    return info_repr_option and not (\n        self._repr_fits_horizontal_() and self._repr_fits_vertical_()\n    )",
                "def __repr__(self) -> str:\n    \"\"\"\n    Return a string representation for a particular DataFrame.\n    \"\"\"\n    buf = StringIO(\"\")\n    if self._info_repr():\n        self.info(buf=buf)\n        return buf.getvalue()\n\n    max_rows = get_option(\"display.max_rows\")\n    min_rows = get_option(\"display.min_rows\")\n    max_cols = get_option(\"display.max_columns\")\n    max_colwidth = get_option(\"display.max_colwidth\")\n    show_dimensions = get_option(\"display.show_dimensions\")\n    if get_option(\"display.expand_frame_repr\"):\n        width, _ = console.get_console_size()\n    else:\n        width = None\n    self.to_string(\n        buf=buf,\n        max_rows=max_rows,\n        min_rows=min_rows,\n        max_cols=max_cols,\n        line_width=width,\n        max_colwidth=max_colwidth,\n        show_dimensions=show_dimensions,\n    )\n\n    return buf.getvalue()",
                "def _repr_html_(self) -> Optional[str]:\n    \"\"\"\n    Return a html representation for a particular DataFrame.\n\n    Mainly for IPython notebook.\n    \"\"\"\n    if self._info_repr():\n        buf = StringIO(\"\")\n        self.info(buf=buf)\n        # need to escape the <class>, should be the first line.\n        val = buf.getvalue().replace(\"<\", r\"&lt;\", 1)\n        val = val.replace(\">\", r\"&gt;\", 1)\n        return \"<pre>\" + val + \"</pre>\"\n\n    if get_option(\"display.notebook_repr_html\"):\n        max_rows = get_option(\"display.max_rows\")\n        min_rows = get_option(\"display.min_rows\")\n        max_cols = get_option(\"display.max_columns\")\n        show_dimensions = get_option(\"display.show_dimensions\")\n\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=None,\n            col_space=None,\n            na_rep=\"NaN\",\n            formatters=None,\n            float_format=None,\n            sparsify=None,\n            justify=None,\n            index_names=True,\n            header=True,\n            index=True,\n            bold_rows=True,\n            escape=True,\n            max_rows=max_rows,\n            min_rows=min_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n            decimal=\".\",\n            table_id=None,\n            render_links=False,\n        )\n        return formatter.to_html(notebook=True)\n    else:\n        return None",
                "@Substitution(\n    header_type=\"bool or sequence\",\n    header=\"Write out the column names. If a list of strings \"\n    \"is given, it is assumed to be aliases for the \"\n    \"column names\",\n    col_space_type=\"int\",\n    col_space=\"The minimum width of each column\",\n)\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_string(\n    self,\n    buf: Optional[FilePathOrBuffer[str]] = None,\n    columns: Optional[Sequence[str]] = None,\n    col_space: Optional[int] = None,\n    header: Union[bool, Sequence[str]] = True,\n    index: bool = True,\n    na_rep: str = \"NaN\",\n    formatters: Optional[fmt.formatters_type] = None,\n    float_format: Optional[fmt.float_format_type] = None,\n    sparsify: Optional[bool] = None,\n    index_names: bool = True,\n    justify: Optional[str] = None,\n    max_rows: Optional[int] = None,\n    min_rows: Optional[int] = None,\n    max_cols: Optional[int] = None,\n    show_dimensions: bool = False,\n    decimal: str = \".\",\n    line_width: Optional[int] = None,\n    max_colwidth: Optional[int] = None,\n    encoding: Optional[str] = None,\n) -> Optional[str]:\n    \"\"\"\n    Render a DataFrame to a console-friendly tabular output.\n    %(shared_params)s\n    line_width : int, optional\n        Width to wrap a line in characters.\n    max_colwidth : int, optional\n        Max width to truncate each column in characters. By default, no limit.\n\n        .. versionadded:: 1.0.0\n    encoding : str, default \"utf-8\"\n        Set character encoding.\n\n        .. versionadded:: 1.0\n    %(returns)s\n    See Also\n    --------\n    to_html : Convert DataFrame to HTML.\n\n    Examples\n    --------\n    >>> d = {'col1': [1, 2, 3], 'col2': [4, 5, 6]}\n    >>> df = pd.DataFrame(d)\n    >>> print(df.to_string())\n       col1  col2\n    0     1     4\n    1     2     5\n    2     3     6\n    \"\"\"\n\n    from pandas import option_context\n\n    with option_context(\"display.max_colwidth\", max_colwidth):\n        formatter = fmt.DataFrameFormatter(\n            self,\n            columns=columns,\n            col_space=col_space,\n            na_rep=na_rep,\n            formatters=formatters,\n            float_format=float_format,\n            sparsify=sparsify,\n            justify=justify,\n            index_names=index_names,\n            header=header,\n            index=index,\n            min_rows=min_rows,\n            max_rows=max_rows,\n            max_cols=max_cols,\n            show_dimensions=show_dimensions,\n            decimal=decimal,\n            line_width=line_width,\n        )\n        return formatter.to_string(buf=buf, encoding=encoding)",
                "@property\ndef style(self):\n    \"\"\"\n    Returns a Styler object.\n\n    Contains methods for building a styled HTML representation of the DataFrame.\n    a styled HTML representation fo the DataFrame.\n\n    See Also\n    --------\n    io.formats.style.Styler\n    \"\"\"\n    from pandas.io.formats.style import Styler\n\n    return Styler(self)",
                "@Appender(_shared_docs[\"items\"])\ndef items(self) -> Iterable[Tuple[Optional[Hashable], Series]]:\n    if self.columns.is_unique and hasattr(self, \"_item_cache\"):\n        for k in self.columns:\n            yield k, self._get_item_cache(k)\n    else:\n        for i, k in enumerate(self.columns):\n            yield k, self._ixs(i, axis=1)",
                "@Appender(_shared_docs[\"items\"])\ndef iteritems(self):\n    yield from self.items()",
                "def iterrows(self):\n    \"\"\"\n    Iterate over DataFrame rows as (index, Series) pairs.\n\n    Yields\n    ------\n    index : label or tuple of label\n        The index of the row. A tuple for a `MultiIndex`.\n    data : Series\n        The data of the row as a Series.\n\n    it : generator\n        A generator that iterates over the rows of the frame.\n\n    See Also\n    --------\n    DataFrame.itertuples : Iterate over DataFrame rows as namedtuples of the values.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n\n    1. Because ``iterrows`` returns a Series for each row,\n       it does **not** preserve dtypes across the rows (dtypes are\n       preserved across columns for DataFrames). For example,\n\n       >>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])\n       >>> row = next(df.iterrows())[1]\n       >>> row\n       int      1.0\n       float    1.5\n       Name: 0, dtype: float64\n       >>> print(row['int'].dtype)\n       float64\n       >>> print(df['int'].dtype)\n       int64\n\n       To preserve dtypes while iterating over the rows, it is better\n       to use :meth:`itertuples` which returns namedtuples of the values\n       and which is generally faster than ``iterrows``.\n\n    2. You should **never modify** something you are iterating over.\n       This is not guaranteed to work in all cases. Depending on the\n       data types, the iterator returns a copy and not a view, and writing\n       to it will have no effect.\n    \"\"\"\n    columns = self.columns\n    klass = self._constructor_sliced\n    for k, v in zip(self.index, self.values):\n        s = klass(v, index=columns, name=k)\n        yield k, s",
                "def itertuples(self, index=True, name=\"Pandas\"):\n    \"\"\"\n    Iterate over DataFrame rows as namedtuples.\n\n    Parameters\n    ----------\n    index : bool, default True\n        If True, return the index as the first element of the tuple.\n    name : str or None, default \"Pandas\"\n        The name of the returned namedtuples or None to return regular\n        tuples.\n\n    Returns\n    -------\n    iterator\n        An object to iterate over namedtuples for each row in the\n        DataFrame with the first field possibly being the index and\n        following fields being the column values.\n\n    See Also\n    --------\n    DataFrame.iterrows : Iterate over DataFrame rows as (index, Series)\n        pairs.\n    DataFrame.items : Iterate over (column name, Series) pairs.\n\n    Notes\n    -----\n    The column names will be renamed to positional names if they are\n    invalid Python identifiers, repeated, or start with an underscore.\n    With a large number of columns (>255), regular tuples are returned.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [4, 2], 'num_wings': [0, 2]},\n    ...                   index=['dog', 'hawk'])\n    >>> df\n          num_legs  num_wings\n    dog          4          0\n    hawk         2          2\n    >>> for row in df.itertuples():\n    ...     print(row)\n    ...\n    Pandas(Index='dog', num_legs=4, num_wings=0)\n    Pandas(Index='hawk', num_legs=2, num_wings=2)\n\n    By setting the `index` parameter to False we can remove the index\n    as the first element of the tuple:\n\n    >>> for row in df.itertuples(index=False):\n    ...     print(row)\n    ...\n    Pandas(num_legs=4, num_wings=0)\n    Pandas(num_legs=2, num_wings=2)\n\n    With the `name` parameter set we set a custom name for the yielded\n    namedtuples:\n\n    >>> for row in df.itertuples(name='Animal'):\n    ...     print(row)\n    ...\n    Animal(Index='dog', num_legs=4, num_wings=0)\n    Animal(Index='hawk', num_legs=2, num_wings=2)\n    \"\"\"\n    arrays = []\n    fields = list(self.columns)\n    if index:\n        arrays.append(self.index)\n        fields.insert(0, \"Index\")\n\n    # use integer indexing because of possible duplicate column names\n    arrays.extend(self.iloc[:, k] for k in range(len(self.columns)))\n\n    # Python 3 supports at most 255 arguments to constructor\n    if name is not None and len(self.columns) + index < 256:\n        itertuple = collections.namedtuple(name, fields, rename=True)\n        return map(itertuple._make, zip(*arrays))\n\n    # fallback to regular tuples\n    return zip(*arrays)",
                "def __len__(self) -> int:\n    \"\"\"\n    Returns length of info axis, but here we use the index.\n    \"\"\"\n    return len(self.index)",
                "def dot(self, other):\n    \"\"\"\n    Compute the matrix multiplication between the DataFrame and other.\n\n    This method computes the matrix product between the DataFrame and the\n    values of an other Series, DataFrame or a numpy array.\n\n    It can also be called using ``self @ other`` in Python >= 3.5.\n\n    Parameters\n    ----------\n    other : Series, DataFrame or array-like\n        The other object to compute the matrix product with.\n\n    Returns\n    -------\n    Series or DataFrame\n        If other is a Series, return the matrix product between self and\n        other as a Serie. If other is a DataFrame or a numpy.array, return\n        the matrix product of self and other in a DataFrame of a np.array.\n\n    See Also\n    --------\n    Series.dot: Similar method for Series.\n\n    Notes\n    -----\n    The dimensions of DataFrame and other must be compatible in order to\n    compute the matrix multiplication. In addition, the column names of\n    DataFrame and the index of other must contain the same values, as they\n    will be aligned prior to the multiplication.\n\n    The dot method for Series computes the inner product, instead of the\n    matrix product here.\n\n    Examples\n    --------\n    Here we multiply a DataFrame with a Series.\n\n    >>> df = pd.DataFrame([[0, 1, -2, -1], [1, 1, 1, 1]])\n    >>> s = pd.Series([1, 1, 2, 1])\n    >>> df.dot(s)\n    0    -4\n    1     5\n    dtype: int64\n\n    Here we multiply a DataFrame with another DataFrame.\n\n    >>> other = pd.DataFrame([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(other)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note that the dot method give the same result as @\n\n    >>> df @ other\n        0   1\n    0   1   4\n    1   2   2\n\n    The dot method works also if other is an np.array.\n\n    >>> arr = np.array([[0, 1], [1, 2], [-1, -1], [2, 0]])\n    >>> df.dot(arr)\n        0   1\n    0   1   4\n    1   2   2\n\n    Note how shuffling of the objects does not change the result.\n\n    >>> s2 = s.reindex([1, 0, 2, 3])\n    >>> df.dot(s2)\n    0    -4\n    1     5\n    dtype: int64\n    \"\"\"\n    if isinstance(other, (Series, DataFrame)):\n        common = self.columns.union(other.index)\n        if len(common) > len(self.columns) or len(common) > len(other.index):\n            raise ValueError(\"matrices are not aligned\")\n\n        left = self.reindex(columns=common, copy=False)\n        right = other.reindex(index=common, copy=False)\n        lvals = left.values\n        rvals = right.values\n    else:\n        left = self\n        lvals = self.values\n        rvals = np.asarray(other)\n        if lvals.shape[1] != rvals.shape[0]:\n            raise ValueError(\n                f\"Dot product shape mismatch, {lvals.shape} vs {rvals.shape}\"\n            )\n\n    if isinstance(other, DataFrame):\n        return self._constructor(\n            np.dot(lvals, rvals), index=left.index, columns=other.columns\n        )\n    elif isinstance(other, Series):\n        return Series(np.dot(lvals, rvals), index=left.index)\n    elif isinstance(rvals, (np.ndarray, Index)):\n        result = np.dot(lvals, rvals)\n        if result.ndim == 2:\n            return self._constructor(result, index=left.index)\n        else:\n            return Series(result, index=left.index)\n    else:  # pragma: no cover\n        raise TypeError(f\"unsupported type: {type(other)}\")",
                "def __matmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.dot(other)",
                "def __rmatmul__(self, other):\n    \"\"\"\n    Matrix multiplication using binary `@` operator in Python>=3.5.\n    \"\"\"\n    return self.T.dot(np.transpose(other)).T",
                "@classmethod\ndef from_dict(cls, data, orient=\"columns\", dtype=None, columns=None):\n    \"\"\"\n    Construct DataFrame from dict of array-like or dicts.\n\n    Creates DataFrame object from dictionary by columns or by index\n    allowing dtype specification.\n\n    Parameters\n    ----------\n    data : dict\n        Of the form {field : array-like} or {field : dict}.\n    orient : {'columns', 'index'}, default 'columns'\n        The \"orientation\" of the data. If the keys of the passed dict\n        should be the columns of the resulting DataFrame, pass 'columns'\n        (default). Otherwise if the keys should be rows, pass 'index'.\n    dtype : dtype, default None\n        Data type to force, otherwise infer.\n    columns : list, default None\n        Column labels to use when ``orient='index'``. Raises a ValueError\n        if used with ``orient='columns'``.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.from_records : DataFrame from ndarray (structured\n        dtype), list of tuples, dict, or DataFrame.\n    DataFrame : DataFrame object creation using constructor.\n\n    Examples\n    --------\n    By default the keys of the dict become the DataFrame columns:\n\n    >>> data = {'col_1': [3, 2, 1, 0], 'col_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data)\n       col_1 col_2\n    0      3     a\n    1      2     b\n    2      1     c\n    3      0     d\n\n    Specify ``orient='index'`` to create the DataFrame using dictionary\n    keys as rows:\n\n    >>> data = {'row_1': [3, 2, 1, 0], 'row_2': ['a', 'b', 'c', 'd']}\n    >>> pd.DataFrame.from_dict(data, orient='index')\n           0  1  2  3\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n\n    When using the 'index' orientation, the column names can be\n    specified manually:\n\n    >>> pd.DataFrame.from_dict(data, orient='index',\n    ...                        columns=['A', 'B', 'C', 'D'])\n           A  B  C  D\n    row_1  3  2  1  0\n    row_2  a  b  c  d\n    \"\"\"\n    index = None\n    orient = orient.lower()\n    if orient == \"index\":\n        if len(data) > 0:\n            # TODO speed up Series case\n            if isinstance(list(data.values())[0], (Series, dict)):\n                data = _from_nested_dict(data)\n            else:\n                data, index = list(data.values()), list(data.keys())\n    elif orient == \"columns\":\n        if columns is not None:\n            raise ValueError(\"cannot use columns parameter with orient='columns'\")\n    else:  # pragma: no cover\n        raise ValueError(\"only recognize index or columns for orient\")\n\n    return cls(data, index=index, columns=columns, dtype=dtype)",
                "def to_numpy(self, dtype=None, copy=False):\n    \"\"\"\n    Convert the DataFrame to a NumPy array.\n\n    .. versionadded:: 0.24.0\n\n    By default, the dtype of the returned array will be the common NumPy\n    dtype of all types in the DataFrame. For example, if the dtypes are\n    ``float16`` and ``float32``, the results dtype will be ``float32``.\n    This may require copying data and coercing values, which may be\n    expensive.\n\n    Parameters\n    ----------\n    dtype : str or numpy.dtype, optional\n        The dtype to pass to :meth:`numpy.asarray`.\n    copy : bool, default False\n        Whether to ensure that the returned value is a not a view on\n        another array. Note that ``copy=False`` does not *ensure* that\n        ``to_numpy()`` is no-copy. Rather, ``copy=True`` ensure that\n        a copy is made, even if not strictly necessary.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    See Also\n    --------\n    Series.to_numpy : Similar method for Series.\n\n    Examples\n    --------\n    >>> pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]}).to_numpy()\n    array([[1, 3],\n           [2, 4]])\n\n    With heterogeneous data, the lowest common type will have to\n    be used.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2], \"B\": [3.0, 4.5]})\n    >>> df.to_numpy()\n    array([[1. , 3. ],\n           [2. , 4.5]])\n\n    For a mix of numeric and non-numeric types, the output array will\n    have object dtype.\n\n    >>> df['C'] = pd.date_range('2000', periods=2)\n    >>> df.to_numpy()\n    array([[1, 3.0, Timestamp('2000-01-01 00:00:00')],\n           [2, 4.5, Timestamp('2000-01-02 00:00:00')]], dtype=object)\n    \"\"\"\n    result = np.array(self.values, dtype=dtype, copy=copy)\n    return result",
                "def to_dict(self, orient=\"dict\", into=dict):\n    \"\"\"\n    Convert the DataFrame to a dictionary.\n\n    The type of the key-value pairs can be customized with the parameters\n    (see below).\n\n    Parameters\n    ----------\n    orient : str {'dict', 'list', 'series', 'split', 'records', 'index'}\n        Determines the type of the values of the dictionary.\n\n        - 'dict' (default) : dict like {column -> {index -> value}}\n        - 'list' : dict like {column -> [values]}\n        - 'series' : dict like {column -> Series(values)}\n        - 'split' : dict like\n          {'index' -> [index], 'columns' -> [columns], 'data' -> [values]}\n        - 'records' : list like\n          [{column -> value}, ... , {column -> value}]\n        - 'index' : dict like {index -> {column -> value}}\n\n        Abbreviations are allowed. `s` indicates `series` and `sp`\n        indicates `split`.\n\n    into : class, default dict\n        The collections.abc.Mapping subclass used for all Mappings\n        in the return value.  Can be the actual class or an empty\n        instance of the mapping type you want.  If you want a\n        collections.defaultdict, you must pass it initialized.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    dict, list or collections.abc.Mapping\n        Return a collections.abc.Mapping object representing the DataFrame.\n        The resulting transformation depends on the `orient` parameter.\n\n    See Also\n    --------\n    DataFrame.from_dict: Create a DataFrame from a dictionary.\n    DataFrame.to_json: Convert a DataFrame to JSON format.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'col1': [1, 2],\n    ...                    'col2': [0.5, 0.75]},\n    ...                   index=['row1', 'row2'])\n    >>> df\n          col1  col2\n    row1     1  0.50\n    row2     2  0.75\n    >>> df.to_dict()\n    {'col1': {'row1': 1, 'row2': 2}, 'col2': {'row1': 0.5, 'row2': 0.75}}\n\n    You can specify the return orientation.\n\n    >>> df.to_dict('series')\n    {'col1': row1    1\n             row2    2\n    Name: col1, dtype: int64,\n    'col2': row1    0.50\n            row2    0.75\n    Name: col2, dtype: float64}\n\n    >>> df.to_dict('split')\n    {'index': ['row1', 'row2'], 'columns': ['col1', 'col2'],\n     'data': [[1, 0.5], [2, 0.75]]}\n\n    >>> df.to_dict('records')\n    [{'col1': 1, 'col2': 0.5}, {'col1': 2, 'col2': 0.75}]\n\n    >>> df.to_dict('index')\n    {'row1': {'col1': 1, 'col2': 0.5}, 'row2': {'col1': 2, 'col2': 0.75}}\n\n    You can also specify the mapping type.\n\n    >>> from collections import OrderedDict, defaultdict\n    >>> df.to_dict(into=OrderedDict)\n    OrderedDict([('col1', OrderedDict([('row1', 1), ('row2', 2)])),\n                 ('col2', OrderedDict([('row1', 0.5), ('row2', 0.75)]))])\n\n    If you want a `defaultdict`, you need to initialize it:\n\n    >>> dd = defaultdict(list)\n    >>> df.to_dict('records', into=dd)\n    [defaultdict(<class 'list'>, {'col1': 1, 'col2': 0.5}),\n     defaultdict(<class 'list'>, {'col1': 2, 'col2': 0.75})]\n    \"\"\"\n    if not self.columns.is_unique:\n        warnings.warn(\n            \"DataFrame columns are not unique, some columns will be omitted.\",\n            UserWarning,\n            stacklevel=2,\n        )\n    # GH16122\n    into_c = com.standardize_mapping(into)\n    if orient.lower().startswith(\"d\"):\n        return into_c((k, v.to_dict(into)) for k, v in self.items())\n    elif orient.lower().startswith(\"l\"):\n        return into_c((k, v.tolist()) for k, v in self.items())\n    elif orient.lower().startswith(\"sp\"):\n        return into_c(\n            (\n                (\"index\", self.index.tolist()),\n                (\"columns\", self.columns.tolist()),\n                (\n                    \"data\",\n                    [\n                        list(map(com.maybe_box_datetimelike, t))\n                        for t in self.itertuples(index=False, name=None)\n                    ],\n                ),\n            )\n        )\n    elif orient.lower().startswith(\"s\"):\n        return into_c((k, com.maybe_box_datetimelike(v)) for k, v in self.items())\n    elif orient.lower().startswith(\"r\"):\n        columns = self.columns.tolist()\n        rows = (\n            dict(zip(columns, row))\n            for row in self.itertuples(index=False, name=None)\n        )\n        return [\n            into_c((k, com.maybe_box_datetimelike(v)) for k, v in row.items())\n            for row in rows\n        ]\n    elif orient.lower().startswith(\"i\"):\n        if not self.index.is_unique:\n            raise ValueError(\"DataFrame index must be unique for orient='index'.\")\n        return into_c(\n            (t[0], dict(zip(self.columns, t[1:])))\n            for t in self.itertuples(name=None)\n        )\n    else:\n        raise ValueError(f\"orient '{orient}' not understood\")",
                "def to_gbq(\n    self,\n    destination_table,\n    project_id=None,\n    chunksize=None,\n    reauth=False,\n    if_exists=\"fail\",\n    auth_local_webserver=False,\n    table_schema=None,\n    location=None,\n    progress_bar=True,\n    credentials=None,\n):\n    \"\"\"\n    Write a DataFrame to a Google BigQuery table.\n\n    This function requires the `pandas-gbq package\n    <https://pandas-gbq.readthedocs.io>`__.\n\n    See the `How to authenticate with Google BigQuery\n    <https://pandas-gbq.readthedocs.io/en/latest/howto/authentication.html>`__\n    guide for authentication instructions.\n\n    Parameters\n    ----------\n    destination_table : str\n        Name of table to be written, in the form ``dataset.tablename``.\n    project_id : str, optional\n        Google BigQuery Account project ID. Optional when available from\n        the environment.\n    chunksize : int, optional\n        Number of rows to be inserted in each chunk from the dataframe.\n        Set to ``None`` to load the whole dataframe at once.\n    reauth : bool, default False\n        Force Google BigQuery to re-authenticate the user. This is useful\n        if multiple accounts are used.\n    if_exists : str, default 'fail'\n        Behavior when the destination table exists. Value can be one of:\n\n        ``'fail'``\n            If table exists, do nothing.\n        ``'replace'``\n            If table exists, drop it, recreate it, and insert data.\n        ``'append'``\n            If table exists, insert data. Create if does not exist.\n    auth_local_webserver : bool, default False\n        Use the `local webserver flow`_ instead of the `console flow`_\n        when getting user credentials.\n\n        .. _local webserver flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_local_server\n        .. _console flow:\n            http://google-auth-oauthlib.readthedocs.io/en/latest/reference/google_auth_oauthlib.flow.html#google_auth_oauthlib.flow.InstalledAppFlow.run_console\n\n        *New in version 0.2.0 of pandas-gbq*.\n    table_schema : list of dicts, optional\n        List of BigQuery table fields to which according DataFrame\n        columns conform to, e.g. ``[{'name': 'col1', 'type':\n        'STRING'},...]``. If schema is not provided, it will be\n        generated according to dtypes of DataFrame columns. See\n        BigQuery API documentation on available names of a field.\n\n        *New in version 0.3.1 of pandas-gbq*.\n    location : str, optional\n        Location where the load job should run. See the `BigQuery locations\n        documentation\n        <https://cloud.google.com/bigquery/docs/dataset-locations>`__ for a\n        list of available locations. The location must match that of the\n        target dataset.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    progress_bar : bool, default True\n        Use the library `tqdm` to show the progress bar for the upload,\n        chunk by chunk.\n\n        *New in version 0.5.0 of pandas-gbq*.\n    credentials : google.auth.credentials.Credentials, optional\n        Credentials for accessing Google APIs. Use this parameter to\n        override default credentials, such as to use Compute Engine\n        :class:`google.auth.compute_engine.Credentials` or Service\n        Account :class:`google.oauth2.service_account.Credentials`\n        directly.\n\n        *New in version 0.8.0 of pandas-gbq*.\n\n        .. versionadded:: 0.24.0\n\n    See Also\n    --------\n    pandas_gbq.to_gbq : This function in the pandas-gbq library.\n    read_gbq : Read a DataFrame from Google BigQuery.\n    \"\"\"\n    from pandas.io import gbq\n\n    gbq.to_gbq(\n        self,\n        destination_table,\n        project_id=project_id,\n        chunksize=chunksize,\n        reauth=reauth,\n        if_exists=if_exists,\n        auth_local_webserver=auth_local_webserver,\n        table_schema=table_schema,\n        location=location,\n        progress_bar=progress_bar,\n        credentials=credentials,\n    )",
                "@classmethod\ndef from_records(\n    cls,\n    data,\n    index=None,\n    exclude=None,\n    columns=None,\n    coerce_float=False,\n    nrows=None,\n):\n    \"\"\"\n    Convert structured or record ndarray to DataFrame.\n\n    Parameters\n    ----------\n    data : ndarray (structured dtype), list of tuples, dict, or DataFrame\n    index : str, list of fields, array-like\n        Field of array to use as the index, alternately a specific set of\n        input labels to use.\n    exclude : sequence, default None\n        Columns or fields to exclude.\n    columns : sequence, default None\n        Column names to use. If the passed data do not have names\n        associated with them, this argument provides names for the\n        columns. Otherwise this argument indicates the order of the columns\n        in the result (any names not found in the data will become all-NA\n        columns).\n    coerce_float : bool, default False\n        Attempt to convert values of non-string, non-numeric objects (like\n        decimal.Decimal) to floating point, useful for SQL result sets.\n    nrows : int, default None\n        Number of rows to read if data is an iterator.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n\n    # Make a copy of the input columns so we can modify it\n    if columns is not None:\n        columns = ensure_index(columns)\n\n    if is_iterator(data):\n        if nrows == 0:\n            return cls()\n\n        try:\n            first_row = next(data)\n        except StopIteration:\n            return cls(index=index, columns=columns)\n\n        dtype = None\n        if hasattr(first_row, \"dtype\") and first_row.dtype.names:\n            dtype = first_row.dtype\n\n        values = [first_row]\n\n        if nrows is None:\n            values += data\n        else:\n            values.extend(itertools.islice(data, nrows - 1))\n\n        if dtype is not None:\n            data = np.array(values, dtype=dtype)\n        else:\n            data = values\n\n    if isinstance(data, dict):\n        if columns is None:\n            columns = arr_columns = ensure_index(sorted(data))\n            arrays = [data[k] for k in columns]\n        else:\n            arrays = []\n            arr_columns = []\n            for k, v in data.items():\n                if k in columns:\n                    arr_columns.append(k)\n                    arrays.append(v)\n\n            arrays, arr_columns = reorder_arrays(arrays, arr_columns, columns)\n\n    elif isinstance(data, (np.ndarray, DataFrame)):\n        arrays, columns = to_arrays(data, columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        arr_columns = columns\n    else:\n        arrays, arr_columns = to_arrays(data, columns, coerce_float=coerce_float)\n\n        arr_columns = ensure_index(arr_columns)\n        if columns is not None:\n            columns = ensure_index(columns)\n        else:\n            columns = arr_columns\n\n    if exclude is None:\n        exclude = set()\n    else:\n        exclude = set(exclude)\n\n    result_index = None\n    if index is not None:\n        if isinstance(index, str) or not hasattr(index, \"__iter__\"):\n            i = columns.get_loc(index)\n            exclude.add(index)\n            if len(arrays) > 0:\n                result_index = Index(arrays[i], name=index)\n            else:\n                result_index = Index([], name=index)\n        else:\n            try:\n                index_data = [arrays[arr_columns.get_loc(field)] for field in index]\n            except (KeyError, TypeError):\n                # raised by get_loc, see GH#29258\n                result_index = index\n            else:\n                result_index = ensure_index_from_sequences(index_data, names=index)\n                exclude.update(index)\n\n    if any(exclude):\n        arr_exclude = [x for x in exclude if x in arr_columns]\n        to_remove = [arr_columns.get_loc(col) for col in arr_exclude]\n        arrays = [v for i, v in enumerate(arrays) if i not in to_remove]\n\n        arr_columns = arr_columns.drop(arr_exclude)\n        columns = columns.drop(exclude)\n\n    mgr = arrays_to_mgr(arrays, arr_columns, result_index, columns)\n\n    return cls(mgr)",
                "def to_records(self, index=True, column_dtypes=None, index_dtypes=None):\n    \"\"\"\n    Convert DataFrame to a NumPy record array.\n\n    Index will be included as the first field of the record array if\n    requested.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Include index in resulting record array, stored in 'index'\n        field or using the index label, if set.\n    column_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all columns. If\n        a dictionary, a mapping of column names and indices (zero-indexed)\n        to specific data types.\n    index_dtypes : str, type, dict, default None\n        .. versionadded:: 0.24.0\n\n        If a string or type, the data type to store all index levels. If\n        a dictionary, a mapping of index level names and indices\n        (zero-indexed) to specific data types.\n\n        This mapping is applied only if `index=True`.\n\n    Returns\n    -------\n    numpy.recarray\n        NumPy ndarray with the DataFrame labels as fields and each row\n        of the DataFrame as entries.\n\n    See Also\n    --------\n    DataFrame.from_records: Convert structured or record ndarray\n        to DataFrame.\n    numpy.recarray: An ndarray that allows field access using\n        attributes, analogous to typed columns in a\n        spreadsheet.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2], 'B': [0.5, 0.75]},\n    ...                   index=['a', 'b'])\n    >>> df\n       A     B\n    a  1  0.50\n    b  2  0.75\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('index', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    If the DataFrame index has no label then the recarray field name\n    is set to 'index'. If the index has a label then this is used as the\n    field name:\n\n    >>> df.index = df.index.rename(\"I\")\n    >>> df.to_records()\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i8'), ('B', '<f8')])\n\n    The index can be excluded from the record array:\n\n    >>> df.to_records(index=False)\n    rec.array([(1, 0.5 ), (2, 0.75)],\n              dtype=[('A', '<i8'), ('B', '<f8')])\n\n    Data types can be specified for the columns:\n\n    >>> df.to_records(column_dtypes={\"A\": \"int32\"})\n    rec.array([('a', 1, 0.5 ), ('b', 2, 0.75)],\n              dtype=[('I', 'O'), ('A', '<i4'), ('B', '<f8')])\n\n    As well as for the index:\n\n    >>> df.to_records(index_dtypes=\"<S2\")\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S2'), ('A', '<i8'), ('B', '<f8')])\n\n    >>> index_dtypes = f\"<S{df.index.str.len().max()}\"\n    >>> df.to_records(index_dtypes=index_dtypes)\n    rec.array([(b'a', 1, 0.5 ), (b'b', 2, 0.75)],\n              dtype=[('I', 'S1'), ('A', '<i8'), ('B', '<f8')])\n    \"\"\"\n\n    if index:\n        if isinstance(self.index, ABCMultiIndex):\n            # array of tuples to numpy cols. copy copy copy\n            ix_vals = list(map(np.array, zip(*self.index.values)))\n        else:\n            ix_vals = [self.index.values]\n\n        arrays = ix_vals + [self[c]._internal_get_values() for c in self.columns]\n\n        count = 0\n        index_names = list(self.index.names)\n\n        if isinstance(self.index, ABCMultiIndex):\n            for i, n in enumerate(index_names):\n                if n is None:\n                    index_names[i] = f\"level_{count}\"\n                    count += 1\n        elif index_names[0] is None:\n            index_names = [\"index\"]\n\n        names = [str(name) for name in itertools.chain(index_names, self.columns)]\n    else:\n        arrays = [self[c]._internal_get_values() for c in self.columns]\n        names = [str(c) for c in self.columns]\n        index_names = []\n\n    index_len = len(index_names)\n    formats = []\n\n    for i, v in enumerate(arrays):\n        index = i\n\n        # When the names and arrays are collected, we\n        # first collect those in the DataFrame's index,\n        # followed by those in its columns.\n        #\n        # Thus, the total length of the array is:\n        # len(index_names) + len(DataFrame.columns).\n        #\n        # This check allows us to see whether we are\n        # handling a name / array in the index or column.\n        if index < index_len:\n            dtype_mapping = index_dtypes\n            name = index_names[index]\n        else:\n            index -= index_len\n            dtype_mapping = column_dtypes\n            name = self.columns[index]\n\n        # We have a dictionary, so we get the data type\n        # associated with the index or column (which can\n        # be denoted by its name in the DataFrame or its\n        # position in DataFrame's array of indices or\n        # columns, whichever is applicable.\n        if is_dict_like(dtype_mapping):\n            if name in dtype_mapping:\n                dtype_mapping = dtype_mapping[name]\n            elif index in dtype_mapping:\n                dtype_mapping = dtype_mapping[index]\n            else:\n                dtype_mapping = None\n\n        # If no mapping can be found, use the array's\n        # dtype attribute for formatting.\n        #\n        # A valid dtype must either be a type or\n        # string naming a type.\n        if dtype_mapping is None:\n            formats.append(v.dtype)\n        elif isinstance(dtype_mapping, (type, np.dtype, str)):\n            formats.append(dtype_mapping)\n        else:\n            element = \"row\" if i < index_len else \"column\"\n            msg = f\"Invalid dtype {dtype_mapping} specified for {element} {name}\"\n            raise ValueError(msg)\n\n    return np.rec.fromarrays(arrays, dtype={\"names\": names, \"formats\": formats})",
                "@classmethod\ndef _from_arrays(cls, arrays, columns, index, dtype=None):\n    mgr = arrays_to_mgr(arrays, columns, index, columns, dtype=dtype)\n    return cls(mgr)",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_stata(\n    self,\n    path,\n    convert_dates=None,\n    write_index=True,\n    byteorder=None,\n    time_stamp=None,\n    data_label=None,\n    variable_labels=None,\n    version=114,\n    convert_strl=None,\n):\n    \"\"\"\n    Export DataFrame object to Stata dta format.\n\n    Writes the DataFrame to a Stata dataset file.\n    \"dta\" files contain a Stata dataset.\n\n    Parameters\n    ----------\n    path : str, buffer or path object\n        String, path object (pathlib.Path or py._path.local.LocalPath) or\n        object implementing a binary write() function. If using a buffer\n        then the buffer will not be automatically closed after the file\n        data has been written.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    convert_dates : dict\n        Dictionary mapping columns containing datetime types to stata\n        internal format to use when writing the dates. Options are 'tc',\n        'td', 'tm', 'tw', 'th', 'tq', 'ty'. Column can be either an integer\n        or a name. Datetime columns that do not have a conversion type\n        specified will be converted to 'tc'. Raises NotImplementedError if\n        a datetime column has timezone information.\n    write_index : bool\n        Write the index to Stata dataset.\n    byteorder : str\n        Can be \">\", \"<\", \"little\", or \"big\". default is `sys.byteorder`.\n    time_stamp : datetime\n        A datetime to use as file creation date.  Default is the current\n        time.\n    data_label : str, optional\n        A label for the data set.  Must be 80 characters or smaller.\n    variable_labels : dict\n        Dictionary containing columns as keys and variable labels as\n        values. Each label must be 80 characters or smaller.\n    version : {114, 117}, default 114\n        Version to use in the output dta file.  Version 114 can be used\n        read by Stata 10 and later.  Version 117 can be read by Stata 13\n        or later. Version 114 limits string variables to 244 characters or\n        fewer while 117 allows strings with lengths up to 2,000,000\n        characters.\n\n        .. versionadded:: 0.23.0\n\n    convert_strl : list, optional\n        List of column names to convert to string columns to Stata StrL\n        format. Only available if version is 117.  Storing strings in the\n        StrL format can produce smaller dta files if strings have more than\n        8 characters and values are repeated.\n\n        .. versionadded:: 0.23.0\n\n    Raises\n    ------\n    NotImplementedError\n        * If datetimes contain timezone information\n        * Column dtype is not representable in Stata\n    ValueError\n        * Columns listed in convert_dates are neither datetime64[ns]\n          or datetime.datetime\n        * Column listed in convert_dates is not in DataFrame\n        * Categorical label contains more than 32,000 characters\n\n    See Also\n    --------\n    read_stata : Import Stata data files.\n    io.stata.StataWriter : Low-level writer for Stata data files.\n    io.stata.StataWriter117 : Low-level writer for version 117 files.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['falcon', 'parrot', 'falcon',\n    ...                               'parrot'],\n    ...                    'speed': [350, 18, 361, 15]})\n    >>> df.to_stata('animals.dta')  # doctest: +SKIP\n    \"\"\"\n    kwargs = {}\n    if version not in (114, 117):\n        raise ValueError(\"Only formats 114 and 117 supported.\")\n    if version == 114:\n        if convert_strl is not None:\n            raise ValueError(\"strl support is only available when using format 117\")\n        from pandas.io.stata import StataWriter as statawriter\n    else:\n        from pandas.io.stata import StataWriter117 as statawriter\n\n        kwargs[\"convert_strl\"] = convert_strl\n\n    writer = statawriter(\n        path,\n        self,\n        convert_dates=convert_dates,\n        byteorder=byteorder,\n        time_stamp=time_stamp,\n        data_label=data_label,\n        write_index=write_index,\n        variable_labels=variable_labels,\n        **kwargs,\n    )\n    writer.write_file()",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_feather(self, path):\n    \"\"\"\n    Write out the binary feather-format for DataFrames.\n\n    Parameters\n    ----------\n    path : str\n        String file path.\n    \"\"\"\n    from pandas.io.feather_format import to_feather\n\n    to_feather(self, path)",
                "@deprecate_kwarg(old_arg_name=\"fname\", new_arg_name=\"path\")\ndef to_parquet(\n    self,\n    path,\n    engine=\"auto\",\n    compression=\"snappy\",\n    index=None,\n    partition_cols=None,\n    **kwargs,\n):\n    \"\"\"\n    Write a DataFrame to the binary parquet format.\n\n    .. versionadded:: 0.21.0\n\n    This function writes the dataframe as a `parquet file\n    <https://parquet.apache.org/>`_. You can choose different parquet\n    backends, and have the option of compression. See\n    :ref:`the user guide <io.parquet>` for more details.\n\n    Parameters\n    ----------\n    path : str\n        File path or Root Directory path. Will be used as Root Directory\n        path while writing a partitioned dataset.\n\n        .. versionchanged:: 1.0.0\n\n        Previously this was \"fname\"\n\n    engine : {'auto', 'pyarrow', 'fastparquet'}, default 'auto'\n        Parquet library to use. If 'auto', then the option\n        ``io.parquet.engine`` is used. The default ``io.parquet.engine``\n        behavior is to try 'pyarrow', falling back to 'fastparquet' if\n        'pyarrow' is unavailable.\n    compression : {'snappy', 'gzip', 'brotli', None}, default 'snappy'\n        Name of the compression to use. Use ``None`` for no compression.\n    index : bool, default None\n        If ``True``, include the dataframe's index(es) in the file output.\n        If ``False``, they will not be written to the file.\n        If ``None``, similar to ``True`` the dataframe's index(es)\n        will be saved. However, instead of being saved as values,\n        the RangeIndex will be stored as a range in the metadata so it\n        doesn't require much space and is faster. Other indexes will\n        be included as columns in the file output.\n\n        .. versionadded:: 0.24.0\n\n    partition_cols : list, optional, default None\n        Column names by which to partition the dataset.\n        Columns are partitioned in the order they are given.\n\n        .. versionadded:: 0.24.0\n\n    **kwargs\n        Additional arguments passed to the parquet library. See\n        :ref:`pandas io <io.parquet>` for more details.\n\n    See Also\n    --------\n    read_parquet : Read a parquet file.\n    DataFrame.to_csv : Write a csv file.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_hdf : Write to hdf.\n\n    Notes\n    -----\n    This function requires either the `fastparquet\n    <https://pypi.org/project/fastparquet>`_ or `pyarrow\n    <https://arrow.apache.org/docs/python/>`_ library.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(data={'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.to_parquet('df.parquet.gzip',\n    ...               compression='gzip')  # doctest: +SKIP\n    >>> pd.read_parquet('df.parquet.gzip')  # doctest: +SKIP\n       col1  col2\n    0     1     3\n    1     2     4\n    \"\"\"\n    from pandas.io.parquet import to_parquet\n\n    to_parquet(\n        self,\n        path,\n        engine,\n        compression=compression,\n        index=index,\n        partition_cols=partition_cols,\n        **kwargs,\n    )",
                "@Substitution(\n    header_type=\"bool\",\n    header=\"Whether to print column labels, default True\",\n    col_space_type=\"str or int\",\n    col_space=\"The minimum width of each column in CSS length \"\n    \"units.  An int is assumed to be px units.\\n\\n\"\n    \"            .. versionadded:: 0.25.0\\n\"\n    \"                Ability to use str\",\n)\n@Substitution(shared_params=fmt.common_docstring, returns=fmt.return_docstring)\ndef to_html(\n    self,\n    buf=None,\n    columns=None,\n    col_space=None,\n    header=True,\n    index=True,\n    na_rep=\"NaN\",\n    formatters=None,\n    float_format=None,\n    sparsify=None,\n    index_names=True,\n    justify=None,\n    max_rows=None,\n    max_cols=None,\n    show_dimensions=False,\n    decimal=\".\",\n    bold_rows=True,\n    classes=None,\n    escape=True,\n    notebook=False,\n    border=None,\n    table_id=None,\n    render_links=False,\n    encoding=None,\n):\n    \"\"\"\n    Render a DataFrame as an HTML table.\n    %(shared_params)s\n    bold_rows : bool, default True\n        Make the row labels bold in the output.\n    classes : str or list or tuple, default None\n        CSS class(es) to apply to the resulting html table.\n    escape : bool, default True\n        Convert the characters <, >, and & to HTML-safe sequences.\n    notebook : {True, False}, default False\n        Whether the generated HTML is for IPython Notebook.\n    border : int\n        A ``border=border`` attribute is included in the opening\n        `<table>` tag. Default ``pd.options.display.html.border``.\n    encoding : str, default \"utf-8\"\n        Set character encoding\n\n        .. versionadded:: 1.0\n    table_id : str, optional\n        A css id is included in the opening `<table>` tag if specified.\n\n        .. versionadded:: 0.23.0\n\n    render_links : bool, default False\n        Convert URLs to HTML links.\n\n        .. versionadded:: 0.24.0\n    %(returns)s\n    See Also\n    --------\n    to_string : Convert DataFrame to a string.\n    \"\"\"\n\n    if justify is not None and justify not in fmt._VALID_JUSTIFY_PARAMETERS:\n        raise ValueError(\"Invalid value for justify parameter\")\n\n    formatter = fmt.DataFrameFormatter(\n        self,\n        columns=columns,\n        col_space=col_space,\n        na_rep=na_rep,\n        formatters=formatters,\n        float_format=float_format,\n        sparsify=sparsify,\n        justify=justify,\n        index_names=index_names,\n        header=header,\n        index=index,\n        bold_rows=bold_rows,\n        escape=escape,\n        max_rows=max_rows,\n        max_cols=max_cols,\n        show_dimensions=show_dimensions,\n        decimal=decimal,\n        table_id=table_id,\n        render_links=render_links,\n    )\n    # TODO: a generic formatter wld b in DataFrameFormatter\n    return formatter.to_html(\n        buf=buf,\n        classes=classes,\n        notebook=notebook,\n        border=border,\n        encoding=encoding,\n    )",
                "def info(\n    self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None\n):\n    \"\"\"\n    Print a concise summary of a DataFrame.\n\n    This method prints information about a DataFrame including\n    the index dtype and column dtypes, non-null values and memory usage.\n\n    Parameters\n    ----------\n    verbose : bool, optional\n        Whether to print the full summary. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is followed.\n    buf : writable buffer, defaults to sys.stdout\n        Where to send the output. By default, the output is printed to\n        sys.stdout. Pass a writable buffer if you need to further process\n        the output.\n    max_cols : int, optional\n        When to switch from the verbose to the truncated output. If the\n        DataFrame has more than `max_cols` columns, the truncated output\n        is used. By default, the setting in\n        ``pandas.options.display.max_info_columns`` is used.\n    memory_usage : bool, str, optional\n        Specifies whether total memory usage of the DataFrame\n        elements (including the index) should be displayed. By default,\n        this follows the ``pandas.options.display.memory_usage`` setting.\n\n        True always show memory usage. False never shows memory usage.\n        A value of 'deep' is equivalent to \"True with deep introspection\".\n        Memory usage is shown in human-readable units (base-2\n        representation). Without deep introspection a memory estimation is\n        made based in column dtype and number of rows assuming values\n        consume the same memory amount for corresponding dtypes. With deep\n        memory introspection, a real memory usage calculation is performed\n        at the cost of computational resources.\n    null_counts : bool, optional\n        Whether to show the non-null counts. By default, this is shown\n        only if the frame is smaller than\n        ``pandas.options.display.max_info_rows`` and\n        ``pandas.options.display.max_info_columns``. A value of True always\n        shows the counts, and False never shows the counts.\n\n    Returns\n    -------\n    None\n        This method prints a summary of a DataFrame and returns None.\n\n    See Also\n    --------\n    DataFrame.describe: Generate descriptive statistics of DataFrame\n        columns.\n    DataFrame.memory_usage: Memory usage of DataFrame columns.\n\n    Examples\n    --------\n    >>> int_values = [1, 2, 3, 4, 5]\n    >>> text_values = ['alpha', 'beta', 'gamma', 'delta', 'epsilon']\n    >>> float_values = [0.0, 0.25, 0.5, 0.75, 1.0]\n    >>> df = pd.DataFrame({\"int_col\": int_values, \"text_col\": text_values,\n    ...                   \"float_col\": float_values})\n    >>> df\n       int_col text_col  float_col\n    0        1    alpha       0.00\n    1        2     beta       0.25\n    2        3    gamma       0.50\n    3        4    delta       0.75\n    4        5  epsilon       1.00\n\n    Prints information of all columns:\n\n    >>> df.info(verbose=True)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Data columns (total 3 columns):\n    int_col      5 non-null int64\n    text_col     5 non-null object\n    float_col    5 non-null float64\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Prints a summary of columns count and its dtypes but not per column\n    information:\n\n    >>> df.info(verbose=False)\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 5 entries, 0 to 4\n    Columns: 3 entries, int_col to float_col\n    dtypes: float64(1), int64(1), object(1)\n    memory usage: 248.0+ bytes\n\n    Pipe output of DataFrame.info to buffer instead of sys.stdout, get\n    buffer content and writes to a text file:\n\n    >>> import io\n    >>> buffer = io.StringIO()\n    >>> df.info(buf=buffer)\n    >>> s = buffer.getvalue()\n    >>> with open(\"df_info.txt\", \"w\",\n    ...           encoding=\"utf-8\") as f:  # doctest: +SKIP\n    ...     f.write(s)\n    260\n\n    The `memory_usage` parameter allows deep introspection mode, specially\n    useful for big DataFrames and fine-tune memory optimization:\n\n    >>> random_strings_array = np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    >>> df = pd.DataFrame({\n    ...     'column_1': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_2': np.random.choice(['a', 'b', 'c'], 10 ** 6),\n    ...     'column_3': np.random.choice(['a', 'b', 'c'], 10 ** 6)\n    ... })\n    >>> df.info()\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 22.9+ MB\n\n    >>> df.info(memory_usage='deep')\n    <class 'pandas.core.frame.DataFrame'>\n    RangeIndex: 1000000 entries, 0 to 999999\n    Data columns (total 3 columns):\n    column_1    1000000 non-null object\n    column_2    1000000 non-null object\n    column_3    1000000 non-null object\n    dtypes: object(3)\n    memory usage: 188.8 MB\n    \"\"\"\n\n    if buf is None:  # pragma: no cover\n        buf = sys.stdout\n\n    lines = []\n\n    lines.append(str(type(self)))\n    lines.append(self.index._summary())\n\n    if len(self.columns) == 0:\n        lines.append(f\"Empty {type(self).__name__}\")\n        fmt.buffer_put_lines(buf, lines)\n        return\n\n    cols = self.columns\n\n    # hack\n    if max_cols is None:\n        max_cols = get_option(\"display.max_info_columns\", len(self.columns) + 1)\n\n    max_rows = get_option(\"display.max_info_rows\", len(self) + 1)\n\n    if null_counts is None:\n        show_counts = (len(self.columns) <= max_cols) and (len(self) < max_rows)\n    else:\n        show_counts = null_counts\n    exceeds_info_cols = len(self.columns) > max_cols\n\n    def _verbose_repr():\n        lines.append(f\"Data columns (total {len(self.columns)} columns):\")\n        space = max(len(pprint_thing(k)) for k in self.columns) + 4\n        counts = None\n\n        tmpl = \"{count}{dtype}\"\n        if show_counts:\n            counts = self.count()\n            if len(cols) != len(counts):  # pragma: no cover\n                raise AssertionError(\n                    f\"Columns must equal counts ({len(cols)} != {len(counts)})\"\n                )\n            tmpl = \"{count} non-null {dtype}\"\n\n        dtypes = self.dtypes\n        for i, col in enumerate(self.columns):\n            dtype = dtypes.iloc[i]\n            col = pprint_thing(col)\n\n            count = \"\"\n            if show_counts:\n                count = counts.iloc[i]\n\n            lines.append(\n                _put_str(col, space) + tmpl.format(count=count, dtype=dtype)\n            )\n\n    def _non_verbose_repr():\n        lines.append(self.columns._summary(name=\"Columns\"))\n\n    def _sizeof_fmt(num, size_qualifier):\n        # returns size in human readable format\n        for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n            if num < 1024.0:\n                return f\"{num:3.1f}{size_qualifier} {x}\"\n            num /= 1024.0\n        return f\"{num:3.1f}{size_qualifier} PB\"\n\n    if verbose:\n        _verbose_repr()\n    elif verbose is False:  # specifically set to False, not nesc None\n        _non_verbose_repr()\n    else:\n        if exceeds_info_cols:\n            _non_verbose_repr()\n        else:\n            _verbose_repr()\n\n    counts = self._data.get_dtype_counts()\n    dtypes = [f\"{k[0]}({k[1]:d})\" for k in sorted(counts.items())]\n    lines.append(f\"dtypes: {', '.join(dtypes)}\")\n\n    if memory_usage is None:\n        memory_usage = get_option(\"display.memory_usage\")\n    if memory_usage:\n        # append memory usage of df to display\n        size_qualifier = \"\"\n        if memory_usage == \"deep\":\n            deep = True\n        else:\n            # size_qualifier is just a best effort; not guaranteed to catch\n            # all cases (e.g., it misses categorical data even with object\n            # categories)\n            deep = False\n            if \"object\" in counts or self.index._is_memory_usage_qualified():\n                size_qualifier = \"+\"\n        mem_usage = self.memory_usage(index=True, deep=deep).sum()\n        lines.append(f\"memory usage: {_sizeof_fmt(mem_usage, size_qualifier)}\\n\")\n    fmt.buffer_put_lines(buf, lines)",
                "def memory_usage(self, index=True, deep=False):\n    \"\"\"\n    Return the memory usage of each column in bytes.\n\n    The memory usage can optionally include the contribution of\n    the index and elements of `object` dtype.\n\n    This value is displayed in `DataFrame.info` by default. This can be\n    suppressed by setting ``pandas.options.display.memory_usage`` to False.\n\n    Parameters\n    ----------\n    index : bool, default True\n        Specifies whether to include the memory usage of the DataFrame's\n        index in returned Series. If ``index=True``, the memory usage of\n        the index is the first item in the output.\n    deep : bool, default False\n        If True, introspect the data deeply by interrogating\n        `object` dtypes for system-level memory consumption, and include\n        it in the returned values.\n\n    Returns\n    -------\n    Series\n        A Series whose index is the original column names and whose values\n        is the memory usage of each column in bytes.\n\n    See Also\n    --------\n    numpy.ndarray.nbytes : Total bytes consumed by the elements of an\n        ndarray.\n    Series.memory_usage : Bytes consumed by a Series.\n    Categorical : Memory-efficient array for string values with\n        many repeated values.\n    DataFrame.info : Concise summary of a DataFrame.\n\n    Examples\n    --------\n    >>> dtypes = ['int64', 'float64', 'complex128', 'object', 'bool']\n    >>> data = dict([(t, np.ones(shape=5000).astype(t))\n    ...              for t in dtypes])\n    >>> df = pd.DataFrame(data)\n    >>> df.head()\n       int64  float64            complex128  object  bool\n    0      1      1.0    1.000000+0.000000j       1  True\n    1      1      1.0    1.000000+0.000000j       1  True\n    2      1      1.0    1.000000+0.000000j       1  True\n    3      1      1.0    1.000000+0.000000j       1  True\n    4      1      1.0    1.000000+0.000000j       1  True\n\n    >>> df.memory_usage()\n    Index           128\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    >>> df.memory_usage(index=False)\n    int64         40000\n    float64       40000\n    complex128    80000\n    object        40000\n    bool           5000\n    dtype: int64\n\n    The memory footprint of `object` dtype columns is ignored by default:\n\n    >>> df.memory_usage(deep=True)\n    Index            128\n    int64          40000\n    float64        40000\n    complex128     80000\n    object        160000\n    bool            5000\n    dtype: int64\n\n    Use a Categorical for efficient storage of an object-dtype column with\n    many repeated values.\n\n    >>> df['object'].astype('category').memory_usage(deep=True)\n    5216\n    \"\"\"\n    result = Series(\n        [c.memory_usage(index=False, deep=deep) for col, c in self.items()],\n        index=self.columns,\n    )\n    if index:\n        result = Series(self.index.memory_usage(deep=deep), index=[\"Index\"]).append(\n            result\n        )\n    return result",
                "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Transpose index and columns.\n\n    Reflect the DataFrame over its main diagonal by writing rows as columns\n    and vice-versa. The property :attr:`.T` is an accessor to the method\n    :meth:`transpose`.\n\n    Parameters\n    ----------\n    *args, **kwargs\n        Additional arguments and keywords have no effect but might be\n        accepted for compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        The transposed DataFrame.\n\n    See Also\n    --------\n    numpy.transpose : Permute the dimensions of a given array.\n\n    Notes\n    -----\n    Transposing a DataFrame with mixed dtypes will result in a homogeneous\n    DataFrame with the `object` dtype. In such a case, a copy of the data\n    is always made.\n\n    Examples\n    --------\n    **Square DataFrame with homogeneous dtype**\n\n    >>> d1 = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df1 = pd.DataFrame(data=d1)\n    >>> df1\n       col1  col2\n    0     1     3\n    1     2     4\n\n    >>> df1_transposed = df1.T # or df1.transpose()\n    >>> df1_transposed\n          0  1\n    col1  1  2\n    col2  3  4\n\n    When the dtype is homogeneous in the original DataFrame, we get a\n    transposed DataFrame with the same dtype:\n\n    >>> df1.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n    >>> df1_transposed.dtypes\n    0    int64\n    1    int64\n    dtype: object\n\n    **Non-square DataFrame with mixed dtypes**\n\n    >>> d2 = {'name': ['Alice', 'Bob'],\n    ...       'score': [9.5, 8],\n    ...       'employed': [False, True],\n    ...       'kids': [0, 0]}\n    >>> df2 = pd.DataFrame(data=d2)\n    >>> df2\n        name  score  employed  kids\n    0  Alice    9.5     False     0\n    1    Bob    8.0      True     0\n\n    >>> df2_transposed = df2.T # or df2.transpose()\n    >>> df2_transposed\n                  0     1\n    name      Alice   Bob\n    score       9.5     8\n    employed  False  True\n    kids          0     0\n\n    When the DataFrame has mixed dtypes, we get a transposed DataFrame with\n    the `object` dtype:\n\n    >>> df2.dtypes\n    name         object\n    score       float64\n    employed       bool\n    kids          int64\n    dtype: object\n    >>> df2_transposed.dtypes\n    0    object\n    1    object\n    dtype: object\n    \"\"\"\n    nv.validate_transpose(args, dict())\n    return super().transpose(1, 0, **kwargs)",
                "def _ixs(self, i: int, axis: int = 0):\n    \"\"\"\n    Parameters\n    ----------\n    i : int\n    axis : int\n\n    Notes\n    -----\n    If slice passed, the resulting data will be a view.\n    \"\"\"\n    # irow\n    if axis == 0:\n        new_values = self._data.fast_xs(i)\n\n        # if we are a copy, mark as such\n        copy = isinstance(new_values, np.ndarray) and new_values.base is None\n        result = self._constructor_sliced(\n            new_values,\n            index=self.columns,\n            name=self.index[i],\n            dtype=new_values.dtype,\n        )\n        result._set_is_copy(self, copy=copy)\n        return result\n\n    # icol\n    else:\n        label = self.columns[i]\n\n        # if the values returned are not the same length\n        # as the index (iow a not found value), iget returns\n        # a 0-len ndarray. This is effectively catching\n        # a numpy error (as numpy should really raise)\n        values = self._data.iget(i)\n\n        if len(self.index) and not len(values):\n            values = np.array([np.nan] * len(self.index), dtype=object)\n        result = self._box_col_values(values, label)\n\n        # this is a cached value, mark it so\n        result._set_as_cached(label, self)\n\n        return result",
                "def __getitem__(self, key):\n    key = lib.item_from_zerodim(key)\n    key = com.apply_if_callable(key, self)\n\n    if is_hashable(key):\n        # shortcut if the key is in columns\n        if self.columns.is_unique and key in self.columns:\n            if self.columns.nlevels > 1:\n                return self._getitem_multilevel(key)\n            return self._get_item_cache(key)\n\n    # Do we have a slicer (on rows)?\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        # either we have a slice or we have a string that can be converted\n        #  to a slice for partial-string date indexing\n        return self._slice(indexer, axis=0)\n\n    # Do we have a (boolean) DataFrame?\n    if isinstance(key, DataFrame):\n        return self.where(key)\n\n    # Do we have a (boolean) 1d indexer?\n    if com.is_bool_indexer(key):\n        return self._getitem_bool_array(key)\n\n    # We are left with two options: a single key, and a collection of keys,\n    # We interpret tuples as collections only for non-MultiIndex\n    is_single_key = isinstance(key, tuple) or not is_list_like(key)\n\n    if is_single_key:\n        if self.columns.nlevels > 1:\n            return self._getitem_multilevel(key)\n        indexer = self.columns.get_loc(key)\n        if is_integer(indexer):\n            indexer = [indexer]\n    else:\n        if is_iterator(key):\n            key = list(key)\n        indexer = self.loc._get_listlike_indexer(key, axis=1, raise_missing=True)[1]\n\n    # take() does not accept boolean indexers\n    if getattr(indexer, \"dtype\", None) == bool:\n        indexer = np.where(indexer)[0]\n\n    data = self.take(indexer, axis=1)\n\n    if is_single_key:\n        # What does looking for a single key in a non-unique index return?\n        # The behavior is inconsistent. It returns a Series, except when\n        # - the key itself is repeated (test on data.shape, #9519), or\n        # - we have a MultiIndex on columns (test on self.columns, #21309)\n        if data.shape[1] == 1 and not isinstance(self.columns, ABCMultiIndex):\n            data = data[key]\n\n    return data",
                "def _getitem_bool_array(self, key):\n    # also raises Exception if object array with NA values\n    # warning here just in case -- previously __setitem__ was\n    # reindexing but __getitem__ was not; it seems more reasonable to\n    # go with the __setitem__ behavior since that is more consistent\n    # with all other indexing behavior\n    if isinstance(key, Series) and not key.index.equals(self.index):\n        warnings.warn(\n            \"Boolean Series key will be reindexed to match DataFrame index.\",\n            UserWarning,\n            stacklevel=3,\n        )\n    elif len(key) != len(self.index):\n        raise ValueError(\n            f\"Item wrong length {len(key)} instead of {len(self.index)}.\"\n        )\n\n    # check_bool_indexer will throw exception if Series key cannot\n    # be reindexed to match DataFrame rows\n    key = check_bool_indexer(self.index, key)\n    indexer = key.nonzero()[0]\n    return self.take(indexer, axis=0)",
                "def _getitem_multilevel(self, key):\n    # self.columns is a MultiIndex\n    loc = self.columns.get_loc(key)\n    if isinstance(loc, (slice, Series, np.ndarray, Index)):\n        new_columns = self.columns[loc]\n        result_columns = maybe_droplevels(new_columns, key)\n        if self._is_mixed_type:\n            result = self.reindex(columns=new_columns)\n            result.columns = result_columns\n        else:\n            new_values = self.values[:, loc]\n            result = self._constructor(\n                new_values, index=self.index, columns=result_columns\n            )\n            result = result.__finalize__(self)\n\n        # If there is only one column being returned, and its name is\n        # either an empty string, or a tuple with an empty string as its\n        # first element, then treat the empty string as a placeholder\n        # and return the column as if the user had provided that empty\n        # string in the key. If the result is a Series, exclude the\n        # implied empty string from its name.\n        if len(result.columns) == 1:\n            top = result.columns[0]\n            if isinstance(top, tuple):\n                top = top[0]\n            if top == \"\":\n                result = result[\"\"]\n                if isinstance(result, Series):\n                    result = self._constructor_sliced(\n                        result, index=self.index, name=key\n                    )\n\n        result._set_is_copy(self)\n        return result\n    else:\n        return self._get_item_cache(key)",
                "def _get_value(self, index, col, takeable: bool = False):\n    \"\"\"\n    Quickly retrieve single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    scalar\n    \"\"\"\n    if takeable:\n        series = self._iget_item_cache(col)\n        return com.maybe_box_datetimelike(series._values[index])\n\n    series = self._get_item_cache(col)\n    engine = self.index._engine\n\n    try:\n        return engine.get_value(series._values, index)\n    except KeyError:\n        # GH 20629\n        if self.index.nlevels > 1:\n            # partial indexing forbidden\n            raise\n    except (TypeError, ValueError):\n        pass\n\n    # we cannot handle direct indexing\n    # use positional\n    col = self.columns.get_loc(col)\n    index = self.index.get_loc(index)\n    return self._get_value(index, col, takeable=True)",
                "def __setitem__(self, key, value):\n    key = com.apply_if_callable(key, self)\n\n    # see if we can slice the rows\n    indexer = convert_to_index_sliceable(self, key)\n    if indexer is not None:\n        # either we have a slice or we have a string that can be converted\n        #  to a slice for partial-string date indexing\n        return self._setitem_slice(indexer, value)\n\n    if isinstance(key, DataFrame) or getattr(key, \"ndim\", None) == 2:\n        self._setitem_frame(key, value)\n    elif isinstance(key, (Series, np.ndarray, list, Index)):\n        self._setitem_array(key, value)\n    else:\n        # set column\n        self._set_item(key, value)",
                "def _setitem_slice(self, key, value):\n    self._check_setitem_copy()\n    self.loc[key] = value",
                "def _setitem_array(self, key, value):\n    # also raises Exception if object array with NA values\n    if com.is_bool_indexer(key):\n        if len(key) != len(self.index):\n            raise ValueError(\n                f\"Item wrong length {len(key)} instead of {len(self.index)}!\"\n            )\n        key = check_bool_indexer(self.index, key)\n        indexer = key.nonzero()[0]\n        self._check_setitem_copy()\n        self.loc._setitem_with_indexer(indexer, value)\n    else:\n        if isinstance(value, DataFrame):\n            if len(value.columns) != len(key):\n                raise ValueError(\"Columns must be same length as key\")\n            for k1, k2 in zip(key, value.columns):\n                self[k1] = value[k2]\n        else:\n            indexer = self.loc._get_listlike_indexer(\n                key, axis=1, raise_missing=False\n            )[1]\n            self._check_setitem_copy()\n            self.loc._setitem_with_indexer((slice(None), indexer), value)",
                "def _setitem_frame(self, key, value):\n    # support boolean setting with DataFrame input, e.g.\n    # df[df > df2] = 0\n    if isinstance(key, np.ndarray):\n        if key.shape != self.shape:\n            raise ValueError(\"Array conditional must be same shape as self\")\n        key = self._constructor(key, **self._construct_axes_dict())\n\n    if key.values.size and not is_bool_dtype(key.values):\n        raise TypeError(\n            \"Must pass DataFrame or 2-d ndarray with boolean values only\"\n        )\n\n    self._check_inplace_setting(value)\n    self._check_setitem_copy()\n    self._where(-key, value, inplace=True)",
                "def _set_item(self, key, value):\n    \"\"\"\n    Add series to DataFrame in specified column.\n\n    If series is a numpy-array (not a Series/TimeSeries), it must be the\n    same length as the DataFrames index or an error will be thrown.\n\n    Series/TimeSeries will be conformed to the DataFrames index to\n    ensure homogeneity.\n    \"\"\"\n\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(key, value)\n    NDFrame._set_item(self, key, value)\n\n    # check if we are modifying a copy\n    # try to set first as we want an invalid\n    # value exception to occur first\n    if len(self):\n        self._check_setitem_copy()",
                "def _set_value(self, index, col, value, takeable: bool = False):\n    \"\"\"\n    Put single value at passed column and index.\n\n    Parameters\n    ----------\n    index : row label\n    col : column label\n    value : scalar\n    takeable : interpret the index/col as indexers, default False\n\n    Returns\n    -------\n    DataFrame\n        If label pair is contained, will be reference to calling DataFrame,\n        otherwise a new object.\n    \"\"\"\n    try:\n        if takeable is True:\n            series = self._iget_item_cache(col)\n            return series._set_value(index, value, takeable=True)\n\n        series = self._get_item_cache(col)\n        engine = self.index._engine\n        engine.set_value(series._values, index, value)\n        return self\n    except (KeyError, TypeError):\n\n        # set using a non-recursive method & reset the cache\n        if takeable:\n            self.iloc[index, col] = value\n        else:\n            self.loc[index, col] = value\n        self._item_cache.pop(col, None)\n\n        return self",
                "def _ensure_valid_index(self, value):\n    \"\"\"\n    Ensure that if we don't have an index, that we can create one from the\n    passed value.\n    \"\"\"\n    # GH5632, make sure that we are a Series convertible\n    if not len(self.index) and is_list_like(value) and len(value):\n        try:\n            value = Series(value)\n        except (ValueError, NotImplementedError, TypeError):\n            raise ValueError(\n                \"Cannot set a frame with no defined index \"\n                \"and a value that cannot be converted to a \"\n                \"Series\"\n            )\n\n        self._data = self._data.reindex_axis(\n            value.index.copy(), axis=1, fill_value=np.nan\n        )",
                "def _box_item_values(self, key, values):\n    items = self.columns[self.columns.get_loc(key)]\n    if values.ndim == 2:\n        return self._constructor(values.T, columns=items, index=self.index)\n    else:\n        return self._box_col_values(values, items)",
                "def _box_col_values(self, values, items):\n    \"\"\"\n    Provide boxed values for a column.\n    \"\"\"\n    klass = self._constructor_sliced\n    return klass(values, index=self.index, name=items, fastpath=True)",
                "def query(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Query the columns of a DataFrame with a boolean expression.\n\n    Parameters\n    ----------\n    expr : str\n        The query string to evaluate.  You can refer to variables\n        in the environment by prefixing them with an '@' character like\n        ``@a + b``.\n\n        .. versionadded:: 0.25.0\n\n        You can refer to column names that contain spaces by surrounding\n        them in backticks.\n\n        For example, if one of your columns is called ``a a`` and you want\n        to sum it with ``b``, your query should be ```a a` + b``.\n\n    inplace : bool\n        Whether the query should modify the data in place or return\n        a modified copy.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by :meth:`DataFrame.query`.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame resulting from the provided query expression.\n\n    See Also\n    --------\n    eval : Evaluate a string describing operations on\n        DataFrame columns.\n    DataFrame.eval : Evaluate a string describing operations on\n        DataFrame columns.\n\n    Notes\n    -----\n    The result of the evaluation of this expression is first passed to\n    :attr:`DataFrame.loc` and if that fails because of a\n    multidimensional key (e.g., a DataFrame) then the result will be passed\n    to :meth:`DataFrame.__getitem__`.\n\n    This method uses the top-level :func:`eval` function to\n    evaluate the passed query.\n\n    The :meth:`~pandas.DataFrame.query` method uses a slightly\n    modified Python syntax by default. For example, the ``&`` and ``|``\n    (bitwise) operators have the precedence of their boolean cousins,\n    :keyword:`and` and :keyword:`or`. This *is* syntactically valid Python,\n    however the semantics are different.\n\n    You can change the semantics of the expression by passing the keyword\n    argument ``parser='python'``. This enforces the same semantics as\n    evaluation in Python space. Likewise, you can pass ``engine='python'``\n    to evaluate an expression using Python itself as a backend. This is not\n    recommended as it is inefficient compared to using ``numexpr`` as the\n    engine.\n\n    The :attr:`DataFrame.index` and\n    :attr:`DataFrame.columns` attributes of the\n    :class:`~pandas.DataFrame` instance are placed in the query namespace\n    by default, which allows you to treat both the index and columns of the\n    frame as a column in the frame.\n    The identifier ``index`` is used for the frame index; you can also\n    use the name of the index to identify it in a query. Please note that\n    Python keywords may not be used as identifiers.\n\n    For further details and examples see the ``query`` documentation in\n    :ref:`indexing <indexing.query>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6),\n    ...                    'B': range(10, 0, -2),\n    ...                    'C C': range(10, 5, -1)})\n    >>> df\n       A   B  C C\n    0  1  10   10\n    1  2   8    9\n    2  3   6    8\n    3  4   4    7\n    4  5   2    6\n    >>> df.query('A > B')\n       A  B  C C\n    4  5  2    6\n\n    The previous expression is equivalent to\n\n    >>> df[df.A > df.B]\n       A  B  C C\n    4  5  2    6\n\n    For columns with spaces in their name, you can use backtick quoting.\n\n    >>> df.query('B == `C C`')\n       A   B  C C\n    0  1  10   10\n\n    The previous expression is equivalent to\n\n    >>> df[df.B == df['C C']]\n       A   B  C C\n    0  1  10   10\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not isinstance(expr, str):\n        msg = f\"expr must be a string to be evaluated, {type(expr)} given\"\n        raise ValueError(msg)\n    kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n    kwargs[\"target\"] = None\n    res = self.eval(expr, **kwargs)\n\n    try:\n        new_data = self.loc[res]\n    except ValueError:\n        # when res is multi-dimensional loc raises, but this is sometimes a\n        # valid query\n        new_data = self[res]\n\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return new_data",
                "def eval(self, expr, inplace=False, **kwargs):\n    \"\"\"\n    Evaluate a string describing operations on DataFrame columns.\n\n    Operates on columns only, not specific rows or elements.  This allows\n    `eval` to run arbitrary code, which can make you vulnerable to code\n    injection if you pass user input to this function.\n\n    Parameters\n    ----------\n    expr : str\n        The expression string to evaluate.\n    inplace : bool, default False\n        If the expression contains an assignment, whether to perform the\n        operation inplace and mutate the existing DataFrame. Otherwise,\n        a new DataFrame is returned.\n    **kwargs\n        See the documentation for :func:`eval` for complete details\n        on the keyword arguments accepted by\n        :meth:`~pandas.DataFrame.query`.\n\n    Returns\n    -------\n    ndarray, scalar, or pandas object\n        The result of the evaluation.\n\n    See Also\n    --------\n    DataFrame.query : Evaluates a boolean expression to query the columns\n        of a frame.\n    DataFrame.assign : Can evaluate an expression or function to create new\n        values for a column.\n    eval : Evaluate a Python expression as a string using various\n        backends.\n\n    Notes\n    -----\n    For more details see the API documentation for :func:`~eval`.\n    For detailed examples see :ref:`enhancing performance with eval\n    <enhancingperf.eval>`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': range(1, 6), 'B': range(10, 0, -2)})\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n    >>> df.eval('A + B')\n    0    11\n    1    10\n    2     9\n    3     8\n    4     7\n    dtype: int64\n\n    Assignment is allowed though by default the original DataFrame is not\n    modified.\n\n    >>> df.eval('C = A + B')\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    >>> df\n       A   B\n    0  1  10\n    1  2   8\n    2  3   6\n    3  4   4\n    4  5   2\n\n    Use ``inplace=True`` to modify the original DataFrame.\n\n    >>> df.eval('C = A + B', inplace=True)\n    >>> df\n       A   B   C\n    0  1  10  11\n    1  2   8  10\n    2  3   6   9\n    3  4   4   8\n    4  5   2   7\n    \"\"\"\n    from pandas.core.computation.eval import eval as _eval\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    resolvers = kwargs.pop(\"resolvers\", None)\n    kwargs[\"level\"] = kwargs.pop(\"level\", 0) + 1\n    if resolvers is None:\n        index_resolvers = self._get_index_resolvers()\n        column_resolvers = self._get_space_character_free_column_resolvers()\n        resolvers = column_resolvers, index_resolvers\n    if \"target\" not in kwargs:\n        kwargs[\"target\"] = self\n    kwargs[\"resolvers\"] = kwargs.get(\"resolvers\", ()) + tuple(resolvers)\n    return _eval(expr, inplace=inplace, **kwargs)",
                "def select_dtypes(self, include=None, exclude=None):\n    \"\"\"\n    Return a subset of the DataFrame's columns based on the column dtypes.\n\n    Parameters\n    ----------\n    include, exclude : scalar or list-like\n        A selection of dtypes or strings to be included/excluded. At least\n        one of these parameters must be supplied.\n\n    Returns\n    -------\n    DataFrame\n        The subset of the frame including the dtypes in ``include`` and\n        excluding the dtypes in ``exclude``.\n\n    Raises\n    ------\n    ValueError\n        * If both of ``include`` and ``exclude`` are empty\n        * If ``include`` and ``exclude`` have overlapping elements\n        * If any kind of string dtype is passed in.\n\n    Notes\n    -----\n    * To select all *numeric* types, use ``np.number`` or ``'number'``\n    * To select strings you must use the ``object`` dtype, but note that\n      this will return *all* object dtype columns\n    * See the `numpy dtype hierarchy\n      <http://docs.scipy.org/doc/numpy/reference/arrays.scalars.html>`__\n    * To select datetimes, use ``np.datetime64``, ``'datetime'`` or\n      ``'datetime64'``\n    * To select timedeltas, use ``np.timedelta64``, ``'timedelta'`` or\n      ``'timedelta64'``\n    * To select Pandas categorical dtypes, use ``'category'``\n    * To select Pandas datetimetz dtypes, use ``'datetimetz'`` (new in\n      0.20.0) or ``'datetime64[ns, tz]'``\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'a': [1, 2] * 3,\n    ...                    'b': [True, False] * 3,\n    ...                    'c': [1.0, 2.0] * 3})\n    >>> df\n            a      b  c\n    0       1   True  1.0\n    1       2  False  2.0\n    2       1   True  1.0\n    3       2  False  2.0\n    4       1   True  1.0\n    5       2  False  2.0\n\n    >>> df.select_dtypes(include='bool')\n       b\n    0  True\n    1  False\n    2  True\n    3  False\n    4  True\n    5  False\n\n    >>> df.select_dtypes(include=['float64'])\n       c\n    0  1.0\n    1  2.0\n    2  1.0\n    3  2.0\n    4  1.0\n    5  2.0\n\n    >>> df.select_dtypes(exclude=['int'])\n           b    c\n    0   True  1.0\n    1  False  2.0\n    2   True  1.0\n    3  False  2.0\n    4   True  1.0\n    5  False  2.0\n    \"\"\"\n\n    if not is_list_like(include):\n        include = (include,) if include is not None else ()\n    if not is_list_like(exclude):\n        exclude = (exclude,) if exclude is not None else ()\n\n    selection = (frozenset(include), frozenset(exclude))\n\n    if not any(selection):\n        raise ValueError(\"at least one of include or exclude must be nonempty\")\n\n    # convert the myriad valid dtypes object to a single representation\n    include = frozenset(infer_dtype_from_object(x) for x in include)\n    exclude = frozenset(infer_dtype_from_object(x) for x in exclude)\n    for dtypes in (include, exclude):\n        invalidate_string_dtypes(dtypes)\n\n    # can't both include AND exclude!\n    if not include.isdisjoint(exclude):\n        raise ValueError(f\"include and exclude overlap on {(include & exclude)}\")\n\n    # We raise when both include and exclude are empty\n    # Hence, we can just shrink the columns we want to keep\n    keep_these = np.full(self.shape[1], True)\n\n    def extract_unique_dtypes_from_dtypes_set(\n        dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n    ) -> List[Dtype]:\n        extracted_dtypes = [\n            unique_dtype\n            for unique_dtype in unique_dtypes\n            if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n        ]\n        return extracted_dtypes\n\n    unique_dtypes = self.dtypes.unique()\n\n    if include:\n        included_dtypes = extract_unique_dtypes_from_dtypes_set(\n            include, unique_dtypes\n        )\n        keep_these &= self.dtypes.isin(included_dtypes)\n\n    if exclude:\n        excluded_dtypes = extract_unique_dtypes_from_dtypes_set(\n            exclude, unique_dtypes\n        )\n        keep_these &= ~self.dtypes.isin(excluded_dtypes)\n\n    return self.iloc[:, keep_these.values]",
                "def insert(self, loc, column, value, allow_duplicates=False):\n    \"\"\"\n    Insert column into DataFrame at specified location.\n\n    Raises a ValueError if `column` is already contained in the DataFrame,\n    unless `allow_duplicates` is set to True.\n\n    Parameters\n    ----------\n    loc : int\n        Insertion index. Must verify 0 <= loc <= len(columns).\n    column : str, number, or hashable object\n        Label of the inserted column.\n    value : int, Series, or array-like\n    allow_duplicates : bool, optional\n    \"\"\"\n    self._ensure_valid_index(value)\n    value = self._sanitize_column(column, value, broadcast=False)\n    self._data.insert(loc, column, value, allow_duplicates=allow_duplicates)",
                "def assign(self, **kwargs):\n    r\"\"\"\n    Assign new columns to a DataFrame.\n\n    Returns a new object with all original columns in addition to new ones.\n    Existing columns that are re-assigned will be overwritten.\n\n    Parameters\n    ----------\n    **kwargs : dict of {str: callable or Series}\n        The column names are keywords. If the values are\n        callable, they are computed on the DataFrame and\n        assigned to the new columns. The callable must not\n        change input DataFrame (though pandas doesn't check it).\n        If the values are not callable, (e.g. a Series, scalar, or array),\n        they are simply assigned.\n\n    Returns\n    -------\n    DataFrame\n        A new DataFrame with the new columns in addition to\n        all the existing columns.\n\n    Notes\n    -----\n    Assigning multiple columns within the same ``assign`` is possible.\n    Later items in '\\*\\*kwargs' may refer to newly created or modified\n    columns in 'df'; items are computed and assigned into 'df' in order.\n\n    .. versionchanged:: 0.23.0\n\n       Keyword argument order is maintained.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'temp_c': [17.0, 25.0]},\n    ...                   index=['Portland', 'Berkeley'])\n    >>> df\n              temp_c\n    Portland    17.0\n    Berkeley    25.0\n\n    Where the value is a callable, evaluated on `df`:\n\n    >>> df.assign(temp_f=lambda x: x.temp_c * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    Alternatively, the same behavior can be achieved by directly\n    referencing an existing Series or sequence:\n\n    >>> df.assign(temp_f=df['temp_c'] * 9 / 5 + 32)\n              temp_c  temp_f\n    Portland    17.0    62.6\n    Berkeley    25.0    77.0\n\n    You can create multiple columns within the same assign where one\n    of the columns depends on another one defined within the same assign:\n\n    >>> df.assign(temp_f=lambda x: x['temp_c'] * 9 / 5 + 32,\n    ...           temp_k=lambda x: (x['temp_f'] +  459.67) * 5 / 9)\n              temp_c  temp_f  temp_k\n    Portland    17.0    62.6  290.15\n    Berkeley    25.0    77.0  298.15\n    \"\"\"\n    data = self.copy()\n\n    for k, v in kwargs.items():\n        data[k] = com.apply_if_callable(v, data)\n    return data",
                "def _sanitize_column(self, key, value, broadcast=True):\n    \"\"\"\n    Ensures new columns (which go into the BlockManager as new blocks) are\n    always copied and converted into an array.\n\n    Parameters\n    ----------\n    key : object\n    value : scalar, Series, or array-like\n    broadcast : bool, default True\n        If ``key`` matches multiple duplicate column names in the\n        DataFrame, this parameter indicates whether ``value`` should be\n        tiled so that the returned array contains a (duplicated) column for\n        each occurrence of the key. If False, ``value`` will not be tiled.\n\n    Returns\n    -------\n    numpy.ndarray\n    \"\"\"\n\n    def reindexer(value):\n        # reindex if necessary\n\n        if value.index.equals(self.index) or not len(self.index):\n            value = value._values.copy()\n        else:\n\n            # GH 4107\n            try:\n                value = value.reindex(self.index)._values\n            except ValueError as err:\n                # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n                if not value.index.is_unique:\n                    # duplicate axis\n                    raise err\n\n                # other\n                raise TypeError(\n                    \"incompatible index of inserted column with frame index\"\n                )\n        return value\n\n    if isinstance(value, Series):\n        value = reindexer(value)\n\n    elif isinstance(value, DataFrame):\n        # align right-hand-side columns if self.columns\n        # is multi-index and self[key] is a sub-frame\n        if isinstance(self.columns, ABCMultiIndex) and key in self.columns:\n            loc = self.columns.get_loc(key)\n            if isinstance(loc, (slice, Series, np.ndarray, Index)):\n                cols = maybe_droplevels(self.columns[loc], key)\n                if len(cols) and not cols.equals(value.columns):\n                    value = value.reindex(cols, axis=1)\n        # now align rows\n        value = reindexer(value).T\n\n    elif isinstance(value, ExtensionArray):\n        # Explicitly copy here, instead of in sanitize_index,\n        # as sanitize_index won't copy an EA, even with copy=True\n        value = value.copy()\n        value = sanitize_index(value, self.index, copy=False)\n\n    elif isinstance(value, Index) or is_sequence(value):\n\n        # turn me into an ndarray\n        value = sanitize_index(value, self.index, copy=False)\n        if not isinstance(value, (np.ndarray, Index)):\n            if isinstance(value, list) and len(value) > 0:\n                value = maybe_convert_platform(value)\n            else:\n                value = com.asarray_tuplesafe(value)\n        elif value.ndim == 2:\n            value = value.copy().T\n        elif isinstance(value, Index):\n            value = value.copy(deep=True)\n        else:\n            value = value.copy()\n\n        # possibly infer to datetimelike\n        if is_object_dtype(value.dtype):\n            value = maybe_infer_to_datetimelike(value)\n\n    else:\n        # cast ignores pandas dtypes. so save the dtype first\n        infer_dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n\n        # upcast\n        value = cast_scalar_to_array(len(self.index), value)\n        value = maybe_cast_to_datetime(value, infer_dtype)\n\n    # return internal types directly\n    if is_extension_array_dtype(value):\n        return value\n\n    # broadcast across multiple columns if necessary\n    if broadcast and key in self.columns and value.ndim == 1:\n        if not self.columns.is_unique or isinstance(self.columns, ABCMultiIndex):\n            existing_piece = self[key]\n            if isinstance(existing_piece, DataFrame):\n                value = np.tile(value, (len(existing_piece.columns), 1))\n\n    return np.atleast_2d(np.asarray(value))",
                "@property\ndef _series(self):\n    return {\n        item: Series(self._data.iget(idx), index=self.index, name=item)\n        for idx, item in enumerate(self.columns)\n    }",
                "def lookup(self, row_labels, col_labels):\n    \"\"\"\n    Label-based \"fancy indexing\" function for DataFrame.\n\n    Given equal-length arrays of row and column labels, return an\n    array of the values corresponding to each (row, col) pair.\n\n    Parameters\n    ----------\n    row_labels : sequence\n        The row labels to use for lookup.\n    col_labels : sequence\n        The column labels to use for lookup.\n\n    Returns\n    -------\n    numpy.ndarray\n\n    Examples\n    --------\n    values : ndarray\n        The found values\n    \"\"\"\n    n = len(row_labels)\n    if n != len(col_labels):\n        raise ValueError(\"Row labels must have same size as column labels\")\n\n    thresh = 1000\n    if not self._is_mixed_type or n > thresh:\n        values = self.values\n        ridx = self.index.get_indexer(row_labels)\n        cidx = self.columns.get_indexer(col_labels)\n        if (ridx == -1).any():\n            raise KeyError(\"One or more row labels was not found\")\n        if (cidx == -1).any():\n            raise KeyError(\"One or more column labels was not found\")\n        flat_index = ridx * len(self.columns) + cidx\n        result = values.flat[flat_index]\n    else:\n        result = np.empty(n, dtype=\"O\")\n        for i, (r, c) in enumerate(zip(row_labels, col_labels)):\n            result[i] = self._get_value(r, c)\n\n    if is_object_dtype(result):\n        result = lib.maybe_convert_objects(result)\n\n    return result",
                "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    frame = self\n\n    columns = axes[\"columns\"]\n    if columns is not None:\n        frame = frame._reindex_columns(\n            columns, method, copy, level, fill_value, limit, tolerance\n        )\n\n    index = axes[\"index\"]\n    if index is not None:\n        frame = frame._reindex_index(\n            index, method, copy, level, fill_value, limit, tolerance\n        )\n\n    return frame",
                "def _reindex_index(\n    self,\n    new_index,\n    method,\n    copy,\n    level,\n    fill_value=np.nan,\n    limit=None,\n    tolerance=None,\n):\n    new_index, indexer = self.index.reindex(\n        new_index, method=method, level=level, limit=limit, tolerance=tolerance\n    )\n    return self._reindex_with_indexers(\n        {0: [new_index, indexer]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=False,\n    )",
                "def _reindex_columns(\n    self,\n    new_columns,\n    method,\n    copy,\n    level,\n    fill_value=None,\n    limit=None,\n    tolerance=None,\n):\n    new_columns, indexer = self.columns.reindex(\n        new_columns, method=method, level=level, limit=limit, tolerance=tolerance\n    )\n    return self._reindex_with_indexers(\n        {1: [new_columns, indexer]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=False,\n    )",
                "def _reindex_multi(self, axes, copy, fill_value):\n    \"\"\"\n    We are guaranteed non-Nones in the axes.\n    \"\"\"\n\n    new_index, row_indexer = self.index.reindex(axes[\"index\"])\n    new_columns, col_indexer = self.columns.reindex(axes[\"columns\"])\n\n    if row_indexer is not None and col_indexer is not None:\n        indexer = row_indexer, col_indexer\n        new_values = algorithms.take_2d_multi(\n            self.values, indexer, fill_value=fill_value\n        )\n        return self._constructor(new_values, index=new_index, columns=new_columns)\n    else:\n        return self._reindex_with_indexers(\n            {0: [new_index, row_indexer], 1: [new_columns, col_indexer]},\n            copy=copy,\n            fill_value=fill_value,\n        )",
                "@Appender(_shared_docs[\"align\"] % _shared_doc_kwargs)\ndef align(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy=True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n    broadcast_axis=None,\n):\n    return super().align(\n        other,\n        join=join,\n        axis=axis,\n        level=level,\n        copy=copy,\n        fill_value=fill_value,\n        method=method,\n        limit=limit,\n        fill_axis=fill_axis,\n        broadcast_axis=broadcast_axis,\n    )",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.reindex.__doc__)\n@rewrite_axis_style_signature(\n    \"labels\",\n    [\n        (\"method\", None),\n        (\"copy\", True),\n        (\"level\", None),\n        (\"fill_value\", np.nan),\n        (\"limit\", None),\n        (\"tolerance\", None),\n    ],\n)\ndef reindex(self, *args, **kwargs):\n    axes = validate_axis_style_args(self, args, kwargs, \"labels\", \"reindex\")\n    kwargs.update(axes)\n    # Pop these, since the values are in `kwargs` under different names\n    kwargs.pop(\"axis\", None)\n    kwargs.pop(\"labels\", None)\n    return super().reindex(**kwargs)",
                "def drop(\n    self,\n    labels=None,\n    axis=0,\n    index=None,\n    columns=None,\n    level=None,\n    inplace=False,\n    errors=\"raise\",\n):\n    \"\"\"\n    Drop specified labels from rows or columns.\n\n    Remove rows or columns by specifying label names and corresponding\n    axis, or by specifying directly index or column names. When using a\n    multi-index, labels on different levels can be removed by specifying\n    the level.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n        Index or column labels to drop.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Whether to drop labels from the index (0 or 'index') or\n        columns (1 or 'columns').\n    index : single label or list-like\n        Alternative to specifying axis (``labels, axis=0``\n        is equivalent to ``index=labels``).\n\n        .. versionadded:: 0.21.0\n    columns : single label or list-like\n        Alternative to specifying axis (``labels, axis=1``\n        is equivalent to ``columns=labels``).\n\n        .. versionadded:: 0.21.0\n    level : int or level name, optional\n        For MultiIndex, level from which the labels will be removed.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and only existing labels are\n        dropped.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame without the removed index or column labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis.\n\n    See Also\n    --------\n    DataFrame.loc : Label-location based indexer for selection by label.\n    DataFrame.dropna : Return DataFrame with labels on given axis omitted\n        where (all or any) data are missing.\n    DataFrame.drop_duplicates : Return DataFrame with duplicate rows\n        removed, optionally only considering certain columns.\n    Series.drop : Return Series with specified index labels removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.arange(12).reshape(3, 4),\n    ...                   columns=['A', 'B', 'C', 'D'])\n    >>> df\n       A  B   C   D\n    0  0  1   2   3\n    1  4  5   6   7\n    2  8  9  10  11\n\n    Drop columns\n\n    >>> df.drop(['B', 'C'], axis=1)\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    >>> df.drop(columns=['B', 'C'])\n       A   D\n    0  0   3\n    1  4   7\n    2  8  11\n\n    Drop a row by index\n\n    >>> df.drop([0, 1])\n       A  B   C   D\n    2  8  9  10  11\n\n    Drop columns and/or rows of MultiIndex DataFrame\n\n    >>> midx = pd.MultiIndex(levels=[['lama', 'cow', 'falcon'],\n    ...                              ['speed', 'weight', 'length']],\n    ...                      codes=[[0, 0, 0, 1, 1, 1, 2, 2, 2],\n    ...                             [0, 1, 2, 0, 1, 2, 0, 1, 2]])\n    >>> df = pd.DataFrame(index=midx, columns=['big', 'small'],\n    ...                   data=[[45, 30], [200, 100], [1.5, 1], [30, 20],\n    ...                         [250, 150], [1.5, 0.8], [320, 250],\n    ...                         [1, 0.8], [0.3, 0.2]])\n    >>> df\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n            length  1.5     1.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n            length  1.5     0.8\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n            length  0.3     0.2\n\n    >>> df.drop(index='cow', columns='small')\n                    big\n    lama    speed   45.0\n            weight  200.0\n            length  1.5\n    falcon  speed   320.0\n            weight  1.0\n            length  0.3\n\n    >>> df.drop(index='length', level=1)\n                    big     small\n    lama    speed   45.0    30.0\n            weight  200.0   100.0\n    cow     speed   30.0    20.0\n            weight  250.0   150.0\n    falcon  speed   320.0   250.0\n            weight  1.0     0.8\n    \"\"\"\n    return super().drop(\n        labels=labels,\n        axis=axis,\n        index=index,\n        columns=columns,\n        level=level,\n        inplace=inplace,\n        errors=errors,\n    )",
                "@rewrite_axis_style_signature(\n    \"mapper\",\n    [(\"copy\", True), (\"inplace\", False), (\"level\", None), (\"errors\", \"ignore\")],\n)\ndef rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes labels.\n\n    Function / dict values must be unique (1-to-1). Labels not contained in\n    a dict / Series will be left as-is. Extra labels listed don't throw an\n    error.\n\n    See the :ref:`user guide <basics.rename>` for more.\n\n    Parameters\n    ----------\n    mapper : dict-like or function\n        Dict-like or functions transformations to apply to\n        that axis' values. Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index`` and\n        ``columns``.\n    index : dict-like or function\n        Alternative to specifying axis (``mapper, axis=0``\n        is equivalent to ``index=mapper``).\n    columns : dict-like or function\n        Alternative to specifying axis (``mapper, axis=1``\n        is equivalent to ``columns=mapper``).\n    axis : int or str\n        Axis to target with ``mapper``. Can be either the axis name\n        ('index', 'columns') or number (0, 1). The default is 'index'.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new DataFrame. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with the renamed axis labels.\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    DataFrame.rename_axis : Set the name of the axis.\n\n    Examples\n    --------\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Rename columns using a mapping:\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Rename index using a mapping:\n\n    >>> df.rename(index={0: \"x\", 1: \"y\", 2: \"z\"})\n       A  B\n    x  1  4\n    y  2  5\n    z  3  6\n\n    Cast index labels to a different type:\n\n    >>> df.index\n    RangeIndex(start=0, stop=3, step=1)\n    >>> df.rename(index=str).index\n    Index(['0', '1', '2'], dtype='object')\n\n    >>> df.rename(columns={\"A\": \"a\", \"B\": \"b\", \"C\": \"c\"}, errors=\"raise\")\n    Traceback (most recent call last):\n    KeyError: ['C'] not found in axis\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n    \"\"\"\n    axes = validate_axis_style_args(self, args, kwargs, \"mapper\", \"rename\")\n    kwargs.update(axes)\n    # Pop these, since the values are in `kwargs` under different names\n    kwargs.pop(\"axis\", None)\n    kwargs.pop(\"mapper\", None)\n    return super().rename(**kwargs)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.fillna.__doc__)\ndef fillna(\n    self,\n    value=None,\n    method=None,\n    axis=None,\n    inplace=False,\n    limit=None,\n    downcast=None,\n    **kwargs,\n):\n    return super().fillna(\n        value=value,\n        method=method,\n        axis=axis,\n        inplace=inplace,\n        limit=limit,\n        downcast=downcast,\n        **kwargs,\n    )",
                "@Appender(_shared_docs[\"replace\"] % _shared_doc_kwargs)\ndef replace(\n    self,\n    to_replace=None,\n    value=None,\n    inplace=False,\n    limit=None,\n    regex=False,\n    method=\"pad\",\n):\n    return super().replace(\n        to_replace=to_replace,\n        value=value,\n        inplace=inplace,\n        limit=limit,\n        regex=regex,\n        method=method,\n    )",
                "@Appender(_shared_docs[\"shift\"] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    return super().shift(\n        periods=periods, freq=freq, axis=axis, fill_value=fill_value\n    )",
                "def set_index(\n    self, keys, drop=True, append=False, inplace=False, verify_integrity=False\n):\n    \"\"\"\n    Set the DataFrame index using existing columns.\n\n    Set the DataFrame index (row labels) using one or more existing\n    columns or arrays (of the correct length). The index can replace the\n    existing index or expand on it.\n\n    Parameters\n    ----------\n    keys : label or array-like or list of labels/arrays\n        This parameter can be either a single column key, a single array of\n        the same length as the calling DataFrame, or a list containing an\n        arbitrary combination of column keys and arrays. Here, \"array\"\n        encompasses :class:`Series`, :class:`Index`, ``np.ndarray``, and\n        instances of :class:`~collections.abc.Iterator`.\n    drop : bool, default True\n        Delete columns to be used as the new index.\n    append : bool, default False\n        Whether to append columns to existing index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    verify_integrity : bool, default False\n        Check the new index for duplicates. Otherwise defer the check until\n        necessary. Setting to False will improve the performance of this\n        method.\n\n    Returns\n    -------\n    DataFrame\n        Changed row labels.\n\n    See Also\n    --------\n    DataFrame.reset_index : Opposite of set_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'month': [1, 4, 7, 10],\n    ...                    'year': [2012, 2014, 2013, 2014],\n    ...                    'sale': [55, 40, 84, 31]})\n    >>> df\n       month  year  sale\n    0      1  2012    55\n    1      4  2014    40\n    2      7  2013    84\n    3     10  2014    31\n\n    Set the index to become the 'month' column:\n\n    >>> df.set_index('month')\n           year  sale\n    month\n    1      2012    55\n    4      2014    40\n    7      2013    84\n    10     2014    31\n\n    Create a MultiIndex using columns 'year' and 'month':\n\n    >>> df.set_index(['year', 'month'])\n                sale\n    year  month\n    2012  1     55\n    2014  4     40\n    2013  7     84\n    2014  10    31\n\n    Create a MultiIndex using an Index and a column:\n\n    >>> df.set_index([pd.Index([1, 2, 3, 4]), 'year'])\n             month  sale\n       year\n    1  2012  1      55\n    2  2014  4      40\n    3  2013  7      84\n    4  2014  10     31\n\n    Create a MultiIndex using two Series:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> df.set_index([s, s**2])\n          month  year  sale\n    1 1       1  2012    55\n    2 4       4  2014    40\n    3 9       7  2013    84\n    4 16     10  2014    31\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not isinstance(keys, list):\n        keys = [keys]\n\n    err_msg = (\n        'The parameter \"keys\" may be a column key, one-dimensional '\n        \"array, or a list containing only valid column keys and \"\n        \"one-dimensional arrays.\"\n    )\n\n    missing = []\n    for col in keys:\n        if isinstance(\n            col, (ABCIndexClass, ABCSeries, np.ndarray, list, abc.Iterator)\n        ):\n            # arrays are fine as long as they are one-dimensional\n            # iterators get converted to list below\n            if getattr(col, \"ndim\", 1) != 1:\n                raise ValueError(err_msg)\n        else:\n            # everything else gets tried as a key; see GH 24969\n            try:\n                found = col in self.columns\n            except TypeError:\n                raise TypeError(f\"{err_msg}. Received column of type {type(col)}\")\n            else:\n                if not found:\n                    missing.append(col)\n\n    if missing:\n        raise KeyError(f\"None of {missing} are in the columns\")\n\n    if inplace:\n        frame = self\n    else:\n        frame = self.copy()\n\n    arrays = []\n    names = []\n    if append:\n        names = list(self.index.names)\n        if isinstance(self.index, ABCMultiIndex):\n            for i in range(self.index.nlevels):\n                arrays.append(self.index._get_level_values(i))\n        else:\n            arrays.append(self.index)\n\n    to_remove = []\n    for col in keys:\n        if isinstance(col, ABCMultiIndex):\n            for n in range(col.nlevels):\n                arrays.append(col._get_level_values(n))\n            names.extend(col.names)\n        elif isinstance(col, (ABCIndexClass, ABCSeries)):\n            # if Index then not MultiIndex (treated above)\n            arrays.append(col)\n            names.append(col.name)\n        elif isinstance(col, (list, np.ndarray)):\n            arrays.append(col)\n            names.append(None)\n        elif isinstance(col, abc.Iterator):\n            arrays.append(list(col))\n            names.append(None)\n        # from here, col can only be a column label\n        else:\n            arrays.append(frame[col]._values)\n            names.append(col)\n            if drop:\n                to_remove.append(col)\n\n        if len(arrays[-1]) != len(self):\n            # check newest element against length of calling frame, since\n            # ensure_index_from_sequences would not raise for append=False.\n            raise ValueError(\n                f\"Length mismatch: Expected {len(self)} rows, \"\n                f\"received array of length {len(arrays[-1])}\"\n            )\n\n    index = ensure_index_from_sequences(arrays, names)\n\n    if verify_integrity and not index.is_unique:\n        duplicates = index[index.duplicated()].unique()\n        raise ValueError(f\"Index has duplicate keys: {duplicates}\")\n\n    # use set to handle duplicate column names gracefully in case of drop\n    for c in set(to_remove):\n        del frame[c]\n\n    # clear up memory usage\n    index._cleanup()\n\n    frame.index = index\n\n    if not inplace:\n        return frame",
                "def reset_index(\n    self,\n    level: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    drop: bool = False,\n    inplace: bool = False,\n    col_level: Hashable = 0,\n    col_fill: Optional[Hashable] = \"\",\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Reset the index, or a level of it.\n\n    Reset the index of the DataFrame, and use the default one instead.\n    If the DataFrame has a MultiIndex, this method can remove one or more\n    levels.\n\n    Parameters\n    ----------\n    level : int, str, tuple, or list, default None\n        Only remove the given levels from the index. Removes all levels by\n        default.\n    drop : bool, default False\n        Do not try to insert index into dataframe columns. This resets\n        the index to the default integer index.\n    inplace : bool, default False\n        Modify the DataFrame in place (do not create a new object).\n    col_level : int or str, default 0\n        If the columns have multiple levels, determines which level the\n        labels are inserted into. By default it is inserted into the first\n        level.\n    col_fill : object, default ''\n        If the columns have multiple levels, determines how the other\n        levels are named. If None then the index name is repeated.\n\n    Returns\n    -------\n    DataFrame or None\n        DataFrame with the new index or None if ``inplace=True``.\n\n    See Also\n    --------\n    DataFrame.set_index : Opposite of reset_index.\n    DataFrame.reindex : Change to new indices or expand indices.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 389.0),\n    ...                    ('bird', 24.0),\n    ...                    ('mammal', 80.5),\n    ...                    ('mammal', np.nan)],\n    ...                   index=['falcon', 'parrot', 'lion', 'monkey'],\n    ...                   columns=('class', 'max_speed'))\n    >>> df\n             class  max_speed\n    falcon    bird      389.0\n    parrot    bird       24.0\n    lion    mammal       80.5\n    monkey  mammal        NaN\n\n    When we reset the index, the old index is added as a column, and a\n    new sequential index is used:\n\n    >>> df.reset_index()\n        index   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    We can use the `drop` parameter to avoid the old index being added as\n    a column:\n\n    >>> df.reset_index(drop=True)\n        class  max_speed\n    0    bird      389.0\n    1    bird       24.0\n    2  mammal       80.5\n    3  mammal        NaN\n\n    You can also use `reset_index` with `MultiIndex`.\n\n    >>> index = pd.MultiIndex.from_tuples([('bird', 'falcon'),\n    ...                                    ('bird', 'parrot'),\n    ...                                    ('mammal', 'lion'),\n    ...                                    ('mammal', 'monkey')],\n    ...                                   names=['class', 'name'])\n    >>> columns = pd.MultiIndex.from_tuples([('speed', 'max'),\n    ...                                      ('species', 'type')])\n    >>> df = pd.DataFrame([(389.0, 'fly'),\n    ...                    ( 24.0, 'fly'),\n    ...                    ( 80.5, 'run'),\n    ...                    (np.nan, 'jump')],\n    ...                   index=index,\n    ...                   columns=columns)\n    >>> df\n                   speed species\n                     max    type\n    class  name\n    bird   falcon  389.0     fly\n           parrot   24.0     fly\n    mammal lion     80.5     run\n           monkey    NaN    jump\n\n    If the index has multiple levels, we can reset a subset of them:\n\n    >>> df.reset_index(level='class')\n             class  speed species\n                      max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    If we are not dropping the index, by default, it is placed in the top\n    level. We can place it in another level:\n\n    >>> df.reset_index(level='class', col_level=1)\n                    speed species\n             class    max    type\n    name\n    falcon    bird  389.0     fly\n    parrot    bird   24.0     fly\n    lion    mammal   80.5     run\n    monkey  mammal    NaN    jump\n\n    When the index is inserted under another level, we can specify under\n    which one with the parameter `col_fill`:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='species')\n                  species  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n\n    If we specify a nonexistent level for `col_fill`, it is created:\n\n    >>> df.reset_index(level='class', col_level=1, col_fill='genus')\n                    genus  speed species\n                    class    max    type\n    name\n    falcon           bird  389.0     fly\n    parrot           bird   24.0     fly\n    lion           mammal   80.5     run\n    monkey         mammal    NaN    jump\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if inplace:\n        new_obj = self\n    else:\n        new_obj = self.copy()\n\n    def _maybe_casted_values(index, labels=None):\n        values = index._values\n        if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n            if values.dtype == np.object_:\n                values = lib.maybe_convert_objects(values)\n\n        # if we have the labels, extract the values with a mask\n        if labels is not None:\n            mask = labels == -1\n\n            # we can have situations where the whole mask is -1,\n            # meaning there is nothing found in labels, so make all nan's\n            if mask.all():\n                values = np.empty(len(mask))\n                values.fill(np.nan)\n            else:\n                values = values.take(labels)\n\n                # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n                # Push this into maybe_upcast_putmask?\n                # We can't pass EAs there right now. Looks a bit\n                # complicated.\n                # So we unbox the ndarray_values, op, re-box.\n                values_type = type(values)\n                values_dtype = values.dtype\n\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values._data\n\n                if mask.any():\n                    values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n                if issubclass(values_type, DatetimeLikeArray):\n                    values = values_type(values, dtype=values_dtype)\n\n        return values\n\n    new_index = ibase.default_index(len(new_obj))\n    if level is not None:\n        if not isinstance(level, (tuple, list)):\n            level = [level]\n        level = [self.index._get_level_number(lev) for lev in level]\n        if len(level) < self.index.nlevels:\n            new_index = self.index.droplevel(level)\n\n    if not drop:\n        to_insert: Iterable[Tuple[Any, Optional[Any]]]\n        if isinstance(self.index, ABCMultiIndex):\n            names = [\n                (n if n is not None else f\"level_{i}\")\n                for i, n in enumerate(self.index.names)\n            ]\n            to_insert = zip(self.index.levels, self.index.codes)\n        else:\n            default = \"index\" if \"index\" not in self else \"level_0\"\n            names = [default] if self.index.name is None else [self.index.name]\n            to_insert = ((self.index, None),)\n\n        multi_col = isinstance(self.columns, ABCMultiIndex)\n        for i, (lev, lab) in reversed(list(enumerate(to_insert))):\n            if not (level is None or i in level):\n                continue\n            name = names[i]\n            if multi_col:\n                col_name = list(name) if isinstance(name, tuple) else [name]\n                if col_fill is None:\n                    if len(col_name) not in (1, self.columns.nlevels):\n                        raise ValueError(\n                            \"col_fill=None is incompatible \"\n                            f\"with incomplete column name {name}\"\n                        )\n                    col_fill = col_name[0]\n\n                lev_num = self.columns._get_level_number(col_level)\n                name_lst = [col_fill] * lev_num + col_name\n                missing = self.columns.nlevels - len(name_lst)\n                name_lst += [col_fill] * missing\n                name = tuple(name_lst)\n            # to ndarray and maybe infer different dtype\n            level_values = _maybe_casted_values(lev, lab)\n            new_obj.insert(0, name, level_values)\n\n    new_obj.index = new_index\n    if not inplace:\n        return new_obj\n\n    return None",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isna(self):\n    return super().isna()",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isnull(self):\n    return super().isnull()",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notna(self):\n    return super().notna()",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notnull(self):\n    return super().notnull()",
                "def dropna(self, axis=0, how=\"any\", thresh=None, subset=None, inplace=False):\n    \"\"\"\n    Remove missing values.\n\n    See the :ref:`User Guide <missing_data>` for more on which values are\n    considered missing, and how to work with missing data.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Determine if rows or columns which contain missing values are\n        removed.\n\n        * 0, or 'index' : Drop rows which contain missing values.\n        * 1, or 'columns' : Drop columns which contain missing value.\n\n        .. versionchanged:: 1.0.0\n\n           Pass tuple or list to drop on multiple axes.\n           Only a single axis is allowed.\n\n    how : {'any', 'all'}, default 'any'\n        Determine if row or column is removed from DataFrame, when we have\n        at least one NA or all NA.\n\n        * 'any' : If any NA values are present, drop that row or column.\n        * 'all' : If all values are NA, drop that row or column.\n\n    thresh : int, optional\n        Require that many non-NA values.\n    subset : array-like, optional\n        Labels along other axis to consider, e.g. if you are dropping rows\n        these would be a list of columns to include.\n    inplace : bool, default False\n        If True, do operation inplace and return None.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with NA entries dropped from it.\n\n    See Also\n    --------\n    DataFrame.isna: Indicate missing values.\n    DataFrame.notna : Indicate existing (non-missing) values.\n    DataFrame.fillna : Replace missing values.\n    Series.dropna : Drop missing values.\n    Index.dropna : Drop missing indices.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"name\": ['Alfred', 'Batman', 'Catwoman'],\n    ...                    \"toy\": [np.nan, 'Batmobile', 'Bullwhip'],\n    ...                    \"born\": [pd.NaT, pd.Timestamp(\"1940-04-25\"),\n    ...                             pd.NaT]})\n    >>> df\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Drop the rows where at least one element is missing.\n\n    >>> df.dropna()\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n\n    Drop the columns where at least one element is missing.\n\n    >>> df.dropna(axis='columns')\n           name\n    0    Alfred\n    1    Batman\n    2  Catwoman\n\n    Drop the rows where all elements are missing.\n\n    >>> df.dropna(how='all')\n           name        toy       born\n    0    Alfred        NaN        NaT\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Keep only the rows with at least 2 non-NA values.\n\n    >>> df.dropna(thresh=2)\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n    2  Catwoman   Bullwhip        NaT\n\n    Define in which columns to look for missing values.\n\n    >>> df.dropna(subset=['name', 'born'])\n           name        toy       born\n    1    Batman  Batmobile 1940-04-25\n\n    Keep the DataFrame with valid entries in the same variable.\n\n    >>> df.dropna(inplace=True)\n    >>> df\n         name        toy       born\n    1  Batman  Batmobile 1940-04-25\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if isinstance(axis, (tuple, list)):\n        # GH20987\n        raise TypeError(\"supplying multiple axes to axis is no longer supported.\")\n\n    axis = self._get_axis_number(axis)\n    agg_axis = 1 - axis\n\n    agg_obj = self\n    if subset is not None:\n        ax = self._get_axis(agg_axis)\n        indices = ax.get_indexer_for(subset)\n        check = indices == -1\n        if check.any():\n            raise KeyError(list(np.compress(check, subset)))\n        agg_obj = self.take(indices, axis=agg_axis)\n\n    count = agg_obj.count(axis=agg_axis)\n\n    if thresh is not None:\n        mask = count >= thresh\n    elif how == \"any\":\n        mask = count == len(agg_obj._get_axis(agg_axis))\n    elif how == \"all\":\n        mask = count > 0\n    else:\n        if how is not None:\n            raise ValueError(f\"invalid how option: {how}\")\n        else:\n            raise TypeError(\"must specify how or thresh\")\n\n    result = self.loc(axis=axis)[mask]\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                "def drop_duplicates(\n    self,\n    subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    keep: Union[str, bool] = \"first\",\n    inplace: bool = False,\n) -> Optional[\"DataFrame\"]:\n    \"\"\"\n    Return DataFrame with duplicate rows removed.\n\n    Considering certain columns is optional. Indexes, including time indexes\n    are ignored.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to keep.\n        - ``first`` : Drop duplicates except for the first occurrence.\n        - ``last`` : Drop duplicates except for the last occurrence.\n        - False : Drop all duplicates.\n    inplace : bool, default False\n        Whether to drop duplicates in place or to return a copy.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with duplicates removed or None if ``inplace=True``.\n    \"\"\"\n    if self.empty:\n        return self.copy()\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    duplicated = self.duplicated(subset, keep=keep)\n\n    if inplace:\n        (inds,) = (-duplicated)._ndarray_values.nonzero()\n        new_data = self._data.take(inds)\n        self._update_inplace(new_data)\n    else:\n        return self[-duplicated]\n\n    return None",
                "def duplicated(\n    self,\n    subset: Optional[Union[Hashable, Sequence[Hashable]]] = None,\n    keep: Union[str, bool] = \"first\",\n) -> \"Series\":\n    \"\"\"\n    Return boolean Series denoting duplicate rows.\n\n    Considering certain columns is optional.\n\n    Parameters\n    ----------\n    subset : column label or sequence of labels, optional\n        Only consider certain columns for identifying duplicates, by\n        default use all of the columns.\n    keep : {'first', 'last', False}, default 'first'\n        Determines which duplicates (if any) to mark.\n\n        - ``first`` : Mark duplicates as ``True`` except for the first occurrence.\n        - ``last`` : Mark duplicates as ``True`` except for the last occurrence.\n        - False : Mark all duplicates as ``True``.\n\n    Returns\n    -------\n    Series\n    \"\"\"\n    from pandas.core.sorting import get_group_index\n    from pandas._libs.hashtable import duplicated_int64, _SIZE_HINT_LIMIT\n\n    if self.empty:\n        return Series(dtype=bool)\n\n    def f(vals):\n        labels, shape = algorithms.factorize(\n            vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n        )\n        return labels.astype(\"i8\", copy=False), len(shape)\n\n    if subset is None:\n        subset = self.columns\n    elif (\n        not np.iterable(subset)\n        or isinstance(subset, str)\n        or isinstance(subset, tuple)\n        and subset in self.columns\n    ):\n        subset = (subset,)\n\n    #  needed for mypy since can't narrow types using np.iterable\n    subset = cast(Iterable, subset)\n\n    # Verify all columns in subset exist in the queried dataframe\n    # Otherwise, raise a KeyError, same as if you try to __getitem__ with a\n    # key that doesn't exist.\n    diff = Index(subset).difference(self.columns)\n    if not diff.empty:\n        raise KeyError(diff)\n\n    vals = (col.values for name, col in self.items() if name in subset)\n    labels, shape = map(list, zip(*map(f, vals)))\n\n    ids = get_group_index(labels, shape, sort=False, xnull=False)\n    return Series(duplicated_int64(ids, keep), index=self.index)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_values.__doc__)\ndef sort_values(\n    self,\n    by,\n    axis=0,\n    ascending=True,\n    inplace=False,\n    kind=\"quicksort\",\n    na_position=\"last\",\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    axis = self._get_axis_number(axis)\n\n    if not isinstance(by, list):\n        by = [by]\n    if is_sequence(ascending) and len(by) != len(ascending):\n        raise ValueError(\n            f\"Length of ascending ({len(ascending)}) != length of by ({len(by)})\"\n        )\n    if len(by) > 1:\n        from pandas.core.sorting import lexsort_indexer\n\n        keys = [self._get_label_or_level_values(x, axis=axis) for x in by]\n        indexer = lexsort_indexer(keys, orders=ascending, na_position=na_position)\n        indexer = ensure_platform_int(indexer)\n    else:\n        from pandas.core.sorting import nargsort\n\n        by = by[0]\n        k = self._get_label_or_level_values(by, axis=axis)\n\n        if isinstance(ascending, (tuple, list)):\n            ascending = ascending[0]\n\n        indexer = nargsort(\n            k, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    new_data = self._data.take(\n        indexer, axis=self._get_block_manager_axis(axis), verify=False\n    )\n\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "@Substitution(**_shared_doc_kwargs)\n@Appender(NDFrame.sort_index.__doc__)\ndef sort_index(\n    self,\n    axis=0,\n    level=None,\n    ascending=True,\n    inplace=False,\n    kind=\"quicksort\",\n    na_position=\"last\",\n    sort_remaining=True,\n):\n\n    # TODO: this can be combined with Series.sort_index impl as\n    # almost identical\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n\n    # make sure that the axis is lexsorted to start\n    # if not we need to reconstruct to get the correct indexer\n    labels = labels._sort_levels_monotonic()\n    if level is not None:\n\n        new_axis, indexer = labels.sortlevel(\n            level, ascending=ascending, sort_remaining=sort_remaining\n        )\n\n    elif isinstance(labels, ABCMultiIndex):\n        from pandas.core.sorting import lexsort_indexer\n\n        indexer = lexsort_indexer(\n            labels._get_codes_for_sorting(),\n            orders=ascending,\n            na_position=na_position,\n        )\n    else:\n        from pandas.core.sorting import nargsort\n\n        # Check monotonic-ness before sort an index\n        # GH11080\n        if (ascending and labels.is_monotonic_increasing) or (\n            not ascending and labels.is_monotonic_decreasing\n        ):\n            if inplace:\n                return\n            else:\n                return self.copy()\n\n        indexer = nargsort(\n            labels, kind=kind, ascending=ascending, na_position=na_position\n        )\n\n    baxis = self._get_block_manager_axis(axis)\n    new_data = self._data.take(indexer, axis=baxis, verify=False)\n\n    # reconstruct axis if needed\n    new_data.axes[baxis] = new_data.axes[baxis]._sort_levels_monotonic()\n\n    if inplace:\n        return self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "def nlargest(self, n, columns, keep=\"first\"):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in descending order.\n\n    Return the first `n` rows with the largest values in `columns`, in\n    descending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=False).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of rows to return.\n    columns : label or list of labels\n        Column label(s) to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - `first` : prioritize the first occurrence(s)\n        - `last` : prioritize the last occurrence(s)\n        - ``all`` : do not drop any duplicates, even it means\n                    selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The first `n` rows ordered by the given columns in descending\n        order.\n\n    See Also\n    --------\n    DataFrame.nsmallest : Return the first `n` rows ordered by `columns` in\n        ascending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Notes\n    -----\n    This function cannot be used with all column types. For example, when\n    specifying columns with `object` or `category` dtypes, ``TypeError`` is\n    raised.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nlargest`` to select the three\n    rows having the largest values in column \"population\".\n\n    >>> df.nlargest(3, 'population')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Malta       434000    12011      MT\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nlargest(3, 'population', keep='last')\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nlargest(3, 'population', keep='all')\n              population      GDP alpha-2\n    France      65000000  2583560      FR\n    Italy       59000000  1937894      IT\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n\n    To order by the largest values in column \"population\" and then \"GDP\",\n    we can specify multiple columns like in the next example.\n\n    >>> df.nlargest(3, ['population', 'GDP'])\n            population      GDP alpha-2\n    France    65000000  2583560      FR\n    Italy     59000000  1937894      IT\n    Brunei      434000    12128      BN\n    \"\"\"\n    return algorithms.SelectNFrame(self, n=n, keep=keep, columns=columns).nlargest()",
                "def nsmallest(self, n, columns, keep=\"first\"):\n    \"\"\"\n    Return the first `n` rows ordered by `columns` in ascending order.\n\n    Return the first `n` rows with the smallest values in `columns`, in\n    ascending order. The columns that are not specified are returned as\n    well, but not used for ordering.\n\n    This method is equivalent to\n    ``df.sort_values(columns, ascending=True).head(n)``, but more\n    performant.\n\n    Parameters\n    ----------\n    n : int\n        Number of items to retrieve.\n    columns : list or str\n        Column name or names to order by.\n    keep : {'first', 'last', 'all'}, default 'first'\n        Where there are duplicate values:\n\n        - ``first`` : take the first occurrence.\n        - ``last`` : take the last occurrence.\n        - ``all`` : do not drop any duplicates, even it means\n          selecting more than `n` items.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.nlargest : Return the first `n` rows ordered by `columns` in\n        descending order.\n    DataFrame.sort_values : Sort DataFrame by the values.\n    DataFrame.head : Return the first `n` rows without re-ordering.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'population': [59000000, 65000000, 434000,\n    ...                                   434000, 434000, 337000, 11300,\n    ...                                   11300, 11300],\n    ...                    'GDP': [1937894, 2583560 , 12011, 4520, 12128,\n    ...                            17036, 182, 38, 311],\n    ...                    'alpha-2': [\"IT\", \"FR\", \"MT\", \"MV\", \"BN\",\n    ...                                \"IS\", \"NR\", \"TV\", \"AI\"]},\n    ...                   index=[\"Italy\", \"France\", \"Malta\",\n    ...                          \"Maldives\", \"Brunei\", \"Iceland\",\n    ...                          \"Nauru\", \"Tuvalu\", \"Anguilla\"])\n    >>> df\n              population      GDP alpha-2\n    Italy       59000000  1937894      IT\n    France      65000000  2583560      FR\n    Malta         434000    12011      MT\n    Maldives      434000     4520      MV\n    Brunei        434000    12128      BN\n    Iceland       337000    17036      IS\n    Nauru          11300      182      NR\n    Tuvalu         11300       38      TV\n    Anguilla       11300      311      AI\n\n    In the following example, we will use ``nsmallest`` to select the\n    three rows having the smallest values in column \"a\".\n\n    >>> df.nsmallest(3, 'population')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    When using ``keep='last'``, ties are resolved in reverse order:\n\n    >>> df.nsmallest(3, 'population', keep='last')\n              population  GDP alpha-2\n    Anguilla       11300  311      AI\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n\n    When using ``keep='all'``, all duplicate items are maintained:\n\n    >>> df.nsmallest(3, 'population', keep='all')\n              population  GDP alpha-2\n    Nauru          11300  182      NR\n    Tuvalu         11300   38      TV\n    Anguilla       11300  311      AI\n\n    To order by the largest values in column \"a\" and then \"c\", we can\n    specify multiple columns like in the next example.\n\n    >>> df.nsmallest(3, ['population', 'GDP'])\n              population  GDP alpha-2\n    Tuvalu         11300   38      TV\n    Nauru          11300  182      NR\n    Anguilla       11300  311      AI\n    \"\"\"\n    return algorithms.SelectNFrame(\n        self, n=n, keep=keep, columns=columns\n    ).nsmallest()",
                "def swaplevel(self, i=-2, j=-1, axis=0):\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis.\n\n    Parameters\n    ----------\n    i, j : int or str\n        Levels of the indices to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    result = self.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        result.index = result.index.swaplevel(i, j)\n    else:\n        result.columns = result.columns.swaplevel(i, j)\n    return result",
                "def reorder_levels(self, order, axis=0):\n    \"\"\"\n    Rearrange index levels using input order. May not drop or duplicate levels.\n\n    Parameters\n    ----------\n    order : list of int or list of str\n        List representing new level order. Reference level by number\n        (position) or by key (label).\n    axis : int\n        Where to reorder levels.\n\n    Returns\n    -------\n    type of caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if not isinstance(self._get_axis(axis), ABCMultiIndex):  # pragma: no cover\n        raise TypeError(\"Can only reorder levels on a hierarchical axis.\")\n\n    result = self.copy()\n\n    if axis == 0:\n        result.index = result.index.reorder_levels(order)\n    else:\n        result.columns = result.columns.reorder_levels(order)\n    return result",
                "def _combine_frame(self, other, func, fill_value=None, level=None):\n    this, other = self.align(other, join=\"outer\", level=level, copy=False)\n\n    if fill_value is None:\n        # since _arith_op may be called in a loop, avoid function call\n        #  overhead if possible by doing this check once\n        _arith_op = func\n\n    else:\n\n        def _arith_op(left, right):\n            # for the mixed_type case where we iterate over columns,\n            # _arith_op(left, right) is equivalent to\n            # left._binop(right, func, fill_value=fill_value)\n            left, right = ops.fill_binop(left, right, fill_value)\n            return func(left, right)\n\n    if ops.should_series_dispatch(this, other, func):\n        # iterate over columns\n        new_data = ops.dispatch_to_series(this, other, _arith_op)\n    else:\n        with np.errstate(all=\"ignore\"):\n            res_values = _arith_op(this.values, other.values)\n        new_data = dispatch_fill_zeros(func, this.values, other.values, res_values)\n    return this._construct_result(new_data)",
                "def _combine_match_index(self, other, func):\n    # at this point we have `self.index.equals(other.index)`\n\n    if ops.should_series_dispatch(self, other, func):\n        # operate column-wise; avoid costly object-casting in `.values`\n        new_data = ops.dispatch_to_series(self, other, func)\n    else:\n        # fastpath --> operate directly on values\n        with np.errstate(all=\"ignore\"):\n            new_data = func(self.values.T, other.values).T\n    return new_data",
                "def _construct_result(self, result) -> \"DataFrame\":\n    \"\"\"\n    Wrap the result of an arithmetic, comparison, or logical operation.\n\n    Parameters\n    ----------\n    result : DataFrame\n\n    Returns\n    -------\n    DataFrame\n    \"\"\"\n    out = self._constructor(result, index=self.index, copy=False)\n    # Pin columns instead of passing to constructor for compat with\n    #  non-unique columns case\n    out.columns = self.columns\n    return out",
                "def combine(self, other, func, fill_value=None, overwrite=True):\n    \"\"\"\n    Perform column-wise combine with another DataFrame.\n\n    Combines a DataFrame with `other` DataFrame using `func`\n    to element-wise combine columns. The row and column indexes of the\n    resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        The DataFrame to merge column-wise.\n    func : function\n        Function that takes two series as inputs and return a Series or a\n        scalar. Used to merge the two dataframes column by columns.\n    fill_value : scalar value, default None\n        The value to fill NaNs with prior to passing any column to the\n        merge func.\n    overwrite : bool, default True\n        If True, columns in `self` that do not exist in `other` will be\n        overwritten with NaNs.\n\n    Returns\n    -------\n    DataFrame\n        Combination of the provided DataFrames.\n\n    See Also\n    --------\n    DataFrame.combine_first : Combine two DataFrame objects and default to\n        non-null values in frame calling the method.\n\n    Examples\n    --------\n    Combine using a simple function that chooses the smaller column.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> take_smaller = lambda s1, s2: s1 if s1.sum() < s2.sum() else s2\n    >>> df1.combine(df2, take_smaller)\n       A  B\n    0  0  3\n    1  0  3\n\n    Example using a true element-wise combine function.\n\n    >>> df1 = pd.DataFrame({'A': [5, 0], 'B': [2, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, np.minimum)\n       A  B\n    0  1  2\n    1  0  3\n\n    Using `fill_value` fills Nones prior to passing the column to the\n    merge function.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n       A    B\n    0  0 -5.0\n    1  0  4.0\n\n    However, if the same element in both dataframes is None, that None\n    is preserved\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [None, 3]})\n    >>> df1.combine(df2, take_smaller, fill_value=-5)\n        A    B\n    0  0 -5.0\n    1  0  3.0\n\n    Example that demonstrates the use of `overwrite` and behavior when\n    the axis differ between the dataframes.\n\n    >>> df1 = pd.DataFrame({'A': [0, 0], 'B': [4, 4]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [-10, 1], }, index=[1, 2])\n    >>> df1.combine(df2, take_smaller)\n         A    B     C\n    0  NaN  NaN   NaN\n    1  NaN  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    >>> df1.combine(df2, take_smaller, overwrite=False)\n         A    B     C\n    0  0.0  NaN   NaN\n    1  0.0  3.0 -10.0\n    2  NaN  3.0   1.0\n\n    Demonstrating the preference of the passed in dataframe.\n\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1], }, index=[1, 2])\n    >>> df2.combine(df1, take_smaller)\n       A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 NaN\n    2  NaN  3.0 NaN\n\n    >>> df2.combine(df1, take_smaller, overwrite=False)\n         A    B   C\n    0  0.0  NaN NaN\n    1  0.0  3.0 1.0\n    2  NaN  3.0 1.0\n    \"\"\"\n    other_idxlen = len(other.index)  # save for compare\n\n    this, other = self.align(other, copy=False)\n    new_index = this.index\n\n    if other.empty and len(new_index) == len(self.index):\n        return self.copy()\n\n    if self.empty and len(other) == other_idxlen:\n        return other.copy()\n\n    # sorts if possible\n    new_columns = this.columns.union(other.columns)\n    do_fill = fill_value is not None\n    result = {}\n    for col in new_columns:\n        series = this[col]\n        otherSeries = other[col]\n\n        this_dtype = series.dtype\n        other_dtype = otherSeries.dtype\n\n        this_mask = isna(series)\n        other_mask = isna(otherSeries)\n\n        # don't overwrite columns unnecessarily\n        # DO propagate if this column is not in the intersection\n        if not overwrite and other_mask.all():\n            result[col] = this[col].copy()\n            continue\n\n        if do_fill:\n            series = series.copy()\n            otherSeries = otherSeries.copy()\n            series[this_mask] = fill_value\n            otherSeries[other_mask] = fill_value\n\n        if col not in self.columns:\n            # If self DataFrame does not have col in other DataFrame,\n            # try to promote series, which is all NaN, as other_dtype.\n            new_dtype = other_dtype\n            try:\n                series = series.astype(new_dtype, copy=False)\n            except ValueError:\n                # e.g. new_dtype is integer types\n                pass\n        else:\n            # if we have different dtypes, possibly promote\n            new_dtype = find_common_type([this_dtype, other_dtype])\n            if not is_dtype_equal(this_dtype, new_dtype):\n                series = series.astype(new_dtype)\n            if not is_dtype_equal(other_dtype, new_dtype):\n                otherSeries = otherSeries.astype(new_dtype)\n\n        arr = func(series, otherSeries)\n        arr = maybe_downcast_to_dtype(arr, this_dtype)\n\n        result[col] = arr\n\n    # convert_objects just in case\n    return self._constructor(result, index=new_index, columns=new_columns)",
                "def combine_first(self, other):\n    \"\"\"\n    Update null elements with value in the same location in `other`.\n\n    Combine two DataFrame objects by filling null values in one DataFrame\n    with non-null values from other DataFrame. The row and column indexes\n    of the resulting DataFrame will be the union of the two.\n\n    Parameters\n    ----------\n    other : DataFrame\n        Provided DataFrame to use to fill null values.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    DataFrame.combine : Perform series-wise operation on two DataFrames\n        using a given function.\n\n    Examples\n    --------\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [None, 4]})\n    >>> df2 = pd.DataFrame({'A': [1, 1], 'B': [3, 3]})\n    >>> df1.combine_first(df2)\n         A    B\n    0  1.0  3.0\n    1  0.0  4.0\n\n    Null values still persist if the location of that null value\n    does not exist in `other`\n\n    >>> df1 = pd.DataFrame({'A': [None, 0], 'B': [4, None]})\n    >>> df2 = pd.DataFrame({'B': [3, 3], 'C': [1, 1]}, index=[1, 2])\n    >>> df1.combine_first(df2)\n         A    B    C\n    0  NaN  4.0  NaN\n    1  0.0  3.0  1.0\n    2  NaN  3.0  1.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    def extract_values(arr):\n        # Does two things:\n        # 1. maybe gets the values from the Series / Index\n        # 2. convert datelike to i8\n        if isinstance(arr, (ABCIndexClass, ABCSeries)):\n            arr = arr._values\n\n        if needs_i8_conversion(arr):\n            if is_extension_array_dtype(arr.dtype):\n                arr = arr.asi8\n            else:\n                arr = arr.view(\"i8\")\n        return arr\n\n    def combiner(x, y):\n        mask = isna(x)\n        if isinstance(mask, (ABCIndexClass, ABCSeries)):\n            mask = mask._values\n\n        x_values = extract_values(x)\n        y_values = extract_values(y)\n\n        # If the column y in other DataFrame is not in first DataFrame,\n        # just return y_values.\n        if y.name not in self.columns:\n            return y_values\n\n        return expressions.where(mask, y_values, x_values)\n\n    return self.combine(other, combiner, overwrite=False)",
                "def update(\n    self, other, join=\"left\", overwrite=True, filter_func=None, errors=\"ignore\"\n):\n    \"\"\"\n    Modify in place using non-NA values from another DataFrame.\n\n    Aligns on indices. There is no return value.\n\n    Parameters\n    ----------\n    other : DataFrame, or object coercible into a DataFrame\n        Should have at least one matching index/column label\n        with the original DataFrame. If a Series is passed,\n        its name attribute must be set, and that will be\n        used as the column name to align with the original DataFrame.\n    join : {'left'}, default 'left'\n        Only left join is implemented, keeping the index and columns of the\n        original object.\n    overwrite : bool, default True\n        How to handle non-NA values for overlapping keys:\n\n        * True: overwrite original DataFrame's values\n          with values from `other`.\n        * False: only update values that are NA in\n          the original DataFrame.\n\n    filter_func : callable(1d-array) -> bool 1d-array, optional\n        Can choose to replace values other than NA. Return True for values\n        that should be updated.\n    errors : {'raise', 'ignore'}, default 'ignore'\n        If 'raise', will raise a ValueError if the DataFrame and `other`\n        both contain non-NA data in the same place.\n\n        .. versionchanged:: 0.24.0\n           Changed from `raise_conflict=False|True`\n           to `errors='ignore'|'raise'`.\n\n    Returns\n    -------\n    None : method directly changes calling object\n\n    Raises\n    ------\n    ValueError\n        * When `errors='raise'` and there's overlapping non-NA data.\n        * When `errors` is not either `'ignore'` or `'raise'`\n    NotImplementedError\n        * If `join != 'left'`\n\n    See Also\n    --------\n    dict.update : Similar method for dictionaries.\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, 5, 6],\n    ...                        'C': [7, 8, 9]})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    The DataFrame's length does not increase as a result of the update,\n    only values at matching index/column labels are updated.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e', 'f', 'g', 'h', 'i']})\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  d\n    1  b  e\n    2  c  f\n\n    For Series, it's name attribute must be set.\n\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_column = pd.Series(['d', 'e'], name='B', index=[0, 2])\n    >>> df.update(new_column)\n    >>> df\n       A  B\n    0  a  d\n    1  b  y\n    2  c  e\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c'],\n    ...                    'B': ['x', 'y', 'z']})\n    >>> new_df = pd.DataFrame({'B': ['d', 'e']}, index=[1, 2])\n    >>> df.update(new_df)\n    >>> df\n       A  B\n    0  a  x\n    1  b  d\n    2  c  e\n\n    If `other` contains NaNs the corresponding values are not updated\n    in the original dataframe.\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3],\n    ...                    'B': [400, 500, 600]})\n    >>> new_df = pd.DataFrame({'B': [4, np.nan, 6]})\n    >>> df.update(new_df)\n    >>> df\n       A      B\n    0  1    4.0\n    1  2  500.0\n    2  3    6.0\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    # TODO: Support other joins\n    if join != \"left\":  # pragma: no cover\n        raise NotImplementedError(\"Only left join is supported\")\n    if errors not in [\"ignore\", \"raise\"]:\n        raise ValueError(\"The parameter errors must be either 'ignore' or 'raise'\")\n\n    if not isinstance(other, DataFrame):\n        other = DataFrame(other)\n\n    other = other.reindex_like(self)\n\n    for col in self.columns:\n        this = self[col]._values\n        that = other[col]._values\n        if filter_func is not None:\n            with np.errstate(all=\"ignore\"):\n                mask = ~filter_func(this) | isna(that)\n        else:\n            if errors == \"raise\":\n                mask_this = notna(that)\n                mask_that = notna(this)\n                if any(mask_this & mask_that):\n                    raise ValueError(\"Data overlaps.\")\n\n            if overwrite:\n                mask = isna(that)\n            else:\n                mask = notna(this)\n\n        # don't overwrite columns unnecessarily\n        if mask.all():\n            continue\n\n        self[col] = expressions.where(mask, this, that)",
                "@Substitution(\"\")\n@Appender(_shared_docs[\"pivot\"])\ndef pivot(self, index=None, columns=None, values=None):\n    from pandas.core.reshape.pivot import pivot\n\n    return pivot(self, index=index, columns=columns, values=values)",
                "@Substitution(\"\")\n@Appender(_shared_docs[\"pivot_table\"])\ndef pivot_table(\n    self,\n    values=None,\n    index=None,\n    columns=None,\n    aggfunc=\"mean\",\n    fill_value=None,\n    margins=False,\n    dropna=True,\n    margins_name=\"All\",\n    observed=False,\n):\n    from pandas.core.reshape.pivot import pivot_table\n\n    return pivot_table(\n        self,\n        values=values,\n        index=index,\n        columns=columns,\n        aggfunc=aggfunc,\n        fill_value=fill_value,\n        margins=margins,\n        dropna=dropna,\n        margins_name=margins_name,\n        observed=observed,\n    )",
                "def stack(self, level=-1, dropna=True):\n    \"\"\"\n    Stack the prescribed level(s) from columns to index.\n\n    Return a reshaped DataFrame or Series having a multi-level\n    index with one or more new inner-most levels compared to the current\n    DataFrame. The new inner-most levels are created by pivoting the\n    columns of the current dataframe:\n\n      - if the columns have a single level, the output is a Series;\n      - if the columns have multiple levels, the new index\n        level(s) is (are) taken from the prescribed level(s) and\n        the output is a DataFrame.\n\n    The new index levels are sorted.\n\n    Parameters\n    ----------\n    level : int, str, list, default -1\n        Level(s) to stack from the column axis onto the index\n        axis, defined as one index or label, or a list of indices\n        or labels.\n    dropna : bool, default True\n        Whether to drop rows in the resulting Frame/Series with\n        missing values. Stacking a column level onto the index\n        axis can create combinations of index and column values\n        that are missing from the original dataframe. See Examples\n        section.\n\n    Returns\n    -------\n    DataFrame or Series\n        Stacked dataframe or series.\n\n    See Also\n    --------\n    DataFrame.unstack : Unstack prescribed level(s) from index axis\n         onto column axis.\n    DataFrame.pivot : Reshape dataframe from long format to wide\n         format.\n    DataFrame.pivot_table : Create a spreadsheet-style pivot table\n         as a DataFrame.\n\n    Notes\n    -----\n    The function is named by analogy with a collection of books\n    being reorganized from being side by side on a horizontal\n    position (the columns of the dataframe) to being stacked\n    vertically on top of each other (in the index of the\n    dataframe).\n\n    Examples\n    --------\n    **Single level columns**\n\n    >>> df_single_level_cols = pd.DataFrame([[0, 1], [2, 3]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=['weight', 'height'])\n\n    Stacking a dataframe with a single level column axis returns a Series:\n\n    >>> df_single_level_cols\n         weight height\n    cat       0      1\n    dog       2      3\n    >>> df_single_level_cols.stack()\n    cat  weight    0\n         height    1\n    dog  weight    2\n         height    3\n    dtype: int64\n\n    **Multi level columns: simple case**\n\n    >>> multicol1 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('weight', 'pounds')])\n    >>> df_multi_level_cols1 = pd.DataFrame([[1, 2], [2, 4]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol1)\n\n    Stacking a dataframe with a multi-level column axis:\n\n    >>> df_multi_level_cols1\n         weight\n             kg    pounds\n    cat       1        2\n    dog       2        4\n    >>> df_multi_level_cols1.stack()\n                weight\n    cat kg           1\n        pounds       2\n    dog kg           2\n        pounds       4\n\n    **Missing values**\n\n    >>> multicol2 = pd.MultiIndex.from_tuples([('weight', 'kg'),\n    ...                                        ('height', 'm')])\n    >>> df_multi_level_cols2 = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    It is common to have missing values when stacking a dataframe\n    with multi-level columns, as the stacked dataframe typically\n    has more values than the original dataframe. Missing values\n    are filled with NaNs:\n\n    >>> df_multi_level_cols2\n        weight height\n            kg      m\n    cat    1.0    2.0\n    dog    3.0    4.0\n    >>> df_multi_level_cols2.stack()\n            height  weight\n    cat kg     NaN     1.0\n        m      2.0     NaN\n    dog kg     NaN     3.0\n        m      4.0     NaN\n\n    **Prescribing the level(s) to be stacked**\n\n    The first parameter controls which level or levels are stacked:\n\n    >>> df_multi_level_cols2.stack(0)\n                 kg    m\n    cat height  NaN  2.0\n        weight  1.0  NaN\n    dog height  NaN  4.0\n        weight  3.0  NaN\n    >>> df_multi_level_cols2.stack([0, 1])\n    cat  height  m     2.0\n         weight  kg    1.0\n    dog  height  m     4.0\n         weight  kg    3.0\n    dtype: float64\n\n    **Dropping missing values**\n\n    >>> df_multi_level_cols3 = pd.DataFrame([[None, 1.0], [2.0, 3.0]],\n    ...                                     index=['cat', 'dog'],\n    ...                                     columns=multicol2)\n\n    Note that rows where all values are missing are dropped by\n    default but this behaviour can be controlled via the dropna\n    keyword parameter:\n\n    >>> df_multi_level_cols3\n        weight height\n            kg      m\n    cat    NaN    1.0\n    dog    2.0    3.0\n    >>> df_multi_level_cols3.stack(dropna=False)\n            height  weight\n    cat kg     NaN     NaN\n        m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    >>> df_multi_level_cols3.stack(dropna=True)\n            height  weight\n    cat m      1.0     NaN\n    dog kg     NaN     2.0\n        m      3.0     NaN\n    \"\"\"\n    from pandas.core.reshape.reshape import stack, stack_multiple\n\n    if isinstance(level, (tuple, list)):\n        return stack_multiple(self, level, dropna=dropna)\n    else:\n        return stack(self, level, dropna=dropna)",
                "def explode(self, column: Union[str, Tuple]) -> \"DataFrame\":\n    \"\"\"\n    Transform each element of a list-like to a row, replicating index values.\n\n    .. versionadded:: 0.25.0\n\n    Parameters\n    ----------\n    column : str or tuple\n        Column to explode.\n\n    Returns\n    -------\n    DataFrame\n        Exploded lists to rows of the subset columns;\n        index will be duplicated for these rows.\n\n    Raises\n    ------\n    ValueError :\n        if columns of the frame are not unique.\n\n    See Also\n    --------\n    DataFrame.unstack : Pivot a level of the (necessarily hierarchical)\n        index labels.\n    DataFrame.melt : Unpivot a DataFrame from wide format to long format.\n    Series.explode : Explode a DataFrame from list-like columns to long format.\n\n    Notes\n    -----\n    This routine will explode list-likes including lists, tuples,\n    Series, and np.ndarray. The result dtype of the subset rows will\n    be object. Scalars will be returned unchanged. Empty list-likes will\n    result in a np.nan for that row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [[1, 2, 3], 'foo', [], [3, 4]], 'B': 1})\n    >>> df\n               A  B\n    0  [1, 2, 3]  1\n    1        foo  1\n    2         []  1\n    3     [3, 4]  1\n\n    >>> df.explode('A')\n         A  B\n    0    1  1\n    0    2  1\n    0    3  1\n    1  foo  1\n    2  NaN  1\n    3    3  1\n    3    4  1\n    \"\"\"\n\n    if not (is_scalar(column) or isinstance(column, tuple)):\n        raise ValueError(\"column must be a scalar\")\n    if not self.columns.is_unique:\n        raise ValueError(\"columns must be unique\")\n\n    df = self.reset_index(drop=True)\n    # TODO: use overload to refine return type of reset_index\n    assert df is not None  # needed for mypy\n    result = df[column].explode()\n    result = df.drop([column], axis=1).join(result)\n    result.index = self.index.take(result.index)\n    result = result.reindex(columns=self.columns, copy=False)\n\n    return result",
                "def unstack(self, level=-1, fill_value=None):\n    \"\"\"\n    Pivot a level of the (necessarily hierarchical) index labels.\n\n    Returns a DataFrame having a new level of column labels whose inner-most level\n    consists of the pivoted index labels.\n\n    If the index is not a MultiIndex, the output will be a Series\n    (the analogue of stack when the columns are not a MultiIndex).\n\n    The level involved will automatically get sorted.\n\n    Parameters\n    ----------\n    level : int, str, or list of these, default -1 (last level)\n        Level(s) of index to unstack, can pass level name.\n    fill_value : int, str or dict\n        Replace NaN with this value if the unstack produces missing values.\n\n    Returns\n    -------\n    Series or DataFrame\n\n    See Also\n    --------\n    DataFrame.pivot : Pivot a table based on column values.\n    DataFrame.stack : Pivot a level of the column labels (inverse operation\n        from `unstack`).\n\n    Examples\n    --------\n    >>> index = pd.MultiIndex.from_tuples([('one', 'a'), ('one', 'b'),\n    ...                                    ('two', 'a'), ('two', 'b')])\n    >>> s = pd.Series(np.arange(1.0, 5.0), index=index)\n    >>> s\n    one  a   1.0\n         b   2.0\n    two  a   3.0\n         b   4.0\n    dtype: float64\n\n    >>> s.unstack(level=-1)\n         a   b\n    one  1.0  2.0\n    two  3.0  4.0\n\n    >>> s.unstack(level=0)\n       one  two\n    a  1.0   3.0\n    b  2.0   4.0\n\n    >>> df = s.unstack(level=0)\n    >>> df.unstack()\n    one  a  1.0\n         b  2.0\n    two  a  3.0\n         b  4.0\n    dtype: float64\n    \"\"\"\n    from pandas.core.reshape.reshape import unstack\n\n    return unstack(self, level, fill_value)",
                "@Appender(\n    _shared_docs[\"melt\"]\n    % dict(\n        caller=\"df.melt(\", versionadded=\".. versionadded:: 0.20.0\\n\", other=\"melt\"\n    )\n)\ndef melt(\n    self,\n    id_vars=None,\n    value_vars=None,\n    var_name=None,\n    value_name=\"value\",\n    col_level=None,\n):\n    from pandas.core.reshape.melt import melt\n\n    return melt(\n        self,\n        id_vars=id_vars,\n        value_vars=value_vars,\n        var_name=var_name,\n        value_name=value_name,\n        col_level=col_level,\n    )",
                "def diff(self, periods=1, axis=0):\n    \"\"\"\n    First discrete difference of element.\n\n    Calculates the difference of a DataFrame element compared with another\n    element in the DataFrame (default is the element in the same column\n    of the previous row).\n\n    Parameters\n    ----------\n    periods : int, default 1\n        Periods to shift for calculating difference, accepts negative\n        values.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Take difference over rows (0) or columns (1).\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    Series.diff: First discrete difference for a Series.\n    DataFrame.pct_change: Percent change over given number of periods.\n    DataFrame.shift: Shift index by desired number of periods with an\n        optional time freq.\n\n    Examples\n    --------\n    Difference with previous row\n\n    >>> df = pd.DataFrame({'a': [1, 2, 3, 4, 5, 6],\n    ...                    'b': [1, 1, 2, 3, 5, 8],\n    ...                    'c': [1, 4, 9, 16, 25, 36]})\n    >>> df\n       a  b   c\n    0  1  1   1\n    1  2  1   4\n    2  3  2   9\n    3  4  3  16\n    4  5  5  25\n    5  6  8  36\n\n    >>> df.diff()\n         a    b     c\n    0  NaN  NaN   NaN\n    1  1.0  0.0   3.0\n    2  1.0  1.0   5.0\n    3  1.0  1.0   7.0\n    4  1.0  2.0   9.0\n    5  1.0  3.0  11.0\n\n    Difference with previous column\n\n    >>> df.diff(axis=1)\n        a    b     c\n    0 NaN  0.0   0.0\n    1 NaN -1.0   3.0\n    2 NaN -1.0   7.0\n    3 NaN -1.0  13.0\n    4 NaN  0.0  20.0\n    5 NaN  2.0  28.0\n\n    Difference with 3rd previous row\n\n    >>> df.diff(periods=3)\n         a    b     c\n    0  NaN  NaN   NaN\n    1  NaN  NaN   NaN\n    2  NaN  NaN   NaN\n    3  3.0  2.0  15.0\n    4  3.0  4.0  21.0\n    5  3.0  6.0  27.0\n\n    Difference with following row\n\n    >>> df.diff(periods=-1)\n         a    b     c\n    0 -1.0  0.0  -3.0\n    1 -1.0 -1.0  -5.0\n    2 -1.0 -1.0  -7.0\n    3 -1.0 -2.0  -9.0\n    4 -1.0 -3.0 -11.0\n    5  NaN  NaN   NaN\n    \"\"\"\n    bm_axis = self._get_block_manager_axis(axis)\n    new_data = self._data.diff(n=periods, axis=bm_axis)\n    return self._constructor(new_data)",
                "def _gotitem(\n    self,\n    key: Union[str, List[str]],\n    ndim: int,\n    subset: Optional[Union[Series, ABCDataFrame]] = None,\n) -> Union[Series, ABCDataFrame]:\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    if subset is None:\n        subset = self\n    elif subset.ndim == 1:  # is Series\n        return subset\n\n    # TODO: _shallow_copy(subset)?\n    return subset[key]",
                "@Substitution(\n    see_also=_agg_summary_and_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\\n.. versionadded:: 0.20.0\\n\",\n    **_shared_doc_kwargs,\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n\n    result = None\n    try:\n        result, how = self._aggregate(func, axis=axis, *args, **kwargs)\n    except TypeError:\n        pass\n    if result is None:\n        return self.apply(func, axis=axis, args=args, **kwargs)\n    return result",
                "def _aggregate(self, arg, axis=0, *args, **kwargs):\n    if axis == 1:\n        # NDFrame.aggregate returns a tuple, and we need to transpose\n        # only result\n        result, how = self.T._aggregate(arg, *args, **kwargs)\n        result = result.T if result is not None else result\n        return result, how\n    return super()._aggregate(arg, *args, **kwargs)",
                "@Appender(_shared_docs[\"transform\"] % _shared_doc_kwargs)\ndef transform(self, func, axis=0, *args, **kwargs):\n    axis = self._get_axis_number(axis)\n    if axis == 1:\n        return self.T.transform(func, *args, **kwargs).T\n    return super().transform(func, *args, **kwargs)",
                "def apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds):\n    \"\"\"\n    Apply a function along an axis of the DataFrame.\n\n    Objects passed to the function are Series objects whose index is\n    either the DataFrame's index (``axis=0``) or the DataFrame's columns\n    (``axis=1``). By default (``result_type=None``), the final return type\n    is inferred from the return type of the applied function. Otherwise,\n    it depends on the `result_type` argument.\n\n    Parameters\n    ----------\n    func : function\n        Function to apply to each column or row.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis along which the function is applied:\n\n        * 0 or 'index': apply function to each column.\n        * 1 or 'columns': apply function to each row.\n\n    raw : bool, default False\n        Determines if row or column is passed as a Series or ndarray object:\n\n        * ``False`` : passes each row or column as a Series to the\n          function.\n        * ``True`` : the passed function will receive ndarray objects\n          instead.\n          If you are just applying a NumPy reduction function this will\n          achieve much better performance.\n\n    result_type : {'expand', 'reduce', 'broadcast', None}, default None\n        These only act when ``axis=1`` (columns):\n\n        * 'expand' : list-like results will be turned into columns.\n        * 'reduce' : returns a Series if possible rather than expanding\n          list-like results. This is the opposite of 'expand'.\n        * 'broadcast' : results will be broadcast to the original shape\n          of the DataFrame, the original index and columns will be\n          retained.\n\n        The default behaviour (None) depends on the return value of the\n        applied function: list-like results will be returned as a Series\n        of those. However if the apply function returns a Series these\n        are expanded to columns.\n\n        .. versionadded:: 0.23.0\n\n    args : tuple\n        Positional arguments to pass to `func` in addition to the\n        array/series.\n    **kwds\n        Additional keyword arguments to pass as keywords arguments to\n        `func`.\n\n    Returns\n    -------\n    Series or DataFrame\n        Result of applying ``func`` along the given axis of the\n        DataFrame.\n\n    See Also\n    --------\n    DataFrame.applymap: For elementwise operations.\n    DataFrame.aggregate: Only perform aggregating type operations.\n    DataFrame.transform: Only perform transforming type operations.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[4, 9]] * 3, columns=['A', 'B'])\n    >>> df\n       A  B\n    0  4  9\n    1  4  9\n    2  4  9\n\n    Using a numpy universal function (in this case the same as\n    ``np.sqrt(df)``):\n\n    >>> df.apply(np.sqrt)\n         A    B\n    0  2.0  3.0\n    1  2.0  3.0\n    2  2.0  3.0\n\n    Using a reducing function on either axis\n\n    >>> df.apply(np.sum, axis=0)\n    A    12\n    B    27\n    dtype: int64\n\n    >>> df.apply(np.sum, axis=1)\n    0    13\n    1    13\n    2    13\n    dtype: int64\n\n    Returning a list-like will result in a Series\n\n    >>> df.apply(lambda x: [1, 2], axis=1)\n    0    [1, 2]\n    1    [1, 2]\n    2    [1, 2]\n    dtype: object\n\n    Passing result_type='expand' will expand list-like results\n    to columns of a Dataframe\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='expand')\n       0  1\n    0  1  2\n    1  1  2\n    2  1  2\n\n    Returning a Series inside the function is similar to passing\n    ``result_type='expand'``. The resulting column names\n    will be the Series index.\n\n    >>> df.apply(lambda x: pd.Series([1, 2], index=['foo', 'bar']), axis=1)\n       foo  bar\n    0    1    2\n    1    1    2\n    2    1    2\n\n    Passing ``result_type='broadcast'`` will ensure the same shape\n    result, whether list-like or scalar is returned by the function,\n    and broadcast it along the axis. The resulting column names will\n    be the originals.\n\n    >>> df.apply(lambda x: [1, 2], axis=1, result_type='broadcast')\n       A  B\n    0  1  2\n    1  1  2\n    2  1  2\n    \"\"\"\n    from pandas.core.apply import frame_apply\n\n    op = frame_apply(\n        self,\n        func=func,\n        axis=axis,\n        raw=raw,\n        result_type=result_type,\n        args=args,\n        kwds=kwds,\n    )\n    return op.get_result()",
                "def applymap(self, func):\n    \"\"\"\n    Apply a function to a Dataframe elementwise.\n\n    This method applies a function that accepts and returns a scalar\n    to every element of a DataFrame.\n\n    Parameters\n    ----------\n    func : callable\n        Python function, returns a single value from a single value.\n\n    Returns\n    -------\n    DataFrame\n        Transformed DataFrame.\n\n    See Also\n    --------\n    DataFrame.apply : Apply a function along input axis of DataFrame.\n\n    Notes\n    -----\n    In the current implementation applymap calls `func` twice on the\n    first column/row to decide whether it can take a fast or slow\n    code path. This can lead to unexpected behavior if `func` has\n    side-effects, as they will take effect twice for the first\n    column/row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[1, 2.12], [3.356, 4.567]])\n    >>> df\n           0      1\n    0  1.000  2.120\n    1  3.356  4.567\n\n    >>> df.applymap(lambda x: len(str(x)))\n       0  1\n    0  3  4\n    1  5  5\n\n    Note that a vectorized version of `func` often exists, which will\n    be much faster. You could square each number elementwise.\n\n    >>> df.applymap(lambda x: x**2)\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n\n    But it's better to avoid applymap in that case.\n\n    >>> df ** 2\n               0          1\n    0   1.000000   4.494400\n    1  11.262736  20.857489\n    \"\"\"\n\n    # if we have a dtype == 'M8[ns]', provide boxed values\n    def infer(x):\n        if x.empty:\n            return lib.map_infer(x, func)\n        return lib.map_infer(x.astype(object).values, func)\n\n    return self.apply(infer)",
                "def append(self, other, ignore_index=False, verify_integrity=False, sort=False):\n    \"\"\"\n    Append rows of `other` to the end of caller, returning a new object.\n\n    Columns in `other` that are not in the caller are added as new columns.\n\n    Parameters\n    ----------\n    other : DataFrame or Series/dict-like object, or list of these\n        The data to append.\n    ignore_index : bool, default False\n        If True, do not use the index labels.\n    verify_integrity : bool, default False\n        If True, raise ValueError on creating index with duplicates.\n    sort : bool, default False\n        Sort columns if the columns of `self` and `other` are not aligned.\n\n        .. versionadded:: 0.23.0\n        .. versionchanged:: 1.0.0\n\n            Changed to not sort by default.\n\n    Returns\n    -------\n    DataFrame\n\n    See Also\n    --------\n    concat : General function to concatenate DataFrame or Series objects.\n\n    Notes\n    -----\n    If a list of dict/series is passed and the keys are all contained in\n    the DataFrame's index, the order of the columns in the resulting\n    DataFrame will be unchanged.\n\n    Iteratively appending rows to a DataFrame can be more computationally\n    intensive than a single concatenate. A better solution is to append\n    those rows to a list and then concatenate the list with the original\n    DataFrame all at once.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=list('AB'))\n    >>> df\n       A  B\n    0  1  2\n    1  3  4\n    >>> df2 = pd.DataFrame([[5, 6], [7, 8]], columns=list('AB'))\n    >>> df.append(df2)\n       A  B\n    0  1  2\n    1  3  4\n    0  5  6\n    1  7  8\n\n    With `ignore_index` set to True:\n\n    >>> df.append(df2, ignore_index=True)\n       A  B\n    0  1  2\n    1  3  4\n    2  5  6\n    3  7  8\n\n    The following, while not recommended methods for generating DataFrames,\n    show two ways to generate a DataFrame from multiple data sources.\n\n    Less efficient:\n\n    >>> df = pd.DataFrame(columns=['A'])\n    >>> for i in range(5):\n    ...     df = df.append({'A': i}, ignore_index=True)\n    >>> df\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n\n    More efficient:\n\n    >>> pd.concat([pd.DataFrame([i], columns=['A']) for i in range(5)],\n    ...           ignore_index=True)\n       A\n    0  0\n    1  1\n    2  2\n    3  3\n    4  4\n    \"\"\"\n    if isinstance(other, (Series, dict)):\n        if isinstance(other, dict):\n            other = Series(other)\n        if other.name is None and not ignore_index:\n            raise TypeError(\n                \"Can only append a Series if ignore_index=True\"\n                \" or if the Series has a name\"\n            )\n\n        index = Index([other.name], name=self.index.name)\n        idx_diff = other.index.difference(self.columns)\n        try:\n            combined_columns = self.columns.append(idx_diff)\n        except TypeError:\n            combined_columns = self.columns.astype(object).append(idx_diff)\n        other = (\n            other.reindex(combined_columns, copy=False)\n            .to_frame()\n            .T.infer_objects()\n            .rename_axis(index.names, copy=False)\n        )\n        if not self.columns.equals(combined_columns):\n            self = self.reindex(columns=combined_columns)\n    elif isinstance(other, list):\n        if not other:\n            pass\n        elif not isinstance(other[0], DataFrame):\n            other = DataFrame(other)\n            if (self.columns.get_indexer(other.columns) >= 0).all():\n                other = other.reindex(columns=self.columns)\n\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, (list, tuple)):\n        to_concat = [self] + other\n    else:\n        to_concat = [self, other]\n    return concat(\n        to_concat,\n        ignore_index=ignore_index,\n        verify_integrity=verify_integrity,\n        sort=sort,\n    )",
                "def join(self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False):\n    \"\"\"\n    Join columns of another DataFrame.\n\n    Join columns with `other` DataFrame either on index or on a key\n    column. Efficiently join multiple DataFrame objects by index at once by\n    passing a list.\n\n    Parameters\n    ----------\n    other : DataFrame, Series, or list of DataFrame\n        Index should be similar to one of the columns in this one. If a\n        Series is passed, its name attribute must be set, and that will be\n        used as the column name in the resulting joined DataFrame.\n    on : str, list of str, or array-like, optional\n        Column or index level name(s) in the caller to join on the index\n        in `other`, otherwise joins index-on-index. If multiple\n        values given, the `other` DataFrame must have a MultiIndex. Can\n        pass an array as the join key if it is not already contained in\n        the calling DataFrame. Like an Excel VLOOKUP operation.\n    how : {'left', 'right', 'outer', 'inner'}, default 'left'\n        How to handle the operation of the two objects.\n\n        * left: use calling frame's index (or column if on is specified)\n        * right: use `other`'s index.\n        * outer: form union of calling frame's index (or column if on is\n          specified) with `other`'s index, and sort it.\n          lexicographically.\n        * inner: form intersection of calling frame's index (or column if\n          on is specified) with `other`'s index, preserving the order\n          of the calling's one.\n    lsuffix : str, default ''\n        Suffix to use from left frame's overlapping columns.\n    rsuffix : str, default ''\n        Suffix to use from right frame's overlapping columns.\n    sort : bool, default False\n        Order result DataFrame lexicographically by the join key. If False,\n        the order of the join key depends on the join type (how keyword).\n\n    Returns\n    -------\n    DataFrame\n        A dataframe containing columns from both the caller and `other`.\n\n    See Also\n    --------\n    DataFrame.merge : For column(s)-on-columns(s) operations.\n\n    Notes\n    -----\n    Parameters `on`, `lsuffix`, and `rsuffix` are not supported when\n    passing a list of `DataFrame` objects.\n\n    Support for specifying index levels as the `on` parameter was added\n    in version 0.23.0.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\n    ...                    'A': ['A0', 'A1', 'A2', 'A3', 'A4', 'A5']})\n\n    >>> df\n      key   A\n    0  K0  A0\n    1  K1  A1\n    2  K2  A2\n    3  K3  A3\n    4  K4  A4\n    5  K5  A5\n\n    >>> other = pd.DataFrame({'key': ['K0', 'K1', 'K2'],\n    ...                       'B': ['B0', 'B1', 'B2']})\n\n    >>> other\n      key   B\n    0  K0  B0\n    1  K1  B1\n    2  K2  B2\n\n    Join DataFrames using their indexes.\n\n    >>> df.join(other, lsuffix='_caller', rsuffix='_other')\n      key_caller   A key_other    B\n    0         K0  A0        K0   B0\n    1         K1  A1        K1   B1\n    2         K2  A2        K2   B2\n    3         K3  A3       NaN  NaN\n    4         K4  A4       NaN  NaN\n    5         K5  A5       NaN  NaN\n\n    If we want to join using the key columns, we need to set key to be\n    the index in both `df` and `other`. The joined DataFrame will have\n    key as its index.\n\n    >>> df.set_index('key').join(other.set_index('key'))\n          A    B\n    key\n    K0   A0   B0\n    K1   A1   B1\n    K2   A2   B2\n    K3   A3  NaN\n    K4   A4  NaN\n    K5   A5  NaN\n\n    Another option to join using the key columns is to use the `on`\n    parameter. DataFrame.join always uses `other`'s index but we can use\n    any column in `df`. This method preserves the original DataFrame's\n    index in the result.\n\n    >>> df.join(other.set_index('key'), on='key')\n      key   A    B\n    0  K0  A0   B0\n    1  K1  A1   B1\n    2  K2  A2   B2\n    3  K3  A3  NaN\n    4  K4  A4  NaN\n    5  K5  A5  NaN\n    \"\"\"\n    return self._join_compat(\n        other, on=on, how=how, lsuffix=lsuffix, rsuffix=rsuffix, sort=sort\n    )",
                "def _join_compat(\n    self, other, on=None, how=\"left\", lsuffix=\"\", rsuffix=\"\", sort=False\n):\n    from pandas.core.reshape.merge import merge\n    from pandas.core.reshape.concat import concat\n\n    if isinstance(other, Series):\n        if other.name is None:\n            raise ValueError(\"Other Series must have a name\")\n        other = DataFrame({other.name: other})\n\n    if isinstance(other, DataFrame):\n        return merge(\n            self,\n            other,\n            left_on=on,\n            how=how,\n            left_index=on is None,\n            right_index=True,\n            suffixes=(lsuffix, rsuffix),\n            sort=sort,\n        )\n    else:\n        if on is not None:\n            raise ValueError(\n                \"Joining multiple DataFrames only supported for joining on index\"\n            )\n\n        frames = [self] + list(other)\n\n        can_concat = all(df.index.is_unique for df in frames)\n\n        # join indexes only using concat\n        if can_concat:\n            if how == \"left\":\n                res = concat(\n                    frames, axis=1, join=\"outer\", verify_integrity=True, sort=sort\n                )\n                return res.reindex(self.index, copy=False)\n            else:\n                return concat(\n                    frames, axis=1, join=how, verify_integrity=True, sort=sort\n                )\n\n        joined = frames[0]\n\n        for frame in frames[1:]:\n            joined = merge(\n                joined, frame, how=how, left_index=True, right_index=True\n            )\n\n        return joined",
                "@Substitution(\"\")\n@Appender(_merge_doc, indents=2)\ndef merge(\n    self,\n    right,\n    how=\"inner\",\n    on=None,\n    left_on=None,\n    right_on=None,\n    left_index=False,\n    right_index=False,\n    sort=False,\n    suffixes=(\"_x\", \"_y\"),\n    copy=True,\n    indicator=False,\n    validate=None,\n):\n    from pandas.core.reshape.merge import merge\n\n    return merge(\n        self,\n        right,\n        how=how,\n        on=on,\n        left_on=left_on,\n        right_on=right_on,\n        left_index=left_index,\n        right_index=right_index,\n        sort=sort,\n        suffixes=suffixes,\n        copy=copy,\n        indicator=indicator,\n        validate=validate,\n    )",
                "def round(self, decimals=0, *args, **kwargs):\n    \"\"\"\n    Round a DataFrame to a variable number of decimal places.\n\n    Parameters\n    ----------\n    decimals : int, dict, Series\n        Number of decimal places to round each column to. If an int is\n        given, round each column to the same number of places.\n        Otherwise dict and Series round to variable numbers of places.\n        Column names should be in the keys if `decimals` is a\n        dict-like, or in the index if `decimals` is a Series. Any\n        columns not included in `decimals` will be left as is. Elements\n        of `decimals` which are not columns of the input will be\n        ignored.\n    *args\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n    **kwargs\n        Additional keywords have no effect but might be accepted for\n        compatibility with numpy.\n\n    Returns\n    -------\n    DataFrame\n        A DataFrame with the affected columns rounded to the specified\n        number of decimal places.\n\n    See Also\n    --------\n    numpy.around : Round a numpy array to the given number of decimals.\n    Series.round : Round a Series to the given number of decimals.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(.21, .32), (.01, .67), (.66, .03), (.21, .18)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df\n        dogs  cats\n    0  0.21  0.32\n    1  0.01  0.67\n    2  0.66  0.03\n    3  0.21  0.18\n\n    By providing an integer each column is rounded to the same number\n    of decimal places\n\n    >>> df.round(1)\n        dogs  cats\n    0   0.2   0.3\n    1   0.0   0.7\n    2   0.7   0.0\n    3   0.2   0.2\n\n    With a dict, the number of places for specific columns can be\n    specified with the column names as key and the number of decimal\n    places as value\n\n    >>> df.round({'dogs': 1, 'cats': 0})\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n\n    Using a Series, the number of places for specific columns can be\n    specified with the column names as index and the number of\n    decimal places as value\n\n    >>> decimals = pd.Series([0, 1], index=['cats', 'dogs'])\n    >>> df.round(decimals)\n        dogs  cats\n    0   0.2   0.0\n    1   0.0   1.0\n    2   0.7   0.0\n    3   0.2   0.0\n    \"\"\"\n    from pandas.core.reshape.concat import concat\n\n    def _dict_round(df, decimals):\n        for col, vals in df.items():\n            try:\n                yield _series_round(vals, decimals[col])\n            except KeyError:\n                yield vals\n\n    def _series_round(s, decimals):\n        if is_integer_dtype(s) or is_float_dtype(s):\n            return s.round(decimals)\n        return s\n\n    nv.validate_round(args, kwargs)\n\n    if isinstance(decimals, (dict, Series)):\n        if isinstance(decimals, Series):\n            if not decimals.index.is_unique:\n                raise ValueError(\"Index of decimals must be unique\")\n        new_cols = list(_dict_round(self, decimals))\n    elif is_integer(decimals):\n        # Dispatch to Series.round\n        new_cols = [_series_round(v, decimals) for _, v in self.items()]\n    else:\n        raise TypeError(\"decimals must be an integer, a dict-like or a Series\")\n\n    if len(new_cols) > 0:\n        return self._constructor(\n            concat(new_cols, axis=1), index=self.index, columns=self.columns\n        )\n    else:\n        return self",
                "def corr(self, method=\"pearson\", min_periods=1):\n    \"\"\"\n    Compute pairwise correlation of columns, excluding NA/null values.\n\n    Parameters\n    ----------\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float. Note that the returned matrix from corr\n            will have 1 along the diagonals and will be symmetric\n            regardless of the callable's behavior.\n\n            .. versionadded:: 0.24.0\n\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result. Currently only available for Pearson\n        and Spearman correlation.\n\n    Returns\n    -------\n    DataFrame\n        Correlation matrix.\n\n    See Also\n    --------\n    DataFrame.corrwith\n    Series.corr\n\n    Examples\n    --------\n    >>> def histogram_intersection(a, b):\n    ...     v = np.minimum(a, b).sum().round(decimals=1)\n    ...     return v\n    >>> df = pd.DataFrame([(.2, .3), (.0, .6), (.6, .0), (.2, .1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.corr(method=histogram_intersection)\n          dogs  cats\n    dogs   1.0   0.3\n    cats   0.3   1.0\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n\n    if method == \"pearson\":\n        correl = libalgos.nancorr(ensure_float64(mat), minp=min_periods)\n    elif method == \"spearman\":\n        correl = libalgos.nancorr_spearman(ensure_float64(mat), minp=min_periods)\n    elif method == \"kendall\" or callable(method):\n        if min_periods is None:\n            min_periods = 1\n        mat = ensure_float64(mat).T\n        corrf = nanops.get_corr_func(method)\n        K = len(cols)\n        correl = np.empty((K, K), dtype=float)\n        mask = np.isfinite(mat)\n        for i, ac in enumerate(mat):\n            for j, bc in enumerate(mat):\n                if i > j:\n                    continue\n\n                valid = mask[i] & mask[j]\n                if valid.sum() < min_periods:\n                    c = np.nan\n                elif i == j:\n                    c = 1.0\n                elif not valid.all():\n                    c = corrf(ac[valid], bc[valid])\n                else:\n                    c = corrf(ac, bc)\n                correl[i, j] = c\n                correl[j, i] = c\n    else:\n        raise ValueError(\n            \"method must be either 'pearson', \"\n            \"'spearman', 'kendall', or a callable, \"\n            f\"'{method}' was supplied\"\n        )\n\n    return self._constructor(correl, index=idx, columns=cols)",
                "def cov(self, min_periods=None):\n    \"\"\"\n    Compute pairwise covariance of columns, excluding NA/null values.\n\n    Compute the pairwise covariance among the series of a DataFrame.\n    The returned data frame is the `covariance matrix\n    <https://en.wikipedia.org/wiki/Covariance_matrix>`__ of the columns\n    of the DataFrame.\n\n    Both NA and null values are automatically excluded from the\n    calculation. (See the note below about bias from missing values.)\n    A threshold can be set for the minimum number of\n    observations for each value created. Comparisons with observations\n    below this threshold will be returned as ``NaN``.\n\n    This method is generally used for the analysis of time series data to\n    understand the relationship between different measures\n    across time.\n\n    Parameters\n    ----------\n    min_periods : int, optional\n        Minimum number of observations required per pair of columns\n        to have a valid result.\n\n    Returns\n    -------\n    DataFrame\n        The covariance matrix of the series of the DataFrame.\n\n    See Also\n    --------\n    Series.cov : Compute covariance with another Series.\n    core.window.EWM.cov: Exponential weighted sample covariance.\n    core.window.Expanding.cov : Expanding sample covariance.\n    core.window.Rolling.cov : Rolling sample covariance.\n\n    Notes\n    -----\n    Returns the covariance matrix of the DataFrame's time series.\n    The covariance is normalized by N-1.\n\n    For DataFrames that have Series that are missing data (assuming that\n    data is `missing at random\n    <https://en.wikipedia.org/wiki/Missing_data#Missing_at_random>`__)\n    the returned covariance matrix will be an unbiased estimate\n    of the variance and covariance between the member Series.\n\n    However, for many applications this estimate may not be acceptable\n    because the estimate covariance matrix is not guaranteed to be positive\n    semi-definite. This could lead to estimate correlations having\n    absolute values which are greater than one, and/or a non-invertible\n    covariance matrix. See `Estimation of covariance matrices\n    <http://en.wikipedia.org/w/index.php?title=Estimation_of_covariance_\n    matrices>`__ for more details.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([(1, 2), (0, 3), (2, 0), (1, 1)],\n    ...                   columns=['dogs', 'cats'])\n    >>> df.cov()\n              dogs      cats\n    dogs  0.666667 -1.000000\n    cats -1.000000  1.666667\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(1000, 5),\n    ...                   columns=['a', 'b', 'c', 'd', 'e'])\n    >>> df.cov()\n              a         b         c         d         e\n    a  0.998438 -0.020161  0.059277 -0.008943  0.014144\n    b -0.020161  1.059352 -0.008543 -0.024738  0.009826\n    c  0.059277 -0.008543  1.010670 -0.001486 -0.000271\n    d -0.008943 -0.024738 -0.001486  0.921297 -0.013692\n    e  0.014144  0.009826 -0.000271 -0.013692  0.977795\n\n    **Minimum number of periods**\n\n    This method also supports an optional ``min_periods`` keyword\n    that specifies the required minimum number of non-NA observations for\n    each column pair in order to have a valid result:\n\n    >>> np.random.seed(42)\n    >>> df = pd.DataFrame(np.random.randn(20, 3),\n    ...                   columns=['a', 'b', 'c'])\n    >>> df.loc[df.index[:5], 'a'] = np.nan\n    >>> df.loc[df.index[5:10], 'b'] = np.nan\n    >>> df.cov(min_periods=12)\n              a         b         c\n    a  0.316741       NaN -0.150812\n    b       NaN  1.248003  0.191417\n    c -0.150812  0.191417  0.895202\n    \"\"\"\n    numeric_df = self._get_numeric_data()\n    cols = numeric_df.columns\n    idx = cols.copy()\n    mat = numeric_df.values\n\n    if notna(mat).all():\n        if min_periods is not None and min_periods > len(mat):\n            baseCov = np.empty((mat.shape[1], mat.shape[1]))\n            baseCov.fill(np.nan)\n        else:\n            baseCov = np.cov(mat.T)\n        baseCov = baseCov.reshape((len(cols), len(cols)))\n    else:\n        baseCov = libalgos.nancorr(ensure_float64(mat), cov=True, minp=min_periods)\n\n    return self._constructor(baseCov, index=idx, columns=cols)",
                "def corrwith(self, other, axis=0, drop=False, method=\"pearson\"):\n    \"\"\"\n    Compute pairwise correlation.\n\n    Pairwise correlation is computed between rows or columns of\n    DataFrame with rows or columns of Series or DataFrame. DataFrames\n    are first aligned along both axes before computing the\n    correlations.\n\n    Parameters\n    ----------\n    other : DataFrame, Series\n        Object with which to compute correlations.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' to compute column-wise, 1 or 'columns' for\n        row-wise.\n    drop : bool, default False\n        Drop missing indices from result.\n    method : {'pearson', 'kendall', 'spearman'} or callable\n        Method of correlation:\n\n        * pearson : standard correlation coefficient\n        * kendall : Kendall Tau correlation coefficient\n        * spearman : Spearman rank correlation\n        * callable: callable with input two 1d ndarrays\n            and returning a float.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series\n        Pairwise correlations.\n\n    See Also\n    --------\n    DataFrame.corr\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    this = self._get_numeric_data()\n\n    if isinstance(other, Series):\n        return this.apply(lambda x: other.corr(x, method=method), axis=axis)\n\n    other = other._get_numeric_data()\n    left, right = this.align(other, join=\"inner\", copy=False)\n\n    if axis == 1:\n        left = left.T\n        right = right.T\n\n    if method == \"pearson\":\n        # mask missing values\n        left = left + right * 0\n        right = right + left * 0\n\n        # demeaned data\n        ldem = left - left.mean()\n        rdem = right - right.mean()\n\n        num = (ldem * rdem).sum()\n        dom = (left.count() - 1) * left.std() * right.std()\n\n        correl = num / dom\n\n    elif method in [\"kendall\", \"spearman\"] or callable(method):\n\n        def c(x):\n            return nanops.nancorr(x[0], x[1], method=method)\n\n        correl = Series(\n            map(c, zip(left.values.T, right.values.T)), index=left.columns\n        )\n\n    else:\n        raise ValueError(\n            f\"Invalid method {method} was passed, \"\n            \"valid methods are: 'pearson', 'kendall', \"\n            \"'spearman', or callable\"\n        )\n\n    if not drop:\n        # Find non-matching labels along the given axis\n        # and append missing correlations (GH 22375)\n        raxis = 1 if axis == 0 else 0\n        result_index = this._get_axis(raxis).union(other._get_axis(raxis))\n        idx_diff = result_index.difference(correl.index)\n\n        if len(idx_diff) > 0:\n            correl = correl.append(Series([np.nan] * len(idx_diff), index=idx_diff))\n\n    return correl",
                "def count(self, axis=0, level=None, numeric_only=False):\n    \"\"\"\n    Count non-NA cells for each column or row.\n\n    The values `None`, `NaN`, `NaT`, and optionally `numpy.inf` (depending\n    on `pandas.options.mode.use_inf_as_na`) are considered NA.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        If 0 or 'index' counts are generated for each column.\n        If 1 or 'columns' counts are generated for each **row**.\n    level : int or str, optional\n        If the axis is a `MultiIndex` (hierarchical), count along a\n        particular `level`, collapsing into a `DataFrame`.\n        A `str` specifies the level name.\n    numeric_only : bool, default False\n        Include only `float`, `int` or `boolean` data.\n\n    Returns\n    -------\n    Series or DataFrame\n        For each column/row the number of non-NA/null entries.\n        If `level` is specified returns a `DataFrame`.\n\n    See Also\n    --------\n    Series.count: Number of non-NA elements in a Series.\n    DataFrame.shape: Number of DataFrame rows and columns (including NA\n        elements).\n    DataFrame.isna: Boolean same-sized DataFrame showing places of NA\n        elements.\n\n    Examples\n    --------\n    Constructing DataFrame from a dictionary:\n\n    >>> df = pd.DataFrame({\"Person\":\n    ...                    [\"John\", \"Myla\", \"Lewis\", \"John\", \"Myla\"],\n    ...                    \"Age\": [24., np.nan, 21., 33, 26],\n    ...                    \"Single\": [False, True, True, True, False]})\n    >>> df\n       Person   Age  Single\n    0    John  24.0   False\n    1    Myla   NaN    True\n    2   Lewis  21.0    True\n    3    John  33.0    True\n    4    Myla  26.0   False\n\n    Notice the uncounted NA values:\n\n    >>> df.count()\n    Person    5\n    Age       4\n    Single    5\n    dtype: int64\n\n    Counts for each **row**:\n\n    >>> df.count(axis='columns')\n    0    3\n    1    2\n    2    3\n    3    3\n    4    3\n    dtype: int64\n\n    Counts for one level of a `MultiIndex`:\n\n    >>> df.set_index([\"Person\", \"Single\"]).count(level=\"Person\")\n            Age\n    Person\n    John      2\n    Lewis     1\n    Myla      1\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if level is not None:\n        return self._count_level(level, axis=axis, numeric_only=numeric_only)\n\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n\n    # GH #423\n    if len(frame._get_axis(axis)) == 0:\n        result = Series(0, index=frame._get_agg_axis(axis))\n    else:\n        if frame._is_mixed_type or frame._data.any_extension_types:\n            # the or any_extension_types is really only hit for single-\n            # column frames with an extension array\n            result = notna(frame).sum(axis=axis)\n        else:\n            # GH13407\n            series_counts = notna(frame).sum(axis=axis)\n            counts = series_counts.values\n            result = Series(counts, index=frame._get_agg_axis(axis))\n\n    return result.astype(\"int64\")",
                "def _count_level(self, level, axis=0, numeric_only=False):\n    if numeric_only:\n        frame = self._get_numeric_data()\n    else:\n        frame = self\n\n    count_axis = frame._get_axis(axis)\n    agg_axis = frame._get_agg_axis(axis)\n\n    if not isinstance(count_axis, ABCMultiIndex):\n        raise TypeError(\n            f\"Can only count levels on hierarchical {self._get_axis_name(axis)}.\"\n        )\n\n    if frame._is_mixed_type:\n        # Since we have mixed types, calling notna(frame.values) might\n        # upcast everything to object\n        mask = notna(frame).values\n    else:\n        # But use the speedup when we have homogeneous dtypes\n        mask = notna(frame.values)\n\n    if axis == 1:\n        # We're transposing the mask rather than frame to avoid potential\n        # upcasts to object, which induces a ~20x slowdown\n        mask = mask.T\n\n    if isinstance(level, str):\n        level = count_axis._get_level_number(level)\n\n    level_name = count_axis._names[level]\n    level_index = count_axis.levels[level]._shallow_copy(name=level_name)\n    level_codes = ensure_int64(count_axis.codes[level])\n    counts = lib.count_level_2d(mask, level_codes, len(level_index), axis=0)\n\n    result = DataFrame(counts, index=level_index, columns=agg_axis)\n\n    if axis == 1:\n        # Undo our earlier transpose\n        return result.T\n    else:\n        return result",
                "def _reduce(\n    self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds\n):\n    if axis is None and filter_type == \"bool\":\n        labels = None\n        constructor = None\n    else:\n        # TODO: Make other agg func handle axis=None properly\n        axis = self._get_axis_number(axis)\n        labels = self._get_agg_axis(axis)\n        constructor = self._constructor\n\n    def f(x):\n        return op(x, axis=axis, skipna=skipna, **kwds)\n\n    def _get_data(axis_matters):\n        if filter_type is None or filter_type == \"numeric\":\n            data = self._get_numeric_data()\n        elif filter_type == \"bool\":\n            if axis_matters:\n                # GH#25101, GH#24434\n                data = self._get_bool_data() if axis == 0 else self\n            else:\n                data = self._get_bool_data()\n        else:  # pragma: no cover\n            msg = (\n                f\"Generating numeric_only data with filter_type {filter_type} \"\n                \"not supported.\"\n            )\n            raise NotImplementedError(msg)\n        return data\n\n    if numeric_only is None:\n        values = self.values\n        try:\n            result = f(values)\n\n            if filter_type == \"bool\" and is_object_dtype(values) and axis is None:\n                # work around https://github.com/numpy/numpy/issues/10489\n                # TODO: combine with hasattr(result, 'dtype') further down\n                # hard since we don't have `values` down there.\n                result = np.bool_(result)\n        except TypeError:\n            # e.g. in nanops trying to convert strs to float\n\n            # try by-column first\n            if filter_type is None and axis == 0:\n                # this can end up with a non-reduction\n                # but not always. if the types are mixed\n                # with datelike then need to make sure a series\n\n                # we only end up here if we have not specified\n                # numeric_only and yet we have tried a\n                # column-by-column reduction, where we have mixed type.\n                # So let's just do what we can\n                from pandas.core.apply import frame_apply\n\n                opa = frame_apply(\n                    self, func=f, result_type=\"expand\", ignore_failures=True\n                )\n                result = opa.get_result()\n                if result.ndim == self.ndim:\n                    result = result.iloc[0]\n                return result\n\n            # TODO: why doesnt axis matter here?\n            data = _get_data(axis_matters=False)\n            with np.errstate(all=\"ignore\"):\n                result = f(data.values)\n            labels = data._get_agg_axis(axis)\n    else:\n        if numeric_only:\n            data = _get_data(axis_matters=True)\n\n            values = data.values\n            labels = data._get_agg_axis(axis)\n        else:\n            values = self.values\n        result = f(values)\n\n    if hasattr(result, \"dtype\") and is_object_dtype(result.dtype):\n        try:\n            if filter_type is None or filter_type == \"numeric\":\n                result = result.astype(np.float64)\n            elif filter_type == \"bool\" and notna(result).all():\n                result = result.astype(np.bool_)\n        except (ValueError, TypeError):\n\n            # try to coerce to the original dtypes item by item if we can\n            if axis == 0:\n                result = coerce_to_dtypes(result, self.dtypes)\n\n    if constructor is not None:\n        result = Series(result, index=labels)\n    return result",
                "def nunique(self, axis=0, dropna=True):\n    \"\"\"\n    Count distinct observations over requested axis.\n\n    Return Series with number of distinct observations. Can ignore NaN\n    values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for\n        column-wise.\n    dropna : bool, default True\n        Don't include NaN in the counts.\n\n    Returns\n    -------\n    Series\n\n    See Also\n    --------\n    Series.nunique: Method nunique for Series.\n    DataFrame.count: Count non-NA cells for each column or row.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [1, 1, 1]})\n    >>> df.nunique()\n    A    3\n    B    1\n    dtype: int64\n\n    >>> df.nunique(axis=1)\n    0    1\n    1    2\n    2    2\n    dtype: int64\n    \"\"\"\n    return self.apply(Series.nunique, axis=axis, dropna=dropna)",
                "def idxmin(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of minimum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of minima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmin\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmin``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmin(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                "def idxmax(self, axis=0, skipna=True):\n    \"\"\"\n    Return index of first occurrence of maximum over requested axis.\n\n    NA/null values are excluded.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to use. 0 or 'index' for row-wise, 1 or 'columns' for column-wise\n    skipna : bool, default True\n        Exclude NA/null values. If an entire row/column is NA, the result\n        will be NA.\n\n    Returns\n    -------\n    Series\n        Indexes of maxima along the specified axis.\n\n    Raises\n    ------\n    ValueError\n        * If the row/column is empty\n\n    See Also\n    --------\n    Series.idxmax\n\n    Notes\n    -----\n    This method is the DataFrame version of ``ndarray.argmax``.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    indices = nanops.nanargmax(self.values, axis=axis, skipna=skipna)\n    index = self._get_axis(axis)\n    result = [index[i] if i >= 0 else np.nan for i in indices]\n    return Series(result, index=self._get_agg_axis(axis))",
                "def _get_agg_axis(self, axis_num):\n    \"\"\"\n    Let's be explicit about this.\n    \"\"\"\n    if axis_num == 0:\n        return self.columns\n    elif axis_num == 1:\n        return self.index\n    else:\n        raise ValueError(f\"Axis must be 0 or 1 (got {repr(axis_num)})\")",
                "def mode(self, axis=0, numeric_only=False, dropna=True):\n    \"\"\"\n    Get the mode(s) of each element along the selected axis.\n\n    The mode of a set of values is the value that appears most often.\n    It can be multiple values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to iterate over while searching for the mode:\n\n        * 0 or 'index' : get mode of each column\n        * 1 or 'columns' : get mode of each row.\n\n    numeric_only : bool, default False\n        If True, only apply to numeric columns.\n    dropna : bool, default True\n        Don't consider counts of NaN/NaT.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    DataFrame\n        The modes of each column or row.\n\n    See Also\n    --------\n    Series.mode : Return the highest frequency value in a Series.\n    Series.value_counts : Return the counts of values in a Series.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('bird', 2, 2),\n    ...                    ('mammal', 4, np.nan),\n    ...                    ('arthropod', 8, 0),\n    ...                    ('bird', 2, np.nan)],\n    ...                   index=('falcon', 'horse', 'spider', 'ostrich'),\n    ...                   columns=('species', 'legs', 'wings'))\n    >>> df\n               species  legs  wings\n    falcon        bird     2    2.0\n    horse       mammal     4    NaN\n    spider   arthropod     8    0.0\n    ostrich       bird     2    NaN\n\n    By default, missing values are not considered, and the mode of wings\n    are both 0 and 2. The second row of species and legs contains ``NaN``,\n    because they have only one mode, but the DataFrame has two rows.\n\n    >>> df.mode()\n      species  legs  wings\n    0    bird   2.0    0.0\n    1     NaN   NaN    2.0\n\n    Setting ``dropna=False`` ``NaN`` values are considered and they can be\n    the mode (like for wings).\n\n    >>> df.mode(dropna=False)\n      species  legs  wings\n    0    bird     2    NaN\n\n    Setting ``numeric_only=True``, only the mode of numeric columns is\n    computed, and columns of other types are ignored.\n\n    >>> df.mode(numeric_only=True)\n       legs  wings\n    0   2.0    0.0\n    1   NaN    2.0\n\n    To compute the mode over columns and not rows, use the axis parameter:\n\n    >>> df.mode(axis='columns', numeric_only=True)\n               0    1\n    falcon   2.0  NaN\n    horse    4.0  NaN\n    spider   0.0  8.0\n    ostrich  2.0  NaN\n    \"\"\"\n    data = self if not numeric_only else self._get_numeric_data()\n\n    def f(s):\n        return s.mode(dropna=dropna)\n\n    return data.apply(f, axis=axis)",
                "def quantile(self, q=0.5, axis=0, numeric_only=True, interpolation=\"linear\"):\n    \"\"\"\n    Return values at the given quantile over requested axis.\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n        Value between 0 <= q <= 1, the quantile(s) to compute.\n    axis : {0, 1, 'index', 'columns'} (default 0)\n        Equals 0 or 'index' for row-wise, 1 or 'columns' for column-wise.\n    numeric_only : bool, default True\n        If False, the quantile of datetime and timedelta data will be\n        computed as well.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to use,\n        when the desired quantile lies between two data points `i` and `j`:\n\n        * linear: `i + (j - i) * fraction`, where `fraction` is the\n          fractional part of the index surrounded by `i` and `j`.\n        * lower: `i`.\n        * higher: `j`.\n        * nearest: `i` or `j` whichever is nearest.\n        * midpoint: (`i` + `j`) / 2.\n\n    Returns\n    -------\n    Series or DataFrame\n\n        If ``q`` is an array, a DataFrame will be returned where the\n          index is ``q``, the columns are the columns of self, and the\n          values are the quantiles.\n        If ``q`` is a float, a Series will be returned where the\n          index is the columns of self and the values are the quantiles.\n\n    See Also\n    --------\n    core.window.Rolling.quantile: Rolling quantile.\n    numpy.percentile: Numpy function to compute the percentile.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array([[1, 1], [2, 10], [3, 100], [4, 100]]),\n    ...                   columns=['a', 'b'])\n    >>> df.quantile(.1)\n    a    1.3\n    b    3.7\n    Name: 0.1, dtype: float64\n    >>> df.quantile([.1, .5])\n           a     b\n    0.1  1.3   3.7\n    0.5  2.5  55.0\n\n    Specifying `numeric_only=False` will also compute the quantile of\n    datetime and timedelta data.\n\n    >>> df = pd.DataFrame({'A': [1, 2],\n    ...                    'B': [pd.Timestamp('2010'),\n    ...                          pd.Timestamp('2011')],\n    ...                    'C': [pd.Timedelta('1 days'),\n    ...                          pd.Timedelta('2 days')]})\n    >>> df.quantile(0.5, numeric_only=False)\n    A                    1.5\n    B    2010-07-02 12:00:00\n    C        1 days 12:00:00\n    Name: 0.5, dtype: object\n    \"\"\"\n    validate_percentile(q)\n\n    data = self._get_numeric_data() if numeric_only else self\n    axis = self._get_axis_number(axis)\n    is_transposed = axis == 1\n\n    if is_transposed:\n        data = data.T\n\n    if len(data.columns) == 0:\n        # GH#23925 _get_numeric_data may have dropped all columns\n        cols = Index([], name=self.columns.name)\n        if is_list_like(q):\n            return self._constructor([], index=q, columns=cols)\n        return self._constructor_sliced([], index=cols, name=q, dtype=np.float64)\n\n    result = data._data.quantile(\n        qs=q, axis=1, interpolation=interpolation, transposed=is_transposed\n    )\n\n    if result.ndim == 2:\n        result = self._constructor(result)\n    else:\n        result = self._constructor_sliced(result, name=q)\n\n    if is_transposed:\n        result = result.T\n\n    return result",
                "def to_timestamp(self, freq=None, how=\"start\", axis=0, copy=True):\n    \"\"\"\n    Cast to DatetimeIndex of timestamps, at *beginning* of period.\n\n    Parameters\n    ----------\n    freq : str, default frequency of PeriodIndex\n        Desired frequency.\n    how : {'s', 'e', 'start', 'end'}\n        Convention for converting period to timestamp; start of period\n        vs. end.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    DataFrame with DatetimeIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_timestamp(freq=freq, how=how))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_timestamp(freq=freq, how=how))\n    else:  # pragma: no cover\n        raise AssertionError(f\"Axis must be 0 or 1. Got {axis}\")\n\n    return self._constructor(new_data)",
                "def to_period(self, freq=None, axis=0, copy=True):\n    \"\"\"\n    Convert DataFrame from DatetimeIndex to PeriodIndex.\n\n    Convert DataFrame from DatetimeIndex to PeriodIndex with desired\n    frequency (inferred from index if not passed).\n\n    Parameters\n    ----------\n    freq : str, default\n        Frequency of the PeriodIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to convert (the index by default).\n    copy : bool, default True\n        If False then underlying input data is not copied.\n\n    Returns\n    -------\n    TimeSeries with PeriodIndex\n    \"\"\"\n    new_data = self._data\n    if copy:\n        new_data = new_data.copy()\n\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        new_data.set_axis(1, self.index.to_period(freq=freq))\n    elif axis == 1:\n        new_data.set_axis(0, self.columns.to_period(freq=freq))\n    else:  # pragma: no cover\n        raise AssertionError(f\"Axis must be 0 or 1. Got {axis}\")\n\n    return self._constructor(new_data)",
                "def isin(self, values):\n    \"\"\"\n    Whether each element in the DataFrame is contained in values.\n\n    Parameters\n    ----------\n    values : iterable, Series, DataFrame or dict\n        The result will only be true at a location if all the\n        labels match. If `values` is a Series, that's the index. If\n        `values` is a dict, the keys must be the column names,\n        which must match. If `values` is a DataFrame,\n        then both the index and column labels must match.\n\n    Returns\n    -------\n    DataFrame\n        DataFrame of booleans showing whether each element in the DataFrame\n        is contained in values.\n\n    See Also\n    --------\n    DataFrame.eq: Equality test for DataFrame.\n    Series.isin: Equivalent method on Series.\n    Series.str.contains: Test if pattern or regex is contained within a\n        string of a Series or Index.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame({'num_legs': [2, 4], 'num_wings': [2, 0]},\n    ...                   index=['falcon', 'dog'])\n    >>> df\n            num_legs  num_wings\n    falcon         2          2\n    dog            4          0\n\n    When ``values`` is a list check whether every value in the DataFrame\n    is present in the list (which animals have 0 or 2 legs or wings)\n\n    >>> df.isin([0, 2])\n            num_legs  num_wings\n    falcon      True       True\n    dog        False       True\n\n    When ``values`` is a dict, we can pass values to check for each\n    column separately:\n\n    >>> df.isin({'num_wings': [0, 3]})\n            num_legs  num_wings\n    falcon     False      False\n    dog        False       True\n\n    When ``values`` is a Series or DataFrame the index and column must\n    match. Note that 'falcon' does not match based on the number of legs\n    in df2.\n\n    >>> other = pd.DataFrame({'num_legs': [8, 2], 'num_wings': [0, 2]},\n    ...                      index=['spider', 'falcon'])\n    >>> df.isin(other)\n            num_legs  num_wings\n    falcon      True       True\n    dog        False      False\n    \"\"\"\n    if isinstance(values, dict):\n        from pandas.core.reshape.concat import concat\n\n        values = collections.defaultdict(list, values)\n        return concat(\n            (\n                self.iloc[:, [i]].isin(values[col])\n                for i, col in enumerate(self.columns)\n            ),\n            axis=1,\n        )\n    elif isinstance(values, Series):\n        if not values.index.is_unique:\n            raise ValueError(\"cannot compute isin with a duplicate axis.\")\n        return self.eq(values.reindex_like(self), axis=\"index\")\n    elif isinstance(values, DataFrame):\n        if not (values.columns.is_unique and values.index.is_unique):\n            raise ValueError(\"cannot compute isin with a duplicate axis.\")\n        return self.eq(values.reindex_like(self))\n    else:\n        if not is_list_like(values):\n            raise TypeError(\n                \"only list-like or dict-like objects are allowed \"\n                \"to be passed to DataFrame.isin(), \"\n                f\"you passed a {repr(type(values).__name__)}\"\n            )\n        return DataFrame(\n            algorithms.isin(self.values.ravel(), values).reshape(self.shape),\n            self.index,\n            self.columns,\n        )",
                "def _verbose_repr():\n    lines.append(f\"Data columns (total {len(self.columns)} columns):\")\n    space = max(len(pprint_thing(k)) for k in self.columns) + 4\n    counts = None\n\n    tmpl = \"{count}{dtype}\"\n    if show_counts:\n        counts = self.count()\n        if len(cols) != len(counts):  # pragma: no cover\n            raise AssertionError(\n                f\"Columns must equal counts ({len(cols)} != {len(counts)})\"\n            )\n        tmpl = \"{count} non-null {dtype}\"\n\n    dtypes = self.dtypes\n    for i, col in enumerate(self.columns):\n        dtype = dtypes.iloc[i]\n        col = pprint_thing(col)\n\n        count = \"\"\n        if show_counts:\n            count = counts.iloc[i]\n\n        lines.append(\n            _put_str(col, space) + tmpl.format(count=count, dtype=dtype)\n        )",
                "def _non_verbose_repr():\n    lines.append(self.columns._summary(name=\"Columns\"))",
                "def _sizeof_fmt(num, size_qualifier):\n    # returns size in human readable format\n    for x in [\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]:\n        if num < 1024.0:\n            return f\"{num:3.1f}{size_qualifier} {x}\"\n        num /= 1024.0\n    return f\"{num:3.1f}{size_qualifier} PB\"",
                "def extract_unique_dtypes_from_dtypes_set(\n    dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray\n) -> List[Dtype]:\n    extracted_dtypes = [\n        unique_dtype\n        for unique_dtype in unique_dtypes\n        if issubclass(unique_dtype.type, tuple(dtypes_set))  # type: ignore\n    ]\n    return extracted_dtypes",
                "def reindexer(value):\n    # reindex if necessary\n\n    if value.index.equals(self.index) or not len(self.index):\n        value = value._values.copy()\n    else:\n\n        # GH 4107\n        try:\n            value = value.reindex(self.index)._values\n        except ValueError as err:\n            # raised in MultiIndex.from_tuples, see test_insert_error_msmgs\n            if not value.index.is_unique:\n                # duplicate axis\n                raise err\n\n            # other\n            raise TypeError(\n                \"incompatible index of inserted column with frame index\"\n            )\n    return value",
                "def _maybe_casted_values(index, labels=None):\n    values = index._values\n    if not isinstance(index, (PeriodIndex, DatetimeIndex)):\n        if values.dtype == np.object_:\n            values = lib.maybe_convert_objects(values)\n\n    # if we have the labels, extract the values with a mask\n    if labels is not None:\n        mask = labels == -1\n\n        # we can have situations where the whole mask is -1,\n        # meaning there is nothing found in labels, so make all nan's\n        if mask.all():\n            values = np.empty(len(mask))\n            values.fill(np.nan)\n        else:\n            values = values.take(labels)\n\n            # TODO(https://github.com/pandas-dev/pandas/issues/24206)\n            # Push this into maybe_upcast_putmask?\n            # We can't pass EAs there right now. Looks a bit\n            # complicated.\n            # So we unbox the ndarray_values, op, re-box.\n            values_type = type(values)\n            values_dtype = values.dtype\n\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values._data\n\n            if mask.any():\n                values, _ = maybe_upcast_putmask(values, mask, np.nan)\n\n            if issubclass(values_type, DatetimeLikeArray):\n                values = values_type(values, dtype=values_dtype)\n\n    return values",
                "def f(vals):\n    labels, shape = algorithms.factorize(\n        vals, size_hint=min(len(self), _SIZE_HINT_LIMIT)\n    )\n    return labels.astype(\"i8\", copy=False), len(shape)",
                "def extract_values(arr):\n    # Does two things:\n    # 1. maybe gets the values from the Series / Index\n    # 2. convert datelike to i8\n    if isinstance(arr, (ABCIndexClass, ABCSeries)):\n        arr = arr._values\n\n    if needs_i8_conversion(arr):\n        if is_extension_array_dtype(arr.dtype):\n            arr = arr.asi8\n        else:\n            arr = arr.view(\"i8\")\n    return arr",
                "def combiner(x, y):\n    mask = isna(x)\n    if isinstance(mask, (ABCIndexClass, ABCSeries)):\n        mask = mask._values\n\n    x_values = extract_values(x)\n    y_values = extract_values(y)\n\n    # If the column y in other DataFrame is not in first DataFrame,\n    # just return y_values.\n    if y.name not in self.columns:\n        return y_values\n\n    return expressions.where(mask, y_values, x_values)",
                "def infer(x):\n    if x.empty:\n        return lib.map_infer(x, func)\n    return lib.map_infer(x.astype(object).values, func)",
                "def _dict_round(df, decimals):\n    for col, vals in df.items():\n        try:\n            yield _series_round(vals, decimals[col])\n        except KeyError:\n            yield vals",
                "def _series_round(s, decimals):\n    if is_integer_dtype(s) or is_float_dtype(s):\n        return s.round(decimals)\n    return s",
                "def f(x):\n    return op(x, axis=axis, skipna=skipna, **kwds)",
                "def _get_data(axis_matters):\n    if filter_type is None or filter_type == \"numeric\":\n        data = self._get_numeric_data()\n    elif filter_type == \"bool\":\n        if axis_matters:\n            # GH#25101, GH#24434\n            data = self._get_bool_data() if axis == 0 else self\n        else:\n            data = self._get_bool_data()\n    else:  # pragma: no cover\n        msg = (\n            f\"Generating numeric_only data with filter_type {filter_type} \"\n            \"not supported.\"\n        )\n        raise NotImplementedError(msg)\n    return data",
                "def f(s):\n    return s.mode(dropna=dropna)",
                "def _arith_op(left, right):\n    # for the mixed_type case where we iterate over columns,\n    # _arith_op(left, right) is equivalent to\n    # left._binop(right, func, fill_value=fill_value)\n    left, right = ops.fill_binop(left, right, fill_value)\n    return func(left, right)",
                "def c(x):\n    return nanops.nancorr(x[0], x[1], method=method)"
            ],
            "inscope_function_signatures": [
                "_from_nested_dict(data)",
                "_put_str(s, space)",
                "_constructor(self) -> Type['DataFrame']",
                "_constructor_expanddim(self)",
                "__init__(self, data=None, index: Optional[Axes]=None, columns: Optional[Axes]=None, dtype: Optional[Dtype]=None, copy: bool=False)",
                "axes(self) -> List[Index]",
                "shape(self) -> Tuple[int, int]",
                "_is_homogeneous_type(self) -> bool",
                "_repr_fits_vertical_(self) -> bool",
                "_repr_fits_horizontal_(self, ignore_width: bool=False) -> bool",
                "_info_repr(self) -> bool",
                "__repr__(self) -> str",
                "_repr_html_(self) -> Optional[str]",
                "to_string(self, buf: Optional[FilePathOrBuffer[str]]=None, columns: Optional[Sequence[str]]=None, col_space: Optional[int]=None, header: Union[bool, Sequence[str]]=True, index: bool=True, na_rep: str='NaN', formatters: Optional[fmt.formatters_type]=None, float_format: Optional[fmt.float_format_type]=None, sparsify: Optional[bool]=None, index_names: bool=True, justify: Optional[str]=None, max_rows: Optional[int]=None, min_rows: Optional[int]=None, max_cols: Optional[int]=None, show_dimensions: bool=False, decimal: str='.', line_width: Optional[int]=None, max_colwidth: Optional[int]=None, encoding: Optional[str]=None) -> Optional[str]",
                "style(self)",
                "items(self) -> Iterable[Tuple[Optional[Hashable], Series]]",
                "iteritems(self)",
                "iterrows(self)",
                "itertuples(self, index=True, name='Pandas')",
                "__len__(self) -> int",
                "dot(self, other)",
                "__matmul__(self, other)",
                "__rmatmul__(self, other)",
                "from_dict(cls, data, orient='columns', dtype=None, columns=None)",
                "to_numpy(self, dtype=None, copy=False)",
                "to_dict(self, orient='dict', into=dict)",
                "to_gbq(self, destination_table, project_id=None, chunksize=None, reauth=False, if_exists='fail', auth_local_webserver=False, table_schema=None, location=None, progress_bar=True, credentials=None)",
                "from_records(cls, data, index=None, exclude=None, columns=None, coerce_float=False, nrows=None)",
                "to_records(self, index=True, column_dtypes=None, index_dtypes=None)",
                "_from_arrays(cls, arrays, columns, index, dtype=None)",
                "to_stata(self, path, convert_dates=None, write_index=True, byteorder=None, time_stamp=None, data_label=None, variable_labels=None, version=114, convert_strl=None)",
                "to_feather(self, path)",
                "to_parquet(self, path, engine='auto', compression='snappy', index=None, partition_cols=None, **kwargs)",
                "to_html(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, justify=None, max_rows=None, max_cols=None, show_dimensions=False, decimal='.', bold_rows=True, classes=None, escape=True, notebook=False, border=None, table_id=None, render_links=False, encoding=None)",
                "info(self, verbose=None, buf=None, max_cols=None, memory_usage=None, null_counts=None)",
                "memory_usage(self, index=True, deep=False)",
                "transpose(self, *args, **kwargs)",
                "_ixs(self, i: int, axis: int=0)",
                "__getitem__(self, key)",
                "_getitem_bool_array(self, key)",
                "_getitem_multilevel(self, key)",
                "_get_value(self, index, col, takeable: bool=False)",
                "__setitem__(self, key, value)",
                "_setitem_slice(self, key, value)",
                "_setitem_array(self, key, value)",
                "_setitem_frame(self, key, value)",
                "_set_item(self, key, value)",
                "_set_value(self, index, col, value, takeable: bool=False)",
                "_ensure_valid_index(self, value)",
                "_box_item_values(self, key, values)",
                "_box_col_values(self, values, items)",
                "query(self, expr, inplace=False, **kwargs)",
                "eval(self, expr, inplace=False, **kwargs)",
                "select_dtypes(self, include=None, exclude=None)",
                "insert(self, loc, column, value, allow_duplicates=False)",
                "assign(self, **kwargs)",
                "_sanitize_column(self, key, value, broadcast=True)",
                "_series(self)",
                "lookup(self, row_labels, col_labels)",
                "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                "_reindex_index(self, new_index, method, copy, level, fill_value=np.nan, limit=None, tolerance=None)",
                "_reindex_columns(self, new_columns, method, copy, level, fill_value=None, limit=None, tolerance=None)",
                "_reindex_multi(self, axes, copy, fill_value)",
                "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                "reindex(self, *args, **kwargs)",
                "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace=False, errors='raise')",
                "rename(self, *args, **kwargs)",
                "fillna(self, value=None, method=None, axis=None, inplace=False, limit=None, downcast=None, **kwargs)",
                "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                "set_index(self, keys, drop=True, append=False, inplace=False, verify_integrity=False)",
                "reset_index(self, level: Optional[Union[Hashable, Sequence[Hashable]]]=None, drop: bool=False, inplace: bool=False, col_level: Hashable=0, col_fill: Optional[Hashable]='') -> Optional['DataFrame']",
                "isna(self)",
                "isnull(self)",
                "notna(self)",
                "notnull(self)",
                "dropna(self, axis=0, how='any', thresh=None, subset=None, inplace=False)",
                "drop_duplicates(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first', inplace: bool=False) -> Optional['DataFrame']",
                "duplicated(self, subset: Optional[Union[Hashable, Sequence[Hashable]]]=None, keep: Union[str, bool]='first') -> 'Series'",
                "sort_values(self, by, axis=0, ascending=True, inplace=False, kind='quicksort', na_position='last')",
                "sort_index(self, axis=0, level=None, ascending=True, inplace=False, kind='quicksort', na_position='last', sort_remaining=True)",
                "nlargest(self, n, columns, keep='first')",
                "nsmallest(self, n, columns, keep='first')",
                "swaplevel(self, i=-2, j=-1, axis=0)",
                "reorder_levels(self, order, axis=0)",
                "_combine_frame(self, other, func, fill_value=None, level=None)",
                "_combine_match_index(self, other, func)",
                "_construct_result(self, result) -> 'DataFrame'",
                "combine(self, other, func, fill_value=None, overwrite=True)",
                "combine_first(self, other)",
                "update(self, other, join='left', overwrite=True, filter_func=None, errors='ignore')",
                "pivot(self, index=None, columns=None, values=None)",
                "pivot_table(self, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)",
                "stack(self, level=-1, dropna=True)",
                "explode(self, column: Union[str, Tuple]) -> 'DataFrame'",
                "unstack(self, level=-1, fill_value=None)",
                "melt(self, id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)",
                "diff(self, periods=1, axis=0)",
                "_gotitem(self, key: Union[str, List[str]], ndim: int, subset: Optional[Union[Series, ABCDataFrame]]=None) -> Union[Series, ABCDataFrame]",
                "aggregate(self, func, axis=0, *args, **kwargs)",
                "_aggregate(self, arg, axis=0, *args, **kwargs)",
                "transform(self, func, axis=0, *args, **kwargs)",
                "apply(self, func, axis=0, raw=False, result_type=None, args=(), **kwds)",
                "applymap(self, func)",
                "append(self, other, ignore_index=False, verify_integrity=False, sort=False)",
                "join(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                "_join_compat(self, other, on=None, how='left', lsuffix='', rsuffix='', sort=False)",
                "merge(self, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)",
                "round(self, decimals=0, *args, **kwargs)",
                "corr(self, method='pearson', min_periods=1)",
                "cov(self, min_periods=None)",
                "corrwith(self, other, axis=0, drop=False, method='pearson')",
                "count(self, axis=0, level=None, numeric_only=False)",
                "_count_level(self, level, axis=0, numeric_only=False)",
                "_reduce(self, op, name, axis=0, skipna=True, numeric_only=None, filter_type=None, **kwds)",
                "nunique(self, axis=0, dropna=True)",
                "idxmin(self, axis=0, skipna=True)",
                "idxmax(self, axis=0, skipna=True)",
                "_get_agg_axis(self, axis_num)",
                "mode(self, axis=0, numeric_only=False, dropna=True)",
                "quantile(self, q=0.5, axis=0, numeric_only=True, interpolation='linear')",
                "to_timestamp(self, freq=None, how='start', axis=0, copy=True)",
                "to_period(self, freq=None, axis=0, copy=True)",
                "isin(self, values)",
                "_verbose_repr()",
                "_non_verbose_repr()",
                "_sizeof_fmt(num, size_qualifier)",
                "extract_unique_dtypes_from_dtypes_set(dtypes_set: FrozenSet[Dtype], unique_dtypes: np.ndarray) -> List[Dtype]",
                "reindexer(value)",
                "_maybe_casted_values(index, labels=None)",
                "f(vals)",
                "extract_values(arr)",
                "combiner(x, y)",
                "infer(x)",
                "_dict_round(df, decimals)",
                "_series_round(s, decimals)",
                "f(x)",
                "_get_data(axis_matters)",
                "f(s)",
                "_arith_op(left, right)",
                "c(x)"
            ],
            "variables_in_file": {
                "_shared_doc_kwargs": [
                    128,
                    3969,
                    6433,
                    6407,
                    4745,
                    3947,
                    4428,
                    3664,
                    4432,
                    3988,
                    3637,
                    4436,
                    4440,
                    4697
                ],
                "dict": [
                    128,
                    6752,
                    1412,
                    1604,
                    422,
                    424,
                    1225,
                    1292,
                    1423,
                    2580,
                    6200,
                    7098,
                    8094,
                    6751
                ],
                "_numeric_only_doc": [
                    154
                ],
                "_merge_doc": [
                    6971,
                    159
                ],
                "NDFrame": [
                    394,
                    4746,
                    3948,
                    2864,
                    3665,
                    501,
                    309,
                    4698
                ],
                "_typ": [
                    387
                ],
                "DataFrame": [
                    2822,
                    391,
                    6926,
                    6928,
                    417,
                    3496,
                    8109,
                    8120,
                    8134,
                    8141,
                    8142,
                    8144,
                    8145,
                    1618,
                    1108,
                    2652,
                    1126,
                    2798,
                    3442,
                    5495,
                    5496,
                    6777,
                    6778,
                    7549
                ],
                "property": [
                    544,
                    389,
                    522,
                    397,
                    814,
                    3501,
                    2583,
                    505
                ],
                "Type": [
                    393,
                    390
                ],
                "_constructor_sliced": [
                    393
                ],
                "Series": [
                    2696,
                    393,
                    6923,
                    7691,
                    2716,
                    8105,
                    2478,
                    3504,
                    7729,
                    6322,
                    2483,
                    4660,
                    2741,
                    6323,
                    7098,
                    7099,
                    444,
                    7358,
                    1225,
                    7500,
                    1108,
                    469,
                    4692,
                    7510,
                    7767,
                    7387,
                    6751,
                    6753,
                    7650,
                    2917,
                    1130,
                    1131,
                    7406,
                    3439,
                    2800,
                    881,
                    1137,
                    3447
                ],
                "_deprecations": [
                    394
                ],
                "FrozenSet": [
                    3280,
                    394
                ],
                "str": [
                    394,
                    395,
                    652,
                    4633,
                    1823,
                    682,
                    6320,
                    4672,
                    457,
                    5967,
                    8159,
                    739,
                    740,
                    742,
                    1639,
                    744,
                    4588,
                    749,
                    1774,
                    3054,
                    1777,
                    754,
                    757,
                    758,
                    7541,
                    2302
                ],
                "NDFrame._deprecations": [
                    394
                ],
                "frozenset": [
                    3266,
                    394,
                    3267,
                    3260
                ],
                "_accessors": [
                    395
                ],
                "Set": [
                    395
                ],
                "set": [
                    1633,
                    4171,
                    395,
                    1635
                ],
                "NotImplementedError": [
                    7586,
                    5491,
                    2918,
                    399
                ],
                "Optional": [
                    407,
                    408,
                    409,
                    4632,
                    4383,
                    682,
                    6322,
                    4184,
                    4188,
                    4189,
                    739,
                    740,
                    741,
                    745,
                    746,
                    747,
                    4587,
                    749,
                    750,
                    751,
                    752,
                    881,
                    4590,
                    755,
                    756,
                    757,
                    758
                ],
                "Axes": [
                    408,
                    407
                ],
                "Dtype": [
                    3280,
                    409,
                    3281
                ],
                "bool": [
                    643,
                    4633,
                    410,
                    545,
                    4660,
                    2872,
                    2751,
                    583,
                    590,
                    4185,
                    4186,
                    742,
                    743,
                    747,
                    748,
                    4588,
                    4589,
                    753,
                    2675
                ],
                "data": [
                    1579,
                    1584,
                    1595,
                    1597,
                    1600,
                    1602,
                    1604,
                    1606,
                    1607,
                    1611,
                    1618,
                    1619,
                    1624,
                    2678,
                    2685,
                    2686,
                    2688,
                    7860,
                    7865,
                    1223,
                    1225,
                    1226,
                    1228,
                    1235,
                    7935,
                    7940,
                    7942,
                    7949,
                    3391,
                    3394,
                    3395,
                    7574,
                    7578,
                    412,
                    413,
                    7580,
                    417,
                    418,
                    7587,
                    420,
                    422,
                    424,
                    425,
                    426,
                    430,
                    431,
                    435,
                    437,
                    438,
                    439,
                    441,
                    442,
                    444,
                    445,
                    446,
                    447,
                    450,
                    451,
                    452,
                    454,
                    7623,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    7625,
                    7626,
                    7629,
                    7631,
                    469,
                    470,
                    471,
                    472,
                    7632,
                    474,
                    8151,
                    478,
                    483,
                    493
                ],
                "dtype": [
                    1289,
                    414,
                    415,
                    2340,
                    422,
                    425,
                    1834,
                    2348,
                    431,
                    1588,
                    1590,
                    442,
                    1599,
                    1600,
                    450,
                    452,
                    454,
                    464,
                    1235,
                    476,
                    478,
                    480,
                    483,
                    493
                ],
                "self._validate_dtype": [
                    415
                ],
                "self": [
                    2051,
                    4108,
                    4119,
                    4121,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4156,
                    4160,
                    6215,
                    2133,
                    6311,
                    6312,
                    6313,
                    6336,
                    4333,
                    4335,
                    2302,
                    2303,
                    2305,
                    2306,
                    2310,
                    2314,
                    6411,
                    2316,
                    2319,
                    6415,
                    2322,
                    6419,
                    2325,
                    2326,
                    4378,
                    2331,
                    4379,
                    4380,
                    6426,
                    4384,
                    2338,
                    2339,
                    4387,
                    4389,
                    6435,
                    4391,
                    4392,
                    4393,
                    6437,
                    4395,
                    2352,
                    4403,
                    4410,
                    4412,
                    2372,
                    2388,
                    2390,
                    415,
                    421,
                    2479,
                    2480,
                    2483,
                    6579,
                    4552,
                    4555,
                    4557,
                    4562,
                    4578,
                    4581,
                    501,
                    6653,
                    4615,
                    520,
                    4616,
                    4619,
                    4623,
                    4624,
                    4626,
                    542,
                    2601,
                    2605,
                    2607,
                    2608,
                    2611,
                    4659,
                    2616,
                    4664,
                    4669,
                    2622,
                    575,
                    576,
                    2624,
                    578,
                    2625,
                    2626,
                    2629,
                    4674,
                    2635,
                    588,
                    4684,
                    2639,
                    2640,
                    2641,
                    2642,
                    4688,
                    4692,
                    2645,
                    2649,
                    603,
                    2653,
                    2657,
                    4709,
                    2664,
                    2665,
                    2666,
                    6760,
                    6761,
                    6763,
                    6765,
                    2672,
                    4720,
                    6772,
                    629,
                    2678,
                    4727,
                    6773,
                    6779,
                    6780,
                    2685,
                    4736,
                    4737,
                    6785,
                    6787,
                    4741,
                    4743,
                    2696,
                    649,
                    2702,
                    2704,
                    657,
                    658,
                    2709,
                    2711,
                    2715,
                    4763,
                    2717,
                    670,
                    2719,
                    2720,
                    4764,
                    2723,
                    2724,
                    2725,
                    2727,
                    688,
                    690,
                    2742,
                    2743,
                    2746,
                    4794,
                    2749,
                    703,
                    4800,
                    4801,
                    4807,
                    4809,
                    2766,
                    2769,
                    2770,
                    2776,
                    2784,
                    2785,
                    2786,
                    2789,
                    2792,
                    2796,
                    2799,
                    2801,
                    2804,
                    2807,
                    2808,
                    2813,
                    2815,
                    2817,
                    6913,
                    2819,
                    2820,
                    2826,
                    2828,
                    2831,
                    2832,
                    6930,
                    2838,
                    792,
                    2840,
                    2847,
                    2848,
                    2849,
                    6945,
                    6955,
                    2862,
                    2863,
                    2864,
                    2869,
                    2870,
                    4918,
                    828,
                    2891,
                    2894,
                    2895,
                    6990,
                    2897,
                    2902,
                    2904,
                    2905,
                    2907,
                    2915,
                    2925,
                    882,
                    883,
                    884,
                    2930,
                    886,
                    887,
                    2932,
                    2934,
                    891,
                    2940,
                    2941,
                    5018,
                    5034,
                    939,
                    940,
                    941,
                    5036,
                    7102,
                    7105,
                    5059,
                    5060,
                    7110,
                    5063,
                    7111,
                    7114,
                    5075,
                    5103,
                    1009,
                    5105,
                    1011,
                    3059,
                    5109,
                    3062,
                    1015,
                    3066,
                    1018,
                    3069,
                    7165,
                    5124,
                    1029,
                    5127,
                    7205,
                    1109,
                    1110,
                    1113,
                    1118,
                    1119,
                    3167,
                    3168,
                    3171,
                    1127,
                    1135,
                    5237,
                    5240,
                    1145,
                    5241,
                    5243,
                    1151,
                    7300,
                    7315,
                    5272,
                    5295,
                    7355,
                    7356,
                    3277,
                    3289,
                    3295,
                    3301,
                    3303,
                    5366,
                    3321,
                    3322,
                    3323,
                    5371,
                    1289,
                    3391,
                    7489,
                    7491,
                    7494,
                    7496,
                    3420,
                    7516,
                    7518,
                    3426,
                    1381,
                    7525,
                    1390,
                    1392,
                    1396,
                    1397,
                    3445,
                    3446,
                    3448,
                    1402,
                    5498,
                    5500,
                    5501,
                    1408,
                    1410,
                    3458,
                    1413,
                    3463,
                    1420,
                    7565,
                    7566,
                    1423,
                    1424,
                    7567,
                    5522,
                    7574,
                    7578,
                    7580,
                    3485,
                    3493,
                    3494,
                    3495,
                    7590,
                    3504,
                    3505,
                    7615,
                    7618,
                    3536,
                    3537,
                    3538,
                    3539,
                    7634,
                    3544,
                    3549,
                    7647,
                    3560,
                    1524,
                    3586,
                    3589,
                    5637,
                    7691,
                    3606,
                    3609,
                    3621,
                    3622,
                    3627,
                    3629,
                    7725,
                    3631,
                    7726,
                    7727,
                    7729,
                    7763,
                    7764,
                    7765,
                    7767,
                    3678,
                    7774,
                    7776,
                    5785,
                    7860,
                    1755,
                    1757,
                    1759,
                    1761,
                    1764,
                    1766,
                    1774,
                    1776,
                    1777,
                    7935,
                    7936,
                    7944,
                    1801,
                    7946,
                    7947,
                    7954,
                    7956,
                    7983,
                    7987,
                    7989,
                    7991,
                    7995,
                    5963,
                    5965,
                    8017,
                    8021,
                    8023,
                    8025,
                    8029,
                    3940,
                    6026,
                    6029,
                    6034,
                    6035,
                    1942,
                    8100,
                    8101,
                    8108,
                    1965,
                    8112,
                    8121,
                    8122,
                    8123,
                    6100
                ],
                "isinstance": [
                    4098,
                    4127,
                    4135,
                    4139,
                    2604,
                    4143,
                    4146,
                    4672,
                    4673,
                    1604,
                    1618,
                    1108,
                    2652,
                    6751,
                    6752,
                    2661,
                    1126,
                    1639,
                    4711,
                    1130,
                    1132,
                    6774,
                    6777,
                    4729,
                    2685,
                    6784,
                    2696,
                    2716,
                    4775,
                    2737,
                    2741,
                    7358,
                    1225,
                    1755,
                    5346,
                    1766,
                    2798,
                    5358,
                    2800,
                    4339,
                    2822,
                    6923,
                    6928,
                    2837,
                    4376,
                    1823,
                    4384,
                    4395,
                    4401,
                    5962,
                    7523,
                    3439,
                    3442,
                    3445,
                    7541,
                    3447,
                    5495,
                    3454,
                    3460,
                    3464,
                    3465,
                    6024,
                    3471,
                    8094,
                    417,
                    420,
                    3494,
                    424,
                    3496,
                    426,
                    8105,
                    8109,
                    430,
                    7098,
                    7099,
                    444,
                    4548,
                    5060,
                    457,
                    458,
                    469,
                    471,
                    3054,
                    4087
                ],
                "data._data": [
                    418,
                    7949
                ],
                "BlockManager": [
                    420
                ],
                "mgr": [
                    480,
                    1664,
                    450,
                    1666,
                    452,
                    421,
                    454,
                    425,
                    1834,
                    1835,
                    431,
                    495,
                    501,
                    442,
                    476,
                    478
                ],
                "self._init_mgr": [
                    421
                ],
                "index": [
                    1795,
                    1797,
                    5637,
                    1799,
                    2055,
                    1801,
                    6770,
                    1811,
                    1812,
                    5787,
                    7766,
                    802,
                    422,
                    425,
                    1834,
                    431,
                    7727,
                    7728,
                    1586,
                    2482,
                    8151,
                    442,
                    450,
                    452,
                    1220,
                    454,
                    4164,
                    4166,
                    4167,
                    1228,
                    2892,
                    2767,
                    2896,
                    4175,
                    4177,
                    1235,
                    468,
                    2773,
                    470,
                    2902,
                    472,
                    2904,
                    474,
                    1754,
                    476,
                    7765,
                    478,
                    2143,
                    480,
                    2785,
                    2786,
                    8154,
                    1638,
                    1639,
                    1640,
                    1641,
                    6760,
                    491,
                    1643,
                    493,
                    1645,
                    3820,
                    496,
                    1648,
                    1010,
                    1651,
                    3568,
                    1653,
                    1654,
                    3569,
                    1784,
                    3571,
                    1018,
                    4338,
                    4339
                ],
                "columns": [
                    1664,
                    1410,
                    1412,
                    5637,
                    793,
                    5018,
                    5788,
                    422,
                    1576,
                    425,
                    1577,
                    939,
                    1834,
                    942,
                    431,
                    1586,
                    4918,
                    442,
                    448,
                    449,
                    450,
                    452,
                    1605,
                    454,
                    1606,
                    1607,
                    1612,
                    462,
                    463,
                    464,
                    465,
                    1230,
                    1235,
                    1616,
                    1619,
                    1620,
                    1621,
                    1622,
                    1624,
                    2134,
                    1627,
                    476,
                    1628,
                    478,
                    1630,
                    480,
                    1640,
                    3562,
                    491,
                    3563,
                    493,
                    3565,
                    3821,
                    496,
                    1662
                ],
                "copy": [
                    3591,
                    1289,
                    5263,
                    3611,
                    422,
                    2604,
                    431,
                    7984,
                    3633,
                    2611,
                    442,
                    454,
                    3656,
                    8018,
                    7000,
                    478,
                    483,
                    3565,
                    3571
                ],
                "init_dict": [
                    480,
                    425,
                    450,
                    452
                ],
                "ma.MaskedArray": [
                    426
                ],
                "ma": [
                    426,
                    435
                ],
                "mrecords.MaskedRecords": [
                    430
                ],
                "mrecords": [
                    430
                ],
                "masked_rec_array_to_mgr": [
                    431
                ],
                "mask": [
                    5505,
                    5514,
                    5516,
                    7181,
                    4366,
                    4367,
                    5519,
                    5522,
                    7187,
                    435,
                    436,
                    439,
                    4567,
                    4569,
                    4571,
                    4578,
                    4345,
                    7531,
                    5357,
                    5358,
                    5359,
                    7534,
                    7539,
                    5369,
                    7547,
                    4349,
                    4350
                ],
                "ma.getmaskarray": [
                    435
                ],
                "mask.any": [
                    436,
                    4366
                ],
                "fill_value": [
                    5088,
                    5248,
                    3592,
                    3657,
                    3627,
                    3565,
                    3991,
                    3634,
                    3571,
                    6100,
                    437,
                    5077,
                    439,
                    5269,
                    5270,
                    3612,
                    5790
                ],
                "maybe_upcast": [
                    437
                ],
                "data.soften_mask": [
                    438
                ],
                "data.copy": [
                    441
                ],
                "init_ndarray": [
                    442,
                    478,
                    454,
                    495
                ],
                "np.ndarray": [
                    4099,
                    3464,
                    1132,
                    2604,
                    4143,
                    2800,
                    3280,
                    1618,
                    2837,
                    3447,
                    444,
                    2716
                ],
                "np": [
                    5504,
                    4099,
                    4351,
                    3464,
                    1289,
                    7307,
                    7180,
                    7181,
                    7308,
                    4367,
                    7310,
                    7947,
                    2837,
                    7189,
                    2716,
                    1823,
                    1830,
                    3497,
                    3499,
                    2604,
                    7598,
                    4143,
                    7728,
                    444,
                    4671,
                    1600,
                    2625,
                    7624,
                    3277,
                    3280,
                    4561,
                    1618,
                    7766,
                    3672,
                    7640,
                    7642,
                    3547,
                    1757,
                    1120,
                    483,
                    5095,
                    1128,
                    1131,
                    1132,
                    1133,
                    2926,
                    7406,
                    2800,
                    2676,
                    4340,
                    5108,
                    3447,
                    4350,
                    3582,
                    1151
                ],
                "Index": [
                    2716,
                    3460,
                    3464,
                    6760,
                    7944,
                    1643,
                    1132,
                    1645,
                    4684,
                    3471,
                    2800,
                    3447,
                    506,
                    444
                ],
                "data.dtype.names": [
                    445,
                    446
                ],
                "data.dtype": [
                    445,
                    446
                ],
                "data_columns": [
                    449,
                    446,
                    447
                ],
                "list": [
                    6784,
                    4099,
                    3465,
                    4376,
                    4126,
                    6945,
                    8097,
                    4396,
                    4143,
                    4401,
                    4147,
                    446,
                    7102,
                    4548,
                    1225,
                    5962,
                    459,
                    1228,
                    4561,
                    4689,
                    1757,
                    1764,
                    4711,
                    2671,
                    2800,
                    1009,
                    4729,
                    6774,
                    4087,
                    1401
                ],
                "k": [
                    1408,
                    1416,
                    2326,
                    941,
                    942,
                    943,
                    447,
                    3393,
                    3394,
                    2373,
                    1607,
                    1611,
                    1612,
                    1613,
                    4727,
                    1390,
                    887,
                    1392,
                    883,
                    884,
                    886,
                    1015,
                    4733
                ],
                "getattr": [
                    451,
                    4103,
                    461,
                    2798,
                    2675
                ],
                "data.name": [
                    452
                ],
                "abc.Iterable": [
                    457
                ],
                "abc": [
                    457,
                    458,
                    4099,
                    4146
                ],
                "bytes": [
                    457
                ],
                "abc.Sequence": [
                    458
                ],
                "ExtensionArray": [
                    458,
                    3454
                ],
                "len": [
                    2305,
                    1029,
                    7942,
                    2823,
                    3465,
                    2314,
                    7179,
                    2316,
                    7306,
                    2702,
                    2319,
                    2704,
                    7311,
                    2322,
                    2325,
                    2326,
                    4374,
                    4379,
                    2332,
                    3485,
                    542,
                    2334,
                    3497,
                    2735,
                    4403,
                    2869,
                    4664,
                    4666,
                    4156,
                    4412,
                    576,
                    2624,
                    2625,
                    4160,
                    4161,
                    7109,
                    1223,
                    3449,
                    3531,
                    460,
                    588,
                    3532,
                    7499,
                    2815,
                    7547,
                    1110,
                    472,
                    3544,
                    474,
                    603,
                    3420,
                    4569,
                    2915,
                    4713,
                    1642,
                    4715,
                    493,
                    4717,
                    7405,
                    7406,
                    5235,
                    1780,
                    1015,
                    5240,
                    633,
                    1018,
                    5243,
                    2813,
                    4350,
                    639
                ],
                "is_list_like": [
                    2915,
                    2661,
                    7945,
                    461,
                    8114,
                    3255,
                    3257
                ],
                "is_named_tuple": [
                    462
                ],
                "_fields": [
                    463
                ],
                "arrays": [
                    1664,
                    1783,
                    4123,
                    4129,
                    4131,
                    1830,
                    4137,
                    1834,
                    4141,
                    4144,
                    4147,
                    4151,
                    4156,
                    4161,
                    4164,
                    1607,
                    1609,
                    1614,
                    464,
                    1616,
                    1619,
                    1624,
                    476,
                    1761,
                    1642,
                    1643,
                    1008,
                    1648,
                    1776,
                    1011,
                    1015,
                    1659,
                    1020,
                    1023
                ],
                "to_arrays": [
                    464,
                    1624,
                    1619
                ],
                "ensure_index": [
                    1606,
                    1577,
                    465,
                    1621,
                    1626,
                    1628
                ],
                "get_names_from_index": [
                    470
                ],
                "Categorical": [
                    471
                ],
                "ibase.default_index": [
                    472,
                    474,
                    4374
                ],
                "ibase": [
                    472,
                    474,
                    4374
                ],
                "arrays_to_mgr": [
                    1664,
                    1834,
                    476
                ],
                "arr": [
                    5346,
                    483,
                    5347,
                    5349,
                    5350,
                    5351,
                    5289,
                    5290,
                    491,
                    5292,
                    5353,
                    5354
                ],
                "np.array": [
                    1600,
                    2625,
                    483,
                    1289,
                    1757
                ],
                "ValueError": [
                    5511,
                    2824,
                    4104,
                    1930,
                    6025,
                    6027,
                    1421,
                    1933,
                    2703,
                    6925,
                    1427,
                    2839,
                    6941,
                    5278,
                    7199,
                    1828,
                    8107,
                    8111,
                    4404,
                    7101,
                    3263,
                    4159,
                    4168,
                    3273,
                    3533,
                    1231,
                    1233,
                    2130,
                    1111,
                    2779,
                    7643,
                    4574,
                    7392,
                    1122,
                    3427,
                    484,
                    7778,
                    2918,
                    2919,
                    4714,
                    3056,
                    499,
                    5493,
                    3063,
                    2814
                ],
                "TypeError": [
                    4109,
                    4110,
                    6416,
                    2843,
                    7599,
                    8115,
                    7107,
                    5061,
                    4550,
                    2898,
                    2779,
                    7643,
                    4576,
                    6755,
                    484,
                    485,
                    2918,
                    7524,
                    3434,
                    6764,
                    1649,
                    1139
                ],
                "exc": [
                    489,
                    485
                ],
                "e": [
                    489,
                    487
                ],
                "arr.ndim": [
                    491
                ],
                "values": [
                    4353,
                    5637,
                    4360,
                    4361,
                    4364,
                    4367,
                    4370,
                    4372,
                    5786,
                    8094,
                    8097,
                    8100,
                    7590,
                    7592,
                    8105,
                    7594,
                    8106,
                    8108,
                    8109,
                    8110,
                    8112,
                    8114,
                    8118,
                    1592,
                    8121,
                    1595,
                    1597,
                    2622,
                    1600,
                    2624,
                    1602,
                    2625,
                    2626,
                    7631,
                    3537,
                    7634,
                    7635,
                    3545,
                    7531,
                    492,
                    496,
                    4338,
                    2931,
                    2932,
                    4340,
                    2934,
                    4341,
                    6651,
                    2941,
                    4350,
                    4351
                ],
                "cast_scalar_to_array": [
                    492,
                    3485
                ],
                "values.dtype": [
                    496,
                    4361,
                    4340
                ],
                "NDFrame.__init__": [
                    501
                ],
                "self.index": [
                    2817,
                    3458,
                    3586,
                    5124,
                    1029,
                    3463,
                    520,
                    2696,
                    1420,
                    2702,
                    2704,
                    6034,
                    2709,
                    4378,
                    4379,
                    4380,
                    3485,
                    542,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4384,
                    2725,
                    3621,
                    4387,
                    4389,
                    4392,
                    4393,
                    6955,
                    941,
                    2608,
                    3504,
                    2483,
                    7989,
                    2743,
                    8122,
                    2624,
                    2625,
                    7111,
                    2941,
                    2895,
                    2770,
                    2815,
                    2388,
                    3538,
                    4692,
                    8023,
                    2776,
                    1755,
                    3420,
                    1757,
                    1759,
                    7776,
                    2785,
                    3426,
                    2915,
                    1764,
                    1766,
                    6760,
                    1011,
                    1396,
                    2932,
                    5240,
                    2813,
                    2303
                ],
                "self.columns": [
                    5127,
                    520,
                    4108,
                    3606,
                    542,
                    3622,
                    2607,
                    2616,
                    4669,
                    4674,
                    4684,
                    2639,
                    2640,
                    1109,
                    1110,
                    603,
                    7774,
                    2664,
                    6761,
                    2666,
                    6763,
                    6765,
                    6772,
                    6779,
                    6780,
                    2685,
                    5272,
                    2715,
                    2717,
                    2784,
                    1761,
                    1774,
                    1776,
                    1777,
                    5366,
                    2305,
                    2310,
                    7944,
                    1801,
                    2314,
                    2319,
                    2322,
                    2325,
                    2326,
                    2339,
                    4395,
                    2352,
                    4403,
                    7991,
                    4410,
                    4412,
                    8025,
                    1381,
                    882,
                    883,
                    2930,
                    1397,
                    886,
                    3445,
                    3448,
                    3446,
                    5500,
                    1410,
                    6026,
                    1423,
                    6035,
                    3493,
                    3494,
                    8101,
                    939,
                    2480,
                    3505,
                    8123,
                    7111,
                    3539,
                    3544,
                    1009,
                    1015,
                    1018
                ],
                "List": [
                    6320,
                    3281,
                    506
                ],
                "Tuple": [
                    881,
                    523,
                    5967,
                    4383
                ],
                "int": [
                    1025,
                    741,
                    523,
                    750,
                    751,
                    752,
                    6321,
                    755,
                    756,
                    2588
                ],
                "self._data.any_extension_types": [
                    575
                ],
                "self._data": [
                    576,
                    4736,
                    578,
                    4801,
                    2372,
                    6312,
                    2601,
                    2925,
                    4623,
                    3504,
                    7983,
                    8017,
                    3323,
                    2622,
                    575
                ],
                "block.dtype": [
                    576
                ],
                "block": [
                    576
                ],
                "self._data.blocks": [
                    576
                ],
                "self._data.is_mixed_type": [
                    578
                ],
                "max_rows": [
                    672,
                    2146,
                    804,
                    618,
                    587,
                    620,
                    588,
                    716,
                    2316,
                    2319,
                    697,
                    661,
                    631,
                    633
                ],
                "get_option": [
                    647,
                    2314,
                    2316,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    696,
                    697,
                    698,
                    699,
                    700,
                    2377,
                    587,
                    602,
                    616,
                    620
                ],
                "width": [
                    641,
                    675,
                    601,
                    667,
                    669,
                    607
                ],
                "height": [
                    601
                ],
                "console.get_console_size": [
                    601,
                    667
                ],
                "console": [
                    616,
                    601,
                    667,
                    613
                ],
                "max_columns": [
                    602,
                    606
                ],
                "nb_columns": [
                    603,
                    606,
                    607
                ],
                "ignore_width": [
                    613,
                    607
                ],
                "console.in_interactive_session": [
                    613
                ],
                "console.in_ipython_frontend": [
                    616
                ],
                "buf": [
                    2307,
                    680,
                    810,
                    2155,
                    656,
                    625,
                    658,
                    659,
                    689,
                    690,
                    692,
                    2392,
                    2297,
                    2298,
                    637,
                    638,
                    671
                ],
                "StringIO": [
                    656,
                    625,
                    689
                ],
                "d": [
                    633,
                    637,
                    629
                ],
                "d.iloc": [
                    633
                ],
                "min": [
                    4664,
                    633
                ],
                "d.to_string": [
                    637
                ],
                "value": [
                    3457,
                    3458,
                    2820,
                    3460,
                    2822,
                    2823,
                    3463,
                    2825,
                    2826,
                    3464,
                    3465,
                    3466,
                    3468,
                    3469,
                    2832,
                    3470,
                    3471,
                    3472,
                    3474,
                    3477,
                    3478,
                    3482,
                    3485,
                    3486,
                    2847,
                    2849,
                    3489,
                    3490,
                    3493,
                    3497,
                    3499,
                    2862,
                    2863,
                    2864,
                    3981,
                    3449,
                    2892,
                    3450,
                    2896,
                    3960,
                    2902,
                    2904,
                    3420,
                    3421,
                    3426,
                    2915,
                    3454,
                    2917,
                    3429,
                    2796,
                    3437,
                    2926,
                    2799,
                    3439,
                    2801,
                    3440,
                    3442,
                    2804,
                    2808,
                    3321,
                    3322,
                    3323,
                    3452,
                    638,
                    639
                ],
                "buf.getvalue": [
                    680,
                    659,
                    692,
                    638
                ],
                "repr_width": [
                    641,
                    639
                ],
                "max": [
                    2326,
                    639
                ],
                "l": [
                    639
                ],
                "value.split": [
                    639
                ],
                "info_repr_option": [
                    648,
                    647
                ],
                "self._repr_fits_horizontal_": [
                    649
                ],
                "self._repr_fits_vertical_": [
                    649
                ],
                "self._info_repr": [
                    688,
                    657
                ],
                "self.info": [
                    690,
                    658
                ],
                "min_rows": [
                    673,
                    803,
                    717,
                    662,
                    698
                ],
                "max_cols": [
                    674,
                    2147,
                    805,
                    2313,
                    2314,
                    718,
                    2319,
                    2322,
                    663,
                    699
                ],
                "max_colwidth": [
                    664,
                    676,
                    790
                ],
                "show_dimensions": [
                    2148,
                    677,
                    806,
                    719,
                    665,
                    700
                ],
                "_": [
                    7105,
                    3482,
                    667,
                    4367
                ],
                "self.to_string": [
                    670
                ],
                "val": [
                    692,
                    693,
                    694
                ],
                "replace": [
                    3979,
                    692
                ],
                "val.replace": [
                    693
                ],
                "formatter": [
                    810,
                    2154,
                    724,
                    2132,
                    791,
                    702
                ],
                "fmt.DataFrameFormatter": [
                    2132,
                    702,
                    791
                ],
                "fmt": [
                    736,
                    2307,
                    745,
                    746,
                    2129,
                    2132,
                    2069,
                    791,
                    2392,
                    702
                ],
                "formatter.to_html": [
                    2154,
                    724
                ],
                "FilePathOrBuffer": [
                    739
                ],
                "Sequence": [
                    740,
                    742,
                    4632,
                    4587,
                    4184
                ],
                "Union": [
                    742,
                    4632,
                    4587,
                    4588,
                    5967,
                    6320,
                    6322,
                    6323,
                    4184,
                    4633
                ],
                "fmt.formatters_type": [
                    745
                ],
                "fmt.float_format_type": [
                    746
                ],
                "option_context": [
                    790
                ],
                "col_space": [
                    794,
                    2135
                ],
                "na_rep": [
                    2136,
                    795
                ],
                "formatters": [
                    2137,
                    796
                ],
                "float_format": [
                    2138,
                    797
                ],
                "sparsify": [
                    2139,
                    798
                ],
                "justify": [
                    2129,
                    2140,
                    799
                ],
                "index_names": [
                    800,
                    1764,
                    1797,
                    1767,
                    1769,
                    1771,
                    1772,
                    1774,
                    1778,
                    1780,
                    2141
                ],
                "header": [
                    801,
                    2142
                ],
                "decimal": [
                    2149,
                    807
                ],
                "line_width": [
                    808
                ],
                "formatter.to_string": [
                    810
                ],
                "encoding": [
                    810,
                    2159
                ],
                "Substitution": [
                    736,
                    5632,
                    6403,
                    5768,
                    4745,
                    3947,
                    2060,
                    3664,
                    2069,
                    728,
                    4697,
                    6970
                ],
                "fmt.common_docstring": [
                    736,
                    2069
                ],
                "fmt.return_docstring": [
                    736,
                    2069
                ],
                "Styler": [
                    828
                ],
                "_shared_docs": [
                    3969,
                    5633,
                    6433,
                    5639,
                    5769,
                    6409,
                    4428,
                    880,
                    4432,
                    3988,
                    3637,
                    4436,
                    5527,
                    4440,
                    889,
                    6102,
                    6199,
                    830
                ],
                "self.columns.is_unique": [
                    1381,
                    3494,
                    6026,
                    2639,
                    882
                ],
                "hasattr": [
                    7637,
                    882,
                    1589,
                    1639
                ],
                "self._get_item_cache": [
                    2894,
                    2769,
                    2642,
                    884,
                    2749
                ],
                "i": [
                    7182,
                    7184,
                    7187,
                    7190,
                    7196,
                    7197,
                    4128,
                    4129,
                    1826,
                    2339,
                    2340,
                    4386,
                    4387,
                    8100,
                    8101,
                    2345,
                    2601,
                    4396,
                    4397,
                    5038,
                    4399,
                    2608,
                    5040,
                    7728,
                    2616,
                    2622,
                    7766,
                    3548,
                    3549,
                    1767,
                    1640,
                    1769,
                    1643,
                    887,
                    886,
                    1783,
                    1784,
                    1659
                ],
                "enumerate": [
                    2339,
                    4387,
                    8101,
                    1767,
                    4396,
                    7182,
                    7183,
                    3505,
                    886,
                    1783,
                    1659,
                    3548
                ],
                "self._ixs": [
                    887
                ],
                "Appender": [
                    3969,
                    5633,
                    5769,
                    4746,
                    6409,
                    3988,
                    6433,
                    3637,
                    6198,
                    6971,
                    4428,
                    4432,
                    3665,
                    4436,
                    4440,
                    4698,
                    3948,
                    880,
                    889
                ],
                "Iterable": [
                    881,
                    4679,
                    4383
                ],
                "Hashable": [
                    4632,
                    4587,
                    881,
                    4184,
                    4187,
                    4188
                ],
                "self.items": [
                    1408,
                    7105,
                    1390,
                    2479,
                    1392,
                    4688,
                    891
                ],
                "klass": [
                    2940,
                    940,
                    2941,
                    942
                ],
                "self._constructor_sliced": [
                    7947,
                    940,
                    2605,
                    7956,
                    2742,
                    2940
                ],
                "v": [
                    1408,
                    3393,
                    3394,
                    7105,
                    1416,
                    1611,
                    941,
                    1390,
                    942,
                    1392,
                    1614,
                    1783,
                    8152,
                    8154,
                    1659,
                    1822
                ],
                "zip": [
                    1412,
                    4389,
                    2825,
                    941,
                    1423,
                    4689,
                    7388,
                    3548,
                    1020,
                    1757,
                    1023
                ],
                "self.values": [
                    2723,
                    7590,
                    1289,
                    3627,
                    941,
                    7726,
                    3537,
                    7634,
                    7764,
                    5109,
                    8121,
                    1119
                ],
                "s": [
                    942,
                    943,
                    8151,
                    7092,
                    7093,
                    7094,
                    7863,
                    8152,
                    8159
                ],
                "fields": [
                    1009,
                    1019,
                    1012
                ],
                "arrays.append": [
                    4129,
                    4131,
                    4137,
                    4141,
                    1614,
                    4144,
                    1011,
                    4147,
                    4151
                ],
                "fields.insert": [
                    1012
                ],
                "arrays.extend": [
                    1015
                ],
                "self.iloc": [
                    3303,
                    8100,
                    2902,
                    1015
                ],
                "range": [
                    4128,
                    4136,
                    1015
                ],
                "name": [
                    4417,
                    1827,
                    1797,
                    1801,
                    1774,
                    4399,
                    4688,
                    1809,
                    1810,
                    4401,
                    4406,
                    1018,
                    1019,
                    4414
                ],
                "itertuple": [
                    1019,
                    1020
                ],
                "collections.namedtuple": [
                    1019
                ],
                "collections": [
                    8097,
                    1019
                ],
                "map": [
                    1020,
                    4689,
                    1401,
                    7388,
                    1757
                ],
                "itertuple._make": [
                    1020
                ],
                "other": [
                    6784,
                    6785,
                    6914,
                    6787,
                    5252,
                    5496,
                    6923,
                    6924,
                    6926,
                    5371,
                    6928,
                    6931,
                    5247,
                    6945,
                    6775,
                    6777,
                    6778,
                    6779,
                    7358,
                    7359,
                    6780,
                    7361,
                    7362,
                    3652,
                    5075,
                    1108,
                    1109,
                    1110,
                    1114,
                    6751,
                    1120,
                    6752,
                    6753,
                    5091,
                    6754,
                    5093,
                    1126,
                    1128,
                    5096,
                    1130,
                    5097,
                    6760,
                    6761,
                    6766,
                    5103,
                    6767,
                    5105,
                    7402,
                    1139,
                    5235,
                    5109,
                    5237,
                    5495,
                    5240,
                    1145,
                    5498,
                    5243,
                    5244,
                    6774,
                    5502,
                    1151
                ],
                "common": [
                    1113,
                    1114,
                    1109,
                    1110
                ],
                "self.columns.union": [
                    1109
                ],
                "other.index": [
                    6761,
                    5235,
                    1109,
                    1110
                ],
                "left": [
                    5088,
                    5089,
                    7362,
                    7365,
                    1128,
                    7370,
                    1131,
                    7371,
                    7374,
                    1135,
                    1137,
                    7378,
                    1113,
                    1115,
                    7388,
                    1118
                ],
                "self.reindex": [
                    2720,
                    1113,
                    6773
                ],
                "right": [
                    5088,
                    5089,
                    7362,
                    7366,
                    7370,
                    7371,
                    6991,
                    7375,
                    7378,
                    7388,
                    1114,
                    1116
                ],
                "other.reindex": [
                    1114,
                    6780,
                    6767
                ],
                "lvals": [
                    1121,
                    1123,
                    1128,
                    1131,
                    1133,
                    1115,
                    1119
                ],
                "left.values": [
                    1115,
                    7388
                ],
                "rvals": [
                    1120,
                    1121,
                    1123,
                    1128,
                    1131,
                    1132,
                    1133,
                    1116
                ],
                "right.values": [
                    7388,
                    1116
                ],
                "np.asarray": [
                    1120,
                    3499
                ],
                "lvals.shape": [
                    1121,
                    1123
                ],
                "rvals.shape": [
                    1121,
                    1123
                ],
                "self._constructor": [
                    5124,
                    4743,
                    7946,
                    7567,
                    7954,
                    7315,
                    2840,
                    2724,
                    7205,
                    6313,
                    3629,
                    5295,
                    7995,
                    7110,
                    4809,
                    8029,
                    1127,
                    1135,
                    2932
                ],
                "np.dot": [
                    1128,
                    1131,
                    1133
                ],
                "left.index": [
                    1128,
                    1137,
                    1131,
                    1135
                ],
                "other.columns": [
                    1128,
                    6779,
                    5247
                ],
                "result": [
                    5124,
                    2605,
                    7728,
                    7729,
                    2611,
                    2612,
                    2626,
                    2629,
                    2631,
                    7766,
                    7767,
                    1133,
                    1134,
                    1135,
                    1137,
                    5249,
                    5263,
                    2720,
                    2721,
                    2724,
                    2727,
                    5292,
                    5295,
                    2735,
                    2736,
                    2740,
                    2741,
                    2742,
                    2743,
                    2746,
                    2747,
                    1289,
                    1290,
                    6413,
                    7949,
                    6415,
                    7953,
                    6418,
                    7954,
                    6420,
                    7956,
                    7959,
                    7961,
                    6426,
                    6427,
                    6428,
                    7500,
                    7505,
                    7510,
                    7512,
                    7549,
                    7553,
                    7555,
                    6032,
                    6033,
                    6034,
                    6035,
                    6037,
                    7592,
                    5034,
                    2478,
                    5038,
                    5040,
                    5041,
                    7598,
                    2483,
                    2484,
                    2486,
                    7617,
                    7618,
                    7619,
                    7620,
                    5063,
                    7625,
                    5066,
                    5068,
                    5069,
                    7635,
                    7637,
                    7640,
                    3545,
                    7641,
                    3547,
                    7642,
                    3549,
                    3551,
                    3552,
                    7647,
                    3554,
                    4578,
                    7650,
                    4581,
                    7651,
                    4583
                ],
                "result.ndim": [
                    7953,
                    7618,
                    1134
                ],
                "type": [
                    2306,
                    4360,
                    4110,
                    3055,
                    1139,
                    8118,
                    2302,
                    1823
                ],
                "self.dot": [
                    1145
                ],
                "T": [
                    6437,
                    7177,
                    3470,
                    6767,
                    5109,
                    2583,
                    3452,
                    1151
                ],
                "self.T.dot": [
                    1151
                ],
                "self.T": [
                    6426,
                    6437,
                    1151
                ],
                "np.transpose": [
                    1151
                ],
                "orient": [
                    1409,
                    1221,
                    1222,
                    1419,
                    1229,
                    1389,
                    1391,
                    1393,
                    1427,
                    1407
                ],
                "orient.lower": [
                    1409,
                    1221,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "data.values": [
                    1225,
                    1228,
                    7625,
                    7631
                ],
                "_from_nested_dict": [
                    1226
                ],
                "data.keys": [
                    1228
                ],
                "cls": [
                    1666,
                    1835,
                    1581,
                    1586,
                    1235
                ],
                "classmethod": [
                    1832,
                    1537,
                    1156
                ],
                "warnings.warn": [
                    2697,
                    1382
                ],
                "warnings": [
                    2697,
                    1382
                ],
                "UserWarning": [
                    1384,
                    2699
                ],
                "into_c": [
                    1408,
                    1416,
                    1388,
                    1390,
                    1422,
                    1392,
                    1394
                ],
                "com.standardize_mapping": [
                    1388
                ],
                "com": [
                    1408,
                    2656,
                    3394,
                    2789,
                    1416,
                    2635,
                    1388,
                    3468,
                    2767,
                    1401,
                    2812
                ],
                "into": [
                    1388,
                    1390
                ],
                "startswith": [
                    1409,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "v.to_dict": [
                    1390
                ],
                "v.tolist": [
                    1392
                ],
                "self.index.tolist": [
                    1396
                ],
                "self.columns.tolist": [
                    1410,
                    1397
                ],
                "com.maybe_box_datetimelike": [
                    1408,
                    1401,
                    1416,
                    2767
                ],
                "t": [
                    1424,
                    1401,
                    1402,
                    1423
                ],
                "self.itertuples": [
                    1424,
                    1402,
                    1413
                ],
                "rows": [
                    1417,
                    1411
                ],
                "row": [
                    1416,
                    1417,
                    1412,
                    1413
                ],
                "row.items": [
                    1416
                ],
                "self.index.is_unique": [
                    1420
                ],
                "gbq.to_gbq": [
                    1523
                ],
                "gbq": [
                    1523
                ],
                "destination_table": [
                    1525
                ],
                "project_id": [
                    1526
                ],
                "chunksize": [
                    1527
                ],
                "reauth": [
                    1528
                ],
                "if_exists": [
                    1529
                ],
                "auth_local_webserver": [
                    1530
                ],
                "table_schema": [
                    1531
                ],
                "location": [
                    1532
                ],
                "progress_bar": [
                    1533
                ],
                "credentials": [
                    1534
                ],
                "is_iterator": [
                    1579,
                    2670
                ],
                "nrows": [
                    1594,
                    1580,
                    1597
                ],
                "first_row": [
                    1584,
                    1592,
                    1589,
                    1590
                ],
                "next": [
                    1584
                ],
                "StopIteration": [
                    1585
                ],
                "first_row.dtype.names": [
                    1589
                ],
                "first_row.dtype": [
                    1589,
                    1590
                ],
                "values.extend": [
                    1597
                ],
                "itertools.islice": [
                    1597
                ],
                "itertools": [
                    1597,
                    1774
                ],
                "arr_columns": [
                    1664,
                    1606,
                    1610,
                    1613,
                    1616,
                    1648,
                    1622,
                    1658,
                    1624,
                    1657,
                    1626,
                    1661,
                    1630
                ],
                "sorted": [
                    2373,
                    1606
                ],
                "data.items": [
                    1611,
                    8151
                ],
                "arr_columns.append": [
                    1613
                ],
                "reorder_arrays": [
                    1616
                ],
                "coerce_float": [
                    1624
                ],
                "exclude": [
                    1632,
                    1633,
                    3297,
                    1635,
                    3257,
                    3267,
                    3268,
                    3299,
                    3272,
                    1641,
                    3273,
                    1654,
                    1656,
                    1657,
                    3258,
                    3260,
                    1662
                ],
                "result_index": [
                    1664,
                    1637,
                    7402,
                    1643,
                    7403,
                    1645,
                    1651,
                    1653
                ],
                "columns.get_loc": [
                    1640
                ],
                "exclude.add": [
                    1641
                ],
                "index_data": [
                    1648,
                    1653
                ],
                "arr_columns.get_loc": [
                    1648,
                    1658
                ],
                "field": [
                    1648
                ],
                "KeyError": [
                    4686,
                    7088,
                    1649,
                    2898,
                    4561,
                    4116,
                    3541,
                    2774,
                    3543
                ],
                "ensure_index_from_sequences": [
                    4164,
                    1653
                ],
                "exclude.update": [
                    1654
                ],
                "any": [
                    5510,
                    3540,
                    3542,
                    1656,
                    3262
                ],
                "arr_exclude": [
                    1657,
                    1658,
                    1661
                ],
                "x": [
                    3266,
                    3267,
                    7385,
                    5357,
                    6649,
                    4720,
                    5361,
                    7570,
                    2356,
                    2358,
                    1657,
                    6650,
                    6651,
                    7359
                ],
                "to_remove": [
                    4154,
                    4133,
                    4171,
                    1658,
                    1659
                ],
                "col": [
                    4097,
                    5250,
                    4099,
                    5251,
                    5252,
                    4103,
                    4108,
                    4110,
                    5263,
                    4113,
                    5522,
                    5272,
                    2339,
                    8100,
                    2341,
                    4134,
                    4135,
                    4136,
                    4137,
                    4138,
                    4139,
                    2348,
                    4141,
                    4142,
                    2479,
                    4143,
                    4144,
                    4146,
                    4147,
                    5292,
                    7085,
                    7087,
                    4151,
                    4152,
                    8101,
                    4154,
                    2891,
                    2766,
                    2894,
                    4688,
                    2769,
                    2902,
                    2904,
                    2905,
                    8152,
                    8153,
                    8154,
                    2784,
                    2786,
                    1658,
                    5500,
                    5501,
                    5502
                ],
                "arr_columns.drop": [
                    1661
                ],
                "columns.drop": [
                    1662
                ],
                "ABCMultiIndex": [
                    4384,
                    7523,
                    5060,
                    3494,
                    1766,
                    4135,
                    4775,
                    4395,
                    3445,
                    1755,
                    2685,
                    4127
                ],
                "ix_vals": [
                    1761,
                    1757,
                    1759
                ],
                "self.index.values": [
                    1757,
                    1759
                ],
                "_internal_get_values": [
                    1776,
                    1761
                ],
                "c": [
                    1761,
                    4171,
                    4172,
                    7196,
                    2479,
                    1776,
                    1777,
                    7197,
                    7388,
                    7189,
                    7191,
                    7193,
                    7195,
                    3548,
                    3549
                ],
                "count": [
                    1763,
                    2343,
                    1769,
                    1770,
                    2345,
                    2348,
                    4564,
                    4567,
                    4569,
                    4571
                ],
                "self.index.names": [
                    4387,
                    1764,
                    4126
                ],
                "n": [
                    4386,
                    4387,
                    1767,
                    1768,
                    4136,
                    4137,
                    3531,
                    3532,
                    3536,
                    4918,
                    5018,
                    3547
                ],
                "names": [
                    4385,
                    4164,
                    1830,
                    4392,
                    4138,
                    1774,
                    4142,
                    4399,
                    1777,
                    4145,
                    4148,
                    4152,
                    4124,
                    4126
                ],
                "itertools.chain": [
                    1774
                ],
                "index_len": [
                    1826,
                    1795,
                    1780,
                    1799
                ],
                "formats": [
                    1824,
                    1830,
                    1781,
                    1822
                ],
                "dtype_mapping": [
                    1824,
                    1827,
                    1796,
                    1800,
                    1808,
                    1809,
                    1810,
                    1811,
                    1812,
                    1814,
                    1821,
                    1823
                ],
                "index_dtypes": [
                    1796
                ],
                "column_dtypes": [
                    1800
                ],
                "is_dict_like": [
                    1808
                ],
                "formats.append": [
                    1824,
                    1822
                ],
                "v.dtype": [
                    1822
                ],
                "np.dtype": [
                    1823
                ],
                "element": [
                    1826,
                    1827
                ],
                "msg": [
                    7586,
                    1827,
                    1828,
                    3055,
                    3056,
                    7582
                ],
                "np.rec.fromarrays": [
                    1830
                ],
                "np.rec": [
                    1830
                ],
                "kwargs": [
                    1928,
                    2057,
                    6415,
                    1938,
                    6419,
                    2581,
                    6426,
                    1949,
                    6429,
                    6437,
                    6438,
                    7096,
                    3393,
                    3164,
                    3165,
                    3678,
                    3679,
                    3681,
                    3170,
                    3171,
                    3172,
                    3173,
                    3682,
                    3683,
                    3940,
                    3941,
                    3943,
                    3944,
                    3945,
                    3057,
                    3058,
                    3059,
                    3966
                ],
                "version": [
                    1929,
                    1931
                ],
                "convert_strl": [
                    1938,
                    1932
                ],
                "writer": [
                    1940,
                    1951
                ],
                "statawriter": [
                    1940
                ],
                "path": [
                    2052,
                    1941,
                    1965
                ],
                "convert_dates": [
                    1943
                ],
                "byteorder": [
                    1944
                ],
                "time_stamp": [
                    1945
                ],
                "data_label": [
                    1946
                ],
                "write_index": [
                    1947
                ],
                "variable_labels": [
                    1948
                ],
                "writer.write_file": [
                    1951
                ],
                "deprecate_kwarg": [
                    1953,
                    1837,
                    1967
                ],
                "to_feather": [
                    1965
                ],
                "to_parquet": [
                    2050
                ],
                "engine": [
                    2053,
                    2895,
                    2896,
                    2770,
                    2773
                ],
                "compression": [
                    2054
                ],
                "partition_cols": [
                    2056
                ],
                "fmt._VALID_JUSTIFY_PARAMETERS": [
                    2129
                ],
                "bold_rows": [
                    2144
                ],
                "escape": [
                    2145
                ],
                "table_id": [
                    2150
                ],
                "render_links": [
                    2151
                ],
                "classes": [
                    2156
                ],
                "notebook": [
                    2157
                ],
                "border": [
                    2158
                ],
                "sys.stdout": [
                    2298
                ],
                "sys": [
                    2298
                ],
                "lines": [
                    2306,
                    2307,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2392,
                    2300,
                    2302,
                    2303
                ],
                "lines.append": [
                    2306,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2302,
                    2303
                ],
                "self.index._summary": [
                    2303
                ],
                "__name__": [
                    2306,
                    8118
                ],
                "fmt.buffer_put_lines": [
                    2392,
                    2307
                ],
                "cols": [
                    7205,
                    2310,
                    7301,
                    7302,
                    7944,
                    7946,
                    7179,
                    7947,
                    7311,
                    7315,
                    7166,
                    3448,
                    3449,
                    3450,
                    2332,
                    2334,
                    7167
                ],
                "null_counts": [
                    2321,
                    2318
                ],
                "show_counts": [
                    2344,
                    2321,
                    2330,
                    2319
                ],
                "exceeds_info_cols": [
                    2322,
                    2367
                ],
                "space": [
                    2348,
                    2326,
                    8159
                ],
                "pprint_thing": [
                    2341,
                    2326
                ],
                "counts": [
                    2372,
                    2373,
                    2345,
                    7547,
                    2388,
                    7509,
                    7510,
                    2327,
                    2331,
                    2332,
                    7549,
                    2334
                ],
                "tmpl": [
                    2336,
                    2329,
                    2348
                ],
                "self.count": [
                    2331
                ],
                "AssertionError": [
                    7993,
                    8027,
                    2333
                ],
                "dtypes": [
                    2338,
                    3268,
                    2340,
                    2373,
                    2374,
                    3269
                ],
                "self.dtypes": [
                    2338,
                    3295,
                    3301,
                    3289,
                    7647
                ],
                "dtypes.iloc": [
                    2340
                ],
                "counts.iloc": [
                    2345
                ],
                "_put_str": [
                    2348
                ],
                "tmpl.format": [
                    2348
                ],
                "self.columns._summary": [
                    2352
                ],
                "num": [
                    7377,
                    7380,
                    2357,
                    2358,
                    2359,
                    2360
                ],
                "size_qualifier": [
                    2380,
                    2389,
                    2358,
                    2391,
                    2360
                ],
                "verbose": [
                    2362,
                    2364
                ],
                "_verbose_repr": [
                    2370,
                    2363
                ],
                "_non_verbose_repr": [
                    2368,
                    2365
                ],
                "self._data.get_dtype_counts": [
                    2372
                ],
                "counts.items": [
                    2373
                ],
                "join": [
                    6033,
                    5490,
                    3653,
                    2374
                ],
                "memory_usage": [
                    2376,
                    2377,
                    2378,
                    2381
                ],
                "deep": [
                    2382,
                    2479,
                    2387,
                    2483,
                    2390
                ],
                "self.index._is_memory_usage_qualified": [
                    2388
                ],
                "mem_usage": [
                    2390,
                    2391
                ],
                "sum": [
                    7505,
                    7377,
                    7508,
                    2390
                ],
                "self.memory_usage": [
                    2390
                ],
                "_sizeof_fmt": [
                    2391
                ],
                "c.memory_usage": [
                    2479
                ],
                "append": [
                    6765,
                    2483,
                    4125
                ],
                "self.index.memory_usage": [
                    2483
                ],
                "nv.validate_transpose": [
                    2580
                ],
                "nv": [
                    7096,
                    2580
                ],
                "args": [
                    3940,
                    6437,
                    6438,
                    6415,
                    6419,
                    2580,
                    7096,
                    6584,
                    6426,
                    6429,
                    3678
                ],
                "transpose": [
                    2581,
                    2583
                ],
                "super": [
                    3683,
                    3651,
                    6438,
                    3817,
                    3945,
                    3979,
                    4430,
                    4434,
                    2581,
                    3990,
                    3959,
                    4438,
                    4442,
                    6429
                ],
                "axis": [
                    7936,
                    4737,
                    7937,
                    7560,
                    6411,
                    7691,
                    7565,
                    7566,
                    6415,
                    7570,
                    6419,
                    3991,
                    6423,
                    7578,
                    4763,
                    4764,
                    6435,
                    6436,
                    6311,
                    2600,
                    7594,
                    5036,
                    5037,
                    7725,
                    7726,
                    7727,
                    7729,
                    7603,
                    7987,
                    6581,
                    7988,
                    7990,
                    7865,
                    7993,
                    7355,
                    7359,
                    4800,
                    7489,
                    5059,
                    4548,
                    5060,
                    3654,
                    7364,
                    4552,
                    4553,
                    5065,
                    7491,
                    7499,
                    7500,
                    7626,
                    7632,
                    7505,
                    7763,
                    7508,
                    7764,
                    7510,
                    7765,
                    7767,
                    8021,
                    8022,
                    8024,
                    8027,
                    7646,
                    7520,
                    7521,
                    4578,
                    4709,
                    7525,
                    7401,
                    3819,
                    4720,
                    7536,
                    4727,
                    3962,
                    7551
                ],
                "new_values": [
                    2723,
                    2725,
                    2601,
                    3626,
                    2604,
                    3629,
                    2606,
                    2609
                ],
                "self._data.fast_xs": [
                    2601
                ],
                "new_values.base": [
                    2604
                ],
                "new_values.dtype": [
                    2609
                ],
                "result._set_is_copy": [
                    2746,
                    2611
                ],
                "label": [
                    2616,
                    2626,
                    2629
                ],
                "self._data.iget": [
                    3504,
                    2622
                ],
                "np.nan": [
                    2625,
                    7308,
                    2926,
                    4367,
                    7406,
                    7728,
                    7189,
                    7766,
                    3672,
                    3582,
                    4351
                ],
                "object": [
                    2625,
                    6651,
                    6765
                ],
                "self._box_col_values": [
                    2626,
                    2934
                ],
                "result._set_as_cached": [
                    2629
                ],
                "key": [
                    2817,
                    2818,
                    2823,
                    2696,
                    2825,
                    2829,
                    2702,
                    2704,
                    2709,
                    2710,
                    2837,
                    2838,
                    2840,
                    2842,
                    2715,
                    2718,
                    2849,
                    3493,
                    3495,
                    2863,
                    2864,
                    2743,
                    2749,
                    3448,
                    6341,
                    2634,
                    2635,
                    2637,
                    2639,
                    2641,
                    2642,
                    2645,
                    2652,
                    2653,
                    2656,
                    2657,
                    2661,
                    2789,
                    2792,
                    2665,
                    2666,
                    2670,
                    2671,
                    2672,
                    2798,
                    2799,
                    2800,
                    2801,
                    2804,
                    2930,
                    3445,
                    2808,
                    3446,
                    2812,
                    2813,
                    2686,
                    2815
                ],
                "lib.item_from_zerodim": [
                    2634
                ],
                "lib": [
                    3552,
                    2634,
                    7547,
                    4341,
                    6650,
                    6651
                ],
                "com.apply_if_callable": [
                    3394,
                    2635,
                    2789
                ],
                "is_hashable": [
                    2637
                ],
                "self.columns.nlevels": [
                    2640,
                    4403,
                    2664,
                    4412
                ],
                "self._getitem_multilevel": [
                    2665,
                    2641
                ],
                "indexer": [
                    4737,
                    2818,
                    3586,
                    2820,
                    3590,
                    2828,
                    2832,
                    2710,
                    2711,
                    3606,
                    3610,
                    4771,
                    3625,
                    4778,
                    3627,
                    4796,
                    4801,
                    2645,
                    2646,
                    2649,
                    2792,
                    2793,
                    2666,
                    2667,
                    2668,
                    2796,
                    2672,
                    4721,
                    4722,
                    2675,
                    2676,
                    2678,
                    4732
                ],
                "convert_to_index_sliceable": [
                    2792,
                    2645
                ],
                "self._slice": [
                    2649
                ],
                "self.where": [
                    2653
                ],
                "com.is_bool_indexer": [
                    2656,
                    2812
                ],
                "self._getitem_bool_array": [
                    2657
                ],
                "is_single_key": [
                    2680,
                    2661,
                    2663
                ],
                "tuple": [
                    6784,
                    4673,
                    3172,
                    2661,
                    4548,
                    6024,
                    5962,
                    2737,
                    4401,
                    3285,
                    4376,
                    4729,
                    4414
                ],
                "self.columns.get_loc": [
                    2784,
                    2666,
                    2930,
                    3446,
                    2715
                ],
                "is_integer": [
                    2667,
                    7103
                ],
                "self.loc._get_listlike_indexer": [
                    2672,
                    2828
                ],
                "self.loc": [
                    4578,
                    2820,
                    2828,
                    2672,
                    2832,
                    2904,
                    3062,
                    2808
                ],
                "np.where": [
                    2676
                ],
                "self.take": [
                    4562,
                    2678,
                    2711
                ],
                "data.shape": [
                    2685
                ],
                "key.index.equals": [
                    2696
                ],
                "key.index": [
                    2696
                ],
                "check_bool_indexer": [
                    2817,
                    2709
                ],
                "key.nonzero": [
                    2818,
                    2710
                ],
                "loc": [
                    2723,
                    3323,
                    3446,
                    3447,
                    3448,
                    2715,
                    2716,
                    2717
                ],
                "slice": [
                    2832,
                    2716,
                    3447
                ],
                "new_columns": [
                    2720,
                    5250,
                    3622,
                    3629,
                    5295,
                    3632,
                    3606,
                    3607,
                    3610,
                    2717,
                    2718,
                    5247
                ],
                "result_columns": [
                    2721,
                    2725,
                    2718
                ],
                "maybe_droplevels": [
                    3448,
                    2718
                ],
                "self._is_mixed_type": [
                    3536,
                    2719
                ],
                "result.columns": [
                    2721,
                    5068,
                    2735,
                    2736,
                    5040
                ],
                "result.__finalize__": [
                    2727
                ],
                "top": [
                    2736,
                    2737,
                    2738,
                    2739
                ],
                "takeable": [
                    2890,
                    2901,
                    2765
                ],
                "series": [
                    5251,
                    5285,
                    5254,
                    5257,
                    5289,
                    2891,
                    2892,
                    2766,
                    2767,
                    2894,
                    2769,
                    2896,
                    5267,
                    2773,
                    5269,
                    5277
                ],
                "self._iget_item_cache": [
                    2891,
                    2766
                ],
                "series._values": [
                    2896,
                    2773,
                    2767
                ],
                "self.index._engine": [
                    2770,
                    2895
                ],
                "engine.get_value": [
                    2773
                ],
                "self.index.nlevels": [
                    2776,
                    4128,
                    4379
                ],
                "self.index.get_loc": [
                    2785
                ],
                "self._get_value": [
                    2786,
                    3549
                ],
                "self._setitem_slice": [
                    2796
                ],
                "self._setitem_frame": [
                    2799
                ],
                "self._setitem_array": [
                    2801
                ],
                "self._set_item": [
                    2804
                ],
                "self._check_setitem_copy": [
                    2848,
                    2819,
                    2831,
                    2870,
                    2807
                ],
                "self.loc._setitem_with_indexer": [
                    2832,
                    2820
                ],
                "value.columns": [
                    2825,
                    3449,
                    2823
                ],
                "k1": [
                    2825,
                    2826
                ],
                "k2": [
                    2825,
                    2826
                ],
                "key.shape": [
                    2838
                ],
                "self.shape": [
                    8121,
                    3277,
                    2838
                ],
                "self._construct_axes_dict": [
                    2840
                ],
                "key.values.size": [
                    2842
                ],
                "key.values": [
                    2842
                ],
                "is_bool_dtype": [
                    2842
                ],
                "self._check_inplace_setting": [
                    2847
                ],
                "self._where": [
                    2849
                ],
                "self._ensure_valid_index": [
                    3321,
                    2862
                ],
                "self._sanitize_column": [
                    3322,
                    2863
                ],
                "NDFrame._set_item": [
                    2864
                ],
                "series._set_value": [
                    2892
                ],
                "engine.set_value": [
                    2896
                ],
                "self._item_cache.pop": [
                    2905
                ],
                "self._item_cache": [
                    2905
                ],
                "self._data.reindex_axis": [
                    2925
                ],
                "value.index.copy": [
                    2926
                ],
                "value.index": [
                    3420,
                    3429,
                    2926
                ],
                "items": [
                    2930,
                    2932,
                    2941,
                    2934
                ],
                "values.ndim": [
                    2931
                ],
                "values.T": [
                    2932
                ],
                "inplace": [
                    4740,
                    4618,
                    4621,
                    3982,
                    4118,
                    4761,
                    4791,
                    4547,
                    4420,
                    4806,
                    4179,
                    3163,
                    4580,
                    3173,
                    4708,
                    4331,
                    4332,
                    3053,
                    3823,
                    4086,
                    3963,
                    3068
                ],
                "validate_bool_kwarg": [
                    4547,
                    4708,
                    4618,
                    4331,
                    3053,
                    4086,
                    4761,
                    3163
                ],
                "expr": [
                    3059,
                    3173,
                    3054,
                    3055
                ],
                "kwargs.pop": [
                    3681,
                    3682,
                    3943,
                    3944,
                    3057,
                    3164,
                    3165
                ],
                "res": [
                    6952,
                    6955,
                    3059,
                    3062,
                    3066
                ],
                "self.eval": [
                    3059
                ],
                "new_data": [
                    4736,
                    4741,
                    4743,
                    4623,
                    4624,
                    6312,
                    6313,
                    7983,
                    7985,
                    7989,
                    7991,
                    7995,
                    4801,
                    4804,
                    4807,
                    4809,
                    8017,
                    8019,
                    8150,
                    8023,
                    8025,
                    8153,
                    8154,
                    8155,
                    8029,
                    5093,
                    5097,
                    5098,
                    5105,
                    5109,
                    3062,
                    5110,
                    3066,
                    3069,
                    3071
                ],
                "self._update_inplace": [
                    4581,
                    4741,
                    4807,
                    4624,
                    3069
                ],
                "resolvers": [
                    3172,
                    3169,
                    3164,
                    3166
                ],
                "index_resolvers": [
                    3169,
                    3167
                ],
                "self._get_index_resolvers": [
                    3167
                ],
                "column_resolvers": [
                    3168,
                    3169
                ],
                "self._get_space_character_free_column_resolvers": [
                    3168
                ],
                "kwargs.get": [
                    3172
                ],
                "_eval": [
                    3173
                ],
                "include": [
                    3266,
                    3268,
                    3272,
                    3273,
                    3255,
                    3256,
                    3291,
                    3260,
                    3293
                ],
                "selection": [
                    3260,
                    3262
                ],
                "infer_dtype_from_object": [
                    3266,
                    3267
                ],
                "invalidate_string_dtypes": [
                    3269
                ],
                "include.isdisjoint": [
                    3272
                ],
                "keep_these": [
                    3301,
                    3303,
                    3277,
                    3295
                ],
                "np.full": [
                    3277
                ],
                "extracted_dtypes": [
                    3282,
                    3287
                ],
                "unique_dtype": [
                    3283,
                    3284,
                    3285
                ],
                "unique_dtypes": [
                    3289,
                    3299,
                    3284,
                    3293
                ],
                "issubclass": [
                    4369,
                    4363,
                    3285
                ],
                "unique_dtype.type": [
                    3285
                ],
                "dtypes_set": [
                    3285
                ],
                "self.dtypes.unique": [
                    3289
                ],
                "included_dtypes": [
                    3292,
                    3295
                ],
                "extract_unique_dtypes_from_dtypes_set": [
                    3298,
                    3292
                ],
                "self.dtypes.isin": [
                    3301,
                    3295
                ],
                "excluded_dtypes": [
                    3298,
                    3301
                ],
                "keep_these.values": [
                    3303
                ],
                "column": [
                    6024,
                    6032,
                    6033,
                    3322,
                    3323
                ],
                "self._data.insert": [
                    3323
                ],
                "allow_duplicates": [
                    3323
                ],
                "self.copy": [
                    5241,
                    5063,
                    4616,
                    5034,
                    4335,
                    4121,
                    4794,
                    3391
                ],
                "kwargs.items": [
                    3393
                ],
                "value.index.equals": [
                    3420
                ],
                "value._values.copy": [
                    3421
                ],
                "value._values": [
                    3421
                ],
                "_values": [
                    3426,
                    5501,
                    5502,
                    4151
                ],
                "value.reindex": [
                    3426,
                    3450
                ],
                "value.index.is_unique": [
                    3429
                ],
                "err": [
                    3431
                ],
                "reindexer": [
                    3440,
                    3452
                ],
                "cols.equals": [
                    3449
                ],
                "value.copy": [
                    3472,
                    3457,
                    3474,
                    3470
                ],
                "sanitize_index": [
                    3458,
                    3463
                ],
                "is_sequence": [
                    4713,
                    3460
                ],
                "maybe_convert_platform": [
                    3466
                ],
                "com.asarray_tuplesafe": [
                    3468
                ],
                "value.ndim": [
                    3469,
                    3493
                ],
                "is_object_dtype": [
                    7637,
                    7594,
                    3477,
                    3551
                ],
                "value.dtype": [
                    3477
                ],
                "maybe_infer_to_datetimelike": [
                    3478
                ],
                "infer_dtype": [
                    3482,
                    3486
                ],
                "infer_dtype_from_scalar": [
                    3482
                ],
                "maybe_cast_to_datetime": [
                    3486
                ],
                "is_extension_array_dtype": [
                    3489,
                    5350
                ],
                "broadcast": [
                    3493
                ],
                "existing_piece": [
                    3496,
                    3497,
                    3495
                ],
                "np.tile": [
                    3497
                ],
                "existing_piece.columns": [
                    3497
                ],
                "np.atleast_2d": [
                    3499
                ],
                "item": [
                    3504,
                    3505
                ],
                "idx": [
                    7205,
                    7302,
                    3504,
                    3505,
                    7315,
                    7167
                ],
                "row_labels": [
                    3538,
                    3531,
                    3548
                ],
                "col_labels": [
                    3548,
                    3539,
                    3532
                ],
                "thresh": [
                    3536,
                    4567,
                    4566,
                    3535
                ],
                "ridx": [
                    3544,
                    3538,
                    3540
                ],
                "self.index.get_indexer": [
                    3538
                ],
                "cidx": [
                    3544,
                    3539,
                    3542
                ],
                "self.columns.get_indexer": [
                    3539,
                    6779
                ],
                "flat_index": [
                    3544,
                    3545
                ],
                "values.flat": [
                    3545
                ],
                "np.empty": [
                    3547,
                    7180,
                    7307,
                    4350
                ],
                "r": [
                    3548,
                    3549
                ],
                "lib.maybe_convert_objects": [
                    3552,
                    4341
                ],
                "frame": [
                    4119,
                    4121,
                    6963,
                    6965,
                    4151,
                    7494,
                    7496,
                    7499,
                    4172,
                    7500,
                    7502,
                    4177,
                    7505,
                    4180,
                    7508,
                    7510,
                    7516,
                    7518,
                    7520,
                    7521,
                    3560,
                    7528,
                    7531,
                    3564,
                    7534,
                    3570,
                    3574
                ],
                "axes": [
                    3940,
                    3621,
                    3622,
                    3941,
                    3562,
                    3568,
                    3678,
                    3679
                ],
                "frame._reindex_columns": [
                    3564
                ],
                "method": [
                    7393,
                    7170,
                    3587,
                    7172,
                    7202,
                    7174,
                    7385,
                    7368,
                    3658,
                    7178,
                    3565,
                    3985,
                    3571,
                    7382,
                    3607,
                    3961,
                    7359
                ],
                "level": [
                    3587,
                    3607,
                    4376,
                    4377,
                    4378,
                    4379,
                    4380,
                    4375,
                    4769,
                    4772,
                    4397,
                    7490,
                    7491,
                    3655,
                    5962,
                    5963,
                    5965,
                    5075,
                    6100,
                    3565,
                    3822,
                    3571,
                    7541,
                    7542,
                    7544,
                    7545,
                    7546
                ],
                "limit": [
                    3587,
                    3659,
                    3565,
                    3983,
                    3571,
                    3607,
                    3964
                ],
                "tolerance": [
                    3587,
                    3571,
                    3565,
                    3607
                ],
                "frame._reindex_index": [
                    3570
                ],
                "new_index": [
                    3586,
                    3587,
                    4419,
                    3621,
                    3590,
                    3629,
                    5295,
                    3632,
                    4374,
                    5238,
                    5240,
                    4380
                ],
                "self.index.reindex": [
                    3586,
                    3621
                ],
                "self._reindex_with_indexers": [
                    3609,
                    3589,
                    3631
                ],
                "self.columns.reindex": [
                    3622,
                    3606
                ],
                "row_indexer": [
                    3624,
                    3625,
                    3632,
                    3621
                ],
                "col_indexer": [
                    3624,
                    3625,
                    3632,
                    3622
                ],
                "algorithms.take_2d_multi": [
                    3626
                ],
                "algorithms": [
                    3626,
                    4918,
                    4663,
                    5017,
                    8121
                ],
                "align": [
                    3651
                ],
                "fill_axis": [
                    3660
                ],
                "broadcast_axis": [
                    3661
                ],
                "validate_axis_style_args": [
                    3940,
                    3678
                ],
                "kwargs.update": [
                    3941,
                    3679
                ],
                "reindex": [
                    3683
                ],
                "NDFrame.reindex.__doc__": [
                    3665
                ],
                "NDFrame.reindex": [
                    3665
                ],
                "rewrite_axis_style_signature": [
                    3666,
                    3827
                ],
                "drop": [
                    3817,
                    7398,
                    4382,
                    4153
                ],
                "labels": [
                    4353,
                    7561,
                    7566,
                    4764,
                    4768,
                    4771,
                    4775,
                    4779,
                    4788,
                    4789,
                    4663,
                    4666,
                    4797,
                    7626,
                    7632,
                    4689,
                    4691,
                    7650,
                    3818,
                    4344,
                    4345
                ],
                "errors": [
                    3824,
                    5507,
                    5492
                ],
                "rename": [
                    3945
                ],
                "fillna": [
                    3959
                ],
                "downcast": [
                    3965
                ],
                "NDFrame.fillna.__doc__": [
                    3948
                ],
                "NDFrame.fillna": [
                    3948
                ],
                "to_replace": [
                    3980
                ],
                "regex": [
                    3984
                ],
                "shift": [
                    3990
                ],
                "periods": [
                    6312,
                    3991
                ],
                "freq": [
                    8023,
                    3991,
                    7989,
                    7991,
                    8025
                ],
                "keys": [
                    4097,
                    4134,
                    4720,
                    4721,
                    4087,
                    4088
                ],
                "err_msg": [
                    4104,
                    4090,
                    4110
                ],
                "missing": [
                    4096,
                    4113,
                    4115,
                    4116,
                    4412,
                    4413
                ],
                "ABCIndexClass": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "ABCSeries": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "abc.Iterator": [
                    4146,
                    4099
                ],
                "found": [
                    4112,
                    4108
                ],
                "missing.append": [
                    4113
                ],
                "self.index._get_level_values": [
                    4129
                ],
                "col.nlevels": [
                    4136
                ],
                "col._get_level_values": [
                    4137
                ],
                "names.extend": [
                    4138
                ],
                "col.names": [
                    4138
                ],
                "names.append": [
                    4152,
                    4145,
                    4148,
                    4142
                ],
                "col.name": [
                    4142
                ],
                "to_remove.append": [
                    4154
                ],
                "verify_integrity": [
                    4166,
                    6791
                ],
                "index.is_unique": [
                    4166
                ],
                "duplicates": [
                    4168,
                    4167
                ],
                "unique": [
                    4167
                ],
                "index.duplicated": [
                    4167
                ],
                "index._cleanup": [
                    4175
                ],
                "frame.index": [
                    4177
                ],
                "new_obj": [
                    4417,
                    4419,
                    4421,
                    4333,
                    4335,
                    4374
                ],
                "index._values": [
                    4338
                ],
                "PeriodIndex": [
                    4339
                ],
                "DatetimeIndex": [
                    4339
                ],
                "np.object_": [
                    4340
                ],
                "mask.all": [
                    4349,
                    5519
                ],
                "values.fill": [
                    4351
                ],
                "values.take": [
                    4353
                ],
                "values_type": [
                    4360,
                    4369,
                    4370,
                    4363
                ],
                "values_dtype": [
                    4361,
                    4370
                ],
                "DatetimeLikeArray": [
                    4369,
                    4363
                ],
                "values._data": [
                    4364
                ],
                "maybe_upcast_putmask": [
                    4367
                ],
                "self.index._get_level_number": [
                    4378
                ],
                "lev": [
                    4416,
                    4378,
                    4396
                ],
                "self.index.droplevel": [
                    4380
                ],
                "to_insert": [
                    4393,
                    4396,
                    4389,
                    4383
                ],
                "Any": [
                    4383
                ],
                "self.index.levels": [
                    4389
                ],
                "self.index.codes": [
                    4389
                ],
                "default": [
                    4392,
                    4391
                ],
                "self.index.name": [
                    4392,
                    6760
                ],
                "multi_col": [
                    4400,
                    4395
                ],
                "lab": [
                    4416,
                    4396
                ],
                "reversed": [
                    4396
                ],
                "col_name": [
                    4408,
                    4401,
                    4411,
                    4403
                ],
                "col_fill": [
                    4408,
                    4402,
                    4411,
                    4413
                ],
                "lev_num": [
                    4410,
                    4411
                ],
                "self.columns._get_level_number": [
                    4410
                ],
                "col_level": [
                    4410,
                    6220
                ],
                "name_lst": [
                    4411,
                    4412,
                    4413,
                    4414
                ],
                "level_values": [
                    4416,
                    4417
                ],
                "_maybe_casted_values": [
                    4416
                ],
                "new_obj.insert": [
                    4417
                ],
                "new_obj.index": [
                    4419
                ],
                "isna": [
                    5505,
                    5257,
                    5258,
                    5514,
                    5357,
                    4430
                ],
                "isnull": [
                    4434
                ],
                "notna": [
                    5508,
                    5509,
                    7305,
                    7531,
                    5516,
                    7534,
                    7505,
                    7508,
                    4438,
                    7641
                ],
                "notnull": [
                    4442
                ],
                "self._get_axis_number": [
                    7936,
                    7489,
                    5059,
                    6435,
                    4709,
                    4552,
                    6411,
                    5036,
                    7355,
                    7565,
                    7725,
                    7763,
                    7987,
                    8021,
                    4763
                ],
                "agg_axis": [
                    7521,
                    4553,
                    4557,
                    4562,
                    4564,
                    4569,
                    7549
                ],
                "agg_obj": [
                    4569,
                    4562,
                    4555,
                    4564
                ],
                "subset": [
                    4619,
                    4668,
                    4669,
                    6335,
                    4672,
                    4673,
                    4674,
                    6336,
                    4676,
                    6337,
                    6338,
                    4679,
                    6341,
                    4556,
                    4684,
                    4558,
                    4671,
                    4688,
                    4561
                ],
                "ax": [
                    4557,
                    4558
                ],
                "self._get_axis": [
                    5060,
                    4557,
                    7727,
                    7765,
                    4764
                ],
                "indices": [
                    7726,
                    4558,
                    7728,
                    4559,
                    4562,
                    7764,
                    7766
                ],
                "ax.get_indexer_for": [
                    4558
                ],
                "check": [
                    4560,
                    4561,
                    4559
                ],
                "check.any": [
                    4560
                ],
                "np.compress": [
                    4561
                ],
                "agg_obj.count": [
                    4564
                ],
                "how": [
                    6914,
                    6951,
                    6426,
                    7991,
                    6958,
                    6415,
                    6992,
                    6933,
                    6965,
                    7989,
                    4568,
                    4570,
                    6428,
                    4573,
                    4574
                ],
                "agg_obj._get_axis": [
                    4569
                ],
                "self.empty": [
                    4659,
                    5243,
                    4615
                ],
                "duplicated": [
                    4626,
                    4619,
                    4622
                ],
                "self.duplicated": [
                    4619
                ],
                "keep": [
                    5018,
                    4619,
                    4692,
                    4918
                ],
                "inds": [
                    4622,
                    4623
                ],
                "_ndarray_values.nonzero": [
                    4622
                ],
                "_ndarray_values": [
                    4622
                ],
                "self._data.take": [
                    4736,
                    4801,
                    4623
                ],
                "shape": [
                    4689,
                    4666,
                    4691,
                    4663
                ],
                "algorithms.factorize": [
                    4663
                ],
                "vals": [
                    7085,
                    7087,
                    4688,
                    4689,
                    7089,
                    4664
                ],
                "_SIZE_HINT_LIMIT": [
                    4664
                ],
                "labels.astype": [
                    4666
                ],
                "np.iterable": [
                    4671
                ],
                "cast": [
                    4679
                ],
                "diff": [
                    4684,
                    4685,
                    4686
                ],
                "difference": [
                    4684
                ],
                "diff.empty": [
                    4685
                ],
                "col.values": [
                    4688
                ],
                "f": [
                    7592,
                    7625,
                    4689,
                    7635,
                    7865,
                    7615
                ],
                "ids": [
                    4691,
                    4692
                ],
                "get_group_index": [
                    4691
                ],
                "duplicated_int64": [
                    4692
                ],
                "by": [
                    4711,
                    4712,
                    4713,
                    4715,
                    4717,
                    4720,
                    4726,
                    4727
                ],
                "ascending": [
                    4772,
                    4797,
                    4713,
                    4715,
                    4780,
                    4721,
                    4788,
                    4789,
                    4729,
                    4730,
                    4733
                ],
                "self._get_label_or_level_values": [
                    4720,
                    4727
                ],
                "lexsort_indexer": [
                    4721,
                    4778
                ],
                "na_position": [
                    4797,
                    4721,
                    4733,
                    4781
                ],
                "ensure_platform_int": [
                    4722
                ],
                "nargsort": [
                    4796,
                    4732
                ],
                "kind": [
                    4733,
                    4797
                ],
                "self._get_block_manager_axis": [
                    4800,
                    4737,
                    6311
                ],
                "__finalize__": [
                    4809,
                    4743
                ],
                "NDFrame.sort_values.__doc__": [
                    4698
                ],
                "NDFrame.sort_values": [
                    4698
                ],
                "labels._sort_levels_monotonic": [
                    4768
                ],
                "new_axis": [
                    4771
                ],
                "labels.sortlevel": [
                    4771
                ],
                "sort_remaining": [
                    4772
                ],
                "labels._get_codes_for_sorting": [
                    4779
                ],
                "labels.is_monotonic_increasing": [
                    4788
                ],
                "labels.is_monotonic_decreasing": [
                    4789
                ],
                "baxis": [
                    4800,
                    4801,
                    4804
                ],
                "new_data.axes": [
                    4804
                ],
                "_sort_levels_monotonic": [
                    4804
                ],
                "NDFrame.sort_index.__doc__": [
                    4746
                ],
                "NDFrame.sort_index": [
                    4746
                ],
                "nlargest": [
                    4918
                ],
                "algorithms.SelectNFrame": [
                    5017,
                    4918
                ],
                "nsmallest": [
                    5017
                ],
                "result.index": [
                    5066,
                    5038,
                    6034
                ],
                "result.index.swaplevel": [
                    5038
                ],
                "j": [
                    5038,
                    7183,
                    5040,
                    7184,
                    7187,
                    7190,
                    7196,
                    7197
                ],
                "result.columns.swaplevel": [
                    5040
                ],
                "result.index.reorder_levels": [
                    5066
                ],
                "order": [
                    5066,
                    5068
                ],
                "result.columns.reorder_levels": [
                    5068
                ],
                "this": [
                    5505,
                    5251,
                    5509,
                    5516,
                    5263,
                    5522,
                    7356,
                    7359,
                    7362,
                    5075,
                    5091,
                    5093,
                    5096,
                    5097,
                    5098,
                    7402,
                    5237,
                    5238,
                    5501,
                    5247
                ],
                "self.align": [
                    5075,
                    5237
                ],
                "_arith_op": [
                    5080,
                    5096,
                    5093
                ],
                "func": [
                    5089,
                    5091,
                    6437,
                    6438,
                    5097,
                    5289,
                    5103,
                    6415,
                    5105,
                    6419,
                    6580,
                    5109,
                    5080,
                    6650,
                    6651
                ],
                "ops.fill_binop": [
                    5088
                ],
                "ops": [
                    5088,
                    5091,
                    5093,
                    5103,
                    8144,
                    5105,
                    8145
                ],
                "ops.should_series_dispatch": [
                    5091,
                    5103
                ],
                "ops.dispatch_to_series": [
                    5105,
                    5093
                ],
                "np.errstate": [
                    5504,
                    7624,
                    5108,
                    5095
                ],
                "res_values": [
                    5096,
                    5097
                ],
                "this.values": [
                    5096,
                    5097
                ],
                "other.values": [
                    5096,
                    5097,
                    5109
                ],
                "dispatch_fill_zeros": [
                    5097
                ],
                "this._construct_result": [
                    5098
                ],
                "self.values.T": [
                    5109
                ],
                "out": [
                    5128,
                    5124,
                    5127
                ],
                "out.columns": [
                    5127
                ],
                "other_idxlen": [
                    5235,
                    5243
                ],
                "this.index": [
                    5238
                ],
                "other.empty": [
                    5240
                ],
                "other.copy": [
                    5244
                ],
                "this.columns.union": [
                    5247
                ],
                "this.columns": [
                    5247
                ],
                "do_fill": [
                    5248,
                    5266
                ],
                "otherSeries": [
                    5252,
                    5255,
                    5287,
                    5289,
                    5258,
                    5268,
                    5270
                ],
                "this_dtype": [
                    5290,
                    5283,
                    5284,
                    5254
                ],
                "series.dtype": [
                    5254
                ],
                "other_dtype": [
                    5275,
                    5283,
                    5286,
                    5255
                ],
                "otherSeries.dtype": [
                    5255
                ],
                "this_mask": [
                    5257,
                    5269
                ],
                "other_mask": [
                    5258,
                    5270,
                    5262
                ],
                "overwrite": [
                    5513,
                    5262
                ],
                "other_mask.all": [
                    5262
                ],
                "series.copy": [
                    5267
                ],
                "otherSeries.copy": [
                    5268
                ],
                "new_dtype": [
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5275,
                    5277
                ],
                "series.astype": [
                    5277,
                    5285
                ],
                "find_common_type": [
                    5283
                ],
                "is_dtype_equal": [
                    5284,
                    5286
                ],
                "otherSeries.astype": [
                    5287
                ],
                "maybe_downcast_to_dtype": [
                    5290
                ],
                "arr._values": [
                    5347
                ],
                "needs_i8_conversion": [
                    5349
                ],
                "arr.dtype": [
                    5350
                ],
                "arr.asi8": [
                    5351
                ],
                "arr.view": [
                    5353
                ],
                "mask._values": [
                    5359
                ],
                "x_values": [
                    5361,
                    5369
                ],
                "extract_values": [
                    5361,
                    5362
                ],
                "y_values": [
                    5369,
                    5362,
                    5367
                ],
                "y": [
                    5362,
                    5366
                ],
                "y.name": [
                    5366
                ],
                "expressions.where": [
                    5369,
                    5522
                ],
                "expressions": [
                    5369,
                    5522
                ],
                "self.combine": [
                    5371
                ],
                "combiner": [
                    5371
                ],
                "other.reindex_like": [
                    5498
                ],
                "that": [
                    5505,
                    5508,
                    5514,
                    5522,
                    5502
                ],
                "filter_func": [
                    5505,
                    5503
                ],
                "mask_this": [
                    5508,
                    5510
                ],
                "mask_that": [
                    5509,
                    5510
                ],
                "pivot": [
                    5637
                ],
                "pivot_table": [
                    5784
                ],
                "aggfunc": [
                    5789
                ],
                "margins": [
                    5791
                ],
                "dropna": [
                    5792,
                    7691,
                    5963,
                    5965,
                    7863
                ],
                "margins_name": [
                    5793
                ],
                "observed": [
                    5794
                ],
                "stack_multiple": [
                    5963
                ],
                "stack": [
                    5965
                ],
                "is_scalar": [
                    6024
                ],
                "df": [
                    6947,
                    6029,
                    7085,
                    6031,
                    6032,
                    6033
                ],
                "self.reset_index": [
                    6029
                ],
                "explode": [
                    6032
                ],
                "df.drop": [
                    6033
                ],
                "self.index.take": [
                    6034
                ],
                "result.reindex": [
                    6035
                ],
                "unstack": [
                    6100
                ],
                "melt": [
                    6214
                ],
                "id_vars": [
                    6216
                ],
                "value_vars": [
                    6217
                ],
                "var_name": [
                    6218
                ],
                "value_name": [
                    6219
                ],
                "bm_axis": [
                    6312,
                    6311
                ],
                "self._data.diff": [
                    6312
                ],
                "ABCDataFrame": [
                    6322,
                    6323
                ],
                "subset.ndim": [
                    6337
                ],
                "_agg_summary_and_see_also_doc": [
                    6404,
                    6343
                ],
                "dedent": [
                    6367,
                    6343
                ],
                "_agg_examples_doc": [
                    6405,
                    6367
                ],
                "self._aggregate": [
                    6415
                ],
                "self.apply": [
                    7691,
                    6419,
                    6653
                ],
                "self.T._aggregate": [
                    6426
                ],
                "arg": [
                    6426,
                    6429
                ],
                "result.T": [
                    7553,
                    6427,
                    7959
                ],
                "_aggregate": [
                    6429
                ],
                "agg": [
                    6431
                ],
                "aggregate": [
                    6431
                ],
                "self.T.transform": [
                    6437
                ],
                "transform": [
                    6438
                ],
                "op": [
                    6578,
                    6587,
                    7570
                ],
                "frame_apply": [
                    6578,
                    7614
                ],
                "raw": [
                    6582
                ],
                "result_type": [
                    6583
                ],
                "kwds": [
                    6585,
                    7570
                ],
                "op.get_result": [
                    6587
                ],
                "x.empty": [
                    6649
                ],
                "lib.map_infer": [
                    6650,
                    6651
                ],
                "x.astype": [
                    6651
                ],
                "infer": [
                    6653
                ],
                "other.name": [
                    6760,
                    6754,
                    6924,
                    6926
                ],
                "ignore_index": [
                    6754,
                    6790
                ],
                "idx_diff": [
                    6761,
                    6763,
                    7403,
                    7405,
                    6765,
                    7406
                ],
                "other.index.difference": [
                    6761
                ],
                "combined_columns": [
                    6763,
                    6765,
                    6767,
                    6772,
                    6773
                ],
                "self.columns.append": [
                    6763
                ],
                "self.columns.astype": [
                    6765
                ],
                "rename_axis": [
                    6767
                ],
                "T.infer_objects": [
                    6767
                ],
                "to_frame": [
                    6767
                ],
                "index.names": [
                    6770
                ],
                "self.columns.equals": [
                    6772
                ],
                "all": [
                    6947,
                    7305,
                    6779,
                    7641
                ],
                "to_concat": [
                    6785,
                    6787,
                    6789
                ],
                "concat": [
                    8098,
                    6788,
                    7111,
                    6952,
                    6957
                ],
                "sort": [
                    6914,
                    6792,
                    6953,
                    6958,
                    6998,
                    6937
                ],
                "self._join_compat": [
                    6913
                ],
                "on": [
                    6914,
                    6993,
                    6932,
                    6934,
                    6940
                ],
                "lsuffix": [
                    6936,
                    6914
                ],
                "rsuffix": [
                    6936,
                    6914
                ],
                "merge": [
                    6929,
                    6964,
                    6989
                ],
                "frames": [
                    6945,
                    6947,
                    6953,
                    6958,
                    6961,
                    6963
                ],
                "can_concat": [
                    6947,
                    6950
                ],
                "df.index.is_unique": [
                    6947
                ],
                "df.index": [
                    6947
                ],
                "res.reindex": [
                    6955
                ],
                "joined": [
                    6968,
                    6961,
                    6964,
                    6965
                ],
                "left_on": [
                    6994
                ],
                "right_on": [
                    6995
                ],
                "left_index": [
                    6996
                ],
                "right_index": [
                    6997
                ],
                "suffixes": [
                    6999
                ],
                "indicator": [
                    7001
                ],
                "validate": [
                    7002
                ],
                "df.items": [
                    7085
                ],
                "_series_round": [
                    7105,
                    7087
                ],
                "decimals": [
                    7105,
                    7087,
                    7093,
                    7098,
                    7099,
                    7100,
                    7102,
                    7103
                ],
                "is_integer_dtype": [
                    7092
                ],
                "is_float_dtype": [
                    7092
                ],
                "s.round": [
                    7093
                ],
                "nv.validate_round": [
                    7096
                ],
                "decimals.index.is_unique": [
                    7100
                ],
                "decimals.index": [
                    7100
                ],
                "new_cols": [
                    7105,
                    7109,
                    7102,
                    7111
                ],
                "_dict_round": [
                    7102
                ],
                "numeric_df": [
                    7168,
                    7300,
                    7301,
                    7303,
                    7165,
                    7166
                ],
                "self._get_numeric_data": [
                    7300,
                    7494,
                    7860,
                    7574,
                    7516,
                    7356,
                    7165,
                    7935
                ],
                "numeric_df.columns": [
                    7301,
                    7166
                ],
                "cols.copy": [
                    7302,
                    7167
                ],
                "mat": [
                    7168,
                    7171,
                    7173,
                    7303,
                    7177,
                    7305,
                    7306,
                    7307,
                    7181,
                    7182,
                    7183,
                    7310,
                    7313
                ],
                "numeric_df.values": [
                    7168,
                    7303
                ],
                "correl": [
                    7171,
                    7173,
                    7205,
                    7403,
                    7180,
                    7406,
                    7408,
                    7380,
                    7387,
                    7196,
                    7197
                ],
                "libalgos.nancorr": [
                    7313,
                    7171
                ],
                "libalgos": [
                    7313,
                    7171,
                    7173
                ],
                "ensure_float64": [
                    7177,
                    7313,
                    7171,
                    7173
                ],
                "min_periods": [
                    7171,
                    7173,
                    7175,
                    7176,
                    7306,
                    7313,
                    7188
                ],
                "libalgos.nancorr_spearman": [
                    7173
                ],
                "callable": [
                    7382,
                    7174
                ],
                "corrf": [
                    7193,
                    7178,
                    7195
                ],
                "nanops.get_corr_func": [
                    7178
                ],
                "nanops": [
                    7385,
                    7178,
                    7764,
                    7726
                ],
                "K": [
                    7179,
                    7180
                ],
                "float": [
                    7180
                ],
                "np.isfinite": [
                    7181
                ],
                "ac": [
                    7193,
                    7195,
                    7182
                ],
                "bc": [
                    7193,
                    7195,
                    7183
                ],
                "valid": [
                    7192,
                    7193,
                    7187,
                    7188
                ],
                "valid.sum": [
                    7188
                ],
                "valid.all": [
                    7192
                ],
                "baseCov": [
                    7307,
                    7308,
                    7310,
                    7311,
                    7313,
                    7315
                ],
                "mat.shape": [
                    7307
                ],
                "baseCov.fill": [
                    7308
                ],
                "np.cov": [
                    7310
                ],
                "mat.T": [
                    7310
                ],
                "baseCov.reshape": [
                    7311
                ],
                "this.apply": [
                    7359
                ],
                "other.corr": [
                    7359
                ],
                "other._get_numeric_data": [
                    7361
                ],
                "this.align": [
                    7362
                ],
                "left.T": [
                    7365
                ],
                "right.T": [
                    7366
                ],
                "ldem": [
                    7377,
                    7374
                ],
                "left.mean": [
                    7374
                ],
                "rdem": [
                    7377,
                    7375
                ],
                "right.mean": [
                    7375
                ],
                "dom": [
                    7378,
                    7380
                ],
                "left.count": [
                    7378
                ],
                "left.std": [
                    7378
                ],
                "right.std": [
                    7378
                ],
                "nanops.nancorr": [
                    7385
                ],
                "left.values.T": [
                    7388
                ],
                "right.values.T": [
                    7388
                ],
                "left.columns": [
                    7388
                ],
                "raxis": [
                    7401,
                    7402
                ],
                "union": [
                    7402
                ],
                "this._get_axis": [
                    7402
                ],
                "other._get_axis": [
                    7402
                ],
                "result_index.difference": [
                    7403
                ],
                "correl.index": [
                    7403
                ],
                "correl.append": [
                    7406
                ],
                "self._count_level": [
                    7491
                ],
                "numeric_only": [
                    7491,
                    7493,
                    7589,
                    7628,
                    7860,
                    7515,
                    7935
                ],
                "frame._get_axis": [
                    7520,
                    7499
                ],
                "frame._get_agg_axis": [
                    7521,
                    7500,
                    7510
                ],
                "frame._is_mixed_type": [
                    7528,
                    7502
                ],
                "frame._data.any_extension_types": [
                    7502
                ],
                "frame._data": [
                    7502
                ],
                "series_counts": [
                    7508,
                    7509
                ],
                "series_counts.values": [
                    7509
                ],
                "result.astype": [
                    7512,
                    7642,
                    7640
                ],
                "count_axis": [
                    7520,
                    7523,
                    7542,
                    7544,
                    7545,
                    7546
                ],
                "self._get_axis_name": [
                    7525
                ],
                "frame.values": [
                    7534
                ],
                "mask.T": [
                    7539
                ],
                "count_axis._get_level_number": [
                    7542
                ],
                "level_name": [
                    7544,
                    7545
                ],
                "count_axis._names": [
                    7544
                ],
                "level_index": [
                    7545,
                    7547,
                    7549
                ],
                "_shallow_copy": [
                    7545
                ],
                "count_axis.levels": [
                    7545
                ],
                "level_codes": [
                    7546,
                    7547
                ],
                "ensure_int64": [
                    7546
                ],
                "count_axis.codes": [
                    7546
                ],
                "lib.count_level_2d": [
                    7547
                ],
                "filter_type": [
                    7639,
                    7560,
                    7594,
                    7603,
                    7573,
                    7575,
                    7641,
                    7583
                ],
                "constructor": [
                    7649,
                    7562,
                    7567
                ],
                "self._get_agg_axis": [
                    7729,
                    7566,
                    7767
                ],
                "skipna": [
                    7570,
                    7764,
                    7726
                ],
                "axis_matters": [
                    7576
                ],
                "self._get_bool_data": [
                    7578,
                    7580
                ],
                "np.bool_": [
                    7642,
                    7598
                ],
                "opa": [
                    7617,
                    7614
                ],
                "opa.get_result": [
                    7617
                ],
                "self.ndim": [
                    7618
                ],
                "result.iloc": [
                    7619
                ],
                "_get_data": [
                    7629,
                    7623
                ],
                "data._get_agg_axis": [
                    7632,
                    7626
                ],
                "result.dtype": [
                    7637
                ],
                "np.float64": [
                    7640,
                    7947
                ],
                "coerce_to_dtypes": [
                    7647
                ],
                "Series.nunique": [
                    7691
                ],
                "nanops.nanargmin": [
                    7726
                ],
                "nanops.nanargmax": [
                    7764
                ],
                "axis_num": [
                    7778,
                    7773,
                    7775
                ],
                "repr": [
                    7778,
                    8118
                ],
                "s.mode": [
                    7863
                ],
                "data.apply": [
                    7865
                ],
                "validate_percentile": [
                    7933
                ],
                "q": [
                    7945,
                    7946,
                    7947,
                    7950,
                    7956,
                    7933
                ],
                "is_transposed": [
                    7937,
                    7939,
                    7950,
                    7958
                ],
                "data.T": [
                    7940
                ],
                "data.columns": [
                    7942
                ],
                "self.columns.name": [
                    7944
                ],
                "data._data.quantile": [
                    7949
                ],
                "interpolation": [
                    7950
                ],
                "new_data.copy": [
                    7985,
                    8019
                ],
                "new_data.set_axis": [
                    8025,
                    7989,
                    8023,
                    7991
                ],
                "self.index.to_timestamp": [
                    7989
                ],
                "self.columns.to_timestamp": [
                    7991
                ],
                "self.index.to_period": [
                    8023
                ],
                "self.columns.to_period": [
                    8025
                ],
                "collections.defaultdict": [
                    8097
                ],
                "isin": [
                    8100
                ],
                "values.index.is_unique": [
                    8106,
                    8110
                ],
                "values.index": [
                    8106,
                    8110
                ],
                "self.eq": [
                    8112,
                    8108
                ],
                "values.reindex_like": [
                    8112,
                    8108
                ],
                "values.columns.is_unique": [
                    8110
                ],
                "values.columns": [
                    8110
                ],
                "reshape": [
                    8121
                ],
                "algorithms.isin": [
                    8121
                ],
                "self.values.ravel": [
                    8121
                ],
                "plot": [
                    8128
                ],
                "CachedAccessor": [
                    8128,
                    8131
                ],
                "pandas.plotting.PlotAccessor": [
                    8128
                ],
                "pandas.plotting": [
                    8128,
                    8129,
                    8130
                ],
                "pandas": [
                    8128,
                    8129,
                    8130
                ],
                "hist": [
                    8129
                ],
                "pandas.plotting.hist_frame": [
                    8129
                ],
                "boxplot": [
                    8130
                ],
                "pandas.plotting.boxplot_frame": [
                    8130
                ],
                "sparse": [
                    8131
                ],
                "SparseFrameAccessor": [
                    8131
                ],
                "DataFrame._setup_axes": [
                    8134
                ],
                "DataFrame._add_numeric_operations": [
                    8141
                ],
                "DataFrame._add_series_or_dataframe_operations": [
                    8142
                ],
                "ops.add_flex_arithmetic_methods": [
                    8144
                ],
                "ops.add_special_arithmetic_methods": [
                    8145
                ],
                "s.items": [
                    8152
                ],
                "new_data.get": [
                    8153
                ],
                "ljust": [
                    8159
                ]
            },
            "filtered_variables_in_file": {
                "_shared_doc_kwargs": [
                    128,
                    3969,
                    6433,
                    6407,
                    4745,
                    3947,
                    4428,
                    3664,
                    4432,
                    3988,
                    3637,
                    4436,
                    4440,
                    4697
                ],
                "_numeric_only_doc": [
                    154
                ],
                "_merge_doc": [
                    6971,
                    159
                ],
                "NDFrame": [
                    394,
                    4746,
                    3948,
                    2864,
                    3665,
                    501,
                    309,
                    4698
                ],
                "_typ": [
                    387
                ],
                "DataFrame": [
                    2822,
                    391,
                    6926,
                    6928,
                    417,
                    3496,
                    8109,
                    8120,
                    8134,
                    8141,
                    8142,
                    8144,
                    8145,
                    1618,
                    1108,
                    2652,
                    1126,
                    2798,
                    3442,
                    5495,
                    5496,
                    6777,
                    6778,
                    7549
                ],
                "Type": [
                    393,
                    390
                ],
                "_constructor_sliced": [
                    393
                ],
                "Series": [
                    2696,
                    393,
                    6923,
                    7691,
                    2716,
                    8105,
                    2478,
                    3504,
                    7729,
                    6322,
                    2483,
                    4660,
                    2741,
                    6323,
                    7098,
                    7099,
                    444,
                    7358,
                    1225,
                    7500,
                    1108,
                    469,
                    4692,
                    7510,
                    7767,
                    7387,
                    6751,
                    6753,
                    7650,
                    2917,
                    1130,
                    1131,
                    7406,
                    3439,
                    2800,
                    881,
                    1137,
                    3447
                ],
                "_deprecations": [
                    394
                ],
                "FrozenSet": [
                    3280,
                    394
                ],
                "NDFrame._deprecations": [
                    394
                ],
                "_accessors": [
                    395
                ],
                "Set": [
                    395
                ],
                "Optional": [
                    407,
                    408,
                    409,
                    4632,
                    4383,
                    682,
                    6322,
                    4184,
                    4188,
                    4189,
                    739,
                    740,
                    741,
                    745,
                    746,
                    747,
                    4587,
                    749,
                    750,
                    751,
                    752,
                    881,
                    4590,
                    755,
                    756,
                    757,
                    758
                ],
                "Axes": [
                    408,
                    407
                ],
                "Dtype": [
                    3280,
                    409,
                    3281
                ],
                "data": [
                    1579,
                    1584,
                    1595,
                    1597,
                    1600,
                    1602,
                    1604,
                    1606,
                    1607,
                    1611,
                    1618,
                    1619,
                    1624,
                    2678,
                    2685,
                    2686,
                    2688,
                    7860,
                    7865,
                    1223,
                    1225,
                    1226,
                    1228,
                    1235,
                    7935,
                    7940,
                    7942,
                    7949,
                    3391,
                    3394,
                    3395,
                    7574,
                    7578,
                    412,
                    413,
                    7580,
                    417,
                    418,
                    7587,
                    420,
                    422,
                    424,
                    425,
                    426,
                    430,
                    431,
                    435,
                    437,
                    438,
                    439,
                    441,
                    442,
                    444,
                    445,
                    446,
                    447,
                    450,
                    451,
                    452,
                    454,
                    7623,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    7625,
                    7626,
                    7629,
                    7631,
                    469,
                    470,
                    471,
                    472,
                    7632,
                    474,
                    8151,
                    478,
                    483,
                    493
                ],
                "dtype": [
                    1289,
                    414,
                    415,
                    2340,
                    422,
                    425,
                    1834,
                    2348,
                    431,
                    1588,
                    1590,
                    442,
                    1599,
                    1600,
                    450,
                    452,
                    454,
                    464,
                    1235,
                    476,
                    478,
                    480,
                    483,
                    493
                ],
                "self._validate_dtype": [
                    415
                ],
                "self": [
                    2051,
                    4108,
                    4119,
                    4121,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4156,
                    4160,
                    6215,
                    2133,
                    6311,
                    6312,
                    6313,
                    6336,
                    4333,
                    4335,
                    2302,
                    2303,
                    2305,
                    2306,
                    2310,
                    2314,
                    6411,
                    2316,
                    2319,
                    6415,
                    2322,
                    6419,
                    2325,
                    2326,
                    4378,
                    2331,
                    4379,
                    4380,
                    6426,
                    4384,
                    2338,
                    2339,
                    4387,
                    4389,
                    6435,
                    4391,
                    4392,
                    4393,
                    6437,
                    4395,
                    2352,
                    4403,
                    4410,
                    4412,
                    2372,
                    2388,
                    2390,
                    415,
                    421,
                    2479,
                    2480,
                    2483,
                    6579,
                    4552,
                    4555,
                    4557,
                    4562,
                    4578,
                    4581,
                    501,
                    6653,
                    4615,
                    520,
                    4616,
                    4619,
                    4623,
                    4624,
                    4626,
                    542,
                    2601,
                    2605,
                    2607,
                    2608,
                    2611,
                    4659,
                    2616,
                    4664,
                    4669,
                    2622,
                    575,
                    576,
                    2624,
                    578,
                    2625,
                    2626,
                    2629,
                    4674,
                    2635,
                    588,
                    4684,
                    2639,
                    2640,
                    2641,
                    2642,
                    4688,
                    4692,
                    2645,
                    2649,
                    603,
                    2653,
                    2657,
                    4709,
                    2664,
                    2665,
                    2666,
                    6760,
                    6761,
                    6763,
                    6765,
                    2672,
                    4720,
                    6772,
                    629,
                    2678,
                    4727,
                    6773,
                    6779,
                    6780,
                    2685,
                    4736,
                    4737,
                    6785,
                    6787,
                    4741,
                    4743,
                    2696,
                    649,
                    2702,
                    2704,
                    657,
                    658,
                    2709,
                    2711,
                    2715,
                    4763,
                    2717,
                    670,
                    2719,
                    2720,
                    4764,
                    2723,
                    2724,
                    2725,
                    2727,
                    688,
                    690,
                    2742,
                    2743,
                    2746,
                    4794,
                    2749,
                    703,
                    4800,
                    4801,
                    4807,
                    4809,
                    2766,
                    2769,
                    2770,
                    2776,
                    2784,
                    2785,
                    2786,
                    2789,
                    2792,
                    2796,
                    2799,
                    2801,
                    2804,
                    2807,
                    2808,
                    2813,
                    2815,
                    2817,
                    6913,
                    2819,
                    2820,
                    2826,
                    2828,
                    2831,
                    2832,
                    6930,
                    2838,
                    792,
                    2840,
                    2847,
                    2848,
                    2849,
                    6945,
                    6955,
                    2862,
                    2863,
                    2864,
                    2869,
                    2870,
                    4918,
                    828,
                    2891,
                    2894,
                    2895,
                    6990,
                    2897,
                    2902,
                    2904,
                    2905,
                    2907,
                    2915,
                    2925,
                    882,
                    883,
                    884,
                    2930,
                    886,
                    887,
                    2932,
                    2934,
                    891,
                    2940,
                    2941,
                    5018,
                    5034,
                    939,
                    940,
                    941,
                    5036,
                    7102,
                    7105,
                    5059,
                    5060,
                    7110,
                    5063,
                    7111,
                    7114,
                    5075,
                    5103,
                    1009,
                    5105,
                    1011,
                    3059,
                    5109,
                    3062,
                    1015,
                    3066,
                    1018,
                    3069,
                    7165,
                    5124,
                    1029,
                    5127,
                    7205,
                    1109,
                    1110,
                    1113,
                    1118,
                    1119,
                    3167,
                    3168,
                    3171,
                    1127,
                    1135,
                    5237,
                    5240,
                    1145,
                    5241,
                    5243,
                    1151,
                    7300,
                    7315,
                    5272,
                    5295,
                    7355,
                    7356,
                    3277,
                    3289,
                    3295,
                    3301,
                    3303,
                    5366,
                    3321,
                    3322,
                    3323,
                    5371,
                    1289,
                    3391,
                    7489,
                    7491,
                    7494,
                    7496,
                    3420,
                    7516,
                    7518,
                    3426,
                    1381,
                    7525,
                    1390,
                    1392,
                    1396,
                    1397,
                    3445,
                    3446,
                    3448,
                    1402,
                    5498,
                    5500,
                    5501,
                    1408,
                    1410,
                    3458,
                    1413,
                    3463,
                    1420,
                    7565,
                    7566,
                    1423,
                    1424,
                    7567,
                    5522,
                    7574,
                    7578,
                    7580,
                    3485,
                    3493,
                    3494,
                    3495,
                    7590,
                    3504,
                    3505,
                    7615,
                    7618,
                    3536,
                    3537,
                    3538,
                    3539,
                    7634,
                    3544,
                    3549,
                    7647,
                    3560,
                    1524,
                    3586,
                    3589,
                    5637,
                    7691,
                    3606,
                    3609,
                    3621,
                    3622,
                    3627,
                    3629,
                    7725,
                    3631,
                    7726,
                    7727,
                    7729,
                    7763,
                    7764,
                    7765,
                    7767,
                    3678,
                    7774,
                    7776,
                    5785,
                    7860,
                    1755,
                    1757,
                    1759,
                    1761,
                    1764,
                    1766,
                    1774,
                    1776,
                    1777,
                    7935,
                    7936,
                    7944,
                    1801,
                    7946,
                    7947,
                    7954,
                    7956,
                    7983,
                    7987,
                    7989,
                    7991,
                    7995,
                    5963,
                    5965,
                    8017,
                    8021,
                    8023,
                    8025,
                    8029,
                    3940,
                    6026,
                    6029,
                    6034,
                    6035,
                    1942,
                    8100,
                    8101,
                    8108,
                    1965,
                    8112,
                    8121,
                    8122,
                    8123,
                    6100
                ],
                "data._data": [
                    418,
                    7949
                ],
                "BlockManager": [
                    420
                ],
                "mgr": [
                    480,
                    1664,
                    450,
                    1666,
                    452,
                    421,
                    454,
                    425,
                    1834,
                    1835,
                    431,
                    495,
                    501,
                    442,
                    476,
                    478
                ],
                "self._init_mgr": [
                    421
                ],
                "index": [
                    1795,
                    1797,
                    5637,
                    1799,
                    2055,
                    1801,
                    6770,
                    1811,
                    1812,
                    5787,
                    7766,
                    802,
                    422,
                    425,
                    1834,
                    431,
                    7727,
                    7728,
                    1586,
                    2482,
                    8151,
                    442,
                    450,
                    452,
                    1220,
                    454,
                    4164,
                    4166,
                    4167,
                    1228,
                    2892,
                    2767,
                    2896,
                    4175,
                    4177,
                    1235,
                    468,
                    2773,
                    470,
                    2902,
                    472,
                    2904,
                    474,
                    1754,
                    476,
                    7765,
                    478,
                    2143,
                    480,
                    2785,
                    2786,
                    8154,
                    1638,
                    1639,
                    1640,
                    1641,
                    6760,
                    491,
                    1643,
                    493,
                    1645,
                    3820,
                    496,
                    1648,
                    1010,
                    1651,
                    3568,
                    1653,
                    1654,
                    3569,
                    1784,
                    3571,
                    1018,
                    4338,
                    4339
                ],
                "columns": [
                    1664,
                    1410,
                    1412,
                    5637,
                    793,
                    5018,
                    5788,
                    422,
                    1576,
                    425,
                    1577,
                    939,
                    1834,
                    942,
                    431,
                    1586,
                    4918,
                    442,
                    448,
                    449,
                    450,
                    452,
                    1605,
                    454,
                    1606,
                    1607,
                    1612,
                    462,
                    463,
                    464,
                    465,
                    1230,
                    1235,
                    1616,
                    1619,
                    1620,
                    1621,
                    1622,
                    1624,
                    2134,
                    1627,
                    476,
                    1628,
                    478,
                    1630,
                    480,
                    1640,
                    3562,
                    491,
                    3563,
                    493,
                    3565,
                    3821,
                    496,
                    1662
                ],
                "copy": [
                    3591,
                    1289,
                    5263,
                    3611,
                    422,
                    2604,
                    431,
                    7984,
                    3633,
                    2611,
                    442,
                    454,
                    3656,
                    8018,
                    7000,
                    478,
                    483,
                    3565,
                    3571
                ],
                "init_dict": [
                    480,
                    425,
                    450,
                    452
                ],
                "ma.MaskedArray": [
                    426
                ],
                "ma": [
                    426,
                    435
                ],
                "mrecords.MaskedRecords": [
                    430
                ],
                "mrecords": [
                    430
                ],
                "masked_rec_array_to_mgr": [
                    431
                ],
                "mask": [
                    5505,
                    5514,
                    5516,
                    7181,
                    4366,
                    4367,
                    5519,
                    5522,
                    7187,
                    435,
                    436,
                    439,
                    4567,
                    4569,
                    4571,
                    4578,
                    4345,
                    7531,
                    5357,
                    5358,
                    5359,
                    7534,
                    7539,
                    5369,
                    7547,
                    4349,
                    4350
                ],
                "ma.getmaskarray": [
                    435
                ],
                "mask.any": [
                    436,
                    4366
                ],
                "fill_value": [
                    5088,
                    5248,
                    3592,
                    3657,
                    3627,
                    3565,
                    3991,
                    3634,
                    3571,
                    6100,
                    437,
                    5077,
                    439,
                    5269,
                    5270,
                    3612,
                    5790
                ],
                "maybe_upcast": [
                    437
                ],
                "data.soften_mask": [
                    438
                ],
                "data.copy": [
                    441
                ],
                "init_ndarray": [
                    442,
                    478,
                    454,
                    495
                ],
                "np.ndarray": [
                    4099,
                    3464,
                    1132,
                    2604,
                    4143,
                    2800,
                    3280,
                    1618,
                    2837,
                    3447,
                    444,
                    2716
                ],
                "np": [
                    5504,
                    4099,
                    4351,
                    3464,
                    1289,
                    7307,
                    7180,
                    7181,
                    7308,
                    4367,
                    7310,
                    7947,
                    2837,
                    7189,
                    2716,
                    1823,
                    1830,
                    3497,
                    3499,
                    2604,
                    7598,
                    4143,
                    7728,
                    444,
                    4671,
                    1600,
                    2625,
                    7624,
                    3277,
                    3280,
                    4561,
                    1618,
                    7766,
                    3672,
                    7640,
                    7642,
                    3547,
                    1757,
                    1120,
                    483,
                    5095,
                    1128,
                    1131,
                    1132,
                    1133,
                    2926,
                    7406,
                    2800,
                    2676,
                    4340,
                    5108,
                    3447,
                    4350,
                    3582,
                    1151
                ],
                "Index": [
                    2716,
                    3460,
                    3464,
                    6760,
                    7944,
                    1643,
                    1132,
                    1645,
                    4684,
                    3471,
                    2800,
                    3447,
                    506,
                    444
                ],
                "data.dtype.names": [
                    445,
                    446
                ],
                "data.dtype": [
                    445,
                    446
                ],
                "data_columns": [
                    449,
                    446,
                    447
                ],
                "k": [
                    1408,
                    1416,
                    2326,
                    941,
                    942,
                    943,
                    447,
                    3393,
                    3394,
                    2373,
                    1607,
                    1611,
                    1612,
                    1613,
                    4727,
                    1390,
                    887,
                    1392,
                    883,
                    884,
                    886,
                    1015,
                    4733
                ],
                "data.name": [
                    452
                ],
                "abc.Iterable": [
                    457
                ],
                "abc": [
                    457,
                    458,
                    4099,
                    4146
                ],
                "abc.Sequence": [
                    458
                ],
                "ExtensionArray": [
                    458,
                    3454
                ],
                "is_list_like": [
                    2915,
                    2661,
                    7945,
                    461,
                    8114,
                    3255,
                    3257
                ],
                "is_named_tuple": [
                    462
                ],
                "_fields": [
                    463
                ],
                "arrays": [
                    1664,
                    1783,
                    4123,
                    4129,
                    4131,
                    1830,
                    4137,
                    1834,
                    4141,
                    4144,
                    4147,
                    4151,
                    4156,
                    4161,
                    4164,
                    1607,
                    1609,
                    1614,
                    464,
                    1616,
                    1619,
                    1624,
                    476,
                    1761,
                    1642,
                    1643,
                    1008,
                    1648,
                    1776,
                    1011,
                    1015,
                    1659,
                    1020,
                    1023
                ],
                "to_arrays": [
                    464,
                    1624,
                    1619
                ],
                "ensure_index": [
                    1606,
                    1577,
                    465,
                    1621,
                    1626,
                    1628
                ],
                "get_names_from_index": [
                    470
                ],
                "Categorical": [
                    471
                ],
                "ibase.default_index": [
                    472,
                    474,
                    4374
                ],
                "ibase": [
                    472,
                    474,
                    4374
                ],
                "arrays_to_mgr": [
                    1664,
                    1834,
                    476
                ],
                "arr": [
                    5346,
                    483,
                    5347,
                    5349,
                    5350,
                    5351,
                    5289,
                    5290,
                    491,
                    5292,
                    5353,
                    5354
                ],
                "np.array": [
                    1600,
                    2625,
                    483,
                    1289,
                    1757
                ],
                "exc": [
                    489,
                    485
                ],
                "e": [
                    489,
                    487
                ],
                "arr.ndim": [
                    491
                ],
                "values": [
                    4353,
                    5637,
                    4360,
                    4361,
                    4364,
                    4367,
                    4370,
                    4372,
                    5786,
                    8094,
                    8097,
                    8100,
                    7590,
                    7592,
                    8105,
                    7594,
                    8106,
                    8108,
                    8109,
                    8110,
                    8112,
                    8114,
                    8118,
                    1592,
                    8121,
                    1595,
                    1597,
                    2622,
                    1600,
                    2624,
                    1602,
                    2625,
                    2626,
                    7631,
                    3537,
                    7634,
                    7635,
                    3545,
                    7531,
                    492,
                    496,
                    4338,
                    2931,
                    2932,
                    4340,
                    2934,
                    4341,
                    6651,
                    2941,
                    4350,
                    4351
                ],
                "cast_scalar_to_array": [
                    492,
                    3485
                ],
                "values.dtype": [
                    496,
                    4361,
                    4340
                ],
                "NDFrame.__init__": [
                    501
                ],
                "self.index": [
                    2817,
                    3458,
                    3586,
                    5124,
                    1029,
                    3463,
                    520,
                    2696,
                    1420,
                    2702,
                    2704,
                    6034,
                    2709,
                    4378,
                    4379,
                    4380,
                    3485,
                    542,
                    4126,
                    4127,
                    4128,
                    4129,
                    4131,
                    4384,
                    2725,
                    3621,
                    4387,
                    4389,
                    4392,
                    4393,
                    6955,
                    941,
                    2608,
                    3504,
                    2483,
                    7989,
                    2743,
                    8122,
                    2624,
                    2625,
                    7111,
                    2941,
                    2895,
                    2770,
                    2815,
                    2388,
                    3538,
                    4692,
                    8023,
                    2776,
                    1755,
                    3420,
                    1757,
                    1759,
                    7776,
                    2785,
                    3426,
                    2915,
                    1764,
                    1766,
                    6760,
                    1011,
                    1396,
                    2932,
                    5240,
                    2813,
                    2303
                ],
                "self.columns": [
                    5127,
                    520,
                    4108,
                    3606,
                    542,
                    3622,
                    2607,
                    2616,
                    4669,
                    4674,
                    4684,
                    2639,
                    2640,
                    1109,
                    1110,
                    603,
                    7774,
                    2664,
                    6761,
                    2666,
                    6763,
                    6765,
                    6772,
                    6779,
                    6780,
                    2685,
                    5272,
                    2715,
                    2717,
                    2784,
                    1761,
                    1774,
                    1776,
                    1777,
                    5366,
                    2305,
                    2310,
                    7944,
                    1801,
                    2314,
                    2319,
                    2322,
                    2325,
                    2326,
                    2339,
                    4395,
                    2352,
                    4403,
                    7991,
                    4410,
                    4412,
                    8025,
                    1381,
                    882,
                    883,
                    2930,
                    1397,
                    886,
                    3445,
                    3448,
                    3446,
                    5500,
                    1410,
                    6026,
                    1423,
                    6035,
                    3493,
                    3494,
                    8101,
                    939,
                    2480,
                    3505,
                    8123,
                    7111,
                    3539,
                    3544,
                    1009,
                    1015,
                    1018
                ],
                "List": [
                    6320,
                    3281,
                    506
                ],
                "Tuple": [
                    881,
                    523,
                    5967,
                    4383
                ],
                "self._data.any_extension_types": [
                    575
                ],
                "self._data": [
                    576,
                    4736,
                    578,
                    4801,
                    2372,
                    6312,
                    2601,
                    2925,
                    4623,
                    3504,
                    7983,
                    8017,
                    3323,
                    2622,
                    575
                ],
                "block.dtype": [
                    576
                ],
                "block": [
                    576
                ],
                "self._data.blocks": [
                    576
                ],
                "self._data.is_mixed_type": [
                    578
                ],
                "max_rows": [
                    672,
                    2146,
                    804,
                    618,
                    587,
                    620,
                    588,
                    716,
                    2316,
                    2319,
                    697,
                    661,
                    631,
                    633
                ],
                "get_option": [
                    647,
                    2314,
                    2316,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    696,
                    697,
                    698,
                    699,
                    700,
                    2377,
                    587,
                    602,
                    616,
                    620
                ],
                "width": [
                    641,
                    675,
                    601,
                    667,
                    669,
                    607
                ],
                "height": [
                    601
                ],
                "console.get_console_size": [
                    601,
                    667
                ],
                "console": [
                    616,
                    601,
                    667,
                    613
                ],
                "max_columns": [
                    602,
                    606
                ],
                "nb_columns": [
                    603,
                    606,
                    607
                ],
                "ignore_width": [
                    613,
                    607
                ],
                "console.in_interactive_session": [
                    613
                ],
                "console.in_ipython_frontend": [
                    616
                ],
                "buf": [
                    2307,
                    680,
                    810,
                    2155,
                    656,
                    625,
                    658,
                    659,
                    689,
                    690,
                    692,
                    2392,
                    2297,
                    2298,
                    637,
                    638,
                    671
                ],
                "StringIO": [
                    656,
                    625,
                    689
                ],
                "d": [
                    633,
                    637,
                    629
                ],
                "d.iloc": [
                    633
                ],
                "d.to_string": [
                    637
                ],
                "value": [
                    3457,
                    3458,
                    2820,
                    3460,
                    2822,
                    2823,
                    3463,
                    2825,
                    2826,
                    3464,
                    3465,
                    3466,
                    3468,
                    3469,
                    2832,
                    3470,
                    3471,
                    3472,
                    3474,
                    3477,
                    3478,
                    3482,
                    3485,
                    3486,
                    2847,
                    2849,
                    3489,
                    3490,
                    3493,
                    3497,
                    3499,
                    2862,
                    2863,
                    2864,
                    3981,
                    3449,
                    2892,
                    3450,
                    2896,
                    3960,
                    2902,
                    2904,
                    3420,
                    3421,
                    3426,
                    2915,
                    3454,
                    2917,
                    3429,
                    2796,
                    3437,
                    2926,
                    2799,
                    3439,
                    2801,
                    3440,
                    3442,
                    2804,
                    2808,
                    3321,
                    3322,
                    3323,
                    3452,
                    638,
                    639
                ],
                "buf.getvalue": [
                    680,
                    659,
                    692,
                    638
                ],
                "repr_width": [
                    641,
                    639
                ],
                "l": [
                    639
                ],
                "value.split": [
                    639
                ],
                "info_repr_option": [
                    648,
                    647
                ],
                "self._repr_fits_horizontal_": [
                    649
                ],
                "self._repr_fits_vertical_": [
                    649
                ],
                "self._info_repr": [
                    688,
                    657
                ],
                "self.info": [
                    690,
                    658
                ],
                "min_rows": [
                    673,
                    803,
                    717,
                    662,
                    698
                ],
                "max_cols": [
                    674,
                    2147,
                    805,
                    2313,
                    2314,
                    718,
                    2319,
                    2322,
                    663,
                    699
                ],
                "max_colwidth": [
                    664,
                    676,
                    790
                ],
                "show_dimensions": [
                    2148,
                    677,
                    806,
                    719,
                    665,
                    700
                ],
                "_": [
                    7105,
                    3482,
                    667,
                    4367
                ],
                "self.to_string": [
                    670
                ],
                "val": [
                    692,
                    693,
                    694
                ],
                "replace": [
                    3979,
                    692
                ],
                "val.replace": [
                    693
                ],
                "formatter": [
                    810,
                    2154,
                    724,
                    2132,
                    791,
                    702
                ],
                "fmt.DataFrameFormatter": [
                    2132,
                    702,
                    791
                ],
                "fmt": [
                    736,
                    2307,
                    745,
                    746,
                    2129,
                    2132,
                    2069,
                    791,
                    2392,
                    702
                ],
                "formatter.to_html": [
                    2154,
                    724
                ],
                "FilePathOrBuffer": [
                    739
                ],
                "Sequence": [
                    740,
                    742,
                    4632,
                    4587,
                    4184
                ],
                "Union": [
                    742,
                    4632,
                    4587,
                    4588,
                    5967,
                    6320,
                    6322,
                    6323,
                    4184,
                    4633
                ],
                "fmt.formatters_type": [
                    745
                ],
                "fmt.float_format_type": [
                    746
                ],
                "option_context": [
                    790
                ],
                "col_space": [
                    794,
                    2135
                ],
                "na_rep": [
                    2136,
                    795
                ],
                "formatters": [
                    2137,
                    796
                ],
                "float_format": [
                    2138,
                    797
                ],
                "sparsify": [
                    2139,
                    798
                ],
                "justify": [
                    2129,
                    2140,
                    799
                ],
                "index_names": [
                    800,
                    1764,
                    1797,
                    1767,
                    1769,
                    1771,
                    1772,
                    1774,
                    1778,
                    1780,
                    2141
                ],
                "header": [
                    801,
                    2142
                ],
                "decimal": [
                    2149,
                    807
                ],
                "line_width": [
                    808
                ],
                "formatter.to_string": [
                    810
                ],
                "encoding": [
                    810,
                    2159
                ],
                "Substitution": [
                    736,
                    5632,
                    6403,
                    5768,
                    4745,
                    3947,
                    2060,
                    3664,
                    2069,
                    728,
                    4697,
                    6970
                ],
                "fmt.common_docstring": [
                    736,
                    2069
                ],
                "fmt.return_docstring": [
                    736,
                    2069
                ],
                "Styler": [
                    828
                ],
                "_shared_docs": [
                    3969,
                    5633,
                    6433,
                    5639,
                    5769,
                    6409,
                    4428,
                    880,
                    4432,
                    3988,
                    3637,
                    4436,
                    5527,
                    4440,
                    889,
                    6102,
                    6199,
                    830
                ],
                "self.columns.is_unique": [
                    1381,
                    3494,
                    6026,
                    2639,
                    882
                ],
                "self._get_item_cache": [
                    2894,
                    2769,
                    2642,
                    884,
                    2749
                ],
                "i": [
                    7182,
                    7184,
                    7187,
                    7190,
                    7196,
                    7197,
                    4128,
                    4129,
                    1826,
                    2339,
                    2340,
                    4386,
                    4387,
                    8100,
                    8101,
                    2345,
                    2601,
                    4396,
                    4397,
                    5038,
                    4399,
                    2608,
                    5040,
                    7728,
                    2616,
                    2622,
                    7766,
                    3548,
                    3549,
                    1767,
                    1640,
                    1769,
                    1643,
                    887,
                    886,
                    1783,
                    1784,
                    1659
                ],
                "self._ixs": [
                    887
                ],
                "Appender": [
                    3969,
                    5633,
                    5769,
                    4746,
                    6409,
                    3988,
                    6433,
                    3637,
                    6198,
                    6971,
                    4428,
                    4432,
                    3665,
                    4436,
                    4440,
                    4698,
                    3948,
                    880,
                    889
                ],
                "Iterable": [
                    881,
                    4679,
                    4383
                ],
                "Hashable": [
                    4632,
                    4587,
                    881,
                    4184,
                    4187,
                    4188
                ],
                "self.items": [
                    1408,
                    7105,
                    1390,
                    2479,
                    1392,
                    4688,
                    891
                ],
                "klass": [
                    2940,
                    940,
                    2941,
                    942
                ],
                "self._constructor_sliced": [
                    7947,
                    940,
                    2605,
                    7956,
                    2742,
                    2940
                ],
                "v": [
                    1408,
                    3393,
                    3394,
                    7105,
                    1416,
                    1611,
                    941,
                    1390,
                    942,
                    1392,
                    1614,
                    1783,
                    8152,
                    8154,
                    1659,
                    1822
                ],
                "self.values": [
                    2723,
                    7590,
                    1289,
                    3627,
                    941,
                    7726,
                    3537,
                    7634,
                    7764,
                    5109,
                    8121,
                    1119
                ],
                "s": [
                    942,
                    943,
                    8151,
                    7092,
                    7093,
                    7094,
                    7863,
                    8152,
                    8159
                ],
                "fields": [
                    1009,
                    1019,
                    1012
                ],
                "arrays.append": [
                    4129,
                    4131,
                    4137,
                    4141,
                    1614,
                    4144,
                    1011,
                    4147,
                    4151
                ],
                "fields.insert": [
                    1012
                ],
                "arrays.extend": [
                    1015
                ],
                "self.iloc": [
                    3303,
                    8100,
                    2902,
                    1015
                ],
                "name": [
                    4417,
                    1827,
                    1797,
                    1801,
                    1774,
                    4399,
                    4688,
                    1809,
                    1810,
                    4401,
                    4406,
                    1018,
                    1019,
                    4414
                ],
                "itertuple": [
                    1019,
                    1020
                ],
                "collections.namedtuple": [
                    1019
                ],
                "collections": [
                    8097,
                    1019
                ],
                "itertuple._make": [
                    1020
                ],
                "other": [
                    6784,
                    6785,
                    6914,
                    6787,
                    5252,
                    5496,
                    6923,
                    6924,
                    6926,
                    5371,
                    6928,
                    6931,
                    5247,
                    6945,
                    6775,
                    6777,
                    6778,
                    6779,
                    7358,
                    7359,
                    6780,
                    7361,
                    7362,
                    3652,
                    5075,
                    1108,
                    1109,
                    1110,
                    1114,
                    6751,
                    1120,
                    6752,
                    6753,
                    5091,
                    6754,
                    5093,
                    1126,
                    1128,
                    5096,
                    1130,
                    5097,
                    6760,
                    6761,
                    6766,
                    5103,
                    6767,
                    5105,
                    7402,
                    1139,
                    5235,
                    5109,
                    5237,
                    5495,
                    5240,
                    1145,
                    5498,
                    5243,
                    5244,
                    6774,
                    5502,
                    1151
                ],
                "common": [
                    1113,
                    1114,
                    1109,
                    1110
                ],
                "self.columns.union": [
                    1109
                ],
                "other.index": [
                    6761,
                    5235,
                    1109,
                    1110
                ],
                "left": [
                    5088,
                    5089,
                    7362,
                    7365,
                    1128,
                    7370,
                    1131,
                    7371,
                    7374,
                    1135,
                    1137,
                    7378,
                    1113,
                    1115,
                    7388,
                    1118
                ],
                "self.reindex": [
                    2720,
                    1113,
                    6773
                ],
                "right": [
                    5088,
                    5089,
                    7362,
                    7366,
                    7370,
                    7371,
                    6991,
                    7375,
                    7378,
                    7388,
                    1114,
                    1116
                ],
                "other.reindex": [
                    1114,
                    6780,
                    6767
                ],
                "lvals": [
                    1121,
                    1123,
                    1128,
                    1131,
                    1133,
                    1115,
                    1119
                ],
                "left.values": [
                    1115,
                    7388
                ],
                "rvals": [
                    1120,
                    1121,
                    1123,
                    1128,
                    1131,
                    1132,
                    1133,
                    1116
                ],
                "right.values": [
                    7388,
                    1116
                ],
                "np.asarray": [
                    1120,
                    3499
                ],
                "lvals.shape": [
                    1121,
                    1123
                ],
                "rvals.shape": [
                    1121,
                    1123
                ],
                "self._constructor": [
                    5124,
                    4743,
                    7946,
                    7567,
                    7954,
                    7315,
                    2840,
                    2724,
                    7205,
                    6313,
                    3629,
                    5295,
                    7995,
                    7110,
                    4809,
                    8029,
                    1127,
                    1135,
                    2932
                ],
                "np.dot": [
                    1128,
                    1131,
                    1133
                ],
                "left.index": [
                    1128,
                    1137,
                    1131,
                    1135
                ],
                "other.columns": [
                    1128,
                    6779,
                    5247
                ],
                "result": [
                    5124,
                    2605,
                    7728,
                    7729,
                    2611,
                    2612,
                    2626,
                    2629,
                    2631,
                    7766,
                    7767,
                    1133,
                    1134,
                    1135,
                    1137,
                    5249,
                    5263,
                    2720,
                    2721,
                    2724,
                    2727,
                    5292,
                    5295,
                    2735,
                    2736,
                    2740,
                    2741,
                    2742,
                    2743,
                    2746,
                    2747,
                    1289,
                    1290,
                    6413,
                    7949,
                    6415,
                    7953,
                    6418,
                    7954,
                    6420,
                    7956,
                    7959,
                    7961,
                    6426,
                    6427,
                    6428,
                    7500,
                    7505,
                    7510,
                    7512,
                    7549,
                    7553,
                    7555,
                    6032,
                    6033,
                    6034,
                    6035,
                    6037,
                    7592,
                    5034,
                    2478,
                    5038,
                    5040,
                    5041,
                    7598,
                    2483,
                    2484,
                    2486,
                    7617,
                    7618,
                    7619,
                    7620,
                    5063,
                    7625,
                    5066,
                    5068,
                    5069,
                    7635,
                    7637,
                    7640,
                    3545,
                    7641,
                    3547,
                    7642,
                    3549,
                    3551,
                    3552,
                    7647,
                    3554,
                    4578,
                    7650,
                    4581,
                    7651,
                    4583
                ],
                "result.ndim": [
                    7953,
                    7618,
                    1134
                ],
                "self.dot": [
                    1145
                ],
                "T": [
                    6437,
                    7177,
                    3470,
                    6767,
                    5109,
                    2583,
                    3452,
                    1151
                ],
                "self.T.dot": [
                    1151
                ],
                "self.T": [
                    6426,
                    6437,
                    1151
                ],
                "np.transpose": [
                    1151
                ],
                "orient": [
                    1409,
                    1221,
                    1222,
                    1419,
                    1229,
                    1389,
                    1391,
                    1393,
                    1427,
                    1407
                ],
                "orient.lower": [
                    1409,
                    1221,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "data.values": [
                    1225,
                    1228,
                    7625,
                    7631
                ],
                "_from_nested_dict": [
                    1226
                ],
                "data.keys": [
                    1228
                ],
                "cls": [
                    1666,
                    1835,
                    1581,
                    1586,
                    1235
                ],
                "warnings.warn": [
                    2697,
                    1382
                ],
                "warnings": [
                    2697,
                    1382
                ],
                "into_c": [
                    1408,
                    1416,
                    1388,
                    1390,
                    1422,
                    1392,
                    1394
                ],
                "com.standardize_mapping": [
                    1388
                ],
                "com": [
                    1408,
                    2656,
                    3394,
                    2789,
                    1416,
                    2635,
                    1388,
                    3468,
                    2767,
                    1401,
                    2812
                ],
                "into": [
                    1388,
                    1390
                ],
                "startswith": [
                    1409,
                    1419,
                    1389,
                    1391,
                    1393,
                    1407
                ],
                "v.to_dict": [
                    1390
                ],
                "v.tolist": [
                    1392
                ],
                "self.index.tolist": [
                    1396
                ],
                "self.columns.tolist": [
                    1410,
                    1397
                ],
                "com.maybe_box_datetimelike": [
                    1408,
                    1401,
                    1416,
                    2767
                ],
                "t": [
                    1424,
                    1401,
                    1402,
                    1423
                ],
                "self.itertuples": [
                    1424,
                    1402,
                    1413
                ],
                "rows": [
                    1417,
                    1411
                ],
                "row": [
                    1416,
                    1417,
                    1412,
                    1413
                ],
                "row.items": [
                    1416
                ],
                "self.index.is_unique": [
                    1420
                ],
                "gbq.to_gbq": [
                    1523
                ],
                "gbq": [
                    1523
                ],
                "destination_table": [
                    1525
                ],
                "project_id": [
                    1526
                ],
                "chunksize": [
                    1527
                ],
                "reauth": [
                    1528
                ],
                "if_exists": [
                    1529
                ],
                "auth_local_webserver": [
                    1530
                ],
                "table_schema": [
                    1531
                ],
                "location": [
                    1532
                ],
                "progress_bar": [
                    1533
                ],
                "credentials": [
                    1534
                ],
                "is_iterator": [
                    1579,
                    2670
                ],
                "nrows": [
                    1594,
                    1580,
                    1597
                ],
                "first_row": [
                    1584,
                    1592,
                    1589,
                    1590
                ],
                "first_row.dtype.names": [
                    1589
                ],
                "first_row.dtype": [
                    1589,
                    1590
                ],
                "values.extend": [
                    1597
                ],
                "itertools.islice": [
                    1597
                ],
                "itertools": [
                    1597,
                    1774
                ],
                "arr_columns": [
                    1664,
                    1606,
                    1610,
                    1613,
                    1616,
                    1648,
                    1622,
                    1658,
                    1624,
                    1657,
                    1626,
                    1661,
                    1630
                ],
                "data.items": [
                    1611,
                    8151
                ],
                "arr_columns.append": [
                    1613
                ],
                "reorder_arrays": [
                    1616
                ],
                "coerce_float": [
                    1624
                ],
                "exclude": [
                    1632,
                    1633,
                    3297,
                    1635,
                    3257,
                    3267,
                    3268,
                    3299,
                    3272,
                    1641,
                    3273,
                    1654,
                    1656,
                    1657,
                    3258,
                    3260,
                    1662
                ],
                "result_index": [
                    1664,
                    1637,
                    7402,
                    1643,
                    7403,
                    1645,
                    1651,
                    1653
                ],
                "columns.get_loc": [
                    1640
                ],
                "exclude.add": [
                    1641
                ],
                "index_data": [
                    1648,
                    1653
                ],
                "arr_columns.get_loc": [
                    1648,
                    1658
                ],
                "field": [
                    1648
                ],
                "ensure_index_from_sequences": [
                    4164,
                    1653
                ],
                "exclude.update": [
                    1654
                ],
                "arr_exclude": [
                    1657,
                    1658,
                    1661
                ],
                "x": [
                    3266,
                    3267,
                    7385,
                    5357,
                    6649,
                    4720,
                    5361,
                    7570,
                    2356,
                    2358,
                    1657,
                    6650,
                    6651,
                    7359
                ],
                "to_remove": [
                    4154,
                    4133,
                    4171,
                    1658,
                    1659
                ],
                "col": [
                    4097,
                    5250,
                    4099,
                    5251,
                    5252,
                    4103,
                    4108,
                    4110,
                    5263,
                    4113,
                    5522,
                    5272,
                    2339,
                    8100,
                    2341,
                    4134,
                    4135,
                    4136,
                    4137,
                    4138,
                    4139,
                    2348,
                    4141,
                    4142,
                    2479,
                    4143,
                    4144,
                    4146,
                    4147,
                    5292,
                    7085,
                    7087,
                    4151,
                    4152,
                    8101,
                    4154,
                    2891,
                    2766,
                    2894,
                    4688,
                    2769,
                    2902,
                    2904,
                    2905,
                    8152,
                    8153,
                    8154,
                    2784,
                    2786,
                    1658,
                    5500,
                    5501,
                    5502
                ],
                "arr_columns.drop": [
                    1661
                ],
                "columns.drop": [
                    1662
                ],
                "ABCMultiIndex": [
                    4384,
                    7523,
                    5060,
                    3494,
                    1766,
                    4135,
                    4775,
                    4395,
                    3445,
                    1755,
                    2685,
                    4127
                ],
                "ix_vals": [
                    1761,
                    1757,
                    1759
                ],
                "self.index.values": [
                    1757,
                    1759
                ],
                "_internal_get_values": [
                    1776,
                    1761
                ],
                "c": [
                    1761,
                    4171,
                    4172,
                    7196,
                    2479,
                    1776,
                    1777,
                    7197,
                    7388,
                    7189,
                    7191,
                    7193,
                    7195,
                    3548,
                    3549
                ],
                "count": [
                    1763,
                    2343,
                    1769,
                    1770,
                    2345,
                    2348,
                    4564,
                    4567,
                    4569,
                    4571
                ],
                "self.index.names": [
                    4387,
                    1764,
                    4126
                ],
                "n": [
                    4386,
                    4387,
                    1767,
                    1768,
                    4136,
                    4137,
                    3531,
                    3532,
                    3536,
                    4918,
                    5018,
                    3547
                ],
                "names": [
                    4385,
                    4164,
                    1830,
                    4392,
                    4138,
                    1774,
                    4142,
                    4399,
                    1777,
                    4145,
                    4148,
                    4152,
                    4124,
                    4126
                ],
                "itertools.chain": [
                    1774
                ],
                "index_len": [
                    1826,
                    1795,
                    1780,
                    1799
                ],
                "formats": [
                    1824,
                    1830,
                    1781,
                    1822
                ],
                "dtype_mapping": [
                    1824,
                    1827,
                    1796,
                    1800,
                    1808,
                    1809,
                    1810,
                    1811,
                    1812,
                    1814,
                    1821,
                    1823
                ],
                "index_dtypes": [
                    1796
                ],
                "column_dtypes": [
                    1800
                ],
                "is_dict_like": [
                    1808
                ],
                "formats.append": [
                    1824,
                    1822
                ],
                "v.dtype": [
                    1822
                ],
                "np.dtype": [
                    1823
                ],
                "element": [
                    1826,
                    1827
                ],
                "msg": [
                    7586,
                    1827,
                    1828,
                    3055,
                    3056,
                    7582
                ],
                "np.rec.fromarrays": [
                    1830
                ],
                "np.rec": [
                    1830
                ],
                "kwargs": [
                    1928,
                    2057,
                    6415,
                    1938,
                    6419,
                    2581,
                    6426,
                    1949,
                    6429,
                    6437,
                    6438,
                    7096,
                    3393,
                    3164,
                    3165,
                    3678,
                    3679,
                    3681,
                    3170,
                    3171,
                    3172,
                    3173,
                    3682,
                    3683,
                    3940,
                    3941,
                    3943,
                    3944,
                    3945,
                    3057,
                    3058,
                    3059,
                    3966
                ],
                "version": [
                    1929,
                    1931
                ],
                "convert_strl": [
                    1938,
                    1932
                ],
                "writer": [
                    1940,
                    1951
                ],
                "statawriter": [
                    1940
                ],
                "path": [
                    2052,
                    1941,
                    1965
                ],
                "convert_dates": [
                    1943
                ],
                "byteorder": [
                    1944
                ],
                "time_stamp": [
                    1945
                ],
                "data_label": [
                    1946
                ],
                "write_index": [
                    1947
                ],
                "variable_labels": [
                    1948
                ],
                "writer.write_file": [
                    1951
                ],
                "deprecate_kwarg": [
                    1953,
                    1837,
                    1967
                ],
                "to_feather": [
                    1965
                ],
                "to_parquet": [
                    2050
                ],
                "engine": [
                    2053,
                    2895,
                    2896,
                    2770,
                    2773
                ],
                "compression": [
                    2054
                ],
                "partition_cols": [
                    2056
                ],
                "fmt._VALID_JUSTIFY_PARAMETERS": [
                    2129
                ],
                "bold_rows": [
                    2144
                ],
                "escape": [
                    2145
                ],
                "table_id": [
                    2150
                ],
                "render_links": [
                    2151
                ],
                "classes": [
                    2156
                ],
                "notebook": [
                    2157
                ],
                "border": [
                    2158
                ],
                "sys.stdout": [
                    2298
                ],
                "sys": [
                    2298
                ],
                "lines": [
                    2306,
                    2307,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2392,
                    2300,
                    2302,
                    2303
                ],
                "lines.append": [
                    2306,
                    2374,
                    2347,
                    2352,
                    2325,
                    2391,
                    2302,
                    2303
                ],
                "self.index._summary": [
                    2303
                ],
                "fmt.buffer_put_lines": [
                    2392,
                    2307
                ],
                "cols": [
                    7205,
                    2310,
                    7301,
                    7302,
                    7944,
                    7946,
                    7179,
                    7947,
                    7311,
                    7315,
                    7166,
                    3448,
                    3449,
                    3450,
                    2332,
                    2334,
                    7167
                ],
                "null_counts": [
                    2321,
                    2318
                ],
                "show_counts": [
                    2344,
                    2321,
                    2330,
                    2319
                ],
                "exceeds_info_cols": [
                    2322,
                    2367
                ],
                "space": [
                    2348,
                    2326,
                    8159
                ],
                "pprint_thing": [
                    2341,
                    2326
                ],
                "counts": [
                    2372,
                    2373,
                    2345,
                    7547,
                    2388,
                    7509,
                    7510,
                    2327,
                    2331,
                    2332,
                    7549,
                    2334
                ],
                "tmpl": [
                    2336,
                    2329,
                    2348
                ],
                "self.count": [
                    2331
                ],
                "dtypes": [
                    2338,
                    3268,
                    2340,
                    2373,
                    2374,
                    3269
                ],
                "self.dtypes": [
                    2338,
                    3295,
                    3301,
                    3289,
                    7647
                ],
                "dtypes.iloc": [
                    2340
                ],
                "counts.iloc": [
                    2345
                ],
                "_put_str": [
                    2348
                ],
                "tmpl.format": [
                    2348
                ],
                "self.columns._summary": [
                    2352
                ],
                "num": [
                    7377,
                    7380,
                    2357,
                    2358,
                    2359,
                    2360
                ],
                "size_qualifier": [
                    2380,
                    2389,
                    2358,
                    2391,
                    2360
                ],
                "verbose": [
                    2362,
                    2364
                ],
                "_verbose_repr": [
                    2370,
                    2363
                ],
                "_non_verbose_repr": [
                    2368,
                    2365
                ],
                "self._data.get_dtype_counts": [
                    2372
                ],
                "counts.items": [
                    2373
                ],
                "join": [
                    6033,
                    5490,
                    3653,
                    2374
                ],
                "memory_usage": [
                    2376,
                    2377,
                    2378,
                    2381
                ],
                "deep": [
                    2382,
                    2479,
                    2387,
                    2483,
                    2390
                ],
                "self.index._is_memory_usage_qualified": [
                    2388
                ],
                "mem_usage": [
                    2390,
                    2391
                ],
                "self.memory_usage": [
                    2390
                ],
                "_sizeof_fmt": [
                    2391
                ],
                "c.memory_usage": [
                    2479
                ],
                "append": [
                    6765,
                    2483,
                    4125
                ],
                "self.index.memory_usage": [
                    2483
                ],
                "nv.validate_transpose": [
                    2580
                ],
                "nv": [
                    7096,
                    2580
                ],
                "args": [
                    3940,
                    6437,
                    6438,
                    6415,
                    6419,
                    2580,
                    7096,
                    6584,
                    6426,
                    6429,
                    3678
                ],
                "transpose": [
                    2581,
                    2583
                ],
                "axis": [
                    7936,
                    4737,
                    7937,
                    7560,
                    6411,
                    7691,
                    7565,
                    7566,
                    6415,
                    7570,
                    6419,
                    3991,
                    6423,
                    7578,
                    4763,
                    4764,
                    6435,
                    6436,
                    6311,
                    2600,
                    7594,
                    5036,
                    5037,
                    7725,
                    7726,
                    7727,
                    7729,
                    7603,
                    7987,
                    6581,
                    7988,
                    7990,
                    7865,
                    7993,
                    7355,
                    7359,
                    4800,
                    7489,
                    5059,
                    4548,
                    5060,
                    3654,
                    7364,
                    4552,
                    4553,
                    5065,
                    7491,
                    7499,
                    7500,
                    7626,
                    7632,
                    7505,
                    7763,
                    7508,
                    7764,
                    7510,
                    7765,
                    7767,
                    8021,
                    8022,
                    8024,
                    8027,
                    7646,
                    7520,
                    7521,
                    4578,
                    4709,
                    7525,
                    7401,
                    3819,
                    4720,
                    7536,
                    4727,
                    3962,
                    7551
                ],
                "new_values": [
                    2723,
                    2725,
                    2601,
                    3626,
                    2604,
                    3629,
                    2606,
                    2609
                ],
                "self._data.fast_xs": [
                    2601
                ],
                "new_values.base": [
                    2604
                ],
                "new_values.dtype": [
                    2609
                ],
                "result._set_is_copy": [
                    2746,
                    2611
                ],
                "label": [
                    2616,
                    2626,
                    2629
                ],
                "self._data.iget": [
                    3504,
                    2622
                ],
                "np.nan": [
                    2625,
                    7308,
                    2926,
                    4367,
                    7406,
                    7728,
                    7189,
                    7766,
                    3672,
                    3582,
                    4351
                ],
                "self._box_col_values": [
                    2626,
                    2934
                ],
                "result._set_as_cached": [
                    2629
                ],
                "key": [
                    2817,
                    2818,
                    2823,
                    2696,
                    2825,
                    2829,
                    2702,
                    2704,
                    2709,
                    2710,
                    2837,
                    2838,
                    2840,
                    2842,
                    2715,
                    2718,
                    2849,
                    3493,
                    3495,
                    2863,
                    2864,
                    2743,
                    2749,
                    3448,
                    6341,
                    2634,
                    2635,
                    2637,
                    2639,
                    2641,
                    2642,
                    2645,
                    2652,
                    2653,
                    2656,
                    2657,
                    2661,
                    2789,
                    2792,
                    2665,
                    2666,
                    2670,
                    2671,
                    2672,
                    2798,
                    2799,
                    2800,
                    2801,
                    2804,
                    2930,
                    3445,
                    2808,
                    3446,
                    2812,
                    2813,
                    2686,
                    2815
                ],
                "lib.item_from_zerodim": [
                    2634
                ],
                "lib": [
                    3552,
                    2634,
                    7547,
                    4341,
                    6650,
                    6651
                ],
                "com.apply_if_callable": [
                    3394,
                    2635,
                    2789
                ],
                "is_hashable": [
                    2637
                ],
                "self.columns.nlevels": [
                    2640,
                    4403,
                    2664,
                    4412
                ],
                "self._getitem_multilevel": [
                    2665,
                    2641
                ],
                "indexer": [
                    4737,
                    2818,
                    3586,
                    2820,
                    3590,
                    2828,
                    2832,
                    2710,
                    2711,
                    3606,
                    3610,
                    4771,
                    3625,
                    4778,
                    3627,
                    4796,
                    4801,
                    2645,
                    2646,
                    2649,
                    2792,
                    2793,
                    2666,
                    2667,
                    2668,
                    2796,
                    2672,
                    4721,
                    4722,
                    2675,
                    2676,
                    2678,
                    4732
                ],
                "convert_to_index_sliceable": [
                    2792,
                    2645
                ],
                "self._slice": [
                    2649
                ],
                "self.where": [
                    2653
                ],
                "com.is_bool_indexer": [
                    2656,
                    2812
                ],
                "self._getitem_bool_array": [
                    2657
                ],
                "is_single_key": [
                    2680,
                    2661,
                    2663
                ],
                "self.columns.get_loc": [
                    2784,
                    2666,
                    2930,
                    3446,
                    2715
                ],
                "is_integer": [
                    2667,
                    7103
                ],
                "self.loc._get_listlike_indexer": [
                    2672,
                    2828
                ],
                "self.loc": [
                    4578,
                    2820,
                    2828,
                    2672,
                    2832,
                    2904,
                    3062,
                    2808
                ],
                "np.where": [
                    2676
                ],
                "self.take": [
                    4562,
                    2678,
                    2711
                ],
                "data.shape": [
                    2685
                ],
                "key.index.equals": [
                    2696
                ],
                "key.index": [
                    2696
                ],
                "check_bool_indexer": [
                    2817,
                    2709
                ],
                "key.nonzero": [
                    2818,
                    2710
                ],
                "loc": [
                    2723,
                    3323,
                    3446,
                    3447,
                    3448,
                    2715,
                    2716,
                    2717
                ],
                "new_columns": [
                    2720,
                    5250,
                    3622,
                    3629,
                    5295,
                    3632,
                    3606,
                    3607,
                    3610,
                    2717,
                    2718,
                    5247
                ],
                "result_columns": [
                    2721,
                    2725,
                    2718
                ],
                "maybe_droplevels": [
                    3448,
                    2718
                ],
                "self._is_mixed_type": [
                    3536,
                    2719
                ],
                "result.columns": [
                    2721,
                    5068,
                    2735,
                    2736,
                    5040
                ],
                "result.__finalize__": [
                    2727
                ],
                "top": [
                    2736,
                    2737,
                    2738,
                    2739
                ],
                "takeable": [
                    2890,
                    2901,
                    2765
                ],
                "series": [
                    5251,
                    5285,
                    5254,
                    5257,
                    5289,
                    2891,
                    2892,
                    2766,
                    2767,
                    2894,
                    2769,
                    2896,
                    5267,
                    2773,
                    5269,
                    5277
                ],
                "self._iget_item_cache": [
                    2891,
                    2766
                ],
                "series._values": [
                    2896,
                    2773,
                    2767
                ],
                "self.index._engine": [
                    2770,
                    2895
                ],
                "engine.get_value": [
                    2773
                ],
                "self.index.nlevels": [
                    2776,
                    4128,
                    4379
                ],
                "self.index.get_loc": [
                    2785
                ],
                "self._get_value": [
                    2786,
                    3549
                ],
                "self._setitem_slice": [
                    2796
                ],
                "self._setitem_frame": [
                    2799
                ],
                "self._setitem_array": [
                    2801
                ],
                "self._set_item": [
                    2804
                ],
                "self._check_setitem_copy": [
                    2848,
                    2819,
                    2831,
                    2870,
                    2807
                ],
                "self.loc._setitem_with_indexer": [
                    2832,
                    2820
                ],
                "value.columns": [
                    2825,
                    3449,
                    2823
                ],
                "k1": [
                    2825,
                    2826
                ],
                "k2": [
                    2825,
                    2826
                ],
                "key.shape": [
                    2838
                ],
                "self.shape": [
                    8121,
                    3277,
                    2838
                ],
                "self._construct_axes_dict": [
                    2840
                ],
                "key.values.size": [
                    2842
                ],
                "key.values": [
                    2842
                ],
                "is_bool_dtype": [
                    2842
                ],
                "self._check_inplace_setting": [
                    2847
                ],
                "self._where": [
                    2849
                ],
                "self._ensure_valid_index": [
                    3321,
                    2862
                ],
                "self._sanitize_column": [
                    3322,
                    2863
                ],
                "NDFrame._set_item": [
                    2864
                ],
                "series._set_value": [
                    2892
                ],
                "engine.set_value": [
                    2896
                ],
                "self._item_cache.pop": [
                    2905
                ],
                "self._item_cache": [
                    2905
                ],
                "self._data.reindex_axis": [
                    2925
                ],
                "value.index.copy": [
                    2926
                ],
                "value.index": [
                    3420,
                    3429,
                    2926
                ],
                "items": [
                    2930,
                    2932,
                    2941,
                    2934
                ],
                "values.ndim": [
                    2931
                ],
                "values.T": [
                    2932
                ],
                "inplace": [
                    4740,
                    4618,
                    4621,
                    3982,
                    4118,
                    4761,
                    4791,
                    4547,
                    4420,
                    4806,
                    4179,
                    3163,
                    4580,
                    3173,
                    4708,
                    4331,
                    4332,
                    3053,
                    3823,
                    4086,
                    3963,
                    3068
                ],
                "validate_bool_kwarg": [
                    4547,
                    4708,
                    4618,
                    4331,
                    3053,
                    4086,
                    4761,
                    3163
                ],
                "expr": [
                    3059,
                    3173,
                    3054,
                    3055
                ],
                "kwargs.pop": [
                    3681,
                    3682,
                    3943,
                    3944,
                    3057,
                    3164,
                    3165
                ],
                "res": [
                    6952,
                    6955,
                    3059,
                    3062,
                    3066
                ],
                "self.eval": [
                    3059
                ],
                "new_data": [
                    4736,
                    4741,
                    4743,
                    4623,
                    4624,
                    6312,
                    6313,
                    7983,
                    7985,
                    7989,
                    7991,
                    7995,
                    4801,
                    4804,
                    4807,
                    4809,
                    8017,
                    8019,
                    8150,
                    8023,
                    8025,
                    8153,
                    8154,
                    8155,
                    8029,
                    5093,
                    5097,
                    5098,
                    5105,
                    5109,
                    3062,
                    5110,
                    3066,
                    3069,
                    3071
                ],
                "self._update_inplace": [
                    4581,
                    4741,
                    4807,
                    4624,
                    3069
                ],
                "resolvers": [
                    3172,
                    3169,
                    3164,
                    3166
                ],
                "index_resolvers": [
                    3169,
                    3167
                ],
                "self._get_index_resolvers": [
                    3167
                ],
                "column_resolvers": [
                    3168,
                    3169
                ],
                "self._get_space_character_free_column_resolvers": [
                    3168
                ],
                "kwargs.get": [
                    3172
                ],
                "_eval": [
                    3173
                ],
                "include": [
                    3266,
                    3268,
                    3272,
                    3273,
                    3255,
                    3256,
                    3291,
                    3260,
                    3293
                ],
                "selection": [
                    3260,
                    3262
                ],
                "infer_dtype_from_object": [
                    3266,
                    3267
                ],
                "invalidate_string_dtypes": [
                    3269
                ],
                "include.isdisjoint": [
                    3272
                ],
                "keep_these": [
                    3301,
                    3303,
                    3277,
                    3295
                ],
                "np.full": [
                    3277
                ],
                "extracted_dtypes": [
                    3282,
                    3287
                ],
                "unique_dtype": [
                    3283,
                    3284,
                    3285
                ],
                "unique_dtypes": [
                    3289,
                    3299,
                    3284,
                    3293
                ],
                "unique_dtype.type": [
                    3285
                ],
                "dtypes_set": [
                    3285
                ],
                "self.dtypes.unique": [
                    3289
                ],
                "included_dtypes": [
                    3292,
                    3295
                ],
                "extract_unique_dtypes_from_dtypes_set": [
                    3298,
                    3292
                ],
                "self.dtypes.isin": [
                    3301,
                    3295
                ],
                "excluded_dtypes": [
                    3298,
                    3301
                ],
                "keep_these.values": [
                    3303
                ],
                "column": [
                    6024,
                    6032,
                    6033,
                    3322,
                    3323
                ],
                "self._data.insert": [
                    3323
                ],
                "allow_duplicates": [
                    3323
                ],
                "self.copy": [
                    5241,
                    5063,
                    4616,
                    5034,
                    4335,
                    4121,
                    4794,
                    3391
                ],
                "kwargs.items": [
                    3393
                ],
                "value.index.equals": [
                    3420
                ],
                "value._values.copy": [
                    3421
                ],
                "value._values": [
                    3421
                ],
                "_values": [
                    3426,
                    5501,
                    5502,
                    4151
                ],
                "value.reindex": [
                    3426,
                    3450
                ],
                "value.index.is_unique": [
                    3429
                ],
                "err": [
                    3431
                ],
                "reindexer": [
                    3440,
                    3452
                ],
                "cols.equals": [
                    3449
                ],
                "value.copy": [
                    3472,
                    3457,
                    3474,
                    3470
                ],
                "sanitize_index": [
                    3458,
                    3463
                ],
                "is_sequence": [
                    4713,
                    3460
                ],
                "maybe_convert_platform": [
                    3466
                ],
                "com.asarray_tuplesafe": [
                    3468
                ],
                "value.ndim": [
                    3469,
                    3493
                ],
                "is_object_dtype": [
                    7637,
                    7594,
                    3477,
                    3551
                ],
                "value.dtype": [
                    3477
                ],
                "maybe_infer_to_datetimelike": [
                    3478
                ],
                "infer_dtype": [
                    3482,
                    3486
                ],
                "infer_dtype_from_scalar": [
                    3482
                ],
                "maybe_cast_to_datetime": [
                    3486
                ],
                "is_extension_array_dtype": [
                    3489,
                    5350
                ],
                "broadcast": [
                    3493
                ],
                "existing_piece": [
                    3496,
                    3497,
                    3495
                ],
                "np.tile": [
                    3497
                ],
                "existing_piece.columns": [
                    3497
                ],
                "np.atleast_2d": [
                    3499
                ],
                "item": [
                    3504,
                    3505
                ],
                "idx": [
                    7205,
                    7302,
                    3504,
                    3505,
                    7315,
                    7167
                ],
                "row_labels": [
                    3538,
                    3531,
                    3548
                ],
                "col_labels": [
                    3548,
                    3539,
                    3532
                ],
                "thresh": [
                    3536,
                    4567,
                    4566,
                    3535
                ],
                "ridx": [
                    3544,
                    3538,
                    3540
                ],
                "self.index.get_indexer": [
                    3538
                ],
                "cidx": [
                    3544,
                    3539,
                    3542
                ],
                "self.columns.get_indexer": [
                    3539,
                    6779
                ],
                "flat_index": [
                    3544,
                    3545
                ],
                "values.flat": [
                    3545
                ],
                "np.empty": [
                    3547,
                    7180,
                    7307,
                    4350
                ],
                "r": [
                    3548,
                    3549
                ],
                "lib.maybe_convert_objects": [
                    3552,
                    4341
                ],
                "frame": [
                    4119,
                    4121,
                    6963,
                    6965,
                    4151,
                    7494,
                    7496,
                    7499,
                    4172,
                    7500,
                    7502,
                    4177,
                    7505,
                    4180,
                    7508,
                    7510,
                    7516,
                    7518,
                    7520,
                    7521,
                    3560,
                    7528,
                    7531,
                    3564,
                    7534,
                    3570,
                    3574
                ],
                "axes": [
                    3940,
                    3621,
                    3622,
                    3941,
                    3562,
                    3568,
                    3678,
                    3679
                ],
                "frame._reindex_columns": [
                    3564
                ],
                "method": [
                    7393,
                    7170,
                    3587,
                    7172,
                    7202,
                    7174,
                    7385,
                    7368,
                    3658,
                    7178,
                    3565,
                    3985,
                    3571,
                    7382,
                    3607,
                    3961,
                    7359
                ],
                "level": [
                    3587,
                    3607,
                    4376,
                    4377,
                    4378,
                    4379,
                    4380,
                    4375,
                    4769,
                    4772,
                    4397,
                    7490,
                    7491,
                    3655,
                    5962,
                    5963,
                    5965,
                    5075,
                    6100,
                    3565,
                    3822,
                    3571,
                    7541,
                    7542,
                    7544,
                    7545,
                    7546
                ],
                "limit": [
                    3587,
                    3659,
                    3565,
                    3983,
                    3571,
                    3607,
                    3964
                ],
                "tolerance": [
                    3587,
                    3571,
                    3565,
                    3607
                ],
                "frame._reindex_index": [
                    3570
                ],
                "new_index": [
                    3586,
                    3587,
                    4419,
                    3621,
                    3590,
                    3629,
                    5295,
                    3632,
                    4374,
                    5238,
                    5240,
                    4380
                ],
                "self.index.reindex": [
                    3586,
                    3621
                ],
                "self._reindex_with_indexers": [
                    3609,
                    3589,
                    3631
                ],
                "self.columns.reindex": [
                    3622,
                    3606
                ],
                "row_indexer": [
                    3624,
                    3625,
                    3632,
                    3621
                ],
                "col_indexer": [
                    3624,
                    3625,
                    3632,
                    3622
                ],
                "algorithms.take_2d_multi": [
                    3626
                ],
                "algorithms": [
                    3626,
                    4918,
                    4663,
                    5017,
                    8121
                ],
                "align": [
                    3651
                ],
                "fill_axis": [
                    3660
                ],
                "broadcast_axis": [
                    3661
                ],
                "validate_axis_style_args": [
                    3940,
                    3678
                ],
                "kwargs.update": [
                    3941,
                    3679
                ],
                "reindex": [
                    3683
                ],
                "NDFrame.reindex.__doc__": [
                    3665
                ],
                "NDFrame.reindex": [
                    3665
                ],
                "rewrite_axis_style_signature": [
                    3666,
                    3827
                ],
                "drop": [
                    3817,
                    7398,
                    4382,
                    4153
                ],
                "labels": [
                    4353,
                    7561,
                    7566,
                    4764,
                    4768,
                    4771,
                    4775,
                    4779,
                    4788,
                    4789,
                    4663,
                    4666,
                    4797,
                    7626,
                    7632,
                    4689,
                    4691,
                    7650,
                    3818,
                    4344,
                    4345
                ],
                "errors": [
                    3824,
                    5507,
                    5492
                ],
                "rename": [
                    3945
                ],
                "fillna": [
                    3959
                ],
                "downcast": [
                    3965
                ],
                "NDFrame.fillna.__doc__": [
                    3948
                ],
                "NDFrame.fillna": [
                    3948
                ],
                "to_replace": [
                    3980
                ],
                "regex": [
                    3984
                ],
                "shift": [
                    3990
                ],
                "periods": [
                    6312,
                    3991
                ],
                "freq": [
                    8023,
                    3991,
                    7989,
                    7991,
                    8025
                ],
                "keys": [
                    4097,
                    4134,
                    4720,
                    4721,
                    4087,
                    4088
                ],
                "err_msg": [
                    4104,
                    4090,
                    4110
                ],
                "missing": [
                    4096,
                    4113,
                    4115,
                    4116,
                    4412,
                    4413
                ],
                "ABCIndexClass": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "ABCSeries": [
                    4139,
                    5346,
                    4099,
                    5358
                ],
                "abc.Iterator": [
                    4146,
                    4099
                ],
                "found": [
                    4112,
                    4108
                ],
                "missing.append": [
                    4113
                ],
                "self.index._get_level_values": [
                    4129
                ],
                "col.nlevels": [
                    4136
                ],
                "col._get_level_values": [
                    4137
                ],
                "names.extend": [
                    4138
                ],
                "col.names": [
                    4138
                ],
                "names.append": [
                    4152,
                    4145,
                    4148,
                    4142
                ],
                "col.name": [
                    4142
                ],
                "to_remove.append": [
                    4154
                ],
                "verify_integrity": [
                    4166,
                    6791
                ],
                "index.is_unique": [
                    4166
                ],
                "duplicates": [
                    4168,
                    4167
                ],
                "unique": [
                    4167
                ],
                "index.duplicated": [
                    4167
                ],
                "index._cleanup": [
                    4175
                ],
                "frame.index": [
                    4177
                ],
                "new_obj": [
                    4417,
                    4419,
                    4421,
                    4333,
                    4335,
                    4374
                ],
                "index._values": [
                    4338
                ],
                "PeriodIndex": [
                    4339
                ],
                "DatetimeIndex": [
                    4339
                ],
                "np.object_": [
                    4340
                ],
                "mask.all": [
                    4349,
                    5519
                ],
                "values.fill": [
                    4351
                ],
                "values.take": [
                    4353
                ],
                "values_type": [
                    4360,
                    4369,
                    4370,
                    4363
                ],
                "values_dtype": [
                    4361,
                    4370
                ],
                "DatetimeLikeArray": [
                    4369,
                    4363
                ],
                "values._data": [
                    4364
                ],
                "maybe_upcast_putmask": [
                    4367
                ],
                "self.index._get_level_number": [
                    4378
                ],
                "lev": [
                    4416,
                    4378,
                    4396
                ],
                "self.index.droplevel": [
                    4380
                ],
                "to_insert": [
                    4393,
                    4396,
                    4389,
                    4383
                ],
                "Any": [
                    4383
                ],
                "self.index.levels": [
                    4389
                ],
                "self.index.codes": [
                    4389
                ],
                "default": [
                    4392,
                    4391
                ],
                "self.index.name": [
                    4392,
                    6760
                ],
                "multi_col": [
                    4400,
                    4395
                ],
                "lab": [
                    4416,
                    4396
                ],
                "col_name": [
                    4408,
                    4401,
                    4411,
                    4403
                ],
                "col_fill": [
                    4408,
                    4402,
                    4411,
                    4413
                ],
                "lev_num": [
                    4410,
                    4411
                ],
                "self.columns._get_level_number": [
                    4410
                ],
                "col_level": [
                    4410,
                    6220
                ],
                "name_lst": [
                    4411,
                    4412,
                    4413,
                    4414
                ],
                "level_values": [
                    4416,
                    4417
                ],
                "_maybe_casted_values": [
                    4416
                ],
                "new_obj.insert": [
                    4417
                ],
                "new_obj.index": [
                    4419
                ],
                "isna": [
                    5505,
                    5257,
                    5258,
                    5514,
                    5357,
                    4430
                ],
                "isnull": [
                    4434
                ],
                "notna": [
                    5508,
                    5509,
                    7305,
                    7531,
                    5516,
                    7534,
                    7505,
                    7508,
                    4438,
                    7641
                ],
                "notnull": [
                    4442
                ],
                "self._get_axis_number": [
                    7936,
                    7489,
                    5059,
                    6435,
                    4709,
                    4552,
                    6411,
                    5036,
                    7355,
                    7565,
                    7725,
                    7763,
                    7987,
                    8021,
                    4763
                ],
                "agg_axis": [
                    7521,
                    4553,
                    4557,
                    4562,
                    4564,
                    4569,
                    7549
                ],
                "agg_obj": [
                    4569,
                    4562,
                    4555,
                    4564
                ],
                "subset": [
                    4619,
                    4668,
                    4669,
                    6335,
                    4672,
                    4673,
                    4674,
                    6336,
                    4676,
                    6337,
                    6338,
                    4679,
                    6341,
                    4556,
                    4684,
                    4558,
                    4671,
                    4688,
                    4561
                ],
                "ax": [
                    4557,
                    4558
                ],
                "self._get_axis": [
                    5060,
                    4557,
                    7727,
                    7765,
                    4764
                ],
                "indices": [
                    7726,
                    4558,
                    7728,
                    4559,
                    4562,
                    7764,
                    7766
                ],
                "ax.get_indexer_for": [
                    4558
                ],
                "check": [
                    4560,
                    4561,
                    4559
                ],
                "check.any": [
                    4560
                ],
                "np.compress": [
                    4561
                ],
                "agg_obj.count": [
                    4564
                ],
                "how": [
                    6914,
                    6951,
                    6426,
                    7991,
                    6958,
                    6415,
                    6992,
                    6933,
                    6965,
                    7989,
                    4568,
                    4570,
                    6428,
                    4573,
                    4574
                ],
                "agg_obj._get_axis": [
                    4569
                ],
                "self.empty": [
                    4659,
                    5243,
                    4615
                ],
                "duplicated": [
                    4626,
                    4619,
                    4622
                ],
                "self.duplicated": [
                    4619
                ],
                "keep": [
                    5018,
                    4619,
                    4692,
                    4918
                ],
                "inds": [
                    4622,
                    4623
                ],
                "_ndarray_values.nonzero": [
                    4622
                ],
                "_ndarray_values": [
                    4622
                ],
                "self._data.take": [
                    4736,
                    4801,
                    4623
                ],
                "shape": [
                    4689,
                    4666,
                    4691,
                    4663
                ],
                "algorithms.factorize": [
                    4663
                ],
                "vals": [
                    7085,
                    7087,
                    4688,
                    4689,
                    7089,
                    4664
                ],
                "_SIZE_HINT_LIMIT": [
                    4664
                ],
                "labels.astype": [
                    4666
                ],
                "np.iterable": [
                    4671
                ],
                "cast": [
                    4679
                ],
                "diff": [
                    4684,
                    4685,
                    4686
                ],
                "difference": [
                    4684
                ],
                "diff.empty": [
                    4685
                ],
                "col.values": [
                    4688
                ],
                "f": [
                    7592,
                    7625,
                    4689,
                    7635,
                    7865,
                    7615
                ],
                "ids": [
                    4691,
                    4692
                ],
                "get_group_index": [
                    4691
                ],
                "duplicated_int64": [
                    4692
                ],
                "by": [
                    4711,
                    4712,
                    4713,
                    4715,
                    4717,
                    4720,
                    4726,
                    4727
                ],
                "ascending": [
                    4772,
                    4797,
                    4713,
                    4715,
                    4780,
                    4721,
                    4788,
                    4789,
                    4729,
                    4730,
                    4733
                ],
                "self._get_label_or_level_values": [
                    4720,
                    4727
                ],
                "lexsort_indexer": [
                    4721,
                    4778
                ],
                "na_position": [
                    4797,
                    4721,
                    4733,
                    4781
                ],
                "ensure_platform_int": [
                    4722
                ],
                "nargsort": [
                    4796,
                    4732
                ],
                "kind": [
                    4733,
                    4797
                ],
                "self._get_block_manager_axis": [
                    4800,
                    4737,
                    6311
                ],
                "__finalize__": [
                    4809,
                    4743
                ],
                "NDFrame.sort_values.__doc__": [
                    4698
                ],
                "NDFrame.sort_values": [
                    4698
                ],
                "labels._sort_levels_monotonic": [
                    4768
                ],
                "new_axis": [
                    4771
                ],
                "labels.sortlevel": [
                    4771
                ],
                "sort_remaining": [
                    4772
                ],
                "labels._get_codes_for_sorting": [
                    4779
                ],
                "labels.is_monotonic_increasing": [
                    4788
                ],
                "labels.is_monotonic_decreasing": [
                    4789
                ],
                "baxis": [
                    4800,
                    4801,
                    4804
                ],
                "new_data.axes": [
                    4804
                ],
                "_sort_levels_monotonic": [
                    4804
                ],
                "NDFrame.sort_index.__doc__": [
                    4746
                ],
                "NDFrame.sort_index": [
                    4746
                ],
                "nlargest": [
                    4918
                ],
                "algorithms.SelectNFrame": [
                    5017,
                    4918
                ],
                "nsmallest": [
                    5017
                ],
                "result.index": [
                    5066,
                    5038,
                    6034
                ],
                "result.index.swaplevel": [
                    5038
                ],
                "j": [
                    5038,
                    7183,
                    5040,
                    7184,
                    7187,
                    7190,
                    7196,
                    7197
                ],
                "result.columns.swaplevel": [
                    5040
                ],
                "result.index.reorder_levels": [
                    5066
                ],
                "order": [
                    5066,
                    5068
                ],
                "result.columns.reorder_levels": [
                    5068
                ],
                "this": [
                    5505,
                    5251,
                    5509,
                    5516,
                    5263,
                    5522,
                    7356,
                    7359,
                    7362,
                    5075,
                    5091,
                    5093,
                    5096,
                    5097,
                    5098,
                    7402,
                    5237,
                    5238,
                    5501,
                    5247
                ],
                "self.align": [
                    5075,
                    5237
                ],
                "_arith_op": [
                    5080,
                    5096,
                    5093
                ],
                "func": [
                    5089,
                    5091,
                    6437,
                    6438,
                    5097,
                    5289,
                    5103,
                    6415,
                    5105,
                    6419,
                    6580,
                    5109,
                    5080,
                    6650,
                    6651
                ],
                "ops.fill_binop": [
                    5088
                ],
                "ops": [
                    5088,
                    5091,
                    5093,
                    5103,
                    8144,
                    5105,
                    8145
                ],
                "ops.should_series_dispatch": [
                    5091,
                    5103
                ],
                "ops.dispatch_to_series": [
                    5105,
                    5093
                ],
                "np.errstate": [
                    5504,
                    7624,
                    5108,
                    5095
                ],
                "res_values": [
                    5096,
                    5097
                ],
                "this.values": [
                    5096,
                    5097
                ],
                "other.values": [
                    5096,
                    5097,
                    5109
                ],
                "dispatch_fill_zeros": [
                    5097
                ],
                "this._construct_result": [
                    5098
                ],
                "self.values.T": [
                    5109
                ],
                "out": [
                    5128,
                    5124,
                    5127
                ],
                "out.columns": [
                    5127
                ],
                "other_idxlen": [
                    5235,
                    5243
                ],
                "this.index": [
                    5238
                ],
                "other.empty": [
                    5240
                ],
                "other.copy": [
                    5244
                ],
                "this.columns.union": [
                    5247
                ],
                "this.columns": [
                    5247
                ],
                "do_fill": [
                    5248,
                    5266
                ],
                "otherSeries": [
                    5252,
                    5255,
                    5287,
                    5289,
                    5258,
                    5268,
                    5270
                ],
                "this_dtype": [
                    5290,
                    5283,
                    5284,
                    5254
                ],
                "series.dtype": [
                    5254
                ],
                "other_dtype": [
                    5275,
                    5283,
                    5286,
                    5255
                ],
                "otherSeries.dtype": [
                    5255
                ],
                "this_mask": [
                    5257,
                    5269
                ],
                "other_mask": [
                    5258,
                    5270,
                    5262
                ],
                "overwrite": [
                    5513,
                    5262
                ],
                "other_mask.all": [
                    5262
                ],
                "series.copy": [
                    5267
                ],
                "otherSeries.copy": [
                    5268
                ],
                "new_dtype": [
                    5283,
                    5284,
                    5285,
                    5286,
                    5287,
                    5275,
                    5277
                ],
                "series.astype": [
                    5277,
                    5285
                ],
                "find_common_type": [
                    5283
                ],
                "is_dtype_equal": [
                    5284,
                    5286
                ],
                "otherSeries.astype": [
                    5287
                ],
                "maybe_downcast_to_dtype": [
                    5290
                ],
                "arr._values": [
                    5347
                ],
                "needs_i8_conversion": [
                    5349
                ],
                "arr.dtype": [
                    5350
                ],
                "arr.asi8": [
                    5351
                ],
                "arr.view": [
                    5353
                ],
                "mask._values": [
                    5359
                ],
                "x_values": [
                    5361,
                    5369
                ],
                "extract_values": [
                    5361,
                    5362
                ],
                "y_values": [
                    5369,
                    5362,
                    5367
                ],
                "y": [
                    5362,
                    5366
                ],
                "y.name": [
                    5366
                ],
                "expressions.where": [
                    5369,
                    5522
                ],
                "expressions": [
                    5369,
                    5522
                ],
                "self.combine": [
                    5371
                ],
                "combiner": [
                    5371
                ],
                "other.reindex_like": [
                    5498
                ],
                "that": [
                    5505,
                    5508,
                    5514,
                    5522,
                    5502
                ],
                "filter_func": [
                    5505,
                    5503
                ],
                "mask_this": [
                    5508,
                    5510
                ],
                "mask_that": [
                    5509,
                    5510
                ],
                "pivot": [
                    5637
                ],
                "pivot_table": [
                    5784
                ],
                "aggfunc": [
                    5789
                ],
                "margins": [
                    5791
                ],
                "dropna": [
                    5792,
                    7691,
                    5963,
                    5965,
                    7863
                ],
                "margins_name": [
                    5793
                ],
                "observed": [
                    5794
                ],
                "stack_multiple": [
                    5963
                ],
                "stack": [
                    5965
                ],
                "is_scalar": [
                    6024
                ],
                "df": [
                    6947,
                    6029,
                    7085,
                    6031,
                    6032,
                    6033
                ],
                "self.reset_index": [
                    6029
                ],
                "explode": [
                    6032
                ],
                "df.drop": [
                    6033
                ],
                "self.index.take": [
                    6034
                ],
                "result.reindex": [
                    6035
                ],
                "unstack": [
                    6100
                ],
                "melt": [
                    6214
                ],
                "id_vars": [
                    6216
                ],
                "value_vars": [
                    6217
                ],
                "var_name": [
                    6218
                ],
                "value_name": [
                    6219
                ],
                "bm_axis": [
                    6312,
                    6311
                ],
                "self._data.diff": [
                    6312
                ],
                "ABCDataFrame": [
                    6322,
                    6323
                ],
                "subset.ndim": [
                    6337
                ],
                "_agg_summary_and_see_also_doc": [
                    6404,
                    6343
                ],
                "dedent": [
                    6367,
                    6343
                ],
                "_agg_examples_doc": [
                    6405,
                    6367
                ],
                "self._aggregate": [
                    6415
                ],
                "self.apply": [
                    7691,
                    6419,
                    6653
                ],
                "self.T._aggregate": [
                    6426
                ],
                "arg": [
                    6426,
                    6429
                ],
                "result.T": [
                    7553,
                    6427,
                    7959
                ],
                "_aggregate": [
                    6429
                ],
                "agg": [
                    6431
                ],
                "aggregate": [
                    6431
                ],
                "self.T.transform": [
                    6437
                ],
                "transform": [
                    6438
                ],
                "op": [
                    6578,
                    6587,
                    7570
                ],
                "frame_apply": [
                    6578,
                    7614
                ],
                "raw": [
                    6582
                ],
                "result_type": [
                    6583
                ],
                "kwds": [
                    6585,
                    7570
                ],
                "op.get_result": [
                    6587
                ],
                "x.empty": [
                    6649
                ],
                "lib.map_infer": [
                    6650,
                    6651
                ],
                "x.astype": [
                    6651
                ],
                "infer": [
                    6653
                ],
                "other.name": [
                    6760,
                    6754,
                    6924,
                    6926
                ],
                "ignore_index": [
                    6754,
                    6790
                ],
                "idx_diff": [
                    6761,
                    6763,
                    7403,
                    7405,
                    6765,
                    7406
                ],
                "other.index.difference": [
                    6761
                ],
                "combined_columns": [
                    6763,
                    6765,
                    6767,
                    6772,
                    6773
                ],
                "self.columns.append": [
                    6763
                ],
                "self.columns.astype": [
                    6765
                ],
                "rename_axis": [
                    6767
                ],
                "T.infer_objects": [
                    6767
                ],
                "to_frame": [
                    6767
                ],
                "index.names": [
                    6770
                ],
                "self.columns.equals": [
                    6772
                ],
                "to_concat": [
                    6785,
                    6787,
                    6789
                ],
                "concat": [
                    8098,
                    6788,
                    7111,
                    6952,
                    6957
                ],
                "sort": [
                    6914,
                    6792,
                    6953,
                    6958,
                    6998,
                    6937
                ],
                "self._join_compat": [
                    6913
                ],
                "on": [
                    6914,
                    6993,
                    6932,
                    6934,
                    6940
                ],
                "lsuffix": [
                    6936,
                    6914
                ],
                "rsuffix": [
                    6936,
                    6914
                ],
                "merge": [
                    6929,
                    6964,
                    6989
                ],
                "frames": [
                    6945,
                    6947,
                    6953,
                    6958,
                    6961,
                    6963
                ],
                "can_concat": [
                    6947,
                    6950
                ],
                "df.index.is_unique": [
                    6947
                ],
                "df.index": [
                    6947
                ],
                "res.reindex": [
                    6955
                ],
                "joined": [
                    6968,
                    6961,
                    6964,
                    6965
                ],
                "left_on": [
                    6994
                ],
                "right_on": [
                    6995
                ],
                "left_index": [
                    6996
                ],
                "right_index": [
                    6997
                ],
                "suffixes": [
                    6999
                ],
                "indicator": [
                    7001
                ],
                "validate": [
                    7002
                ],
                "df.items": [
                    7085
                ],
                "_series_round": [
                    7105,
                    7087
                ],
                "decimals": [
                    7105,
                    7087,
                    7093,
                    7098,
                    7099,
                    7100,
                    7102,
                    7103
                ],
                "is_integer_dtype": [
                    7092
                ],
                "is_float_dtype": [
                    7092
                ],
                "s.round": [
                    7093
                ],
                "nv.validate_round": [
                    7096
                ],
                "decimals.index.is_unique": [
                    7100
                ],
                "decimals.index": [
                    7100
                ],
                "new_cols": [
                    7105,
                    7109,
                    7102,
                    7111
                ],
                "_dict_round": [
                    7102
                ],
                "numeric_df": [
                    7168,
                    7300,
                    7301,
                    7303,
                    7165,
                    7166
                ],
                "self._get_numeric_data": [
                    7300,
                    7494,
                    7860,
                    7574,
                    7516,
                    7356,
                    7165,
                    7935
                ],
                "numeric_df.columns": [
                    7301,
                    7166
                ],
                "cols.copy": [
                    7302,
                    7167
                ],
                "mat": [
                    7168,
                    7171,
                    7173,
                    7303,
                    7177,
                    7305,
                    7306,
                    7307,
                    7181,
                    7182,
                    7183,
                    7310,
                    7313
                ],
                "numeric_df.values": [
                    7168,
                    7303
                ],
                "correl": [
                    7171,
                    7173,
                    7205,
                    7403,
                    7180,
                    7406,
                    7408,
                    7380,
                    7387,
                    7196,
                    7197
                ],
                "libalgos.nancorr": [
                    7313,
                    7171
                ],
                "libalgos": [
                    7313,
                    7171,
                    7173
                ],
                "ensure_float64": [
                    7177,
                    7313,
                    7171,
                    7173
                ],
                "min_periods": [
                    7171,
                    7173,
                    7175,
                    7176,
                    7306,
                    7313,
                    7188
                ],
                "libalgos.nancorr_spearman": [
                    7173
                ],
                "corrf": [
                    7193,
                    7178,
                    7195
                ],
                "nanops.get_corr_func": [
                    7178
                ],
                "nanops": [
                    7385,
                    7178,
                    7764,
                    7726
                ],
                "K": [
                    7179,
                    7180
                ],
                "np.isfinite": [
                    7181
                ],
                "ac": [
                    7193,
                    7195,
                    7182
                ],
                "bc": [
                    7193,
                    7195,
                    7183
                ],
                "valid": [
                    7192,
                    7193,
                    7187,
                    7188
                ],
                "valid.sum": [
                    7188
                ],
                "valid.all": [
                    7192
                ],
                "baseCov": [
                    7307,
                    7308,
                    7310,
                    7311,
                    7313,
                    7315
                ],
                "mat.shape": [
                    7307
                ],
                "baseCov.fill": [
                    7308
                ],
                "np.cov": [
                    7310
                ],
                "mat.T": [
                    7310
                ],
                "baseCov.reshape": [
                    7311
                ],
                "this.apply": [
                    7359
                ],
                "other.corr": [
                    7359
                ],
                "other._get_numeric_data": [
                    7361
                ],
                "this.align": [
                    7362
                ],
                "left.T": [
                    7365
                ],
                "right.T": [
                    7366
                ],
                "ldem": [
                    7377,
                    7374
                ],
                "left.mean": [
                    7374
                ],
                "rdem": [
                    7377,
                    7375
                ],
                "right.mean": [
                    7375
                ],
                "dom": [
                    7378,
                    7380
                ],
                "left.count": [
                    7378
                ],
                "left.std": [
                    7378
                ],
                "right.std": [
                    7378
                ],
                "nanops.nancorr": [
                    7385
                ],
                "left.values.T": [
                    7388
                ],
                "right.values.T": [
                    7388
                ],
                "left.columns": [
                    7388
                ],
                "raxis": [
                    7401,
                    7402
                ],
                "union": [
                    7402
                ],
                "this._get_axis": [
                    7402
                ],
                "other._get_axis": [
                    7402
                ],
                "result_index.difference": [
                    7403
                ],
                "correl.index": [
                    7403
                ],
                "correl.append": [
                    7406
                ],
                "self._count_level": [
                    7491
                ],
                "numeric_only": [
                    7491,
                    7493,
                    7589,
                    7628,
                    7860,
                    7515,
                    7935
                ],
                "frame._get_axis": [
                    7520,
                    7499
                ],
                "frame._get_agg_axis": [
                    7521,
                    7500,
                    7510
                ],
                "frame._is_mixed_type": [
                    7528,
                    7502
                ],
                "frame._data.any_extension_types": [
                    7502
                ],
                "frame._data": [
                    7502
                ],
                "series_counts": [
                    7508,
                    7509
                ],
                "series_counts.values": [
                    7509
                ],
                "result.astype": [
                    7512,
                    7642,
                    7640
                ],
                "count_axis": [
                    7520,
                    7523,
                    7542,
                    7544,
                    7545,
                    7546
                ],
                "self._get_axis_name": [
                    7525
                ],
                "frame.values": [
                    7534
                ],
                "mask.T": [
                    7539
                ],
                "count_axis._get_level_number": [
                    7542
                ],
                "level_name": [
                    7544,
                    7545
                ],
                "count_axis._names": [
                    7544
                ],
                "level_index": [
                    7545,
                    7547,
                    7549
                ],
                "_shallow_copy": [
                    7545
                ],
                "count_axis.levels": [
                    7545
                ],
                "level_codes": [
                    7546,
                    7547
                ],
                "ensure_int64": [
                    7546
                ],
                "count_axis.codes": [
                    7546
                ],
                "lib.count_level_2d": [
                    7547
                ],
                "filter_type": [
                    7639,
                    7560,
                    7594,
                    7603,
                    7573,
                    7575,
                    7641,
                    7583
                ],
                "constructor": [
                    7649,
                    7562,
                    7567
                ],
                "self._get_agg_axis": [
                    7729,
                    7566,
                    7767
                ],
                "skipna": [
                    7570,
                    7764,
                    7726
                ],
                "axis_matters": [
                    7576
                ],
                "self._get_bool_data": [
                    7578,
                    7580
                ],
                "np.bool_": [
                    7642,
                    7598
                ],
                "opa": [
                    7617,
                    7614
                ],
                "opa.get_result": [
                    7617
                ],
                "self.ndim": [
                    7618
                ],
                "result.iloc": [
                    7619
                ],
                "_get_data": [
                    7629,
                    7623
                ],
                "data._get_agg_axis": [
                    7632,
                    7626
                ],
                "result.dtype": [
                    7637
                ],
                "np.float64": [
                    7640,
                    7947
                ],
                "coerce_to_dtypes": [
                    7647
                ],
                "Series.nunique": [
                    7691
                ],
                "nanops.nanargmin": [
                    7726
                ],
                "nanops.nanargmax": [
                    7764
                ],
                "axis_num": [
                    7778,
                    7773,
                    7775
                ],
                "s.mode": [
                    7863
                ],
                "data.apply": [
                    7865
                ],
                "validate_percentile": [
                    7933
                ],
                "q": [
                    7945,
                    7946,
                    7947,
                    7950,
                    7956,
                    7933
                ],
                "is_transposed": [
                    7937,
                    7939,
                    7950,
                    7958
                ],
                "data.T": [
                    7940
                ],
                "data.columns": [
                    7942
                ],
                "self.columns.name": [
                    7944
                ],
                "data._data.quantile": [
                    7949
                ],
                "interpolation": [
                    7950
                ],
                "new_data.copy": [
                    7985,
                    8019
                ],
                "new_data.set_axis": [
                    8025,
                    7989,
                    8023,
                    7991
                ],
                "self.index.to_timestamp": [
                    7989
                ],
                "self.columns.to_timestamp": [
                    7991
                ],
                "self.index.to_period": [
                    8023
                ],
                "self.columns.to_period": [
                    8025
                ],
                "collections.defaultdict": [
                    8097
                ],
                "isin": [
                    8100
                ],
                "values.index.is_unique": [
                    8106,
                    8110
                ],
                "values.index": [
                    8106,
                    8110
                ],
                "self.eq": [
                    8112,
                    8108
                ],
                "values.reindex_like": [
                    8112,
                    8108
                ],
                "values.columns.is_unique": [
                    8110
                ],
                "values.columns": [
                    8110
                ],
                "reshape": [
                    8121
                ],
                "algorithms.isin": [
                    8121
                ],
                "self.values.ravel": [
                    8121
                ],
                "plot": [
                    8128
                ],
                "CachedAccessor": [
                    8128,
                    8131
                ],
                "pandas.plotting.PlotAccessor": [
                    8128
                ],
                "pandas.plotting": [
                    8128,
                    8129,
                    8130
                ],
                "pandas": [
                    8128,
                    8129,
                    8130
                ],
                "hist": [
                    8129
                ],
                "pandas.plotting.hist_frame": [
                    8129
                ],
                "boxplot": [
                    8130
                ],
                "pandas.plotting.boxplot_frame": [
                    8130
                ],
                "sparse": [
                    8131
                ],
                "SparseFrameAccessor": [
                    8131
                ],
                "DataFrame._setup_axes": [
                    8134
                ],
                "DataFrame._add_numeric_operations": [
                    8141
                ],
                "DataFrame._add_series_or_dataframe_operations": [
                    8142
                ],
                "ops.add_flex_arithmetic_methods": [
                    8144
                ],
                "ops.add_special_arithmetic_methods": [
                    8145
                ],
                "s.items": [
                    8152
                ],
                "new_data.get": [
                    8153
                ],
                "ljust": [
                    8159
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/core/generic.py": {
            "buggy_functions": [
                {
                    "function_name": "transpose",
                    "function_code": "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Permute the dimensions of the %(klass)s\n\n    Parameters\n    ----------\n    args : %(args_transpose)s\n    copy : bool, default False\n        Make a copy of the underlying data. Mixed-dtype data will\n        always result in a copy\n    **kwargs\n        Additional keyword arguments will be passed to the function.\n\n    Returns\n    -------\n    y : same as input\n\n    Examples\n    --------\n    >>> p.transpose(2, 0, 1)\n    >>> p.transpose(2, 0, 1, copy=True)\n    \"\"\"\n\n    # construct the args\n    axes, kwargs = self._construct_axes_from_arguments(\n        args, kwargs, require_all=True\n    )\n    axes_names = tuple(self._get_axis_name(axes[a]) for a in self._AXIS_ORDERS)\n    axes_numbers = tuple(self._get_axis_number(axes[a]) for a in self._AXIS_ORDERS)\n\n    # we must have unique axes\n    if len(axes) != len(set(axes)):\n        raise ValueError(f\"Must specify {self._AXIS_LEN} unique axes\")\n\n    new_axes = self._construct_axes_dict_from(\n        self, [self._get_axis(x) for x in axes_names]\n    )\n    new_values = self.values.transpose(axes_numbers)\n    if kwargs.pop(\"copy\", None) or (len(args) and args[-1]):\n        new_values = new_values.copy()\n\n    nv.validate_transpose(tuple(), kwargs)\n    return self._constructor(new_values, **new_axes).__finalize__(self)\n",
                    "decorators": [],
                    "docstring": "Permute the dimensions of the %(klass)s\n\nParameters\n----------\nargs : %(args_transpose)s\ncopy : bool, default False\n    Make a copy of the underlying data. Mixed-dtype data will\n    always result in a copy\n**kwargs\n    Additional keyword arguments will be passed to the function.\n\nReturns\n-------\ny : same as input\n\nExamples\n--------\n>>> p.transpose(2, 0, 1)\n>>> p.transpose(2, 0, 1, copy=True)",
                    "start_line": 646,
                    "variables": {
                        "axes": [
                            673,
                            674,
                            677,
                            670
                        ],
                        "kwargs": [
                            687,
                            684,
                            670,
                            671
                        ],
                        "self._construct_axes_from_arguments": [
                            670
                        ],
                        "self": [
                            673,
                            674,
                            678,
                            680,
                            681,
                            683,
                            688,
                            670
                        ],
                        "args": [
                            684,
                            671
                        ],
                        "axes_names": [
                            673,
                            681
                        ],
                        "tuple": [
                            673,
                            674,
                            687
                        ],
                        "self._get_axis_name": [
                            673
                        ],
                        "a": [
                            673,
                            674
                        ],
                        "self._AXIS_ORDERS": [
                            673,
                            674
                        ],
                        "axes_numbers": [
                            674,
                            683
                        ],
                        "self._get_axis_number": [
                            674
                        ],
                        "len": [
                            684,
                            677
                        ],
                        "set": [
                            677
                        ],
                        "ValueError": [
                            678
                        ],
                        "self._AXIS_LEN": [
                            678
                        ],
                        "new_axes": [
                            680,
                            688
                        ],
                        "self._construct_axes_dict_from": [
                            680
                        ],
                        "self._get_axis": [
                            681
                        ],
                        "x": [
                            681
                        ],
                        "new_values": [
                            688,
                            683,
                            685
                        ],
                        "self.values.transpose": [
                            683
                        ],
                        "self.values": [
                            683
                        ],
                        "kwargs.pop": [
                            684
                        ],
                        "new_values.copy": [
                            685
                        ],
                        "nv.validate_transpose": [
                            687
                        ],
                        "nv": [
                            687
                        ],
                        "__finalize__": [
                            688
                        ],
                        "self._constructor": [
                            688
                        ]
                    },
                    "filtered_variables": {
                        "axes": [
                            673,
                            674,
                            677,
                            670
                        ],
                        "kwargs": [
                            687,
                            684,
                            670,
                            671
                        ],
                        "self._construct_axes_from_arguments": [
                            670
                        ],
                        "self": [
                            673,
                            674,
                            678,
                            680,
                            681,
                            683,
                            688,
                            670
                        ],
                        "args": [
                            684,
                            671
                        ],
                        "axes_names": [
                            673,
                            681
                        ],
                        "self._get_axis_name": [
                            673
                        ],
                        "a": [
                            673,
                            674
                        ],
                        "self._AXIS_ORDERS": [
                            673,
                            674
                        ],
                        "axes_numbers": [
                            674,
                            683
                        ],
                        "self._get_axis_number": [
                            674
                        ],
                        "self._AXIS_LEN": [
                            678
                        ],
                        "new_axes": [
                            680,
                            688
                        ],
                        "self._construct_axes_dict_from": [
                            680
                        ],
                        "self._get_axis": [
                            681
                        ],
                        "x": [
                            681
                        ],
                        "new_values": [
                            688,
                            683,
                            685
                        ],
                        "self.values.transpose": [
                            683
                        ],
                        "self.values": [
                            683
                        ],
                        "kwargs.pop": [
                            684
                        ],
                        "new_values.copy": [
                            685
                        ],
                        "nv.validate_transpose": [
                            687
                        ],
                        "nv": [
                            687
                        ],
                        "__finalize__": [
                            688
                        ],
                        "self._constructor": [
                            688
                        ]
                    },
                    "diff_line_number": 646,
                    "class_data": {
                        "signature": "class NDFrame(PandasObject, SelectionMixin)",
                        "docstring": "N-dimensional analogue of DataFrame. Store multi-dimensional in a\nsize-mutable, labeled data structure\n\nParameters\n----------\ndata : BlockManager\naxes : list\ncopy : bool, default False",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False):\n    if not fastpath:\n        if dtype is not None:\n            data = data.astype(dtype)\n        elif copy:\n            data = data.copy()\n        if axes is not None:\n            for i, ax in enumerate(axes):\n                data = data.reindex_axis(ax, axis=i)\n    object.__setattr__(self, '_is_copy', None)\n    object.__setattr__(self, '_data', data)\n    object.__setattr__(self, '_item_cache', {})\n    if attrs is None:\n        attrs = {}\n    else:\n        attrs = dict(attrs)\n    object.__setattr__(self, '_attrs', attrs)",
                            "def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n    \"\"\" passed a manager and a axes dict \"\"\"\n    for a, axe in axes.items():\n        if axe is not None:\n            mgr = mgr.reindex_axis(axe, axis=self._get_block_manager_axis(a), copy=False)\n    if copy:\n        mgr = mgr.copy()\n    if dtype is not None:\n        if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n            mgr = mgr.astype(dtype=dtype)\n    return mgr",
                            "@property\ndef attrs(self) -> Dict[Optional[Hashable], Any]:\n    \"\"\"\n    Dictionary of global attributes on this object.\n    \"\"\"\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
                            "@attrs.setter\ndef attrs(self, value: Mapping[Optional[Hashable], Any]) -> None:\n    self._attrs = dict(value)",
                            "def _validate_dtype(self, dtype):\n    \"\"\" validate the passed dtype \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if dtype.kind == 'V':\n            raise NotImplementedError(f'compound dtypes are not implemented in the {type(self).__name__} constructor')\n    return dtype",
                            "@property\ndef _constructor(self):\n    \"\"\"Used when a manipulation result has the same dimensions as the\n    original.\n    \"\"\"\n    raise AbstractMethodError(self)",
                            "@property\ndef _constructor_sliced(self):\n    \"\"\"Used when a manipulation result has one lower dimension(s) as the\n    original, such as DataFrame single columns slicing.\n    \"\"\"\n    raise AbstractMethodError(self)",
                            "@property\ndef _constructor_expanddim(self):\n    \"\"\"Used when a manipulation result has one higher dimension as the\n    original, such as Series.to_frame()\n    \"\"\"\n    raise NotImplementedError",
                            "@classmethod\ndef _setup_axes(cls, axes: List[str], docs: Dict[str, str]):\n    \"\"\"\n    Provide axes setup for the major PandasObjects.\n\n    Parameters\n    ----------\n    axes : the names of the axes in order (lowest to highest)\n    docs : docstrings for the axis properties\n    \"\"\"\n    info_axis = len(axes) - 1\n    axes_are_reversed = len(axes) > 1\n    cls._AXIS_ORDERS = axes\n    cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n    cls._AXIS_LEN = len(axes)\n    cls._AXIS_NAMES = dict(enumerate(axes))\n    cls._AXIS_REVERSED = axes_are_reversed\n    cls._info_axis_number = info_axis\n    cls._info_axis_name = axes[info_axis]\n\n    def set_axis(a, i):\n        setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n        cls._internal_names_set.add(a)\n    if axes_are_reversed:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, 1 - i)\n    else:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, i)",
                            "def _construct_axes_dict(self, axes=None, **kwargs):\n    \"\"\"Return an axes dictionary for myself.\"\"\"\n    d = {a: self._get_axis(a) for a in axes or self._AXIS_ORDERS}\n    d.update(kwargs)\n    return d",
                            "@staticmethod\ndef _construct_axes_dict_from(self, axes, **kwargs):\n    \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n    d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n    d.update(kwargs)\n    return d",
                            "def _construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None):\n    \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n    If require_all, raise if all axis arguments are not supplied\n    return a tuple of (axes, kwargs).\n\n    sentinel specifies the default parameter when an axis is not\n    supplied; useful to distinguish when a user explicitly passes None\n    in scenarios where None has special meaning.\n    \"\"\"\n    args = list(args)\n    for a in self._AXIS_ORDERS:\n        if a not in kwargs:\n            try:\n                kwargs[a] = args.pop(0)\n            except IndexError:\n                if require_all:\n                    raise TypeError('not enough/duplicate arguments specified!')\n    axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n    return (axes, kwargs)",
                            "@classmethod\ndef _from_axes(cls, data, axes, **kwargs):\n    if isinstance(data, BlockManager):\n        return cls(data, **kwargs)\n    else:\n        if cls._AXIS_REVERSED:\n            axes = axes[::-1]\n        d = cls._construct_axes_dict_from(cls, axes, copy=False)\n        d.update(kwargs)\n        return cls(data, **d)",
                            "@classmethod\ndef _get_axis_number(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if is_integer(axis):\n        if axis in cls._AXIS_NAMES:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NUMBERS[axis]\n        except KeyError:\n            pass\n    raise ValueError(f'No axis named {axis} for object type {cls}')",
                            "@classmethod\ndef _get_axis_name(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if isinstance(axis, str):\n        if axis in cls._AXIS_NUMBERS:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NAMES[axis]\n        except KeyError:\n            pass\n    raise ValueError(f'No axis named {axis} for object type {cls}')",
                            "def _get_axis(self, axis):\n    name = self._get_axis_name(axis)\n    return getattr(self, name)",
                            "@classmethod\ndef _get_block_manager_axis(cls, axis):\n    \"\"\"Map the axis to the block_manager axis.\"\"\"\n    axis = cls._get_axis_number(axis)\n    if cls._AXIS_REVERSED:\n        m = cls._AXIS_LEN - 1\n        return m - axis\n    return axis",
                            "def _get_axis_resolvers(self, axis):\n    axis_index = getattr(self, axis)\n    d = dict()\n    prefix = axis[0]\n    for i, name in enumerate(axis_index.names):\n        if name is not None:\n            key = level = name\n        else:\n            key = f'{prefix}level_{i}'\n            level = i\n        level_values = axis_index.get_level_values(level)\n        s = level_values.to_series()\n        s.index = axis_index\n        d[key] = s\n    if isinstance(axis_index, MultiIndex):\n        dindex = axis_index\n    else:\n        dindex = axis_index.to_series()\n    d[axis] = dindex\n    return d",
                            "def _get_index_resolvers(self):\n    d = {}\n    for axis_name in self._AXIS_ORDERS:\n        d.update(self._get_axis_resolvers(axis_name))\n    return d",
                            "def _get_space_character_free_column_resolvers(self):\n    \"\"\"Return the space character free column resolvers of a dataframe.\n\n    Column names with spaces are 'cleaned up' so that they can be referred\n    to by backtick quoting.\n    Used in :meth:`DataFrame.eval`.\n    \"\"\"\n    from pandas.core.computation.common import _remove_spaces_column_name\n    return {_remove_spaces_column_name(k): v for k, v in self.items()}",
                            "@property\ndef _info_axis(self):\n    return getattr(self, self._info_axis_name)",
                            "@property\ndef _stat_axis(self):\n    return getattr(self, self._stat_axis_name)",
                            "@property\ndef shape(self) -> Tuple[int, ...]:\n    \"\"\"\n    Return a tuple of axis dimensions\n    \"\"\"\n    return tuple((len(self._get_axis(a)) for a in self._AXIS_ORDERS))",
                            "@property\ndef axes(self):\n    \"\"\"\n    Return index label(s) of the internal NDFrame\n    \"\"\"\n    return [self._get_axis(a) for a in self._AXIS_ORDERS]",
                            "@property\ndef ndim(self) -> int:\n    \"\"\"\n    Return an int representing the number of axes / array dimensions.\n\n    Return 1 if Series. Otherwise return 2 if DataFrame.\n\n    See Also\n    --------\n    ndarray.ndim : Number of array dimensions.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.ndim\n    1\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.ndim\n    2\n    \"\"\"\n    return self._data.ndim",
                            "@property\ndef size(self):\n    \"\"\"\n    Return an int representing the number of elements in this object.\n\n    Return the number of rows if Series. Otherwise return the number of\n    rows times number of columns if DataFrame.\n\n    See Also\n    --------\n    ndarray.size : Number of elements in the array.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.size\n    3\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.size\n    4\n    \"\"\"\n    return np.prod(self.shape)",
                            "@property\ndef _selected_obj(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                            "@property\ndef _obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                            "def set_axis(self, labels, axis=0, inplace=False):\n    \"\"\"\n    Assign desired index to given axis.\n\n    Indexes for column or row labels can be changed by assigning\n    a list-like or Index.\n\n    .. versionchanged:: 0.21.0\n\n       The signature is now `labels` and `axis`, consistent with\n       the rest of pandas API. Previously, the `axis` and `labels`\n       arguments were respectively the first and second positional\n       arguments.\n\n    Parameters\n    ----------\n    labels : list-like, Index\n        The values for the new index.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to update. The value 0 identifies the rows, and 1\n        identifies the columns.\n\n    inplace : bool, default False\n        Whether to return a new %(klass)s instance.\n\n    Returns\n    -------\n    renamed : %(klass)s or None\n        An object of same type as caller if inplace=False, None otherwise.\n\n    See Also\n    --------\n    DataFrame.rename_axis : Alter the name of the index or columns.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n\n    >>> s.set_axis(['a', 'b', 'c'], axis=0)\n    a    1\n    b    2\n    c    3\n    dtype: int64\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n    Change the row labels.\n\n    >>> df.set_axis(['a', 'b', 'c'], axis='index')\n       A  B\n    a  1  4\n    b  2  5\n    c  3  6\n\n    Change the column labels.\n\n    >>> df.set_axis(['I', 'II'], axis='columns')\n       I  II\n    0  1   4\n    1  2   5\n    2  3   6\n\n    Now, update the labels inplace.\n\n    >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n    >>> df\n       i  ii\n    0  1   4\n    1  2   5\n    2  3   6\n    \"\"\"\n    if inplace:\n        setattr(self, self._get_axis_name(axis), labels)\n    else:\n        obj = self.copy()\n        obj.set_axis(labels, axis=axis, inplace=True)\n        return obj",
                            "def _set_axis(self, axis, labels):\n    self._data.set_axis(axis, labels)\n    self._clear_item_cache()",
                            "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Permute the dimensions of the %(klass)s\n\n    Parameters\n    ----------\n    args : %(args_transpose)s\n    copy : bool, default False\n        Make a copy of the underlying data. Mixed-dtype data will\n        always result in a copy\n    **kwargs\n        Additional keyword arguments will be passed to the function.\n\n    Returns\n    -------\n    y : same as input\n\n    Examples\n    --------\n    >>> p.transpose(2, 0, 1)\n    >>> p.transpose(2, 0, 1, copy=True)\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs, require_all=True)\n    axes_names = tuple((self._get_axis_name(axes[a]) for a in self._AXIS_ORDERS))\n    axes_numbers = tuple((self._get_axis_number(axes[a]) for a in self._AXIS_ORDERS))\n    if len(axes) != len(set(axes)):\n        raise ValueError(f'Must specify {self._AXIS_LEN} unique axes')\n    new_axes = self._construct_axes_dict_from(self, [self._get_axis(x) for x in axes_names])\n    new_values = self.values.transpose(axes_numbers)\n    if kwargs.pop('copy', None) or (len(args) and args[-1]):\n        new_values = new_values.copy()\n    nv.validate_transpose(tuple(), kwargs)\n    return self._constructor(new_values, **new_axes).__finalize__(self)",
                            "def swapaxes(self, axis1, axis2, copy=True):\n    \"\"\"\n    Interchange axes and swap values axes appropriately.\n\n    Returns\n    -------\n    y : same as input\n    \"\"\"\n    i = self._get_axis_number(axis1)\n    j = self._get_axis_number(axis2)\n    if i == j:\n        if copy:\n            return self.copy()\n        return self\n    mapping = {i: j, j: i}\n    new_axes = (self._get_axis(mapping.get(k, k)) for k in range(self._AXIS_LEN))\n    new_values = self.values.swapaxes(i, j)\n    if copy:\n        new_values = new_values.copy()\n    return self._constructor(new_values, *new_axes).__finalize__(self)",
                            "def droplevel(self, level, axis=0):\n    \"\"\"\n    Return DataFrame with requested index / column level(s) removed.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    level : int, str, or list-like\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or positional indexes\n        of levels.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with requested index / column level(s) removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     [1, 2, 3, 4],\n    ...     [5, 6, 7, 8],\n    ...     [9, 10, 11, 12]\n    ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n    >>> df.columns = pd.MultiIndex.from_tuples([\n    ...    ('c', 'e'), ('d', 'f')\n    ... ], names=['level_1', 'level_2'])\n\n    >>> df\n    level_1   c   d\n    level_2   e   f\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n\n    >>> df.droplevel('a')\n    level_1   c   d\n    level_2   e   f\n    b\n    2        3   4\n    6        7   8\n    10      11  12\n\n    >>> df.droplevel('level2', axis=1)\n    level_1   c   d\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n    \"\"\"\n    labels = self._get_axis(axis)\n    new_labels = labels.droplevel(level)\n    result = self.set_axis(new_labels, axis=axis, inplace=False)\n    return result",
                            "def pop(self, item):\n    \"\"\"\n    Return item and drop from frame. Raise KeyError if not found.\n\n    Parameters\n    ----------\n    item : str\n        Label of column to be popped.\n\n    Returns\n    -------\n    Series\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=('name', 'class', 'max_speed'))\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    >>> df.pop('class')\n    0      bird\n    1      bird\n    2    mammal\n    3    mammal\n    Name: class, dtype: object\n\n    >>> df\n         name  max_speed\n    0  falcon      389.0\n    1  parrot       24.0\n    2    lion       80.5\n    3  monkey        NaN\n    \"\"\"\n    result = self[item]\n    del self[item]\n    try:\n        result._reset_cacher()\n    except AttributeError:\n        pass\n    return result",
                            "def squeeze(self, axis=None):\n    \"\"\"\n    Squeeze 1 dimensional axis objects into scalars.\n\n    Series or DataFrames with a single element are squeezed to a scalar.\n    DataFrames with a single column or a single row are squeezed to a\n    Series. Otherwise the object is unchanged.\n\n    This method is most useful when you don't know if your\n    object is a Series or DataFrame, but you do know it has just a single\n    column. In that case you can safely call `squeeze` to ensure you have a\n    Series.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns', None}, default None\n        A specific axis to squeeze. By default, all length-1 axes are\n        squeezed.\n\n    Returns\n    -------\n    DataFrame, Series, or scalar\n        The projection after squeezing `axis` or all the axes.\n\n    See Also\n    --------\n    Series.iloc : Integer-location based indexing for selecting scalars.\n    DataFrame.iloc : Integer-location based indexing for selecting Series.\n    Series.to_frame : Inverse of DataFrame.squeeze for a\n        single-column DataFrame.\n\n    Examples\n    --------\n    >>> primes = pd.Series([2, 3, 5, 7])\n\n    Slicing might produce a Series with a single value:\n\n    >>> even_primes = primes[primes % 2 == 0]\n    >>> even_primes\n    0    2\n    dtype: int64\n\n    >>> even_primes.squeeze()\n    2\n\n    Squeezing objects with more than one value in every axis does nothing:\n\n    >>> odd_primes = primes[primes % 2 == 1]\n    >>> odd_primes\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    >>> odd_primes.squeeze()\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    Squeezing is even more effective when used with DataFrames.\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n    >>> df\n       a  b\n    0  1  2\n    1  3  4\n\n    Slicing a single column will produce a DataFrame with the columns\n    having only one value:\n\n    >>> df_a = df[['a']]\n    >>> df_a\n       a\n    0  1\n    1  3\n\n    So the columns can be squeezed down, resulting in a Series:\n\n    >>> df_a.squeeze('columns')\n    0    1\n    1    3\n    Name: a, dtype: int64\n\n    Slicing a single row from a single column will produce a single\n    scalar DataFrame:\n\n    >>> df_0a = df.loc[df.index < 1, ['a']]\n    >>> df_0a\n       a\n    0  1\n\n    Squeezing the rows produces a single scalar Series:\n\n    >>> df_0a.squeeze('rows')\n    a    1\n    Name: 0, dtype: int64\n\n    Squeezing all axes will project directly into a scalar:\n\n    >>> df_0a.squeeze()\n    1\n    \"\"\"\n    axis = self._AXIS_NAMES if axis is None else (self._get_axis_number(axis),)\n    return self.iloc[tuple((0 if i in axis and len(a) == 1 else slice(None) for i, a in enumerate(self.axes)))]",
                            "def swaplevel(self, i=-2, j=-1, axis=0):\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis\n\n    Parameters\n    ----------\n    i, j : int, str (can be mixed)\n        Level of index to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    swapped : same type as caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    result = self.copy()\n    labels = result._data.axes[axis]\n    result._data.set_axis(axis, labels.swaplevel(i, j))\n    return result",
                            "def rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes input function or functions. Function / dict values must be\n    unique (1-to-1). Labels not contained in a dict / Series will be left\n    as-is. Extra labels listed don't throw an error. Alternatively, change\n    ``Series.name`` with a scalar value (Series only).\n\n    Parameters\n    ----------\n    %(axes)s : scalar, list-like, dict-like or function, optional\n        Scalar or list-like will alter the ``Series.name`` attribute,\n        and raise on DataFrame.\n        dict-like or functions are transformations to apply to\n        that axis' values\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new %(klass)s. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    renamed : %(klass)s (new object)\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    NDFrame.rename_axis\n\n    Examples\n    --------\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n    >>> s.rename(\"my_name\") # scalar, changes Series.name\n    0    1\n    1    2\n    2    3\n    Name: my_name, dtype: int64\n    >>> s.rename(lambda x: x ** 2)  # function, changes labels\n    0    1\n    1    2\n    4    3\n    dtype: int64\n    >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n    0    1\n    3    2\n    5    3\n    dtype: int64\n\n    Since ``DataFrame`` doesn't have a ``.name`` attribute,\n    only mapping-type arguments are allowed.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(2)\n    Traceback (most recent call last):\n    ...\n    TypeError: 'int' object is not callable\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n       a  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n\n    See the :ref:`user guide <basics.rename>` for more.\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    copy = kwargs.pop('copy', True)\n    inplace = kwargs.pop('inplace', False)\n    level = kwargs.pop('level', None)\n    axis = kwargs.pop('axis', None)\n    errors = kwargs.pop('errors', 'ignore')\n    if axis is not None:\n        self._get_axis_number(axis)\n    if kwargs:\n        raise TypeError(f'rename() got an unexpected keyword argument \"{list(kwargs.keys())[0]}\"')\n    if com.count_not_none(*axes.values()) == 0:\n        raise TypeError('must pass an index to rename')\n    self._consolidate_inplace()\n    result = self if inplace else self.copy(deep=copy)\n    for axis in range(self._AXIS_LEN):\n        v = axes.get(self._AXIS_NAMES[axis])\n        if v is None:\n            continue\n        f = com.get_rename_function(v)\n        baxis = self._get_block_manager_axis(axis)\n        if level is not None:\n            level = self.axes[axis]._get_level_number(level)\n        if not callable(v):\n            indexer = self.axes[axis].get_indexer_for(v)\n            if errors == 'raise' and len(indexer[indexer == -1]):\n                missing_labels = [label for index, label in enumerate(v) if indexer[index] == -1]\n                raise KeyError(f'{missing_labels} not found in axis')\n        result._data = result._data.rename_axis(f, axis=baxis, copy=copy, level=level)\n        result._clear_item_cache()\n    if inplace:\n        self._update_inplace(result._data)\n    else:\n        return result.__finalize__(self)",
                            "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False)])\ndef rename_axis(self, mapper=sentinel, **kwargs):\n    \"\"\"\n    Set the name of the axis for the index or columns.\n\n    Parameters\n    ----------\n    mapper : scalar, list-like, optional\n        Value to set the axis name attribute.\n    index, columns : scalar, list-like, dict-like or function, optional\n        A scalar, list-like, dict-like or functions transformations to\n        apply to that axis' values.\n\n        Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index``\n        and/or ``columns``.\n\n        .. versionchanged:: 0.24.0\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to rename.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Series\n        or DataFrame.\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or None if `inplace` is True.\n\n    See Also\n    --------\n    Series.rename : Alter Series index labels or name.\n    DataFrame.rename : Alter DataFrame index labels or name.\n    Index.rename : Set new names on index.\n\n    Notes\n    -----\n    ``DataFrame.rename_axis`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    The first calling convention will only modify the names of\n    the index and/or the names of the Index object that is the columns.\n    In this case, the parameter ``copy`` is ignored.\n\n    The second calling convention will modify the names of the\n    the corresponding index if mapper is a list or a scalar.\n    However, if mapper is dict-like or a function, it will use the\n    deprecated behavior of modifying the axis *labels*.\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n    >>> s\n    0       dog\n    1       cat\n    2    monkey\n    dtype: object\n    >>> s.rename_axis(\"animal\")\n    animal\n    0    dog\n    1    cat\n    2    monkey\n    dtype: object\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n    ...                    \"num_arms\": [0, 0, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs  num_arms\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"animal\")\n    >>> df\n            num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n    >>> df\n    limbs   num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n\n    **MultiIndex**\n\n    >>> df.index = pd.MultiIndex.from_product([['mammal'],\n    ...                                        ['dog', 'cat', 'monkey']],\n    ...                                       names=['type', 'name'])\n    >>> df\n    limbs          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(index={'type': 'class'})\n    limbs          num_legs  num_arms\n    class  name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(columns=str.upper)\n    LIMBS          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments((), kwargs, sentinel=sentinel)\n    copy = kwargs.pop('copy', True)\n    inplace = kwargs.pop('inplace', False)\n    axis = kwargs.pop('axis', 0)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if kwargs:\n        raise TypeError(f'rename_axis() got an unexpected keyword argument \"{list(kwargs.keys())[0]}\"')\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if mapper is not sentinel:\n        non_mapper = is_scalar(mapper) or (is_list_like(mapper) and (not is_dict_like(mapper)))\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            raise ValueError('Use `.rename` to alter labels with a mapper.')\n    else:\n        result = self if inplace else self.copy(deep=copy)\n        for axis in range(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is sentinel:\n                continue\n            non_mapper = is_scalar(v) or (is_list_like(v) and (not is_dict_like(v)))\n            if non_mapper:\n                newnames = v\n            else:\n                f = com.get_rename_function(v)\n                curnames = self._get_axis(axis).names\n                newnames = [f(name) for name in curnames]\n            result._set_axis_name(newnames, axis=axis, inplace=True)\n        if not inplace:\n            return result",
                            "def _set_axis_name(self, name, axis=0, inplace=False):\n    \"\"\"\n    Set the name(s) of the axis.\n\n    Parameters\n    ----------\n    name : str or list of str\n        Name(s) to set.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to set the label. The value 0 or 'index' specifies index,\n        and the value 1 or 'columns' specifies columns.\n    inplace : bool, default False\n        If `True`, do operation inplace and return None.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or `None` if `inplace` is `True`.\n\n    See Also\n    --------\n    DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n    Series.rename : Alter the index labels or set the index name\n        of :class:`Series`.\n    Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs\n    dog            4\n    cat            4\n    monkey         2\n    >>> df._set_axis_name(\"animal\")\n            num_legs\n    animal\n    dog            4\n    cat            4\n    monkey         2\n    >>> df.index = pd.MultiIndex.from_product(\n    ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n    >>> df._set_axis_name([\"type\", \"name\"])\n                   legs\n    type   name\n    mammal dog        4\n           cat        4\n           monkey     2\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    idx = self._get_axis(axis).set_names(name)\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    renamed = self if inplace else self.copy()\n    renamed.set_axis(idx, axis=axis, inplace=True)\n    if not inplace:\n        return renamed",
                            "def _indexed_same(self, other) -> bool:\n    return all((self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS))",
                            "def equals(self, other):\n    \"\"\"\n    Test whether two objects contain the same elements.\n\n    This function allows two Series or DataFrames to be compared against\n    each other to see if they have the same shape and elements. NaNs in\n    the same location are considered equal. The column headers do not\n    need to have the same type, but the elements within the columns must\n    be the same dtype.\n\n    Parameters\n    ----------\n    other : Series or DataFrame\n        The other Series or DataFrame to be compared with the first.\n\n    Returns\n    -------\n    bool\n        True if all elements are the same in both objects, False\n        otherwise.\n\n    See Also\n    --------\n    Series.eq : Compare two Series objects of the same length\n        and return a Series where each element is True if the element\n        in each Series is equal, False otherwise.\n    DataFrame.eq : Compare two DataFrame objects of the same shape and\n        return a DataFrame where each element is True if the respective\n        element in each DataFrame is equal, False otherwise.\n    testing.assert_series_equal : Raises an AssertionError if left and\n        right are not equal. Provides an easy interface to ignore\n        inequality in dtypes, indexes and precision among others.\n    testing.assert_frame_equal : Like assert_series_equal, but targets\n        DataFrames.\n    numpy.array_equal : Return True if two arrays have the same shape\n        and elements, False otherwise.\n\n    Notes\n    -----\n    This function requires that the elements have the same dtype as their\n    respective elements in the other Series or DataFrame. However, the\n    column labels do not need to have the same type, as long as they are\n    still considered equal.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({1: [10], 2: [20]})\n    >>> df\n        1   2\n    0  10  20\n\n    DataFrames df and exactly_equal have the same types and values for\n    their elements and column labels, which will return True.\n\n    >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n    >>> exactly_equal\n        1   2\n    0  10  20\n    >>> df.equals(exactly_equal)\n    True\n\n    DataFrames df and different_column_type have the same element\n    types and values, but have different types for the column labels,\n    which will still return True.\n\n    >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n    >>> different_column_type\n       1.0  2.0\n    0   10   20\n    >>> df.equals(different_column_type)\n    True\n\n    DataFrames df and different_data_type have different types for the\n    same values for their elements, and will return False even though\n    their column labels are the same values and types.\n\n    >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n    >>> different_data_type\n          1     2\n    0  10.0  20.0\n    >>> df.equals(different_data_type)\n    False\n    \"\"\"\n    if not isinstance(other, self._constructor):\n        return False\n    return self._data.equals(other._data)",
                            "def __neg__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values):\n        arr = operator.inv(values)\n    elif is_numeric_dtype(values) or is_timedelta64_dtype(values) or is_object_dtype(values):\n        arr = operator.neg(values)\n    else:\n        raise TypeError(f'Unary negative expects numeric dtype, not {values.dtype}')\n    return self.__array_wrap__(arr)",
                            "def __pos__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values) or is_period_arraylike(values):\n        arr = values\n    elif is_numeric_dtype(values) or is_timedelta64_dtype(values) or is_object_dtype(values):\n        arr = operator.pos(values)\n    else:\n        raise TypeError(f'Unary plus expects numeric dtype, not {values.dtype}')\n    return self.__array_wrap__(arr)",
                            "def __invert__(self):\n    if not self.size:\n        return self\n    arr = operator.inv(com.values_from_object(self))\n    return self.__array_wrap__(arr)",
                            "def __nonzero__(self):\n    raise ValueError(f'The truth value of a {type(self).__name__} is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().')",
                            "def bool(self):\n    \"\"\"\n    Return the bool of a single element PandasObject.\n\n    This must be a boolean scalar value, either True or False.  Raise a\n    ValueError if the PandasObject does not have exactly 1 element, or that\n    element is not boolean\n\n    Returns\n    -------\n    bool\n        Same single boolean value converted to bool type.\n    \"\"\"\n    v = self.squeeze()\n    if isinstance(v, (bool, np.bool_)):\n        return bool(v)\n    elif is_scalar(v):\n        raise ValueError(f'bool cannot act on a non-boolean single element {type(self).__name__}')\n    self.__nonzero__()",
                            "def __abs__(self):\n    return self.abs()",
                            "def __round__(self, decimals=0):\n    return self.round(decimals)",
                            "def _is_level_reference(self, key, axis=0):\n    \"\"\"\n    Test whether a key is a level reference for a given axis.\n\n    To be considered a level reference, `key` must be a string that:\n      - (axis=0): Matches the name of an index level and does NOT match\n        a column label.\n      - (axis=1): Matches the name of a column level and does NOT match\n        an index label.\n\n    Parameters\n    ----------\n    key : str\n        Potential level name for the given axis\n    axis : int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_level : bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    return key is not None and is_hashable(key) and (key in self.axes[axis].names) and (not self._is_label_reference(key, axis=axis))",
                            "def _is_label_reference(self, key, axis=0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label reference for a given axis.\n\n    To be considered a label reference, `key` must be a string that:\n      - (axis=0): Matches a column label\n      - (axis=1): Matches an index label\n\n    Parameters\n    ----------\n    key: str\n        Potential label name\n    axis: int, default 0\n        Axis perpendicular to the axis that labels are associated with\n        (0 means search for column labels, 1 means search for index labels)\n\n    Returns\n    -------\n    is_label: bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n    return key is not None and is_hashable(key) and any((key in self.axes[ax] for ax in other_axes))",
                            "def _is_label_or_level_reference(self, key: str, axis: int=0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label or level reference for a given axis.\n\n    To be considered either a label or a level reference, `key` must be a\n    string that:\n      - (axis=0): Matches a column label or an index level\n      - (axis=1): Matches an index label or a column level\n\n    Parameters\n    ----------\n    key: str\n        Potential label or level name\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_label_or_level: bool\n    \"\"\"\n    return self._is_level_reference(key, axis=axis) or self._is_label_reference(key, axis=axis)",
                            "def _check_label_or_level_ambiguity(self, key, axis: int=0) -> None:\n    \"\"\"\n    Check whether `key` is ambiguous.\n\n    By ambiguous, we mean that it matches both a level of the input\n    `axis` and a label of the other axis.\n\n    Parameters\n    ----------\n    key: str or object\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns).\n\n    Raises\n    ------\n    ValueError: `key` is ambiguous\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n    if key is not None and is_hashable(key) and (key in self.axes[axis].names) and any((key in self.axes[ax] for ax in other_axes)):\n        level_article, level_type = ('an', 'index') if axis == 0 else ('a', 'column')\n        label_article, label_type = ('a', 'column') if axis == 0 else ('an', 'index')\n        msg = f\"'{key}' is both {level_article} {level_type} level and {label_article} {label_type} label, which is ambiguous.\"\n        raise ValueError(msg)",
                            "def _get_label_or_level_values(self, key: str, axis: int=0) -> np.ndarray:\n    \"\"\"\n    Return a 1-D array of values associated with `key`, a label or level\n    from the given `axis`.\n\n    Retrieval logic:\n      - (axis=0): Return column values if `key` matches a column label.\n        Otherwise return index level values if `key` matches an index\n        level.\n      - (axis=1): Return row values if `key` matches an index label.\n        Otherwise return column level values if 'key' matches a column\n        level\n\n    Parameters\n    ----------\n    key: str\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    values: np.ndarray\n\n    Raises\n    ------\n    KeyError\n        if `key` matches neither a label nor a level\n    ValueError\n        if `key` matches multiple labels\n    FutureWarning\n        if `key` is ambiguous. This will become an ambiguity error in a\n        future version\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n    if self._is_label_reference(key, axis=axis):\n        self._check_label_or_level_ambiguity(key, axis=axis)\n        values = self.xs(key, axis=other_axes[0])._values\n    elif self._is_level_reference(key, axis=axis):\n        values = self.axes[axis].get_level_values(key)._values\n    else:\n        raise KeyError(key)\n    if values.ndim > 1:\n        if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n            multi_message = '\\nFor a multi-index, the label must be a tuple with elements corresponding to each level.'\n        else:\n            multi_message = ''\n        label_axis_name = 'column' if axis == 0 else 'index'\n        raise ValueError(f\"The {label_axis_name} label '{key}' is not unique.{multi_message}\")\n    return values",
                            "def _drop_labels_or_levels(self, keys, axis: int=0):\n    \"\"\"\n    Drop labels and/or levels for the given `axis`.\n\n    For each key in `keys`:\n      - (axis=0): If key matches a column label then drop the column.\n        Otherwise if key matches an index level then drop the level.\n      - (axis=1): If key matches an index label then drop the row.\n        Otherwise if key matches a column level then drop the level.\n\n    Parameters\n    ----------\n    keys: str or list of str\n        labels or levels to drop\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    dropped: DataFrame\n\n    Raises\n    ------\n    ValueError\n        if any `keys` match neither a label nor a level\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    keys = com.maybe_make_list(keys)\n    invalid_keys = [k for k in keys if not self._is_label_or_level_reference(k, axis=axis)]\n    if invalid_keys:\n        raise ValueError(f'The following keys are not valid labels or levels for axis {axis}: {invalid_keys}')\n    levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n    labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n    dropped = self.copy()\n    if axis == 0:\n        if levels_to_drop:\n            dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=1, inplace=True)\n    else:\n        if levels_to_drop:\n            if isinstance(dropped.columns, MultiIndex):\n                dropped.columns = dropped.columns.droplevel(levels_to_drop)\n            else:\n                dropped.columns = RangeIndex(dropped.columns.size)\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=0, inplace=True)\n    return dropped",
                            "def __hash__(self):\n    raise TypeError(f'{repr(type(self).__name__)} objects are mutable, thus they cannot be hashed')",
                            "def __iter__(self):\n    \"\"\"\n    Iterate over info axis.\n\n    Returns\n    -------\n    iterator\n        Info axis as iterator.\n    \"\"\"\n    return iter(self._info_axis)",
                            "def keys(self):\n    \"\"\"\n    Get the 'info axis' (see Indexing for more).\n\n    This is index for Series, columns for DataFrame.\n\n    Returns\n    -------\n    Index\n        Info axis.\n    \"\"\"\n    return self._info_axis",
                            "def items(self):\n    \"\"\"Iterate over (label, values) on info axis\n\n    This is index for Series and columns for DataFrame.\n\n    Returns\n    -------\n    Generator\n    \"\"\"\n    for h in self._info_axis:\n        yield (h, self[h])",
                            "@Appender(items.__doc__)\ndef iteritems(self):\n    return self.items()",
                            "def __len__(self) -> int:\n    \"\"\"Returns length of info axis\"\"\"\n    return len(self._info_axis)",
                            "def __contains__(self, key) -> bool_t:\n    \"\"\"True if the key is in the info axis\"\"\"\n    return key in self._info_axis",
                            "@property\ndef empty(self) -> bool_t:\n    \"\"\"\n    Indicator whether DataFrame is empty.\n\n    True if DataFrame is entirely empty (no items), meaning any of the\n    axes are of length 0.\n\n    Returns\n    -------\n    bool\n        If DataFrame is empty, return True, if not return False.\n\n    See Also\n    --------\n    Series.dropna\n    DataFrame.dropna\n\n    Notes\n    -----\n    If DataFrame contains only NaNs, it is still not considered empty. See\n    the example below.\n\n    Examples\n    --------\n    An example of an actual empty DataFrame. Notice the index is empty:\n\n    >>> df_empty = pd.DataFrame({'A' : []})\n    >>> df_empty\n    Empty DataFrame\n    Columns: [A]\n    Index: []\n    >>> df_empty.empty\n    True\n\n    If we only have NaNs in our DataFrame, it is not considered empty! We\n    will need to drop the NaNs to make the DataFrame empty:\n\n    >>> df = pd.DataFrame({'A' : [np.nan]})\n    >>> df\n        A\n    0 NaN\n    >>> df.empty\n    False\n    >>> df.dropna().empty\n    True\n    \"\"\"\n    return any((len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS))",
                            "def __array__(self, dtype=None):\n    return com.values_from_object(self)",
                            "def __array_wrap__(self, result, context=None):\n    result = lib.item_from_zerodim(result)\n    if is_scalar(result):\n        return result\n    d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n    return self._constructor(result, **d).__finalize__(self)",
                            "def __getstate__(self) -> Dict[str, Any]:\n    meta = {k: getattr(self, k, None) for k in self._metadata}\n    return dict(_data=self._data, _typ=self._typ, _metadata=self._metadata, attrs=self.attrs, **meta)",
                            "def __setstate__(self, state):\n    if isinstance(state, BlockManager):\n        self._data = state\n    elif isinstance(state, dict):\n        typ = state.get('_typ')\n        if typ is not None:\n            attrs = state.get('_attrs', {})\n            object.__setattr__(self, '_attrs', attrs)\n            meta = set(self._internal_names + self._metadata)\n            for k in list(meta):\n                if k in state:\n                    v = state[k]\n                    object.__setattr__(self, k, v)\n            for k, v in state.items():\n                if k not in meta:\n                    object.__setattr__(self, k, v)\n        else:\n            self._unpickle_series_compat(state)\n    elif len(state) == 2:\n        self._unpickle_series_compat(state)\n    self._item_cache = {}",
                            "def __repr__(self) -> str:\n    prepr = f\"[{','.join(map(pprint_thing, self))}]\"\n    return f'{type(self).__name__}({prepr})'",
                            "def _repr_latex_(self):\n    \"\"\"\n    Returns a LaTeX representation for a particular object.\n    Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n    \"\"\"\n    if config.get_option('display.latex.repr'):\n        return self.to_latex()\n    else:\n        return None",
                            "def _repr_data_resource_(self):\n    \"\"\"\n    Not a real Jupyter special repr method, but we use the same\n    naming convention.\n    \"\"\"\n    if config.get_option('display.html.table_schema'):\n        data = self.head(config.get_option('display.max_rows'))\n        payload = json.loads(data.to_json(orient='table'), object_pairs_hook=collections.OrderedDict)\n        return payload",
                            "@Appender(_shared_docs['to_excel'] % dict(klass='object'))\ndef to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None):\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n    from pandas.io.formats.excel import ExcelFormatter\n    formatter = ExcelFormatter(df, na_rep=na_rep, cols=columns, header=header, float_format=float_format, index=index, index_label=index_label, merge_cells=merge_cells, inf_rep=inf_rep)\n    formatter.write(excel_writer, sheet_name=sheet_name, startrow=startrow, startcol=startcol, freeze_panes=freeze_panes, engine=engine)",
                            "def to_json(self, path_or_buf: Optional[FilePathOrBuffer]=None, orient: Optional[str]=None, date_format: Optional[str]=None, double_precision: int=10, force_ascii: bool_t=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool_t=False, compression: Optional[str]='infer', index: bool_t=True, indent: Optional[int]=None) -> Optional[str]:\n    \"\"\"\n    Convert the object to a JSON string.\n\n    Note NaN's and None will be converted to null and datetime objects\n    will be converted to UNIX timestamps.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, optional\n        File path or object. If not specified, the result is returned as\n        a string.\n    orient : str\n        Indication of expected JSON string format.\n\n        * Series:\n\n            - default is 'index'\n            - allowed values are: {'split','records','index','table'}.\n\n        * DataFrame:\n\n            - default is 'columns'\n            - allowed values are: {'split', 'records', 'index', 'columns',\n              'values', 'table'}.\n\n        * The format of the JSON string:\n\n            - 'split' : dict like {'index' -> [index], 'columns' -> [columns],\n              'data' -> [values]}\n            - 'records' : list like [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n            - 'columns' : dict like {column -> {index -> value}}\n            - 'values' : just the values array\n            - 'table' : dict like {'schema': {schema}, 'data': {data}}\n\n            Describing the data, where data component is like ``orient='records'``.\n\n        .. versionchanged:: 0.20.0\n\n    date_format : {None, 'epoch', 'iso'}\n        Type of date conversion. 'epoch' = epoch milliseconds,\n        'iso' = ISO8601. The default depends on the `orient`. For\n        ``orient='table'``, the default is 'iso'. For all other orients,\n        the default is 'epoch'.\n    double_precision : int, default 10\n        The number of decimal places to use when encoding\n        floating point values.\n    force_ascii : bool, default True\n        Force encoded string to be ASCII.\n    date_unit : str, default 'ms' (milliseconds)\n        The time unit to encode to, governs timestamp and ISO8601\n        precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n        microsecond, and nanosecond respectively.\n    default_handler : callable, default None\n        Handler to call if object cannot otherwise be converted to a\n        suitable format for JSON. Should receive a single argument which is\n        the object to convert and return a serialisable object.\n    lines : bool, default False\n        If 'orient' is 'records' write out line delimited json format. Will\n        throw ValueError if incorrect 'orient' since others are not list\n        like.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n        A string representing the compression to use in the output file,\n        only used when the first argument is a filename. By default, the\n        compression is inferred from the filename.\n\n        .. versionadded:: 0.21.0\n        .. versionchanged:: 0.24.0\n           'infer' option added and set to default\n    index : bool, default True\n        Whether to include the index values in the JSON string. Not\n        including the index (``index=False``) is only supported when\n        orient is 'split' or 'table'.\n\n        .. versionadded:: 0.23.0\n\n    indent : int, optional\n       Length of whitespace used to indent each record.\n\n       .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting json format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_json\n\n    Notes\n    -----\n    The behavior of ``indent=0`` varies from the stdlib, which does not\n    indent the output but does insert newlines. Currently, ``indent=0``\n    and the default ``indent=None`` are equivalent in pandas, though this\n    may change in a future release.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n    ...                   index=['row 1', 'row 2'],\n    ...                   columns=['col 1', 'col 2'])\n    >>> df.to_json(orient='split')\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n    Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n    Note that index labels are not preserved with this encoding.\n\n    >>> df.to_json(orient='records')\n    '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n    Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n    >>> df.to_json(orient='index')\n    '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n    >>> df.to_json(orient='columns')\n    '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n    >>> df.to_json(orient='values')\n    '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n    Encoding with Table Schema\n\n    >>> df.to_json(orient='table')\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n    \"\"\"\n    from pandas.io import json\n    if date_format is None and orient == 'table':\n        date_format = 'iso'\n    elif date_format is None:\n        date_format = 'epoch'\n    config.is_nonnegative_int(indent)\n    indent = indent or 0\n    return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient, date_format=date_format, double_precision=double_precision, force_ascii=force_ascii, date_unit=date_unit, default_handler=default_handler, lines=lines, compression=compression, index=index, indent=indent)",
                            "def to_hdf(self, path_or_buf, key: str, mode: str='a', complevel: Optional[int]=None, complib: Optional[str]=None, append: bool_t=False, format: Optional[str]=None, index: bool_t=True, min_itemsize: Optional[Union[int, Dict[str, int]]]=None, nan_rep=None, dropna: Optional[bool_t]=None, data_columns: Optional[List[str]]=None, errors: str='strict', encoding: str='UTF-8'):\n    \"\"\"\n    Write the contained data to an HDF5 file using HDFStore.\n\n    Hierarchical Data Format (HDF) is self-describing, allowing an\n    application to interpret the structure and contents of a file with\n    no outside information. One HDF file can hold a mix of related objects\n    which can be accessed as a group or as individual objects.\n\n    In order to add another DataFrame or Series to an existing HDF file\n    please use append mode and a different a key.\n\n    For more information see the :ref:`user guide <io.hdf5>`.\n\n    Parameters\n    ----------\n    path_or_buf : str or pandas.HDFStore\n        File path or HDFStore object.\n    key : str\n        Identifier for the group in the store.\n    mode : {'a', 'w', 'r+'}, default 'a'\n        Mode to open file:\n\n        - 'w': write, a new file is created (an existing file with\n          the same name would be deleted).\n        - 'a': append, an existing file is opened for reading and\n          writing, and if the file does not exist it is created.\n        - 'r+': similar to 'a', but the file must already exist.\n    complevel : {0-9}, optional\n        Specifies a compression level for data.\n        A value of 0 disables compression.\n    complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n        Specifies the compression library to be used.\n        As of v0.20.2 these additional compressors for Blosc are supported\n        (default if no compressor specified: 'blosc:blosclz'):\n        {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n        'blosc:zlib', 'blosc:zstd'}.\n        Specifying a compression library which is not available issues\n        a ValueError.\n    append : bool, default False\n        For Table formats, append the input data to the existing.\n    format : {'fixed', 'table', None}, default 'fixed'\n        Possible values:\n\n        - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n          nor searchable.\n        - 'table': Table format. Write as a PyTables Table structure\n          which may perform worse but allow more flexible operations\n          like searching / selecting subsets of the data.\n        - If None, pd.get_option('io.hdf.default_format') is checked,\n          followed by fallback to \"fixed\"\n    errors : str, default 'strict'\n        Specifies how encoding and decoding errors are to be handled.\n        See the errors argument for :func:`open` for a full list\n        of options.\n    encoding : str, default \"UTF-8\"\n    min_itemsize : dict or int, optional\n        Map column names to minimum string sizes for columns.\n    nan_rep : Any, optional\n        How to represent null values as str.\n        Not allowed with append=True.\n    data_columns : list of columns or True, optional\n        List of columns to create as indexed data columns for on-disk\n        queries, or True to use all columns. By default only the axes\n        of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n        Applicable only to format='table'.\n\n    See Also\n    --------\n    DataFrame.read_hdf : Read from HDF file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_feather : Write out feather-format for DataFrames.\n    DataFrame.to_csv : Write out to a csv file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n    ...                   index=['a', 'b', 'c'])\n    >>> df.to_hdf('data.h5', key='df', mode='w')\n\n    We can add another object to the same file:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.to_hdf('data.h5', key='s')\n\n    Reading from HDF file:\n\n    >>> pd.read_hdf('data.h5', 'df')\n    A  B\n    a  1  4\n    b  2  5\n    c  3  6\n    >>> pd.read_hdf('data.h5', 's')\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    Deleting file with data:\n\n    >>> import os\n    >>> os.remove('data.h5')\n    \"\"\"\n    from pandas.io import pytables\n    pytables.to_hdf(path_or_buf, key, self, mode=mode, complevel=complevel, complib=complib, append=append, format=format, index=index, min_itemsize=min_itemsize, nan_rep=nan_rep, dropna=dropna, data_columns=data_columns, errors=errors, encoding=encoding)",
                            "def to_sql(self, name: str, con, schema=None, if_exists: str='fail', index: bool_t=True, index_label=None, chunksize=None, dtype=None, method=None) -> None:\n    \"\"\"\n    Write records stored in a DataFrame to a SQL database.\n\n    Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n    newly created, appended to, or overwritten.\n\n    Parameters\n    ----------\n    name : str\n        Name of SQL table.\n    con : sqlalchemy.engine.Engine or sqlite3.Connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library. Legacy support is provided for sqlite3.Connection objects. The user\n        is responsible for engine disposal and connection closure for the SQLAlchemy\n        connectable See `here                 <https://docs.sqlalchemy.org/en/13/core/connections.html>`_\n\n    schema : str, optional\n        Specify the schema (if database flavor supports this). If None, use\n        default schema.\n    if_exists : {'fail', 'replace', 'append'}, default 'fail'\n        How to behave if the table already exists.\n\n        * fail: Raise a ValueError.\n        * replace: Drop the table before inserting new values.\n        * append: Insert new values to the existing table.\n\n    index : bool, default True\n        Write DataFrame index as a column. Uses `index_label` as the column\n        name in the table.\n    index_label : str or sequence, default None\n        Column label for index column(s). If None is given (default) and\n        `index` is True, then the index names are used.\n        A sequence should be given if the DataFrame uses MultiIndex.\n    chunksize : int, optional\n        Specify the number of rows in each batch to be written at a time.\n        By default, all rows will be written at once.\n    dtype : dict or scalar, optional\n        Specifying the datatype for columns. If a dictionary is used, the\n        keys should be the column names and the values should be the\n        SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n        scalar is provided, it will be applied to all columns.\n    method : {None, 'multi', callable}, optional\n        Controls the SQL insertion clause used:\n\n        * None : Uses standard SQL ``INSERT`` clause (one per row).\n        * 'multi': Pass multiple values in a single ``INSERT`` clause.\n        * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n        Details and a sample callable implementation can be found in the\n        section :ref:`insert method <io.sql.method>`.\n\n        .. versionadded:: 0.24.0\n\n    Raises\n    ------\n    ValueError\n        When the table already exists and `if_exists` is 'fail' (the\n        default).\n\n    See Also\n    --------\n    read_sql : Read a DataFrame from a table.\n\n    Notes\n    -----\n    Timezone aware datetime columns will be written as\n    ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n    database. Otherwise, the datetimes will be stored as timezone unaware\n    timestamps local to the original timezone.\n\n    .. versionadded:: 0.24.0\n\n    References\n    ----------\n    .. [1] http://docs.sqlalchemy.org\n    .. [2] https://www.python.org/dev/peps/pep-0249/\n\n    Examples\n    --------\n\n    Create an in-memory SQLite database.\n\n    >>> from sqlalchemy import create_engine\n    >>> engine = create_engine('sqlite://', echo=False)\n\n    Create a table from scratch with 3 rows.\n\n    >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n    >>> df\n         name\n    0  User 1\n    1  User 2\n    2  User 3\n\n    >>> df.to_sql('users', con=engine)\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n    >>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n    >>> df1.to_sql('users', con=engine, if_exists='append')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n     (0, 'User 4'), (1, 'User 5')]\n\n    Overwrite the table with just ``df1``.\n\n    >>> df1.to_sql('users', con=engine, if_exists='replace',\n    ...            index_label='id')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 4'), (1, 'User 5')]\n\n    Specify the dtype (especially useful for integers with missing values).\n    Notice that while pandas is forced to store the data as floating point,\n    the database supports nullable integers. When fetching the data with\n    Python, we get back integer scalars.\n\n    >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n    >>> df\n         A\n    0  1.0\n    1  NaN\n    2  2.0\n\n    >>> from sqlalchemy.types import Integer\n    >>> df.to_sql('integers', con=engine, index=False,\n    ...           dtype={\"A\": Integer()})\n\n    >>> engine.execute(\"SELECT * FROM integers\").fetchall()\n    [(1,), (None,), (2,)]\n    \"\"\"\n    from pandas.io import sql\n    sql.to_sql(self, name, con, schema=schema, if_exists=if_exists, index=index, index_label=index_label, chunksize=chunksize, dtype=dtype, method=method)",
                            "def to_pickle(self, path, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL) -> None:\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    path : str\n        File path where the pickled object will be stored.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None},         default 'infer'\n        A string representing the compression to use in the output file. By\n        default, infers from the file extension in specified path.\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n        values are 0, 1, 2, 3, 4. A negative value for the protocol\n        parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html.\n        .. versionadded:: 0.21.0.\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> original_df.to_pickle(\"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    from pandas.io.pickle import to_pickle\n    to_pickle(self, path, compression=compression, protocol=protocol)",
                            "def to_clipboard(self, excel: bool_t=True, sep: Optional[str]=None, **kwargs):\n    \"\"\"\n    Copy object to the system clipboard.\n\n    Write a text representation of object to the system clipboard.\n    This can be pasted into Excel, for example.\n\n    Parameters\n    ----------\n    excel : bool, default True\n        Produce output in a csv format for easy pasting into excel.\n\n        - True, use the provided separator for csv pasting.\n        - False, write a string representation of the object to the clipboard.\n\n    sep : str, default ``'\\\\t'``\n        Field delimiter.\n    **kwargs\n        These parameters will be passed to DataFrame.to_csv.\n\n    See Also\n    --------\n    DataFrame.to_csv : Write a DataFrame to a comma-separated values\n        (csv) file.\n    read_clipboard : Read text from clipboard and pass to read_table.\n\n    Notes\n    -----\n    Requirements for your platform.\n\n      - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n      - Windows : none\n      - OS X : none\n\n    Examples\n    --------\n    Copy the contents of a DataFrame to the clipboard.\n\n    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n    >>> df.to_clipboard(sep=',')\n    ... # Wrote the following to the system clipboard:\n    ... # ,A,B,C\n    ... # 0,1,2,3\n    ... # 1,4,5,6\n\n    We can omit the the index by passing the keyword `index` and setting\n    it to false.\n\n    >>> df.to_clipboard(sep=',', index=False)\n    ... # Wrote the following to the system clipboard:\n    ... # A,B,C\n    ... # 1,2,3\n    ... # 4,5,6\n    \"\"\"\n    from pandas.io import clipboards\n    clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)",
                            "def to_xarray(self):\n    \"\"\"\n    Return an xarray object from the pandas object.\n\n    Returns\n    -------\n    xarray.DataArray or xarray.Dataset\n        Data in the pandas structure converted to Dataset if the object is\n        a DataFrame, or a DataArray if the object is a Series.\n\n    See Also\n    --------\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Notes\n    -----\n    See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n    ...                    ('parrot', 'bird', 24.0, 2),\n    ...                    ('lion', 'mammal', 80.5, 4),\n    ...                    ('monkey', 'mammal', np.nan, 4)],\n    ...                   columns=['name', 'class', 'max_speed',\n    ...                            'num_legs'])\n    >>> df\n         name   class  max_speed  num_legs\n    0  falcon    bird      389.0         2\n    1  parrot    bird       24.0         2\n    2    lion  mammal       80.5         4\n    3  monkey  mammal        NaN         4\n\n    >>> df.to_xarray()\n    <xarray.Dataset>\n    Dimensions:    (index: 4)\n    Coordinates:\n      * index      (index) int64 0 1 2 3\n    Data variables:\n        name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n        class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n        max_speed  (index) float64 389.0 24.0 80.5 nan\n        num_legs   (index) int64 2 2 4 4\n\n    >>> df['max_speed'].to_xarray()\n    <xarray.DataArray 'max_speed' (index: 4)>\n    array([389. ,  24. ,  80.5,   nan])\n    Coordinates:\n      * index    (index) int64 0 1 2 3\n\n    >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n    ...                         '2018-01-02', '2018-01-02'])\n    >>> df_multiindex = pd.DataFrame({'date': dates,\n    ...                               'animal': ['falcon', 'parrot',\n    ...                                          'falcon', 'parrot'],\n    ...                               'speed': [350, 18, 361, 15]})\n    >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n    >>> df_multiindex\n                       speed\n    date       animal\n    2018-01-01 falcon    350\n               parrot     18\n    2018-01-02 falcon    361\n               parrot     15\n\n    >>> df_multiindex.to_xarray()\n    <xarray.Dataset>\n    Dimensions:  (animal: 2, date: 2)\n    Coordinates:\n      * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n      * animal   (animal) object 'falcon' 'parrot'\n    Data variables:\n        speed    (date, animal) int64 350 18 361 15\n    \"\"\"\n    xarray = import_optional_dependency('xarray')\n    if self.ndim == 1:\n        return xarray.DataArray.from_series(self)\n    else:\n        return xarray.Dataset.from_dataframe(self)",
                            "@Substitution(returns=fmt.return_docstring)\ndef to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None):\n    \"\"\"\n    Render object to a LaTeX tabular, longtable, or nested table/tabular.\n\n    Requires ``\\\\usepackage{booktabs}``.  The output can be copy/pasted\n    into a main LaTeX document or read from an external file\n    with ``\\\\input{table.tex}``.\n\n    .. versionchanged:: 0.20.2\n       Added to Series.\n\n    .. versionchanged:: 1.0.0\n       Added caption and label arguments.\n\n    Parameters\n    ----------\n    buf : str, Path or StringIO-like, optional, default None\n        Buffer to write to. If None, the output is returned as a string.\n    columns : list of label, optional\n        The subset of columns to write. Writes all columns by default.\n    col_space : int, optional\n        The minimum width of each column.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given,\n        it is assumed to be aliases for the column names.\n    index : bool, default True\n        Write row names (index).\n    na_rep : str, default 'NaN'\n        Missing data representation.\n    formatters : list of functions or dict of {str: function}, optional\n        Formatter functions to apply to columns' elements by position or\n        name. The result of each function must be a unicode string.\n        List must be of length equal to the number of columns.\n    float_format : one-parameter function or str, optional, default None\n        Formatter for floating point numbers. For example\n        ``float_format=\"%%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n        both result in 0.1234 being formatted as 0.12.\n    sparsify : bool, optional\n        Set to False for a DataFrame with a hierarchical index to print\n        every multiindex key at each row. By default, the value will be\n        read from the config module.\n    index_names : bool, default True\n        Prints the names of the indexes.\n    bold_rows : bool, default False\n        Make the row labels bold in the output.\n    column_format : str, optional\n        The columns format as specified in `LaTeX table format\n        <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n        columns. By default, 'l' will be used for all columns except\n        columns of numbers, which default to 'r'.\n    longtable : bool, optional\n        By default, the value will be read from the pandas config\n        module. Use a longtable environment instead of tabular. Requires\n        adding a \\\\usepackage{longtable} to your LaTeX preamble.\n    escape : bool, optional\n        By default, the value will be read from the pandas config\n        module. When set to False prevents from escaping latex special\n        characters in column names.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    decimal : str, default '.'\n        Character recognized as decimal separator, e.g. ',' in Europe.\n    multicolumn : bool, default True\n        Use \\\\multicolumn to enhance MultiIndex columns.\n        The default will be read from the config module.\n    multicolumn_format : str, default 'l'\n        The alignment for multicolumns, similar to `column_format`\n        The default will be read from the config module.\n    multirow : bool, default False\n        Use \\\\multirow to enhance MultiIndex rows. Requires adding a\n        \\\\usepackage{multirow} to your LaTeX preamble. Will print\n        centered labels (instead of top-aligned) across the contained\n        rows, separating groups via clines. The default will be read\n        from the pandas config module.\n    caption : str, optional\n        The LaTeX caption to be placed inside ``\\\\caption{}`` in the output.\n\n        .. versionadded:: 1.0.0\n\n    label : str, optional\n        The LaTeX label to be placed inside ``\\\\label{}`` in the output.\n        This is used with ``\\\\ref{}`` in the main ``.tex`` file.\n\n        .. versionadded:: 1.0.0\n    %(returns)s\n    See Also\n    --------\n    DataFrame.to_string : Render a DataFrame to a console-friendly\n        tabular output.\n    DataFrame.to_html : Render a DataFrame as an HTML table.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> print(df.to_latex(index=False))  # doctest: +NORMALIZE_WHITESPACE\n    \\\\begin{tabular}{lll}\n     \\\\toprule\n           name &    mask &    weapon \\\\\\\\\n     \\\\midrule\n        Raphael &     red &       sai \\\\\\\\\n      Donatello &  purple &  bo staff \\\\\\\\\n    \\\\bottomrule\n    \\\\end{tabular}\n    \"\"\"\n    if self.ndim == 1:\n        self = self.to_frame()\n    if longtable is None:\n        longtable = config.get_option('display.latex.longtable')\n    if escape is None:\n        escape = config.get_option('display.latex.escape')\n    if multicolumn is None:\n        multicolumn = config.get_option('display.latex.multicolumn')\n    if multicolumn_format is None:\n        multicolumn_format = config.get_option('display.latex.multicolumn_format')\n    if multirow is None:\n        multirow = config.get_option('display.latex.multirow')\n    formatter = DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, header=header, index=index, formatters=formatters, float_format=float_format, bold_rows=bold_rows, sparsify=sparsify, index_names=index_names, escape=escape, decimal=decimal)\n    return formatter.to_latex(buf=buf, column_format=column_format, longtable=longtable, encoding=encoding, multicolumn=multicolumn, multicolumn_format=multicolumn_format, multirow=multirow, caption=caption, label=label)",
                            "def to_csv(self, path_or_buf: Optional[FilePathOrBuffer]=None, sep: str=',', na_rep: str='', float_format: Optional[str]=None, columns: Optional[Sequence[Optional[Hashable]]]=None, header: Union[bool_t, List[str]]=True, index: bool_t=True, index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]]=None, mode: str='w', encoding: Optional[str]=None, compression: Optional[Union[str, Mapping[str, str]]]='infer', quoting: Optional[int]=None, quotechar: str='\"', line_terminator: Optional[str]=None, chunksize: Optional[int]=None, date_format: Optional[str]=None, doublequote: bool_t=True, escapechar: Optional[str]=None, decimal: Optional[str]='.') -> Optional[str]:\n    \"\"\"\n    Write object to a comma-separated values (csv) file.\n\n    .. versionchanged:: 0.24.0\n        The order of arguments for Series was changed.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, default None\n        File path or object, if None is provided the result is returned as\n        a string.  If a file object is passed it should be opened with\n        `newline=''`, disabling universal newlines.\n\n        .. versionchanged:: 0.24.0\n\n           Was previously named \"path\" for Series.\n\n    sep : str, default ','\n        String of length 1. Field delimiter for the output file.\n    na_rep : str, default ''\n        Missing data representation.\n    float_format : str, default None\n        Format string for floating point numbers.\n    columns : sequence, optional\n        Columns to write.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names.\n\n        .. versionchanged:: 0.24.0\n\n           Previously defaulted to False for Series.\n\n    index : bool, default True\n        Write row names (index).\n    index_label : str or sequence, or False, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the object uses MultiIndex. If\n        False do not print fields for index names. Use index_label=False\n        for easier importing in R.\n    mode : str\n        Python write mode, default 'w'.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    compression : str or dict, default 'infer'\n        If str, represents compression mode. If dict, value at 'method' is\n        the compression mode. Compression mode may be any of the following\n        possible values: {'infer', 'gzip', 'bz2', 'zip', 'xz', None}. If\n        compression mode is 'infer' and `path_or_buf` is path-like, then\n        detect compression mode from the following extensions: '.gz',\n        '.bz2', '.zip' or '.xz'. (otherwise no compression). If dict given\n        and mode is 'zip' or inferred as 'zip', other entries passed as\n        additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other entries as additional compression options if\n           compression mode is 'zip'.\n\n    quoting : optional constant from csv module\n        Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n        then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n        will treat them as non-numeric.\n    quotechar : str, default '\\\\\"'\n        String of length 1. Character used to quote fields.\n    line_terminator : str, optional\n        The newline character or character sequence to use in the output\n        file. Defaults to `os.linesep`, which depends on the OS in which\n        this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n\n        .. versionchanged:: 0.24.0\n    chunksize : int or None\n        Rows to write at a time.\n    date_format : str, default None\n        Format string for datetime objects.\n    doublequote : bool, default True\n        Control quoting of `quotechar` inside a field.\n    escapechar : str, default None\n        String of length 1. Character used to escape `sep` and `quotechar`\n        when appropriate.\n    decimal : str, default '.'\n        Character recognized as decimal separator. E.g. use ',' for\n        European data.\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting csv format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_csv : Load a CSV file into a DataFrame.\n    to_excel : Write DataFrame to an Excel file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> df.to_csv(index=False)\n    'name,mask,weapon\\\\nRaphael,red,sai\\\\nDonatello,purple,bo staff\\\\n'\n\n    # create 'out.zip' containing 'out.csv'\n    >>> compression_opts = dict(method='zip',\n    ...                         archive_name='out.csv')  # doctest: +SKIP\n\n    >>> df.to_csv('out.zip', index=False,\n    ...           compression=compression_opts)  # doctest: +SKIP\n    \"\"\"\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n    from pandas.io.formats.csvs import CSVFormatter\n    formatter = CSVFormatter(df, path_or_buf, line_terminator=line_terminator, sep=sep, encoding=encoding, compression=compression, quoting=quoting, na_rep=na_rep, float_format=float_format, cols=columns, header=header, index=index, index_label=index_label, mode=mode, chunksize=chunksize, quotechar=quotechar, date_format=date_format, doublequote=doublequote, escapechar=escapechar, decimal=decimal)\n    formatter.save()\n    if path_or_buf is None:\n        return formatter.path_or_buf.getvalue()\n    return None",
                            "@classmethod\ndef _create_indexer(cls, name: str, indexer) -> None:\n    \"\"\"Create an indexer like _name in the class.\"\"\"\n    if getattr(cls, name, None) is None:\n        _indexer = functools.partial(indexer, name)\n        setattr(cls, name, property(_indexer, doc=indexer.__doc__))",
                            "def _set_as_cached(self, item, cacher) -> None:\n    \"\"\"Set the _cacher attribute on the calling object with a weakref to\n    cacher.\n    \"\"\"\n    self._cacher = (item, weakref.ref(cacher))",
                            "def _reset_cacher(self) -> None:\n    \"\"\"Reset the cacher.\"\"\"\n    if hasattr(self, '_cacher'):\n        del self._cacher",
                            "def _maybe_cache_changed(self, item, value) -> None:\n    \"\"\"The object has called back to us saying maybe it has changed.\n    \"\"\"\n    self._data.set(item, value)",
                            "@property\ndef _is_cached(self) -> bool_t:\n    \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n    return getattr(self, '_cacher', None) is not None",
                            "def _get_cacher(self):\n    \"\"\"return my cacher or None\"\"\"\n    cacher = getattr(self, '_cacher', None)\n    if cacher is not None:\n        cacher = cacher[1]()\n    return cacher",
                            "def _maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True) -> None:\n    \"\"\"\n    See if we need to update our parent cacher if clear, then clear our\n    cache.\n\n    Parameters\n    ----------\n    clear : bool, default False\n        Clear the item cache.\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n    cacher = getattr(self, '_cacher', None)\n    if cacher is not None:\n        ref = cacher[1]()\n        if ref is None:\n            del self._cacher\n        else:\n            try:\n                ref._maybe_cache_changed(cacher[0], self)\n            except AssertionError:\n                pass\n    if verify_is_copy:\n        self._check_setitem_copy(stacklevel=5, t='referant')\n    if clear:\n        self._clear_item_cache()",
                            "def _clear_item_cache(self) -> None:\n    self._item_cache.clear()",
                            "def take(self, indices, axis=0, is_copy: bool_t=True, **kwargs):\n    \"\"\"\n    Return the elements in the given *positional* indices along an axis.\n\n    This means that we are not indexing according to actual values in\n    the index attribute of the object. We are indexing according to the\n    actual position of the element in the object.\n\n    Parameters\n    ----------\n    indices : array-like\n        An array of ints indicating which positions to take.\n    axis : {0 or 'index', 1 or 'columns', None}, default 0\n        The axis on which to select elements. ``0`` means that we are\n        selecting rows, ``1`` means that we are selecting columns.\n    is_copy : bool, default True\n        Whether to return a copy of the original object or not.\n    **kwargs\n        For compatibility with :meth:`numpy.take`. Has no effect on the\n        output.\n\n    Returns\n    -------\n    taken : same type as caller\n        An array-like containing the elements taken from the object.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by labels.\n    DataFrame.iloc : Select a subset of a DataFrame by positions.\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=['name', 'class', 'max_speed'],\n    ...                   index=[0, 2, 3, 1])\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    2  parrot    bird       24.0\n    3    lion  mammal       80.5\n    1  monkey  mammal        NaN\n\n    Take elements at positions 0 and 3 along the axis 0 (default).\n\n    Note how the actual indices selected (0 and 1) do not correspond to\n    our selected indices 0 and 3. That's because we are selecting the 0th\n    and 3rd rows, not rows whose indices equal 0 and 3.\n\n    >>> df.take([0, 3])\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  monkey  mammal        NaN\n\n    Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n    >>> df.take([1, 2], axis=1)\n        class  max_speed\n    0    bird      389.0\n    2    bird       24.0\n    3  mammal       80.5\n    1  mammal        NaN\n\n    We may take elements using negative integers for positive indices,\n    starting from the end of the object, just like with Python lists.\n\n    >>> df.take([-1, -2])\n         name   class  max_speed\n    1  monkey  mammal        NaN\n    3    lion  mammal       80.5\n    \"\"\"\n    nv.validate_take(tuple(), kwargs)\n    self._consolidate_inplace()\n    new_data = self._data.take(indices, axis=self._get_block_manager_axis(axis), verify=True)\n    result = self._constructor(new_data).__finalize__(self)\n    if is_copy:\n        if not result._get_axis(axis).equals(self._get_axis(axis)):\n            result._set_is_copy(self)\n    return result",
                            "def xs(self, key, axis=0, level=None, drop_level: bool_t=True):\n    \"\"\"\n    Return cross-section from the Series/DataFrame.\n\n    This method takes a `key` argument to select data at a particular\n    level of a MultiIndex.\n\n    Parameters\n    ----------\n    key : label or tuple of label\n        Label contained in the index, or partially in a MultiIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis to retrieve cross-section on.\n    level : object, defaults to first n levels (n=1 or len(key))\n        In case of a key partially contained in a MultiIndex, indicate\n        which levels are used. Levels can be referred by label or position.\n    drop_level : bool, default True\n        If False, returns object with same levels as self.\n\n    Returns\n    -------\n    Series or DataFrame\n        Cross-section from the original Series or DataFrame\n        corresponding to the selected index levels.\n\n    See Also\n    --------\n    DataFrame.loc : Access a group of rows and columns\n        by label(s) or a boolean array.\n    DataFrame.iloc : Purely integer-location based indexing\n        for selection by position.\n\n    Notes\n    -----\n    `xs` can not be used to set values.\n\n    MultiIndex Slicers is a generic way to get/set values on\n    any level or levels.\n    It is a superset of `xs` functionality, see\n    :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n    Examples\n    --------\n    >>> d = {'num_legs': [4, 4, 2, 2],\n    ...      'num_wings': [0, 0, 2, 2],\n    ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n    ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n    ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n    >>> df = pd.DataFrame(data=d)\n    >>> df = df.set_index(['class', 'animal', 'locomotion'])\n    >>> df\n                               num_legs  num_wings\n    class  animal  locomotion\n    mammal cat     walks              4          0\n           dog     walks              4          0\n           bat     flies              2          2\n    bird   penguin walks              2          2\n\n    Get values at specified index\n\n    >>> df.xs('mammal')\n                       num_legs  num_wings\n    animal locomotion\n    cat    walks              4          0\n    dog    walks              4          0\n    bat    flies              2          2\n\n    Get values at several indexes\n\n    >>> df.xs(('mammal', 'dog'))\n                num_legs  num_wings\n    locomotion\n    walks              4          0\n\n    Get values at specified index and level\n\n    >>> df.xs('cat', level=1)\n                       num_legs  num_wings\n    class  locomotion\n    mammal walks              4          0\n\n    Get values at several indexes and levels\n\n    >>> df.xs(('bird', 'walks'),\n    ...       level=[0, 'locomotion'])\n             num_legs  num_wings\n    animal\n    penguin         2          2\n\n    Get values at specified column and axis\n\n    >>> df.xs('num_wings', axis=1)\n    class   animal   locomotion\n    mammal  cat      walks         0\n            dog      walks         0\n            bat      flies         2\n    bird    penguin  walks         2\n    Name: num_wings, dtype: int64\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    if level is not None:\n        loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n        _indexer = [slice(None)] * self.ndim\n        _indexer[axis] = loc\n        indexer = tuple(_indexer)\n        result = self.iloc[indexer]\n        setattr(result, result._get_axis_name(axis), new_ax)\n        return result\n    if axis == 1:\n        return self[key]\n    self._consolidate_inplace()\n    index = self.index\n    if isinstance(index, MultiIndex):\n        loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n    else:\n        loc = self.index.get_loc(key)\n        if isinstance(loc, np.ndarray):\n            if loc.dtype == np.bool_:\n                inds, = loc.nonzero()\n                return self.take(inds, axis=axis)\n            else:\n                return self.take(loc, axis=axis)\n        if not is_scalar(loc):\n            new_index = self.index[loc]\n    if is_scalar(loc):\n        new_values = self._data.fast_xs(loc)\n        if not is_list_like(new_values) or self.ndim == 1:\n            return com.maybe_box_datetimelike(new_values)\n        result = self._constructor_sliced(new_values, index=self.columns, name=self.index[loc], dtype=new_values.dtype)\n    else:\n        result = self.iloc[loc]\n        result.index = new_index\n    result._set_is_copy(self, copy=not result._is_view)\n    return result",
                            "def __getitem__(self, item):\n    raise AbstractMethodError(self)",
                            "def _get_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n    cache = self._item_cache\n    res = cache.get(item)\n    if res is None:\n        values = self._data.get(item)\n        res = self._box_item_values(item, values)\n        cache[item] = res\n        res._set_as_cached(item, self)\n        res._is_copy = self._is_copy\n    return res",
                            "def _iget_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n    ax = self._info_axis\n    if ax.is_unique:\n        lower = self._get_item_cache(ax[item])\n    else:\n        lower = self.take(item, axis=self._info_axis_number)\n    return lower",
                            "def _box_item_values(self, key, values):\n    raise AbstractMethodError(self)",
                            "def _slice(self, slobj: slice, axis=0, kind=None):\n    \"\"\"\n    Construct a slice of this container.\n\n    kind parameter is maintained for compatibility with Series slicing.\n    \"\"\"\n    axis = self._get_block_manager_axis(axis)\n    result = self._constructor(self._data.get_slice(slobj, axis=axis))\n    result = result.__finalize__(self)\n    is_copy = axis != 0 or result._is_view\n    result._set_is_copy(self, copy=is_copy)\n    return result",
                            "def _set_item(self, key, value) -> None:\n    self._data.set(key, value)\n    self._clear_item_cache()",
                            "def _set_is_copy(self, ref=None, copy: bool_t=True) -> None:\n    if not copy:\n        self._is_copy = None\n    elif ref is not None:\n        self._is_copy = weakref.ref(ref)\n    else:\n        self._is_copy = None",
                            "def _check_is_chained_assignment_possible(self) -> bool_t:\n    \"\"\"\n    Check if we are a view, have a cacher, and are of mixed type.\n    If so, then force a setitem_copy check.\n\n    Should be called just near setting a value\n\n    Will return a boolean if it we are a view and are cached, but a\n    single-dtype meaning that the cacher should be updated following\n    setting.\n    \"\"\"\n    if self._is_view and self._is_cached:\n        ref = self._get_cacher()\n        if ref is not None and ref._is_mixed_type:\n            self._check_setitem_copy(stacklevel=4, t='referant', force=True)\n        return True\n    elif self._is_copy:\n        self._check_setitem_copy(stacklevel=4, t='referant')\n    return False",
                            "def _check_setitem_copy(self, stacklevel=4, t='setting', force=False):\n    \"\"\"\n\n    Parameters\n    ----------\n    stacklevel : int, default 4\n       the level to show of the stack when the error is output\n    t : str, the type of setting error\n    force : bool, default False\n       If True, then force showing an error.\n\n    validate if we are doing a setitem on a chained copy.\n\n    If you call this function, be sure to set the stacklevel such that the\n    user will see the error *at the level of setting*\n\n    It is technically possible to figure out that we are setting on\n    a copy even WITH a multi-dtyped pandas object. In other words, some\n    blocks may be views while other are not. Currently _is_view will ALWAYS\n    return False for multi-blocks to avoid having to handle this case.\n\n    df = DataFrame(np.arange(0,9), columns=['count'])\n    df['group'] = 'b'\n\n    # This technically need not raise SettingWithCopy if both are view\n    # (which is not # generally guaranteed but is usually True.  However,\n    # this is in general not a good practice and we recommend using .loc.\n    df.iloc[0:5]['group'] = 'a'\n\n    \"\"\"\n    if not (force or self._is_copy):\n        return\n    value = config.get_option('mode.chained_assignment')\n    if value is None:\n        return\n    if self._is_copy is not None and (not isinstance(self._is_copy, str)):\n        r = self._is_copy()\n        if not gc.get_referents(r) or r.shape == self.shape:\n            self._is_copy = None\n            return\n    if isinstance(self._is_copy, str):\n        t = self._is_copy\n    elif t == 'referant':\n        t = '\\nA value is trying to be set on a copy of a slice from a DataFrame\\n\\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy'\n    else:\n        t = '\\nA value is trying to be set on a copy of a slice from a DataFrame.\\nTry using .loc[row_indexer,col_indexer] = value instead\\n\\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy'\n    if value == 'raise':\n        raise com.SettingWithCopyError(t)\n    elif value == 'warn':\n        warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
                            "def __delitem__(self, key):\n    \"\"\"\n    Delete item\n    \"\"\"\n    deleted = False\n    maybe_shortcut = False\n    if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n        try:\n            maybe_shortcut = key not in self.columns._engine\n        except TypeError:\n            pass\n    if maybe_shortcut:\n        if not isinstance(key, tuple):\n            key = (key,)\n        for col in self.columns:\n            if isinstance(col, tuple) and col[:len(key)] == key:\n                del self[col]\n                deleted = True\n    if not deleted:\n        self._data.delete(key)\n    try:\n        del self._item_cache[key]\n    except KeyError:\n        pass",
                            "def get(self, key, default=None):\n    \"\"\"\n    Get item from object for given key (ex: DataFrame column).\n\n    Returns default value if not found.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    value : same type as items contained in object\n    \"\"\"\n    try:\n        return self[key]\n    except (KeyError, ValueError, IndexError):\n        return default",
                            "@property\ndef _is_view(self):\n    \"\"\"Return boolean indicating if self is view of another array \"\"\"\n    return self._data.is_view",
                            "def reindex_like(self, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None):\n    \"\"\"\n    Return an object with matching indices as other object.\n\n    Conform the object to the same index on all axes. Optional\n    filling logic, placing NaN in locations having no value\n    in the previous index. A new object is produced unless the\n    new index is equivalent to the current one and copy=False.\n\n    Parameters\n    ----------\n    other : Object of the same data type\n        Its row and column indices are used to define the new indices\n        of this object.\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: propagate last valid observation forward to next\n          valid\n        * backfill / bfill: use next valid observation to fill gap\n        * nearest: use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    limit : int, default None\n        Maximum number of consecutive labels to fill for inexact matches.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as caller, but with changed indices on each axis.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex : Change to new indices or expand indices.\n\n    Notes\n    -----\n    Same as calling\n    ``.reindex(index=other.index, columns=other.columns,...)``.\n\n    Examples\n    --------\n    >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n    ...                     [31, 87.8, 'high'],\n    ...                     [22, 71.6, 'medium'],\n    ...                     [35, 95, 'medium']],\n    ...                    columns=['temp_celsius', 'temp_fahrenheit',\n    ...                             'windspeed'],\n    ...                    index=pd.date_range(start='2014-02-12',\n    ...                                        end='2014-02-15', freq='D'))\n\n    >>> df1\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          24.3             75.7      high\n    2014-02-13          31.0             87.8      high\n    2014-02-14          22.0             71.6    medium\n    2014-02-15          35.0             95.0    medium\n\n    >>> df2 = pd.DataFrame([[28, 'low'],\n    ...                     [30, 'low'],\n    ...                     [35.1, 'medium']],\n    ...                    columns=['temp_celsius', 'windspeed'],\n    ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n    ...                                            '2014-02-15']))\n\n    >>> df2\n                temp_celsius windspeed\n    2014-02-12          28.0       low\n    2014-02-13          30.0       low\n    2014-02-15          35.1    medium\n\n    >>> df2.reindex_like(df1)\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          28.0              NaN       low\n    2014-02-13          30.0              NaN       low\n    2014-02-14           NaN              NaN       NaN\n    2014-02-15          35.1              NaN    medium\n    \"\"\"\n    d = other._construct_axes_dict(axes=self._AXIS_ORDERS, method=method, copy=copy, limit=limit, tolerance=tolerance)\n    return self.reindex(**d)",
                            "def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise'):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if labels is not None:\n        if index is not None or columns is not None:\n            raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n        axis_name = self._get_axis_name(axis)\n        axes = {axis_name: labels}\n    elif index is not None or columns is not None:\n        axes, _ = self._construct_axes_from_arguments((index, columns), {})\n    else:\n        raise ValueError(\"Need to specify at least one of 'labels', 'index' or 'columns'\")\n    obj = self\n    for axis, labels in axes.items():\n        if labels is not None:\n            obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n    if inplace:\n        self._update_inplace(obj)\n    else:\n        return obj",
                            "def _drop_axis(self, labels, axis, level=None, errors: str='raise'):\n    \"\"\"\n    Drop labels from specified axis. Used in the ``drop`` method\n    internally.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n    axis : int or axis name\n    level : int or level name, default None\n        For MultiIndex\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    axis = self._get_axis(axis)\n    if axis.is_unique:\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError('axis must be a MultiIndex')\n            new_axis = axis.drop(labels, level=level, errors=errors)\n        else:\n            new_axis = axis.drop(labels, errors=errors)\n        result = self.reindex(**{axis_name: new_axis})\n    else:\n        labels = ensure_object(com.index_labels_to_array(labels))\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError('axis must be a MultiIndex')\n            indexer = ~axis.get_level_values(level).isin(labels)\n            if errors == 'raise' and indexer.all():\n                raise KeyError(f'{labels} not found in axis')\n        else:\n            indexer = ~axis.isin(labels)\n            labels_missing = (axis.get_indexer_for(labels) == -1).any()\n            if errors == 'raise' and labels_missing:\n                raise KeyError(f'{labels} not found in axis')\n        slicer = [slice(None)] * self.ndim\n        slicer[self._get_axis_number(axis_name)] = indexer\n        result = self.loc[tuple(slicer)]\n    return result",
                            "def _update_inplace(self, result, verify_is_copy: bool_t=True) -> None:\n    \"\"\"\n    Replace self internals with result.\n\n    Parameters\n    ----------\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n    self._reset_cache()\n    self._clear_item_cache()\n    self._data = getattr(result, '_data', result)\n    self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
                            "def add_prefix(self, prefix: str):\n    \"\"\"\n    Prefix labels with string `prefix`.\n\n    For Series, the row labels are prefixed.\n    For DataFrame, the column labels are prefixed.\n\n    Parameters\n    ----------\n    prefix : str\n        The string to add before each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_suffix: Suffix row labels with string `suffix`.\n    DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_prefix('item_')\n    item_0    1\n    item_1    2\n    item_2    3\n    item_3    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_prefix('col_')\n         col_A  col_B\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial('{prefix}{}'.format, prefix=prefix)\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                            "def add_suffix(self, suffix: str):\n    \"\"\"\n    Suffix labels with string `suffix`.\n\n    For Series, the row labels are suffixed.\n    For DataFrame, the column labels are suffixed.\n\n    Parameters\n    ----------\n    suffix : str\n        The string to add after each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_prefix: Prefix row labels with string `prefix`.\n    DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_suffix('_item')\n    0_item    1\n    1_item    2\n    2_item    3\n    3_item    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_suffix('_col')\n         A_col  B_col\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial('{}{suffix}'.format, suffix=suffix)\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                            "def sort_values(self, by=None, axis=0, ascending=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last'):\n    \"\"\"\n    Sort by the values along either axis.\n\n    Parameters\n    ----------%(optional_by)s\n    axis : %(axes_single_arg)s, default 0\n         Axis to be sorted.\n    ascending : bool or list of bool, default True\n         Sort ascending vs. descending. Specify list for multiple sort\n         orders.  If this is a list of bools, must match the length of\n         the by.\n    inplace : bool, default False\n         If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n         Choice of sorting algorithm. See also ndarray.np.sort for more\n         information.  `mergesort` is the only stable algorithm. For\n         DataFrames, this option is only applied when sorting on a single\n         column or label.\n    na_position : {'first', 'last'}, default 'last'\n         Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n         end.\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted values if inplace=False, None otherwise.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\n    ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n    ...     'col2': [2, 1, 9, 8, 7, 4],\n    ...     'col3': [0, 1, 9, 4, 2, 3],\n    ... })\n    >>> df\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n\n    Sort by col1\n\n    >>> df.sort_values(by=['col1'])\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort by multiple columns\n\n    >>> df.sort_values(by=['col1', 'col2'])\n        col1 col2 col3\n    1   A    1    1\n    0   A    2    0\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort Descending\n\n    >>> df.sort_values(by='col1', ascending=False)\n        col1 col2 col3\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    3   NaN  8    4\n\n    Putting NAs first\n\n    >>> df.sort_values(by='col1', ascending=False, na_position='first')\n        col1 col2 col3\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    \"\"\"\n    raise AbstractMethodError(self)",
                            "def sort_index(self, axis=0, level=None, ascending: bool_t=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool_t=True):\n    \"\"\"\n    Sort object by labels (along an axis).\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to sort.  The value 0 identifies the rows,\n        and 1 identifies the columns.\n    level : int or level name or list of ints or list of level names\n        If not None, sort on values in specified index level(s).\n    ascending : bool, default True\n        Sort ascending vs. descending.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also ndarray.np.sort for more\n        information.  `mergesort` is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted index if inplace=False, None otherwise.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    labels = self._get_axis(axis)\n    if level is not None:\n        raise NotImplementedError('level is not implemented')\n    if inplace:\n        raise NotImplementedError('inplace is not implemented')\n    sort_index = labels.argsort()\n    if not ascending:\n        sort_index = sort_index[::-1]\n    new_axis = labels.take(sort_index)\n    return self.reindex(**{axis_name: new_axis})",
                            "def reindex(self, *args, **kwargs):\n    \"\"\"\n    Conform %(klass)s to new index with optional filling logic.\n\n    Places NA/NaN in locations having no value in the previous index. A new object\n    is produced unless the new index is equivalent to the current one and\n    ``copy=False``.\n\n    Parameters\n    ----------\n    %(optional_labels)s\n    %(axes)s : array-like, optional\n        New labels / index to conform to, should be specified using\n        keywords. Preferably an Index object to avoid duplicating data.\n    %(optional_axis)s\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: Propagate last valid observation forward to next\n          valid.\n        * backfill / bfill: Use next valid observation to fill gap.\n        * nearest: Use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    level : int or name\n        Broadcast across a level, matching Index values on the\n        passed MultiIndex level.\n    fill_value : scalar, default np.NaN\n        Value to use for missing values. Defaults to NaN, but can be any\n        \"compatible\" value.\n    limit : int, default None\n        Maximum number of consecutive elements to forward or backward fill.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    %(klass)s with changed index.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n\n    ``DataFrame.reindex`` supports two calling conventions\n\n    * ``(index=index_labels, columns=column_labels, ...)``\n    * ``(labels, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Create a dataframe with some fictional data.\n\n    >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n    >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n    ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n    ...                   index=index)\n    >>> df\n               http_status  response_time\n    Firefox            200           0.04\n    Chrome             200           0.02\n    Safari             404           0.07\n    IE10               404           0.08\n    Konqueror          301           1.00\n\n    Create a new index and reindex the dataframe. By default\n    values in the new index that do not have corresponding\n    records in the dataframe are assigned ``NaN``.\n\n    >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n    ...              'Chrome']\n    >>> df.reindex(new_index)\n                   http_status  response_time\n    Safari               404.0           0.07\n    Iceweasel              NaN            NaN\n    Comodo Dragon          NaN            NaN\n    IE10                 404.0           0.08\n    Chrome               200.0           0.02\n\n    We can fill in the missing values by passing a value to\n    the keyword ``fill_value``. Because the index is not monotonically\n    increasing or decreasing, we cannot use arguments to the keyword\n    ``method`` to fill the ``NaN`` values.\n\n    >>> df.reindex(new_index, fill_value=0)\n                   http_status  response_time\n    Safari                 404           0.07\n    Iceweasel                0           0.00\n    Comodo Dragon            0           0.00\n    IE10                   404           0.08\n    Chrome                 200           0.02\n\n    >>> df.reindex(new_index, fill_value='missing')\n                  http_status response_time\n    Safari                404          0.07\n    Iceweasel         missing       missing\n    Comodo Dragon     missing       missing\n    IE10                  404          0.08\n    Chrome                200          0.02\n\n    We can also reindex the columns.\n\n    >>> df.reindex(columns=['http_status', 'user_agent'])\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    Or we can use \"axis-style\" keyword arguments\n\n    >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    To further illustrate the filling functionality in\n    ``reindex``, we will create a dataframe with a\n    monotonically increasing index (for example, a sequence\n    of dates).\n\n    >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n    >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n    ...                    index=date_index)\n    >>> df2\n                prices\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n\n    Suppose we decide to expand the dataframe to cover a wider\n    date range.\n\n    >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n    >>> df2.reindex(date_index2)\n                prices\n    2009-12-29     NaN\n    2009-12-30     NaN\n    2009-12-31     NaN\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    The index entries that did not have a value in the original data frame\n    (for example, '2009-12-29') are by default filled with ``NaN``.\n    If desired, we can fill in the missing values using one of several\n    options.\n\n    For example, to back-propagate the last valid value to fill the ``NaN``\n    values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n    >>> df2.reindex(date_index2, method='bfill')\n                prices\n    2009-12-29   100.0\n    2009-12-30   100.0\n    2009-12-31   100.0\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    Please note that the ``NaN`` value present in the original dataframe\n    (at index value 2010-01-03) will not be filled by any of the\n    value propagation schemes. This is because filling while reindexing\n    does not look at dataframe values, but only compares the original and\n    desired indexes. If you do want to fill in the ``NaN`` values present\n    in the original dataframe, use the ``fillna()`` method.\n\n    See the :ref:`user guide <basics.reindexing>` for more.\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    method = missing.clean_reindex_fill_method(kwargs.pop('method', None))\n    level = kwargs.pop('level', None)\n    copy = kwargs.pop('copy', True)\n    limit = kwargs.pop('limit', None)\n    tolerance = kwargs.pop('tolerance', None)\n    fill_value = kwargs.pop('fill_value', None)\n    kwargs.pop('axis', None)\n    if kwargs:\n        raise TypeError(f'reindex() got an unexpected keyword argument \"{list(kwargs.keys())[0]}\"')\n    self._consolidate_inplace()\n    if all((self._get_axis(axis).identical(ax) for axis, ax in axes.items() if ax is not None)):\n        if copy:\n            return self.copy()\n        return self\n    if self._needs_reindex_multi(axes, method, level):\n        return self._reindex_multi(axes, copy, fill_value)\n    return self._reindex_axes(axes, level, limit, tolerance, method, fill_value, copy).__finalize__(self)",
                            "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    \"\"\"Perform the reindex for all the axes.\"\"\"\n    obj = self\n    for a in self._AXIS_ORDERS:\n        labels = axes[a]\n        if labels is None:\n            continue\n        ax = self._get_axis(a)\n        new_index, indexer = ax.reindex(labels, level=level, limit=limit, tolerance=tolerance, method=method)\n        axis = self._get_axis_number(a)\n        obj = obj._reindex_with_indexers({axis: [new_index, indexer]}, fill_value=fill_value, copy=copy, allow_dups=False)\n    return obj",
                            "def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n    \"\"\"Check if we do need a multi reindex.\"\"\"\n    return com.count_not_none(*axes.values()) == self._AXIS_LEN and method is None and (level is None) and (not self._is_mixed_type)",
                            "def _reindex_multi(self, axes, copy, fill_value):\n    raise AbstractMethodError(self)",
                            "def _reindex_with_indexers(self, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False):\n    \"\"\"allow_dups indicates an internal call here \"\"\"\n    new_data = self._data\n    for axis in sorted(reindexers.keys()):\n        index, indexer = reindexers[axis]\n        baxis = self._get_block_manager_axis(axis)\n        if index is None:\n            continue\n        index = ensure_index(index)\n        if indexer is not None:\n            indexer = ensure_int64(indexer)\n        new_data = new_data.reindex_indexer(index, indexer, axis=baxis, fill_value=fill_value, allow_dups=allow_dups, copy=copy)\n    if copy and new_data is self._data:\n        new_data = new_data.copy()\n    return self._constructor(new_data).__finalize__(self)",
                            "def filter(self, items=None, like: Optional[str]=None, regex: Optional[str]=None, axis=None):\n    \"\"\"\n    Subset the dataframe rows or columns according to the specified index labels.\n\n    Note that this routine does not filter a dataframe on its\n    contents. The filter is applied to the labels of the index.\n\n    Parameters\n    ----------\n    items : list-like\n        Keep labels from axis which are in items.\n    like : str\n        Keep labels from axis for which \"like in label == True\".\n    regex : str (regular expression)\n        Keep labels from axis for which re.search(regex, label) == True.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        The axis to filter on, expressed either as an index (int)\n        or axis name (str). By default this is the info axis,\n        'index' for Series, 'columns' for DataFrame.\n\n    Returns\n    -------\n    same type as input object\n\n    See Also\n    --------\n    DataFrame.loc\n\n    Notes\n    -----\n    The ``items``, ``like``, and ``regex`` parameters are\n    enforced to be mutually exclusive.\n\n    ``axis`` defaults to the info axis that is used when indexing\n    with ``[]``.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n    ...                   index=['mouse', 'rabbit'],\n    ...                   columns=['one', 'two', 'three'])\n\n    >>> # select columns by name\n    >>> df.filter(items=['one', 'three'])\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select columns by regular expression\n    >>> df.filter(regex='e$', axis=1)\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select rows containing 'bbi'\n    >>> df.filter(like='bbi', axis=0)\n             one  two  three\n    rabbit    4    5      6\n    \"\"\"\n    nkw = com.count_not_none(items, like, regex)\n    if nkw > 1:\n        raise TypeError('Keyword arguments `items`, `like`, or `regex` are mutually exclusive')\n    if axis is None:\n        axis = self._info_axis_name\n    labels = self._get_axis(axis)\n    if items is not None:\n        name = self._get_axis_name(axis)\n        return self.reindex(**{name: [r for r in items if r in labels]})\n    elif like:\n\n        def f(x):\n            return like in ensure_str(x)\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    elif regex:\n\n        def f(x):\n            return matcher.search(ensure_str(x)) is not None\n        matcher = re.compile(regex)\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    else:\n        raise TypeError('Must pass either `items`, `like`, or `regex`')",
                            "def head(self: FrameOrSeries, n: int=5) -> FrameOrSeries:\n    \"\"\"\n    Return the first `n` rows.\n\n    This function returns the first `n` rows for the object based\n    on position. It is useful for quickly testing if your object\n    has the right type of data in it.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    obj_head : same type as caller\n        The first `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.tail: Returns the last `n` rows.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the first 5 lines\n\n    >>> df.head()\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n\n    Viewing the first `n` lines (three in this case)\n\n    >>> df.head(3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    \"\"\"\n    return self.iloc[:n]",
                            "def tail(self: FrameOrSeries, n: int=5) -> FrameOrSeries:\n    \"\"\"\n    Return the last `n` rows.\n\n    This function returns last `n` rows from the object based on\n    position. It is useful for quickly verifying data, for example,\n    after sorting or appending rows.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    type of caller\n        The last `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.head : The first `n` rows of the caller object.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the last 5 lines\n\n    >>> df.tail()\n       animal\n    4  monkey\n    5  parrot\n    6   shark\n    7   whale\n    8   zebra\n\n    Viewing the last `n` lines (three in this case)\n\n    >>> df.tail(3)\n      animal\n    6  shark\n    7  whale\n    8  zebra\n    \"\"\"\n    if n == 0:\n        return self.iloc[0:0]\n    return self.iloc[-n:]",
                            "def sample(self, n=None, frac=None, replace=False, weights=None, random_state=None, axis=None):\n    \"\"\"\n    Return a random sample of items from an axis of object.\n\n    You can use `random_state` for reproducibility.\n\n    Parameters\n    ----------\n    n : int, optional\n        Number of items from axis to return. Cannot be used with `frac`.\n        Default = 1 if `frac` = None.\n    frac : float, optional\n        Fraction of axis items to return. Cannot be used with `n`.\n    replace : bool, default False\n        Allow or disallow sampling of the same row more than once.\n    weights : str or ndarray-like, optional\n        Default 'None' results in equal probability weighting.\n        If passed a Series, will align with target object on index. Index\n        values in weights not found in sampled object will be ignored and\n        index values in sampled object not in weights will be assigned\n        weights of zero.\n        If called on a DataFrame, will accept the name of a column\n        when axis = 0.\n        Unless weights are a Series, weights must be same length as axis\n        being sampled.\n        If weights do not sum to 1, they will be normalized to sum to 1.\n        Missing values in the weights column will be treated as zero.\n        Infinite values not allowed.\n    random_state : int or numpy.random.RandomState, optional\n        Seed for the random number generator (if int), or numpy RandomState\n        object.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        Axis to sample. Accepts axis number or name. Default is stat axis\n        for given data type (0 for Series and DataFrames).\n\n    Returns\n    -------\n    Series or DataFrame\n        A new object of same type as caller containing `n` items randomly\n        sampled from the caller object.\n\n    See Also\n    --------\n    numpy.random.choice: Generates a random sample from a given 1-D numpy\n        array.\n\n    Notes\n    -----\n    If `frac` > 1, `replacement` should be set to `True`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n    ...                    'num_wings': [2, 0, 0, 0],\n    ...                    'num_specimen_seen': [10, 2, 1, 8]},\n    ...                   index=['falcon', 'dog', 'spider', 'fish'])\n    >>> df\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    dog            4          0                  2\n    spider         8          0                  1\n    fish           0          0                  8\n\n    Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n    Note that we use `random_state` to ensure the reproducibility of\n    the examples.\n\n    >>> df['num_legs'].sample(n=3, random_state=1)\n    fish      0\n    spider    8\n    falcon    2\n    Name: num_legs, dtype: int64\n\n    A random 50% sample of the ``DataFrame`` with replacement:\n\n    >>> df.sample(frac=0.5, replace=True, random_state=1)\n          num_legs  num_wings  num_specimen_seen\n    dog          4          0                  2\n    fish         0          0                  8\n\n    An upsample sample of the ``DataFrame`` with replacement:\n    Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n    >>> df.sample(frac=2, replace=True, random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    dog            4          0                  2\n    fish           0          0                  8\n    falcon         2          2                 10\n    falcon         2          2                 10\n    fish           0          0                  8\n    dog            4          0                  2\n    fish           0          0                  8\n    dog            4          0                  2\n\n    Using a DataFrame column as weights. Rows with larger value in the\n    `num_specimen_seen` column are more likely to be sampled.\n\n    >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    fish           0          0                  8\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    axis_length = self.shape[axis]\n    rs = com.random_state(random_state)\n    if weights is not None:\n        if isinstance(weights, ABCSeries):\n            weights = weights.reindex(self.axes[axis])\n        if isinstance(weights, str):\n            if isinstance(self, ABCDataFrame):\n                if axis == 0:\n                    try:\n                        weights = self[weights]\n                    except KeyError:\n                        raise KeyError('String passed to weights not a valid column')\n                else:\n                    raise ValueError('Strings can only be passed to weights when sampling from rows on a DataFrame')\n            else:\n                raise ValueError('Strings cannot be passed as weights when sampling from a Series.')\n        weights = pd.Series(weights, dtype='float64')\n        if len(weights) != axis_length:\n            raise ValueError('Weights and axis to be sampled must be of same length')\n        if (weights == np.inf).any() or (weights == -np.inf).any():\n            raise ValueError('weight vector may not include `inf` values')\n        if (weights < 0).any():\n            raise ValueError('weight vector many not include negative values')\n        weights = weights.fillna(0)\n        if weights.sum() != 1:\n            if weights.sum() != 0:\n                weights = weights / weights.sum()\n            else:\n                raise ValueError('Invalid weights: weights sum to zero')\n        weights = weights.values\n    if n is None and frac is None:\n        n = 1\n    elif frac is not None and frac > 1 and (not replace):\n        raise ValueError('Replace has to be set to `True` when upsampling the population `frac` > 1.')\n    elif n is not None and frac is None and (n % 1 != 0):\n        raise ValueError('Only integers accepted as `n` values')\n    elif n is None and frac is not None:\n        n = int(round(frac * axis_length))\n    elif n is not None and frac is not None:\n        raise ValueError('Please enter a value for `frac` OR `n`, not both')\n    if n < 0:\n        raise ValueError('A negative number of rows requested. Please provide positive value.')\n    locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n    return self.take(locs, axis=axis, is_copy=False)",
                            "@Appender(_shared_docs['pipe'] % _shared_doc_kwargs)\ndef pipe(self, func, *args, **kwargs):\n    return com.pipe(self, func, *args, **kwargs)",
                            "def __finalize__(self: FrameOrSeries, other, method=None, **kwargs) -> FrameOrSeries:\n    \"\"\"\n    Propagate metadata from other to self.\n\n    Parameters\n    ----------\n    other : the object from which to get the attributes that we are going\n        to propagate\n    method : optional, a passed method name ; possibly to take different\n        types of propagation actions based on this\n\n    \"\"\"\n    if isinstance(other, NDFrame):\n        for name in other.attrs:\n            self.attrs[name] = other.attrs[name]\n        for name in self._metadata:\n            object.__setattr__(self, name, getattr(other, name, None))\n    return self",
                            "def __getattr__(self, name: str):\n    \"\"\"After regular attribute access, try looking up the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n    if name in self._internal_names_set or name in self._metadata or name in self._accessors:\n        return object.__getattribute__(self, name)\n    else:\n        if self._info_axis._can_hold_identifiers_and_holds_name(name):\n            return self[name]\n        return object.__getattribute__(self, name)",
                            "def __setattr__(self, name: str, value) -> None:\n    \"\"\"After regular attribute access, try setting the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n    try:\n        object.__getattribute__(self, name)\n        return object.__setattr__(self, name, value)\n    except AttributeError:\n        pass\n    if name in self._internal_names_set:\n        object.__setattr__(self, name, value)\n    elif name in self._metadata:\n        object.__setattr__(self, name, value)\n    else:\n        try:\n            existing = getattr(self, name)\n            if isinstance(existing, Index):\n                object.__setattr__(self, name, value)\n            elif name in self._info_axis:\n                self[name] = value\n            else:\n                object.__setattr__(self, name, value)\n        except (AttributeError, TypeError):\n            if isinstance(self, ABCDataFrame) and is_list_like(value):\n                warnings.warn(\"Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\", stacklevel=2)\n            object.__setattr__(self, name, value)",
                            "def _dir_additions(self):\n    \"\"\" add the string-like attributes from the info_axis.\n    If info_axis is a MultiIndex, it's first level values are used.\n    \"\"\"\n    additions = {c for c in self._info_axis.unique(level=0)[:100] if isinstance(c, str) and c.isidentifier()}\n    return super()._dir_additions().union(additions)",
                            "def _protect_consolidate(self, f):\n    \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n    cache\n    \"\"\"\n    blocks_before = len(self._data.blocks)\n    result = f()\n    if len(self._data.blocks) != blocks_before:\n        self._clear_item_cache()\n    return result",
                            "def _consolidate_inplace(self) -> None:\n    \"\"\"Consolidate data in place and return None\"\"\"\n\n    def f():\n        self._data = self._data.consolidate()\n    self._protect_consolidate(f)",
                            "def _consolidate(self, inplace: bool_t=False):\n    \"\"\"\n    Compute NDFrame with \"consolidated\" internals (data of each dtype\n    grouped together in a single ndarray).\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        If False return new object, otherwise modify existing object.\n\n    Returns\n    -------\n    consolidated : same type as caller\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if inplace:\n        self._consolidate_inplace()\n    else:\n        f = lambda: self._data.consolidate()\n        cons_data = self._protect_consolidate(f)\n        return self._constructor(cons_data).__finalize__(self)",
                            "@property\ndef _is_mixed_type(self):\n    f = lambda: self._data.is_mixed_type\n    return self._protect_consolidate(f)",
                            "@property\ndef _is_numeric_mixed_type(self):\n    f = lambda: self._data.is_numeric_mixed_type\n    return self._protect_consolidate(f)",
                            "@property\ndef _is_datelike_mixed_type(self):\n    f = lambda: self._data.is_datelike_mixed_type\n    return self._protect_consolidate(f)",
                            "def _check_inplace_setting(self, value) -> bool_t:\n    \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n    if self._is_mixed_type:\n        if not self._is_numeric_mixed_type:\n            if is_float(value) and np.isnan(value):\n                return True\n            raise TypeError('Cannot do inplace boolean setting on mixed-types with a non np.nan value')\n    return True",
                            "def _get_numeric_data(self):\n    return self._constructor(self._data.get_numeric_data()).__finalize__(self)",
                            "def _get_bool_data(self):\n    return self._constructor(self._data.get_bool_data()).__finalize__(self)",
                            "@property\ndef values(self):\n    \"\"\"\n    Return a Numpy representation of the DataFrame.\n\n    .. warning::\n\n       We recommend using :meth:`DataFrame.to_numpy` instead.\n\n    Only the values in the DataFrame will be returned, the axes labels\n    will be removed.\n\n    Returns\n    -------\n    numpy.ndarray\n        The values of the DataFrame.\n\n    See Also\n    --------\n    DataFrame.to_numpy : Recommended alternative to this method.\n    DataFrame.index : Retrieve the index labels.\n    DataFrame.columns : Retrieving the column names.\n\n    Notes\n    -----\n    The dtype will be a lower-common-denominator dtype (implicit\n    upcasting); that is to say if the dtypes (even of numeric types)\n    are mixed, the one that accommodates all will be chosen. Use this\n    with care if you are not dealing with the blocks.\n\n    e.g. If the dtypes are float16 and float32, dtype will be upcast to\n    float32.  If dtypes are int32 and uint8, dtype will be upcast to\n    int32. By :func:`numpy.find_common_type` convention, mixing int64\n    and uint64 will result in a float64 dtype.\n\n    Examples\n    --------\n    A DataFrame where all columns are the same type (e.g., int64) results\n    in an array of the same type.\n\n    >>> df = pd.DataFrame({'age':    [ 3,  29],\n    ...                    'height': [94, 170],\n    ...                    'weight': [31, 115]})\n    >>> df\n       age  height  weight\n    0    3      94      31\n    1   29     170     115\n    >>> df.dtypes\n    age       int64\n    height    int64\n    weight    int64\n    dtype: object\n    >>> df.values\n    array([[  3,  94,  31],\n           [ 29, 170, 115]], dtype=int64)\n\n    A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n    results in an ndarray of the broadest type that accommodates these\n    mixed types (e.g., object).\n\n    >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n    ...                     ('lion',     80.5, 1),\n    ...                     ('monkey', np.nan, None)],\n    ...                   columns=('name', 'max_speed', 'rank'))\n    >>> df2.dtypes\n    name          object\n    max_speed    float64\n    rank          object\n    dtype: object\n    >>> df2.values\n    array([['parrot', 24.0, 'second'],\n           ['lion', 80.5, 1],\n           ['monkey', nan, None]], dtype=object)\n    \"\"\"\n    self._consolidate_inplace()\n    return self._data.as_array(transpose=self._AXIS_REVERSED)",
                            "@property\ndef _values(self):\n    \"\"\"internal implementation\"\"\"\n    return self.values",
                            "@property\ndef _get_values(self):\n    return self.values",
                            "def _internal_get_values(self):\n    \"\"\"\n    Return an ndarray after converting sparse values to dense.\n\n    This is the same as ``.values`` for non-sparse data. For sparse\n    data contained in a `SparseArray`, the data are first\n    converted to a dense representation.\n\n    Returns\n    -------\n    numpy.ndarray\n        Numpy representation of DataFrame.\n\n    See Also\n    --------\n    values : Numpy representation of DataFrame.\n    SparseArray : Container for sparse data.\n    \"\"\"\n    return self.values",
                            "@property\ndef dtypes(self):\n    \"\"\"\n    Return the dtypes in the DataFrame.\n\n    This returns a Series with the data type of each column.\n    The result's index is the original DataFrame's columns. Columns\n    with mixed types are stored with the ``object`` dtype. See\n    :ref:`the User Guide <basics.dtypes>` for more.\n\n    Returns\n    -------\n    pandas.Series\n        The data type of each column.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'float': [1.0],\n    ...                    'int': [1],\n    ...                    'datetime': [pd.Timestamp('20180310')],\n    ...                    'string': ['foo']})\n    >>> df.dtypes\n    float              float64\n    int                  int64\n    datetime    datetime64[ns]\n    string              object\n    dtype: object\n    \"\"\"\n    from pandas import Series\n    return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
                            "def _to_dict_of_blocks(self, copy: bool_t=True):\n    \"\"\"\n    Return a dict of dtype -> Constructor Types that\n    each is a homogeneous dtype.\n\n    Internal ONLY\n    \"\"\"\n    return {k: self._constructor(v).__finalize__(self) for k, v in self._data.to_dict(copy=copy).items()}",
                            "def astype(self, dtype, copy: bool_t=True, errors: str='raise'):\n    \"\"\"\n    Cast a pandas object to a specified dtype ``dtype``.\n\n    Parameters\n    ----------\n    dtype : data type, or dict of column name -> data type\n        Use a numpy.dtype or Python type to cast entire pandas object to\n        the same type. Alternatively, use {col: dtype, ...}, where col is a\n        column label and dtype is a numpy.dtype or Python type to cast one\n        or more of the DataFrame's columns to column-specific types.\n    copy : bool, default True\n        Return a copy when ``copy=True`` (be very careful setting\n        ``copy=False`` as changes to values then may propagate to other\n        pandas objects).\n    errors : {'raise', 'ignore'}, default 'raise'\n        Control raising of exceptions on invalid data for provided dtype.\n\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object.\n\n    Returns\n    -------\n    casted : same type as caller\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to a numeric type.\n    numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n    Examples\n    --------\n    Create a DataFrame:\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    Cast all columns to int32:\n\n    >>> df.astype('int32').dtypes\n    col1    int32\n    col2    int32\n    dtype: object\n\n    Cast col1 to int32 using a dictionary:\n\n    >>> df.astype({'col1': 'int32'}).dtypes\n    col1    int32\n    col2    int64\n    dtype: object\n\n    Create a series:\n\n    >>> ser = pd.Series([1, 2], dtype='int32')\n    >>> ser\n    0    1\n    1    2\n    dtype: int32\n    >>> ser.astype('int64')\n    0    1\n    1    2\n    dtype: int64\n\n    Convert to categorical type:\n\n    >>> ser.astype('category')\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [1, 2]\n\n    Convert to ordered categorical type with custom ordering:\n\n    >>> cat_dtype = pd.api.types.CategoricalDtype(\n    ...     categories=[2, 1], ordered=True)\n    >>> ser.astype(cat_dtype)\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [2 < 1]\n\n    Note that using ``copy=False`` and changing data on a new\n    pandas object may propagate changes:\n\n    >>> s1 = pd.Series([1, 2])\n    >>> s2 = s1.astype('int64', copy=False)\n    >>> s2[0] = 10\n    >>> s1  # note that s1[0] has changed too\n    0    10\n    1     2\n    dtype: int64\n    \"\"\"\n    if is_dict_like(dtype):\n        if self.ndim == 1:\n            if len(dtype) > 1 or self.name not in dtype:\n                raise KeyError('Only the Series name can be used for the key in Series dtype mappings.')\n            new_type = dtype[self.name]\n            return self.astype(new_type, copy, errors)\n        for col_name in dtype.keys():\n            if col_name not in self:\n                raise KeyError('Only a column name can be used for the key in a dtype mappings argument.')\n        results = []\n        for col_name, col in self.items():\n            if col_name in dtype:\n                results.append(col.astype(dtype=dtype[col_name], copy=copy, errors=errors))\n            else:\n                results.append(col.copy() if copy else col)\n    elif is_extension_array_dtype(dtype) and self.ndim > 1:\n        results = [self.iloc[:, i].astype(dtype, copy=copy) for i in range(len(self.columns))]\n    else:\n        new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n        return self._constructor(new_data).__finalize__(self)\n    result = pd.concat(results, axis=1, copy=False)\n    result.columns = self.columns\n    return result",
                            "def copy(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Make a copy of this object's indices and data.\n\n    When ``deep=True`` (default), a new object will be created with a\n    copy of the calling object's data and indices. Modifications to\n    the data or indices of the copy will not be reflected in the\n    original object (see notes below).\n\n    When ``deep=False``, a new object will be created without copying\n    the calling object's data or index (only references to the data\n    and index are copied). Any changes to the data of the original\n    will be reflected in the shallow copy (and vice versa).\n\n    Parameters\n    ----------\n    deep : bool, default True\n        Make a deep copy, including a copy of the data and the indices.\n        With ``deep=False`` neither the indices nor the data are copied.\n\n    Returns\n    -------\n    copy : Series or DataFrame\n        Object type matches caller.\n\n    Notes\n    -----\n    When ``deep=True``, data is copied but actual Python objects\n    will not be copied recursively, only the reference to the object.\n    This is in contrast to `copy.deepcopy` in the Standard Library,\n    which recursively copies object data (see examples below).\n\n    While ``Index`` objects are copied when ``deep=True``, the underlying\n    numpy array is not copied for performance reasons. Since ``Index`` is\n    immutable, the underlying data can be safely shared and a copy\n    is not needed.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> s\n    a    1\n    b    2\n    dtype: int64\n\n    >>> s_copy = s.copy()\n    >>> s_copy\n    a    1\n    b    2\n    dtype: int64\n\n    **Shallow copy versus default (deep) copy:**\n\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> deep = s.copy()\n    >>> shallow = s.copy(deep=False)\n\n    Shallow copy shares data and index with original.\n\n    >>> s is shallow\n    False\n    >>> s.values is shallow.values and s.index is shallow.index\n    True\n\n    Deep copy has own copy of data and index.\n\n    >>> s is deep\n    False\n    >>> s.values is deep.values or s.index is deep.index\n    False\n\n    Updates to the data shared by shallow copy and original is reflected\n    in both; deep copy remains unchanged.\n\n    >>> s[0] = 3\n    >>> shallow[1] = 4\n    >>> s\n    a    3\n    b    4\n    dtype: int64\n    >>> shallow\n    a    3\n    b    4\n    dtype: int64\n    >>> deep\n    a    1\n    b    2\n    dtype: int64\n\n    Note that when copying an object containing Python objects, a deep copy\n    will copy the data, but will not do so recursively. Updating a nested\n    data object will be reflected in the deep copy.\n\n    >>> s = pd.Series([[1, 2], [3, 4]])\n    >>> deep = s.copy()\n    >>> s[0][0] = 10\n    >>> s\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    >>> deep\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    \"\"\"\n    data = self._data.copy(deep=deep)\n    return self._constructor(data).__finalize__(self)",
                            "def __copy__(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries:\n    return self.copy(deep=deep)",
                            "def __deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries:\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                            "def _convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False, copy: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Attempt to infer better dtype for object columns\n\n    Parameters\n    ----------\n    datetime : bool, default False\n        If True, convert to date where possible.\n    numeric : bool, default False\n        If True, attempt to convert to numbers (including strings), with\n        unconvertible values becoming NaN.\n    timedelta : bool, default False\n        If True, convert to timedelta where possible.\n    coerce : bool, default False\n        If True, force conversion with unconvertible values converted to\n        nulls (NaN or NaT).\n    copy : bool, default True\n        If True, return a copy even if no copy is necessary (e.g. no\n        conversion was done). Note: This is meant for internal use, and\n        should not be confused with inplace.\n\n    Returns\n    -------\n    converted : same as input object\n    \"\"\"\n    validate_bool_kwarg(datetime, 'datetime')\n    validate_bool_kwarg(numeric, 'numeric')\n    validate_bool_kwarg(timedelta, 'timedelta')\n    validate_bool_kwarg(coerce, 'coerce')\n    validate_bool_kwarg(copy, 'copy')\n    return self._constructor(self._data.convert(datetime=datetime, numeric=numeric, timedelta=timedelta, coerce=coerce, copy=copy)).__finalize__(self)",
                            "def infer_objects(self):\n    \"\"\"\n    Attempt to infer better dtypes for object columns.\n\n    Attempts soft conversion of object-dtyped\n    columns, leaving non-object and unconvertible\n    columns unchanged. The inference rules are the\n    same as during normal Series/DataFrame construction.\n\n    .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    converted : same type as input object\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to numeric type.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n    >>> df = df.iloc[1:]\n    >>> df\n       A\n    1  1\n    2  2\n    3  3\n\n    >>> df.dtypes\n    A    object\n    dtype: object\n\n    >>> df.infer_objects().dtypes\n    A    int64\n    dtype: object\n    \"\"\"\n    return self._constructor(self._data.convert(datetime=True, numeric=False, timedelta=True, coerce=False, copy=True)).__finalize__(self)",
                            "def fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series, or DataFrame\n        Value to use to fill holes (e.g. 0), alternately a\n        dict/Series/DataFrame of values specifying which value to use for\n        each index (for a Series) or column (for a DataFrame).  Values not\n        in the dict/Series/DataFrame will not be filled. This value cannot\n        be a list.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use next valid observation to fill gap.\n    axis : %(axes_single_arg)s\n        Axis along which to fill missing values.\n    inplace : bool, default False\n        If True, fill in-place. Note: this will modify any\n        other views on this object (e.g., a no-copy slice for a column in a\n        DataFrame).\n    limit : int, default None\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled. Must be greater than 0 if not None.\n    downcast : dict, default is None\n        A dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n\n    See Also\n    --------\n    interpolate : Fill NaN values using interpolation.\n    reindex : Conform object to new index.\n    asfreq : Convert TimeSeries to specified frequency.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n    ...                    [3, 4, np.nan, 1],\n    ...                    [np.nan, np.nan, np.nan, 5],\n    ...                    [np.nan, 3, np.nan, 4]],\n    ...                   columns=list('ABCD'))\n    >>> df\n         A    B   C  D\n    0  NaN  2.0 NaN  0\n    1  3.0  4.0 NaN  1\n    2  NaN  NaN NaN  5\n    3  NaN  3.0 NaN  4\n\n    Replace all NaN elements with 0s.\n\n    >>> df.fillna(0)\n        A   B   C   D\n    0   0.0 2.0 0.0 0\n    1   3.0 4.0 0.0 1\n    2   0.0 0.0 0.0 5\n    3   0.0 3.0 0.0 4\n\n    We can also propagate non-null values forward or backward.\n\n    >>> df.fillna(method='ffill')\n        A   B   C   D\n    0   NaN 2.0 NaN 0\n    1   3.0 4.0 NaN 1\n    2   3.0 4.0 NaN 5\n    3   3.0 3.0 NaN 4\n\n    Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n    2, and 3 respectively.\n\n    >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n    >>> df.fillna(value=values)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 2.0 1\n    2   0.0 1.0 2.0 5\n    3   0.0 3.0 2.0 4\n\n    Only replace the first NaN element.\n\n    >>> df.fillna(value=values, limit=1)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 NaN 1\n    2   NaN 1.0 NaN 5\n    3   NaN 3.0 NaN 4\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    value, method = validate_fillna_kwargs(value, method)\n    self._consolidate_inplace()\n    if axis is None:\n        axis = 0\n    axis = self._get_axis_number(axis)\n    if value is None:\n        if self._is_mixed_type and axis == 1:\n            if inplace:\n                raise NotImplementedError()\n            result = self.T.fillna(method=method, limit=limit).T\n            result._data = result._data.downcast()\n            return result\n        new_data = self._data.interpolate(method=method, axis=axis, limit=limit, inplace=inplace, coerce=True, downcast=downcast)\n    else:\n        if len(self._get_axis(axis)) == 0:\n            return self\n        if self.ndim == 1:\n            if isinstance(value, (dict, ABCSeries)):\n                value = create_series_with_explicit_dtype(value, dtype_if_empty=object)\n            elif not is_list_like(value):\n                pass\n            else:\n                raise TypeError(f'\"value\" parameter must be a scalar, dict or Series, but you passed a \"{type(value).__name__}\"')\n            new_data = self._data.fillna(value=value, limit=limit, inplace=inplace, downcast=downcast)\n        elif isinstance(value, (dict, ABCSeries)):\n            if axis == 1:\n                raise NotImplementedError('Currently only can fill with dict/Series column by column')\n            result = self if inplace else self.copy()\n            for k, v in value.items():\n                if k not in result:\n                    continue\n                obj = result[k]\n                obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n            return result if not inplace else None\n        elif not is_list_like(value):\n            new_data = self._data.fillna(value=value, limit=limit, inplace=inplace, downcast=downcast)\n        elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n            new_data = self.where(self.notna(), value)\n        else:\n            raise ValueError(f'invalid fill value with a {type(value)}')\n    if inplace:\n        self._update_inplace(new_data)\n        return None\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "def ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(method='ffill', axis=axis, inplace=inplace, limit=limit, downcast=downcast)",
                            "def bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(method='bfill', axis=axis, inplace=inplace, limit=limit, downcast=downcast)",
                            "@Appender(_shared_docs['replace'] % _shared_doc_kwargs)\ndef replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad'):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_bool(regex) and to_replace is not None:\n        raise AssertionError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n    self._consolidate_inplace()\n    if value is None:\n        if not is_dict_like(to_replace) and (not is_dict_like(regex)):\n            to_replace = [to_replace]\n        if isinstance(to_replace, (tuple, list)):\n            if isinstance(self, ABCDataFrame):\n                return self.apply(_single_replace, args=(to_replace, method, inplace, limit))\n            return _single_replace(self, to_replace, method, inplace, limit)\n        if not is_dict_like(to_replace):\n            if not is_dict_like(regex):\n                raise TypeError('If \"to_replace\" and \"value\" are both None and \"to_replace\" is not a list, then regex must be a mapping')\n            to_replace = regex\n            regex = True\n        items = list(to_replace.items())\n        keys, values = zip(*items) if items else ([], [])\n        are_mappings = [is_dict_like(v) for v in values]\n        if any(are_mappings):\n            if not all(are_mappings):\n                raise TypeError('If a nested mapping is passed, all values of the top level mapping must be mappings')\n            to_rep_dict = {}\n            value_dict = {}\n            for k, v in items:\n                keys, values = list(zip(*v.items())) or ([], [])\n                to_rep_dict[k] = list(keys)\n                value_dict[k] = list(values)\n            to_replace, value = (to_rep_dict, value_dict)\n        else:\n            to_replace, value = (keys, values)\n        return self.replace(to_replace, value, inplace=inplace, limit=limit, regex=regex)\n    else:\n        if not self.size:\n            return self\n        new_data = self._data\n        if is_dict_like(to_replace):\n            if is_dict_like(value):\n                res = self if inplace else self.copy()\n                for c, src in to_replace.items():\n                    if c in value and c in self:\n                        res[c] = res[c].replace(to_replace=src, value=value[c], inplace=False, regex=regex)\n                return None if inplace else res\n            elif not is_list_like(value):\n                keys = [(k, src) for k, src in to_replace.items() if k in self]\n                keys_len = len(keys) - 1\n                for i, (k, src) in enumerate(keys):\n                    convert = i == keys_len\n                    new_data = new_data.replace(to_replace=src, value=value, filter=[k], inplace=inplace, regex=regex, convert=convert)\n            else:\n                raise TypeError('value argument must be scalar, dict, or Series')\n        elif is_list_like(to_replace):\n            if is_list_like(value):\n                if len(to_replace) != len(value):\n                    raise ValueError(f'Replacement lists must match in length. Expecting {len(to_replace)} got {len(value)} ')\n                new_data = self._data.replace_list(src_list=to_replace, dest_list=value, inplace=inplace, regex=regex)\n            else:\n                new_data = self._data.replace(to_replace=to_replace, value=value, inplace=inplace, regex=regex)\n        elif to_replace is None:\n            if not (is_re_compilable(regex) or is_list_like(regex) or is_dict_like(regex)):\n                raise TypeError(f\"'regex' must be a string or a compiled regular expression or a list or dict of strings or regular expressions, you passed a {repr(type(regex).__name__)}\")\n            return self.replace(regex, value, inplace=inplace, limit=limit, regex=True)\n        elif is_dict_like(value):\n            new_data = self._data\n            for k, v in value.items():\n                if k in self:\n                    new_data = new_data.replace(to_replace=to_replace, value=v, filter=[k], inplace=inplace, regex=regex)\n        elif not is_list_like(value):\n            new_data = self._data.replace(to_replace=to_replace, value=value, inplace=inplace, regex=regex)\n        else:\n            raise TypeError(f'Invalid \"to_replace\" type: {repr(type(to_replace).__name__)}')\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "@Appender(_shared_docs['interpolate'] % _shared_doc_kwargs)\ndef interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs):\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        ax = self._info_axis_name\n        _maybe_transposed_self = self\n    elif axis == 1:\n        _maybe_transposed_self = self.T\n        ax = 1\n    ax = _maybe_transposed_self._get_axis_number(ax)\n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n    if isinstance(_maybe_transposed_self.index, MultiIndex) and method != 'linear':\n        raise ValueError('Only `method=linear` interpolation is supported on MultiIndexes.')\n    if _maybe_transposed_self._data.get_dtype_counts().get('object') == len(_maybe_transposed_self.T):\n        raise TypeError('Cannot interpolate with all object-dtype columns in the DataFrame. Try setting at least one column to a numeric dtype.')\n    if method == 'linear':\n        index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n    else:\n        index = _maybe_transposed_self._get_axis(alt_ax)\n        methods = {'index', 'values', 'nearest', 'time'}\n        is_numeric_or_datetime = is_numeric_dtype(index) or is_datetime64_any_dtype(index) or is_timedelta64_dtype(index)\n        if method not in methods and (not is_numeric_or_datetime):\n            raise ValueError(f'Index column must be numeric or datetime type when using {method} method other than linear. Try setting a numeric or datetime index column before interpolating.')\n    if isna(index).any():\n        raise NotImplementedError('Interpolation with NaNs in the index has not been implemented. Try filling those NaNs before interpolating.')\n    data = _maybe_transposed_self._data\n    new_data = data.interpolate(method=method, axis=ax, index=index, values=_maybe_transposed_self, limit=limit, limit_direction=limit_direction, limit_area=limit_area, inplace=inplace, downcast=downcast, **kwargs)\n    if inplace:\n        if axis == 1:\n            new_data = self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis == 1:\n            res = res.T\n        return res",
                            "def asof(self, where, subset=None):\n    \"\"\"\n    Return the last row(s) without any NaNs before `where`.\n\n    The last row (for each element in `where`, if list) without any\n    NaN is taken.\n    In case of a :class:`~pandas.DataFrame`, the last row without NaN\n    considering only the subset of columns (if not `None`)\n\n    If there is no good value, NaN is returned for a Series or\n    a Series of NaN values for a DataFrame\n\n    Parameters\n    ----------\n    where : date or array-like of dates\n        Date(s) before which the last row(s) are returned.\n    subset : str or array-like of str, default `None`\n        For DataFrame, if not `None`, only use these columns to\n        check for NaNs.\n\n    Returns\n    -------\n    scalar, Series, or DataFrame\n\n        The return can be:\n\n        * scalar : when `self` is a Series and `where` is a scalar\n        * Series: when `self` is a Series and `where` is an array-like,\n          or when `self` is a DataFrame and `where` is a scalar\n        * DataFrame : when `self` is a DataFrame and `where` is an\n          array-like\n\n        Return scalar, Series, or DataFrame.\n\n    See Also\n    --------\n    merge_asof : Perform an asof merge. Similar to left join.\n\n    Notes\n    -----\n    Dates are assumed to be sorted. Raises if this is not the case.\n\n    Examples\n    --------\n    A Series and a scalar `where`.\n\n    >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n    >>> s\n    10    1.0\n    20    2.0\n    30    NaN\n    40    4.0\n    dtype: float64\n\n    >>> s.asof(20)\n    2.0\n\n    For a sequence `where`, a Series is returned. The first value is\n    NaN, because the first element of `where` is before the first\n    index value.\n\n    >>> s.asof([5, 20])\n    5     NaN\n    20    2.0\n    dtype: float64\n\n    Missing values are not considered. The following is ``2.0``, not\n    NaN, even though NaN is at the index location for ``30``.\n\n    >>> s.asof(30)\n    2.0\n\n    Take all columns into consideration\n\n    >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n    ...                    'b': [None, None, None, None, 500]},\n    ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n    ...                                           '2018-02-27 09:02:00',\n    ...                                           '2018-02-27 09:03:00',\n    ...                                           '2018-02-27 09:04:00',\n    ...                                           '2018-02-27 09:05:00']))\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']))\n                          a   b\n    2018-02-27 09:03:30 NaN NaN\n    2018-02-27 09:04:30 NaN NaN\n\n    Take a single column into consideration\n\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']),\n    ...         subset=['a'])\n                             a   b\n    2018-02-27 09:03:30   30.0 NaN\n    2018-02-27 09:04:30   40.0 NaN\n    \"\"\"\n    if isinstance(where, str):\n        where = Timestamp(where)\n    if not self.index.is_monotonic:\n        raise ValueError('asof requires a sorted index')\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if subset is not None:\n            raise ValueError('subset is not valid for Series')\n    else:\n        if subset is None:\n            subset = self.columns\n        if not is_list_like(subset):\n            subset = [subset]\n    is_list = is_list_like(where)\n    if not is_list:\n        start = self.index[0]\n        if isinstance(self.index, PeriodIndex):\n            where = Period(where, freq=self.index.freq).ordinal\n            start = start.ordinal\n        if where < start:\n            if not is_series:\n                from pandas import Series\n                return Series(index=self.columns, name=where, dtype=np.float64)\n            return np.nan\n        if is_series:\n            loc = self.index.searchsorted(where, side='right')\n            if loc > 0:\n                loc -= 1\n            values = self._values\n            while loc > 0 and isna(values[loc]):\n                loc -= 1\n            return values[loc]\n    if not isinstance(where, Index):\n        where = Index(where) if is_list else Index([where])\n    nulls = self.isna() if is_series else self[subset].isna().any(1)\n    if nulls.all():\n        if is_series:\n            return self._constructor(np.nan, index=where, name=self.name)\n        elif is_list:\n            from pandas import DataFrame\n            return DataFrame(np.nan, index=where, columns=self.columns)\n        else:\n            from pandas import Series\n            return Series(np.nan, index=self.columns, name=where[0])\n    locs = self.index.asof_locs(where, ~nulls.values)\n    missing = locs == -1\n    data = self.take(locs, is_copy=False)\n    data.index = where\n    data.loc[missing] = np.nan\n    return data if is_list else data.iloc[-1]",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isna(self):\n    return isna(self).__finalize__(self)",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isnull(self):\n    return isna(self).__finalize__(self)",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notna(self):\n    return notna(self).__finalize__(self)",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notnull(self):\n    return notna(self).__finalize__(self)",
                            "def _clip_with_scalar(self, lower, upper, inplace: bool_t=False):\n    if lower is not None and np.any(isna(lower)) or (upper is not None and np.any(isna(upper))):\n        raise ValueError('Cannot use an NA value as a clip threshold')\n    result = self\n    mask = isna(self.values)\n    with np.errstate(all='ignore'):\n        if upper is not None:\n            subset = self.to_numpy() <= upper\n            result = result.where(subset, upper, axis=None, inplace=False)\n        if lower is not None:\n            subset = self.to_numpy() >= lower\n            result = result.where(subset, lower, axis=None, inplace=False)\n    if np.any(mask):\n        result[mask] = np.nan\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                            "def _clip_with_one_bound(self, threshold, method, axis, inplace):\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if is_scalar(threshold) and is_number(threshold):\n        if method.__name__ == 'le':\n            return self._clip_with_scalar(None, threshold, inplace=inplace)\n        return self._clip_with_scalar(threshold, None, inplace=inplace)\n    subset = method(threshold, axis=axis) | isna(self)\n    if not isinstance(threshold, ABCSeries) and is_list_like(threshold):\n        if isinstance(self, ABCSeries):\n            threshold = self._constructor(threshold, index=self.index)\n        else:\n            threshold = _align_method_FRAME(self, threshold, axis)\n    return self.where(subset, threshold, axis=axis, inplace=inplace)",
                            "def clip(self, lower=None, upper=None, axis=None, inplace: bool_t=False, *args, **kwargs):\n    \"\"\"\n    Trim values at input threshold(s).\n\n    Assigns values outside boundary to boundary values. Thresholds\n    can be singular values or array like, and in the latter case\n    the clipping is performed element-wise in the specified axis.\n\n    Parameters\n    ----------\n    lower : float or array_like, default None\n        Minimum threshold value. All values below this\n        threshold will be set to it.\n    upper : float or array_like, default None\n        Maximum threshold value. All values above this\n        threshold will be set to it.\n    axis : int or str axis name, optional\n        Align object with lower and upper along the given axis.\n    inplace : bool, default False\n        Whether to perform the operation in place on the data.\n\n        .. versionadded:: 0.21.0\n    *args, **kwargs\n        Additional keywords have no effect but might be accepted\n        for compatibility with numpy.\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as calling object with the values outside the\n        clip boundaries replaced.\n\n    Examples\n    --------\n    >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n    >>> df = pd.DataFrame(data)\n    >>> df\n       col_0  col_1\n    0      9     -2\n    1     -3     -7\n    2      0      6\n    3     -1      8\n    4      5     -5\n\n    Clips per column using lower and upper thresholds:\n\n    >>> df.clip(-4, 6)\n       col_0  col_1\n    0      6     -2\n    1     -3     -4\n    2      0      6\n    3     -1      6\n    4      5     -4\n\n    Clips using specific lower and upper thresholds per column element:\n\n    >>> t = pd.Series([2, -4, -1, 6, 3])\n    >>> t\n    0    2\n    1   -4\n    2   -1\n    3    6\n    4    3\n    dtype: int64\n\n    >>> df.clip(t, t + 4, axis=0)\n       col_0  col_1\n    0      6      2\n    1     -3     -4\n    2      0      3\n    3      6      8\n    4      5      3\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = nv.validate_clip_with_axis(axis, args, kwargs)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if not is_list_like(lower) and np.any(isna(lower)):\n        lower = None\n    if not is_list_like(upper) and np.any(isna(upper)):\n        upper = None\n    if lower is not None and upper is not None:\n        if is_scalar(lower) and is_scalar(upper):\n            lower, upper = (min(lower, upper), max(lower, upper))\n    if (lower is None or (is_scalar(lower) and is_number(lower))) and (upper is None or (is_scalar(upper) and is_number(upper))):\n        return self._clip_with_scalar(lower, upper, inplace=inplace)\n    result = self\n    if lower is not None:\n        result = result._clip_with_one_bound(lower, method=self.ge, axis=axis, inplace=inplace)\n    if upper is not None:\n        if inplace:\n            result = self\n        result = result._clip_with_one_bound(upper, method=self.le, axis=axis, inplace=inplace)\n    return result",
                            "def groupby(self, by=None, axis=0, level=None, as_index: bool_t=True, sort: bool_t=True, group_keys: bool_t=True, squeeze: bool_t=False, observed: bool_t=False):\n    \"\"\"\n    Group DataFrame or Series using a mapper or by a Series of columns.\n\n    A groupby operation involves some combination of splitting the\n    object, applying a function, and combining the results. This can be\n    used to group large amounts of data and compute operations on these\n    groups.\n\n    Parameters\n    ----------\n    by : mapping, function, label, or list of labels\n        Used to determine the groups for the groupby.\n        If ``by`` is a function, it's called on each value of the object's\n        index. If a dict or Series is passed, the Series or dict VALUES\n        will be used to determine the groups (the Series' values are first\n        aligned; see ``.align()`` method). If an ndarray is passed, the\n        values are used as-is determine the groups. A label or list of\n        labels may be passed to group by the columns in ``self``. Notice\n        that a tuple is interpreted as a (single) key.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Split along rows (0) or columns (1).\n    level : int, level name, or sequence of such, default None\n        If the axis is a MultiIndex (hierarchical), group by a particular\n        level or levels.\n    as_index : bool, default True\n        For aggregated output, return object with group labels as the\n        index. Only relevant for DataFrame input. as_index=False is\n        effectively \"SQL-style\" grouped output.\n    sort : bool, default True\n        Sort group keys. Get better performance by turning this off.\n        Note this does not influence the order of observations within each\n        group. Groupby preserves the order of rows within each group.\n    group_keys : bool, default True\n        When calling apply, add group keys to index to identify pieces.\n    squeeze : bool, default False\n        Reduce the dimensionality of the return type if possible,\n        otherwise return a consistent type.\n    observed : bool, default False\n        This only applies if any of the groupers are Categoricals.\n        If True: only show observed values for categorical groupers.\n        If False: show all values for categorical groupers.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrameGroupBy or SeriesGroupBy\n        Depends on the calling object and returns groupby object that\n        contains information about the groups.\n\n    See Also\n    --------\n    resample : Convenience method for frequency conversion and resampling\n        of time series.\n\n    Notes\n    -----\n    See the `user guide\n    <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n    ...                               'Parrot', 'Parrot'],\n    ...                    'Max Speed': [380., 370., 24., 26.]})\n    >>> df\n       Animal  Max Speed\n    0  Falcon      380.0\n    1  Falcon      370.0\n    2  Parrot       24.0\n    3  Parrot       26.0\n    >>> df.groupby(['Animal']).mean()\n            Max Speed\n    Animal\n    Falcon      375.0\n    Parrot       25.0\n\n    **Hierarchical Indexes**\n\n    We can groupby different levels of a hierarchical index\n    using the `level` parameter:\n\n    >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n    ...           ['Captive', 'Wild', 'Captive', 'Wild']]\n    >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n    >>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n    ...                   index=index)\n    >>> df\n                    Max Speed\n    Animal Type\n    Falcon Captive      390.0\n           Wild         350.0\n    Parrot Captive       30.0\n           Wild          20.0\n    >>> df.groupby(level=0).mean()\n            Max Speed\n    Animal\n    Falcon      370.0\n    Parrot       25.0\n    >>> df.groupby(level=1).mean()\n             Max Speed\n    Type\n    Captive      210.0\n    Wild         185.0\n    \"\"\"\n    from pandas.core.groupby.groupby import get_groupby\n    if level is None and by is None:\n        raise TypeError(\"You have to supply one of 'by' and 'level'\")\n    axis = self._get_axis_number(axis)\n    return get_groupby(self, by=by, axis=axis, level=level, as_index=as_index, sort=sort, group_keys=group_keys, squeeze=squeeze, observed=observed)",
                            "def asfreq(self, freq, method=None, how: Optional[str]=None, normalize: bool_t=False, fill_value=None):\n    \"\"\"\n    Convert TimeSeries to specified frequency.\n\n    Optionally provide filling method to pad/backfill missing values.\n\n    Returns the original data conformed to a new index with the specified\n    frequency. ``resample`` is more appropriate if an operation, such as\n    summarization, is necessary to represent the data at the new frequency.\n\n    Parameters\n    ----------\n    freq : DateOffset or str\n    method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n        Method to use for filling holes in reindexed Series (note this\n        does not fill NaNs that already were present):\n\n        * 'pad' / 'ffill': propagate last valid observation forward to next\n          valid\n        * 'backfill' / 'bfill': use NEXT valid observation to fill.\n    how : {'start', 'end'}, default end\n        For PeriodIndex only (see PeriodIndex.asfreq).\n    normalize : bool, default False\n        Whether to reset output index to midnight.\n    fill_value : scalar, optional\n        Value to use for missing values, applied during upsampling (note\n        this does not fill NaNs that already were present).\n\n    Returns\n    -------\n    converted : same type as caller\n\n    See Also\n    --------\n    reindex\n\n    Notes\n    -----\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 4 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n    >>> df = pd.DataFrame({'s':series})\n    >>> df\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample the series into 30 second bins.\n\n    >>> df.asfreq(freq='30S')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    NaN\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``fill value``.\n\n    >>> df.asfreq(freq='30S', fill_value=9.0)\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    9.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    9.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    9.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``method``.\n\n    >>> df.asfreq(freq='30S', method='bfill')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    2.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    3.0\n    2000-01-01 00:03:00    3.0\n    \"\"\"\n    from pandas.core.resample import asfreq\n    return asfreq(self, freq, method=method, how=how, normalize=normalize, fill_value=fill_value)",
                            "def at_time(self, time, asof: bool_t=False, axis=None):\n    \"\"\"\n    Select values at particular time of day (e.g. 9:30AM).\n\n    Parameters\n    ----------\n    time : datetime.time or str\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    between_time : Select values between particular times of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_at_time : Get just the index locations for\n        values at particular time of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-09 12:00:00  2\n    2018-04-10 00:00:00  3\n    2018-04-10 12:00:00  4\n\n    >>> ts.at_time('12:00')\n                         A\n    2018-04-09 12:00:00  2\n    2018-04-10 12:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_at_time(time, asof=asof)\n    except AttributeError:\n        raise TypeError('Index must be DatetimeIndex')\n    return self.take(indexer, axis=axis)",
                            "def between_time(self, start_time, end_time, include_start: bool_t=True, include_end: bool_t=True, axis=None):\n    \"\"\"\n    Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n    By setting ``start_time`` to be later than ``end_time``,\n    you can get the times that are *not* between the two times.\n\n    Parameters\n    ----------\n    start_time : datetime.time or str\n    end_time : datetime.time or str\n    include_start : bool, default True\n    include_end : bool, default True\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    at_time : Select values at a particular time of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_between_time : Get just the index locations for\n        values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n    2018-04-12 01:00:00  4\n\n    >>> ts.between_time('0:15', '0:45')\n                         A\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n\n    You get the times that are *not* between two times by setting\n    ``start_time`` later than ``end_time``:\n\n    >>> ts.between_time('0:45', '0:15')\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-12 01:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_between_time(start_time, end_time, include_start=include_start, include_end=include_end)\n    except AttributeError:\n        raise TypeError('Index must be DatetimeIndex')\n    return self.take(indexer, axis=axis)",
                            "def resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: int=0, on=None, level=None):\n    \"\"\"\n    Resample time-series data.\n\n    Convenience method for frequency conversion and resampling of time\n    series. Object must have a datetime-like index (`DatetimeIndex`,\n    `PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\n    to the `on` or `level` keyword.\n\n    Parameters\n    ----------\n    rule : DateOffset, Timedelta or str\n        The offset string or object representing target conversion.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Which axis to use for up- or down-sampling. For `Series` this\n        will default to 0, i.e. along the rows. Must be\n        `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    label : {'right', 'left'}, default None\n        Which bin edge label to label bucket with. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    convention : {'start', 'end', 's', 'e'}, default 'start'\n        For `PeriodIndex` only, controls whether to use the start or\n        end of `rule`.\n    kind : {'timestamp', 'period'}, optional, default None\n        Pass 'timestamp' to convert the resulting index to a\n        `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n        By default the input representation is retained.\n    loffset : timedelta, default None\n        Adjust the resampled time labels.\n    base : int, default 0\n        For frequencies that evenly subdivide 1 day, the \"origin\" of the\n        aggregated intervals. For example, for '5min' frequency, base could\n        range from 0 through 4. Defaults to 0.\n    on : str, optional\n        For a DataFrame, column to use instead of index for resampling.\n        Column must be datetime-like.\n\n    level : str or int, optional\n        For a MultiIndex, level (name or number) to use for\n        resampling. `level` must be datetime-like.\n\n    Returns\n    -------\n    Resampler object\n\n    See Also\n    --------\n    groupby : Group by mapping, function, label, or list of labels.\n    Series.resample : Resample a Series.\n    DataFrame.resample: Resample a DataFrame.\n\n    Notes\n    -----\n    See the `user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\n    for more.\n\n    To learn more about the offset strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 9 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n    >>> series = pd.Series(range(9), index=index)\n    >>> series\n    2000-01-01 00:00:00    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:02:00    2\n    2000-01-01 00:03:00    3\n    2000-01-01 00:04:00    4\n    2000-01-01 00:05:00    5\n    2000-01-01 00:06:00    6\n    2000-01-01 00:07:00    7\n    2000-01-01 00:08:00    8\n    Freq: T, dtype: int64\n\n    Downsample the series into 3 minute bins and sum the values\n    of the timestamps falling into a bin.\n\n    >>> series.resample('3T').sum()\n    2000-01-01 00:00:00     3\n    2000-01-01 00:03:00    12\n    2000-01-01 00:06:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but label each\n    bin using the right edge instead of the left. Please note that the\n    value in the bucket used as the label is not included in the bucket,\n    which it labels. For example, in the original series the\n    bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n    value in the resampled bucket with the label ``2000-01-01 00:03:00``\n    does not include 3 (if it did, the summed value would be 6, not 3).\n    To include this value close the right side of the bin interval as\n    illustrated in the example below this one.\n\n    >>> series.resample('3T', label='right').sum()\n    2000-01-01 00:03:00     3\n    2000-01-01 00:06:00    12\n    2000-01-01 00:09:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> series.resample('3T', label='right', closed='right').sum()\n    2000-01-01 00:00:00     0\n    2000-01-01 00:03:00     6\n    2000-01-01 00:06:00    15\n    2000-01-01 00:09:00    15\n    Freq: 3T, dtype: int64\n\n    Upsample the series into 30 second bins.\n\n    >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n    2000-01-01 00:00:00   0.0\n    2000-01-01 00:00:30   NaN\n    2000-01-01 00:01:00   1.0\n    2000-01-01 00:01:30   NaN\n    2000-01-01 00:02:00   2.0\n    Freq: 30S, dtype: float64\n\n    Upsample the series into 30 second bins and fill the ``NaN``\n    values using the ``pad`` method.\n\n    >>> series.resample('30S').pad()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    1\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Upsample the series into 30 second bins and fill the\n    ``NaN`` values using the ``bfill`` method.\n\n    >>> series.resample('30S').bfill()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    1\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    2\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Pass a custom function via ``apply``\n\n    >>> def custom_resampler(array_like):\n    ...     return np.sum(array_like) + 5\n    ...\n    >>> series.resample('3T').apply(custom_resampler)\n    2000-01-01 00:00:00     8\n    2000-01-01 00:03:00    17\n    2000-01-01 00:06:00    26\n    Freq: 3T, dtype: int64\n\n    For a Series with a PeriodIndex, the keyword `convention` can be\n    used to control whether to use the start or end of `rule`.\n\n    Resample a year by quarter using 'start' `convention`. Values are\n    assigned to the first quarter of the period.\n\n    >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n    ...                                             freq='A',\n    ...                                             periods=2))\n    >>> s\n    2012    1\n    2013    2\n    Freq: A-DEC, dtype: int64\n    >>> s.resample('Q', convention='start').asfreq()\n    2012Q1    1.0\n    2012Q2    NaN\n    2012Q3    NaN\n    2012Q4    NaN\n    2013Q1    2.0\n    2013Q2    NaN\n    2013Q3    NaN\n    2013Q4    NaN\n    Freq: Q-DEC, dtype: float64\n\n    Resample quarters by month using 'end' `convention`. Values are\n    assigned to the last month of the period.\n\n    >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n    ...                                                   freq='Q',\n    ...                                                   periods=4))\n    >>> q\n    2018Q1    1\n    2018Q2    2\n    2018Q3    3\n    2018Q4    4\n    Freq: Q-DEC, dtype: int64\n    >>> q.resample('M', convention='end').asfreq()\n    2018-03    1.0\n    2018-04    NaN\n    2018-05    NaN\n    2018-06    2.0\n    2018-07    NaN\n    2018-08    NaN\n    2018-09    3.0\n    2018-10    NaN\n    2018-11    NaN\n    2018-12    4.0\n    Freq: M, dtype: float64\n\n    For DataFrame objects, the keyword `on` can be used to specify the\n    column instead of the index for resampling.\n\n    >>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df = pd.DataFrame(d)\n    >>> df['week_starting'] = pd.date_range('01/01/2018',\n    ...                                     periods=8,\n    ...                                     freq='W')\n    >>> df\n       price  volume week_starting\n    0     10      50    2018-01-07\n    1     11      60    2018-01-14\n    2      9      40    2018-01-21\n    3     13     100    2018-01-28\n    4     14      50    2018-02-04\n    5     18     100    2018-02-11\n    6     17      40    2018-02-18\n    7     19      50    2018-02-25\n    >>> df.resample('M', on='week_starting').mean()\n                   price  volume\n    week_starting\n    2018-01-31     10.75    62.5\n    2018-02-28     17.00    60.0\n\n    For a DataFrame with MultiIndex, the keyword `level` can be used to\n    specify on which level the resampling needs to take place.\n\n    >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n    >>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df2 = pd.DataFrame(d2,\n    ...                    index=pd.MultiIndex.from_product([days,\n    ...                                                     ['morning',\n    ...                                                      'afternoon']]\n    ...                                                     ))\n    >>> df2\n                          price  volume\n    2000-01-01 morning       10      50\n               afternoon     11      60\n    2000-01-02 morning        9      40\n               afternoon     13     100\n    2000-01-03 morning       14      50\n               afternoon     18     100\n    2000-01-04 morning       17      40\n               afternoon     19      50\n    >>> df2.resample('D', level=0).sum()\n                price  volume\n    2000-01-01     21     110\n    2000-01-02     22     140\n    2000-01-03     32     150\n    2000-01-04     36      90\n    \"\"\"\n    from pandas.core.resample import resample\n    axis = self._get_axis_number(axis)\n    return resample(self, freq=rule, label=label, closed=closed, axis=axis, kind=kind, loffset=loffset, convention=convention, base=base, key=on, level=level)",
                            "def first(self, offset):\n    \"\"\"\n    Method to subset initial periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    last : Select final periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the first 3 days:\n\n    >>> ts.first('3D')\n                A\n    2018-04-09  1\n    2018-04-11  2\n\n    Notice the data for 3 first calender days were returned, not the first\n    3 days observed in the dataset, and therefore data for 2018-04-13 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'first' only supports a DatetimeIndex index\")\n    if len(self.index) == 0:\n        return self\n    offset = to_offset(offset)\n    end_date = end = self.index[0] + offset\n    if not offset.isAnchored() and hasattr(offset, '_inc'):\n        if end_date in self.index:\n            end = self.index.searchsorted(end_date, side='left')\n            return self.iloc[:end]\n    return self.loc[:end]",
                            "def last(self, offset):\n    \"\"\"\n    Method to subset final periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    first : Select initial periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the last 3 days:\n\n    >>> ts.last('3D')\n                A\n    2018-04-13  3\n    2018-04-15  4\n\n    Notice the data for 3 last calender days were returned, not the last\n    3 observed days in the dataset, and therefore data for 2018-04-11 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'last' only supports a DatetimeIndex index\")\n    if len(self.index) == 0:\n        return self\n    offset = to_offset(offset)\n    start_date = self.index[-1] - offset\n    start = self.index.searchsorted(start_date, side='right')\n    return self.iloc[start:]",
                            "def rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False) -> FrameOrSeries:\n    \"\"\"\n    Compute numerical data ranks (1 through n) along axis.\n\n    By default, equal values are assigned a rank that is the average of the\n    ranks of those values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Index to direct ranking.\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        How to rank the group of records that have the same value (i.e. ties):\n\n        * average: average rank of the group\n        * min: lowest rank in the group\n        * max: highest rank in the group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups.\n\n    numeric_only : bool, optional\n        For DataFrame objects, rank only numeric columns if set to True.\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        How to rank NaN values:\n\n        * keep: assign NaN rank to NaN values\n        * top: assign smallest rank to NaN values if ascending\n        * bottom: assign highest rank to NaN values if ascending.\n\n    ascending : bool, default True\n        Whether or not the elements should be ranked in ascending order.\n    pct : bool, default False\n        Whether or not to display the returned rankings in percentile\n        form.\n\n    Returns\n    -------\n    same type as caller\n        Return a Series or DataFrame with data ranks as values.\n\n    See Also\n    --------\n    core.groupby.GroupBy.rank : Rank of values within each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n    ...                                    'spider', 'snake'],\n    ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n    >>> df\n        Animal  Number_legs\n    0      cat          4.0\n    1  penguin          2.0\n    2      dog          4.0\n    3   spider          8.0\n    4    snake          NaN\n\n    The following example shows how the method behaves with the above\n    parameters:\n\n    * default_rank: this is the default behaviour obtained without using\n      any parameter.\n    * max_rank: setting ``method = 'max'`` the records that have the\n      same values are ranked using the highest rank (e.g.: since 'cat'\n      and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n    * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n      with NaN values they are placed at the bottom of the ranking.\n    * pct_rank: when setting ``pct = True``, the ranking is expressed as\n      percentile rank.\n\n    >>> df['default_rank'] = df['Number_legs'].rank()\n    >>> df['max_rank'] = df['Number_legs'].rank(method='max')\n    >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n    >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n    >>> df\n        Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n    0      cat          4.0           2.5       3.0        2.5     0.625\n    1  penguin          2.0           1.0       1.0        1.0     0.250\n    2      dog          4.0           2.5       3.0        2.5     0.625\n    3   spider          8.0           4.0       4.0        4.0     1.000\n    4    snake          NaN           NaN       NaN        5.0       NaN\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if na_option not in {'keep', 'top', 'bottom'}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n\n    def ranker(data):\n        ranks = algos.rank(data.values, axis=axis, method=method, ascending=ascending, na_option=na_option, pct=pct)\n        ranks = self._constructor(ranks, **data._construct_axes_dict())\n        return ranks.__finalize__(self)\n    if numeric_only is None:\n        try:\n            return ranker(self)\n        except TypeError:\n            numeric_only = True\n    if numeric_only:\n        data = self._get_numeric_data()\n    else:\n        data = self\n    return ranker(data)",
                            "@Appender(_shared_docs['align'] % _shared_doc_kwargs)\ndef align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None):\n    method = missing.clean_fill_method(method)\n    if broadcast_axis == 1 and self.ndim != other.ndim:\n        if isinstance(self, ABCSeries):\n            cons = self._constructor_expanddim\n            df = cons({c: self for c in other.columns}, **other._construct_axes_dict())\n            return df._align_frame(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n        elif isinstance(other, ABCSeries):\n            cons = other._constructor_expanddim\n            df = cons({c: other for c in self.columns}, **self._construct_axes_dict())\n            return self._align_frame(df, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if isinstance(other, ABCDataFrame):\n        return self._align_frame(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n    elif isinstance(other, ABCSeries):\n        return self._align_series(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n    else:\n        raise TypeError(f'unsupported type: {type(other)}')",
                            "def _align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0):\n    join_index, join_columns = (None, None)\n    ilidx, iridx = (None, None)\n    clidx, cridx = (None, None)\n    is_series = isinstance(self, ABCSeries)\n    if axis is None or axis == 0:\n        if not self.index.equals(other.index):\n            join_index, ilidx, iridx = self.index.join(other.index, how=join, level=level, return_indexers=True)\n    if axis is None or axis == 1:\n        if not is_series and (not self.columns.equals(other.columns)):\n            join_columns, clidx, cridx = self.columns.join(other.columns, how=join, level=level, return_indexers=True)\n    if is_series:\n        reindexers = {0: [join_index, ilidx]}\n    else:\n        reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n    left = self._reindex_with_indexers(reindexers, copy=copy, fill_value=fill_value, allow_dups=True)\n    right = other._reindex_with_indexers({0: [join_index, iridx], 1: [join_columns, cridx]}, copy=copy, fill_value=fill_value, allow_dups=True)\n    if method is not None:\n        left = left.fillna(axis=fill_axis, method=method, limit=limit)\n        right = right.fillna(axis=fill_axis, method=method, limit=limit)\n    if is_datetime64tz_dtype(left.index):\n        if left.index.tz != right.index.tz:\n            if join_index is not None:\n                left.index = join_index\n                right.index = join_index\n    return (left.__finalize__(self), right.__finalize__(other))",
                            "def _align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0):\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if axis:\n            raise ValueError('cannot align series to a series other than axis 0')\n        if self.index.equals(other.index):\n            join_index, lidx, ridx = (None, None, None)\n        else:\n            join_index, lidx, ridx = self.index.join(other.index, how=join, level=level, return_indexers=True)\n        left = self._reindex_indexer(join_index, lidx, copy)\n        right = other._reindex_indexer(join_index, ridx, copy)\n    else:\n        fdata = self._data\n        if axis == 0:\n            join_index = self.index\n            lidx, ridx = (None, None)\n            if not self.index.equals(other.index):\n                join_index, lidx, ridx = self.index.join(other.index, how=join, level=level, return_indexers=True)\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n        elif axis == 1:\n            join_index = self.columns\n            lidx, ridx = (None, None)\n            if not self.columns.equals(other.index):\n                join_index, lidx, ridx = self.columns.join(other.index, how=join, level=level, return_indexers=True)\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n        else:\n            raise ValueError('Must specify axis=0 or 1')\n        if copy and fdata is self._data:\n            fdata = fdata.copy()\n        left = self._constructor(fdata)\n        if ridx is None:\n            right = other\n        else:\n            right = other.reindex(join_index, level=level)\n    fill_na = notna(fill_value) or method is not None\n    if fill_na:\n        left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n        right = right.fillna(fill_value, method=method, limit=limit)\n    if is_series or (not is_series and axis == 0):\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n    return (left.__finalize__(self), right.__finalize__(other))",
                            "def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False):\n    \"\"\"\n    Equivalent to public method `where`, except that `other` is not\n    applied as a function even if callable. Used in __setitem__.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cond = com.apply_if_callable(cond, self)\n    if isinstance(cond, NDFrame):\n        cond, _ = cond.align(self, join='right', broadcast_axis=1)\n    else:\n        if not hasattr(cond, 'shape'):\n            cond = np.asanyarray(cond)\n        if cond.shape != self.shape:\n            raise ValueError('Array conditional must be same shape as self')\n        cond = self._constructor(cond, **self._construct_axes_dict())\n    fill_value = bool(inplace)\n    cond = cond.fillna(fill_value)\n    msg = 'Boolean array expected for the condition, not {dtype}'\n    if not isinstance(cond, ABCDataFrame):\n        if not is_bool_dtype(cond):\n            raise ValueError(msg.format(dtype=cond.dtype))\n    elif not cond.empty:\n        for dt in cond.dtypes:\n            if not is_bool_dtype(dt):\n                raise ValueError(msg.format(dtype=dt))\n    cond = -cond if inplace else cond\n    try_quick = True\n    if hasattr(other, 'align'):\n        if other.ndim <= self.ndim:\n            _, other = self.align(other, join='left', axis=axis, level=level, fill_value=np.nan)\n            if axis is None and (not all((other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)))):\n                raise InvalidIndexError\n        else:\n            raise NotImplementedError('cannot align with a higher dimensional NDFrame')\n    if isinstance(other, np.ndarray):\n        if other.shape != self.shape:\n            if self.ndim == 1:\n                icond = cond.values\n                if len(other) == 1:\n                    other = np.array(other[0])\n                elif len(cond[icond]) == len(other):\n                    if try_quick:\n                        new_other = com.values_from_object(self)\n                        new_other = new_other.copy()\n                        new_other[icond] = other\n                        other = new_other\n                else:\n                    raise ValueError('Length of replacements must equal series length')\n            else:\n                raise ValueError('other must be the same shape as self when an ndarray')\n        else:\n            other = self._constructor(other, **self._construct_axes_dict())\n    if axis is None:\n        axis = 0\n    if self.ndim == getattr(other, 'ndim', 0):\n        align = True\n    else:\n        align = self._get_axis_number(axis) == 1\n    block_axis = self._get_block_manager_axis(axis)\n    if inplace:\n        self._check_inplace_setting(other)\n        new_data = self._data.putmask(mask=cond, new=other, align=align, inplace=True, axis=block_axis, transpose=self._AXIS_REVERSED)\n        self._update_inplace(new_data)\n    else:\n        new_data = self._data.where(other=other, cond=cond, align=align, errors=errors, try_cast=try_cast, axis=block_axis)\n        return self._constructor(new_data).__finalize__(self)",
                            "@Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond='True', cond_rev='False', name='where', name_other='mask'))\ndef where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False):\n    other = com.apply_if_callable(other, self)\n    return self._where(cond, other, inplace, axis, level, errors=errors, try_cast=try_cast)",
                            "@Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond='False', cond_rev='True', name='mask', name_other='where'))\ndef mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cond = com.apply_if_callable(cond, self)\n    if not hasattr(cond, '__invert__'):\n        cond = np.array(cond)\n    return self.where(~cond, other=other, inplace=inplace, axis=axis, level=level, try_cast=try_cast, errors=errors)",
                            "@Appender(_shared_docs['shift'] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    if periods == 0:\n        return self.copy()\n    block_axis = self._get_block_manager_axis(axis)\n    if freq is None:\n        new_data = self._data.shift(periods=periods, axis=block_axis, fill_value=fill_value)\n    else:\n        return self.tshift(periods, freq)\n    return self._constructor(new_data).__finalize__(self)",
                            "def slice_shift(self: FrameOrSeries, periods: int=1, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Equivalent to `shift` without copying data.\n\n    The shifted data will not include the dropped periods and the\n    shifted axis will be smaller than the original.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n\n    Returns\n    -------\n    shifted : same type as caller\n\n    Notes\n    -----\n    While the `slice_shift` is faster than `shift`, you may pay for it\n    later during alignment.\n    \"\"\"\n    if periods == 0:\n        return self\n    if periods > 0:\n        vslicer = slice(None, -periods)\n        islicer = slice(periods, None)\n    else:\n        vslicer = slice(-periods, None)\n        islicer = slice(None, periods)\n    new_obj = self._slice(vslicer, axis=axis)\n    shifted_axis = self._get_axis(axis)[islicer]\n    new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n    return new_obj.__finalize__(self)",
                            "def tshift(self, periods: int=1, freq=None, axis=0):\n    \"\"\"\n    Shift the time index, using the index's frequency if available.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n    freq : DateOffset, timedelta, or str, default None\n        Increment to use from the tseries module\n        or time rule expressed as a string (e.g. 'EOM').\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default 0\n        Corresponds to the axis that contains the Index.\n\n    Returns\n    -------\n    shifted : Series/DataFrame\n\n    Notes\n    -----\n    If freq is not specified then tries to use the freq or inferred_freq\n    attributes of the index. If neither of those attributes exist, a\n    ValueError is thrown\n    \"\"\"\n    index = self._get_axis(axis)\n    if freq is None:\n        freq = getattr(index, 'freq', None)\n    if freq is None:\n        freq = getattr(index, 'inferred_freq', None)\n    if freq is None:\n        msg = 'Freq was not given and was not set in the index'\n        raise ValueError(msg)\n    if periods == 0:\n        return self\n    if isinstance(freq, str):\n        freq = to_offset(freq)\n    block_axis = self._get_block_manager_axis(axis)\n    if isinstance(index, PeriodIndex):\n        orig_freq = to_offset(index.freq)\n        if freq == orig_freq:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods)\n        elif orig_freq is not None:\n            msg = f'Given freq {freq.rule_code} does not match PeriodIndex freq {orig_freq.rule_code}'\n            raise ValueError(msg)\n    else:\n        new_data = self._data.copy()\n        new_data.axes[block_axis] = index.shift(periods, freq)\n    return self._constructor(new_data).__finalize__(self)",
                            "def truncate(self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Truncate a Series or DataFrame before and after some index value.\n\n    This is a useful shorthand for boolean indexing based on index\n    values above or below certain thresholds.\n\n    Parameters\n    ----------\n    before : date, str, int\n        Truncate all rows before this index value.\n    after : date, str, int\n        Truncate all rows after this index value.\n    axis : {0 or 'index', 1 or 'columns'}, optional\n        Axis to truncate. Truncates the index (rows) by default.\n    copy : bool, default is True,\n        Return a copy of the truncated section.\n\n    Returns\n    -------\n    type of caller\n        The truncated Series or DataFrame.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by label.\n    DataFrame.iloc : Select a subset of a DataFrame by position.\n\n    Notes\n    -----\n    If the index being truncated contains only datetime values,\n    `before` and `after` may be specified as strings instead of\n    Timestamps.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n    ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n    ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n    ...                   index=[1, 2, 3, 4, 5])\n    >>> df\n       A  B  C\n    1  a  f  k\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n    5  e  j  o\n\n    >>> df.truncate(before=2, after=4)\n       A  B  C\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n\n    The columns of a DataFrame can be truncated.\n\n    >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n       A  B\n    1  a  f\n    2  b  g\n    3  c  h\n    4  d  i\n    5  e  j\n\n    For Series, only rows can be truncated.\n\n    >>> df['A'].truncate(before=2, after=4)\n    2    b\n    3    c\n    4    d\n    Name: A, dtype: object\n\n    The index values in ``truncate`` can be datetimes or string\n    dates.\n\n    >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n    >>> df = pd.DataFrame(index=dates, data={'A': 1})\n    >>> df.tail()\n                         A\n    2016-01-31 23:59:56  1\n    2016-01-31 23:59:57  1\n    2016-01-31 23:59:58  1\n    2016-01-31 23:59:59  1\n    2016-02-01 00:00:00  1\n\n    >>> df.truncate(before=pd.Timestamp('2016-01-05'),\n    ...             after=pd.Timestamp('2016-01-10')).tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Because the index is a DatetimeIndex containing only dates, we can\n    specify `before` and `after` as strings. They will be coerced to\n    Timestamps before truncation.\n\n    >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Note that ``truncate`` assumes a 0 value for any unspecified time\n    component (midnight). This differs from partial string slicing, which\n    returns any partially matching dates.\n\n    >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                         A\n    2016-01-10 23:59:55  1\n    2016-01-10 23:59:56  1\n    2016-01-10 23:59:57  1\n    2016-01-10 23:59:58  1\n    2016-01-10 23:59:59  1\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n    if not ax.is_monotonic_increasing and (not ax.is_monotonic_decreasing):\n        raise ValueError('truncate requires a sorted index')\n    if ax.is_all_dates:\n        from pandas.core.tools.datetimes import to_datetime\n        before = to_datetime(before)\n        after = to_datetime(after)\n    if before is not None and after is not None:\n        if before > after:\n            raise ValueError(f'Truncate: {after} must be after {before}')\n    slicer = [slice(None, None)] * self._AXIS_LEN\n    slicer[axis] = slice(before, after)\n    result = self.loc[tuple(slicer)]\n    if isinstance(ax, MultiIndex):\n        setattr(result, self._get_axis_name(axis), ax.truncate(before, after))\n    if copy:\n        result = result.copy()\n    return result",
                            "def tz_convert(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Convert tz-aware axis to target time zone.\n\n    Parameters\n    ----------\n    tz : str or tzinfo object\n    axis : the axis to convert\n    level : int, str, default None\n        If axis is a MultiIndex, convert a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n\n    Returns\n    -------\n    %(klass)s\n        Object with time zone converted axis.\n\n    Raises\n    ------\n    TypeError\n        If the axis is tz-naive.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_convert(ax, tz):\n        if not hasattr(ax, 'tz_convert'):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_convert(tz)\n        return ax\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_convert(ax.levels[level], tz)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f'The level {level} is not valid')\n        ax = _tz_convert(ax, tz)\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                            "def tz_localize(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True, ambiguous='raise', nonexistent: str='raise') -> FrameOrSeries:\n    \"\"\"\n    Localize tz-naive index of a Series or DataFrame to target time zone.\n\n    This operation localizes the Index. To localize the values in a\n    timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\n    Parameters\n    ----------\n    tz : str or tzinfo\n    axis : the axis to localize\n    level : int, str, default None\n        If axis ia a MultiIndex, localize a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n    ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n        When clocks moved backward due to DST, ambiguous times may arise.\n        For example in Central European Time (UTC+01), when going from\n        03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n        00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n        `ambiguous` parameter dictates how ambiguous times should be\n        handled.\n\n        - 'infer' will attempt to infer fall dst-transition hours based on\n          order\n        - bool-ndarray where True signifies a DST time, False designates\n          a non-DST time (note that this flag is only applicable for\n          ambiguous times)\n        - 'NaT' will return NaT where there are ambiguous times\n        - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n          times.\n    nonexistent : str, default 'raise'\n        A nonexistent time does not exist in a particular timezone\n        where clocks moved forward due to DST. Valid values are:\n\n        - 'shift_forward' will shift the nonexistent time forward to the\n          closest existing time\n        - 'shift_backward' will shift the nonexistent time backward to the\n          closest existing time\n        - 'NaT' will return NaT where there are nonexistent times\n        - timedelta objects will shift nonexistent times by the timedelta\n        - 'raise' will raise an NonExistentTimeError if there are\n          nonexistent times.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as the input.\n\n    Raises\n    ------\n    TypeError\n        If the TimeSeries is tz-aware and tz is not None.\n\n    Examples\n    --------\n\n    Localize local times:\n\n    >>> s = pd.Series([1],\n    ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n    >>> s.tz_localize('CET')\n    2018-09-15 01:30:00+02:00    1\n    dtype: int64\n\n    Be careful with DST changes. When there is sequential data, pandas\n    can infer the DST time:\n\n    >>> s = pd.Series(range(7),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 03:00:00',\n    ...                                       '2018-10-28 03:30:00']))\n    >>> s.tz_localize('CET', ambiguous='infer')\n    2018-10-28 01:30:00+02:00    0\n    2018-10-28 02:00:00+02:00    1\n    2018-10-28 02:30:00+02:00    2\n    2018-10-28 02:00:00+01:00    3\n    2018-10-28 02:30:00+01:00    4\n    2018-10-28 03:00:00+01:00    5\n    2018-10-28 03:30:00+01:00    6\n    dtype: int64\n\n    In some cases, inferring the DST is impossible. In such cases, you can\n    pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n    >>> s = pd.Series(range(3),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n    ...                                       '2018-10-28 02:36:00',\n    ...                                       '2018-10-28 03:46:00']))\n    >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n    2018-10-28 01:20:00+02:00    0\n    2018-10-28 02:36:00+02:00    1\n    2018-10-28 03:46:00+01:00    2\n    dtype: int64\n\n    If the DST transition causes nonexistent times, you can shift these\n    dates forward or backwards with a timedelta object or `'shift_forward'`\n    or `'shift_backwards'`.\n    >>> s = pd.Series(range(2),\n    ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n    ...                                       '2015-03-29 03:30:00']))\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n    2015-03-29 03:00:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n    2015-03-29 01:59:59.999999999+01:00    0\n    2015-03-29 03:30:00+02:00              1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n    2015-03-29 03:30:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    \"\"\"\n    nonexistent_options = ('raise', 'NaT', 'shift_forward', 'shift_backward')\n    if nonexistent not in nonexistent_options and (not isinstance(nonexistent, timedelta)):\n        raise ValueError(\"The nonexistent argument must be one of 'raise', 'NaT', 'shift_forward', 'shift_backward' or a timedelta object\")\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_localize(ax, tz, ambiguous, nonexistent):\n        if not hasattr(ax, 'tz_localize'):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n        return ax\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_localize(ax.levels[level], tz, ambiguous, nonexistent)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f'The level {level} is not valid')\n        ax = _tz_localize(ax, tz, ambiguous, nonexistent)\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                            "def abs(self):\n    \"\"\"\n    Return a Series/DataFrame with absolute numeric value of each element.\n\n    This function only applies to elements that are all numeric.\n\n    Returns\n    -------\n    abs\n        Series/DataFrame containing the absolute value of each element.\n\n    See Also\n    --------\n    numpy.absolute : Calculate the absolute value element-wise.\n\n    Notes\n    -----\n    For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n    :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n    Examples\n    --------\n    Absolute numeric values in a Series.\n\n    >>> s = pd.Series([-1.10, 2, -3.33, 4])\n    >>> s.abs()\n    0    1.10\n    1    2.00\n    2    3.33\n    3    4.00\n    dtype: float64\n\n    Absolute numeric values in a Series with complex numbers.\n\n    >>> s = pd.Series([1.2 + 1j])\n    >>> s.abs()\n    0    1.56205\n    dtype: float64\n\n    Absolute numeric values in a Series with a Timedelta element.\n\n    >>> s = pd.Series([pd.Timedelta('1 days')])\n    >>> s.abs()\n    0   1 days\n    dtype: timedelta64[ns]\n\n    Select rows with data closest to certain value using argsort (from\n    `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n    >>> df = pd.DataFrame({\n    ...     'a': [4, 5, 6, 7],\n    ...     'b': [10, 20, 30, 40],\n    ...     'c': [100, 50, -30, -50]\n    ... })\n    >>> df\n         a    b    c\n    0    4   10  100\n    1    5   20   50\n    2    6   30  -30\n    3    7   40  -50\n    >>> df.loc[(df.c - 43).abs().argsort()]\n         a    b    c\n    1    5   20   50\n    0    4   10  100\n    2    6   30  -30\n    3    7   40  -50\n    \"\"\"\n    return np.abs(self)",
                            "def describe(self, percentiles=None, include=None, exclude=None):\n    \"\"\"\n    Generate descriptive statistics.\n\n    Descriptive statistics include those that summarize the central\n    tendency, dispersion and shape of a\n    dataset's distribution, excluding ``NaN`` values.\n\n    Analyzes both numeric and object series, as well\n    as ``DataFrame`` column sets of mixed data types. The output\n    will vary depending on what is provided. Refer to the notes\n    below for more detail.\n\n    Parameters\n    ----------\n    percentiles : list-like of numbers, optional\n        The percentiles to include in the output. All should\n        fall between 0 and 1. The default is\n        ``[.25, .5, .75]``, which returns the 25th, 50th, and\n        75th percentiles.\n    include : 'all', list-like of dtypes or None (default), optional\n        A white list of data types to include in the result. Ignored\n        for ``Series``. Here are the options:\n\n        - 'all' : All columns of the input will be included in the output.\n        - A list-like of dtypes : Limits the results to the\n          provided data types.\n          To limit the result to numeric types submit\n          ``numpy.number``. To limit it instead to object columns submit\n          the ``numpy.object`` data type. Strings\n          can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          select pandas categorical columns, use ``'category'``\n        - None (default) : The result will include all numeric columns.\n    exclude : list-like of dtypes or None (default), optional,\n        A black list of data types to omit from the result. Ignored\n        for ``Series``. Here are the options:\n\n        - A list-like of dtypes : Excludes the provided data types\n          from the result. To exclude numeric types submit\n          ``numpy.number``. To exclude object columns submit the data\n          type ``numpy.object``. Strings can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          exclude pandas categorical columns, use ``'category'``\n        - None (default) : The result will exclude nothing.\n\n    Returns\n    -------\n    Series or DataFrame\n        Summary statistics of the Series or Dataframe provided.\n\n    See Also\n    --------\n    DataFrame.count: Count number of non-NA/null observations.\n    DataFrame.max: Maximum of the values in the object.\n    DataFrame.min: Minimum of the values in the object.\n    DataFrame.mean: Mean of the values.\n    DataFrame.std: Standard deviation of the observations.\n    DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n        columns based on their dtype.\n\n    Notes\n    -----\n    For numeric data, the result's index will include ``count``,\n    ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n    upper percentiles. By default the lower percentile is ``25`` and the\n    upper percentile is ``75``. The ``50`` percentile is the\n    same as the median.\n\n    For object data (e.g. strings or timestamps), the result's index\n    will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n    is the most common value. The ``freq`` is the most common value's\n    frequency. Timestamps also include the ``first`` and ``last`` items.\n\n    If multiple object values have the highest count, then the\n    ``count`` and ``top`` results will be arbitrarily chosen from\n    among those with the highest count.\n\n    For mixed data types provided via a ``DataFrame``, the default is to\n    return only an analysis of numeric columns. If the dataframe consists\n    only of object and categorical data without any numeric columns, the\n    default is to return an analysis of both the object and categorical\n    columns. If ``include='all'`` is provided as an option, the result\n    will include a union of attributes of each type.\n\n    The `include` and `exclude` parameters can be used to limit\n    which columns in a ``DataFrame`` are analyzed for the output.\n    The parameters are ignored when analyzing a ``Series``.\n\n    Examples\n    --------\n    Describing a numeric ``Series``.\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    dtype: float64\n\n    Describing a categorical ``Series``.\n\n    >>> s = pd.Series(['a', 'a', 'b', 'c'])\n    >>> s.describe()\n    count     4\n    unique    3\n    top       a\n    freq      2\n    dtype: object\n\n    Describing a timestamp ``Series``.\n\n    >>> s = pd.Series([\n    ...   np.datetime64(\"2000-01-01\"),\n    ...   np.datetime64(\"2010-01-01\"),\n    ...   np.datetime64(\"2010-01-01\")\n    ... ])\n    >>> s.describe()\n    count                       3\n    unique                      2\n    top       2010-01-01 00:00:00\n    freq                        2\n    first     2000-01-01 00:00:00\n    last      2010-01-01 00:00:00\n    dtype: object\n\n    Describing a ``DataFrame``. By default only numeric fields\n    are returned.\n\n    >>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n    ...                    'numeric': [1, 2, 3],\n    ...                    'object': ['a', 'b', 'c']\n    ...                   })\n    >>> df.describe()\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Describing all columns of a ``DataFrame`` regardless of data type.\n\n    >>> df.describe(include='all')\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n\n    Describing a column from a ``DataFrame`` by accessing it as\n    an attribute.\n\n    >>> df.numeric.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    Name: numeric, dtype: float64\n\n    Including only numeric columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.number])\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Including only string columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.object])\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\n\n    Including only categorical columns from a ``DataFrame`` description.\n\n    >>> df.describe(include=['category'])\n           categorical\n    count            3\n    unique           3\n    top              f\n    freq             1\n\n    Excluding numeric columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.number])\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\n\n    Excluding object columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.object])\n           categorical  numeric\n    count            3      3.0\n    unique           3      NaN\n    top              f      NaN\n    freq             1      NaN\n    mean           NaN      2.0\n    std            NaN      1.0\n    min            NaN      1.0\n    25%            NaN      1.5\n    50%            NaN      2.0\n    75%            NaN      2.5\n    max            NaN      3.0\n    \"\"\"\n    if self.ndim == 2 and self.columns.size == 0:\n        raise ValueError('Cannot describe a DataFrame without columns')\n    if percentiles is not None:\n        percentiles = list(percentiles)\n        validate_percentile(percentiles)\n        if 0.5 not in percentiles:\n            percentiles.append(0.5)\n        percentiles = np.asarray(percentiles)\n    else:\n        percentiles = np.array([0.25, 0.5, 0.75])\n    unique_pcts = np.unique(percentiles)\n    if len(unique_pcts) < len(percentiles):\n        raise ValueError('percentiles cannot contain duplicates')\n    percentiles = unique_pcts\n    formatted_percentiles = format_percentiles(percentiles)\n\n    def describe_numeric_1d(series):\n        stat_index = ['count', 'mean', 'std', 'min'] + formatted_percentiles + ['max']\n        d = [series.count(), series.mean(), series.std(), series.min()] + series.quantile(percentiles).tolist() + [series.max()]\n        return pd.Series(d, index=stat_index, name=series.name)\n\n    def describe_categorical_1d(data):\n        names = ['count', 'unique']\n        objcounts = data.value_counts()\n        count_unique = len(objcounts[objcounts != 0])\n        result = [data.count(), count_unique]\n        dtype = None\n        if result[1] > 0:\n            top, freq = (objcounts.index[0], objcounts.iloc[0])\n            if is_datetime64_any_dtype(data):\n                tz = data.dt.tz\n                asint = data.dropna().values.view('i8')\n                top = Timestamp(top)\n                if top.tzinfo is not None and tz is not None:\n                    top = top.tz_convert(tz)\n                else:\n                    top = top.tz_localize(tz)\n                names += ['top', 'freq', 'first', 'last']\n                result += [top, freq, Timestamp(asint.min(), tz=tz), Timestamp(asint.max(), tz=tz)]\n            else:\n                names += ['top', 'freq']\n                result += [top, freq]\n        else:\n            names += ['top', 'freq']\n            result += [np.nan, np.nan]\n            dtype = 'object'\n        return pd.Series(result, index=names, name=data.name, dtype=dtype)\n\n    def describe_1d(data):\n        if is_bool_dtype(data):\n            return describe_categorical_1d(data)\n        elif is_numeric_dtype(data):\n            return describe_numeric_1d(data)\n        elif is_timedelta64_dtype(data):\n            return describe_numeric_1d(data)\n        else:\n            return describe_categorical_1d(data)\n    if self.ndim == 1:\n        return describe_1d(self)\n    elif include is None and exclude is None:\n        data = self.select_dtypes(include=[np.number])\n        if len(data.columns) == 0:\n            data = self\n    elif include == 'all':\n        if exclude is not None:\n            msg = \"exclude must be None when include is 'all'\"\n            raise ValueError(msg)\n        data = self\n    else:\n        data = self.select_dtypes(include=include, exclude=exclude)\n    ldesc = [describe_1d(s) for _, s in data.items()]\n    names = []\n    ldesc_indexes = sorted((x.index for x in ldesc), key=len)\n    for idxnames in ldesc_indexes:\n        for name in idxnames:\n            if name not in names:\n                names.append(name)\n    d = pd.concat([x.reindex(names, copy=False) for x in ldesc], axis=1, sort=False)\n    d.columns = data.columns.copy()\n    return d",
                            "@Appender(_shared_docs['pct_change'] % _shared_doc_kwargs)\ndef pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, **kwargs):\n    axis = self._get_axis_number(kwargs.pop('axis', self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    rs = rs.loc[~rs.index.duplicated()]\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = isna(com.values_from_object(data))\n        np.putmask(rs.values, mask, np.nan)\n    return rs",
                            "def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n    if axis is None:\n        raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n    grouped = self.groupby(level=level, axis=axis, sort=False)\n    if hasattr(grouped, name) and skipna:\n        return getattr(grouped, name)(**kwargs)\n    axis = self._get_axis_number(axis)\n    method = getattr(type(self), name)\n    applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n    return grouped.aggregate(applyf)",
                            "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add the operations to the cls; evaluate the doc strings again\n    \"\"\"\n    axis_descr, name, name2 = _doc_parms(cls)\n    cls.any = _make_logical_function(cls, 'any', name, name2, axis_descr, _any_desc, nanops.nanany, _any_see_also, _any_examples, empty_value=False)\n    cls.all = _make_logical_function(cls, 'all', name, name2, axis_descr, _all_desc, nanops.nanall, _all_see_also, _all_examples, empty_value=True)\n\n    @Substitution(desc='Return the mean absolute deviation of the values for the requested axis.', name1=name, name2=name2, axis_descr=axis_descr, min_count='', see_also='', examples='')\n    @Appender(_num_doc)\n    def mad(self, axis=None, skipna=None, level=None):\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level('mad', axis=axis, level=level, skipna=skipna)\n        data = self._get_numeric_data()\n        if axis == 0:\n            demeaned = data - data.mean(axis=0)\n        else:\n            demeaned = data.sub(data.mean(axis=1), axis=0)\n        return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n    cls.mad = mad\n    cls.sem = _make_stat_function_ddof(cls, 'sem', name, name2, axis_descr, 'Return unbiased standard error of the mean over requested axis.\\n\\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nansem)\n    cls.var = _make_stat_function_ddof(cls, 'var', name, name2, axis_descr, 'Return unbiased variance over requested axis.\\n\\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanvar)\n    cls.std = _make_stat_function_ddof(cls, 'std', name, name2, axis_descr, 'Return sample standard deviation over requested axis.\\n\\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanstd)\n    cls.cummin = _make_cum_function(cls, 'cummin', name, name2, axis_descr, 'minimum', np.minimum.accumulate, 'min', np.inf, np.nan, _cummin_examples)\n    cls.cumsum = _make_cum_function(cls, 'cumsum', name, name2, axis_descr, 'sum', np.cumsum, 'sum', 0.0, np.nan, _cumsum_examples)\n    cls.cumprod = _make_cum_function(cls, 'cumprod', name, name2, axis_descr, 'product', np.cumprod, 'prod', 1.0, np.nan, _cumprod_examples)\n    cls.cummax = _make_cum_function(cls, 'cummax', name, name2, axis_descr, 'maximum', np.maximum.accumulate, 'max', -np.inf, np.nan, _cummax_examples)\n    cls.sum = _make_min_count_stat_function(cls, 'sum', name, name2, axis_descr, 'Return the sum of the values for the requested axis.\\n\\n            This is equivalent to the method ``numpy.sum``.', nanops.nansum, _stat_func_see_also, _sum_examples)\n    cls.mean = _make_stat_function(cls, 'mean', name, name2, axis_descr, 'Return the mean of the values for the requested axis.', nanops.nanmean)\n    cls.skew = _make_stat_function(cls, 'skew', name, name2, axis_descr, 'Return unbiased skew over requested axis.\\n\\nNormalized by N-1.', nanops.nanskew)\n    cls.kurt = _make_stat_function(cls, 'kurt', name, name2, axis_descr, \"Return unbiased kurtosis over requested axis.\\n\\nKurtosis obtained using Fisher's definition of\\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\", nanops.nankurt)\n    cls.kurtosis = cls.kurt\n    cls.prod = _make_min_count_stat_function(cls, 'prod', name, name2, axis_descr, 'Return the product of the values for the requested axis.', nanops.nanprod, examples=_prod_examples)\n    cls.product = cls.prod\n    cls.median = _make_stat_function(cls, 'median', name, name2, axis_descr, 'Return the median of the values for the requested axis.', nanops.nanmedian)\n    cls.max = _make_stat_function(cls, 'max', name, name2, axis_descr, 'Return the maximum of the values for the requested axis.\\n\\n            If you want the *index* of the maximum, use ``idxmax``. This is\\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.', nanops.nanmax, _stat_func_see_also, _max_examples)\n    cls.min = _make_stat_function(cls, 'min', name, name2, axis_descr, 'Return the minimum of the values for the requested axis.\\n\\n            If you want the *index* of the minimum, use ``idxmin``. This is\\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.', nanops.nanmin, _stat_func_see_also, _min_examples)",
                            "@classmethod\ndef _add_series_or_dataframe_operations(cls):\n    \"\"\"\n    Add the series or dataframe only operations to the cls; evaluate\n    the doc strings again.\n    \"\"\"\n    from pandas.core.window import EWM, Expanding, Rolling, Window\n\n    @Appender(Rolling.__doc__)\n    def rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None):\n        axis = self._get_axis_number(axis)\n        if win_type is not None:\n            return Window(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)\n        return Rolling(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)\n    cls.rolling = rolling\n\n    @Appender(Expanding.__doc__)\n    def expanding(self, min_periods=1, center=False, axis=0):\n        axis = self._get_axis_number(axis)\n        return Expanding(self, min_periods=min_periods, center=center, axis=axis)\n    cls.expanding = expanding\n\n    @Appender(EWM.__doc__)\n    def ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0):\n        axis = self._get_axis_number(axis)\n        return EWM(self, com=com, span=span, halflife=halflife, alpha=alpha, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na, axis=axis)\n    cls.ewm = ewm",
                            "@Appender(_shared_docs['transform'] % dict(axis='', **_shared_doc_kwargs))\ndef transform(self, func, *args, **kwargs):\n    result = self.agg(func, *args, **kwargs)\n    if is_scalar(result) or len(result) != len(self):\n        raise ValueError('transforms cannot produce aggregated results')\n    return result",
                            "def _find_valid_index(self, how: str):\n    \"\"\"\n    Retrieves the index of the first valid value.\n\n    Parameters\n    ----------\n    how : {'first', 'last'}\n        Use this parameter to change between the first or last valid index.\n\n    Returns\n    -------\n    idx_first_valid : type of index\n    \"\"\"\n    idxpos = find_valid_index(self._values, how)\n    if idxpos is None:\n        return None\n    return self.index[idxpos]",
                            "@Appender(_shared_docs['valid_index'] % {'position': 'first', 'klass': 'Series/DataFrame'})\ndef first_valid_index(self):\n    return self._find_valid_index('first')",
                            "@Appender(_shared_docs['valid_index'] % {'position': 'last', 'klass': 'Series/DataFrame'})\ndef last_valid_index(self):\n    return self._find_valid_index('last')",
                            "def set_axis(a, i):\n    setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n    cls._internal_names_set.add(a)",
                            "def f():\n    self._data = self._data.consolidate()",
                            "def ranker(data):\n    ranks = algos.rank(data.values, axis=axis, method=method, ascending=ascending, na_option=na_option, pct=pct)\n    ranks = self._constructor(ranks, **data._construct_axes_dict())\n    return ranks.__finalize__(self)",
                            "def _tz_convert(ax, tz):\n    if not hasattr(ax, 'tz_convert'):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_convert(tz)\n    return ax",
                            "def _tz_localize(ax, tz, ambiguous, nonexistent):\n    if not hasattr(ax, 'tz_localize'):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n    return ax",
                            "def describe_numeric_1d(series):\n    stat_index = ['count', 'mean', 'std', 'min'] + formatted_percentiles + ['max']\n    d = [series.count(), series.mean(), series.std(), series.min()] + series.quantile(percentiles).tolist() + [series.max()]\n    return pd.Series(d, index=stat_index, name=series.name)",
                            "def describe_categorical_1d(data):\n    names = ['count', 'unique']\n    objcounts = data.value_counts()\n    count_unique = len(objcounts[objcounts != 0])\n    result = [data.count(), count_unique]\n    dtype = None\n    if result[1] > 0:\n        top, freq = (objcounts.index[0], objcounts.iloc[0])\n        if is_datetime64_any_dtype(data):\n            tz = data.dt.tz\n            asint = data.dropna().values.view('i8')\n            top = Timestamp(top)\n            if top.tzinfo is not None and tz is not None:\n                top = top.tz_convert(tz)\n            else:\n                top = top.tz_localize(tz)\n            names += ['top', 'freq', 'first', 'last']\n            result += [top, freq, Timestamp(asint.min(), tz=tz), Timestamp(asint.max(), tz=tz)]\n        else:\n            names += ['top', 'freq']\n            result += [top, freq]\n    else:\n        names += ['top', 'freq']\n        result += [np.nan, np.nan]\n        dtype = 'object'\n    return pd.Series(result, index=names, name=data.name, dtype=dtype)",
                            "def describe_1d(data):\n    if is_bool_dtype(data):\n        return describe_categorical_1d(data)\n    elif is_numeric_dtype(data):\n        return describe_numeric_1d(data)\n    elif is_timedelta64_dtype(data):\n        return describe_numeric_1d(data)\n    else:\n        return describe_categorical_1d(data)",
                            "@Substitution(desc='Return the mean absolute deviation of the values for the requested axis.', name1=name, name2=name2, axis_descr=axis_descr, min_count='', see_also='', examples='')\n@Appender(_num_doc)\ndef mad(self, axis=None, skipna=None, level=None):\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level('mad', axis=axis, level=level, skipna=skipna)\n    data = self._get_numeric_data()\n    if axis == 0:\n        demeaned = data - data.mean(axis=0)\n    else:\n        demeaned = data.sub(data.mean(axis=1), axis=0)\n    return np.abs(demeaned).mean(axis=axis, skipna=skipna)",
                            "@Appender(Rolling.__doc__)\ndef rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None):\n    axis = self._get_axis_number(axis)\n    if win_type is not None:\n        return Window(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)\n    return Rolling(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)",
                            "@Appender(Expanding.__doc__)\ndef expanding(self, min_periods=1, center=False, axis=0):\n    axis = self._get_axis_number(axis)\n    return Expanding(self, min_periods=min_periods, center=center, axis=axis)",
                            "@Appender(EWM.__doc__)\ndef ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0):\n    axis = self._get_axis_number(axis)\n    return EWM(self, com=com, span=span, halflife=halflife, alpha=alpha, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na, axis=axis)",
                            "def f(x):\n    return like in ensure_str(x)",
                            "def f(x):\n    return matcher.search(ensure_str(x)) is not None"
                        ],
                        "constructor_variables": [
                            "data",
                            "attrs"
                        ],
                        "class_level_variables": [
                            "_internal_names",
                            "_internal_names_set",
                            "_accessors",
                            "_deprecations",
                            "_metadata",
                            "_is_copy",
                            "_data",
                            "_attrs",
                            "_typ",
                            "_AXIS_ALIASES",
                            "_AXIS_IALIASES",
                            "_stat_axis_number",
                            "_stat_axis_name",
                            "_ix",
                            "_AXIS_ORDERS",
                            "_AXIS_NUMBERS",
                            "_AXIS_NAMES",
                            "_AXIS_REVERSED",
                            "_info_axis_number",
                            "_info_axis_name",
                            "_AXIS_LEN",
                            "__bool__",
                            "__array_priority__",
                            "_xs"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
                            "_init_mgr(self, mgr, axes=None, dtype=None, copy=False)",
                            "attrs(self) -> Dict[Optional[Hashable], Any]",
                            "attrs(self, value: Mapping[Optional[Hashable], Any]) -> None",
                            "_validate_dtype(self, dtype)",
                            "_constructor(self)",
                            "_constructor_sliced(self)",
                            "_constructor_expanddim(self)",
                            "_setup_axes(cls, axes: List[str], docs: Dict[str, str])",
                            "_construct_axes_dict(self, axes=None, **kwargs)",
                            "_construct_axes_dict_from(self, axes, **kwargs)",
                            "_construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None)",
                            "_from_axes(cls, data, axes, **kwargs)",
                            "_get_axis_number(cls, axis)",
                            "_get_axis_name(cls, axis)",
                            "_get_axis(self, axis)",
                            "_get_block_manager_axis(cls, axis)",
                            "_get_axis_resolvers(self, axis)",
                            "_get_index_resolvers(self)",
                            "_get_space_character_free_column_resolvers(self)",
                            "_info_axis(self)",
                            "_stat_axis(self)",
                            "shape(self) -> Tuple[int, ...]",
                            "axes(self)",
                            "ndim(self) -> int",
                            "size(self)",
                            "_selected_obj(self: FrameOrSeries) -> FrameOrSeries",
                            "_obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries",
                            "set_axis(self, labels, axis=0, inplace=False)",
                            "_set_axis(self, axis, labels)",
                            "transpose(self, *args, **kwargs)",
                            "swapaxes(self, axis1, axis2, copy=True)",
                            "droplevel(self, level, axis=0)",
                            "pop(self, item)",
                            "squeeze(self, axis=None)",
                            "swaplevel(self, i=-2, j=-1, axis=0)",
                            "rename(self, *args, **kwargs)",
                            "rename_axis(self, mapper=sentinel, **kwargs)",
                            "_set_axis_name(self, name, axis=0, inplace=False)",
                            "_indexed_same(self, other) -> bool",
                            "equals(self, other)",
                            "__neg__(self)",
                            "__pos__(self)",
                            "__invert__(self)",
                            "__nonzero__(self)",
                            "bool(self)",
                            "__abs__(self)",
                            "__round__(self, decimals=0)",
                            "_is_level_reference(self, key, axis=0)",
                            "_is_label_reference(self, key, axis=0) -> bool_t",
                            "_is_label_or_level_reference(self, key: str, axis: int=0) -> bool_t",
                            "_check_label_or_level_ambiguity(self, key, axis: int=0) -> None",
                            "_get_label_or_level_values(self, key: str, axis: int=0) -> np.ndarray",
                            "_drop_labels_or_levels(self, keys, axis: int=0)",
                            "__hash__(self)",
                            "__iter__(self)",
                            "keys(self)",
                            "items(self)",
                            "iteritems(self)",
                            "__len__(self) -> int",
                            "__contains__(self, key) -> bool_t",
                            "empty(self) -> bool_t",
                            "__array__(self, dtype=None)",
                            "__array_wrap__(self, result, context=None)",
                            "__getstate__(self) -> Dict[str, Any]",
                            "__setstate__(self, state)",
                            "__repr__(self) -> str",
                            "_repr_latex_(self)",
                            "_repr_data_resource_(self)",
                            "to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None)",
                            "to_json(self, path_or_buf: Optional[FilePathOrBuffer]=None, orient: Optional[str]=None, date_format: Optional[str]=None, double_precision: int=10, force_ascii: bool_t=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool_t=False, compression: Optional[str]='infer', index: bool_t=True, indent: Optional[int]=None) -> Optional[str]",
                            "to_hdf(self, path_or_buf, key: str, mode: str='a', complevel: Optional[int]=None, complib: Optional[str]=None, append: bool_t=False, format: Optional[str]=None, index: bool_t=True, min_itemsize: Optional[Union[int, Dict[str, int]]]=None, nan_rep=None, dropna: Optional[bool_t]=None, data_columns: Optional[List[str]]=None, errors: str='strict', encoding: str='UTF-8')",
                            "to_sql(self, name: str, con, schema=None, if_exists: str='fail', index: bool_t=True, index_label=None, chunksize=None, dtype=None, method=None) -> None",
                            "to_pickle(self, path, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL) -> None",
                            "to_clipboard(self, excel: bool_t=True, sep: Optional[str]=None, **kwargs)",
                            "to_xarray(self)",
                            "to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None)",
                            "to_csv(self, path_or_buf: Optional[FilePathOrBuffer]=None, sep: str=',', na_rep: str='', float_format: Optional[str]=None, columns: Optional[Sequence[Optional[Hashable]]]=None, header: Union[bool_t, List[str]]=True, index: bool_t=True, index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]]=None, mode: str='w', encoding: Optional[str]=None, compression: Optional[Union[str, Mapping[str, str]]]='infer', quoting: Optional[int]=None, quotechar: str='\"', line_terminator: Optional[str]=None, chunksize: Optional[int]=None, date_format: Optional[str]=None, doublequote: bool_t=True, escapechar: Optional[str]=None, decimal: Optional[str]='.') -> Optional[str]",
                            "_create_indexer(cls, name: str, indexer) -> None",
                            "_set_as_cached(self, item, cacher) -> None",
                            "_reset_cacher(self) -> None",
                            "_maybe_cache_changed(self, item, value) -> None",
                            "_is_cached(self) -> bool_t",
                            "_get_cacher(self)",
                            "_maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True) -> None",
                            "_clear_item_cache(self) -> None",
                            "take(self, indices, axis=0, is_copy: bool_t=True, **kwargs)",
                            "xs(self, key, axis=0, level=None, drop_level: bool_t=True)",
                            "__getitem__(self, item)",
                            "_get_item_cache(self, item)",
                            "_iget_item_cache(self, item)",
                            "_box_item_values(self, key, values)",
                            "_slice(self, slobj: slice, axis=0, kind=None)",
                            "_set_item(self, key, value) -> None",
                            "_set_is_copy(self, ref=None, copy: bool_t=True) -> None",
                            "_check_is_chained_assignment_possible(self) -> bool_t",
                            "_check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
                            "__delitem__(self, key)",
                            "get(self, key, default=None)",
                            "_is_view(self)",
                            "reindex_like(self, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
                            "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise')",
                            "_drop_axis(self, labels, axis, level=None, errors: str='raise')",
                            "_update_inplace(self, result, verify_is_copy: bool_t=True) -> None",
                            "add_prefix(self, prefix: str)",
                            "add_suffix(self, suffix: str)",
                            "sort_values(self, by=None, axis=0, ascending=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last')",
                            "sort_index(self, axis=0, level=None, ascending: bool_t=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool_t=True)",
                            "reindex(self, *args, **kwargs)",
                            "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                            "_needs_reindex_multi(self, axes, method, level) -> bool_t",
                            "_reindex_multi(self, axes, copy, fill_value)",
                            "_reindex_with_indexers(self, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
                            "filter(self, items=None, like: Optional[str]=None, regex: Optional[str]=None, axis=None)",
                            "head(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                            "tail(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                            "sample(self, n=None, frac=None, replace=False, weights=None, random_state=None, axis=None)",
                            "pipe(self, func, *args, **kwargs)",
                            "__finalize__(self: FrameOrSeries, other, method=None, **kwargs) -> FrameOrSeries",
                            "__getattr__(self, name: str)",
                            "__setattr__(self, name: str, value) -> None",
                            "_dir_additions(self)",
                            "_protect_consolidate(self, f)",
                            "_consolidate_inplace(self) -> None",
                            "_consolidate(self, inplace: bool_t=False)",
                            "_is_mixed_type(self)",
                            "_is_numeric_mixed_type(self)",
                            "_is_datelike_mixed_type(self)",
                            "_check_inplace_setting(self, value) -> bool_t",
                            "_get_numeric_data(self)",
                            "_get_bool_data(self)",
                            "values(self)",
                            "_values(self)",
                            "_get_values(self)",
                            "_internal_get_values(self)",
                            "dtypes(self)",
                            "_to_dict_of_blocks(self, copy: bool_t=True)",
                            "astype(self, dtype, copy: bool_t=True, errors: str='raise')",
                            "copy(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                            "__copy__(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                            "__deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries",
                            "_convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False, copy: bool_t=True) -> FrameOrSeries",
                            "infer_objects(self)",
                            "fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                            "ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                            "bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                            "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                            "interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
                            "asof(self, where, subset=None)",
                            "isna(self)",
                            "isnull(self)",
                            "notna(self)",
                            "notnull(self)",
                            "_clip_with_scalar(self, lower, upper, inplace: bool_t=False)",
                            "_clip_with_one_bound(self, threshold, method, axis, inplace)",
                            "clip(self, lower=None, upper=None, axis=None, inplace: bool_t=False, *args, **kwargs)",
                            "groupby(self, by=None, axis=0, level=None, as_index: bool_t=True, sort: bool_t=True, group_keys: bool_t=True, squeeze: bool_t=False, observed: bool_t=False)",
                            "asfreq(self, freq, method=None, how: Optional[str]=None, normalize: bool_t=False, fill_value=None)",
                            "at_time(self, time, asof: bool_t=False, axis=None)",
                            "between_time(self, start_time, end_time, include_start: bool_t=True, include_end: bool_t=True, axis=None)",
                            "resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: int=0, on=None, level=None)",
                            "first(self, offset)",
                            "last(self, offset)",
                            "rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False) -> FrameOrSeries",
                            "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                            "_align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                            "_align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                            "_where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                            "where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                            "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                            "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                            "slice_shift(self: FrameOrSeries, periods: int=1, axis=0) -> FrameOrSeries",
                            "tshift(self, periods: int=1, freq=None, axis=0)",
                            "truncate(self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t=True) -> FrameOrSeries",
                            "tz_convert(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True) -> FrameOrSeries",
                            "tz_localize(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True, ambiguous='raise', nonexistent: str='raise') -> FrameOrSeries",
                            "abs(self)",
                            "describe(self, percentiles=None, include=None, exclude=None)",
                            "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, **kwargs)",
                            "_agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs)",
                            "_add_numeric_operations(cls)",
                            "_add_series_or_dataframe_operations(cls)",
                            "transform(self, func, *args, **kwargs)",
                            "_find_valid_index(self, how: str)",
                            "first_valid_index(self)",
                            "last_valid_index(self)",
                            "set_axis(a, i)",
                            "f()",
                            "ranker(data)",
                            "_tz_convert(ax, tz)",
                            "_tz_localize(ax, tz, ambiguous, nonexistent)",
                            "describe_numeric_1d(series)",
                            "describe_categorical_1d(data)",
                            "describe_1d(data)",
                            "mad(self, axis=None, skipna=None, level=None)",
                            "rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)",
                            "expanding(self, min_periods=1, center=False, axis=0)",
                            "ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0)",
                            "f(x)",
                            "f(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of          0\n0  2016-01>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-01",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of          0\n0  2016-01>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-01', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e332700>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of          0\n0  2016-01>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-01",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=1, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of          0\n0  2016-01>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[Period('2016-01', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-01', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e332700>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e3609e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of          0\n0  2016-03>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-03",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of          0\n0  2016-03>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-03', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e32f240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of          0\n0  2016-03>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "         0\n0  2016-03",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=1, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of          0\n0  2016-03>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[Period('2016-03', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('2016-03', '2M')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e32f240>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e2b2940>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2d2d00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=9, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D'), Period('1994-04-20', '19D'),\n        Period('1994-05-09', '19D'), Period('1994-05-28', '19D'),\n        Period('1994-06-16', '19D'), Period('1994-07-05', '19D'),\n        Period('1994-07-24', '19D'), Period('1994-08-12', '19D'),\n        Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2d2d00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e4bdf30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2c9100>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=9, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2c9100>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e4bd710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2e55c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=9, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D'), Period('1994-04-20', '19D'),\n        Period('1994-05-09', '19D'), Period('1994-05-28', '19D'),\n        Period('1994-06-16', '19D'), Period('1994-07-05', '19D'),\n        Period('1994-07-24', '19D'), Period('1994-08-12', '19D'),\n        Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2e55c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e4ba4e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e35d800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=9, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e35d800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e5592b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e3b0040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "            0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=9, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of             0\n0  1994-04-01\n1  1994-04-20\n2  1994-05-09\n3  1994-05-28\n4  1994-06-16\n5  1994-07-05\n6  1994-07-24\n7  1994-08-12\n8  1994-08-31>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D'), Period('1994-04-20', '19D'),\n        Period('1994-05-09', '19D'), Period('1994-05-28', '19D'),\n        Period('1994-06-16', '19D'), Period('1994-07-05', '19D'),\n        Period('1994-07-24', '19D'), Period('1994-08-12', '19D'),\n        Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[Period('1994-04-01', '19D')],\n       [Period('1994-04-20', '19D')],\n       [Period('1994-05-09', '19D')],\n       [Period('1994-05-28', '19D')],\n       [Period('1994-06-16', '19D')],\n       [Period('1994-07-05', '19D')],\n       [Period('1994-07-24', '19D')],\n       [Period('1994-08-12', '19D')],\n       [Period('1994-08-31', '19D')]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e3b0040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e580c10>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ],
                        [
                            {
                                "axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2dbdc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            },
                            {
                                "axes": {
                                    "variable_value": "{'index': 1, 'columns': 0}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "self._construct_axes_from_arguments": {
                                    "variable_value": "<bound method NDFrame._construct_axes_from_arguments of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "     0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "9"
                                },
                                "args": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "axes_names": {
                                    "variable_value": "('columns', 'index')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_name": {
                                    "variable_value": "<bound method NDFrame._get_axis_name of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._AXIS_ORDERS": {
                                    "variable_value": "['index', 'columns']",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "axes_numbers": {
                                    "variable_value": "(1, 0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "self._get_axis_number": {
                                    "variable_value": "<bound method NDFrame._get_axis_number of <class 'pandas.core.frame.DataFrame'>>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._AXIS_LEN": {
                                    "variable_value": "2",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "new_axes": {
                                    "variable_value": "{'index': Int64Index([0], dtype='int64'), 'columns': RangeIndex(start=0, stop=9, step=1)}",
                                    "variable_type": "dict",
                                    "variable_shape": "2"
                                },
                                "self._construct_axes_dict_from": {
                                    "variable_value": "<function NDFrame._construct_axes_dict_from at 0x118f21d30>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "self._get_axis": {
                                    "variable_value": "<bound method NDFrame._get_axis of      0\n0  NaT\n1  NaT\n2  NaT\n3  NaT\n4  NaT\n5  NaT\n6  NaT\n7  NaT\n8  NaT>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "x": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_values": {
                                    "variable_value": "array([[NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.values.transpose": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.values": {
                                    "variable_value": "array([[NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT],\n       [NaT]], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "9"
                                },
                                "kwargs.pop": {
                                    "variable_value": "<built-in method pop of dict object at 0x11e2dbdc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "new_values.copy": {
                                    "variable_value": "<built-in method copy of numpy.ndarray object at 0x11e2b2670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "nv.validate_transpose": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nv": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "__finalize__": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x119024e50>"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _single_replace(self, to_replace, method, inplace, limit):\n    \"\"\"\n    Replaces values in a Series using the fill method specified when no\n    replacement value is given in the replace method\n    \"\"\"\n    if self.ndim != 1:\n        raise TypeError(\n            f\"cannot replace {to_replace} with method {method} on a \"\n            f\"{type(self).__name__}\"\n        )\n\n    orig_dtype = self.dtype\n    result = self if inplace else self.copy()\n    fill_f = missing.get_fill_func(method)\n\n    mask = missing.mask_missing(result.values, to_replace)\n    values = fill_f(result.values, limit=limit, mask=mask)\n\n    if values.dtype == orig_dtype and inplace:\n        return\n\n    result = pd.Series(values, index=self.index, dtype=self.dtype).__finalize__(self)\n\n    if inplace:\n        self._update_inplace(result._data)\n        return\n\n    return result",
                "def _doc_parms(cls):\n    \"\"\"Return a tuple of the doc parms.\"\"\"\n    axis_descr = (\n        f\"{{{', '.join(f'{a} ({i})' for i, a in enumerate(cls._AXIS_ORDERS))}}}\"\n    )\n    name = cls._constructor_sliced.__name__ if cls._AXIS_LEN > 1 else \"scalar\"\n    name2 = cls.__name__\n    return axis_descr, name, name2",
                "def _make_min_count_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also: str = \"\", examples: str = \"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
                "def _make_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also: str = \"\", examples: str = \"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    return set_function_name(stat_func, name, cls)",
                "def _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    return set_function_name(stat_func, name, cls)",
                "def _make_cum_function(\n    cls,\n    name,\n    name1,\n    name2,\n    axis_descr,\n    desc,\n    accum_func,\n    accum_func_name,\n    mask_a,\n    mask_b,\n    examples,\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        accum_func_name=accum_func_name,\n        examples=examples,\n    )\n    @Appender(_cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        y = com.values_from_object(self).copy()\n        d = self._construct_axes_dict()\n        d[\"copy\"] = False\n\n        if issubclass(y.dtype.type, (np.datetime64, np.timedelta64)):\n            # numpy 1.18 started sorting NaTs at the end instead of beginning,\n            #  so we need to work around to maintain backwards-consistency.\n            orig_dtype = y.dtype\n            if accum_func == np.minimum.accumulate:\n                # Note: the accum_func comparison fails as an \"is\" comparison\n                # Note that \"y\" is always a copy, so we can safely modify it\n                mask = isna(self)\n                y = y.view(\"i8\")\n                y[mask] = np.iinfo(np.int64).max\n\n            result = accum_func(y.view(\"i8\"), axis).view(orig_dtype)\n            if skipna:\n                mask = isna(self)\n                np.putmask(result, mask, iNaT)\n            elif accum_func == np.minimum.accumulate:\n                # Restore NaTs that we masked previously\n                nz = (~np.asarray(mask)).nonzero()[0]\n                if len(nz):\n                    # everything up to the first non-na entry stays NaT\n                    result[: nz[0]] = iNaT\n\n            if self.ndim == 1:\n                # restore dt64tz dtype\n                d[\"dtype\"] = self.dtype\n\n        elif skipna and not issubclass(y.dtype.type, (np.integer, np.bool_)):\n            mask = isna(self)\n            np.putmask(y, mask, mask_a)\n            result = accum_func(y, axis)\n            np.putmask(result, mask, mask_b)\n        else:\n            result = accum_func(y, axis)\n\n        return self._constructor(result, **d).__finalize__(self)\n\n    return set_function_name(cum_func, name, cls)",
                "def _make_logical_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
                "def __init__(\n    self,\n    data: BlockManager,\n    axes: Optional[List[Index]] = None,\n    copy: bool = False,\n    dtype: Optional[Dtype] = None,\n    attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    fastpath: bool = False,\n):\n\n    if not fastpath:\n        if dtype is not None:\n            data = data.astype(dtype)\n        elif copy:\n            data = data.copy()\n\n        if axes is not None:\n            for i, ax in enumerate(axes):\n                data = data.reindex_axis(ax, axis=i)\n\n    object.__setattr__(self, \"_is_copy\", None)\n    object.__setattr__(self, \"_data\", data)\n    object.__setattr__(self, \"_item_cache\", {})\n    if attrs is None:\n        attrs = {}\n    else:\n        attrs = dict(attrs)\n    object.__setattr__(self, \"_attrs\", attrs)",
                "def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n    \"\"\" passed a manager and a axes dict \"\"\"\n    for a, axe in axes.items():\n        if axe is not None:\n            mgr = mgr.reindex_axis(\n                axe, axis=self._get_block_manager_axis(a), copy=False\n            )\n\n    # make a copy if explicitly requested\n    if copy:\n        mgr = mgr.copy()\n    if dtype is not None:\n        # avoid further copies if we can\n        if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n            mgr = mgr.astype(dtype=dtype)\n    return mgr",
                "@property\ndef attrs(self) -> Dict[Optional[Hashable], Any]:\n    \"\"\"\n    Dictionary of global attributes on this object.\n    \"\"\"\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
                "@attrs.setter\ndef attrs(self, value: Mapping[Optional[Hashable], Any]) -> None:\n    self._attrs = dict(value)",
                "def _validate_dtype(self, dtype):\n    \"\"\" validate the passed dtype \"\"\"\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n        # a compound dtype\n        if dtype.kind == \"V\":\n            raise NotImplementedError(\n                \"compound dtypes are not implemented\"\n                f\" in the {type(self).__name__} constructor\"\n            )\n\n    return dtype",
                "@property\ndef _constructor(self):\n    \"\"\"Used when a manipulation result has the same dimensions as the\n    original.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "@property\ndef _constructor_sliced(self):\n    \"\"\"Used when a manipulation result has one lower dimension(s) as the\n    original, such as DataFrame single columns slicing.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "@property\ndef _constructor_expanddim(self):\n    \"\"\"Used when a manipulation result has one higher dimension as the\n    original, such as Series.to_frame()\n    \"\"\"\n    raise NotImplementedError",
                "@classmethod\ndef _setup_axes(cls, axes: List[str], docs: Dict[str, str]):\n    \"\"\"\n    Provide axes setup for the major PandasObjects.\n\n    Parameters\n    ----------\n    axes : the names of the axes in order (lowest to highest)\n    docs : docstrings for the axis properties\n    \"\"\"\n    info_axis = len(axes) - 1\n    axes_are_reversed = len(axes) > 1\n\n    cls._AXIS_ORDERS = axes\n    cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n    cls._AXIS_LEN = len(axes)\n    cls._AXIS_NAMES = dict(enumerate(axes))\n    cls._AXIS_REVERSED = axes_are_reversed\n\n    cls._info_axis_number = info_axis\n    cls._info_axis_name = axes[info_axis]\n\n    # setup the actual axis\n    def set_axis(a, i):\n        setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n        cls._internal_names_set.add(a)\n\n    if axes_are_reversed:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, 1 - i)\n    else:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, i)",
                "def _construct_axes_dict(self, axes=None, **kwargs):\n    \"\"\"Return an axes dictionary for myself.\"\"\"\n    d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n    d.update(kwargs)\n    return d",
                "@staticmethod\ndef _construct_axes_dict_from(self, axes, **kwargs):\n    \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n    d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n    d.update(kwargs)\n    return d",
                "def _construct_axes_from_arguments(\n    self, args, kwargs, require_all: bool = False, sentinel=None\n):\n    \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n    If require_all, raise if all axis arguments are not supplied\n    return a tuple of (axes, kwargs).\n\n    sentinel specifies the default parameter when an axis is not\n    supplied; useful to distinguish when a user explicitly passes None\n    in scenarios where None has special meaning.\n    \"\"\"\n\n    # construct the args\n    args = list(args)\n    for a in self._AXIS_ORDERS:\n\n        # look for a argument by position\n        if a not in kwargs:\n            try:\n                kwargs[a] = args.pop(0)\n            except IndexError:\n                if require_all:\n                    raise TypeError(\"not enough/duplicate arguments specified!\")\n\n    axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n    return axes, kwargs",
                "@classmethod\ndef _from_axes(cls, data, axes, **kwargs):\n    # for construction from BlockManager\n    if isinstance(data, BlockManager):\n        return cls(data, **kwargs)\n    else:\n        if cls._AXIS_REVERSED:\n            axes = axes[::-1]\n        d = cls._construct_axes_dict_from(cls, axes, copy=False)\n        d.update(kwargs)\n        return cls(data, **d)",
                "@classmethod\ndef _get_axis_number(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if is_integer(axis):\n        if axis in cls._AXIS_NAMES:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NUMBERS[axis]\n        except KeyError:\n            pass\n    raise ValueError(f\"No axis named {axis} for object type {cls}\")",
                "@classmethod\ndef _get_axis_name(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if isinstance(axis, str):\n        if axis in cls._AXIS_NUMBERS:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NAMES[axis]\n        except KeyError:\n            pass\n    raise ValueError(f\"No axis named {axis} for object type {cls}\")",
                "def _get_axis(self, axis):\n    name = self._get_axis_name(axis)\n    return getattr(self, name)",
                "@classmethod\ndef _get_block_manager_axis(cls, axis):\n    \"\"\"Map the axis to the block_manager axis.\"\"\"\n    axis = cls._get_axis_number(axis)\n    if cls._AXIS_REVERSED:\n        m = cls._AXIS_LEN - 1\n        return m - axis\n    return axis",
                "def _get_axis_resolvers(self, axis):\n    # index or columns\n    axis_index = getattr(self, axis)\n    d = dict()\n    prefix = axis[0]\n\n    for i, name in enumerate(axis_index.names):\n        if name is not None:\n            key = level = name\n        else:\n            # prefix with 'i' or 'c' depending on the input axis\n            # e.g., you must do ilevel_0 for the 0th level of an unnamed\n            # multiiindex\n            key = f\"{prefix}level_{i}\"\n            level = i\n\n        level_values = axis_index.get_level_values(level)\n        s = level_values.to_series()\n        s.index = axis_index\n        d[key] = s\n\n    # put the index/columns itself in the dict\n    if isinstance(axis_index, MultiIndex):\n        dindex = axis_index\n    else:\n        dindex = axis_index.to_series()\n\n    d[axis] = dindex\n    return d",
                "def _get_index_resolvers(self):\n    d = {}\n    for axis_name in self._AXIS_ORDERS:\n        d.update(self._get_axis_resolvers(axis_name))\n    return d",
                "def _get_space_character_free_column_resolvers(self):\n    \"\"\"Return the space character free column resolvers of a dataframe.\n\n    Column names with spaces are 'cleaned up' so that they can be referred\n    to by backtick quoting.\n    Used in :meth:`DataFrame.eval`.\n    \"\"\"\n    from pandas.core.computation.common import _remove_spaces_column_name\n\n    return {_remove_spaces_column_name(k): v for k, v in self.items()}",
                "@property\ndef _info_axis(self):\n    return getattr(self, self._info_axis_name)",
                "@property\ndef _stat_axis(self):\n    return getattr(self, self._stat_axis_name)",
                "@property\ndef shape(self) -> Tuple[int, ...]:\n    \"\"\"\n    Return a tuple of axis dimensions\n    \"\"\"\n    return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)",
                "@property\ndef axes(self):\n    \"\"\"\n    Return index label(s) of the internal NDFrame\n    \"\"\"\n    # we do it this way because if we have reversed axes, then\n    # the block manager shows then reversed\n    return [self._get_axis(a) for a in self._AXIS_ORDERS]",
                "@property\ndef ndim(self) -> int:\n    \"\"\"\n    Return an int representing the number of axes / array dimensions.\n\n    Return 1 if Series. Otherwise return 2 if DataFrame.\n\n    See Also\n    --------\n    ndarray.ndim : Number of array dimensions.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.ndim\n    1\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.ndim\n    2\n    \"\"\"\n    return self._data.ndim",
                "@property\ndef size(self):\n    \"\"\"\n    Return an int representing the number of elements in this object.\n\n    Return the number of rows if Series. Otherwise return the number of\n    rows times number of columns if DataFrame.\n\n    See Also\n    --------\n    ndarray.size : Number of elements in the array.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.size\n    3\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.size\n    4\n    \"\"\"\n    return np.prod(self.shape)",
                "@property\ndef _selected_obj(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                "@property\ndef _obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                "def set_axis(self, labels, axis=0, inplace=False):\n    \"\"\"\n    Assign desired index to given axis.\n\n    Indexes for column or row labels can be changed by assigning\n    a list-like or Index.\n\n    .. versionchanged:: 0.21.0\n\n       The signature is now `labels` and `axis`, consistent with\n       the rest of pandas API. Previously, the `axis` and `labels`\n       arguments were respectively the first and second positional\n       arguments.\n\n    Parameters\n    ----------\n    labels : list-like, Index\n        The values for the new index.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to update. The value 0 identifies the rows, and 1\n        identifies the columns.\n\n    inplace : bool, default False\n        Whether to return a new %(klass)s instance.\n\n    Returns\n    -------\n    renamed : %(klass)s or None\n        An object of same type as caller if inplace=False, None otherwise.\n\n    See Also\n    --------\n    DataFrame.rename_axis : Alter the name of the index or columns.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n\n    >>> s.set_axis(['a', 'b', 'c'], axis=0)\n    a    1\n    b    2\n    c    3\n    dtype: int64\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n    Change the row labels.\n\n    >>> df.set_axis(['a', 'b', 'c'], axis='index')\n       A  B\n    a  1  4\n    b  2  5\n    c  3  6\n\n    Change the column labels.\n\n    >>> df.set_axis(['I', 'II'], axis='columns')\n       I  II\n    0  1   4\n    1  2   5\n    2  3   6\n\n    Now, update the labels inplace.\n\n    >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n    >>> df\n       i  ii\n    0  1   4\n    1  2   5\n    2  3   6\n    \"\"\"\n    if inplace:\n        setattr(self, self._get_axis_name(axis), labels)\n    else:\n        obj = self.copy()\n        obj.set_axis(labels, axis=axis, inplace=True)\n        return obj",
                "def _set_axis(self, axis, labels):\n    self._data.set_axis(axis, labels)\n    self._clear_item_cache()",
                "def transpose(self, *args, **kwargs):\n    \"\"\"\n    Permute the dimensions of the %(klass)s\n\n    Parameters\n    ----------\n    args : %(args_transpose)s\n    copy : bool, default False\n        Make a copy of the underlying data. Mixed-dtype data will\n        always result in a copy\n    **kwargs\n        Additional keyword arguments will be passed to the function.\n\n    Returns\n    -------\n    y : same as input\n\n    Examples\n    --------\n    >>> p.transpose(2, 0, 1)\n    >>> p.transpose(2, 0, 1, copy=True)\n    \"\"\"\n\n    # construct the args\n    axes, kwargs = self._construct_axes_from_arguments(\n        args, kwargs, require_all=True\n    )\n    axes_names = tuple(self._get_axis_name(axes[a]) for a in self._AXIS_ORDERS)\n    axes_numbers = tuple(self._get_axis_number(axes[a]) for a in self._AXIS_ORDERS)\n\n    # we must have unique axes\n    if len(axes) != len(set(axes)):\n        raise ValueError(f\"Must specify {self._AXIS_LEN} unique axes\")\n\n    new_axes = self._construct_axes_dict_from(\n        self, [self._get_axis(x) for x in axes_names]\n    )\n    new_values = self.values.transpose(axes_numbers)\n    if kwargs.pop(\"copy\", None) or (len(args) and args[-1]):\n        new_values = new_values.copy()\n\n    nv.validate_transpose(tuple(), kwargs)\n    return self._constructor(new_values, **new_axes).__finalize__(self)",
                "def swapaxes(self, axis1, axis2, copy=True):\n    \"\"\"\n    Interchange axes and swap values axes appropriately.\n\n    Returns\n    -------\n    y : same as input\n    \"\"\"\n    i = self._get_axis_number(axis1)\n    j = self._get_axis_number(axis2)\n\n    if i == j:\n        if copy:\n            return self.copy()\n        return self\n\n    mapping = {i: j, j: i}\n\n    new_axes = (self._get_axis(mapping.get(k, k)) for k in range(self._AXIS_LEN))\n    new_values = self.values.swapaxes(i, j)\n    if copy:\n        new_values = new_values.copy()\n\n    return self._constructor(new_values, *new_axes).__finalize__(self)",
                "def droplevel(self, level, axis=0):\n    \"\"\"\n    Return DataFrame with requested index / column level(s) removed.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    level : int, str, or list-like\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or positional indexes\n        of levels.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with requested index / column level(s) removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     [1, 2, 3, 4],\n    ...     [5, 6, 7, 8],\n    ...     [9, 10, 11, 12]\n    ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n    >>> df.columns = pd.MultiIndex.from_tuples([\n    ...    ('c', 'e'), ('d', 'f')\n    ... ], names=['level_1', 'level_2'])\n\n    >>> df\n    level_1   c   d\n    level_2   e   f\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n\n    >>> df.droplevel('a')\n    level_1   c   d\n    level_2   e   f\n    b\n    2        3   4\n    6        7   8\n    10      11  12\n\n    >>> df.droplevel('level2', axis=1)\n    level_1   c   d\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n    \"\"\"\n    labels = self._get_axis(axis)\n    new_labels = labels.droplevel(level)\n    result = self.set_axis(new_labels, axis=axis, inplace=False)\n    return result",
                "def pop(self, item):\n    \"\"\"\n    Return item and drop from frame. Raise KeyError if not found.\n\n    Parameters\n    ----------\n    item : str\n        Label of column to be popped.\n\n    Returns\n    -------\n    Series\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=('name', 'class', 'max_speed'))\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    >>> df.pop('class')\n    0      bird\n    1      bird\n    2    mammal\n    3    mammal\n    Name: class, dtype: object\n\n    >>> df\n         name  max_speed\n    0  falcon      389.0\n    1  parrot       24.0\n    2    lion       80.5\n    3  monkey        NaN\n    \"\"\"\n    result = self[item]\n    del self[item]\n    try:\n        result._reset_cacher()\n    except AttributeError:\n        pass\n\n    return result",
                "def squeeze(self, axis=None):\n    \"\"\"\n    Squeeze 1 dimensional axis objects into scalars.\n\n    Series or DataFrames with a single element are squeezed to a scalar.\n    DataFrames with a single column or a single row are squeezed to a\n    Series. Otherwise the object is unchanged.\n\n    This method is most useful when you don't know if your\n    object is a Series or DataFrame, but you do know it has just a single\n    column. In that case you can safely call `squeeze` to ensure you have a\n    Series.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns', None}, default None\n        A specific axis to squeeze. By default, all length-1 axes are\n        squeezed.\n\n    Returns\n    -------\n    DataFrame, Series, or scalar\n        The projection after squeezing `axis` or all the axes.\n\n    See Also\n    --------\n    Series.iloc : Integer-location based indexing for selecting scalars.\n    DataFrame.iloc : Integer-location based indexing for selecting Series.\n    Series.to_frame : Inverse of DataFrame.squeeze for a\n        single-column DataFrame.\n\n    Examples\n    --------\n    >>> primes = pd.Series([2, 3, 5, 7])\n\n    Slicing might produce a Series with a single value:\n\n    >>> even_primes = primes[primes % 2 == 0]\n    >>> even_primes\n    0    2\n    dtype: int64\n\n    >>> even_primes.squeeze()\n    2\n\n    Squeezing objects with more than one value in every axis does nothing:\n\n    >>> odd_primes = primes[primes % 2 == 1]\n    >>> odd_primes\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    >>> odd_primes.squeeze()\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    Squeezing is even more effective when used with DataFrames.\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n    >>> df\n       a  b\n    0  1  2\n    1  3  4\n\n    Slicing a single column will produce a DataFrame with the columns\n    having only one value:\n\n    >>> df_a = df[['a']]\n    >>> df_a\n       a\n    0  1\n    1  3\n\n    So the columns can be squeezed down, resulting in a Series:\n\n    >>> df_a.squeeze('columns')\n    0    1\n    1    3\n    Name: a, dtype: int64\n\n    Slicing a single row from a single column will produce a single\n    scalar DataFrame:\n\n    >>> df_0a = df.loc[df.index < 1, ['a']]\n    >>> df_0a\n       a\n    0  1\n\n    Squeezing the rows produces a single scalar Series:\n\n    >>> df_0a.squeeze('rows')\n    a    1\n    Name: 0, dtype: int64\n\n    Squeezing all axes will project directly into a scalar:\n\n    >>> df_0a.squeeze()\n    1\n    \"\"\"\n    axis = self._AXIS_NAMES if axis is None else (self._get_axis_number(axis),)\n    return self.iloc[\n        tuple(\n            0 if i in axis and len(a) == 1 else slice(None)\n            for i, a in enumerate(self.axes)\n        )\n    ]",
                "def swaplevel(self, i=-2, j=-1, axis=0):\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis\n\n    Parameters\n    ----------\n    i, j : int, str (can be mixed)\n        Level of index to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    swapped : same type as caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    result = self.copy()\n    labels = result._data.axes[axis]\n    result._data.set_axis(axis, labels.swaplevel(i, j))\n    return result",
                "def rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes input function or functions. Function / dict values must be\n    unique (1-to-1). Labels not contained in a dict / Series will be left\n    as-is. Extra labels listed don't throw an error. Alternatively, change\n    ``Series.name`` with a scalar value (Series only).\n\n    Parameters\n    ----------\n    %(axes)s : scalar, list-like, dict-like or function, optional\n        Scalar or list-like will alter the ``Series.name`` attribute,\n        and raise on DataFrame.\n        dict-like or functions are transformations to apply to\n        that axis' values\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new %(klass)s. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    renamed : %(klass)s (new object)\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    NDFrame.rename_axis\n\n    Examples\n    --------\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n    >>> s.rename(\"my_name\") # scalar, changes Series.name\n    0    1\n    1    2\n    2    3\n    Name: my_name, dtype: int64\n    >>> s.rename(lambda x: x ** 2)  # function, changes labels\n    0    1\n    1    2\n    4    3\n    dtype: int64\n    >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n    0    1\n    3    2\n    5    3\n    dtype: int64\n\n    Since ``DataFrame`` doesn't have a ``.name`` attribute,\n    only mapping-type arguments are allowed.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(2)\n    Traceback (most recent call last):\n    ...\n    TypeError: 'int' object is not callable\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n       a  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n\n    See the :ref:`user guide <basics.rename>` for more.\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    copy = kwargs.pop(\"copy\", True)\n    inplace = kwargs.pop(\"inplace\", False)\n    level = kwargs.pop(\"level\", None)\n    axis = kwargs.pop(\"axis\", None)\n    errors = kwargs.pop(\"errors\", \"ignore\")\n    if axis is not None:\n        # Validate the axis\n        self._get_axis_number(axis)\n\n    if kwargs:\n        raise TypeError(\n            \"rename() got an unexpected keyword \"\n            f'argument \"{list(kwargs.keys())[0]}\"'\n        )\n\n    if com.count_not_none(*axes.values()) == 0:\n        raise TypeError(\"must pass an index to rename\")\n\n    self._consolidate_inplace()\n    result = self if inplace else self.copy(deep=copy)\n\n    # start in the axis order to eliminate too many copies\n    for axis in range(self._AXIS_LEN):\n        v = axes.get(self._AXIS_NAMES[axis])\n        if v is None:\n            continue\n        f = com.get_rename_function(v)\n        baxis = self._get_block_manager_axis(axis)\n        if level is not None:\n            level = self.axes[axis]._get_level_number(level)\n\n        # GH 13473\n        if not callable(v):\n            indexer = self.axes[axis].get_indexer_for(v)\n            if errors == \"raise\" and len(indexer[indexer == -1]):\n                missing_labels = [\n                    label for index, label in enumerate(v) if indexer[index] == -1\n                ]\n                raise KeyError(f\"{missing_labels} not found in axis\")\n\n        result._data = result._data.rename_axis(\n            f, axis=baxis, copy=copy, level=level\n        )\n        result._clear_item_cache()\n\n    if inplace:\n        self._update_inplace(result._data)\n    else:\n        return result.__finalize__(self)",
                "@rewrite_axis_style_signature(\"mapper\", [(\"copy\", True), (\"inplace\", False)])\ndef rename_axis(self, mapper=sentinel, **kwargs):\n    \"\"\"\n    Set the name of the axis for the index or columns.\n\n    Parameters\n    ----------\n    mapper : scalar, list-like, optional\n        Value to set the axis name attribute.\n    index, columns : scalar, list-like, dict-like or function, optional\n        A scalar, list-like, dict-like or functions transformations to\n        apply to that axis' values.\n\n        Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index``\n        and/or ``columns``.\n\n        .. versionchanged:: 0.24.0\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to rename.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Series\n        or DataFrame.\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or None if `inplace` is True.\n\n    See Also\n    --------\n    Series.rename : Alter Series index labels or name.\n    DataFrame.rename : Alter DataFrame index labels or name.\n    Index.rename : Set new names on index.\n\n    Notes\n    -----\n    ``DataFrame.rename_axis`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    The first calling convention will only modify the names of\n    the index and/or the names of the Index object that is the columns.\n    In this case, the parameter ``copy`` is ignored.\n\n    The second calling convention will modify the names of the\n    the corresponding index if mapper is a list or a scalar.\n    However, if mapper is dict-like or a function, it will use the\n    deprecated behavior of modifying the axis *labels*.\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n    >>> s\n    0       dog\n    1       cat\n    2    monkey\n    dtype: object\n    >>> s.rename_axis(\"animal\")\n    animal\n    0    dog\n    1    cat\n    2    monkey\n    dtype: object\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n    ...                    \"num_arms\": [0, 0, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs  num_arms\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"animal\")\n    >>> df\n            num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n    >>> df\n    limbs   num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n\n    **MultiIndex**\n\n    >>> df.index = pd.MultiIndex.from_product([['mammal'],\n    ...                                        ['dog', 'cat', 'monkey']],\n    ...                                       names=['type', 'name'])\n    >>> df\n    limbs          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(index={'type': 'class'})\n    limbs          num_legs  num_arms\n    class  name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(columns=str.upper)\n    LIMBS          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(\n        (), kwargs, sentinel=sentinel\n    )\n    copy = kwargs.pop(\"copy\", True)\n    inplace = kwargs.pop(\"inplace\", False)\n    axis = kwargs.pop(\"axis\", 0)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n\n    if kwargs:\n        raise TypeError(\n            \"rename_axis() got an unexpected keyword \"\n            f'argument \"{list(kwargs.keys())[0]}\"'\n        )\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    if mapper is not sentinel:\n        # Use v0.23 behavior if a scalar or list\n        non_mapper = is_scalar(mapper) or (\n            is_list_like(mapper) and not is_dict_like(mapper)\n        )\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            raise ValueError(\"Use `.rename` to alter labels with a mapper.\")\n    else:\n        # Use new behavior.  Means that index and/or columns\n        # is specified\n        result = self if inplace else self.copy(deep=copy)\n\n        for axis in range(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is sentinel:\n                continue\n            non_mapper = is_scalar(v) or (is_list_like(v) and not is_dict_like(v))\n            if non_mapper:\n                newnames = v\n            else:\n                f = com.get_rename_function(v)\n                curnames = self._get_axis(axis).names\n                newnames = [f(name) for name in curnames]\n            result._set_axis_name(newnames, axis=axis, inplace=True)\n        if not inplace:\n            return result",
                "def _set_axis_name(self, name, axis=0, inplace=False):\n    \"\"\"\n    Set the name(s) of the axis.\n\n    Parameters\n    ----------\n    name : str or list of str\n        Name(s) to set.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to set the label. The value 0 or 'index' specifies index,\n        and the value 1 or 'columns' specifies columns.\n    inplace : bool, default False\n        If `True`, do operation inplace and return None.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or `None` if `inplace` is `True`.\n\n    See Also\n    --------\n    DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n    Series.rename : Alter the index labels or set the index name\n        of :class:`Series`.\n    Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs\n    dog            4\n    cat            4\n    monkey         2\n    >>> df._set_axis_name(\"animal\")\n            num_legs\n    animal\n    dog            4\n    cat            4\n    monkey         2\n    >>> df.index = pd.MultiIndex.from_product(\n    ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n    >>> df._set_axis_name([\"type\", \"name\"])\n                   legs\n    type   name\n    mammal dog        4\n           cat        4\n           monkey     2\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    idx = self._get_axis(axis).set_names(name)\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    renamed = self if inplace else self.copy()\n    renamed.set_axis(idx, axis=axis, inplace=True)\n    if not inplace:\n        return renamed",
                "def _indexed_same(self, other) -> bool:\n    return all(\n        self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n    )",
                "def equals(self, other):\n    \"\"\"\n    Test whether two objects contain the same elements.\n\n    This function allows two Series or DataFrames to be compared against\n    each other to see if they have the same shape and elements. NaNs in\n    the same location are considered equal. The column headers do not\n    need to have the same type, but the elements within the columns must\n    be the same dtype.\n\n    Parameters\n    ----------\n    other : Series or DataFrame\n        The other Series or DataFrame to be compared with the first.\n\n    Returns\n    -------\n    bool\n        True if all elements are the same in both objects, False\n        otherwise.\n\n    See Also\n    --------\n    Series.eq : Compare two Series objects of the same length\n        and return a Series where each element is True if the element\n        in each Series is equal, False otherwise.\n    DataFrame.eq : Compare two DataFrame objects of the same shape and\n        return a DataFrame where each element is True if the respective\n        element in each DataFrame is equal, False otherwise.\n    testing.assert_series_equal : Raises an AssertionError if left and\n        right are not equal. Provides an easy interface to ignore\n        inequality in dtypes, indexes and precision among others.\n    testing.assert_frame_equal : Like assert_series_equal, but targets\n        DataFrames.\n    numpy.array_equal : Return True if two arrays have the same shape\n        and elements, False otherwise.\n\n    Notes\n    -----\n    This function requires that the elements have the same dtype as their\n    respective elements in the other Series or DataFrame. However, the\n    column labels do not need to have the same type, as long as they are\n    still considered equal.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({1: [10], 2: [20]})\n    >>> df\n        1   2\n    0  10  20\n\n    DataFrames df and exactly_equal have the same types and values for\n    their elements and column labels, which will return True.\n\n    >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n    >>> exactly_equal\n        1   2\n    0  10  20\n    >>> df.equals(exactly_equal)\n    True\n\n    DataFrames df and different_column_type have the same element\n    types and values, but have different types for the column labels,\n    which will still return True.\n\n    >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n    >>> different_column_type\n       1.0  2.0\n    0   10   20\n    >>> df.equals(different_column_type)\n    True\n\n    DataFrames df and different_data_type have different types for the\n    same values for their elements, and will return False even though\n    their column labels are the same values and types.\n\n    >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n    >>> different_data_type\n          1     2\n    0  10.0  20.0\n    >>> df.equals(different_data_type)\n    False\n    \"\"\"\n    if not isinstance(other, self._constructor):\n        return False\n    return self._data.equals(other._data)",
                "def __neg__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values):\n        arr = operator.inv(values)\n    elif (\n        is_numeric_dtype(values)\n        or is_timedelta64_dtype(values)\n        or is_object_dtype(values)\n    ):\n        arr = operator.neg(values)\n    else:\n        raise TypeError(f\"Unary negative expects numeric dtype, not {values.dtype}\")\n    return self.__array_wrap__(arr)",
                "def __pos__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values) or is_period_arraylike(values):\n        arr = values\n    elif (\n        is_numeric_dtype(values)\n        or is_timedelta64_dtype(values)\n        or is_object_dtype(values)\n    ):\n        arr = operator.pos(values)\n    else:\n        raise TypeError(f\"Unary plus expects numeric dtype, not {values.dtype}\")\n    return self.__array_wrap__(arr)",
                "def __invert__(self):\n    if not self.size:\n        # inv fails with 0 len\n        return self\n\n    arr = operator.inv(com.values_from_object(self))\n    return self.__array_wrap__(arr)",
                "def __nonzero__(self):\n    raise ValueError(\n        f\"The truth value of a {type(self).__name__} is ambiguous. \"\n        \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n    )",
                "def bool(self):\n    \"\"\"\n    Return the bool of a single element PandasObject.\n\n    This must be a boolean scalar value, either True or False.  Raise a\n    ValueError if the PandasObject does not have exactly 1 element, or that\n    element is not boolean\n\n    Returns\n    -------\n    bool\n        Same single boolean value converted to bool type.\n    \"\"\"\n    v = self.squeeze()\n    if isinstance(v, (bool, np.bool_)):\n        return bool(v)\n    elif is_scalar(v):\n        raise ValueError(\n            \"bool cannot act on a non-boolean single element \"\n            f\"{type(self).__name__}\"\n        )\n\n    self.__nonzero__()",
                "def __abs__(self):\n    return self.abs()",
                "def __round__(self, decimals=0):\n    return self.round(decimals)",
                "def _is_level_reference(self, key, axis=0):\n    \"\"\"\n    Test whether a key is a level reference for a given axis.\n\n    To be considered a level reference, `key` must be a string that:\n      - (axis=0): Matches the name of an index level and does NOT match\n        a column label.\n      - (axis=1): Matches the name of a column level and does NOT match\n        an index label.\n\n    Parameters\n    ----------\n    key : str\n        Potential level name for the given axis\n    axis : int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_level : bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n\n    return (\n        key is not None\n        and is_hashable(key)\n        and key in self.axes[axis].names\n        and not self._is_label_reference(key, axis=axis)\n    )",
                "def _is_label_reference(self, key, axis=0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label reference for a given axis.\n\n    To be considered a label reference, `key` must be a string that:\n      - (axis=0): Matches a column label\n      - (axis=1): Matches an index label\n\n    Parameters\n    ----------\n    key: str\n        Potential label name\n    axis: int, default 0\n        Axis perpendicular to the axis that labels are associated with\n        (0 means search for column labels, 1 means search for index labels)\n\n    Returns\n    -------\n    is_label: bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n    return (\n        key is not None\n        and is_hashable(key)\n        and any(key in self.axes[ax] for ax in other_axes)\n    )",
                "def _is_label_or_level_reference(self, key: str, axis: int = 0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label or level reference for a given axis.\n\n    To be considered either a label or a level reference, `key` must be a\n    string that:\n      - (axis=0): Matches a column label or an index level\n      - (axis=1): Matches an index label or a column level\n\n    Parameters\n    ----------\n    key: str\n        Potential label or level name\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_label_or_level: bool\n    \"\"\"\n    return self._is_level_reference(key, axis=axis) or self._is_label_reference(\n        key, axis=axis\n    )",
                "def _check_label_or_level_ambiguity(self, key, axis: int = 0) -> None:\n    \"\"\"\n    Check whether `key` is ambiguous.\n\n    By ambiguous, we mean that it matches both a level of the input\n    `axis` and a label of the other axis.\n\n    Parameters\n    ----------\n    key: str or object\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns).\n\n    Raises\n    ------\n    ValueError: `key` is ambiguous\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n    if (\n        key is not None\n        and is_hashable(key)\n        and key in self.axes[axis].names\n        and any(key in self.axes[ax] for ax in other_axes)\n    ):\n\n        # Build an informative and grammatical warning\n        level_article, level_type = (\n            (\"an\", \"index\") if axis == 0 else (\"a\", \"column\")\n        )\n\n        label_article, label_type = (\n            (\"a\", \"column\") if axis == 0 else (\"an\", \"index\")\n        )\n\n        msg = (\n            f\"'{key}' is both {level_article} {level_type} level and \"\n            f\"{label_article} {label_type} label, which is ambiguous.\"\n        )\n        raise ValueError(msg)",
                "def _get_label_or_level_values(self, key: str, axis: int = 0) -> np.ndarray:\n    \"\"\"\n    Return a 1-D array of values associated with `key`, a label or level\n    from the given `axis`.\n\n    Retrieval logic:\n      - (axis=0): Return column values if `key` matches a column label.\n        Otherwise return index level values if `key` matches an index\n        level.\n      - (axis=1): Return row values if `key` matches an index label.\n        Otherwise return column level values if 'key' matches a column\n        level\n\n    Parameters\n    ----------\n    key: str\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    values: np.ndarray\n\n    Raises\n    ------\n    KeyError\n        if `key` matches neither a label nor a level\n    ValueError\n        if `key` matches multiple labels\n    FutureWarning\n        if `key` is ambiguous. This will become an ambiguity error in a\n        future version\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n    if self._is_label_reference(key, axis=axis):\n        self._check_label_or_level_ambiguity(key, axis=axis)\n        values = self.xs(key, axis=other_axes[0])._values\n    elif self._is_level_reference(key, axis=axis):\n        values = self.axes[axis].get_level_values(key)._values\n    else:\n        raise KeyError(key)\n\n    # Check for duplicates\n    if values.ndim > 1:\n\n        if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n            multi_message = (\n                \"\\n\"\n                \"For a multi-index, the label must be a \"\n                \"tuple with elements corresponding to \"\n                \"each level.\"\n            )\n        else:\n            multi_message = \"\"\n\n        label_axis_name = \"column\" if axis == 0 else \"index\"\n        raise ValueError(\n            (\n                f\"The {label_axis_name} label '{key}' \"\n                f\"is not unique.{multi_message}\"\n            )\n        )\n\n    return values",
                "def _drop_labels_or_levels(self, keys, axis: int = 0):\n    \"\"\"\n    Drop labels and/or levels for the given `axis`.\n\n    For each key in `keys`:\n      - (axis=0): If key matches a column label then drop the column.\n        Otherwise if key matches an index level then drop the level.\n      - (axis=1): If key matches an index label then drop the row.\n        Otherwise if key matches a column level then drop the level.\n\n    Parameters\n    ----------\n    keys: str or list of str\n        labels or levels to drop\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    dropped: DataFrame\n\n    Raises\n    ------\n    ValueError\n        if any `keys` match neither a label nor a level\n    \"\"\"\n    axis = self._get_axis_number(axis)\n\n    # Validate keys\n    keys = com.maybe_make_list(keys)\n    invalid_keys = [\n        k for k in keys if not self._is_label_or_level_reference(k, axis=axis)\n    ]\n\n    if invalid_keys:\n        raise ValueError(\n            (\n                \"The following keys are not valid labels or \"\n                f\"levels for axis {axis}: {invalid_keys}\"\n            )\n        )\n\n    # Compute levels and labels to drop\n    levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n\n    labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n\n    # Perform copy upfront and then use inplace operations below.\n    # This ensures that we always perform exactly one copy.\n    # ``copy`` and/or ``inplace`` options could be added in the future.\n    dropped = self.copy()\n\n    if axis == 0:\n        # Handle dropping index levels\n        if levels_to_drop:\n            dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n        # Handle dropping columns labels\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=1, inplace=True)\n    else:\n        # Handle dropping column levels\n        if levels_to_drop:\n            if isinstance(dropped.columns, MultiIndex):\n                # Drop the specified levels from the MultiIndex\n                dropped.columns = dropped.columns.droplevel(levels_to_drop)\n            else:\n                # Drop the last level of Index by replacing with\n                # a RangeIndex\n                dropped.columns = RangeIndex(dropped.columns.size)\n\n        # Handle dropping index labels\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n    return dropped",
                "def __hash__(self):\n    raise TypeError(\n        f\"{repr(type(self).__name__)} objects are mutable, \"\n        f\"thus they cannot be hashed\"\n    )",
                "def __iter__(self):\n    \"\"\"\n    Iterate over info axis.\n\n    Returns\n    -------\n    iterator\n        Info axis as iterator.\n    \"\"\"\n    return iter(self._info_axis)",
                "def keys(self):\n    \"\"\"\n    Get the 'info axis' (see Indexing for more).\n\n    This is index for Series, columns for DataFrame.\n\n    Returns\n    -------\n    Index\n        Info axis.\n    \"\"\"\n    return self._info_axis",
                "def items(self):\n    \"\"\"Iterate over (label, values) on info axis\n\n    This is index for Series and columns for DataFrame.\n\n    Returns\n    -------\n    Generator\n    \"\"\"\n    for h in self._info_axis:\n        yield h, self[h]",
                "@Appender(items.__doc__)\ndef iteritems(self):\n    return self.items()",
                "def __len__(self) -> int:\n    \"\"\"Returns length of info axis\"\"\"\n    return len(self._info_axis)",
                "def __contains__(self, key) -> bool_t:\n    \"\"\"True if the key is in the info axis\"\"\"\n    return key in self._info_axis",
                "@property\ndef empty(self) -> bool_t:\n    \"\"\"\n    Indicator whether DataFrame is empty.\n\n    True if DataFrame is entirely empty (no items), meaning any of the\n    axes are of length 0.\n\n    Returns\n    -------\n    bool\n        If DataFrame is empty, return True, if not return False.\n\n    See Also\n    --------\n    Series.dropna\n    DataFrame.dropna\n\n    Notes\n    -----\n    If DataFrame contains only NaNs, it is still not considered empty. See\n    the example below.\n\n    Examples\n    --------\n    An example of an actual empty DataFrame. Notice the index is empty:\n\n    >>> df_empty = pd.DataFrame({'A' : []})\n    >>> df_empty\n    Empty DataFrame\n    Columns: [A]\n    Index: []\n    >>> df_empty.empty\n    True\n\n    If we only have NaNs in our DataFrame, it is not considered empty! We\n    will need to drop the NaNs to make the DataFrame empty:\n\n    >>> df = pd.DataFrame({'A' : [np.nan]})\n    >>> df\n        A\n    0 NaN\n    >>> df.empty\n    False\n    >>> df.dropna().empty\n    True\n    \"\"\"\n    return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)",
                "def __array__(self, dtype=None):\n    return com.values_from_object(self)",
                "def __array_wrap__(self, result, context=None):\n    result = lib.item_from_zerodim(result)\n    if is_scalar(result):\n        # e.g. we get here with np.ptp(series)\n        # ptp also requires the item_from_zerodim\n        return result\n    d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n    return self._constructor(result, **d).__finalize__(self)",
                "def __getstate__(self) -> Dict[str, Any]:\n    meta = {k: getattr(self, k, None) for k in self._metadata}\n    return dict(\n        _data=self._data,\n        _typ=self._typ,\n        _metadata=self._metadata,\n        attrs=self.attrs,\n        **meta,\n    )",
                "def __setstate__(self, state):\n\n    if isinstance(state, BlockManager):\n        self._data = state\n    elif isinstance(state, dict):\n        typ = state.get(\"_typ\")\n        if typ is not None:\n            attrs = state.get(\"_attrs\", {})\n            object.__setattr__(self, \"_attrs\", attrs)\n\n            # set in the order of internal names\n            # to avoid definitional recursion\n            # e.g. say fill_value needing _data to be\n            # defined\n            meta = set(self._internal_names + self._metadata)\n            for k in list(meta):\n                if k in state:\n                    v = state[k]\n                    object.__setattr__(self, k, v)\n\n            for k, v in state.items():\n                if k not in meta:\n                    object.__setattr__(self, k, v)\n\n        else:\n            self._unpickle_series_compat(state)\n    elif len(state) == 2:\n        self._unpickle_series_compat(state)\n\n    self._item_cache = {}",
                "def __repr__(self) -> str:\n    # string representation based upon iterating over self\n    # (since, by definition, `PandasContainers` are iterable)\n    prepr = f\"[{','.join(map(pprint_thing, self))}]\"\n    return f\"{type(self).__name__}({prepr})\"",
                "def _repr_latex_(self):\n    \"\"\"\n    Returns a LaTeX representation for a particular object.\n    Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n    \"\"\"\n    if config.get_option(\"display.latex.repr\"):\n        return self.to_latex()\n    else:\n        return None",
                "def _repr_data_resource_(self):\n    \"\"\"\n    Not a real Jupyter special repr method, but we use the same\n    naming convention.\n    \"\"\"\n    if config.get_option(\"display.html.table_schema\"):\n        data = self.head(config.get_option(\"display.max_rows\"))\n        payload = json.loads(\n            data.to_json(orient=\"table\"), object_pairs_hook=collections.OrderedDict\n        )\n        return payload",
                "@Appender(_shared_docs[\"to_excel\"] % dict(klass=\"object\"))\ndef to_excel(\n    self,\n    excel_writer,\n    sheet_name=\"Sheet1\",\n    na_rep=\"\",\n    float_format=None,\n    columns=None,\n    header=True,\n    index=True,\n    index_label=None,\n    startrow=0,\n    startcol=0,\n    engine=None,\n    merge_cells=True,\n    encoding=None,\n    inf_rep=\"inf\",\n    verbose=True,\n    freeze_panes=None,\n):\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n    from pandas.io.formats.excel import ExcelFormatter\n\n    formatter = ExcelFormatter(\n        df,\n        na_rep=na_rep,\n        cols=columns,\n        header=header,\n        float_format=float_format,\n        index=index,\n        index_label=index_label,\n        merge_cells=merge_cells,\n        inf_rep=inf_rep,\n    )\n    formatter.write(\n        excel_writer,\n        sheet_name=sheet_name,\n        startrow=startrow,\n        startcol=startcol,\n        freeze_panes=freeze_panes,\n        engine=engine,\n    )",
                "def to_json(\n    self,\n    path_or_buf: Optional[FilePathOrBuffer] = None,\n    orient: Optional[str] = None,\n    date_format: Optional[str] = None,\n    double_precision: int = 10,\n    force_ascii: bool_t = True,\n    date_unit: str = \"ms\",\n    default_handler: Optional[Callable[[Any], JSONSerializable]] = None,\n    lines: bool_t = False,\n    compression: Optional[str] = \"infer\",\n    index: bool_t = True,\n    indent: Optional[int] = None,\n) -> Optional[str]:\n    \"\"\"\n    Convert the object to a JSON string.\n\n    Note NaN's and None will be converted to null and datetime objects\n    will be converted to UNIX timestamps.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, optional\n        File path or object. If not specified, the result is returned as\n        a string.\n    orient : str\n        Indication of expected JSON string format.\n\n        * Series:\n\n            - default is 'index'\n            - allowed values are: {'split','records','index','table'}.\n\n        * DataFrame:\n\n            - default is 'columns'\n            - allowed values are: {'split', 'records', 'index', 'columns',\n              'values', 'table'}.\n\n        * The format of the JSON string:\n\n            - 'split' : dict like {'index' -> [index], 'columns' -> [columns],\n              'data' -> [values]}\n            - 'records' : list like [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n            - 'columns' : dict like {column -> {index -> value}}\n            - 'values' : just the values array\n            - 'table' : dict like {'schema': {schema}, 'data': {data}}\n\n            Describing the data, where data component is like ``orient='records'``.\n\n        .. versionchanged:: 0.20.0\n\n    date_format : {None, 'epoch', 'iso'}\n        Type of date conversion. 'epoch' = epoch milliseconds,\n        'iso' = ISO8601. The default depends on the `orient`. For\n        ``orient='table'``, the default is 'iso'. For all other orients,\n        the default is 'epoch'.\n    double_precision : int, default 10\n        The number of decimal places to use when encoding\n        floating point values.\n    force_ascii : bool, default True\n        Force encoded string to be ASCII.\n    date_unit : str, default 'ms' (milliseconds)\n        The time unit to encode to, governs timestamp and ISO8601\n        precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n        microsecond, and nanosecond respectively.\n    default_handler : callable, default None\n        Handler to call if object cannot otherwise be converted to a\n        suitable format for JSON. Should receive a single argument which is\n        the object to convert and return a serialisable object.\n    lines : bool, default False\n        If 'orient' is 'records' write out line delimited json format. Will\n        throw ValueError if incorrect 'orient' since others are not list\n        like.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n        A string representing the compression to use in the output file,\n        only used when the first argument is a filename. By default, the\n        compression is inferred from the filename.\n\n        .. versionadded:: 0.21.0\n        .. versionchanged:: 0.24.0\n           'infer' option added and set to default\n    index : bool, default True\n        Whether to include the index values in the JSON string. Not\n        including the index (``index=False``) is only supported when\n        orient is 'split' or 'table'.\n\n        .. versionadded:: 0.23.0\n\n    indent : int, optional\n       Length of whitespace used to indent each record.\n\n       .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting json format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_json\n\n    Notes\n    -----\n    The behavior of ``indent=0`` varies from the stdlib, which does not\n    indent the output but does insert newlines. Currently, ``indent=0``\n    and the default ``indent=None`` are equivalent in pandas, though this\n    may change in a future release.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n    ...                   index=['row 1', 'row 2'],\n    ...                   columns=['col 1', 'col 2'])\n    >>> df.to_json(orient='split')\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n    Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n    Note that index labels are not preserved with this encoding.\n\n    >>> df.to_json(orient='records')\n    '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n    Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n    >>> df.to_json(orient='index')\n    '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n    >>> df.to_json(orient='columns')\n    '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n    >>> df.to_json(orient='values')\n    '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n    Encoding with Table Schema\n\n    >>> df.to_json(orient='table')\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n    \"\"\"\n\n    from pandas.io import json\n\n    if date_format is None and orient == \"table\":\n        date_format = \"iso\"\n    elif date_format is None:\n        date_format = \"epoch\"\n\n    config.is_nonnegative_int(indent)\n    indent = indent or 0\n\n    return json.to_json(\n        path_or_buf=path_or_buf,\n        obj=self,\n        orient=orient,\n        date_format=date_format,\n        double_precision=double_precision,\n        force_ascii=force_ascii,\n        date_unit=date_unit,\n        default_handler=default_handler,\n        lines=lines,\n        compression=compression,\n        index=index,\n        indent=indent,\n    )",
                "def to_hdf(\n    self,\n    path_or_buf,\n    key: str,\n    mode: str = \"a\",\n    complevel: Optional[int] = None,\n    complib: Optional[str] = None,\n    append: bool_t = False,\n    format: Optional[str] = None,\n    index: bool_t = True,\n    min_itemsize: Optional[Union[int, Dict[str, int]]] = None,\n    nan_rep=None,\n    dropna: Optional[bool_t] = None,\n    data_columns: Optional[List[str]] = None,\n    errors: str = \"strict\",\n    encoding: str = \"UTF-8\",\n):\n    \"\"\"\n    Write the contained data to an HDF5 file using HDFStore.\n\n    Hierarchical Data Format (HDF) is self-describing, allowing an\n    application to interpret the structure and contents of a file with\n    no outside information. One HDF file can hold a mix of related objects\n    which can be accessed as a group or as individual objects.\n\n    In order to add another DataFrame or Series to an existing HDF file\n    please use append mode and a different a key.\n\n    For more information see the :ref:`user guide <io.hdf5>`.\n\n    Parameters\n    ----------\n    path_or_buf : str or pandas.HDFStore\n        File path or HDFStore object.\n    key : str\n        Identifier for the group in the store.\n    mode : {'a', 'w', 'r+'}, default 'a'\n        Mode to open file:\n\n        - 'w': write, a new file is created (an existing file with\n          the same name would be deleted).\n        - 'a': append, an existing file is opened for reading and\n          writing, and if the file does not exist it is created.\n        - 'r+': similar to 'a', but the file must already exist.\n    complevel : {0-9}, optional\n        Specifies a compression level for data.\n        A value of 0 disables compression.\n    complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n        Specifies the compression library to be used.\n        As of v0.20.2 these additional compressors for Blosc are supported\n        (default if no compressor specified: 'blosc:blosclz'):\n        {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n        'blosc:zlib', 'blosc:zstd'}.\n        Specifying a compression library which is not available issues\n        a ValueError.\n    append : bool, default False\n        For Table formats, append the input data to the existing.\n    format : {'fixed', 'table', None}, default 'fixed'\n        Possible values:\n\n        - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n          nor searchable.\n        - 'table': Table format. Write as a PyTables Table structure\n          which may perform worse but allow more flexible operations\n          like searching / selecting subsets of the data.\n        - If None, pd.get_option('io.hdf.default_format') is checked,\n          followed by fallback to \"fixed\"\n    errors : str, default 'strict'\n        Specifies how encoding and decoding errors are to be handled.\n        See the errors argument for :func:`open` for a full list\n        of options.\n    encoding : str, default \"UTF-8\"\n    min_itemsize : dict or int, optional\n        Map column names to minimum string sizes for columns.\n    nan_rep : Any, optional\n        How to represent null values as str.\n        Not allowed with append=True.\n    data_columns : list of columns or True, optional\n        List of columns to create as indexed data columns for on-disk\n        queries, or True to use all columns. By default only the axes\n        of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n        Applicable only to format='table'.\n\n    See Also\n    --------\n    DataFrame.read_hdf : Read from HDF file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_feather : Write out feather-format for DataFrames.\n    DataFrame.to_csv : Write out to a csv file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n    ...                   index=['a', 'b', 'c'])\n    >>> df.to_hdf('data.h5', key='df', mode='w')\n\n    We can add another object to the same file:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.to_hdf('data.h5', key='s')\n\n    Reading from HDF file:\n\n    >>> pd.read_hdf('data.h5', 'df')\n    A  B\n    a  1  4\n    b  2  5\n    c  3  6\n    >>> pd.read_hdf('data.h5', 's')\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    Deleting file with data:\n\n    >>> import os\n    >>> os.remove('data.h5')\n    \"\"\"\n    from pandas.io import pytables\n\n    pytables.to_hdf(\n        path_or_buf,\n        key,\n        self,\n        mode=mode,\n        complevel=complevel,\n        complib=complib,\n        append=append,\n        format=format,\n        index=index,\n        min_itemsize=min_itemsize,\n        nan_rep=nan_rep,\n        dropna=dropna,\n        data_columns=data_columns,\n        errors=errors,\n        encoding=encoding,\n    )",
                "def to_sql(\n    self,\n    name: str,\n    con,\n    schema=None,\n    if_exists: str = \"fail\",\n    index: bool_t = True,\n    index_label=None,\n    chunksize=None,\n    dtype=None,\n    method=None,\n) -> None:\n    \"\"\"\n    Write records stored in a DataFrame to a SQL database.\n\n    Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n    newly created, appended to, or overwritten.\n\n    Parameters\n    ----------\n    name : str\n        Name of SQL table.\n    con : sqlalchemy.engine.Engine or sqlite3.Connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library. Legacy support is provided for sqlite3.Connection objects. The user\n        is responsible for engine disposal and connection closure for the SQLAlchemy\n        connectable See `here \\\n            <https://docs.sqlalchemy.org/en/13/core/connections.html>`_\n\n    schema : str, optional\n        Specify the schema (if database flavor supports this). If None, use\n        default schema.\n    if_exists : {'fail', 'replace', 'append'}, default 'fail'\n        How to behave if the table already exists.\n\n        * fail: Raise a ValueError.\n        * replace: Drop the table before inserting new values.\n        * append: Insert new values to the existing table.\n\n    index : bool, default True\n        Write DataFrame index as a column. Uses `index_label` as the column\n        name in the table.\n    index_label : str or sequence, default None\n        Column label for index column(s). If None is given (default) and\n        `index` is True, then the index names are used.\n        A sequence should be given if the DataFrame uses MultiIndex.\n    chunksize : int, optional\n        Specify the number of rows in each batch to be written at a time.\n        By default, all rows will be written at once.\n    dtype : dict or scalar, optional\n        Specifying the datatype for columns. If a dictionary is used, the\n        keys should be the column names and the values should be the\n        SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n        scalar is provided, it will be applied to all columns.\n    method : {None, 'multi', callable}, optional\n        Controls the SQL insertion clause used:\n\n        * None : Uses standard SQL ``INSERT`` clause (one per row).\n        * 'multi': Pass multiple values in a single ``INSERT`` clause.\n        * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n        Details and a sample callable implementation can be found in the\n        section :ref:`insert method <io.sql.method>`.\n\n        .. versionadded:: 0.24.0\n\n    Raises\n    ------\n    ValueError\n        When the table already exists and `if_exists` is 'fail' (the\n        default).\n\n    See Also\n    --------\n    read_sql : Read a DataFrame from a table.\n\n    Notes\n    -----\n    Timezone aware datetime columns will be written as\n    ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n    database. Otherwise, the datetimes will be stored as timezone unaware\n    timestamps local to the original timezone.\n\n    .. versionadded:: 0.24.0\n\n    References\n    ----------\n    .. [1] http://docs.sqlalchemy.org\n    .. [2] https://www.python.org/dev/peps/pep-0249/\n\n    Examples\n    --------\n\n    Create an in-memory SQLite database.\n\n    >>> from sqlalchemy import create_engine\n    >>> engine = create_engine('sqlite://', echo=False)\n\n    Create a table from scratch with 3 rows.\n\n    >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n    >>> df\n         name\n    0  User 1\n    1  User 2\n    2  User 3\n\n    >>> df.to_sql('users', con=engine)\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n    >>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n    >>> df1.to_sql('users', con=engine, if_exists='append')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n     (0, 'User 4'), (1, 'User 5')]\n\n    Overwrite the table with just ``df1``.\n\n    >>> df1.to_sql('users', con=engine, if_exists='replace',\n    ...            index_label='id')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 4'), (1, 'User 5')]\n\n    Specify the dtype (especially useful for integers with missing values).\n    Notice that while pandas is forced to store the data as floating point,\n    the database supports nullable integers. When fetching the data with\n    Python, we get back integer scalars.\n\n    >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n    >>> df\n         A\n    0  1.0\n    1  NaN\n    2  2.0\n\n    >>> from sqlalchemy.types import Integer\n    >>> df.to_sql('integers', con=engine, index=False,\n    ...           dtype={\"A\": Integer()})\n\n    >>> engine.execute(\"SELECT * FROM integers\").fetchall()\n    [(1,), (None,), (2,)]\n    \"\"\"\n    from pandas.io import sql\n\n    sql.to_sql(\n        self,\n        name,\n        con,\n        schema=schema,\n        if_exists=if_exists,\n        index=index,\n        index_label=index_label,\n        chunksize=chunksize,\n        dtype=dtype,\n        method=method,\n    )",
                "def to_pickle(\n    self,\n    path,\n    compression: Optional[str] = \"infer\",\n    protocol: int = pickle.HIGHEST_PROTOCOL,\n) -> None:\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    path : str\n        File path where the pickled object will be stored.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, \\\n    default 'infer'\n        A string representing the compression to use in the output file. By\n        default, infers from the file extension in specified path.\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n        values are 0, 1, 2, 3, 4. A negative value for the protocol\n        parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html.\n        .. versionadded:: 0.21.0.\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> original_df.to_pickle(\"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    from pandas.io.pickle import to_pickle\n\n    to_pickle(self, path, compression=compression, protocol=protocol)",
                "def to_clipboard(self, excel: bool_t = True, sep: Optional[str] = None, **kwargs):\n    r\"\"\"\n    Copy object to the system clipboard.\n\n    Write a text representation of object to the system clipboard.\n    This can be pasted into Excel, for example.\n\n    Parameters\n    ----------\n    excel : bool, default True\n        Produce output in a csv format for easy pasting into excel.\n\n        - True, use the provided separator for csv pasting.\n        - False, write a string representation of the object to the clipboard.\n\n    sep : str, default ``'\\t'``\n        Field delimiter.\n    **kwargs\n        These parameters will be passed to DataFrame.to_csv.\n\n    See Also\n    --------\n    DataFrame.to_csv : Write a DataFrame to a comma-separated values\n        (csv) file.\n    read_clipboard : Read text from clipboard and pass to read_table.\n\n    Notes\n    -----\n    Requirements for your platform.\n\n      - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n      - Windows : none\n      - OS X : none\n\n    Examples\n    --------\n    Copy the contents of a DataFrame to the clipboard.\n\n    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n    >>> df.to_clipboard(sep=',')\n    ... # Wrote the following to the system clipboard:\n    ... # ,A,B,C\n    ... # 0,1,2,3\n    ... # 1,4,5,6\n\n    We can omit the the index by passing the keyword `index` and setting\n    it to false.\n\n    >>> df.to_clipboard(sep=',', index=False)\n    ... # Wrote the following to the system clipboard:\n    ... # A,B,C\n    ... # 1,2,3\n    ... # 4,5,6\n    \"\"\"\n    from pandas.io import clipboards\n\n    clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)",
                "def to_xarray(self):\n    \"\"\"\n    Return an xarray object from the pandas object.\n\n    Returns\n    -------\n    xarray.DataArray or xarray.Dataset\n        Data in the pandas structure converted to Dataset if the object is\n        a DataFrame, or a DataArray if the object is a Series.\n\n    See Also\n    --------\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Notes\n    -----\n    See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n    ...                    ('parrot', 'bird', 24.0, 2),\n    ...                    ('lion', 'mammal', 80.5, 4),\n    ...                    ('monkey', 'mammal', np.nan, 4)],\n    ...                   columns=['name', 'class', 'max_speed',\n    ...                            'num_legs'])\n    >>> df\n         name   class  max_speed  num_legs\n    0  falcon    bird      389.0         2\n    1  parrot    bird       24.0         2\n    2    lion  mammal       80.5         4\n    3  monkey  mammal        NaN         4\n\n    >>> df.to_xarray()\n    <xarray.Dataset>\n    Dimensions:    (index: 4)\n    Coordinates:\n      * index      (index) int64 0 1 2 3\n    Data variables:\n        name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n        class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n        max_speed  (index) float64 389.0 24.0 80.5 nan\n        num_legs   (index) int64 2 2 4 4\n\n    >>> df['max_speed'].to_xarray()\n    <xarray.DataArray 'max_speed' (index: 4)>\n    array([389. ,  24. ,  80.5,   nan])\n    Coordinates:\n      * index    (index) int64 0 1 2 3\n\n    >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n    ...                         '2018-01-02', '2018-01-02'])\n    >>> df_multiindex = pd.DataFrame({'date': dates,\n    ...                               'animal': ['falcon', 'parrot',\n    ...                                          'falcon', 'parrot'],\n    ...                               'speed': [350, 18, 361, 15]})\n    >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n    >>> df_multiindex\n                       speed\n    date       animal\n    2018-01-01 falcon    350\n               parrot     18\n    2018-01-02 falcon    361\n               parrot     15\n\n    >>> df_multiindex.to_xarray()\n    <xarray.Dataset>\n    Dimensions:  (animal: 2, date: 2)\n    Coordinates:\n      * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n      * animal   (animal) object 'falcon' 'parrot'\n    Data variables:\n        speed    (date, animal) int64 350 18 361 15\n    \"\"\"\n    xarray = import_optional_dependency(\"xarray\")\n\n    if self.ndim == 1:\n        return xarray.DataArray.from_series(self)\n    else:\n        return xarray.Dataset.from_dataframe(self)",
                "@Substitution(returns=fmt.return_docstring)\ndef to_latex(\n    self,\n    buf=None,\n    columns=None,\n    col_space=None,\n    header=True,\n    index=True,\n    na_rep=\"NaN\",\n    formatters=None,\n    float_format=None,\n    sparsify=None,\n    index_names=True,\n    bold_rows=False,\n    column_format=None,\n    longtable=None,\n    escape=None,\n    encoding=None,\n    decimal=\".\",\n    multicolumn=None,\n    multicolumn_format=None,\n    multirow=None,\n    caption=None,\n    label=None,\n):\n    r\"\"\"\n    Render object to a LaTeX tabular, longtable, or nested table/tabular.\n\n    Requires ``\\usepackage{booktabs}``.  The output can be copy/pasted\n    into a main LaTeX document or read from an external file\n    with ``\\input{table.tex}``.\n\n    .. versionchanged:: 0.20.2\n       Added to Series.\n\n    .. versionchanged:: 1.0.0\n       Added caption and label arguments.\n\n    Parameters\n    ----------\n    buf : str, Path or StringIO-like, optional, default None\n        Buffer to write to. If None, the output is returned as a string.\n    columns : list of label, optional\n        The subset of columns to write. Writes all columns by default.\n    col_space : int, optional\n        The minimum width of each column.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given,\n        it is assumed to be aliases for the column names.\n    index : bool, default True\n        Write row names (index).\n    na_rep : str, default 'NaN'\n        Missing data representation.\n    formatters : list of functions or dict of {str: function}, optional\n        Formatter functions to apply to columns' elements by position or\n        name. The result of each function must be a unicode string.\n        List must be of length equal to the number of columns.\n    float_format : one-parameter function or str, optional, default None\n        Formatter for floating point numbers. For example\n        ``float_format=\"%%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n        both result in 0.1234 being formatted as 0.12.\n    sparsify : bool, optional\n        Set to False for a DataFrame with a hierarchical index to print\n        every multiindex key at each row. By default, the value will be\n        read from the config module.\n    index_names : bool, default True\n        Prints the names of the indexes.\n    bold_rows : bool, default False\n        Make the row labels bold in the output.\n    column_format : str, optional\n        The columns format as specified in `LaTeX table format\n        <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n        columns. By default, 'l' will be used for all columns except\n        columns of numbers, which default to 'r'.\n    longtable : bool, optional\n        By default, the value will be read from the pandas config\n        module. Use a longtable environment instead of tabular. Requires\n        adding a \\usepackage{longtable} to your LaTeX preamble.\n    escape : bool, optional\n        By default, the value will be read from the pandas config\n        module. When set to False prevents from escaping latex special\n        characters in column names.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    decimal : str, default '.'\n        Character recognized as decimal separator, e.g. ',' in Europe.\n    multicolumn : bool, default True\n        Use \\multicolumn to enhance MultiIndex columns.\n        The default will be read from the config module.\n    multicolumn_format : str, default 'l'\n        The alignment for multicolumns, similar to `column_format`\n        The default will be read from the config module.\n    multirow : bool, default False\n        Use \\multirow to enhance MultiIndex rows. Requires adding a\n        \\usepackage{multirow} to your LaTeX preamble. Will print\n        centered labels (instead of top-aligned) across the contained\n        rows, separating groups via clines. The default will be read\n        from the pandas config module.\n    caption : str, optional\n        The LaTeX caption to be placed inside ``\\caption{}`` in the output.\n\n        .. versionadded:: 1.0.0\n\n    label : str, optional\n        The LaTeX label to be placed inside ``\\label{}`` in the output.\n        This is used with ``\\ref{}`` in the main ``.tex`` file.\n\n        .. versionadded:: 1.0.0\n    %(returns)s\n    See Also\n    --------\n    DataFrame.to_string : Render a DataFrame to a console-friendly\n        tabular output.\n    DataFrame.to_html : Render a DataFrame as an HTML table.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> print(df.to_latex(index=False))  # doctest: +NORMALIZE_WHITESPACE\n    \\begin{tabular}{lll}\n     \\toprule\n           name &    mask &    weapon \\\\\n     \\midrule\n        Raphael &     red &       sai \\\\\n      Donatello &  purple &  bo staff \\\\\n    \\bottomrule\n    \\end{tabular}\n    \"\"\"\n    # Get defaults from the pandas config\n    if self.ndim == 1:\n        self = self.to_frame()\n    if longtable is None:\n        longtable = config.get_option(\"display.latex.longtable\")\n    if escape is None:\n        escape = config.get_option(\"display.latex.escape\")\n    if multicolumn is None:\n        multicolumn = config.get_option(\"display.latex.multicolumn\")\n    if multicolumn_format is None:\n        multicolumn_format = config.get_option(\"display.latex.multicolumn_format\")\n    if multirow is None:\n        multirow = config.get_option(\"display.latex.multirow\")\n\n    formatter = DataFrameFormatter(\n        self,\n        columns=columns,\n        col_space=col_space,\n        na_rep=na_rep,\n        header=header,\n        index=index,\n        formatters=formatters,\n        float_format=float_format,\n        bold_rows=bold_rows,\n        sparsify=sparsify,\n        index_names=index_names,\n        escape=escape,\n        decimal=decimal,\n    )\n    return formatter.to_latex(\n        buf=buf,\n        column_format=column_format,\n        longtable=longtable,\n        encoding=encoding,\n        multicolumn=multicolumn,\n        multicolumn_format=multicolumn_format,\n        multirow=multirow,\n        caption=caption,\n        label=label,\n    )",
                "def to_csv(\n    self,\n    path_or_buf: Optional[FilePathOrBuffer] = None,\n    sep: str = \",\",\n    na_rep: str = \"\",\n    float_format: Optional[str] = None,\n    columns: Optional[Sequence[Optional[Hashable]]] = None,\n    header: Union[bool_t, List[str]] = True,\n    index: bool_t = True,\n    index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]] = None,\n    mode: str = \"w\",\n    encoding: Optional[str] = None,\n    compression: Optional[Union[str, Mapping[str, str]]] = \"infer\",\n    quoting: Optional[int] = None,\n    quotechar: str = '\"',\n    line_terminator: Optional[str] = None,\n    chunksize: Optional[int] = None,\n    date_format: Optional[str] = None,\n    doublequote: bool_t = True,\n    escapechar: Optional[str] = None,\n    decimal: Optional[str] = \".\",\n) -> Optional[str]:\n    r\"\"\"\n    Write object to a comma-separated values (csv) file.\n\n    .. versionchanged:: 0.24.0\n        The order of arguments for Series was changed.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, default None\n        File path or object, if None is provided the result is returned as\n        a string.  If a file object is passed it should be opened with\n        `newline=''`, disabling universal newlines.\n\n        .. versionchanged:: 0.24.0\n\n           Was previously named \"path\" for Series.\n\n    sep : str, default ','\n        String of length 1. Field delimiter for the output file.\n    na_rep : str, default ''\n        Missing data representation.\n    float_format : str, default None\n        Format string for floating point numbers.\n    columns : sequence, optional\n        Columns to write.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names.\n\n        .. versionchanged:: 0.24.0\n\n           Previously defaulted to False for Series.\n\n    index : bool, default True\n        Write row names (index).\n    index_label : str or sequence, or False, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the object uses MultiIndex. If\n        False do not print fields for index names. Use index_label=False\n        for easier importing in R.\n    mode : str\n        Python write mode, default 'w'.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    compression : str or dict, default 'infer'\n        If str, represents compression mode. If dict, value at 'method' is\n        the compression mode. Compression mode may be any of the following\n        possible values: {'infer', 'gzip', 'bz2', 'zip', 'xz', None}. If\n        compression mode is 'infer' and `path_or_buf` is path-like, then\n        detect compression mode from the following extensions: '.gz',\n        '.bz2', '.zip' or '.xz'. (otherwise no compression). If dict given\n        and mode is 'zip' or inferred as 'zip', other entries passed as\n        additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other entries as additional compression options if\n           compression mode is 'zip'.\n\n    quoting : optional constant from csv module\n        Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n        then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n        will treat them as non-numeric.\n    quotechar : str, default '\\\"'\n        String of length 1. Character used to quote fields.\n    line_terminator : str, optional\n        The newline character or character sequence to use in the output\n        file. Defaults to `os.linesep`, which depends on the OS in which\n        this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).\n\n        .. versionchanged:: 0.24.0\n    chunksize : int or None\n        Rows to write at a time.\n    date_format : str, default None\n        Format string for datetime objects.\n    doublequote : bool, default True\n        Control quoting of `quotechar` inside a field.\n    escapechar : str, default None\n        String of length 1. Character used to escape `sep` and `quotechar`\n        when appropriate.\n    decimal : str, default '.'\n        Character recognized as decimal separator. E.g. use ',' for\n        European data.\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting csv format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_csv : Load a CSV file into a DataFrame.\n    to_excel : Write DataFrame to an Excel file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> df.to_csv(index=False)\n    'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n\n    # create 'out.zip' containing 'out.csv'\n    >>> compression_opts = dict(method='zip',\n    ...                         archive_name='out.csv')  # doctest: +SKIP\n\n    >>> df.to_csv('out.zip', index=False,\n    ...           compression=compression_opts)  # doctest: +SKIP\n    \"\"\"\n\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n    from pandas.io.formats.csvs import CSVFormatter\n\n    formatter = CSVFormatter(\n        df,\n        path_or_buf,\n        line_terminator=line_terminator,\n        sep=sep,\n        encoding=encoding,\n        compression=compression,\n        quoting=quoting,\n        na_rep=na_rep,\n        float_format=float_format,\n        cols=columns,\n        header=header,\n        index=index,\n        index_label=index_label,\n        mode=mode,\n        chunksize=chunksize,\n        quotechar=quotechar,\n        date_format=date_format,\n        doublequote=doublequote,\n        escapechar=escapechar,\n        decimal=decimal,\n    )\n    formatter.save()\n\n    if path_or_buf is None:\n        return formatter.path_or_buf.getvalue()\n\n    return None",
                "@classmethod\ndef _create_indexer(cls, name: str, indexer) -> None:\n    \"\"\"Create an indexer like _name in the class.\"\"\"\n    if getattr(cls, name, None) is None:\n        _indexer = functools.partial(indexer, name)\n        setattr(cls, name, property(_indexer, doc=indexer.__doc__))",
                "def _set_as_cached(self, item, cacher) -> None:\n    \"\"\"Set the _cacher attribute on the calling object with a weakref to\n    cacher.\n    \"\"\"\n    self._cacher = (item, weakref.ref(cacher))",
                "def _reset_cacher(self) -> None:\n    \"\"\"Reset the cacher.\"\"\"\n    if hasattr(self, \"_cacher\"):\n        del self._cacher",
                "def _maybe_cache_changed(self, item, value) -> None:\n    \"\"\"The object has called back to us saying maybe it has changed.\n    \"\"\"\n    self._data.set(item, value)",
                "@property\ndef _is_cached(self) -> bool_t:\n    \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n    return getattr(self, \"_cacher\", None) is not None",
                "def _get_cacher(self):\n    \"\"\"return my cacher or None\"\"\"\n    cacher = getattr(self, \"_cacher\", None)\n    if cacher is not None:\n        cacher = cacher[1]()\n    return cacher",
                "def _maybe_update_cacher(\n    self, clear: bool_t = False, verify_is_copy: bool_t = True\n) -> None:\n    \"\"\"\n    See if we need to update our parent cacher if clear, then clear our\n    cache.\n\n    Parameters\n    ----------\n    clear : bool, default False\n        Clear the item cache.\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n\n    cacher = getattr(self, \"_cacher\", None)\n    if cacher is not None:\n        ref = cacher[1]()\n\n        # we are trying to reference a dead referant, hence\n        # a copy\n        if ref is None:\n            del self._cacher\n        else:\n            # Note: we need to call ref._maybe_cache_changed even in the\n            #  case where it will raise.  (Uh, not clear why)\n            try:\n                ref._maybe_cache_changed(cacher[0], self)\n            except AssertionError:\n                # ref._data.setitem can raise\n                #  AssertionError because of shape mismatch\n                pass\n\n    if verify_is_copy:\n        self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n    if clear:\n        self._clear_item_cache()",
                "def _clear_item_cache(self) -> None:\n    self._item_cache.clear()",
                "def take(self, indices, axis=0, is_copy: bool_t = True, **kwargs):\n    \"\"\"\n    Return the elements in the given *positional* indices along an axis.\n\n    This means that we are not indexing according to actual values in\n    the index attribute of the object. We are indexing according to the\n    actual position of the element in the object.\n\n    Parameters\n    ----------\n    indices : array-like\n        An array of ints indicating which positions to take.\n    axis : {0 or 'index', 1 or 'columns', None}, default 0\n        The axis on which to select elements. ``0`` means that we are\n        selecting rows, ``1`` means that we are selecting columns.\n    is_copy : bool, default True\n        Whether to return a copy of the original object or not.\n    **kwargs\n        For compatibility with :meth:`numpy.take`. Has no effect on the\n        output.\n\n    Returns\n    -------\n    taken : same type as caller\n        An array-like containing the elements taken from the object.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by labels.\n    DataFrame.iloc : Select a subset of a DataFrame by positions.\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=['name', 'class', 'max_speed'],\n    ...                   index=[0, 2, 3, 1])\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    2  parrot    bird       24.0\n    3    lion  mammal       80.5\n    1  monkey  mammal        NaN\n\n    Take elements at positions 0 and 3 along the axis 0 (default).\n\n    Note how the actual indices selected (0 and 1) do not correspond to\n    our selected indices 0 and 3. That's because we are selecting the 0th\n    and 3rd rows, not rows whose indices equal 0 and 3.\n\n    >>> df.take([0, 3])\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  monkey  mammal        NaN\n\n    Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n    >>> df.take([1, 2], axis=1)\n        class  max_speed\n    0    bird      389.0\n    2    bird       24.0\n    3  mammal       80.5\n    1  mammal        NaN\n\n    We may take elements using negative integers for positive indices,\n    starting from the end of the object, just like with Python lists.\n\n    >>> df.take([-1, -2])\n         name   class  max_speed\n    1  monkey  mammal        NaN\n    3    lion  mammal       80.5\n    \"\"\"\n    nv.validate_take(tuple(), kwargs)\n\n    self._consolidate_inplace()\n\n    new_data = self._data.take(\n        indices, axis=self._get_block_manager_axis(axis), verify=True\n    )\n    result = self._constructor(new_data).__finalize__(self)\n\n    # Maybe set copy if we didn't actually change the index.\n    if is_copy:\n        if not result._get_axis(axis).equals(self._get_axis(axis)):\n            result._set_is_copy(self)\n\n    return result",
                "def xs(self, key, axis=0, level=None, drop_level: bool_t = True):\n    \"\"\"\n    Return cross-section from the Series/DataFrame.\n\n    This method takes a `key` argument to select data at a particular\n    level of a MultiIndex.\n\n    Parameters\n    ----------\n    key : label or tuple of label\n        Label contained in the index, or partially in a MultiIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis to retrieve cross-section on.\n    level : object, defaults to first n levels (n=1 or len(key))\n        In case of a key partially contained in a MultiIndex, indicate\n        which levels are used. Levels can be referred by label or position.\n    drop_level : bool, default True\n        If False, returns object with same levels as self.\n\n    Returns\n    -------\n    Series or DataFrame\n        Cross-section from the original Series or DataFrame\n        corresponding to the selected index levels.\n\n    See Also\n    --------\n    DataFrame.loc : Access a group of rows and columns\n        by label(s) or a boolean array.\n    DataFrame.iloc : Purely integer-location based indexing\n        for selection by position.\n\n    Notes\n    -----\n    `xs` can not be used to set values.\n\n    MultiIndex Slicers is a generic way to get/set values on\n    any level or levels.\n    It is a superset of `xs` functionality, see\n    :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n    Examples\n    --------\n    >>> d = {'num_legs': [4, 4, 2, 2],\n    ...      'num_wings': [0, 0, 2, 2],\n    ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n    ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n    ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n    >>> df = pd.DataFrame(data=d)\n    >>> df = df.set_index(['class', 'animal', 'locomotion'])\n    >>> df\n                               num_legs  num_wings\n    class  animal  locomotion\n    mammal cat     walks              4          0\n           dog     walks              4          0\n           bat     flies              2          2\n    bird   penguin walks              2          2\n\n    Get values at specified index\n\n    >>> df.xs('mammal')\n                       num_legs  num_wings\n    animal locomotion\n    cat    walks              4          0\n    dog    walks              4          0\n    bat    flies              2          2\n\n    Get values at several indexes\n\n    >>> df.xs(('mammal', 'dog'))\n                num_legs  num_wings\n    locomotion\n    walks              4          0\n\n    Get values at specified index and level\n\n    >>> df.xs('cat', level=1)\n                       num_legs  num_wings\n    class  locomotion\n    mammal walks              4          0\n\n    Get values at several indexes and levels\n\n    >>> df.xs(('bird', 'walks'),\n    ...       level=[0, 'locomotion'])\n             num_legs  num_wings\n    animal\n    penguin         2          2\n\n    Get values at specified column and axis\n\n    >>> df.xs('num_wings', axis=1)\n    class   animal   locomotion\n    mammal  cat      walks         0\n            dog      walks         0\n            bat      flies         2\n    bird    penguin  walks         2\n    Name: num_wings, dtype: int64\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    if level is not None:\n        loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n        # create the tuple of the indexer\n        _indexer = [slice(None)] * self.ndim\n        _indexer[axis] = loc\n        indexer = tuple(_indexer)\n\n        result = self.iloc[indexer]\n        setattr(result, result._get_axis_name(axis), new_ax)\n        return result\n\n    if axis == 1:\n        return self[key]\n\n    self._consolidate_inplace()\n\n    index = self.index\n    if isinstance(index, MultiIndex):\n        loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n    else:\n        loc = self.index.get_loc(key)\n\n        if isinstance(loc, np.ndarray):\n            if loc.dtype == np.bool_:\n                (inds,) = loc.nonzero()\n                return self.take(inds, axis=axis)\n            else:\n                return self.take(loc, axis=axis)\n\n        if not is_scalar(loc):\n            new_index = self.index[loc]\n\n    if is_scalar(loc):\n        new_values = self._data.fast_xs(loc)\n\n        # may need to box a datelike-scalar\n        #\n        # if we encounter an array-like and we only have 1 dim\n        # that means that their are list/ndarrays inside the Series!\n        # so just return them (GH 6394)\n        if not is_list_like(new_values) or self.ndim == 1:\n            return com.maybe_box_datetimelike(new_values)\n\n        result = self._constructor_sliced(\n            new_values,\n            index=self.columns,\n            name=self.index[loc],\n            dtype=new_values.dtype,\n        )\n\n    else:\n        result = self.iloc[loc]\n        result.index = new_index\n\n    # this could be a view\n    # but only in a single-dtyped view sliceable case\n    result._set_is_copy(self, copy=not result._is_view)\n    return result",
                "def __getitem__(self, item):\n    raise AbstractMethodError(self)",
                "def _get_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n    cache = self._item_cache\n    res = cache.get(item)\n    if res is None:\n        values = self._data.get(item)\n        res = self._box_item_values(item, values)\n        cache[item] = res\n        res._set_as_cached(item, self)\n\n        # for a chain\n        res._is_copy = self._is_copy\n    return res",
                "def _iget_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n    ax = self._info_axis\n    if ax.is_unique:\n        lower = self._get_item_cache(ax[item])\n    else:\n        lower = self.take(item, axis=self._info_axis_number)\n    return lower",
                "def _box_item_values(self, key, values):\n    raise AbstractMethodError(self)",
                "def _slice(self, slobj: slice, axis=0, kind=None):\n    \"\"\"\n    Construct a slice of this container.\n\n    kind parameter is maintained for compatibility with Series slicing.\n    \"\"\"\n    axis = self._get_block_manager_axis(axis)\n    result = self._constructor(self._data.get_slice(slobj, axis=axis))\n    result = result.__finalize__(self)\n\n    # this could be a view\n    # but only in a single-dtyped view sliceable case\n    is_copy = axis != 0 or result._is_view\n    result._set_is_copy(self, copy=is_copy)\n    return result",
                "def _set_item(self, key, value) -> None:\n    self._data.set(key, value)\n    self._clear_item_cache()",
                "def _set_is_copy(self, ref=None, copy: bool_t = True) -> None:\n    if not copy:\n        self._is_copy = None\n    else:\n        if ref is not None:\n            self._is_copy = weakref.ref(ref)\n        else:\n            self._is_copy = None",
                "def _check_is_chained_assignment_possible(self) -> bool_t:\n    \"\"\"\n    Check if we are a view, have a cacher, and are of mixed type.\n    If so, then force a setitem_copy check.\n\n    Should be called just near setting a value\n\n    Will return a boolean if it we are a view and are cached, but a\n    single-dtype meaning that the cacher should be updated following\n    setting.\n    \"\"\"\n    if self._is_view and self._is_cached:\n        ref = self._get_cacher()\n        if ref is not None and ref._is_mixed_type:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n        return True\n    elif self._is_copy:\n        self._check_setitem_copy(stacklevel=4, t=\"referant\")\n    return False",
                "def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n    \"\"\"\n\n    Parameters\n    ----------\n    stacklevel : int, default 4\n       the level to show of the stack when the error is output\n    t : str, the type of setting error\n    force : bool, default False\n       If True, then force showing an error.\n\n    validate if we are doing a setitem on a chained copy.\n\n    If you call this function, be sure to set the stacklevel such that the\n    user will see the error *at the level of setting*\n\n    It is technically possible to figure out that we are setting on\n    a copy even WITH a multi-dtyped pandas object. In other words, some\n    blocks may be views while other are not. Currently _is_view will ALWAYS\n    return False for multi-blocks to avoid having to handle this case.\n\n    df = DataFrame(np.arange(0,9), columns=['count'])\n    df['group'] = 'b'\n\n    # This technically need not raise SettingWithCopy if both are view\n    # (which is not # generally guaranteed but is usually True.  However,\n    # this is in general not a good practice and we recommend using .loc.\n    df.iloc[0:5]['group'] = 'a'\n\n    \"\"\"\n\n    # return early if the check is not needed\n    if not (force or self._is_copy):\n        return\n\n    value = config.get_option(\"mode.chained_assignment\")\n    if value is None:\n        return\n\n    # see if the copy is not actually referred; if so, then dissolve\n    # the copy weakref\n    if self._is_copy is not None and not isinstance(self._is_copy, str):\n        r = self._is_copy()\n        if not gc.get_referents(r) or r.shape == self.shape:\n            self._is_copy = None\n            return\n\n    # a custom message\n    if isinstance(self._is_copy, str):\n        t = self._is_copy\n\n    elif t == \"referant\":\n        t = (\n            \"\\n\"\n            \"A value is trying to be set on a copy of a slice from a \"\n            \"DataFrame\\n\\n\"\n            \"See the caveats in the documentation: \"\n            \"http://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n            \"indexing.html#returning-a-view-versus-a-copy\"\n        )\n\n    else:\n        t = (\n            \"\\n\"\n            \"A value is trying to be set on a copy of a slice from a \"\n            \"DataFrame.\\n\"\n            \"Try using .loc[row_indexer,col_indexer] = value \"\n            \"instead\\n\\nSee the caveats in the documentation: \"\n            \"http://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n            \"indexing.html#returning-a-view-versus-a-copy\"\n        )\n\n    if value == \"raise\":\n        raise com.SettingWithCopyError(t)\n    elif value == \"warn\":\n        warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
                "def __delitem__(self, key):\n    \"\"\"\n    Delete item\n    \"\"\"\n    deleted = False\n\n    maybe_shortcut = False\n    if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n        try:\n            maybe_shortcut = key not in self.columns._engine\n        except TypeError:\n            pass\n\n    if maybe_shortcut:\n        # Allow shorthand to delete all columns whose first len(key)\n        # elements match key:\n        if not isinstance(key, tuple):\n            key = (key,)\n        for col in self.columns:\n            if isinstance(col, tuple) and col[: len(key)] == key:\n                del self[col]\n                deleted = True\n    if not deleted:\n        # If the above loop ran and didn't delete anything because\n        # there was no match, this call should raise the appropriate\n        # exception:\n        self._data.delete(key)\n\n    # delete from the caches\n    try:\n        del self._item_cache[key]\n    except KeyError:\n        pass",
                "def get(self, key, default=None):\n    \"\"\"\n    Get item from object for given key (ex: DataFrame column).\n\n    Returns default value if not found.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    value : same type as items contained in object\n    \"\"\"\n    try:\n        return self[key]\n    except (KeyError, ValueError, IndexError):\n        return default",
                "@property\ndef _is_view(self):\n    \"\"\"Return boolean indicating if self is view of another array \"\"\"\n    return self._data.is_view",
                "def reindex_like(\n    self,\n    other,\n    method: Optional[str] = None,\n    copy: bool_t = True,\n    limit=None,\n    tolerance=None,\n):\n    \"\"\"\n    Return an object with matching indices as other object.\n\n    Conform the object to the same index on all axes. Optional\n    filling logic, placing NaN in locations having no value\n    in the previous index. A new object is produced unless the\n    new index is equivalent to the current one and copy=False.\n\n    Parameters\n    ----------\n    other : Object of the same data type\n        Its row and column indices are used to define the new indices\n        of this object.\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: propagate last valid observation forward to next\n          valid\n        * backfill / bfill: use next valid observation to fill gap\n        * nearest: use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    limit : int, default None\n        Maximum number of consecutive labels to fill for inexact matches.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as caller, but with changed indices on each axis.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex : Change to new indices or expand indices.\n\n    Notes\n    -----\n    Same as calling\n    ``.reindex(index=other.index, columns=other.columns,...)``.\n\n    Examples\n    --------\n    >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n    ...                     [31, 87.8, 'high'],\n    ...                     [22, 71.6, 'medium'],\n    ...                     [35, 95, 'medium']],\n    ...                    columns=['temp_celsius', 'temp_fahrenheit',\n    ...                             'windspeed'],\n    ...                    index=pd.date_range(start='2014-02-12',\n    ...                                        end='2014-02-15', freq='D'))\n\n    >>> df1\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          24.3             75.7      high\n    2014-02-13          31.0             87.8      high\n    2014-02-14          22.0             71.6    medium\n    2014-02-15          35.0             95.0    medium\n\n    >>> df2 = pd.DataFrame([[28, 'low'],\n    ...                     [30, 'low'],\n    ...                     [35.1, 'medium']],\n    ...                    columns=['temp_celsius', 'windspeed'],\n    ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n    ...                                            '2014-02-15']))\n\n    >>> df2\n                temp_celsius windspeed\n    2014-02-12          28.0       low\n    2014-02-13          30.0       low\n    2014-02-15          35.1    medium\n\n    >>> df2.reindex_like(df1)\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          28.0              NaN       low\n    2014-02-13          30.0              NaN       low\n    2014-02-14           NaN              NaN       NaN\n    2014-02-15          35.1              NaN    medium\n    \"\"\"\n    d = other._construct_axes_dict(\n        axes=self._AXIS_ORDERS,\n        method=method,\n        copy=copy,\n        limit=limit,\n        tolerance=tolerance,\n    )\n\n    return self.reindex(**d)",
                "def drop(\n    self,\n    labels=None,\n    axis=0,\n    index=None,\n    columns=None,\n    level=None,\n    inplace: bool_t = False,\n    errors: str = \"raise\",\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    if labels is not None:\n        if index is not None or columns is not None:\n            raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n        axis_name = self._get_axis_name(axis)\n        axes = {axis_name: labels}\n    elif index is not None or columns is not None:\n        axes, _ = self._construct_axes_from_arguments((index, columns), {})\n    else:\n        raise ValueError(\n            \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n        )\n\n    obj = self\n\n    for axis, labels in axes.items():\n        if labels is not None:\n            obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n    if inplace:\n        self._update_inplace(obj)\n    else:\n        return obj",
                "def _drop_axis(self, labels, axis, level=None, errors: str = \"raise\"):\n    \"\"\"\n    Drop labels from specified axis. Used in the ``drop`` method\n    internally.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n    axis : int or axis name\n    level : int or level name, default None\n        For MultiIndex\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    axis = self._get_axis(axis)\n\n    if axis.is_unique:\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError(\"axis must be a MultiIndex\")\n            new_axis = axis.drop(labels, level=level, errors=errors)\n        else:\n            new_axis = axis.drop(labels, errors=errors)\n        result = self.reindex(**{axis_name: new_axis})\n\n    # Case for non-unique axis\n    else:\n        labels = ensure_object(com.index_labels_to_array(labels))\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError(\"axis must be a MultiIndex\")\n            indexer = ~axis.get_level_values(level).isin(labels)\n\n            # GH 18561 MultiIndex.drop should raise if label is absent\n            if errors == \"raise\" and indexer.all():\n                raise KeyError(f\"{labels} not found in axis\")\n        else:\n            indexer = ~axis.isin(labels)\n            # Check if label doesn't exist along axis\n            labels_missing = (axis.get_indexer_for(labels) == -1).any()\n            if errors == \"raise\" and labels_missing:\n                raise KeyError(f\"{labels} not found in axis\")\n\n        slicer = [slice(None)] * self.ndim\n        slicer[self._get_axis_number(axis_name)] = indexer\n\n        result = self.loc[tuple(slicer)]\n\n    return result",
                "def _update_inplace(self, result, verify_is_copy: bool_t = True) -> None:\n    \"\"\"\n    Replace self internals with result.\n\n    Parameters\n    ----------\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n    # NOTE: This does *not* call __finalize__ and that's an explicit\n    # decision that we may revisit in the future.\n\n    self._reset_cache()\n    self._clear_item_cache()\n    self._data = getattr(result, \"_data\", result)\n    self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
                "def add_prefix(self, prefix: str):\n    \"\"\"\n    Prefix labels with string `prefix`.\n\n    For Series, the row labels are prefixed.\n    For DataFrame, the column labels are prefixed.\n\n    Parameters\n    ----------\n    prefix : str\n        The string to add before each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_suffix: Suffix row labels with string `suffix`.\n    DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_prefix('item_')\n    item_0    1\n    item_1    2\n    item_2    3\n    item_3    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_prefix('col_')\n         col_A  col_B\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial(\"{prefix}{}\".format, prefix=prefix)\n\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                "def add_suffix(self, suffix: str):\n    \"\"\"\n    Suffix labels with string `suffix`.\n\n    For Series, the row labels are suffixed.\n    For DataFrame, the column labels are suffixed.\n\n    Parameters\n    ----------\n    suffix : str\n        The string to add after each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_prefix: Prefix row labels with string `prefix`.\n    DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_suffix('_item')\n    0_item    1\n    1_item    2\n    2_item    3\n    3_item    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_suffix('_col')\n         A_col  B_col\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial(\"{}{suffix}\".format, suffix=suffix)\n\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                "def sort_values(\n    self,\n    by=None,\n    axis=0,\n    ascending=True,\n    inplace: bool_t = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n):\n    \"\"\"\n    Sort by the values along either axis.\n\n    Parameters\n    ----------%(optional_by)s\n    axis : %(axes_single_arg)s, default 0\n         Axis to be sorted.\n    ascending : bool or list of bool, default True\n         Sort ascending vs. descending. Specify list for multiple sort\n         orders.  If this is a list of bools, must match the length of\n         the by.\n    inplace : bool, default False\n         If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n         Choice of sorting algorithm. See also ndarray.np.sort for more\n         information.  `mergesort` is the only stable algorithm. For\n         DataFrames, this option is only applied when sorting on a single\n         column or label.\n    na_position : {'first', 'last'}, default 'last'\n         Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n         end.\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted values if inplace=False, None otherwise.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\n    ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n    ...     'col2': [2, 1, 9, 8, 7, 4],\n    ...     'col3': [0, 1, 9, 4, 2, 3],\n    ... })\n    >>> df\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n\n    Sort by col1\n\n    >>> df.sort_values(by=['col1'])\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort by multiple columns\n\n    >>> df.sort_values(by=['col1', 'col2'])\n        col1 col2 col3\n    1   A    1    1\n    0   A    2    0\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort Descending\n\n    >>> df.sort_values(by='col1', ascending=False)\n        col1 col2 col3\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    3   NaN  8    4\n\n    Putting NAs first\n\n    >>> df.sort_values(by='col1', ascending=False, na_position='first')\n        col1 col2 col3\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    \"\"\"\n    raise AbstractMethodError(self)",
                "def sort_index(\n    self,\n    axis=0,\n    level=None,\n    ascending: bool_t = True,\n    inplace: bool_t = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n    sort_remaining: bool_t = True,\n):\n    \"\"\"\n    Sort object by labels (along an axis).\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to sort.  The value 0 identifies the rows,\n        and 1 identifies the columns.\n    level : int or level name or list of ints or list of level names\n        If not None, sort on values in specified index level(s).\n    ascending : bool, default True\n        Sort ascending vs. descending.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also ndarray.np.sort for more\n        information.  `mergesort` is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted index if inplace=False, None otherwise.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    labels = self._get_axis(axis)\n\n    if level is not None:\n        raise NotImplementedError(\"level is not implemented\")\n    if inplace:\n        raise NotImplementedError(\"inplace is not implemented\")\n\n    sort_index = labels.argsort()\n    if not ascending:\n        sort_index = sort_index[::-1]\n\n    new_axis = labels.take(sort_index)\n    return self.reindex(**{axis_name: new_axis})",
                "def reindex(self, *args, **kwargs):\n    \"\"\"\n    Conform %(klass)s to new index with optional filling logic.\n\n    Places NA/NaN in locations having no value in the previous index. A new object\n    is produced unless the new index is equivalent to the current one and\n    ``copy=False``.\n\n    Parameters\n    ----------\n    %(optional_labels)s\n    %(axes)s : array-like, optional\n        New labels / index to conform to, should be specified using\n        keywords. Preferably an Index object to avoid duplicating data.\n    %(optional_axis)s\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: Propagate last valid observation forward to next\n          valid.\n        * backfill / bfill: Use next valid observation to fill gap.\n        * nearest: Use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    level : int or name\n        Broadcast across a level, matching Index values on the\n        passed MultiIndex level.\n    fill_value : scalar, default np.NaN\n        Value to use for missing values. Defaults to NaN, but can be any\n        \"compatible\" value.\n    limit : int, default None\n        Maximum number of consecutive elements to forward or backward fill.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    %(klass)s with changed index.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n\n    ``DataFrame.reindex`` supports two calling conventions\n\n    * ``(index=index_labels, columns=column_labels, ...)``\n    * ``(labels, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Create a dataframe with some fictional data.\n\n    >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n    >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n    ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n    ...                   index=index)\n    >>> df\n               http_status  response_time\n    Firefox            200           0.04\n    Chrome             200           0.02\n    Safari             404           0.07\n    IE10               404           0.08\n    Konqueror          301           1.00\n\n    Create a new index and reindex the dataframe. By default\n    values in the new index that do not have corresponding\n    records in the dataframe are assigned ``NaN``.\n\n    >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n    ...              'Chrome']\n    >>> df.reindex(new_index)\n                   http_status  response_time\n    Safari               404.0           0.07\n    Iceweasel              NaN            NaN\n    Comodo Dragon          NaN            NaN\n    IE10                 404.0           0.08\n    Chrome               200.0           0.02\n\n    We can fill in the missing values by passing a value to\n    the keyword ``fill_value``. Because the index is not monotonically\n    increasing or decreasing, we cannot use arguments to the keyword\n    ``method`` to fill the ``NaN`` values.\n\n    >>> df.reindex(new_index, fill_value=0)\n                   http_status  response_time\n    Safari                 404           0.07\n    Iceweasel                0           0.00\n    Comodo Dragon            0           0.00\n    IE10                   404           0.08\n    Chrome                 200           0.02\n\n    >>> df.reindex(new_index, fill_value='missing')\n                  http_status response_time\n    Safari                404          0.07\n    Iceweasel         missing       missing\n    Comodo Dragon     missing       missing\n    IE10                  404          0.08\n    Chrome                200          0.02\n\n    We can also reindex the columns.\n\n    >>> df.reindex(columns=['http_status', 'user_agent'])\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    Or we can use \"axis-style\" keyword arguments\n\n    >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    To further illustrate the filling functionality in\n    ``reindex``, we will create a dataframe with a\n    monotonically increasing index (for example, a sequence\n    of dates).\n\n    >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n    >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n    ...                    index=date_index)\n    >>> df2\n                prices\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n\n    Suppose we decide to expand the dataframe to cover a wider\n    date range.\n\n    >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n    >>> df2.reindex(date_index2)\n                prices\n    2009-12-29     NaN\n    2009-12-30     NaN\n    2009-12-31     NaN\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    The index entries that did not have a value in the original data frame\n    (for example, '2009-12-29') are by default filled with ``NaN``.\n    If desired, we can fill in the missing values using one of several\n    options.\n\n    For example, to back-propagate the last valid value to fill the ``NaN``\n    values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n    >>> df2.reindex(date_index2, method='bfill')\n                prices\n    2009-12-29   100.0\n    2009-12-30   100.0\n    2009-12-31   100.0\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    Please note that the ``NaN`` value present in the original dataframe\n    (at index value 2010-01-03) will not be filled by any of the\n    value propagation schemes. This is because filling while reindexing\n    does not look at dataframe values, but only compares the original and\n    desired indexes. If you do want to fill in the ``NaN`` values present\n    in the original dataframe, use the ``fillna()`` method.\n\n    See the :ref:`user guide <basics.reindexing>` for more.\n    \"\"\"\n    # TODO: Decide if we care about having different examples for different\n    # kinds\n\n    # construct the args\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n    level = kwargs.pop(\"level\", None)\n    copy = kwargs.pop(\"copy\", True)\n    limit = kwargs.pop(\"limit\", None)\n    tolerance = kwargs.pop(\"tolerance\", None)\n    fill_value = kwargs.pop(\"fill_value\", None)\n\n    # Series.reindex doesn't use / need the axis kwarg\n    # We pop and ignore it here, to make writing Series/Frame generic code\n    # easier\n    kwargs.pop(\"axis\", None)\n\n    if kwargs:\n        raise TypeError(\n            \"reindex() got an unexpected keyword \"\n            f'argument \"{list(kwargs.keys())[0]}\"'\n        )\n\n    self._consolidate_inplace()\n\n    # if all axes that are requested to reindex are equal, then only copy\n    # if indicated must have index names equal here as well as values\n    if all(\n        self._get_axis(axis).identical(ax)\n        for axis, ax in axes.items()\n        if ax is not None\n    ):\n        if copy:\n            return self.copy()\n        return self\n\n    # check if we are a multi reindex\n    if self._needs_reindex_multi(axes, method, level):\n        return self._reindex_multi(axes, copy, fill_value)\n\n    # perform the reindex on the axes\n    return self._reindex_axes(\n        axes, level, limit, tolerance, method, fill_value, copy\n    ).__finalize__(self)",
                "def _reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy):\n    \"\"\"Perform the reindex for all the axes.\"\"\"\n    obj = self\n    for a in self._AXIS_ORDERS:\n        labels = axes[a]\n        if labels is None:\n            continue\n\n        ax = self._get_axis(a)\n        new_index, indexer = ax.reindex(\n            labels, level=level, limit=limit, tolerance=tolerance, method=method\n        )\n\n        axis = self._get_axis_number(a)\n        obj = obj._reindex_with_indexers(\n            {axis: [new_index, indexer]},\n            fill_value=fill_value,\n            copy=copy,\n            allow_dups=False,\n        )\n\n    return obj",
                "def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n    \"\"\"Check if we do need a multi reindex.\"\"\"\n    return (\n        (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n        and method is None\n        and level is None\n        and not self._is_mixed_type\n    )",
                "def _reindex_multi(self, axes, copy, fill_value):\n    raise AbstractMethodError(self)",
                "def _reindex_with_indexers(\n    self,\n    reindexers,\n    fill_value=None,\n    copy: bool_t = False,\n    allow_dups: bool_t = False,\n):\n    \"\"\"allow_dups indicates an internal call here \"\"\"\n\n    # reindex doing multiple operations on different axes if indicated\n    new_data = self._data\n    for axis in sorted(reindexers.keys()):\n        index, indexer = reindexers[axis]\n        baxis = self._get_block_manager_axis(axis)\n\n        if index is None:\n            continue\n\n        index = ensure_index(index)\n        if indexer is not None:\n            indexer = ensure_int64(indexer)\n\n        # TODO: speed up on homogeneous DataFrame objects\n        new_data = new_data.reindex_indexer(\n            index,\n            indexer,\n            axis=baxis,\n            fill_value=fill_value,\n            allow_dups=allow_dups,\n            copy=copy,\n        )\n\n    if copy and new_data is self._data:\n        new_data = new_data.copy()\n\n    return self._constructor(new_data).__finalize__(self)",
                "def filter(\n    self,\n    items=None,\n    like: Optional[str] = None,\n    regex: Optional[str] = None,\n    axis=None,\n):\n    \"\"\"\n    Subset the dataframe rows or columns according to the specified index labels.\n\n    Note that this routine does not filter a dataframe on its\n    contents. The filter is applied to the labels of the index.\n\n    Parameters\n    ----------\n    items : list-like\n        Keep labels from axis which are in items.\n    like : str\n        Keep labels from axis for which \"like in label == True\".\n    regex : str (regular expression)\n        Keep labels from axis for which re.search(regex, label) == True.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        The axis to filter on, expressed either as an index (int)\n        or axis name (str). By default this is the info axis,\n        'index' for Series, 'columns' for DataFrame.\n\n    Returns\n    -------\n    same type as input object\n\n    See Also\n    --------\n    DataFrame.loc\n\n    Notes\n    -----\n    The ``items``, ``like``, and ``regex`` parameters are\n    enforced to be mutually exclusive.\n\n    ``axis`` defaults to the info axis that is used when indexing\n    with ``[]``.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n    ...                   index=['mouse', 'rabbit'],\n    ...                   columns=['one', 'two', 'three'])\n\n    >>> # select columns by name\n    >>> df.filter(items=['one', 'three'])\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select columns by regular expression\n    >>> df.filter(regex='e$', axis=1)\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select rows containing 'bbi'\n    >>> df.filter(like='bbi', axis=0)\n             one  two  three\n    rabbit    4    5      6\n    \"\"\"\n    nkw = com.count_not_none(items, like, regex)\n    if nkw > 1:\n        raise TypeError(\n            \"Keyword arguments `items`, `like`, or `regex` \"\n            \"are mutually exclusive\"\n        )\n\n    if axis is None:\n        axis = self._info_axis_name\n    labels = self._get_axis(axis)\n\n    if items is not None:\n        name = self._get_axis_name(axis)\n        return self.reindex(**{name: [r for r in items if r in labels]})\n    elif like:\n\n        def f(x):\n            return like in ensure_str(x)\n\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    elif regex:\n\n        def f(x):\n            return matcher.search(ensure_str(x)) is not None\n\n        matcher = re.compile(regex)\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    else:\n        raise TypeError(\"Must pass either `items`, `like`, or `regex`\")",
                "def head(self: FrameOrSeries, n: int = 5) -> FrameOrSeries:\n    \"\"\"\n    Return the first `n` rows.\n\n    This function returns the first `n` rows for the object based\n    on position. It is useful for quickly testing if your object\n    has the right type of data in it.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    obj_head : same type as caller\n        The first `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.tail: Returns the last `n` rows.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the first 5 lines\n\n    >>> df.head()\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n\n    Viewing the first `n` lines (three in this case)\n\n    >>> df.head(3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    \"\"\"\n\n    return self.iloc[:n]",
                "def tail(self: FrameOrSeries, n: int = 5) -> FrameOrSeries:\n    \"\"\"\n    Return the last `n` rows.\n\n    This function returns last `n` rows from the object based on\n    position. It is useful for quickly verifying data, for example,\n    after sorting or appending rows.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    type of caller\n        The last `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.head : The first `n` rows of the caller object.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the last 5 lines\n\n    >>> df.tail()\n       animal\n    4  monkey\n    5  parrot\n    6   shark\n    7   whale\n    8   zebra\n\n    Viewing the last `n` lines (three in this case)\n\n    >>> df.tail(3)\n      animal\n    6  shark\n    7  whale\n    8  zebra\n    \"\"\"\n\n    if n == 0:\n        return self.iloc[0:0]\n    return self.iloc[-n:]",
                "def sample(\n    self,\n    n=None,\n    frac=None,\n    replace=False,\n    weights=None,\n    random_state=None,\n    axis=None,\n):\n    \"\"\"\n    Return a random sample of items from an axis of object.\n\n    You can use `random_state` for reproducibility.\n\n    Parameters\n    ----------\n    n : int, optional\n        Number of items from axis to return. Cannot be used with `frac`.\n        Default = 1 if `frac` = None.\n    frac : float, optional\n        Fraction of axis items to return. Cannot be used with `n`.\n    replace : bool, default False\n        Allow or disallow sampling of the same row more than once.\n    weights : str or ndarray-like, optional\n        Default 'None' results in equal probability weighting.\n        If passed a Series, will align with target object on index. Index\n        values in weights not found in sampled object will be ignored and\n        index values in sampled object not in weights will be assigned\n        weights of zero.\n        If called on a DataFrame, will accept the name of a column\n        when axis = 0.\n        Unless weights are a Series, weights must be same length as axis\n        being sampled.\n        If weights do not sum to 1, they will be normalized to sum to 1.\n        Missing values in the weights column will be treated as zero.\n        Infinite values not allowed.\n    random_state : int or numpy.random.RandomState, optional\n        Seed for the random number generator (if int), or numpy RandomState\n        object.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        Axis to sample. Accepts axis number or name. Default is stat axis\n        for given data type (0 for Series and DataFrames).\n\n    Returns\n    -------\n    Series or DataFrame\n        A new object of same type as caller containing `n` items randomly\n        sampled from the caller object.\n\n    See Also\n    --------\n    numpy.random.choice: Generates a random sample from a given 1-D numpy\n        array.\n\n    Notes\n    -----\n    If `frac` > 1, `replacement` should be set to `True`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n    ...                    'num_wings': [2, 0, 0, 0],\n    ...                    'num_specimen_seen': [10, 2, 1, 8]},\n    ...                   index=['falcon', 'dog', 'spider', 'fish'])\n    >>> df\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    dog            4          0                  2\n    spider         8          0                  1\n    fish           0          0                  8\n\n    Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n    Note that we use `random_state` to ensure the reproducibility of\n    the examples.\n\n    >>> df['num_legs'].sample(n=3, random_state=1)\n    fish      0\n    spider    8\n    falcon    2\n    Name: num_legs, dtype: int64\n\n    A random 50% sample of the ``DataFrame`` with replacement:\n\n    >>> df.sample(frac=0.5, replace=True, random_state=1)\n          num_legs  num_wings  num_specimen_seen\n    dog          4          0                  2\n    fish         0          0                  8\n\n    An upsample sample of the ``DataFrame`` with replacement:\n    Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n    >>> df.sample(frac=2, replace=True, random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    dog            4          0                  2\n    fish           0          0                  8\n    falcon         2          2                 10\n    falcon         2          2                 10\n    fish           0          0                  8\n    dog            4          0                  2\n    fish           0          0                  8\n    dog            4          0                  2\n\n    Using a DataFrame column as weights. Rows with larger value in the\n    `num_specimen_seen` column are more likely to be sampled.\n\n    >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    fish           0          0                  8\n    \"\"\"\n\n    if axis is None:\n        axis = self._stat_axis_number\n\n    axis = self._get_axis_number(axis)\n    axis_length = self.shape[axis]\n\n    # Process random_state argument\n    rs = com.random_state(random_state)\n\n    # Check weights for compliance\n    if weights is not None:\n\n        # If a series, align with frame\n        if isinstance(weights, ABCSeries):\n            weights = weights.reindex(self.axes[axis])\n\n        # Strings acceptable if a dataframe and axis = 0\n        if isinstance(weights, str):\n            if isinstance(self, ABCDataFrame):\n                if axis == 0:\n                    try:\n                        weights = self[weights]\n                    except KeyError:\n                        raise KeyError(\n                            \"String passed to weights not a valid column\"\n                        )\n                else:\n                    raise ValueError(\n                        \"Strings can only be passed to \"\n                        \"weights when sampling from rows on \"\n                        \"a DataFrame\"\n                    )\n            else:\n                raise ValueError(\n                    \"Strings cannot be passed as weights \"\n                    \"when sampling from a Series.\"\n                )\n\n        weights = pd.Series(weights, dtype=\"float64\")\n\n        if len(weights) != axis_length:\n            raise ValueError(\n                \"Weights and axis to be sampled must be of same length\"\n            )\n\n        if (weights == np.inf).any() or (weights == -np.inf).any():\n            raise ValueError(\"weight vector may not include `inf` values\")\n\n        if (weights < 0).any():\n            raise ValueError(\"weight vector many not include negative values\")\n\n        # If has nan, set to zero.\n        weights = weights.fillna(0)\n\n        # Renormalize if don't sum to 1\n        if weights.sum() != 1:\n            if weights.sum() != 0:\n                weights = weights / weights.sum()\n            else:\n                raise ValueError(\"Invalid weights: weights sum to zero\")\n\n        weights = weights.values\n\n    # If no frac or n, default to n=1.\n    if n is None and frac is None:\n        n = 1\n    elif frac is not None and frac > 1 and not replace:\n        raise ValueError(\n            \"Replace has to be set to `True` when \"\n            \"upsampling the population `frac` > 1.\"\n        )\n    elif n is not None and frac is None and n % 1 != 0:\n        raise ValueError(\"Only integers accepted as `n` values\")\n    elif n is None and frac is not None:\n        n = int(round(frac * axis_length))\n    elif n is not None and frac is not None:\n        raise ValueError(\"Please enter a value for `frac` OR `n`, not both\")\n\n    # Check for negative sizes\n    if n < 0:\n        raise ValueError(\n            \"A negative number of rows requested. Please provide positive value.\"\n        )\n\n    locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n    return self.take(locs, axis=axis, is_copy=False)",
                "@Appender(_shared_docs[\"pipe\"] % _shared_doc_kwargs)\ndef pipe(self, func, *args, **kwargs):\n    return com.pipe(self, func, *args, **kwargs)",
                "def __finalize__(\n    self: FrameOrSeries, other, method=None, **kwargs\n) -> FrameOrSeries:\n    \"\"\"\n    Propagate metadata from other to self.\n\n    Parameters\n    ----------\n    other : the object from which to get the attributes that we are going\n        to propagate\n    method : optional, a passed method name ; possibly to take different\n        types of propagation actions based on this\n\n    \"\"\"\n    if isinstance(other, NDFrame):\n        for name in other.attrs:\n            self.attrs[name] = other.attrs[name]\n        # For subclasses using _metadata.\n        for name in self._metadata:\n            object.__setattr__(self, name, getattr(other, name, None))\n    return self",
                "def __getattr__(self, name: str):\n    \"\"\"After regular attribute access, try looking up the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n\n    # Note: obj.x will always call obj.__getattribute__('x') prior to\n    # calling obj.__getattr__('x').\n\n    if (\n        name in self._internal_names_set\n        or name in self._metadata\n        or name in self._accessors\n    ):\n        return object.__getattribute__(self, name)\n    else:\n        if self._info_axis._can_hold_identifiers_and_holds_name(name):\n            return self[name]\n        return object.__getattribute__(self, name)",
                "def __setattr__(self, name: str, value) -> None:\n    \"\"\"After regular attribute access, try setting the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n\n    # first try regular attribute access via __getattribute__, so that\n    # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n    # the same attribute.\n\n    try:\n        object.__getattribute__(self, name)\n        return object.__setattr__(self, name, value)\n    except AttributeError:\n        pass\n\n    # if this fails, go on to more involved attribute setting\n    # (note that this matches __getattr__, above).\n    if name in self._internal_names_set:\n        object.__setattr__(self, name, value)\n    elif name in self._metadata:\n        object.__setattr__(self, name, value)\n    else:\n        try:\n            existing = getattr(self, name)\n            if isinstance(existing, Index):\n                object.__setattr__(self, name, value)\n            elif name in self._info_axis:\n                self[name] = value\n            else:\n                object.__setattr__(self, name, value)\n        except (AttributeError, TypeError):\n            if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                warnings.warn(\n                    \"Pandas doesn't allow columns to be \"\n                    \"created via a new attribute name - see \"\n                    \"https://pandas.pydata.org/pandas-docs/\"\n                    \"stable/indexing.html#attribute-access\",\n                    stacklevel=2,\n                )\n            object.__setattr__(self, name, value)",
                "def _dir_additions(self):\n    \"\"\" add the string-like attributes from the info_axis.\n    If info_axis is a MultiIndex, it's first level values are used.\n    \"\"\"\n    additions = {\n        c\n        for c in self._info_axis.unique(level=0)[:100]\n        if isinstance(c, str) and c.isidentifier()\n    }\n    return super()._dir_additions().union(additions)",
                "def _protect_consolidate(self, f):\n    \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n    cache\n    \"\"\"\n    blocks_before = len(self._data.blocks)\n    result = f()\n    if len(self._data.blocks) != blocks_before:\n        self._clear_item_cache()\n    return result",
                "def _consolidate_inplace(self) -> None:\n    \"\"\"Consolidate data in place and return None\"\"\"\n\n    def f():\n        self._data = self._data.consolidate()\n\n    self._protect_consolidate(f)",
                "def _consolidate(self, inplace: bool_t = False):\n    \"\"\"\n    Compute NDFrame with \"consolidated\" internals (data of each dtype\n    grouped together in a single ndarray).\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        If False return new object, otherwise modify existing object.\n\n    Returns\n    -------\n    consolidated : same type as caller\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if inplace:\n        self._consolidate_inplace()\n    else:\n        f = lambda: self._data.consolidate()\n        cons_data = self._protect_consolidate(f)\n        return self._constructor(cons_data).__finalize__(self)",
                "@property\ndef _is_mixed_type(self):\n    f = lambda: self._data.is_mixed_type\n    return self._protect_consolidate(f)",
                "@property\ndef _is_numeric_mixed_type(self):\n    f = lambda: self._data.is_numeric_mixed_type\n    return self._protect_consolidate(f)",
                "@property\ndef _is_datelike_mixed_type(self):\n    f = lambda: self._data.is_datelike_mixed_type\n    return self._protect_consolidate(f)",
                "def _check_inplace_setting(self, value) -> bool_t:\n    \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n\n    if self._is_mixed_type:\n        if not self._is_numeric_mixed_type:\n\n            # allow an actual np.nan thru\n            if is_float(value) and np.isnan(value):\n                return True\n\n            raise TypeError(\n                \"Cannot do inplace boolean setting on \"\n                \"mixed-types with a non np.nan value\"\n            )\n\n    return True",
                "def _get_numeric_data(self):\n    return self._constructor(self._data.get_numeric_data()).__finalize__(self)",
                "def _get_bool_data(self):\n    return self._constructor(self._data.get_bool_data()).__finalize__(self)",
                "@property\ndef values(self):\n    \"\"\"\n    Return a Numpy representation of the DataFrame.\n\n    .. warning::\n\n       We recommend using :meth:`DataFrame.to_numpy` instead.\n\n    Only the values in the DataFrame will be returned, the axes labels\n    will be removed.\n\n    Returns\n    -------\n    numpy.ndarray\n        The values of the DataFrame.\n\n    See Also\n    --------\n    DataFrame.to_numpy : Recommended alternative to this method.\n    DataFrame.index : Retrieve the index labels.\n    DataFrame.columns : Retrieving the column names.\n\n    Notes\n    -----\n    The dtype will be a lower-common-denominator dtype (implicit\n    upcasting); that is to say if the dtypes (even of numeric types)\n    are mixed, the one that accommodates all will be chosen. Use this\n    with care if you are not dealing with the blocks.\n\n    e.g. If the dtypes are float16 and float32, dtype will be upcast to\n    float32.  If dtypes are int32 and uint8, dtype will be upcast to\n    int32. By :func:`numpy.find_common_type` convention, mixing int64\n    and uint64 will result in a float64 dtype.\n\n    Examples\n    --------\n    A DataFrame where all columns are the same type (e.g., int64) results\n    in an array of the same type.\n\n    >>> df = pd.DataFrame({'age':    [ 3,  29],\n    ...                    'height': [94, 170],\n    ...                    'weight': [31, 115]})\n    >>> df\n       age  height  weight\n    0    3      94      31\n    1   29     170     115\n    >>> df.dtypes\n    age       int64\n    height    int64\n    weight    int64\n    dtype: object\n    >>> df.values\n    array([[  3,  94,  31],\n           [ 29, 170, 115]], dtype=int64)\n\n    A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n    results in an ndarray of the broadest type that accommodates these\n    mixed types (e.g., object).\n\n    >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n    ...                     ('lion',     80.5, 1),\n    ...                     ('monkey', np.nan, None)],\n    ...                   columns=('name', 'max_speed', 'rank'))\n    >>> df2.dtypes\n    name          object\n    max_speed    float64\n    rank          object\n    dtype: object\n    >>> df2.values\n    array([['parrot', 24.0, 'second'],\n           ['lion', 80.5, 1],\n           ['monkey', nan, None]], dtype=object)\n    \"\"\"\n    self._consolidate_inplace()\n    return self._data.as_array(transpose=self._AXIS_REVERSED)",
                "@property\ndef _values(self):\n    \"\"\"internal implementation\"\"\"\n    return self.values",
                "@property\ndef _get_values(self):\n    # compat\n    return self.values",
                "def _internal_get_values(self):\n    \"\"\"\n    Return an ndarray after converting sparse values to dense.\n\n    This is the same as ``.values`` for non-sparse data. For sparse\n    data contained in a `SparseArray`, the data are first\n    converted to a dense representation.\n\n    Returns\n    -------\n    numpy.ndarray\n        Numpy representation of DataFrame.\n\n    See Also\n    --------\n    values : Numpy representation of DataFrame.\n    SparseArray : Container for sparse data.\n    \"\"\"\n    return self.values",
                "@property\ndef dtypes(self):\n    \"\"\"\n    Return the dtypes in the DataFrame.\n\n    This returns a Series with the data type of each column.\n    The result's index is the original DataFrame's columns. Columns\n    with mixed types are stored with the ``object`` dtype. See\n    :ref:`the User Guide <basics.dtypes>` for more.\n\n    Returns\n    -------\n    pandas.Series\n        The data type of each column.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'float': [1.0],\n    ...                    'int': [1],\n    ...                    'datetime': [pd.Timestamp('20180310')],\n    ...                    'string': ['foo']})\n    >>> df.dtypes\n    float              float64\n    int                  int64\n    datetime    datetime64[ns]\n    string              object\n    dtype: object\n    \"\"\"\n    from pandas import Series\n\n    return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
                "def _to_dict_of_blocks(self, copy: bool_t = True):\n    \"\"\"\n    Return a dict of dtype -> Constructor Types that\n    each is a homogeneous dtype.\n\n    Internal ONLY\n    \"\"\"\n    return {\n        k: self._constructor(v).__finalize__(self)\n        for k, v, in self._data.to_dict(copy=copy).items()\n    }",
                "def astype(self, dtype, copy: bool_t = True, errors: str = \"raise\"):\n    \"\"\"\n    Cast a pandas object to a specified dtype ``dtype``.\n\n    Parameters\n    ----------\n    dtype : data type, or dict of column name -> data type\n        Use a numpy.dtype or Python type to cast entire pandas object to\n        the same type. Alternatively, use {col: dtype, ...}, where col is a\n        column label and dtype is a numpy.dtype or Python type to cast one\n        or more of the DataFrame's columns to column-specific types.\n    copy : bool, default True\n        Return a copy when ``copy=True`` (be very careful setting\n        ``copy=False`` as changes to values then may propagate to other\n        pandas objects).\n    errors : {'raise', 'ignore'}, default 'raise'\n        Control raising of exceptions on invalid data for provided dtype.\n\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object.\n\n    Returns\n    -------\n    casted : same type as caller\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to a numeric type.\n    numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n    Examples\n    --------\n    Create a DataFrame:\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    Cast all columns to int32:\n\n    >>> df.astype('int32').dtypes\n    col1    int32\n    col2    int32\n    dtype: object\n\n    Cast col1 to int32 using a dictionary:\n\n    >>> df.astype({'col1': 'int32'}).dtypes\n    col1    int32\n    col2    int64\n    dtype: object\n\n    Create a series:\n\n    >>> ser = pd.Series([1, 2], dtype='int32')\n    >>> ser\n    0    1\n    1    2\n    dtype: int32\n    >>> ser.astype('int64')\n    0    1\n    1    2\n    dtype: int64\n\n    Convert to categorical type:\n\n    >>> ser.astype('category')\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [1, 2]\n\n    Convert to ordered categorical type with custom ordering:\n\n    >>> cat_dtype = pd.api.types.CategoricalDtype(\n    ...     categories=[2, 1], ordered=True)\n    >>> ser.astype(cat_dtype)\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [2 < 1]\n\n    Note that using ``copy=False`` and changing data on a new\n    pandas object may propagate changes:\n\n    >>> s1 = pd.Series([1, 2])\n    >>> s2 = s1.astype('int64', copy=False)\n    >>> s2[0] = 10\n    >>> s1  # note that s1[0] has changed too\n    0    10\n    1     2\n    dtype: int64\n    \"\"\"\n    if is_dict_like(dtype):\n        if self.ndim == 1:  # i.e. Series\n            if len(dtype) > 1 or self.name not in dtype:\n                raise KeyError(\n                    \"Only the Series name can be used for \"\n                    \"the key in Series dtype mappings.\"\n                )\n            new_type = dtype[self.name]\n            return self.astype(new_type, copy, errors)\n\n        for col_name in dtype.keys():\n            if col_name not in self:\n                raise KeyError(\n                    \"Only a column name can be used for the \"\n                    \"key in a dtype mappings argument.\"\n                )\n        results = []\n        for col_name, col in self.items():\n            if col_name in dtype:\n                results.append(\n                    col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                )\n            else:\n                results.append(col.copy() if copy else col)\n\n    elif is_extension_array_dtype(dtype) and self.ndim > 1:\n        # GH 18099/22869: columnwise conversion to extension dtype\n        # GH 24704: use iloc to handle duplicate column names\n        results = [\n            self.iloc[:, i].astype(dtype, copy=copy)\n            for i in range(len(self.columns))\n        ]\n\n    else:\n        # else, only a single dtype is given\n        new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n        return self._constructor(new_data).__finalize__(self)\n\n    # GH 19920: retain column metadata after concat\n    result = pd.concat(results, axis=1, copy=False)\n    result.columns = self.columns\n    return result",
                "def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n    \"\"\"\n    Make a copy of this object's indices and data.\n\n    When ``deep=True`` (default), a new object will be created with a\n    copy of the calling object's data and indices. Modifications to\n    the data or indices of the copy will not be reflected in the\n    original object (see notes below).\n\n    When ``deep=False``, a new object will be created without copying\n    the calling object's data or index (only references to the data\n    and index are copied). Any changes to the data of the original\n    will be reflected in the shallow copy (and vice versa).\n\n    Parameters\n    ----------\n    deep : bool, default True\n        Make a deep copy, including a copy of the data and the indices.\n        With ``deep=False`` neither the indices nor the data are copied.\n\n    Returns\n    -------\n    copy : Series or DataFrame\n        Object type matches caller.\n\n    Notes\n    -----\n    When ``deep=True``, data is copied but actual Python objects\n    will not be copied recursively, only the reference to the object.\n    This is in contrast to `copy.deepcopy` in the Standard Library,\n    which recursively copies object data (see examples below).\n\n    While ``Index`` objects are copied when ``deep=True``, the underlying\n    numpy array is not copied for performance reasons. Since ``Index`` is\n    immutable, the underlying data can be safely shared and a copy\n    is not needed.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> s\n    a    1\n    b    2\n    dtype: int64\n\n    >>> s_copy = s.copy()\n    >>> s_copy\n    a    1\n    b    2\n    dtype: int64\n\n    **Shallow copy versus default (deep) copy:**\n\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> deep = s.copy()\n    >>> shallow = s.copy(deep=False)\n\n    Shallow copy shares data and index with original.\n\n    >>> s is shallow\n    False\n    >>> s.values is shallow.values and s.index is shallow.index\n    True\n\n    Deep copy has own copy of data and index.\n\n    >>> s is deep\n    False\n    >>> s.values is deep.values or s.index is deep.index\n    False\n\n    Updates to the data shared by shallow copy and original is reflected\n    in both; deep copy remains unchanged.\n\n    >>> s[0] = 3\n    >>> shallow[1] = 4\n    >>> s\n    a    3\n    b    4\n    dtype: int64\n    >>> shallow\n    a    3\n    b    4\n    dtype: int64\n    >>> deep\n    a    1\n    b    2\n    dtype: int64\n\n    Note that when copying an object containing Python objects, a deep copy\n    will copy the data, but will not do so recursively. Updating a nested\n    data object will be reflected in the deep copy.\n\n    >>> s = pd.Series([[1, 2], [3, 4]])\n    >>> deep = s.copy()\n    >>> s[0][0] = 10\n    >>> s\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    >>> deep\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    \"\"\"\n    data = self._data.copy(deep=deep)\n    return self._constructor(data).__finalize__(self)",
                "def __copy__(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n    return self.copy(deep=deep)",
                "def __deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries:\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                "def _convert(\n    self: FrameOrSeries,\n    datetime: bool_t = False,\n    numeric: bool_t = False,\n    timedelta: bool_t = False,\n    coerce: bool_t = False,\n    copy: bool_t = True,\n) -> FrameOrSeries:\n    \"\"\"\n    Attempt to infer better dtype for object columns\n\n    Parameters\n    ----------\n    datetime : bool, default False\n        If True, convert to date where possible.\n    numeric : bool, default False\n        If True, attempt to convert to numbers (including strings), with\n        unconvertible values becoming NaN.\n    timedelta : bool, default False\n        If True, convert to timedelta where possible.\n    coerce : bool, default False\n        If True, force conversion with unconvertible values converted to\n        nulls (NaN or NaT).\n    copy : bool, default True\n        If True, return a copy even if no copy is necessary (e.g. no\n        conversion was done). Note: This is meant for internal use, and\n        should not be confused with inplace.\n\n    Returns\n    -------\n    converted : same as input object\n    \"\"\"\n    validate_bool_kwarg(datetime, \"datetime\")\n    validate_bool_kwarg(numeric, \"numeric\")\n    validate_bool_kwarg(timedelta, \"timedelta\")\n    validate_bool_kwarg(coerce, \"coerce\")\n    validate_bool_kwarg(copy, \"copy\")\n    return self._constructor(\n        self._data.convert(\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n            copy=copy,\n        )\n    ).__finalize__(self)",
                "def infer_objects(self):\n    \"\"\"\n    Attempt to infer better dtypes for object columns.\n\n    Attempts soft conversion of object-dtyped\n    columns, leaving non-object and unconvertible\n    columns unchanged. The inference rules are the\n    same as during normal Series/DataFrame construction.\n\n    .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    converted : same type as input object\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to numeric type.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n    >>> df = df.iloc[1:]\n    >>> df\n       A\n    1  1\n    2  2\n    3  3\n\n    >>> df.dtypes\n    A    object\n    dtype: object\n\n    >>> df.infer_objects().dtypes\n    A    int64\n    dtype: object\n    \"\"\"\n    # numeric=False necessary to only soft convert;\n    # python objects will still be converted to\n    # native numpy numeric types\n    return self._constructor(\n        self._data.convert(\n            datetime=True, numeric=False, timedelta=True, coerce=False, copy=True\n        )\n    ).__finalize__(self)",
                "def fillna(\n    self: FrameOrSeries,\n    value=None,\n    method=None,\n    axis=None,\n    inplace: bool_t = False,\n    limit=None,\n    downcast=None,\n) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series, or DataFrame\n        Value to use to fill holes (e.g. 0), alternately a\n        dict/Series/DataFrame of values specifying which value to use for\n        each index (for a Series) or column (for a DataFrame).  Values not\n        in the dict/Series/DataFrame will not be filled. This value cannot\n        be a list.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use next valid observation to fill gap.\n    axis : %(axes_single_arg)s\n        Axis along which to fill missing values.\n    inplace : bool, default False\n        If True, fill in-place. Note: this will modify any\n        other views on this object (e.g., a no-copy slice for a column in a\n        DataFrame).\n    limit : int, default None\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled. Must be greater than 0 if not None.\n    downcast : dict, default is None\n        A dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n\n    See Also\n    --------\n    interpolate : Fill NaN values using interpolation.\n    reindex : Conform object to new index.\n    asfreq : Convert TimeSeries to specified frequency.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n    ...                    [3, 4, np.nan, 1],\n    ...                    [np.nan, np.nan, np.nan, 5],\n    ...                    [np.nan, 3, np.nan, 4]],\n    ...                   columns=list('ABCD'))\n    >>> df\n         A    B   C  D\n    0  NaN  2.0 NaN  0\n    1  3.0  4.0 NaN  1\n    2  NaN  NaN NaN  5\n    3  NaN  3.0 NaN  4\n\n    Replace all NaN elements with 0s.\n\n    >>> df.fillna(0)\n        A   B   C   D\n    0   0.0 2.0 0.0 0\n    1   3.0 4.0 0.0 1\n    2   0.0 0.0 0.0 5\n    3   0.0 3.0 0.0 4\n\n    We can also propagate non-null values forward or backward.\n\n    >>> df.fillna(method='ffill')\n        A   B   C   D\n    0   NaN 2.0 NaN 0\n    1   3.0 4.0 NaN 1\n    2   3.0 4.0 NaN 5\n    3   3.0 3.0 NaN 4\n\n    Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n    2, and 3 respectively.\n\n    >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n    >>> df.fillna(value=values)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 2.0 1\n    2   0.0 1.0 2.0 5\n    3   0.0 3.0 2.0 4\n\n    Only replace the first NaN element.\n\n    >>> df.fillna(value=values, limit=1)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 NaN 1\n    2   NaN 1.0 NaN 5\n    3   NaN 3.0 NaN 4\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    value, method = validate_fillna_kwargs(value, method)\n\n    self._consolidate_inplace()\n\n    # set the default here, so functions examining the signaure\n    # can detect if something was set (e.g. in groupby) (GH9221)\n    if axis is None:\n        axis = 0\n    axis = self._get_axis_number(axis)\n\n    if value is None:\n\n        if self._is_mixed_type and axis == 1:\n            if inplace:\n                raise NotImplementedError()\n            result = self.T.fillna(method=method, limit=limit).T\n\n            # need to downcast here because of all of the transposes\n            result._data = result._data.downcast()\n\n            return result\n\n        new_data = self._data.interpolate(\n            method=method,\n            axis=axis,\n            limit=limit,\n            inplace=inplace,\n            coerce=True,\n            downcast=downcast,\n        )\n    else:\n        if len(self._get_axis(axis)) == 0:\n            return self\n\n        if self.ndim == 1:\n            if isinstance(value, (dict, ABCSeries)):\n                value = create_series_with_explicit_dtype(\n                    value, dtype_if_empty=object\n                )\n            elif not is_list_like(value):\n                pass\n            else:\n                raise TypeError(\n                    '\"value\" parameter must be a scalar, dict '\n                    \"or Series, but you passed a \"\n                    f'\"{type(value).__name__}\"'\n                )\n\n            new_data = self._data.fillna(\n                value=value, limit=limit, inplace=inplace, downcast=downcast\n            )\n\n        elif isinstance(value, (dict, ABCSeries)):\n            if axis == 1:\n                raise NotImplementedError(\n                    \"Currently only can fill \"\n                    \"with dict/Series column \"\n                    \"by column\"\n                )\n\n            result = self if inplace else self.copy()\n            for k, v in value.items():\n                if k not in result:\n                    continue\n                obj = result[k]\n                obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n            return result if not inplace else None\n\n        elif not is_list_like(value):\n            new_data = self._data.fillna(\n                value=value, limit=limit, inplace=inplace, downcast=downcast\n            )\n        elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n            new_data = self.where(self.notna(), value)\n        else:\n            raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n    if inplace:\n        self._update_inplace(new_data)\n        return None\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "def ffill(\n    self: FrameOrSeries,\n    axis=None,\n    inplace: bool_t = False,\n    limit=None,\n    downcast=None,\n) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(\n        method=\"ffill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n    )",
                "def bfill(\n    self: FrameOrSeries,\n    axis=None,\n    inplace: bool_t = False,\n    limit=None,\n    downcast=None,\n) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(\n        method=\"bfill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n    )",
                "@Appender(_shared_docs[\"replace\"] % _shared_doc_kwargs)\ndef replace(\n    self,\n    to_replace=None,\n    value=None,\n    inplace=False,\n    limit=None,\n    regex=False,\n    method=\"pad\",\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_bool(regex) and to_replace is not None:\n        raise AssertionError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n\n    self._consolidate_inplace()\n\n    if value is None:\n        # passing a single value that is scalar like\n        # when value is None (GH5319), for compat\n        if not is_dict_like(to_replace) and not is_dict_like(regex):\n            to_replace = [to_replace]\n\n        if isinstance(to_replace, (tuple, list)):\n            if isinstance(self, ABCDataFrame):\n                return self.apply(\n                    _single_replace, args=(to_replace, method, inplace, limit)\n                )\n            return _single_replace(self, to_replace, method, inplace, limit)\n\n        if not is_dict_like(to_replace):\n            if not is_dict_like(regex):\n                raise TypeError(\n                    'If \"to_replace\" and \"value\" are both None'\n                    ' and \"to_replace\" is not a list, then '\n                    \"regex must be a mapping\"\n                )\n            to_replace = regex\n            regex = True\n\n        items = list(to_replace.items())\n        keys, values = zip(*items) if items else ([], [])\n\n        are_mappings = [is_dict_like(v) for v in values]\n\n        if any(are_mappings):\n            if not all(are_mappings):\n                raise TypeError(\n                    \"If a nested mapping is passed, all values\"\n                    \" of the top level mapping must be \"\n                    \"mappings\"\n                )\n            # passed a nested dict/Series\n            to_rep_dict = {}\n            value_dict = {}\n\n            for k, v in items:\n                keys, values = list(zip(*v.items())) or ([], [])\n\n                to_rep_dict[k] = list(keys)\n                value_dict[k] = list(values)\n\n            to_replace, value = to_rep_dict, value_dict\n        else:\n            to_replace, value = keys, values\n\n        return self.replace(\n            to_replace, value, inplace=inplace, limit=limit, regex=regex\n        )\n    else:\n\n        # need a non-zero len on all axes\n        if not self.size:\n            return self\n\n        new_data = self._data\n        if is_dict_like(to_replace):\n            if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                res = self if inplace else self.copy()\n                for c, src in to_replace.items():\n                    if c in value and c in self:\n                        # object conversion is handled in\n                        # series.replace which is called recursively\n                        res[c] = res[c].replace(\n                            to_replace=src,\n                            value=value[c],\n                            inplace=False,\n                            regex=regex,\n                        )\n                return None if inplace else res\n\n            # {'A': NA} -> 0\n            elif not is_list_like(value):\n                keys = [(k, src) for k, src in to_replace.items() if k in self]\n                keys_len = len(keys) - 1\n                for i, (k, src) in enumerate(keys):\n                    convert = i == keys_len\n                    new_data = new_data.replace(\n                        to_replace=src,\n                        value=value,\n                        filter=[k],\n                        inplace=inplace,\n                        regex=regex,\n                        convert=convert,\n                    )\n            else:\n                raise TypeError(\"value argument must be scalar, dict, or Series\")\n\n        elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n            if is_list_like(value):\n                if len(to_replace) != len(value):\n                    raise ValueError(\n                        f\"Replacement lists must match in length. \"\n                        f\"Expecting {len(to_replace)} got {len(value)} \"\n                    )\n\n                new_data = self._data.replace_list(\n                    src_list=to_replace,\n                    dest_list=value,\n                    inplace=inplace,\n                    regex=regex,\n                )\n\n            else:  # [NA, ''] -> 0\n                new_data = self._data.replace(\n                    to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                )\n        elif to_replace is None:\n            if not (\n                is_re_compilable(regex)\n                or is_list_like(regex)\n                or is_dict_like(regex)\n            ):\n                raise TypeError(\n                    f\"'regex' must be a string or a compiled regular expression \"\n                    f\"or a list or dict of strings or regular expressions, \"\n                    f\"you passed a {repr(type(regex).__name__)}\"\n                )\n            return self.replace(\n                regex, value, inplace=inplace, limit=limit, regex=True\n            )\n        else:\n\n            # dest iterable dict-like\n            if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                new_data = self._data\n\n                for k, v in value.items():\n                    if k in self:\n                        new_data = new_data.replace(\n                            to_replace=to_replace,\n                            value=v,\n                            filter=[k],\n                            inplace=inplace,\n                            regex=regex,\n                        )\n\n            elif not is_list_like(value):  # NA -> 0\n                new_data = self._data.replace(\n                    to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                )\n            else:\n                raise TypeError(\n                    f'Invalid \"to_replace\" type: {repr(type(to_replace).__name__)}'\n                )\n\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "@Appender(_shared_docs[\"interpolate\"] % _shared_doc_kwargs)\ndef interpolate(\n    self,\n    method=\"linear\",\n    axis=0,\n    limit=None,\n    inplace=False,\n    limit_direction=\"forward\",\n    limit_area=None,\n    downcast=None,\n    **kwargs,\n):\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = self._get_axis_number(axis)\n\n    if axis == 0:\n        ax = self._info_axis_name\n        _maybe_transposed_self = self\n    elif axis == 1:\n        _maybe_transposed_self = self.T\n        ax = 1\n\n    ax = _maybe_transposed_self._get_axis_number(ax)\n\n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n\n    if isinstance(_maybe_transposed_self.index, MultiIndex) and method != \"linear\":\n        raise ValueError(\n            \"Only `method=linear` interpolation is supported on MultiIndexes.\"\n        )\n\n    if _maybe_transposed_self._data.get_dtype_counts().get(\"object\") == len(\n        _maybe_transposed_self.T\n    ):\n        raise TypeError(\n            \"Cannot interpolate with all object-dtype columns \"\n            \"in the DataFrame. Try setting at least one \"\n            \"column to a numeric dtype.\"\n        )\n\n    # create/use the index\n    if method == \"linear\":\n        # prior default\n        index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n    else:\n        index = _maybe_transposed_self._get_axis(alt_ax)\n        methods = {\"index\", \"values\", \"nearest\", \"time\"}\n        is_numeric_or_datetime = (\n            is_numeric_dtype(index)\n            or is_datetime64_any_dtype(index)\n            or is_timedelta64_dtype(index)\n        )\n        if method not in methods and not is_numeric_or_datetime:\n            raise ValueError(\n                \"Index column must be numeric or datetime type when \"\n                f\"using {method} method other than linear. \"\n                \"Try setting a numeric or datetime index column before \"\n                \"interpolating.\"\n            )\n\n    if isna(index).any():\n        raise NotImplementedError(\n            \"Interpolation with NaNs in the index \"\n            \"has not been implemented. Try filling \"\n            \"those NaNs before interpolating.\"\n        )\n    data = _maybe_transposed_self._data\n    new_data = data.interpolate(\n        method=method,\n        axis=ax,\n        index=index,\n        values=_maybe_transposed_self,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        inplace=inplace,\n        downcast=downcast,\n        **kwargs,\n    )\n\n    if inplace:\n        if axis == 1:\n            new_data = self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis == 1:\n            res = res.T\n        return res",
                "def asof(self, where, subset=None):\n    \"\"\"\n    Return the last row(s) without any NaNs before `where`.\n\n    The last row (for each element in `where`, if list) without any\n    NaN is taken.\n    In case of a :class:`~pandas.DataFrame`, the last row without NaN\n    considering only the subset of columns (if not `None`)\n\n    If there is no good value, NaN is returned for a Series or\n    a Series of NaN values for a DataFrame\n\n    Parameters\n    ----------\n    where : date or array-like of dates\n        Date(s) before which the last row(s) are returned.\n    subset : str or array-like of str, default `None`\n        For DataFrame, if not `None`, only use these columns to\n        check for NaNs.\n\n    Returns\n    -------\n    scalar, Series, or DataFrame\n\n        The return can be:\n\n        * scalar : when `self` is a Series and `where` is a scalar\n        * Series: when `self` is a Series and `where` is an array-like,\n          or when `self` is a DataFrame and `where` is a scalar\n        * DataFrame : when `self` is a DataFrame and `where` is an\n          array-like\n\n        Return scalar, Series, or DataFrame.\n\n    See Also\n    --------\n    merge_asof : Perform an asof merge. Similar to left join.\n\n    Notes\n    -----\n    Dates are assumed to be sorted. Raises if this is not the case.\n\n    Examples\n    --------\n    A Series and a scalar `where`.\n\n    >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n    >>> s\n    10    1.0\n    20    2.0\n    30    NaN\n    40    4.0\n    dtype: float64\n\n    >>> s.asof(20)\n    2.0\n\n    For a sequence `where`, a Series is returned. The first value is\n    NaN, because the first element of `where` is before the first\n    index value.\n\n    >>> s.asof([5, 20])\n    5     NaN\n    20    2.0\n    dtype: float64\n\n    Missing values are not considered. The following is ``2.0``, not\n    NaN, even though NaN is at the index location for ``30``.\n\n    >>> s.asof(30)\n    2.0\n\n    Take all columns into consideration\n\n    >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n    ...                    'b': [None, None, None, None, 500]},\n    ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n    ...                                           '2018-02-27 09:02:00',\n    ...                                           '2018-02-27 09:03:00',\n    ...                                           '2018-02-27 09:04:00',\n    ...                                           '2018-02-27 09:05:00']))\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']))\n                          a   b\n    2018-02-27 09:03:30 NaN NaN\n    2018-02-27 09:04:30 NaN NaN\n\n    Take a single column into consideration\n\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']),\n    ...         subset=['a'])\n                             a   b\n    2018-02-27 09:03:30   30.0 NaN\n    2018-02-27 09:04:30   40.0 NaN\n    \"\"\"\n    if isinstance(where, str):\n        where = Timestamp(where)\n\n    if not self.index.is_monotonic:\n        raise ValueError(\"asof requires a sorted index\")\n\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if subset is not None:\n            raise ValueError(\"subset is not valid for Series\")\n    else:\n        if subset is None:\n            subset = self.columns\n        if not is_list_like(subset):\n            subset = [subset]\n\n    is_list = is_list_like(where)\n    if not is_list:\n        start = self.index[0]\n        if isinstance(self.index, PeriodIndex):\n            where = Period(where, freq=self.index.freq).ordinal\n            start = start.ordinal\n\n        if where < start:\n            if not is_series:\n                from pandas import Series\n\n                return Series(index=self.columns, name=where, dtype=np.float64)\n            return np.nan\n\n        # It's always much faster to use a *while* loop here for\n        # Series than pre-computing all the NAs. However a\n        # *while* loop is extremely expensive for DataFrame\n        # so we later pre-compute all the NAs and use the same\n        # code path whether *where* is a scalar or list.\n        # See PR: https://github.com/pandas-dev/pandas/pull/14476\n        if is_series:\n            loc = self.index.searchsorted(where, side=\"right\")\n            if loc > 0:\n                loc -= 1\n\n            values = self._values\n            while loc > 0 and isna(values[loc]):\n                loc -= 1\n            return values[loc]\n\n    if not isinstance(where, Index):\n        where = Index(where) if is_list else Index([where])\n\n    nulls = self.isna() if is_series else self[subset].isna().any(1)\n    if nulls.all():\n        if is_series:\n            return self._constructor(np.nan, index=where, name=self.name)\n        elif is_list:\n            from pandas import DataFrame\n\n            return DataFrame(np.nan, index=where, columns=self.columns)\n        else:\n            from pandas import Series\n\n            return Series(np.nan, index=self.columns, name=where[0])\n\n    locs = self.index.asof_locs(where, ~(nulls.values))\n\n    # mask the missing\n    missing = locs == -1\n    data = self.take(locs, is_copy=False)\n    data.index = where\n    data.loc[missing] = np.nan\n    return data if is_list else data.iloc[-1]",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isna(self):\n    return isna(self).__finalize__(self)",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isnull(self):\n    return isna(self).__finalize__(self)",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notna(self):\n    return notna(self).__finalize__(self)",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notnull(self):\n    return notna(self).__finalize__(self)",
                "def _clip_with_scalar(self, lower, upper, inplace: bool_t = False):\n    if (lower is not None and np.any(isna(lower))) or (\n        upper is not None and np.any(isna(upper))\n    ):\n        raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n    result = self\n    mask = isna(self.values)\n\n    with np.errstate(all=\"ignore\"):\n        if upper is not None:\n            subset = self.to_numpy() <= upper\n            result = result.where(subset, upper, axis=None, inplace=False)\n        if lower is not None:\n            subset = self.to_numpy() >= lower\n            result = result.where(subset, lower, axis=None, inplace=False)\n\n    if np.any(mask):\n        result[mask] = np.nan\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                "def _clip_with_one_bound(self, threshold, method, axis, inplace):\n\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n\n    # method is self.le for upper bound and self.ge for lower bound\n    if is_scalar(threshold) and is_number(threshold):\n        if method.__name__ == \"le\":\n            return self._clip_with_scalar(None, threshold, inplace=inplace)\n        return self._clip_with_scalar(threshold, None, inplace=inplace)\n\n    subset = method(threshold, axis=axis) | isna(self)\n\n    # GH #15390\n    # In order for where method to work, the threshold must\n    # be transformed to NDFrame from other array like structure.\n    if (not isinstance(threshold, ABCSeries)) and is_list_like(threshold):\n        if isinstance(self, ABCSeries):\n            threshold = self._constructor(threshold, index=self.index)\n        else:\n            threshold = _align_method_FRAME(self, threshold, axis)\n    return self.where(subset, threshold, axis=axis, inplace=inplace)",
                "def clip(\n    self,\n    lower=None,\n    upper=None,\n    axis=None,\n    inplace: bool_t = False,\n    *args,\n    **kwargs,\n):\n    \"\"\"\n    Trim values at input threshold(s).\n\n    Assigns values outside boundary to boundary values. Thresholds\n    can be singular values or array like, and in the latter case\n    the clipping is performed element-wise in the specified axis.\n\n    Parameters\n    ----------\n    lower : float or array_like, default None\n        Minimum threshold value. All values below this\n        threshold will be set to it.\n    upper : float or array_like, default None\n        Maximum threshold value. All values above this\n        threshold will be set to it.\n    axis : int or str axis name, optional\n        Align object with lower and upper along the given axis.\n    inplace : bool, default False\n        Whether to perform the operation in place on the data.\n\n        .. versionadded:: 0.21.0\n    *args, **kwargs\n        Additional keywords have no effect but might be accepted\n        for compatibility with numpy.\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as calling object with the values outside the\n        clip boundaries replaced.\n\n    Examples\n    --------\n    >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n    >>> df = pd.DataFrame(data)\n    >>> df\n       col_0  col_1\n    0      9     -2\n    1     -3     -7\n    2      0      6\n    3     -1      8\n    4      5     -5\n\n    Clips per column using lower and upper thresholds:\n\n    >>> df.clip(-4, 6)\n       col_0  col_1\n    0      6     -2\n    1     -3     -4\n    2      0      6\n    3     -1      6\n    4      5     -4\n\n    Clips using specific lower and upper thresholds per column element:\n\n    >>> t = pd.Series([2, -4, -1, 6, 3])\n    >>> t\n    0    2\n    1   -4\n    2   -1\n    3    6\n    4    3\n    dtype: int64\n\n    >>> df.clip(t, t + 4, axis=0)\n       col_0  col_1\n    0      6      2\n    1     -3     -4\n    2      0      3\n    3      6      8\n    4      5      3\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = nv.validate_clip_with_axis(axis, args, kwargs)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n\n    # GH 17276\n    # numpy doesn't like NaN as a clip value\n    # so ignore\n    # GH 19992\n    # numpy doesn't drop a list-like bound containing NaN\n    if not is_list_like(lower) and np.any(isna(lower)):\n        lower = None\n    if not is_list_like(upper) and np.any(isna(upper)):\n        upper = None\n\n    # GH 2747 (arguments were reversed)\n    if lower is not None and upper is not None:\n        if is_scalar(lower) and is_scalar(upper):\n            lower, upper = min(lower, upper), max(lower, upper)\n\n    # fast-path for scalars\n    if (lower is None or (is_scalar(lower) and is_number(lower))) and (\n        upper is None or (is_scalar(upper) and is_number(upper))\n    ):\n        return self._clip_with_scalar(lower, upper, inplace=inplace)\n\n    result = self\n    if lower is not None:\n        result = result._clip_with_one_bound(\n            lower, method=self.ge, axis=axis, inplace=inplace\n        )\n    if upper is not None:\n        if inplace:\n            result = self\n        result = result._clip_with_one_bound(\n            upper, method=self.le, axis=axis, inplace=inplace\n        )\n\n    return result",
                "def groupby(\n    self,\n    by=None,\n    axis=0,\n    level=None,\n    as_index: bool_t = True,\n    sort: bool_t = True,\n    group_keys: bool_t = True,\n    squeeze: bool_t = False,\n    observed: bool_t = False,\n):\n    \"\"\"\n    Group DataFrame or Series using a mapper or by a Series of columns.\n\n    A groupby operation involves some combination of splitting the\n    object, applying a function, and combining the results. This can be\n    used to group large amounts of data and compute operations on these\n    groups.\n\n    Parameters\n    ----------\n    by : mapping, function, label, or list of labels\n        Used to determine the groups for the groupby.\n        If ``by`` is a function, it's called on each value of the object's\n        index. If a dict or Series is passed, the Series or dict VALUES\n        will be used to determine the groups (the Series' values are first\n        aligned; see ``.align()`` method). If an ndarray is passed, the\n        values are used as-is determine the groups. A label or list of\n        labels may be passed to group by the columns in ``self``. Notice\n        that a tuple is interpreted as a (single) key.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Split along rows (0) or columns (1).\n    level : int, level name, or sequence of such, default None\n        If the axis is a MultiIndex (hierarchical), group by a particular\n        level or levels.\n    as_index : bool, default True\n        For aggregated output, return object with group labels as the\n        index. Only relevant for DataFrame input. as_index=False is\n        effectively \"SQL-style\" grouped output.\n    sort : bool, default True\n        Sort group keys. Get better performance by turning this off.\n        Note this does not influence the order of observations within each\n        group. Groupby preserves the order of rows within each group.\n    group_keys : bool, default True\n        When calling apply, add group keys to index to identify pieces.\n    squeeze : bool, default False\n        Reduce the dimensionality of the return type if possible,\n        otherwise return a consistent type.\n    observed : bool, default False\n        This only applies if any of the groupers are Categoricals.\n        If True: only show observed values for categorical groupers.\n        If False: show all values for categorical groupers.\n\n        .. versionadded:: 0.23.0\n\n    Returns\n    -------\n    DataFrameGroupBy or SeriesGroupBy\n        Depends on the calling object and returns groupby object that\n        contains information about the groups.\n\n    See Also\n    --------\n    resample : Convenience method for frequency conversion and resampling\n        of time series.\n\n    Notes\n    -----\n    See the `user guide\n    <http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_ for more.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'Animal': ['Falcon', 'Falcon',\n    ...                               'Parrot', 'Parrot'],\n    ...                    'Max Speed': [380., 370., 24., 26.]})\n    >>> df\n       Animal  Max Speed\n    0  Falcon      380.0\n    1  Falcon      370.0\n    2  Parrot       24.0\n    3  Parrot       26.0\n    >>> df.groupby(['Animal']).mean()\n            Max Speed\n    Animal\n    Falcon      375.0\n    Parrot       25.0\n\n    **Hierarchical Indexes**\n\n    We can groupby different levels of a hierarchical index\n    using the `level` parameter:\n\n    >>> arrays = [['Falcon', 'Falcon', 'Parrot', 'Parrot'],\n    ...           ['Captive', 'Wild', 'Captive', 'Wild']]\n    >>> index = pd.MultiIndex.from_arrays(arrays, names=('Animal', 'Type'))\n    >>> df = pd.DataFrame({'Max Speed': [390., 350., 30., 20.]},\n    ...                   index=index)\n    >>> df\n                    Max Speed\n    Animal Type\n    Falcon Captive      390.0\n           Wild         350.0\n    Parrot Captive       30.0\n           Wild          20.0\n    >>> df.groupby(level=0).mean()\n            Max Speed\n    Animal\n    Falcon      370.0\n    Parrot       25.0\n    >>> df.groupby(level=1).mean()\n             Max Speed\n    Type\n    Captive      210.0\n    Wild         185.0\n    \"\"\"\n    from pandas.core.groupby.groupby import get_groupby\n\n    if level is None and by is None:\n        raise TypeError(\"You have to supply one of 'by' and 'level'\")\n    axis = self._get_axis_number(axis)\n\n    return get_groupby(\n        self,\n        by=by,\n        axis=axis,\n        level=level,\n        as_index=as_index,\n        sort=sort,\n        group_keys=group_keys,\n        squeeze=squeeze,\n        observed=observed,\n    )",
                "def asfreq(\n    self,\n    freq,\n    method=None,\n    how: Optional[str] = None,\n    normalize: bool_t = False,\n    fill_value=None,\n):\n    \"\"\"\n    Convert TimeSeries to specified frequency.\n\n    Optionally provide filling method to pad/backfill missing values.\n\n    Returns the original data conformed to a new index with the specified\n    frequency. ``resample`` is more appropriate if an operation, such as\n    summarization, is necessary to represent the data at the new frequency.\n\n    Parameters\n    ----------\n    freq : DateOffset or str\n    method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n        Method to use for filling holes in reindexed Series (note this\n        does not fill NaNs that already were present):\n\n        * 'pad' / 'ffill': propagate last valid observation forward to next\n          valid\n        * 'backfill' / 'bfill': use NEXT valid observation to fill.\n    how : {'start', 'end'}, default end\n        For PeriodIndex only (see PeriodIndex.asfreq).\n    normalize : bool, default False\n        Whether to reset output index to midnight.\n    fill_value : scalar, optional\n        Value to use for missing values, applied during upsampling (note\n        this does not fill NaNs that already were present).\n\n    Returns\n    -------\n    converted : same type as caller\n\n    See Also\n    --------\n    reindex\n\n    Notes\n    -----\n    To learn more about the frequency strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 4 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n    >>> df = pd.DataFrame({'s':series})\n    >>> df\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample the series into 30 second bins.\n\n    >>> df.asfreq(freq='30S')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    NaN\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``fill value``.\n\n    >>> df.asfreq(freq='30S', fill_value=9.0)\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    9.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    9.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    9.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``method``.\n\n    >>> df.asfreq(freq='30S', method='bfill')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    2.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    3.0\n    2000-01-01 00:03:00    3.0\n    \"\"\"\n    from pandas.core.resample import asfreq\n\n    return asfreq(\n        self,\n        freq,\n        method=method,\n        how=how,\n        normalize=normalize,\n        fill_value=fill_value,\n    )",
                "def at_time(self, time, asof: bool_t = False, axis=None):\n    \"\"\"\n    Select values at particular time of day (e.g. 9:30AM).\n\n    Parameters\n    ----------\n    time : datetime.time or str\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    between_time : Select values between particular times of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_at_time : Get just the index locations for\n        values at particular time of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-09 12:00:00  2\n    2018-04-10 00:00:00  3\n    2018-04-10 12:00:00  4\n\n    >>> ts.at_time('12:00')\n                         A\n    2018-04-09 12:00:00  2\n    2018-04-10 12:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_at_time(time, asof=asof)\n    except AttributeError:\n        raise TypeError(\"Index must be DatetimeIndex\")\n\n    return self.take(indexer, axis=axis)",
                "def between_time(\n    self,\n    start_time,\n    end_time,\n    include_start: bool_t = True,\n    include_end: bool_t = True,\n    axis=None,\n):\n    \"\"\"\n    Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n    By setting ``start_time`` to be later than ``end_time``,\n    you can get the times that are *not* between the two times.\n\n    Parameters\n    ----------\n    start_time : datetime.time or str\n    end_time : datetime.time or str\n    include_start : bool, default True\n    include_end : bool, default True\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    at_time : Select values at a particular time of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_between_time : Get just the index locations for\n        values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n    2018-04-12 01:00:00  4\n\n    >>> ts.between_time('0:15', '0:45')\n                         A\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n\n    You get the times that are *not* between two times by setting\n    ``start_time`` later than ``end_time``:\n\n    >>> ts.between_time('0:45', '0:15')\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-12 01:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_between_time(\n            start_time,\n            end_time,\n            include_start=include_start,\n            include_end=include_end,\n        )\n    except AttributeError:\n        raise TypeError(\"Index must be DatetimeIndex\")\n\n    return self.take(indexer, axis=axis)",
                "def resample(\n    self,\n    rule,\n    axis=0,\n    closed: Optional[str] = None,\n    label: Optional[str] = None,\n    convention: str = \"start\",\n    kind: Optional[str] = None,\n    loffset=None,\n    base: int = 0,\n    on=None,\n    level=None,\n):\n    \"\"\"\n    Resample time-series data.\n\n    Convenience method for frequency conversion and resampling of time\n    series. Object must have a datetime-like index (`DatetimeIndex`,\n    `PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\n    to the `on` or `level` keyword.\n\n    Parameters\n    ----------\n    rule : DateOffset, Timedelta or str\n        The offset string or object representing target conversion.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Which axis to use for up- or down-sampling. For `Series` this\n        will default to 0, i.e. along the rows. Must be\n        `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    label : {'right', 'left'}, default None\n        Which bin edge label to label bucket with. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    convention : {'start', 'end', 's', 'e'}, default 'start'\n        For `PeriodIndex` only, controls whether to use the start or\n        end of `rule`.\n    kind : {'timestamp', 'period'}, optional, default None\n        Pass 'timestamp' to convert the resulting index to a\n        `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n        By default the input representation is retained.\n    loffset : timedelta, default None\n        Adjust the resampled time labels.\n    base : int, default 0\n        For frequencies that evenly subdivide 1 day, the \"origin\" of the\n        aggregated intervals. For example, for '5min' frequency, base could\n        range from 0 through 4. Defaults to 0.\n    on : str, optional\n        For a DataFrame, column to use instead of index for resampling.\n        Column must be datetime-like.\n\n    level : str or int, optional\n        For a MultiIndex, level (name or number) to use for\n        resampling. `level` must be datetime-like.\n\n    Returns\n    -------\n    Resampler object\n\n    See Also\n    --------\n    groupby : Group by mapping, function, label, or list of labels.\n    Series.resample : Resample a Series.\n    DataFrame.resample: Resample a DataFrame.\n\n    Notes\n    -----\n    See the `user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\n    for more.\n\n    To learn more about the offset strings, please see `this link\n    <http://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 9 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n    >>> series = pd.Series(range(9), index=index)\n    >>> series\n    2000-01-01 00:00:00    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:02:00    2\n    2000-01-01 00:03:00    3\n    2000-01-01 00:04:00    4\n    2000-01-01 00:05:00    5\n    2000-01-01 00:06:00    6\n    2000-01-01 00:07:00    7\n    2000-01-01 00:08:00    8\n    Freq: T, dtype: int64\n\n    Downsample the series into 3 minute bins and sum the values\n    of the timestamps falling into a bin.\n\n    >>> series.resample('3T').sum()\n    2000-01-01 00:00:00     3\n    2000-01-01 00:03:00    12\n    2000-01-01 00:06:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but label each\n    bin using the right edge instead of the left. Please note that the\n    value in the bucket used as the label is not included in the bucket,\n    which it labels. For example, in the original series the\n    bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n    value in the resampled bucket with the label ``2000-01-01 00:03:00``\n    does not include 3 (if it did, the summed value would be 6, not 3).\n    To include this value close the right side of the bin interval as\n    illustrated in the example below this one.\n\n    >>> series.resample('3T', label='right').sum()\n    2000-01-01 00:03:00     3\n    2000-01-01 00:06:00    12\n    2000-01-01 00:09:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> series.resample('3T', label='right', closed='right').sum()\n    2000-01-01 00:00:00     0\n    2000-01-01 00:03:00     6\n    2000-01-01 00:06:00    15\n    2000-01-01 00:09:00    15\n    Freq: 3T, dtype: int64\n\n    Upsample the series into 30 second bins.\n\n    >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n    2000-01-01 00:00:00   0.0\n    2000-01-01 00:00:30   NaN\n    2000-01-01 00:01:00   1.0\n    2000-01-01 00:01:30   NaN\n    2000-01-01 00:02:00   2.0\n    Freq: 30S, dtype: float64\n\n    Upsample the series into 30 second bins and fill the ``NaN``\n    values using the ``pad`` method.\n\n    >>> series.resample('30S').pad()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    1\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Upsample the series into 30 second bins and fill the\n    ``NaN`` values using the ``bfill`` method.\n\n    >>> series.resample('30S').bfill()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    1\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    2\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Pass a custom function via ``apply``\n\n    >>> def custom_resampler(array_like):\n    ...     return np.sum(array_like) + 5\n    ...\n    >>> series.resample('3T').apply(custom_resampler)\n    2000-01-01 00:00:00     8\n    2000-01-01 00:03:00    17\n    2000-01-01 00:06:00    26\n    Freq: 3T, dtype: int64\n\n    For a Series with a PeriodIndex, the keyword `convention` can be\n    used to control whether to use the start or end of `rule`.\n\n    Resample a year by quarter using 'start' `convention`. Values are\n    assigned to the first quarter of the period.\n\n    >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n    ...                                             freq='A',\n    ...                                             periods=2))\n    >>> s\n    2012    1\n    2013    2\n    Freq: A-DEC, dtype: int64\n    >>> s.resample('Q', convention='start').asfreq()\n    2012Q1    1.0\n    2012Q2    NaN\n    2012Q3    NaN\n    2012Q4    NaN\n    2013Q1    2.0\n    2013Q2    NaN\n    2013Q3    NaN\n    2013Q4    NaN\n    Freq: Q-DEC, dtype: float64\n\n    Resample quarters by month using 'end' `convention`. Values are\n    assigned to the last month of the period.\n\n    >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n    ...                                                   freq='Q',\n    ...                                                   periods=4))\n    >>> q\n    2018Q1    1\n    2018Q2    2\n    2018Q3    3\n    2018Q4    4\n    Freq: Q-DEC, dtype: int64\n    >>> q.resample('M', convention='end').asfreq()\n    2018-03    1.0\n    2018-04    NaN\n    2018-05    NaN\n    2018-06    2.0\n    2018-07    NaN\n    2018-08    NaN\n    2018-09    3.0\n    2018-10    NaN\n    2018-11    NaN\n    2018-12    4.0\n    Freq: M, dtype: float64\n\n    For DataFrame objects, the keyword `on` can be used to specify the\n    column instead of the index for resampling.\n\n    >>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df = pd.DataFrame(d)\n    >>> df['week_starting'] = pd.date_range('01/01/2018',\n    ...                                     periods=8,\n    ...                                     freq='W')\n    >>> df\n       price  volume week_starting\n    0     10      50    2018-01-07\n    1     11      60    2018-01-14\n    2      9      40    2018-01-21\n    3     13     100    2018-01-28\n    4     14      50    2018-02-04\n    5     18     100    2018-02-11\n    6     17      40    2018-02-18\n    7     19      50    2018-02-25\n    >>> df.resample('M', on='week_starting').mean()\n                   price  volume\n    week_starting\n    2018-01-31     10.75    62.5\n    2018-02-28     17.00    60.0\n\n    For a DataFrame with MultiIndex, the keyword `level` can be used to\n    specify on which level the resampling needs to take place.\n\n    >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n    >>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df2 = pd.DataFrame(d2,\n    ...                    index=pd.MultiIndex.from_product([days,\n    ...                                                     ['morning',\n    ...                                                      'afternoon']]\n    ...                                                     ))\n    >>> df2\n                          price  volume\n    2000-01-01 morning       10      50\n               afternoon     11      60\n    2000-01-02 morning        9      40\n               afternoon     13     100\n    2000-01-03 morning       14      50\n               afternoon     18     100\n    2000-01-04 morning       17      40\n               afternoon     19      50\n    >>> df2.resample('D', level=0).sum()\n                price  volume\n    2000-01-01     21     110\n    2000-01-02     22     140\n    2000-01-03     32     150\n    2000-01-04     36      90\n    \"\"\"\n\n    from pandas.core.resample import resample\n\n    axis = self._get_axis_number(axis)\n    return resample(\n        self,\n        freq=rule,\n        label=label,\n        closed=closed,\n        axis=axis,\n        kind=kind,\n        loffset=loffset,\n        convention=convention,\n        base=base,\n        key=on,\n        level=level,\n    )",
                "def first(self, offset):\n    \"\"\"\n    Method to subset initial periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    last : Select final periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the first 3 days:\n\n    >>> ts.first('3D')\n                A\n    2018-04-09  1\n    2018-04-11  2\n\n    Notice the data for 3 first calender days were returned, not the first\n    3 days observed in the dataset, and therefore data for 2018-04-13 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'first' only supports a DatetimeIndex index\")\n\n    if len(self.index) == 0:\n        return self\n\n    offset = to_offset(offset)\n    end_date = end = self.index[0] + offset\n\n    # Tick-like, e.g. 3 weeks\n    if not offset.isAnchored() and hasattr(offset, \"_inc\"):\n        if end_date in self.index:\n            end = self.index.searchsorted(end_date, side=\"left\")\n            return self.iloc[:end]\n\n    return self.loc[:end]",
                "def last(self, offset):\n    \"\"\"\n    Method to subset final periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    first : Select initial periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the last 3 days:\n\n    >>> ts.last('3D')\n                A\n    2018-04-13  3\n    2018-04-15  4\n\n    Notice the data for 3 last calender days were returned, not the last\n    3 observed days in the dataset, and therefore data for 2018-04-11 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'last' only supports a DatetimeIndex index\")\n\n    if len(self.index) == 0:\n        return self\n\n    offset = to_offset(offset)\n\n    start_date = self.index[-1] - offset\n    start = self.index.searchsorted(start_date, side=\"right\")\n    return self.iloc[start:]",
                "def rank(\n    self: FrameOrSeries,\n    axis=0,\n    method: str = \"average\",\n    numeric_only: Optional[bool_t] = None,\n    na_option: str = \"keep\",\n    ascending: bool_t = True,\n    pct: bool_t = False,\n) -> FrameOrSeries:\n    \"\"\"\n    Compute numerical data ranks (1 through n) along axis.\n\n    By default, equal values are assigned a rank that is the average of the\n    ranks of those values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Index to direct ranking.\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        How to rank the group of records that have the same value (i.e. ties):\n\n        * average: average rank of the group\n        * min: lowest rank in the group\n        * max: highest rank in the group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups.\n\n    numeric_only : bool, optional\n        For DataFrame objects, rank only numeric columns if set to True.\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        How to rank NaN values:\n\n        * keep: assign NaN rank to NaN values\n        * top: assign smallest rank to NaN values if ascending\n        * bottom: assign highest rank to NaN values if ascending.\n\n    ascending : bool, default True\n        Whether or not the elements should be ranked in ascending order.\n    pct : bool, default False\n        Whether or not to display the returned rankings in percentile\n        form.\n\n    Returns\n    -------\n    same type as caller\n        Return a Series or DataFrame with data ranks as values.\n\n    See Also\n    --------\n    core.groupby.GroupBy.rank : Rank of values within each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n    ...                                    'spider', 'snake'],\n    ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n    >>> df\n        Animal  Number_legs\n    0      cat          4.0\n    1  penguin          2.0\n    2      dog          4.0\n    3   spider          8.0\n    4    snake          NaN\n\n    The following example shows how the method behaves with the above\n    parameters:\n\n    * default_rank: this is the default behaviour obtained without using\n      any parameter.\n    * max_rank: setting ``method = 'max'`` the records that have the\n      same values are ranked using the highest rank (e.g.: since 'cat'\n      and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n    * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n      with NaN values they are placed at the bottom of the ranking.\n    * pct_rank: when setting ``pct = True``, the ranking is expressed as\n      percentile rank.\n\n    >>> df['default_rank'] = df['Number_legs'].rank()\n    >>> df['max_rank'] = df['Number_legs'].rank(method='max')\n    >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n    >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n    >>> df\n        Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n    0      cat          4.0           2.5       3.0        2.5     0.625\n    1  penguin          2.0           1.0       1.0        1.0     0.250\n    2      dog          4.0           2.5       3.0        2.5     0.625\n    3   spider          8.0           4.0       4.0        4.0     1.000\n    4    snake          NaN           NaN       NaN        5.0       NaN\n    \"\"\"\n    axis = self._get_axis_number(axis)\n\n    if na_option not in {\"keep\", \"top\", \"bottom\"}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n\n    def ranker(data):\n        ranks = algos.rank(\n            data.values,\n            axis=axis,\n            method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n        )\n        ranks = self._constructor(ranks, **data._construct_axes_dict())\n        return ranks.__finalize__(self)\n\n    # if numeric_only is None, and we can't get anything, we try with\n    # numeric_only=True\n    if numeric_only is None:\n        try:\n            return ranker(self)\n        except TypeError:\n            numeric_only = True\n\n    if numeric_only:\n        data = self._get_numeric_data()\n    else:\n        data = self\n\n    return ranker(data)",
                "@Appender(_shared_docs[\"align\"] % _shared_doc_kwargs)\ndef align(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy=True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n    broadcast_axis=None,\n):\n    method = missing.clean_fill_method(method)\n\n    if broadcast_axis == 1 and self.ndim != other.ndim:\n        if isinstance(self, ABCSeries):\n            # this means other is a DataFrame, and we need to broadcast\n            # self\n            cons = self._constructor_expanddim\n            df = cons(\n                {c: self for c in other.columns}, **other._construct_axes_dict()\n            )\n            return df._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        elif isinstance(other, ABCSeries):\n            # this means self is a DataFrame, and we need to broadcast\n            # other\n            cons = other._constructor_expanddim\n            df = cons(\n                {c: other for c in self.columns}, **self._construct_axes_dict()\n            )\n            return self._align_frame(\n                df,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if isinstance(other, ABCDataFrame):\n        return self._align_frame(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n        )\n    elif isinstance(other, ABCSeries):\n        return self._align_series(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n        )\n    else:  # pragma: no cover\n        raise TypeError(f\"unsupported type: {type(other)}\")",
                "def _align_frame(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy: bool_t = True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n):\n    # defaults\n    join_index, join_columns = None, None\n    ilidx, iridx = None, None\n    clidx, cridx = None, None\n\n    is_series = isinstance(self, ABCSeries)\n\n    if axis is None or axis == 0:\n        if not self.index.equals(other.index):\n            join_index, ilidx, iridx = self.index.join(\n                other.index, how=join, level=level, return_indexers=True\n            )\n\n    if axis is None or axis == 1:\n        if not is_series and not self.columns.equals(other.columns):\n            join_columns, clidx, cridx = self.columns.join(\n                other.columns, how=join, level=level, return_indexers=True\n            )\n\n    if is_series:\n        reindexers = {0: [join_index, ilidx]}\n    else:\n        reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n    left = self._reindex_with_indexers(\n        reindexers, copy=copy, fill_value=fill_value, allow_dups=True\n    )\n    # other must be always DataFrame\n    right = other._reindex_with_indexers(\n        {0: [join_index, iridx], 1: [join_columns, cridx]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=True,\n    )\n\n    if method is not None:\n        left = left.fillna(axis=fill_axis, method=method, limit=limit)\n        right = right.fillna(axis=fill_axis, method=method, limit=limit)\n\n    # if DatetimeIndex have different tz, convert to UTC\n    if is_datetime64tz_dtype(left.index):\n        if left.index.tz != right.index.tz:\n            if join_index is not None:\n                left.index = join_index\n                right.index = join_index\n\n    return left.__finalize__(self), right.__finalize__(other)",
                "def _align_series(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy: bool_t = True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n):\n\n    is_series = isinstance(self, ABCSeries)\n\n    # series/series compat, other must always be a Series\n    if is_series:\n        if axis:\n            raise ValueError(\"cannot align series to a series other than axis 0\")\n\n        # equal\n        if self.index.equals(other.index):\n            join_index, lidx, ridx = None, None, None\n        else:\n            join_index, lidx, ridx = self.index.join(\n                other.index, how=join, level=level, return_indexers=True\n            )\n\n        left = self._reindex_indexer(join_index, lidx, copy)\n        right = other._reindex_indexer(join_index, ridx, copy)\n\n    else:\n        # one has > 1 ndim\n        fdata = self._data\n        if axis == 0:\n            join_index = self.index\n            lidx, ridx = None, None\n            if not self.index.equals(other.index):\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n        elif axis == 1:\n            join_index = self.columns\n            lidx, ridx = None, None\n            if not self.columns.equals(other.index):\n                join_index, lidx, ridx = self.columns.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n        else:\n            raise ValueError(\"Must specify axis=0 or 1\")\n\n        if copy and fdata is self._data:\n            fdata = fdata.copy()\n\n        left = self._constructor(fdata)\n\n        if ridx is None:\n            right = other\n        else:\n            right = other.reindex(join_index, level=level)\n\n    # fill\n    fill_na = notna(fill_value) or (method is not None)\n    if fill_na:\n        left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n        right = right.fillna(fill_value, method=method, limit=limit)\n\n    # if DatetimeIndex have different tz, convert to UTC\n    if is_series or (not is_series and axis == 0):\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n    return left.__finalize__(self), right.__finalize__(other)",
                "def _where(\n    self,\n    cond,\n    other=np.nan,\n    inplace=False,\n    axis=None,\n    level=None,\n    errors=\"raise\",\n    try_cast=False,\n):\n    \"\"\"\n    Equivalent to public method `where`, except that `other` is not\n    applied as a function even if callable. Used in __setitem__.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # align the cond to same shape as myself\n    cond = com.apply_if_callable(cond, self)\n    if isinstance(cond, NDFrame):\n        cond, _ = cond.align(self, join=\"right\", broadcast_axis=1)\n    else:\n        if not hasattr(cond, \"shape\"):\n            cond = np.asanyarray(cond)\n        if cond.shape != self.shape:\n            raise ValueError(\"Array conditional must be same shape as self\")\n        cond = self._constructor(cond, **self._construct_axes_dict())\n\n    # make sure we are boolean\n    fill_value = bool(inplace)\n    cond = cond.fillna(fill_value)\n\n    msg = \"Boolean array expected for the condition, not {dtype}\"\n\n    if not isinstance(cond, ABCDataFrame):\n        # This is a single-dimensional object.\n        if not is_bool_dtype(cond):\n            raise ValueError(msg.format(dtype=cond.dtype))\n    elif not cond.empty:\n        for dt in cond.dtypes:\n            if not is_bool_dtype(dt):\n                raise ValueError(msg.format(dtype=dt))\n\n    cond = -cond if inplace else cond\n\n    # try to align with other\n    try_quick = True\n    if hasattr(other, \"align\"):\n\n        # align with me\n        if other.ndim <= self.ndim:\n\n            _, other = self.align(\n                other, join=\"left\", axis=axis, level=level, fill_value=np.nan\n            )\n\n            # if we are NOT aligned, raise as we cannot where index\n            if axis is None and not all(\n                other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)\n            ):\n                raise InvalidIndexError\n\n        # slice me out of the other\n        else:\n            raise NotImplementedError(\n                \"cannot align with a higher dimensional NDFrame\"\n            )\n\n    if isinstance(other, np.ndarray):\n\n        if other.shape != self.shape:\n\n            if self.ndim == 1:\n\n                icond = cond.values\n\n                # GH 2745 / GH 4192\n                # treat like a scalar\n                if len(other) == 1:\n                    other = np.array(other[0])\n\n                # GH 3235\n                # match True cond to other\n                elif len(cond[icond]) == len(other):\n\n                    # try to not change dtype at first (if try_quick)\n                    if try_quick:\n                        new_other = com.values_from_object(self)\n                        new_other = new_other.copy()\n                        new_other[icond] = other\n                        other = new_other\n\n                else:\n                    raise ValueError(\n                        \"Length of replacements must equal series length\"\n                    )\n\n            else:\n                raise ValueError(\n                    \"other must be the same shape as self when an ndarray\"\n                )\n\n        # we are the same shape, so create an actual object for alignment\n        else:\n            other = self._constructor(other, **self._construct_axes_dict())\n\n    if axis is None:\n        axis = 0\n\n    if self.ndim == getattr(other, \"ndim\", 0):\n        align = True\n    else:\n        align = self._get_axis_number(axis) == 1\n\n    block_axis = self._get_block_manager_axis(axis)\n\n    if inplace:\n        # we may have different type blocks come out of putmask, so\n        # reconstruct the block manager\n\n        self._check_inplace_setting(other)\n        new_data = self._data.putmask(\n            mask=cond,\n            new=other,\n            align=align,\n            inplace=True,\n            axis=block_axis,\n            transpose=self._AXIS_REVERSED,\n        )\n        self._update_inplace(new_data)\n\n    else:\n        new_data = self._data.where(\n            other=other,\n            cond=cond,\n            align=align,\n            errors=errors,\n            try_cast=try_cast,\n            axis=block_axis,\n        )\n\n        return self._constructor(new_data).__finalize__(self)",
                "@Appender(\n    _shared_docs[\"where\"]\n    % dict(\n        _shared_doc_kwargs,\n        cond=\"True\",\n        cond_rev=\"False\",\n        name=\"where\",\n        name_other=\"mask\",\n    )\n)\ndef where(\n    self,\n    cond,\n    other=np.nan,\n    inplace=False,\n    axis=None,\n    level=None,\n    errors=\"raise\",\n    try_cast=False,\n):\n\n    other = com.apply_if_callable(other, self)\n    return self._where(\n        cond, other, inplace, axis, level, errors=errors, try_cast=try_cast\n    )",
                "@Appender(\n    _shared_docs[\"where\"]\n    % dict(\n        _shared_doc_kwargs,\n        cond=\"False\",\n        cond_rev=\"True\",\n        name=\"mask\",\n        name_other=\"where\",\n    )\n)\ndef mask(\n    self,\n    cond,\n    other=np.nan,\n    inplace=False,\n    axis=None,\n    level=None,\n    errors=\"raise\",\n    try_cast=False,\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cond = com.apply_if_callable(cond, self)\n\n    # see gh-21891\n    if not hasattr(cond, \"__invert__\"):\n        cond = np.array(cond)\n\n    return self.where(\n        ~cond,\n        other=other,\n        inplace=inplace,\n        axis=axis,\n        level=level,\n        try_cast=try_cast,\n        errors=errors,\n    )",
                "@Appender(_shared_docs[\"shift\"] % _shared_doc_kwargs)\ndef shift(self, periods=1, freq=None, axis=0, fill_value=None):\n    if periods == 0:\n        return self.copy()\n\n    block_axis = self._get_block_manager_axis(axis)\n    if freq is None:\n        new_data = self._data.shift(\n            periods=periods, axis=block_axis, fill_value=fill_value\n        )\n    else:\n        return self.tshift(periods, freq)\n\n    return self._constructor(new_data).__finalize__(self)",
                "def slice_shift(self: FrameOrSeries, periods: int = 1, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Equivalent to `shift` without copying data.\n\n    The shifted data will not include the dropped periods and the\n    shifted axis will be smaller than the original.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n\n    Returns\n    -------\n    shifted : same type as caller\n\n    Notes\n    -----\n    While the `slice_shift` is faster than `shift`, you may pay for it\n    later during alignment.\n    \"\"\"\n    if periods == 0:\n        return self\n\n    if periods > 0:\n        vslicer = slice(None, -periods)\n        islicer = slice(periods, None)\n    else:\n        vslicer = slice(-periods, None)\n        islicer = slice(None, periods)\n\n    new_obj = self._slice(vslicer, axis=axis)\n    shifted_axis = self._get_axis(axis)[islicer]\n    new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n    return new_obj.__finalize__(self)",
                "def tshift(self, periods: int = 1, freq=None, axis=0):\n    \"\"\"\n    Shift the time index, using the index's frequency if available.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n    freq : DateOffset, timedelta, or str, default None\n        Increment to use from the tseries module\n        or time rule expressed as a string (e.g. 'EOM').\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default 0\n        Corresponds to the axis that contains the Index.\n\n    Returns\n    -------\n    shifted : Series/DataFrame\n\n    Notes\n    -----\n    If freq is not specified then tries to use the freq or inferred_freq\n    attributes of the index. If neither of those attributes exist, a\n    ValueError is thrown\n    \"\"\"\n\n    index = self._get_axis(axis)\n    if freq is None:\n        freq = getattr(index, \"freq\", None)\n\n    if freq is None:\n        freq = getattr(index, \"inferred_freq\", None)\n\n    if freq is None:\n        msg = \"Freq was not given and was not set in the index\"\n        raise ValueError(msg)\n\n    if periods == 0:\n        return self\n\n    if isinstance(freq, str):\n        freq = to_offset(freq)\n\n    block_axis = self._get_block_manager_axis(axis)\n    if isinstance(index, PeriodIndex):\n        orig_freq = to_offset(index.freq)\n        if freq == orig_freq:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods)\n        elif orig_freq is not None:\n            msg = (\n                f\"Given freq {freq.rule_code} does not match\"\n                f\" PeriodIndex freq {orig_freq.rule_code}\"\n            )\n            raise ValueError(msg)\n    else:\n        new_data = self._data.copy()\n        new_data.axes[block_axis] = index.shift(periods, freq)\n\n    return self._constructor(new_data).__finalize__(self)",
                "def truncate(\n    self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t = True\n) -> FrameOrSeries:\n    \"\"\"\n    Truncate a Series or DataFrame before and after some index value.\n\n    This is a useful shorthand for boolean indexing based on index\n    values above or below certain thresholds.\n\n    Parameters\n    ----------\n    before : date, str, int\n        Truncate all rows before this index value.\n    after : date, str, int\n        Truncate all rows after this index value.\n    axis : {0 or 'index', 1 or 'columns'}, optional\n        Axis to truncate. Truncates the index (rows) by default.\n    copy : bool, default is True,\n        Return a copy of the truncated section.\n\n    Returns\n    -------\n    type of caller\n        The truncated Series or DataFrame.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by label.\n    DataFrame.iloc : Select a subset of a DataFrame by position.\n\n    Notes\n    -----\n    If the index being truncated contains only datetime values,\n    `before` and `after` may be specified as strings instead of\n    Timestamps.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n    ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n    ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n    ...                   index=[1, 2, 3, 4, 5])\n    >>> df\n       A  B  C\n    1  a  f  k\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n    5  e  j  o\n\n    >>> df.truncate(before=2, after=4)\n       A  B  C\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n\n    The columns of a DataFrame can be truncated.\n\n    >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n       A  B\n    1  a  f\n    2  b  g\n    3  c  h\n    4  d  i\n    5  e  j\n\n    For Series, only rows can be truncated.\n\n    >>> df['A'].truncate(before=2, after=4)\n    2    b\n    3    c\n    4    d\n    Name: A, dtype: object\n\n    The index values in ``truncate`` can be datetimes or string\n    dates.\n\n    >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n    >>> df = pd.DataFrame(index=dates, data={'A': 1})\n    >>> df.tail()\n                         A\n    2016-01-31 23:59:56  1\n    2016-01-31 23:59:57  1\n    2016-01-31 23:59:58  1\n    2016-01-31 23:59:59  1\n    2016-02-01 00:00:00  1\n\n    >>> df.truncate(before=pd.Timestamp('2016-01-05'),\n    ...             after=pd.Timestamp('2016-01-10')).tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Because the index is a DatetimeIndex containing only dates, we can\n    specify `before` and `after` as strings. They will be coerced to\n    Timestamps before truncation.\n\n    >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Note that ``truncate`` assumes a 0 value for any unspecified time\n    component (midnight). This differs from partial string slicing, which\n    returns any partially matching dates.\n\n    >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                         A\n    2016-01-10 23:59:55  1\n    2016-01-10 23:59:56  1\n    2016-01-10 23:59:57  1\n    2016-01-10 23:59:58  1\n    2016-01-10 23:59:59  1\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    # GH 17935\n    # Check that index is sorted\n    if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n        raise ValueError(\"truncate requires a sorted index\")\n\n    # if we have a date index, convert to dates, otherwise\n    # treat like a slice\n    if ax.is_all_dates:\n        from pandas.core.tools.datetimes import to_datetime\n\n        before = to_datetime(before)\n        after = to_datetime(after)\n\n    if before is not None and after is not None:\n        if before > after:\n            raise ValueError(f\"Truncate: {after} must be after {before}\")\n\n    slicer = [slice(None, None)] * self._AXIS_LEN\n    slicer[axis] = slice(before, after)\n    result = self.loc[tuple(slicer)]\n\n    if isinstance(ax, MultiIndex):\n        setattr(result, self._get_axis_name(axis), ax.truncate(before, after))\n\n    if copy:\n        result = result.copy()\n\n    return result",
                "def tz_convert(\n    self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t = True\n) -> FrameOrSeries:\n    \"\"\"\n    Convert tz-aware axis to target time zone.\n\n    Parameters\n    ----------\n    tz : str or tzinfo object\n    axis : the axis to convert\n    level : int, str, default None\n        If axis is a MultiIndex, convert a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n\n    Returns\n    -------\n    %(klass)s\n        Object with time zone converted axis.\n\n    Raises\n    ------\n    TypeError\n        If the axis is tz-naive.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_convert(ax, tz):\n        if not hasattr(ax, \"tz_convert\"):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(\n                    f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                )\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_convert(tz)\n        return ax\n\n    # if a level is given it must be a MultiIndex level or\n    # equivalent to the axis name\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_convert(ax.levels[level], tz)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f\"The level {level} is not valid\")\n        ax = _tz_convert(ax, tz)\n\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                "def tz_localize(\n    self: FrameOrSeries,\n    tz,\n    axis=0,\n    level=None,\n    copy: bool_t = True,\n    ambiguous=\"raise\",\n    nonexistent: str = \"raise\",\n) -> FrameOrSeries:\n    \"\"\"\n    Localize tz-naive index of a Series or DataFrame to target time zone.\n\n    This operation localizes the Index. To localize the values in a\n    timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\n    Parameters\n    ----------\n    tz : str or tzinfo\n    axis : the axis to localize\n    level : int, str, default None\n        If axis ia a MultiIndex, localize a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n    ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n        When clocks moved backward due to DST, ambiguous times may arise.\n        For example in Central European Time (UTC+01), when going from\n        03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n        00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n        `ambiguous` parameter dictates how ambiguous times should be\n        handled.\n\n        - 'infer' will attempt to infer fall dst-transition hours based on\n          order\n        - bool-ndarray where True signifies a DST time, False designates\n          a non-DST time (note that this flag is only applicable for\n          ambiguous times)\n        - 'NaT' will return NaT where there are ambiguous times\n        - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n          times.\n    nonexistent : str, default 'raise'\n        A nonexistent time does not exist in a particular timezone\n        where clocks moved forward due to DST. Valid values are:\n\n        - 'shift_forward' will shift the nonexistent time forward to the\n          closest existing time\n        - 'shift_backward' will shift the nonexistent time backward to the\n          closest existing time\n        - 'NaT' will return NaT where there are nonexistent times\n        - timedelta objects will shift nonexistent times by the timedelta\n        - 'raise' will raise an NonExistentTimeError if there are\n          nonexistent times.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as the input.\n\n    Raises\n    ------\n    TypeError\n        If the TimeSeries is tz-aware and tz is not None.\n\n    Examples\n    --------\n\n    Localize local times:\n\n    >>> s = pd.Series([1],\n    ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n    >>> s.tz_localize('CET')\n    2018-09-15 01:30:00+02:00    1\n    dtype: int64\n\n    Be careful with DST changes. When there is sequential data, pandas\n    can infer the DST time:\n\n    >>> s = pd.Series(range(7),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 03:00:00',\n    ...                                       '2018-10-28 03:30:00']))\n    >>> s.tz_localize('CET', ambiguous='infer')\n    2018-10-28 01:30:00+02:00    0\n    2018-10-28 02:00:00+02:00    1\n    2018-10-28 02:30:00+02:00    2\n    2018-10-28 02:00:00+01:00    3\n    2018-10-28 02:30:00+01:00    4\n    2018-10-28 03:00:00+01:00    5\n    2018-10-28 03:30:00+01:00    6\n    dtype: int64\n\n    In some cases, inferring the DST is impossible. In such cases, you can\n    pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n    >>> s = pd.Series(range(3),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n    ...                                       '2018-10-28 02:36:00',\n    ...                                       '2018-10-28 03:46:00']))\n    >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n    2018-10-28 01:20:00+02:00    0\n    2018-10-28 02:36:00+02:00    1\n    2018-10-28 03:46:00+01:00    2\n    dtype: int64\n\n    If the DST transition causes nonexistent times, you can shift these\n    dates forward or backwards with a timedelta object or `'shift_forward'`\n    or `'shift_backwards'`.\n    >>> s = pd.Series(range(2),\n    ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n    ...                                       '2015-03-29 03:30:00']))\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n    2015-03-29 03:00:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n    2015-03-29 01:59:59.999999999+01:00    0\n    2015-03-29 03:30:00+02:00              1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n    2015-03-29 03:30:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    \"\"\"\n    nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n    if nonexistent not in nonexistent_options and not isinstance(\n        nonexistent, timedelta\n    ):\n        raise ValueError(\n            \"The nonexistent argument must be one of 'raise', \"\n            \"'NaT', 'shift_forward', 'shift_backward' or \"\n            \"a timedelta object\"\n        )\n\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_localize(ax, tz, ambiguous, nonexistent):\n        if not hasattr(ax, \"tz_localize\"):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(\n                    f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                )\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n        return ax\n\n    # if a level is given it must be a MultiIndex level or\n    # equivalent to the axis name\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_localize(ax.levels[level], tz, ambiguous, nonexistent)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f\"The level {level} is not valid\")\n        ax = _tz_localize(ax, tz, ambiguous, nonexistent)\n\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                "def abs(self):\n    \"\"\"\n    Return a Series/DataFrame with absolute numeric value of each element.\n\n    This function only applies to elements that are all numeric.\n\n    Returns\n    -------\n    abs\n        Series/DataFrame containing the absolute value of each element.\n\n    See Also\n    --------\n    numpy.absolute : Calculate the absolute value element-wise.\n\n    Notes\n    -----\n    For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n    :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n    Examples\n    --------\n    Absolute numeric values in a Series.\n\n    >>> s = pd.Series([-1.10, 2, -3.33, 4])\n    >>> s.abs()\n    0    1.10\n    1    2.00\n    2    3.33\n    3    4.00\n    dtype: float64\n\n    Absolute numeric values in a Series with complex numbers.\n\n    >>> s = pd.Series([1.2 + 1j])\n    >>> s.abs()\n    0    1.56205\n    dtype: float64\n\n    Absolute numeric values in a Series with a Timedelta element.\n\n    >>> s = pd.Series([pd.Timedelta('1 days')])\n    >>> s.abs()\n    0   1 days\n    dtype: timedelta64[ns]\n\n    Select rows with data closest to certain value using argsort (from\n    `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n    >>> df = pd.DataFrame({\n    ...     'a': [4, 5, 6, 7],\n    ...     'b': [10, 20, 30, 40],\n    ...     'c': [100, 50, -30, -50]\n    ... })\n    >>> df\n         a    b    c\n    0    4   10  100\n    1    5   20   50\n    2    6   30  -30\n    3    7   40  -50\n    >>> df.loc[(df.c - 43).abs().argsort()]\n         a    b    c\n    1    5   20   50\n    0    4   10  100\n    2    6   30  -30\n    3    7   40  -50\n    \"\"\"\n    return np.abs(self)",
                "def describe(self, percentiles=None, include=None, exclude=None):\n    \"\"\"\n    Generate descriptive statistics.\n\n    Descriptive statistics include those that summarize the central\n    tendency, dispersion and shape of a\n    dataset's distribution, excluding ``NaN`` values.\n\n    Analyzes both numeric and object series, as well\n    as ``DataFrame`` column sets of mixed data types. The output\n    will vary depending on what is provided. Refer to the notes\n    below for more detail.\n\n    Parameters\n    ----------\n    percentiles : list-like of numbers, optional\n        The percentiles to include in the output. All should\n        fall between 0 and 1. The default is\n        ``[.25, .5, .75]``, which returns the 25th, 50th, and\n        75th percentiles.\n    include : 'all', list-like of dtypes or None (default), optional\n        A white list of data types to include in the result. Ignored\n        for ``Series``. Here are the options:\n\n        - 'all' : All columns of the input will be included in the output.\n        - A list-like of dtypes : Limits the results to the\n          provided data types.\n          To limit the result to numeric types submit\n          ``numpy.number``. To limit it instead to object columns submit\n          the ``numpy.object`` data type. Strings\n          can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          select pandas categorical columns, use ``'category'``\n        - None (default) : The result will include all numeric columns.\n    exclude : list-like of dtypes or None (default), optional,\n        A black list of data types to omit from the result. Ignored\n        for ``Series``. Here are the options:\n\n        - A list-like of dtypes : Excludes the provided data types\n          from the result. To exclude numeric types submit\n          ``numpy.number``. To exclude object columns submit the data\n          type ``numpy.object``. Strings can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          exclude pandas categorical columns, use ``'category'``\n        - None (default) : The result will exclude nothing.\n\n    Returns\n    -------\n    Series or DataFrame\n        Summary statistics of the Series or Dataframe provided.\n\n    See Also\n    --------\n    DataFrame.count: Count number of non-NA/null observations.\n    DataFrame.max: Maximum of the values in the object.\n    DataFrame.min: Minimum of the values in the object.\n    DataFrame.mean: Mean of the values.\n    DataFrame.std: Standard deviation of the observations.\n    DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n        columns based on their dtype.\n\n    Notes\n    -----\n    For numeric data, the result's index will include ``count``,\n    ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n    upper percentiles. By default the lower percentile is ``25`` and the\n    upper percentile is ``75``. The ``50`` percentile is the\n    same as the median.\n\n    For object data (e.g. strings or timestamps), the result's index\n    will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n    is the most common value. The ``freq`` is the most common value's\n    frequency. Timestamps also include the ``first`` and ``last`` items.\n\n    If multiple object values have the highest count, then the\n    ``count`` and ``top`` results will be arbitrarily chosen from\n    among those with the highest count.\n\n    For mixed data types provided via a ``DataFrame``, the default is to\n    return only an analysis of numeric columns. If the dataframe consists\n    only of object and categorical data without any numeric columns, the\n    default is to return an analysis of both the object and categorical\n    columns. If ``include='all'`` is provided as an option, the result\n    will include a union of attributes of each type.\n\n    The `include` and `exclude` parameters can be used to limit\n    which columns in a ``DataFrame`` are analyzed for the output.\n    The parameters are ignored when analyzing a ``Series``.\n\n    Examples\n    --------\n    Describing a numeric ``Series``.\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    dtype: float64\n\n    Describing a categorical ``Series``.\n\n    >>> s = pd.Series(['a', 'a', 'b', 'c'])\n    >>> s.describe()\n    count     4\n    unique    3\n    top       a\n    freq      2\n    dtype: object\n\n    Describing a timestamp ``Series``.\n\n    >>> s = pd.Series([\n    ...   np.datetime64(\"2000-01-01\"),\n    ...   np.datetime64(\"2010-01-01\"),\n    ...   np.datetime64(\"2010-01-01\")\n    ... ])\n    >>> s.describe()\n    count                       3\n    unique                      2\n    top       2010-01-01 00:00:00\n    freq                        2\n    first     2000-01-01 00:00:00\n    last      2010-01-01 00:00:00\n    dtype: object\n\n    Describing a ``DataFrame``. By default only numeric fields\n    are returned.\n\n    >>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n    ...                    'numeric': [1, 2, 3],\n    ...                    'object': ['a', 'b', 'c']\n    ...                   })\n    >>> df.describe()\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Describing all columns of a ``DataFrame`` regardless of data type.\n\n    >>> df.describe(include='all')\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n\n    Describing a column from a ``DataFrame`` by accessing it as\n    an attribute.\n\n    >>> df.numeric.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    Name: numeric, dtype: float64\n\n    Including only numeric columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.number])\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Including only string columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.object])\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\n\n    Including only categorical columns from a ``DataFrame`` description.\n\n    >>> df.describe(include=['category'])\n           categorical\n    count            3\n    unique           3\n    top              f\n    freq             1\n\n    Excluding numeric columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.number])\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\n\n    Excluding object columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.object])\n           categorical  numeric\n    count            3      3.0\n    unique           3      NaN\n    top              f      NaN\n    freq             1      NaN\n    mean           NaN      2.0\n    std            NaN      1.0\n    min            NaN      1.0\n    25%            NaN      1.5\n    50%            NaN      2.0\n    75%            NaN      2.5\n    max            NaN      3.0\n    \"\"\"\n    if self.ndim == 2 and self.columns.size == 0:\n        raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n    if percentiles is not None:\n        # explicit conversion of `percentiles` to list\n        percentiles = list(percentiles)\n\n        # get them all to be in [0, 1]\n        validate_percentile(percentiles)\n\n        # median should always be included\n        if 0.5 not in percentiles:\n            percentiles.append(0.5)\n        percentiles = np.asarray(percentiles)\n    else:\n        percentiles = np.array([0.25, 0.5, 0.75])\n\n    # sort and check for duplicates\n    unique_pcts = np.unique(percentiles)\n    if len(unique_pcts) < len(percentiles):\n        raise ValueError(\"percentiles cannot contain duplicates\")\n    percentiles = unique_pcts\n\n    formatted_percentiles = format_percentiles(percentiles)\n\n    def describe_numeric_1d(series):\n        stat_index = (\n            [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n        )\n        d = (\n            [series.count(), series.mean(), series.std(), series.min()]\n            + series.quantile(percentiles).tolist()\n            + [series.max()]\n        )\n        return pd.Series(d, index=stat_index, name=series.name)\n\n    def describe_categorical_1d(data):\n        names = [\"count\", \"unique\"]\n        objcounts = data.value_counts()\n        count_unique = len(objcounts[objcounts != 0])\n        result = [data.count(), count_unique]\n        dtype = None\n        if result[1] > 0:\n            top, freq = objcounts.index[0], objcounts.iloc[0]\n\n            if is_datetime64_any_dtype(data):\n                tz = data.dt.tz\n                asint = data.dropna().values.view(\"i8\")\n                top = Timestamp(top)\n                if top.tzinfo is not None and tz is not None:\n                    # Don't tz_localize(None) if key is already tz-aware\n                    top = top.tz_convert(tz)\n                else:\n                    top = top.tz_localize(tz)\n                names += [\"top\", \"freq\", \"first\", \"last\"]\n                result += [\n                    top,\n                    freq,\n                    Timestamp(asint.min(), tz=tz),\n                    Timestamp(asint.max(), tz=tz),\n                ]\n            else:\n                names += [\"top\", \"freq\"]\n                result += [top, freq]\n\n        # If the DataFrame is empty, set 'top' and 'freq' to None\n        # to maintain output shape consistency\n        else:\n            names += [\"top\", \"freq\"]\n            result += [np.nan, np.nan]\n            dtype = \"object\"\n\n        return pd.Series(result, index=names, name=data.name, dtype=dtype)\n\n    def describe_1d(data):\n        if is_bool_dtype(data):\n            return describe_categorical_1d(data)\n        elif is_numeric_dtype(data):\n            return describe_numeric_1d(data)\n        elif is_timedelta64_dtype(data):\n            return describe_numeric_1d(data)\n        else:\n            return describe_categorical_1d(data)\n\n    if self.ndim == 1:\n        return describe_1d(self)\n    elif (include is None) and (exclude is None):\n        # when some numerics are found, keep only numerics\n        data = self.select_dtypes(include=[np.number])\n        if len(data.columns) == 0:\n            data = self\n    elif include == \"all\":\n        if exclude is not None:\n            msg = \"exclude must be None when include is 'all'\"\n            raise ValueError(msg)\n        data = self\n    else:\n        data = self.select_dtypes(include=include, exclude=exclude)\n\n    ldesc = [describe_1d(s) for _, s in data.items()]\n    # set a convenient order for rows\n    names = []\n    ldesc_indexes = sorted((x.index for x in ldesc), key=len)\n    for idxnames in ldesc_indexes:\n        for name in idxnames:\n            if name not in names:\n                names.append(name)\n\n    d = pd.concat([x.reindex(names, copy=False) for x in ldesc], axis=1, sort=False)\n    d.columns = data.columns.copy()\n    return d",
                "@Appender(_shared_docs[\"pct_change\"] % _shared_doc_kwargs)\ndef pct_change(self, periods=1, fill_method=\"pad\", limit=None, freq=None, **kwargs):\n    # TODO: Not sure if above is correct - need someone to confirm.\n    axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self.fillna(method=fill_method, limit=limit, axis=axis)\n\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    rs = rs.loc[~rs.index.duplicated()]\n    rs = rs.reindex_like(data)\n    if freq is None:\n        mask = isna(com.values_from_object(data))\n        np.putmask(rs.values, mask, np.nan)\n    return rs",
                "def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n    if axis is None:\n        raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n    grouped = self.groupby(level=level, axis=axis, sort=False)\n    if hasattr(grouped, name) and skipna:\n        return getattr(grouped, name)(**kwargs)\n    axis = self._get_axis_number(axis)\n    method = getattr(type(self), name)\n    applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n    return grouped.aggregate(applyf)",
                "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add the operations to the cls; evaluate the doc strings again\n    \"\"\"\n\n    axis_descr, name, name2 = _doc_parms(cls)\n\n    cls.any = _make_logical_function(\n        cls,\n        \"any\",\n        name,\n        name2,\n        axis_descr,\n        _any_desc,\n        nanops.nanany,\n        _any_see_also,\n        _any_examples,\n        empty_value=False,\n    )\n    cls.all = _make_logical_function(\n        cls,\n        \"all\",\n        name,\n        name2,\n        axis_descr,\n        _all_desc,\n        nanops.nanall,\n        _all_see_also,\n        _all_examples,\n        empty_value=True,\n    )\n\n    @Substitution(\n        desc=\"Return the mean absolute deviation of the values \"\n        \"for the requested axis.\",\n        name1=name,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=\"\",\n        examples=\"\",\n    )\n    @Appender(_num_doc)\n    def mad(self, axis=None, skipna=None, level=None):\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\"mad\", axis=axis, level=level, skipna=skipna)\n\n        data = self._get_numeric_data()\n        if axis == 0:\n            demeaned = data - data.mean(axis=0)\n        else:\n            demeaned = data.sub(data.mean(axis=1), axis=0)\n        return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n\n    cls.mad = mad\n\n    cls.sem = _make_stat_function_ddof(\n        cls,\n        \"sem\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased standard error of the mean over requested \"\n        \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n        \"using the ddof argument\",\n        nanops.nansem,\n    )\n    cls.var = _make_stat_function_ddof(\n        cls,\n        \"var\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n        \"N-1 by default. This can be changed using the ddof argument\",\n        nanops.nanvar,\n    )\n    cls.std = _make_stat_function_ddof(\n        cls,\n        \"std\",\n        name,\n        name2,\n        axis_descr,\n        \"Return sample standard deviation over requested axis.\"\n        \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n        \"ddof argument\",\n        nanops.nanstd,\n    )\n\n    cls.cummin = _make_cum_function(\n        cls,\n        \"cummin\",\n        name,\n        name2,\n        axis_descr,\n        \"minimum\",\n        np.minimum.accumulate,\n        \"min\",\n        np.inf,\n        np.nan,\n        _cummin_examples,\n    )\n    cls.cumsum = _make_cum_function(\n        cls,\n        \"cumsum\",\n        name,\n        name2,\n        axis_descr,\n        \"sum\",\n        np.cumsum,\n        \"sum\",\n        0.0,\n        np.nan,\n        _cumsum_examples,\n    )\n    cls.cumprod = _make_cum_function(\n        cls,\n        \"cumprod\",\n        name,\n        name2,\n        axis_descr,\n        \"product\",\n        np.cumprod,\n        \"prod\",\n        1.0,\n        np.nan,\n        _cumprod_examples,\n    )\n    cls.cummax = _make_cum_function(\n        cls,\n        \"cummax\",\n        name,\n        name2,\n        axis_descr,\n        \"maximum\",\n        np.maximum.accumulate,\n        \"max\",\n        -np.inf,\n        np.nan,\n        _cummax_examples,\n    )\n\n    cls.sum = _make_min_count_stat_function(\n        cls,\n        \"sum\",\n        name,\n        name2,\n        axis_descr,\n        \"\"\"Return the sum of the values for the requested axis.\\n\n        This is equivalent to the method ``numpy.sum``.\"\"\",\n        nanops.nansum,\n        _stat_func_see_also,\n        _sum_examples,\n    )\n    cls.mean = _make_stat_function(\n        cls,\n        \"mean\",\n        name,\n        name2,\n        axis_descr,\n        \"Return the mean of the values for the requested axis.\",\n        nanops.nanmean,\n    )\n    cls.skew = _make_stat_function(\n        cls,\n        \"skew\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased skew over requested axis.\\n\\nNormalized by N-1.\",\n        nanops.nanskew,\n    )\n    cls.kurt = _make_stat_function(\n        cls,\n        \"kurt\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased kurtosis over requested axis.\\n\\n\"\n        \"Kurtosis obtained using Fisher's definition of\\n\"\n        \"kurtosis (kurtosis of normal == 0.0). Normalized \"\n        \"by N-1.\",\n        nanops.nankurt,\n    )\n    cls.kurtosis = cls.kurt\n    cls.prod = _make_min_count_stat_function(\n        cls,\n        \"prod\",\n        name,\n        name2,\n        axis_descr,\n        \"Return the product of the values for the requested axis.\",\n        nanops.nanprod,\n        examples=_prod_examples,\n    )\n    cls.product = cls.prod\n    cls.median = _make_stat_function(\n        cls,\n        \"median\",\n        name,\n        name2,\n        axis_descr,\n        \"Return the median of the values for the requested axis.\",\n        nanops.nanmedian,\n    )\n    cls.max = _make_stat_function(\n        cls,\n        \"max\",\n        name,\n        name2,\n        axis_descr,\n        \"\"\"Return the maximum of the values for the requested axis.\\n\n        If you want the *index* of the maximum, use ``idxmax``. This is\n        the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\"\",\n        nanops.nanmax,\n        _stat_func_see_also,\n        _max_examples,\n    )\n    cls.min = _make_stat_function(\n        cls,\n        \"min\",\n        name,\n        name2,\n        axis_descr,\n        \"\"\"Return the minimum of the values for the requested axis.\\n\n        If you want the *index* of the minimum, use ``idxmin``. This is\n        the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\"\",\n        nanops.nanmin,\n        _stat_func_see_also,\n        _min_examples,\n    )",
                "@classmethod\ndef _add_series_or_dataframe_operations(cls):\n    \"\"\"\n    Add the series or dataframe only operations to the cls; evaluate\n    the doc strings again.\n    \"\"\"\n\n    from pandas.core.window import EWM, Expanding, Rolling, Window\n\n    @Appender(Rolling.__doc__)\n    def rolling(\n        self,\n        window,\n        min_periods=None,\n        center=False,\n        win_type=None,\n        on=None,\n        axis=0,\n        closed=None,\n    ):\n        axis = self._get_axis_number(axis)\n\n        if win_type is not None:\n            return Window(\n                self,\n                window=window,\n                min_periods=min_periods,\n                center=center,\n                win_type=win_type,\n                on=on,\n                axis=axis,\n                closed=closed,\n            )\n\n        return Rolling(\n            self,\n            window=window,\n            min_periods=min_periods,\n            center=center,\n            win_type=win_type,\n            on=on,\n            axis=axis,\n            closed=closed,\n        )\n\n    cls.rolling = rolling\n\n    @Appender(Expanding.__doc__)\n    def expanding(self, min_periods=1, center=False, axis=0):\n        axis = self._get_axis_number(axis)\n        return Expanding(self, min_periods=min_periods, center=center, axis=axis)\n\n    cls.expanding = expanding\n\n    @Appender(EWM.__doc__)\n    def ewm(\n        self,\n        com=None,\n        span=None,\n        halflife=None,\n        alpha=None,\n        min_periods=0,\n        adjust=True,\n        ignore_na=False,\n        axis=0,\n    ):\n        axis = self._get_axis_number(axis)\n        return EWM(\n            self,\n            com=com,\n            span=span,\n            halflife=halflife,\n            alpha=alpha,\n            min_periods=min_periods,\n            adjust=adjust,\n            ignore_na=ignore_na,\n            axis=axis,\n        )\n\n    cls.ewm = ewm",
                "@Appender(_shared_docs[\"transform\"] % dict(axis=\"\", **_shared_doc_kwargs))\ndef transform(self, func, *args, **kwargs):\n    result = self.agg(func, *args, **kwargs)\n    if is_scalar(result) or len(result) != len(self):\n        raise ValueError(\"transforms cannot produce aggregated results\")\n\n    return result",
                "def _find_valid_index(self, how: str):\n    \"\"\"\n    Retrieves the index of the first valid value.\n\n    Parameters\n    ----------\n    how : {'first', 'last'}\n        Use this parameter to change between the first or last valid index.\n\n    Returns\n    -------\n    idx_first_valid : type of index\n    \"\"\"\n\n    idxpos = find_valid_index(self._values, how)\n    if idxpos is None:\n        return None\n    return self.index[idxpos]",
                "@Appender(\n    _shared_docs[\"valid_index\"] % {\"position\": \"first\", \"klass\": \"Series/DataFrame\"}\n)\ndef first_valid_index(self):\n    return self._find_valid_index(\"first\")",
                "@Appender(\n    _shared_docs[\"valid_index\"] % {\"position\": \"last\", \"klass\": \"Series/DataFrame\"}\n)\ndef last_valid_index(self):\n    return self._find_valid_index(\"last\")",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    min_count=_min_count_stub,\n    see_also=see_also,\n    examples=examples,\n)\n@Appender(_num_doc)\ndef stat_func(\n    self,\n    axis=None,\n    skipna=None,\n    level=None,\n    numeric_only=None,\n    min_count=0,\n    **kwargs,\n):\n    if name == \"sum\":\n        nv.validate_sum(tuple(), kwargs)\n    elif name == \"prod\":\n        nv.validate_prod(tuple(), kwargs)\n    else:\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(\n            name, axis=axis, level=level, skipna=skipna, min_count=min_count\n        )\n    return self._reduce(\n        f,\n        name,\n        axis=axis,\n        skipna=skipna,\n        numeric_only=numeric_only,\n        min_count=min_count,\n    )",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    min_count=\"\",\n    see_also=see_also,\n    examples=examples,\n)\n@Appender(_num_doc)\ndef stat_func(\n    self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n):\n    if name == \"median\":\n        nv.validate_median(tuple(), kwargs)\n    else:\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n    return self._reduce(\n        f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n    )",
                "@Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n@Appender(_num_ddof_doc)\ndef stat_func(\n    self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n):\n    nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(\n            name, axis=axis, level=level, skipna=skipna, ddof=ddof\n        )\n    return self._reduce(\n        f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n    )",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    accum_func_name=accum_func_name,\n    examples=examples,\n)\n@Appender(_cnum_doc)\ndef cum_func(self, axis=None, skipna=True, *args, **kwargs):\n    skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n    if axis is None:\n        axis = self._stat_axis_number\n    else:\n        axis = self._get_axis_number(axis)\n\n    y = com.values_from_object(self).copy()\n    d = self._construct_axes_dict()\n    d[\"copy\"] = False\n\n    if issubclass(y.dtype.type, (np.datetime64, np.timedelta64)):\n        # numpy 1.18 started sorting NaTs at the end instead of beginning,\n        #  so we need to work around to maintain backwards-consistency.\n        orig_dtype = y.dtype\n        if accum_func == np.minimum.accumulate:\n            # Note: the accum_func comparison fails as an \"is\" comparison\n            # Note that \"y\" is always a copy, so we can safely modify it\n            mask = isna(self)\n            y = y.view(\"i8\")\n            y[mask] = np.iinfo(np.int64).max\n\n        result = accum_func(y.view(\"i8\"), axis).view(orig_dtype)\n        if skipna:\n            mask = isna(self)\n            np.putmask(result, mask, iNaT)\n        elif accum_func == np.minimum.accumulate:\n            # Restore NaTs that we masked previously\n            nz = (~np.asarray(mask)).nonzero()[0]\n            if len(nz):\n                # everything up to the first non-na entry stays NaT\n                result[: nz[0]] = iNaT\n\n        if self.ndim == 1:\n            # restore dt64tz dtype\n            d[\"dtype\"] = self.dtype\n\n    elif skipna and not issubclass(y.dtype.type, (np.integer, np.bool_)):\n        mask = isna(self)\n        np.putmask(y, mask, mask_a)\n        result = accum_func(y, axis)\n        np.putmask(result, mask, mask_b)\n    else:\n        result = accum_func(y, axis)\n\n    return self._constructor(result, **d).__finalize__(self)",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    see_also=see_also,\n    examples=examples,\n    empty_value=empty_value,\n)\n@Appender(_bool_doc)\ndef logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n    nv.validate_logical_func(tuple(), kwargs, fname=name)\n    if level is not None:\n        if bool_only is not None:\n            raise NotImplementedError(\n                \"Option bool_only is not implemented with option level.\"\n            )\n        return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n    return self._reduce(\n        f,\n        name,\n        axis=axis,\n        skipna=skipna,\n        numeric_only=bool_only,\n        filter_type=\"bool\",\n    )",
                "def set_axis(a, i):\n    setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n    cls._internal_names_set.add(a)",
                "def f():\n    self._data = self._data.consolidate()",
                "def ranker(data):\n    ranks = algos.rank(\n        data.values,\n        axis=axis,\n        method=method,\n        ascending=ascending,\n        na_option=na_option,\n        pct=pct,\n    )\n    ranks = self._constructor(ranks, **data._construct_axes_dict())\n    return ranks.__finalize__(self)",
                "def _tz_convert(ax, tz):\n    if not hasattr(ax, \"tz_convert\"):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(\n                f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n            )\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_convert(tz)\n    return ax",
                "def _tz_localize(ax, tz, ambiguous, nonexistent):\n    if not hasattr(ax, \"tz_localize\"):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(\n                f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n            )\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n    return ax",
                "def describe_numeric_1d(series):\n    stat_index = (\n        [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n    )\n    d = (\n        [series.count(), series.mean(), series.std(), series.min()]\n        + series.quantile(percentiles).tolist()\n        + [series.max()]\n    )\n    return pd.Series(d, index=stat_index, name=series.name)",
                "def describe_categorical_1d(data):\n    names = [\"count\", \"unique\"]\n    objcounts = data.value_counts()\n    count_unique = len(objcounts[objcounts != 0])\n    result = [data.count(), count_unique]\n    dtype = None\n    if result[1] > 0:\n        top, freq = objcounts.index[0], objcounts.iloc[0]\n\n        if is_datetime64_any_dtype(data):\n            tz = data.dt.tz\n            asint = data.dropna().values.view(\"i8\")\n            top = Timestamp(top)\n            if top.tzinfo is not None and tz is not None:\n                # Don't tz_localize(None) if key is already tz-aware\n                top = top.tz_convert(tz)\n            else:\n                top = top.tz_localize(tz)\n            names += [\"top\", \"freq\", \"first\", \"last\"]\n            result += [\n                top,\n                freq,\n                Timestamp(asint.min(), tz=tz),\n                Timestamp(asint.max(), tz=tz),\n            ]\n        else:\n            names += [\"top\", \"freq\"]\n            result += [top, freq]\n\n    # If the DataFrame is empty, set 'top' and 'freq' to None\n    # to maintain output shape consistency\n    else:\n        names += [\"top\", \"freq\"]\n        result += [np.nan, np.nan]\n        dtype = \"object\"\n\n    return pd.Series(result, index=names, name=data.name, dtype=dtype)",
                "def describe_1d(data):\n    if is_bool_dtype(data):\n        return describe_categorical_1d(data)\n    elif is_numeric_dtype(data):\n        return describe_numeric_1d(data)\n    elif is_timedelta64_dtype(data):\n        return describe_numeric_1d(data)\n    else:\n        return describe_categorical_1d(data)",
                "@Substitution(\n    desc=\"Return the mean absolute deviation of the values \"\n    \"for the requested axis.\",\n    name1=name,\n    name2=name2,\n    axis_descr=axis_descr,\n    min_count=\"\",\n    see_also=\"\",\n    examples=\"\",\n)\n@Appender(_num_doc)\ndef mad(self, axis=None, skipna=None, level=None):\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(\"mad\", axis=axis, level=level, skipna=skipna)\n\n    data = self._get_numeric_data()\n    if axis == 0:\n        demeaned = data - data.mean(axis=0)\n    else:\n        demeaned = data.sub(data.mean(axis=1), axis=0)\n    return np.abs(demeaned).mean(axis=axis, skipna=skipna)",
                "@Appender(Rolling.__doc__)\ndef rolling(\n    self,\n    window,\n    min_periods=None,\n    center=False,\n    win_type=None,\n    on=None,\n    axis=0,\n    closed=None,\n):\n    axis = self._get_axis_number(axis)\n\n    if win_type is not None:\n        return Window(\n            self,\n            window=window,\n            min_periods=min_periods,\n            center=center,\n            win_type=win_type,\n            on=on,\n            axis=axis,\n            closed=closed,\n        )\n\n    return Rolling(\n        self,\n        window=window,\n        min_periods=min_periods,\n        center=center,\n        win_type=win_type,\n        on=on,\n        axis=axis,\n        closed=closed,\n    )",
                "@Appender(Expanding.__doc__)\ndef expanding(self, min_periods=1, center=False, axis=0):\n    axis = self._get_axis_number(axis)\n    return Expanding(self, min_periods=min_periods, center=center, axis=axis)",
                "@Appender(EWM.__doc__)\ndef ewm(\n    self,\n    com=None,\n    span=None,\n    halflife=None,\n    alpha=None,\n    min_periods=0,\n    adjust=True,\n    ignore_na=False,\n    axis=0,\n):\n    axis = self._get_axis_number(axis)\n    return EWM(\n        self,\n        com=com,\n        span=span,\n        halflife=halflife,\n        alpha=alpha,\n        min_periods=min_periods,\n        adjust=adjust,\n        ignore_na=ignore_na,\n        axis=axis,\n    )",
                "def f(x):\n    return like in ensure_str(x)",
                "def f(x):\n    return matcher.search(ensure_str(x)) is not None"
            ],
            "inscope_function_signatures": [
                "_single_replace(self, to_replace, method, inplace, limit)",
                "_doc_parms(cls)",
                "_make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also: str='', examples: str='')",
                "_make_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also: str='', examples: str='')",
                "_make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f)",
                "_make_cum_function(cls, name, name1, name2, axis_descr, desc, accum_func, accum_func_name, mask_a, mask_b, examples)",
                "_make_logical_function(cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value)",
                "__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
                "_init_mgr(self, mgr, axes=None, dtype=None, copy=False)",
                "attrs(self) -> Dict[Optional[Hashable], Any]",
                "attrs(self, value: Mapping[Optional[Hashable], Any]) -> None",
                "_validate_dtype(self, dtype)",
                "_constructor(self)",
                "_constructor_sliced(self)",
                "_constructor_expanddim(self)",
                "_setup_axes(cls, axes: List[str], docs: Dict[str, str])",
                "_construct_axes_dict(self, axes=None, **kwargs)",
                "_construct_axes_dict_from(self, axes, **kwargs)",
                "_construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None)",
                "_from_axes(cls, data, axes, **kwargs)",
                "_get_axis_number(cls, axis)",
                "_get_axis_name(cls, axis)",
                "_get_axis(self, axis)",
                "_get_block_manager_axis(cls, axis)",
                "_get_axis_resolvers(self, axis)",
                "_get_index_resolvers(self)",
                "_get_space_character_free_column_resolvers(self)",
                "_info_axis(self)",
                "_stat_axis(self)",
                "shape(self) -> Tuple[int, ...]",
                "axes(self)",
                "ndim(self) -> int",
                "size(self)",
                "_selected_obj(self: FrameOrSeries) -> FrameOrSeries",
                "_obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries",
                "set_axis(self, labels, axis=0, inplace=False)",
                "_set_axis(self, axis, labels)",
                "transpose(self, *args, **kwargs)",
                "swapaxes(self, axis1, axis2, copy=True)",
                "droplevel(self, level, axis=0)",
                "pop(self, item)",
                "squeeze(self, axis=None)",
                "swaplevel(self, i=-2, j=-1, axis=0)",
                "rename(self, *args, **kwargs)",
                "rename_axis(self, mapper=sentinel, **kwargs)",
                "_set_axis_name(self, name, axis=0, inplace=False)",
                "_indexed_same(self, other) -> bool",
                "equals(self, other)",
                "__neg__(self)",
                "__pos__(self)",
                "__invert__(self)",
                "__nonzero__(self)",
                "bool(self)",
                "__abs__(self)",
                "__round__(self, decimals=0)",
                "_is_level_reference(self, key, axis=0)",
                "_is_label_reference(self, key, axis=0) -> bool_t",
                "_is_label_or_level_reference(self, key: str, axis: int=0) -> bool_t",
                "_check_label_or_level_ambiguity(self, key, axis: int=0) -> None",
                "_get_label_or_level_values(self, key: str, axis: int=0) -> np.ndarray",
                "_drop_labels_or_levels(self, keys, axis: int=0)",
                "__hash__(self)",
                "__iter__(self)",
                "keys(self)",
                "items(self)",
                "iteritems(self)",
                "__len__(self) -> int",
                "__contains__(self, key) -> bool_t",
                "empty(self) -> bool_t",
                "__array__(self, dtype=None)",
                "__array_wrap__(self, result, context=None)",
                "__getstate__(self) -> Dict[str, Any]",
                "__setstate__(self, state)",
                "__repr__(self) -> str",
                "_repr_latex_(self)",
                "_repr_data_resource_(self)",
                "to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None)",
                "to_json(self, path_or_buf: Optional[FilePathOrBuffer]=None, orient: Optional[str]=None, date_format: Optional[str]=None, double_precision: int=10, force_ascii: bool_t=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool_t=False, compression: Optional[str]='infer', index: bool_t=True, indent: Optional[int]=None) -> Optional[str]",
                "to_hdf(self, path_or_buf, key: str, mode: str='a', complevel: Optional[int]=None, complib: Optional[str]=None, append: bool_t=False, format: Optional[str]=None, index: bool_t=True, min_itemsize: Optional[Union[int, Dict[str, int]]]=None, nan_rep=None, dropna: Optional[bool_t]=None, data_columns: Optional[List[str]]=None, errors: str='strict', encoding: str='UTF-8')",
                "to_sql(self, name: str, con, schema=None, if_exists: str='fail', index: bool_t=True, index_label=None, chunksize=None, dtype=None, method=None) -> None",
                "to_pickle(self, path, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL) -> None",
                "to_clipboard(self, excel: bool_t=True, sep: Optional[str]=None, **kwargs)",
                "to_xarray(self)",
                "to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None)",
                "to_csv(self, path_or_buf: Optional[FilePathOrBuffer]=None, sep: str=',', na_rep: str='', float_format: Optional[str]=None, columns: Optional[Sequence[Optional[Hashable]]]=None, header: Union[bool_t, List[str]]=True, index: bool_t=True, index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]]=None, mode: str='w', encoding: Optional[str]=None, compression: Optional[Union[str, Mapping[str, str]]]='infer', quoting: Optional[int]=None, quotechar: str='\"', line_terminator: Optional[str]=None, chunksize: Optional[int]=None, date_format: Optional[str]=None, doublequote: bool_t=True, escapechar: Optional[str]=None, decimal: Optional[str]='.') -> Optional[str]",
                "_create_indexer(cls, name: str, indexer) -> None",
                "_set_as_cached(self, item, cacher) -> None",
                "_reset_cacher(self) -> None",
                "_maybe_cache_changed(self, item, value) -> None",
                "_is_cached(self) -> bool_t",
                "_get_cacher(self)",
                "_maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True) -> None",
                "_clear_item_cache(self) -> None",
                "take(self, indices, axis=0, is_copy: bool_t=True, **kwargs)",
                "xs(self, key, axis=0, level=None, drop_level: bool_t=True)",
                "__getitem__(self, item)",
                "_get_item_cache(self, item)",
                "_iget_item_cache(self, item)",
                "_box_item_values(self, key, values)",
                "_slice(self, slobj: slice, axis=0, kind=None)",
                "_set_item(self, key, value) -> None",
                "_set_is_copy(self, ref=None, copy: bool_t=True) -> None",
                "_check_is_chained_assignment_possible(self) -> bool_t",
                "_check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
                "__delitem__(self, key)",
                "get(self, key, default=None)",
                "_is_view(self)",
                "reindex_like(self, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None)",
                "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise')",
                "_drop_axis(self, labels, axis, level=None, errors: str='raise')",
                "_update_inplace(self, result, verify_is_copy: bool_t=True) -> None",
                "add_prefix(self, prefix: str)",
                "add_suffix(self, suffix: str)",
                "sort_values(self, by=None, axis=0, ascending=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last')",
                "sort_index(self, axis=0, level=None, ascending: bool_t=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool_t=True)",
                "reindex(self, *args, **kwargs)",
                "_reindex_axes(self, axes, level, limit, tolerance, method, fill_value, copy)",
                "_needs_reindex_multi(self, axes, method, level) -> bool_t",
                "_reindex_multi(self, axes, copy, fill_value)",
                "_reindex_with_indexers(self, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False)",
                "filter(self, items=None, like: Optional[str]=None, regex: Optional[str]=None, axis=None)",
                "head(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                "tail(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                "sample(self, n=None, frac=None, replace=False, weights=None, random_state=None, axis=None)",
                "pipe(self, func, *args, **kwargs)",
                "__finalize__(self: FrameOrSeries, other, method=None, **kwargs) -> FrameOrSeries",
                "__getattr__(self, name: str)",
                "__setattr__(self, name: str, value) -> None",
                "_dir_additions(self)",
                "_protect_consolidate(self, f)",
                "_consolidate_inplace(self) -> None",
                "_consolidate(self, inplace: bool_t=False)",
                "_is_mixed_type(self)",
                "_is_numeric_mixed_type(self)",
                "_is_datelike_mixed_type(self)",
                "_check_inplace_setting(self, value) -> bool_t",
                "_get_numeric_data(self)",
                "_get_bool_data(self)",
                "values(self)",
                "_values(self)",
                "_get_values(self)",
                "_internal_get_values(self)",
                "dtypes(self)",
                "_to_dict_of_blocks(self, copy: bool_t=True)",
                "astype(self, dtype, copy: bool_t=True, errors: str='raise')",
                "copy(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                "__copy__(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                "__deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries",
                "_convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False, copy: bool_t=True) -> FrameOrSeries",
                "infer_objects(self)",
                "fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                "ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                "bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                "interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
                "asof(self, where, subset=None)",
                "isna(self)",
                "isnull(self)",
                "notna(self)",
                "notnull(self)",
                "_clip_with_scalar(self, lower, upper, inplace: bool_t=False)",
                "_clip_with_one_bound(self, threshold, method, axis, inplace)",
                "clip(self, lower=None, upper=None, axis=None, inplace: bool_t=False, *args, **kwargs)",
                "groupby(self, by=None, axis=0, level=None, as_index: bool_t=True, sort: bool_t=True, group_keys: bool_t=True, squeeze: bool_t=False, observed: bool_t=False)",
                "asfreq(self, freq, method=None, how: Optional[str]=None, normalize: bool_t=False, fill_value=None)",
                "at_time(self, time, asof: bool_t=False, axis=None)",
                "between_time(self, start_time, end_time, include_start: bool_t=True, include_end: bool_t=True, axis=None)",
                "resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: int=0, on=None, level=None)",
                "first(self, offset)",
                "last(self, offset)",
                "rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False) -> FrameOrSeries",
                "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                "_align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                "_align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                "_where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                "where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                "shift(self, periods=1, freq=None, axis=0, fill_value=None)",
                "slice_shift(self: FrameOrSeries, periods: int=1, axis=0) -> FrameOrSeries",
                "tshift(self, periods: int=1, freq=None, axis=0)",
                "truncate(self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t=True) -> FrameOrSeries",
                "tz_convert(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True) -> FrameOrSeries",
                "tz_localize(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True, ambiguous='raise', nonexistent: str='raise') -> FrameOrSeries",
                "abs(self)",
                "describe(self, percentiles=None, include=None, exclude=None)",
                "pct_change(self, periods=1, fill_method='pad', limit=None, freq=None, **kwargs)",
                "_agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs)",
                "_add_numeric_operations(cls)",
                "_add_series_or_dataframe_operations(cls)",
                "transform(self, func, *args, **kwargs)",
                "_find_valid_index(self, how: str)",
                "first_valid_index(self)",
                "last_valid_index(self)",
                "stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
                "stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)",
                "stat_func(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs)",
                "cum_func(self, axis=None, skipna=True, *args, **kwargs)",
                "logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
                "set_axis(a, i)",
                "f()",
                "ranker(data)",
                "_tz_convert(ax, tz)",
                "_tz_localize(ax, tz, ambiguous, nonexistent)",
                "describe_numeric_1d(series)",
                "describe_categorical_1d(data)",
                "describe_1d(data)",
                "mad(self, axis=None, skipna=None, level=None)",
                "rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)",
                "expanding(self, min_periods=1, center=False, axis=0)",
                "ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0)",
                "f(x)",
                "f(x)"
            ],
            "variables_in_file": {
                "_shared_docs": [
                    6528,
                    7043,
                    7047,
                    10887,
                    7051,
                    10255,
                    8210,
                    10266,
                    10913,
                    10917,
                    8744,
                    5033,
                    5037,
                    6065,
                    8626,
                    8881,
                    9909,
                    6711,
                    10301,
                    9792,
                    8257,
                    8770,
                    10307,
                    6981,
                    7113,
                    7117,
                    2127,
                    6358,
                    5079,
                    97,
                    2017,
                    10851,
                    8807,
                    4980
                ],
                "Dict": [
                    97,
                    293,
                    294,
                    234,
                    301,
                    179,
                    1942,
                    2364
                ],
                "str": [
                    4096,
                    7680,
                    10281,
                    5173,
                    1593,
                    3655,
                    5192,
                    3662,
                    2656,
                    97,
                    4193,
                    4194,
                    5240,
                    4095,
                    1660,
                    2174,
                    2175,
                    3200,
                    2178,
                    2181,
                    2184,
                    2714,
                    158,
                    3755,
                    173,
                    174,
                    175,
                    176,
                    180,
                    10973,
                    6907,
                    7429,
                    8972,
                    11021,
                    3873,
                    292,
                    293,
                    294,
                    297,
                    301,
                    4910,
                    2357,
                    2358,
                    2360,
                    2362,
                    2364,
                    3901,
                    2367,
                    2368,
                    2369,
                    5479,
                    3971,
                    403,
                    1942,
                    8089,
                    8091,
                    4030,
                    2497,
                    1986,
                    2500,
                    3030,
                    3031,
                    3032,
                    4568,
                    3034,
                    4569,
                    3036,
                    3037,
                    3038,
                    3039,
                    3041,
                    3042,
                    3044,
                    3046,
                    3047,
                    3048,
                    9211,
                    7677,
                    7678,
                    7679
                ],
                "dict": [
                    97,
                    98,
                    8771,
                    1956,
                    8745,
                    5996,
                    429,
                    2127,
                    10255,
                    211,
                    244,
                    1944,
                    5979,
                    316
                ],
                "_shared_doc_kwargs": [
                    8257,
                    98,
                    7043,
                    8772,
                    7047,
                    5033,
                    7113,
                    8746,
                    7117,
                    10255,
                    8881,
                    9909,
                    6358,
                    6711
                ],
                "sentinel": [
                    1248,
                    1280,
                    1123,
                    110,
                    1264,
                    372
                ],
                "object": [
                    1960,
                    1970,
                    5170,
                    1974,
                    5186,
                    5190,
                    205,
                    206,
                    207,
                    5202,
                    5203,
                    212,
                    5210,
                    5212,
                    5981,
                    5217,
                    5221,
                    110,
                    5231
                ],
                "self.ndim": [
                    6016,
                    2850,
                    5602,
                    9764,
                    5578,
                    2987,
                    3947,
                    8555,
                    8592,
                    8273,
                    3698,
                    9680,
                    8533,
                    3478,
                    118,
                    5978,
                    3515,
                    11130
                ],
                "self": [
                    8192,
                    8193,
                    10240,
                    10242,
                    8199,
                    8204,
                    8206,
                    10257,
                    10258,
                    10295,
                    10298,
                    10304,
                    10310,
                    8273,
                    8274,
                    8277,
                    8279,
                    4185,
                    2147,
                    8297,
                    8299,
                    118,
                    8312,
                    121,
                    8314,
                    124,
                    125,
                    4229,
                    134,
                    4230,
                    4231,
                    137,
                    8326,
                    4243,
                    8357,
                    8360,
                    8361,
                    8366,
                    8367,
                    8376,
                    205,
                    206,
                    207,
                    8398,
                    212,
                    219,
                    8413,
                    6372,
                    8421,
                    8424,
                    8428,
                    6381,
                    238,
                    239,
                    240,
                    6382,
                    6385,
                    8433,
                    244,
                    8435,
                    8437,
                    8438,
                    8446,
                    256,
                    8448,
                    8449,
                    8458,
                    269,
                    8461,
                    276,
                    6423,
                    6429,
                    6430,
                    6432,
                    8482,
                    6435,
                    2341,
                    6437,
                    6450,
                    8501,
                    8503,
                    8507,
                    8509,
                    6473,
                    336,
                    6481,
                    8533,
                    343,
                    8535,
                    8541,
                    6495,
                    4452,
                    6502,
                    6505,
                    362,
                    8553,
                    8555,
                    6515,
                    372,
                    4471,
                    8570,
                    4476,
                    6524,
                    6526,
                    4481,
                    4482,
                    4485,
                    4486,
                    4489,
                    4491,
                    8587,
                    4495,
                    4496,
                    8592,
                    8595,
                    4501,
                    8597,
                    4506,
                    8603,
                    8604,
                    414,
                    415,
                    8610,
                    8612,
                    4519,
                    8615,
                    4522,
                    428,
                    4526,
                    2480,
                    8624,
                    4538,
                    4541,
                    458,
                    459,
                    4560,
                    4563,
                    471,
                    475,
                    479,
                    486,
                    495,
                    518,
                    542,
                    4638,
                    4639,
                    4642,
                    547,
                    4643,
                    552,
                    4650,
                    4658,
                    8764,
                    8765,
                    6728,
                    6731,
                    6732,
                    6734,
                    2641,
                    8791,
                    8797,
                    4719,
                    636,
                    638,
                    643,
                    644,
                    6800,
                    6801,
                    6803,
                    2712,
                    670,
                    673,
                    674,
                    678,
                    680,
                    681,
                    683,
                    4779,
                    4780,
                    688,
                    8884,
                    8886,
                    8888,
                    698,
                    699,
                    8892,
                    8894,
                    703,
                    704,
                    708,
                    709,
                    713,
                    2770,
                    8918,
                    8927,
                    8928,
                    8931,
                    11003,
                    11005,
                    6910,
                    8958,
                    11008,
                    6913,
                    770,
                    772,
                    6919,
                    8970,
                    6925,
                    6926,
                    6927,
                    8975,
                    8979,
                    6934,
                    8988,
                    4894,
                    8991,
                    4896,
                    4897,
                    2850,
                    2851,
                    6944,
                    2853,
                    6948,
                    11043,
                    11045,
                    11046,
                    4907,
                    6956,
                    4911,
                    816,
                    817,
                    4914,
                    6959,
                    6963,
                    6967,
                    11063,
                    6969,
                    11065,
                    11068,
                    6973,
                    11100,
                    11102,
                    11104,
                    11105,
                    11115,
                    11121,
                    4978,
                    11130,
                    11132,
                    11135,
                    7045,
                    11142,
                    7049,
                    9114,
                    9115,
                    9116,
                    11167,
                    928,
                    929,
                    11168,
                    932,
                    5035,
                    2987,
                    2988,
                    9135,
                    9137,
                    9140,
                    949,
                    950,
                    3001,
                    7115,
                    7119,
                    9173,
                    9174,
                    7127,
                    7128,
                    9179,
                    7132,
                    7135,
                    7142,
                    7149,
                    9200,
                    7154,
                    7155,
                    9202,
                    7157,
                    7163,
                    7164,
                    7166,
                    7167,
                    1071,
                    5167,
                    5169,
                    5170,
                    5171,
                    1079,
                    5182,
                    5183,
                    5184,
                    1090,
                    1091,
                    5186,
                    5188,
                    1094,
                    1095,
                    5189,
                    5190,
                    1099,
                    1101,
                    1105,
                    5202,
                    5203,
                    7254,
                    5209,
                    5210,
                    3163,
                    5211,
                    5212,
                    1118,
                    5215,
                    1120,
                    5217,
                    5218,
                    5219,
                    5221,
                    5223,
                    7275,
                    7277,
                    5231,
                    7280,
                    7284,
                    7286,
                    5239,
                    9343,
                    9344,
                    5251,
                    5253,
                    5254,
                    9349,
                    3213,
                    5261,
                    5263,
                    3217,
                    3218,
                    3223,
                    9370,
                    3228,
                    9372,
                    3232,
                    5281,
                    5283,
                    5284,
                    5285,
                    5289,
                    5290,
                    5294,
                    5295,
                    5299,
                    3252,
                    5300,
                    5305,
                    5306,
                    3259,
                    3264,
                    3271,
                    5320,
                    3274,
                    5323,
                    3277,
                    1247,
                    9443,
                    1254,
                    7411,
                    1270,
                    7414,
                    1276,
                    1278,
                    1279,
                    1287,
                    5402,
                    5403,
                    3359,
                    5408,
                    3361,
                    3362,
                    3364,
                    5413,
                    3368,
                    3369,
                    5433,
                    1345,
                    1346,
                    1349,
                    1359,
                    5465,
                    5475,
                    5476,
                    7527,
                    3472,
                    3473,
                    3478,
                    3482,
                    7580,
                    7581,
                    3487,
                    7583,
                    3489,
                    3491,
                    1445,
                    3493,
                    3495,
                    1447,
                    7589,
                    3500,
                    1453,
                    3502,
                    3505,
                    3508,
                    1464,
                    1467,
                    3515,
                    3518,
                    3520,
                    3521,
                    1478,
                    3526,
                    1481,
                    5578,
                    1483,
                    3531,
                    1485,
                    1486,
                    5579,
                    5584,
                    3537,
                    1490,
                    5585,
                    5588,
                    3541,
                    9680,
                    3544,
                    3545,
                    5594,
                    3547,
                    3550,
                    5602,
                    3555,
                    1509,
                    3557,
                    3559,
                    5606,
                    5607,
                    7657,
                    1515,
                    3563,
                    5612,
                    1518,
                    5613,
                    7658,
                    1521,
                    5617,
                    3571,
                    1524,
                    3572,
                    3573,
                    7671,
                    3578,
                    3582,
                    3583,
                    3587,
                    3590,
                    3592,
                    1555,
                    3605,
                    3606,
                    1560,
                    1561,
                    3608,
                    3610,
                    3611,
                    9764,
                    9765,
                    9768,
                    9770,
                    9775,
                    1584,
                    1585,
                    9777,
                    1590,
                    3646,
                    3655,
                    3656,
                    3657,
                    3658,
                    1613,
                    3662,
                    3663,
                    5725,
                    5726,
                    5729,
                    1635,
                    1636,
                    1641,
                    1642,
                    5738,
                    3698,
                    3700,
                    3709,
                    3711,
                    3717,
                    3721,
                    7660,
                    5777,
                    5778,
                    5785,
                    1694,
                    1695,
                    3743,
                    1697,
                    1698,
                    1699,
                    1700,
                    1701,
                    3750,
                    1708,
                    9912,
                    9914,
                    9916,
                    5829,
                    5830,
                    5833,
                    9929,
                    9932,
                    9933,
                    1754,
                    1759,
                    1771,
                    1773,
                    1778,
                    9985,
                    9987,
                    9989,
                    3856,
                    7952,
                    1810,
                    7954,
                    3863,
                    1823,
                    3881,
                    3884,
                    1837,
                    3890,
                    1848,
                    1849,
                    3897,
                    5946,
                    1853,
                    5952,
                    1857,
                    5956,
                    1861,
                    5959,
                    3916,
                    3917,
                    3918,
                    5966,
                    8012,
                    8015,
                    8016,
                    8019,
                    3927,
                    5975,
                    5976,
                    5978,
                    8023,
                    8024,
                    8025,
                    8027,
                    5992,
                    3947,
                    3948,
                    3950,
                    6004,
                    1910,
                    6013,
                    3966,
                    3967,
                    1920,
                    3968,
                    3969,
                    6016,
                    6017,
                    6022,
                    1928,
                    1929,
                    6025,
                    8074,
                    8077,
                    8078,
                    8082,
                    8083,
                    8084,
                    1943,
                    1945,
                    1946,
                    1947,
                    1948,
                    6042,
                    1955,
                    1960,
                    6061,
                    1966,
                    1970,
                    1974,
                    1977,
                    1979,
                    4027,
                    1981,
                    4028,
                    1989,
                    1990,
                    1998,
                    10194,
                    10198,
                    2008,
                    10209,
                    10223,
                    10224,
                    8177,
                    4086,
                    4087
                ],
                "TypeError": [
                    6404,
                    9350,
                    8200,
                    8075,
                    1809,
                    8338,
                    4632,
                    6519,
                    7587,
                    4660,
                    1463,
                    1082,
                    6463,
                    1088,
                    5312,
                    1477,
                    8013,
                    6490,
                    9180,
                    6752,
                    5986,
                    5222,
                    1257,
                    370,
                    4466,
                    7410,
                    3701,
                    6389,
                    119,
                    7669
                ],
                "to_replace": [
                    128,
                    6419,
                    6421,
                    6424,
                    6433,
                    6436,
                    6520,
                    6450,
                    6465,
                    6467,
                    6470,
                    6474,
                    6482,
                    6484,
                    6369,
                    6377,
                    6378,
                    6507,
                    6380,
                    6383,
                    6385,
                    6387,
                    6516,
                    120,
                    6394,
                    6397
                ],
                "method": [
                    8321,
                    6786,
                    4485,
                    4490,
                    8333,
                    3857,
                    8469,
                    4503,
                    8471,
                    8472,
                    4520,
                    5944,
                    8387,
                    8388,
                    8389,
                    5959,
                    9933,
                    9934,
                    5967,
                    8271,
                    6744,
                    2650,
                    8288,
                    4453,
                    6759,
                    7529,
                    6383,
                    6385,
                    6770,
                    7153,
                    8306,
                    6773,
                    7157,
                    120,
                    8187,
                    126
                ],
                "__name__": [
                    256,
                    5989,
                    1990,
                    1515,
                    1490,
                    1810,
                    6520,
                    121,
                    6493
                ],
                "type": [
                    256,
                    6019,
                    5989,
                    1990,
                    1515,
                    9933,
                    1490,
                    1810,
                    8338,
                    6520,
                    121,
                    6493
                ],
                "orig_dtype": [
                    131,
                    124,
                    11119,
                    11111
                ],
                "self.dtype": [
                    11132,
                    124,
                    134
                ],
                "result": [
                    9735,
                    9743,
                    10257,
                    10258,
                    9749,
                    10261,
                    9752,
                    1091,
                    1112,
                    1115,
                    1118,
                    1120,
                    7277,
                    7279,
                    7284,
                    7285,
                    7289,
                    125,
                    128,
                    129,
                    5252,
                    134,
                    5255,
                    137,
                    140,
                    9370,
                    9371,
                    9372,
                    1276,
                    772,
                    773,
                    1289,
                    1291,
                    9722,
                    3364,
                    3368,
                    3369,
                    3371,
                    816,
                    819,
                    823,
                    5959,
                    5962,
                    5964,
                    3927,
                    3950,
                    11119,
                    3952,
                    11122,
                    6004,
                    6006,
                    6008,
                    11128,
                    6010,
                    3968,
                    11137,
                    11138,
                    1923,
                    1924,
                    11140,
                    11142,
                    1927,
                    1929,
                    3482,
                    3483,
                    3484,
                    9137,
                    9140,
                    950,
                    951,
                    952,
                    953,
                    9143,
                    9145,
                    3518,
                    3526,
                    3527,
                    3531,
                    3532,
                    7127,
                    7133,
                    7136,
                    7139,
                    7142,
                    7144,
                    9200,
                    9201,
                    5616,
                    5617,
                    5618,
                    3572,
                    3573,
                    9202,
                    9720,
                    3577,
                    3578,
                    3579
                ],
                "inplace": [
                    131,
                    4228,
                    6021,
                    136,
                    6793,
                    1290,
                    4235,
                    6798,
                    8599,
                    6424,
                    6043,
                    5279,
                    5280,
                    6435,
                    3876,
                    6062,
                    6446,
                    1073,
                    8498,
                    6523,
                    5943,
                    3896,
                    6458,
                    8766,
                    8512,
                    1091,
                    1348,
                    1349,
                    5957,
                    1351,
                    6726,
                    6476,
                    8526,
                    5970,
                    6482,
                    7250,
                    8790,
                    1117,
                    6368,
                    6496,
                    8800,
                    1251,
                    7141,
                    5993,
                    7275,
                    1262,
                    6383,
                    6510,
                    6385,
                    7154,
                    7155,
                    6004,
                    6516,
                    1270,
                    7280,
                    7283,
                    7286,
                    6010,
                    635,
                    1276,
                    125,
                    6014,
                    7167
                ],
                "self.copy": [
                    4481,
                    5729,
                    1091,
                    6435,
                    1349,
                    5738,
                    1778,
                    6004,
                    8884,
                    950,
                    1276,
                    125,
                    638,
                    703
                ],
                "fill_f": [
                    129,
                    126
                ],
                "missing.get_fill_func": [
                    126
                ],
                "missing": [
                    128,
                    4453,
                    8271,
                    6972,
                    126,
                    6975
                ],
                "mask": [
                    128,
                    129,
                    7138,
                    7139,
                    9922,
                    9923,
                    11136,
                    11138,
                    11115,
                    11117,
                    11121,
                    11122,
                    11125,
                    7128,
                    11135
                ],
                "missing.mask_missing": [
                    128
                ],
                "result.values": [
                    128,
                    129
                ],
                "values": [
                    6400,
                    129,
                    131,
                    134,
                    6414,
                    6417,
                    6421,
                    1699,
                    6948,
                    1701,
                    6949,
                    6951,
                    4649,
                    1706,
                    4650,
                    1453,
                    1454,
                    1455,
                    1457,
                    1458,
                    1459,
                    4657,
                    1461,
                    4658,
                    1463,
                    1467,
                    1468,
                    1469,
                    1726,
                    1471,
                    1472,
                    1473,
                    1475,
                    1477,
                    3544,
                    3545,
                    227,
                    6398,
                    9727
                ],
                "limit": [
                    129,
                    8322,
                    6790,
                    4490,
                    8334,
                    3859,
                    4503,
                    6424,
                    8471,
                    8472,
                    6043,
                    6062,
                    9916,
                    8388,
                    8389,
                    5959,
                    5969,
                    6496,
                    8289,
                    4456,
                    5993,
                    6383,
                    6385,
                    8307,
                    6009,
                    6014
                ],
                "values.dtype": [
                    1463,
                    131,
                    1477,
                    227
                ],
                "__finalize__": [
                    7045,
                    134,
                    11142,
                    1929,
                    4489,
                    6025,
                    7049,
                    5777,
                    6803,
                    8991,
                    3364,
                    5285,
                    688,
                    8624,
                    8894,
                    5829,
                    5320,
                    713,
                    5323,
                    7115,
                    7119,
                    4563,
                    5726,
                    5475,
                    5613,
                    6526
                ],
                "pd.Series": [
                    9752,
                    9714,
                    4931,
                    134
                ],
                "pd": [
                    4931,
                    134,
                    5616,
                    9714,
                    9752,
                    9788
                ],
                "self.index": [
                    134,
                    8074,
                    6925,
                    6926,
                    6927,
                    8077,
                    8082,
                    8083,
                    6944,
                    3491,
                    3493,
                    3495,
                    8360,
                    8361,
                    3505,
                    6969,
                    10298,
                    3521,
                    8012,
                    8015,
                    8019,
                    8023,
                    8024,
                    8421,
                    8424,
                    8435,
                    8437,
                    8438,
                    7164,
                    6910
                ],
                "self._update_inplace": [
                    8612,
                    6022,
                    7142,
                    137,
                    6801,
                    3897,
                    6524,
                    1118
                ],
                "result._data": [
                    137,
                    5962,
                    951,
                    952,
                    1112,
                    1118
                ],
                "bool_t": [
                    7296,
                    2177,
                    3585,
                    7297,
                    2180,
                    7298,
                    2182,
                    7174,
                    7299,
                    7300,
                    3594,
                    7430,
                    6030,
                    143,
                    5265,
                    3226,
                    2714,
                    1564,
                    8090,
                    8092,
                    8093,
                    3872,
                    6049,
                    8346,
                    8994,
                    4516,
                    3238,
                    7595,
                    3756,
                    3373,
                    7596,
                    4532,
                    4533,
                    5302,
                    2361,
                    1593,
                    2363,
                    9148,
                    2366,
                    1859,
                    2501,
                    1864,
                    7121,
                    3282,
                    5843,
                    8406,
                    3034,
                    3035,
                    3036,
                    5467,
                    4191,
                    4192,
                    5728,
                    4195,
                    3045,
                    5479,
                    5742,
                    5743,
                    5744,
                    5745,
                    3954,
                    5746,
                    5620,
                    7535,
                    9209,
                    4094
                ],
                "bool": [
                    192,
                    8512,
                    1510,
                    295,
                    1511,
                    1357,
                    143,
                    348,
                    189
                ],
                "PandasObject": [
                    146
                ],
                "SelectionMixin": [
                    146
                ],
                "_internal_names": [
                    173,
                    158
                ],
                "List": [
                    292,
                    301,
                    176,
                    3034,
                    188,
                    158,
                    2367
                ],
                "_internal_names_set": [
                    173
                ],
                "Set": [
                    173,
                    174
                ],
                "set": [
                    1966,
                    173,
                    174,
                    677
                ],
                "_accessors": [
                    174
                ],
                "_deprecations": [
                    175
                ],
                "FrozenSet": [
                    175
                ],
                "frozenset": [
                    175
                ],
                "_metadata": [
                    176
                ],
                "_is_copy": [
                    177
                ],
                "_data": [
                    178
                ],
                "BlockManager": [
                    1954,
                    178,
                    187,
                    378
                ],
                "_attrs": [
                    179
                ],
                "Optional": [
                    7680,
                    2179,
                    2181,
                    7429,
                    2183,
                    2184,
                    6033,
                    2714,
                    8090,
                    6052,
                    3755,
                    179,
                    2359,
                    2360,
                    2362,
                    2364,
                    188,
                    2366,
                    2367,
                    190,
                    191,
                    3029,
                    5846,
                    3032,
                    3033,
                    4568,
                    4569,
                    3036,
                    3038,
                    3039,
                    2656,
                    3040,
                    3042,
                    3043,
                    3044,
                    7677,
                    3046,
                    3047,
                    3048,
                    7678,
                    234,
                    243,
                    2173,
                    2174,
                    2175
                ],
                "Hashable": [
                    234,
                    179,
                    243,
                    3033,
                    3036,
                    191
                ],
                "Any": [
                    2179,
                    234,
                    179,
                    243,
                    1942,
                    191
                ],
                "_typ": [
                    180
                ],
                "Index": [
                    5216,
                    6953,
                    6954,
                    188
                ],
                "Dtype": [
                    190
                ],
                "Mapping": [
                    3039,
                    243,
                    191
                ],
                "fastpath": [
                    195
                ],
                "dtype": [
                    259,
                    9721,
                    9750,
                    9752,
                    196,
                    197,
                    5577,
                    5579,
                    5584,
                    5587,
                    2649,
                    5595,
                    5597,
                    225,
                    5602,
                    227,
                    228,
                    5606,
                    5612,
                    249,
                    250,
                    253
                ],
                "data": [
                    6784,
                    385,
                    6785,
                    8192,
                    9989,
                    9991,
                    9993,
                    8204,
                    8206,
                    8208,
                    9752,
                    9755,
                    9756,
                    9757,
                    9758,
                    9759,
                    9760,
                    9762,
                    9768,
                    9769,
                    9770,
                    9775,
                    9777,
                    9779,
                    9914,
                    9916,
                    6973,
                    6974,
                    6975,
                    6976,
                    9789,
                    9918,
                    9920,
                    9922,
                    197,
                    199,
                    203,
                    206,
                    2008,
                    2010,
                    5725,
                    5726,
                    9718,
                    9720,
                    8185,
                    378,
                    379,
                    9725,
                    9726,
                    9727
                ],
                "data.astype": [
                    197
                ],
                "copy": [
                    4480,
                    3586,
                    4486,
                    4490,
                    8331,
                    8458,
                    5776,
                    3858,
                    5783,
                    9370,
                    4510,
                    1072,
                    9142,
                    8377,
                    702,
                    8382,
                    1091,
                    710,
                    198,
                    4557,
                    4560,
                    5585,
                    1113,
                    5597,
                    8286,
                    223,
                    5600,
                    11104,
                    1250,
                    5476,
                    5606,
                    4455,
                    5612,
                    8428,
                    8429,
                    8304,
                    9200,
                    1276,
                    8319
                ],
                "data.copy": [
                    199
                ],
                "axes": [
                    4485,
                    4486,
                    4490,
                    4497,
                    670,
                    673,
                    674,
                    1279,
                    677,
                    4519,
                    3882,
                    3884,
                    1071,
                    3892,
                    310,
                    311,
                    313,
                    314,
                    315,
                    316,
                    1087,
                    320,
                    1095,
                    201,
                    202,
                    336,
                    343,
                    216,
                    1247,
                    4452,
                    372,
                    373,
                    4477,
                    382,
                    383
                ],
                "i": [
                    931,
                    932,
                    432,
                    6452,
                    6453,
                    439,
                    952,
                    440,
                    698,
                    314,
                    701,
                    706,
                    324,
                    709,
                    328,
                    329,
                    202,
                    203,
                    331,
                    332,
                    10316,
                    8541,
                    5606,
                    5607
                ],
                "ax": [
                    9344,
                    6787,
                    9347,
                    9348,
                    9354,
                    9356,
                    9357,
                    9361,
                    9362,
                    9363,
                    9364,
                    4501,
                    4502,
                    9366,
                    9368,
                    9371,
                    9116,
                    1695,
                    9120,
                    9125,
                    1585,
                    9139,
                    9140,
                    1590,
                    202,
                    203,
                    6731,
                    6735,
                    6737,
                    6740,
                    6742,
                    343,
                    9174,
                    9177,
                    9178,
                    8541,
                    9184,
                    9186,
                    3555,
                    1636,
                    3556,
                    3557,
                    9187,
                    9191,
                    9192,
                    1642,
                    9193,
                    9194,
                    9196,
                    9198,
                    9201,
                    4476,
                    4477,
                    4478
                ],
                "enumerate": [
                    932,
                    202,
                    10316,
                    432,
                    1108,
                    6452,
                    314,
                    316,
                    8541
                ],
                "data.reindex_axis": [
                    203
                ],
                "object.__setattr__": [
                    5217,
                    5221,
                    1960,
                    205,
                    206,
                    207,
                    5231,
                    1970,
                    5170,
                    212,
                    5203,
                    1974,
                    5210,
                    5212
                ],
                "attrs": [
                    1959,
                    1960,
                    208,
                    209,
                    242,
                    211,
                    212
                ],
                "a": [
                    4496,
                    4497,
                    4501,
                    4506,
                    673,
                    674,
                    931,
                    932,
                    314,
                    324,
                    325,
                    328,
                    329,
                    331,
                    332,
                    10316,
                    1359,
                    336,
                    343,
                    216,
                    219,
                    486,
                    362,
                    365,
                    367,
                    495,
                    372,
                    1910
                ],
                "axe": [
                    216,
                    217,
                    219
                ],
                "axes.items": [
                    216,
                    3892,
                    4477
                ],
                "mgr": [
                    224,
                    227,
                    228,
                    229,
                    218
                ],
                "mgr.reindex_axis": [
                    218
                ],
                "self._get_block_manager_axis": [
                    3362,
                    1099,
                    8975,
                    3571,
                    8597,
                    8886,
                    219,
                    4541
                ],
                "mgr.copy": [
                    224
                ],
                "len": [
                    5251,
                    9348,
                    5253,
                    9719,
                    8077,
                    10258,
                    931,
                    677,
                    9769,
                    684,
                    6451,
                    310,
                    311,
                    9782,
                    1978,
                    315,
                    1857,
                    6467,
                    4933,
                    6470,
                    5579,
                    8015,
                    1106,
                    5975,
                    9178,
                    6749,
                    227,
                    9699,
                    486,
                    5607,
                    6761,
                    8561,
                    1910,
                    8566,
                    11126,
                    3710
                ],
                "mgr.blocks": [
                    227
                ],
                "mgr.astype": [
                    228
                ],
                "self._attrs": [
                    240,
                    244,
                    238,
                    239
                ],
                "property": [
                    3204,
                    264,
                    520,
                    271,
                    278,
                    3225,
                    5405,
                    544,
                    5410,
                    3747,
                    549,
                    5287,
                    5292,
                    5297,
                    5435,
                    1863,
                    5328,
                    473,
                    477,
                    481,
                    488,
                    233,
                    497
                ],
                "value": [
                    6016,
                    6017,
                    6019,
                    6419,
                    6421,
                    3223,
                    6424,
                    6434,
                    6437,
                    6442,
                    6449,
                    6014,
                    5944,
                    6456,
                    5309,
                    3649,
                    3650,
                    5954,
                    6466,
                    6467,
                    6470,
                    6475,
                    6482,
                    5203,
                    5210,
                    5979,
                    5212,
                    5980,
                    5981,
                    5983,
                    6496,
                    5217,
                    5219,
                    5221,
                    3686,
                    5223,
                    3688,
                    5989,
                    5993,
                    6374,
                    5996,
                    6501,
                    6504,
                    5231,
                    6514,
                    244,
                    6005,
                    6516,
                    6012,
                    3582
                ],
                "attrs.setter": [
                    242
                ],
                "pandas_dtype": [
                    250
                ],
                "dtype.kind": [
                    253
                ],
                "NotImplementedError": [
                    8547,
                    5958,
                    4234,
                    4236,
                    5998,
                    6779,
                    283,
                    11164,
                    254
                ],
                "AbstractMethodError": [
                    3563,
                    269,
                    4526,
                    3537,
                    276,
                    4185
                ],
                "_AXIS_ALIASES": [
                    287
                ],
                "_AXIS_IALIASES": [
                    288
                ],
                "_stat_axis_number": [
                    289
                ],
                "_stat_axis_name": [
                    290
                ],
                "_ix": [
                    291
                ],
                "_AXIS_ORDERS": [
                    292
                ],
                "_AXIS_NUMBERS": [
                    293
                ],
                "int": [
                    2176,
                    7682,
                    2183,
                    293,
                    294,
                    296,
                    298,
                    4662,
                    2359,
                    1593,
                    2364,
                    1855,
                    1728,
                    8896,
                    1617,
                    3040,
                    2657,
                    482,
                    3043,
                    8933,
                    4967,
                    4721,
                    498,
                    1660
                ],
                "_AXIS_NAMES": [
                    294
                ],
                "_AXIS_REVERSED": [
                    295
                ],
                "_info_axis_number": [
                    296
                ],
                "_info_axis_name": [
                    297
                ],
                "_AXIS_LEN": [
                    298
                ],
                "info_axis": [
                    320,
                    310,
                    319
                ],
                "axes_are_reversed": [
                    317,
                    327,
                    311
                ],
                "cls._AXIS_ORDERS": [
                    313,
                    10316
                ],
                "cls": [
                    10253,
                    10316,
                    10318,
                    10319,
                    3202,
                    3204,
                    9943,
                    9945,
                    9946,
                    9957,
                    9958,
                    11017,
                    9996,
                    9998,
                    9999,
                    10009,
                    10010,
                    10019,
                    10020,
                    11050,
                    10031,
                    10032,
                    313,
                    314,
                    315,
                    316,
                    317,
                    10044,
                    319,
                    320,
                    10045,
                    11072,
                    324,
                    325,
                    328,
                    10057,
                    10058,
                    331,
                    10070,
                    10071,
                    10084,
                    10085,
                    10096,
                    10097,
                    10105,
                    10106,
                    379,
                    381,
                    383,
                    385,
                    10114,
                    10115,
                    389,
                    391,
                    11144,
                    395,
                    398,
                    10126,
                    10127,
                    10128,
                    402,
                    404,
                    408,
                    10137,
                    10138,
                    411,
                    10139,
                    10147,
                    420,
                    421,
                    422,
                    10148,
                    11177,
                    10160,
                    10161,
                    10219,
                    10226
                ],
                "cls._AXIS_NUMBERS": [
                    314,
                    395,
                    404
                ],
                "cls._AXIS_LEN": [
                    10318,
                    315,
                    422
                ],
                "cls._AXIS_NAMES": [
                    391,
                    328,
                    331,
                    408,
                    316
                ],
                "cls._AXIS_REVERSED": [
                    381,
                    317,
                    421
                ],
                "cls._info_axis_number": [
                    319
                ],
                "cls._info_axis_name": [
                    320
                ],
                "setattr": [
                    3204,
                    324,
                    9140,
                    3483,
                    636
                ],
                "properties.AxisProperty": [
                    324
                ],
                "properties": [
                    324
                ],
                "docs.get": [
                    324
                ],
                "docs": [
                    324
                ],
                "cls._internal_names_set.add": [
                    325
                ],
                "cls._internal_names_set": [
                    325
                ],
                "cls._AXIS_NAMES.items": [
                    328,
                    331
                ],
                "set_axis": [
                    329,
                    332
                ],
                "classmethod": [
                    417,
                    387,
                    300,
                    400,
                    9937,
                    375,
                    10174,
                    3199
                ],
                "d": [
                    384,
                    385,
                    11142,
                    1928,
                    1929,
                    3855,
                    3863,
                    429,
                    9788,
                    445,
                    9789,
                    9790,
                    453,
                    454,
                    457,
                    459,
                    460,
                    336,
                    337,
                    338,
                    343,
                    344,
                    345,
                    11105,
                    11106,
                    9709,
                    9714,
                    11132,
                    383
                ],
                "self._get_axis": [
                    9344,
                    770,
                    1287,
                    4231,
                    3473,
                    4501,
                    9116,
                    4639,
                    7583,
                    3368,
                    681,
                    1708,
                    1346,
                    708,
                    3918,
                    1359,
                    336,
                    9174,
                    5975,
                    8928,
                    486,
                    7660,
                    495,
                    1910,
                    4476,
                    8958
                ],
                "self._AXIS_ORDERS": [
                    673,
                    674,
                    486,
                    1928,
                    458,
                    362,
                    495,
                    336,
                    1359,
                    3856,
                    4496,
                    372,
                    1910,
                    343
                ],
                "d.update": [
                    344,
                    337,
                    459,
                    384
                ],
                "kwargs": [
                    384,
                    6795,
                    10257,
                    11161,
                    3357,
                    670,
                    671,
                    11037,
                    11039,
                    5035,
                    684,
                    10999,
                    687,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    11059,
                    9912,
                    1081,
                    1084,
                    9918,
                    9931,
                    9934,
                    337,
                    2770,
                    7252,
                    344,
                    11098,
                    1247,
                    1248,
                    1250,
                    1251,
                    1252,
                    4452,
                    4453,
                    4454,
                    1256,
                    4455,
                    4456,
                    1259,
                    4457,
                    365,
                    4458,
                    367,
                    4463,
                    4465,
                    10995,
                    372,
                    373,
                    4468,
                    10997,
                    379
                ],
                "zip": [
                    6414,
                    6398,
                    343
                ],
                "staticmethod": [
                    340
                ],
                "args": [
                    4452,
                    361,
                    5035,
                    684,
                    1071,
                    367,
                    10257,
                    7252,
                    11098,
                    671
                ],
                "list": [
                    361,
                    1259,
                    6380,
                    6414,
                    1967,
                    6416,
                    6417,
                    4468,
                    9685,
                    1084,
                    6397
                ],
                "args.pop": [
                    367
                ],
                "IndexError": [
                    368,
                    3744
                ],
                "require_all": [
                    369
                ],
                "kwargs.pop": [
                    1250,
                    1251,
                    1252,
                    4453,
                    4454,
                    4455,
                    4456,
                    4457,
                    4458,
                    684,
                    4463,
                    1072,
                    1073,
                    1074,
                    1075,
                    372,
                    1076,
                    9912
                ],
                "isinstance": [
                    6016,
                    6913,
                    8325,
                    8074,
                    8972,
                    6926,
                    8976,
                    9361,
                    403,
                    1954,
                    1956,
                    1445,
                    3492,
                    8357,
                    3497,
                    4906,
                    6953,
                    1708,
                    5165,
                    4910,
                    4911,
                    9139,
                    8502,
                    6907,
                    448,
                    7162,
                    8517,
                    3655,
                    7163,
                    8012,
                    3662,
                    3922,
                    8274,
                    6744,
                    3163,
                    5979,
                    3933,
                    8413,
                    5216,
                    2147,
                    8292,
                    1510,
                    5223,
                    8551,
                    9191,
                    5996,
                    6380,
                    6381,
                    3698,
                    9334,
                    5240,
                    8313,
                    378,
                    3707,
                    3710,
                    1791
                ],
                "cls._construct_axes_dict_from": [
                    383
                ],
                "axis": [
                    10240,
                    10250,
                    1555,
                    1560,
                    1561,
                    4637,
                    4638,
                    4639,
                    4642,
                    4650,
                    1584,
                    1585,
                    4658,
                    1075,
                    1077,
                    1079,
                    8766,
                    1094,
                    1095,
                    6728,
                    6730,
                    1099,
                    1101,
                    1613,
                    1614,
                    6733,
                    1105,
                    11006,
                    7252,
                    7253,
                    7254,
                    8284,
                    8801,
                    1635,
                    1636,
                    1641,
                    8302,
                    1647,
                    7280,
                    1651,
                    7286,
                    8311,
                    8312,
                    636,
                    8317,
                    639,
                    9343,
                    9344,
                    643,
                    4229,
                    4230,
                    4231,
                    9349,
                    8329,
                    6799,
                    6804,
                    9371,
                    1694,
                    1695,
                    1697,
                    1698,
                    1700,
                    1701,
                    8359,
                    8365,
                    1718,
                    8886,
                    9912,
                    9916,
                    9918,
                    9927,
                    9929,
                    9932,
                    9934,
                    1754,
                    1759,
                    8927,
                    8417,
                    8928,
                    8929,
                    1252,
                    1253,
                    1254,
                    1766,
                    1771,
                    1773,
                    8434,
                    7411,
                    1780,
                    1270,
                    7416,
                    11002,
                    11003,
                    8445,
                    1278,
                    1279,
                    8958,
                    9984,
                    770,
                    9985,
                    772,
                    9987,
                    9990,
                    1287,
                    7583,
                    1289,
                    9994,
                    11011,
                    8975,
                    7952,
                    7958,
                    9113,
                    8475,
                    4893,
                    4894,
                    9114,
                    4896,
                    4897,
                    3362,
                    11042,
                    9115,
                    11043,
                    11045,
                    11047,
                    3368,
                    3881,
                    9116,
                    4907,
                    4912,
                    3892,
                    3894,
                    11062,
                    11063,
                    11066,
                    11069,
                    5950,
                    5951,
                    5952,
                    1345,
                    1346,
                    5956,
                    1350,
                    3916,
                    3917,
                    3918,
                    3920,
                    5968,
                    3922,
                    3924,
                    3926,
                    5975,
                    8536,
                    11099,
                    8540,
                    3933,
                    11100,
                    3935,
                    11102,
                    3941,
                    3943,
                    5997,
                    11119,
                    4978,
                    11167,
                    4476,
                    4477,
                    11137,
                    11140,
                    389,
                    390,
                    391,
                    392,
                    395,
                    8589,
                    398,
                    8590,
                    3472,
                    3473,
                    402,
                    403,
                    404,
                    405,
                    8595,
                    3479,
                    408,
                    8597,
                    4506,
                    411,
                    3483,
                    4508,
                    414,
                    3486,
                    928,
                    6043,
                    7579,
                    931,
                    420,
                    7580,
                    7581,
                    423,
                    424,
                    7589,
                    11171,
                    428,
                    3500,
                    430,
                    3502,
                    6062,
                    9136,
                    9140,
                    949,
                    951,
                    952,
                    4539,
                    4540,
                    4541,
                    453,
                    10194,
                    9173,
                    9174,
                    9179,
                    10204,
                    10215,
                    7656,
                    7657,
                    7658,
                    7148,
                    7149,
                    7660,
                    10223,
                    10224,
                    8177,
                    9201,
                    3571,
                    3572,
                    7157,
                    7671,
                    3577,
                    8186,
                    7166,
                    7167
                ],
                "cls._AXIS_ALIASES.get": [
                    402,
                    389
                ],
                "cls._AXIS_ALIASES": [
                    402,
                    389
                ],
                "is_integer": [
                    390
                ],
                "KeyError": [
                    3744,
                    3939,
                    1703,
                    3945,
                    3722,
                    396,
                    5580,
                    4915,
                    4916,
                    5589,
                    1110,
                    409
                ],
                "ValueError": [
                    8576,
                    6019,
                    6916,
                    8581,
                    8967,
                    8456,
                    398,
                    10259,
                    9367,
                    8986,
                    411,
                    3744,
                    9121,
                    678,
                    3880,
                    9133,
                    3886,
                    9774,
                    1719,
                    4920,
                    8508,
                    4926,
                    6468,
                    4934,
                    8520,
                    9928,
                    4939,
                    8524,
                    4942,
                    1489,
                    9681,
                    7125,
                    4952,
                    6745,
                    4960,
                    8418,
                    1763,
                    9700,
                    4965,
                    1513,
                    4969,
                    4973,
                    9197,
                    6771,
                    8181,
                    1272,
                    9337,
                    1658,
                    6911
                ],
                "name": [
                    4642,
                    4643,
                    5166,
                    5167,
                    5169,
                    5170,
                    9784,
                    9785,
                    9786,
                    5182,
                    5183,
                    5184,
                    5186,
                    5188,
                    5189,
                    5190,
                    10318,
                    10320,
                    2642,
                    5202,
                    5203,
                    5209,
                    5210,
                    5211,
                    5212,
                    5215,
                    5217,
                    5218,
                    5219,
                    5221,
                    5231,
                    3202,
                    3203,
                    3204,
                    9930,
                    9931,
                    9933,
                    9943,
                    9948,
                    9960,
                    10994,
                    10996,
                    9973,
                    10999,
                    11006,
                    11010,
                    1288,
                    11017,
                    10001,
                    10012,
                    11036,
                    11039,
                    11045,
                    10022,
                    11047,
                    11050,
                    10034,
                    11059,
                    11066,
                    11069,
                    10047,
                    11072,
                    1346,
                    10060,
                    10073,
                    11098,
                    10087,
                    10099,
                    10108,
                    10117,
                    11144,
                    10130,
                    11161,
                    10141,
                    414,
                    415,
                    11167,
                    11170,
                    10150,
                    11177,
                    432,
                    433,
                    434,
                    10163
                ],
                "self._get_axis_name": [
                    673,
                    4642,
                    9349,
                    4230,
                    3881,
                    3917,
                    9140,
                    9179,
                    636,
                    414
                ],
                "getattr": [
                    3232,
                    3968,
                    3202,
                    8960,
                    8963,
                    415,
                    9931,
                    428,
                    9933,
                    8592,
                    5170,
                    3252,
                    1943,
                    475,
                    3228,
                    5215,
                    479
                ],
                "cls._get_axis_number": [
                    420
                ],
                "m": [
                    422,
                    423
                ],
                "axis_index": [
                    448,
                    449,
                    451,
                    428,
                    432,
                    442,
                    444
                ],
                "prefix": [
                    4025,
                    430,
                    439
                ],
                "axis_index.names": [
                    432
                ],
                "key": [
                    3717,
                    3721,
                    3475,
                    1558,
                    1559,
                    1560,
                    1561,
                    3487,
                    3743,
                    1697,
                    1698,
                    1699,
                    1700,
                    1701,
                    3493,
                    1703,
                    3495,
                    2479,
                    434,
                    1588,
                    1589,
                    1590,
                    439,
                    1721,
                    445,
                    1861,
                    1613,
                    1614,
                    1639,
                    1640,
                    1641,
                    1642,
                    3710,
                    3700,
                    1655,
                    3707,
                    3708,
                    3582
                ],
                "level": [
                    8450,
                    771,
                    9986,
                    4485,
                    9987,
                    4233,
                    4490,
                    8330,
                    3474,
                    3475,
                    8466,
                    9362,
                    9363,
                    4503,
                    9364,
                    9366,
                    9367,
                    11162,
                    7964,
                    11167,
                    11044,
                    11045,
                    4521,
                    8362,
                    8368,
                    434,
                    1074,
                    3894,
                    440,
                    11064,
                    442,
                    11066,
                    8766,
                    9929,
                    1100,
                    1101,
                    11006,
                    3921,
                    3924,
                    8536,
                    1113,
                    3932,
                    8285,
                    3935,
                    8802,
                    4454,
                    9192,
                    8425,
                    9193,
                    9194,
                    9196,
                    9197,
                    8303,
                    7409,
                    8439,
                    7417,
                    11004,
                    8318
                ],
                "level_values": [
                    442,
                    443
                ],
                "axis_index.get_level_values": [
                    442
                ],
                "s": [
                    9779,
                    443,
                    444,
                    445
                ],
                "level_values.to_series": [
                    443
                ],
                "s.index": [
                    444
                ],
                "MultiIndex": [
                    448,
                    3492,
                    9191,
                    1708,
                    9361,
                    3698,
                    3922,
                    9139,
                    6744,
                    3933,
                    1791
                ],
                "dindex": [
                    449,
                    451,
                    453
                ],
                "axis_index.to_series": [
                    451
                ],
                "axis_name": [
                    4230,
                    3881,
                    458,
                    459,
                    3882,
                    3917,
                    3948,
                    4243,
                    3927
                ],
                "self._get_axis_resolvers": [
                    459
                ],
                "_remove_spaces_column_name": [
                    471
                ],
                "k": [
                    6413,
                    6416,
                    6417,
                    1943,
                    1967,
                    1968,
                    1969,
                    1970,
                    6450,
                    1972,
                    1973,
                    1974,
                    6452,
                    6457,
                    708,
                    471,
                    1759,
                    5475,
                    5476,
                    6504,
                    6505,
                    1771,
                    1773,
                    6509,
                    6005,
                    6006,
                    6008
                ],
                "v": [
                    1280,
                    6400,
                    1282,
                    1284,
                    1286,
                    6413,
                    6414,
                    1969,
                    1970,
                    1972,
                    1974,
                    1095,
                    1096,
                    1098,
                    1104,
                    1105,
                    1108,
                    471,
                    5475,
                    5476,
                    1509,
                    1510,
                    1511,
                    1512,
                    6504,
                    6508,
                    6005,
                    6009,
                    1279
                ],
                "self.items": [
                    5594,
                    1853,
                    471
                ],
                "self._info_axis_name": [
                    4027,
                    6731,
                    4086,
                    475,
                    4638
                ],
                "self._stat_axis_name": [
                    9912,
                    479
                ],
                "tuple": [
                    3480,
                    11161,
                    11037,
                    3357,
                    11039,
                    673,
                    930,
                    674,
                    687,
                    9137,
                    11059,
                    486,
                    6380,
                    3950,
                    10995,
                    10997,
                    10999,
                    3707,
                    3710
                ],
                "Tuple": [
                    482
                ],
                "self._data.ndim": [
                    518
                ],
                "self._data": [
                    3968,
                    643,
                    5251,
                    3717,
                    518,
                    5253,
                    8458,
                    5261,
                    5778,
                    8979,
                    3223,
                    1945,
                    9370,
                    5403,
                    8604,
                    8988,
                    6432,
                    3361,
                    1955,
                    5283,
                    3750,
                    1447,
                    8615,
                    5289,
                    5294,
                    5299,
                    3508,
                    8888,
                    4538,
                    5830,
                    5320,
                    6473,
                    5323,
                    5966,
                    4560,
                    6481,
                    3544,
                    5465,
                    5725,
                    5476,
                    6502,
                    5992,
                    5612,
                    9200,
                    8433,
                    6515,
                    3572,
                    6013,
                    3582
                ],
                "np.prod": [
                    542
                ],
                "np": [
                    11136,
                    11138,
                    9994,
                    9749,
                    6934,
                    6935,
                    10080,
                    542,
                    8487,
                    9768,
                    3497,
                    3498,
                    6959,
                    6963,
                    8756,
                    10038,
                    6967,
                    10040,
                    10041,
                    8506,
                    5309,
                    6975,
                    9923,
                    10051,
                    10054,
                    4938,
                    8782,
                    10064,
                    7122,
                    7123,
                    10067,
                    8536,
                    5465,
                    7130,
                    8795,
                    7261,
                    9693,
                    7263,
                    9695,
                    10077,
                    7138,
                    7139,
                    9443,
                    9698,
                    1510,
                    8551,
                    10079,
                    6761,
                    11108,
                    11112,
                    11117,
                    8562,
                    11122,
                    11123,
                    11125,
                    1660,
                    11134
                ],
                "self.shape": [
                    4897,
                    3657,
                    8553,
                    8507,
                    542
                ],
                "FrameOrSeries": [
                    6028,
                    6033,
                    8087,
                    8094,
                    6047,
                    5152,
                    545,
                    5153,
                    8994,
                    6052,
                    8995,
                    550,
                    4662,
                    9148,
                    9149,
                    8896,
                    5839,
                    5846,
                    5728,
                    5731,
                    5741,
                    4721,
                    5747,
                    5620,
                    9205,
                    9212
                ],
                "labels": [
                    770,
                    771,
                    643,
                    4231,
                    4238,
                    3473,
                    4242,
                    3475,
                    4497,
                    4498,
                    4503,
                    4639,
                    4643,
                    3878,
                    4649,
                    3882,
                    4657,
                    3892,
                    3893,
                    3894,
                    951,
                    952,
                    3924,
                    3926,
                    3931,
                    3935,
                    3939,
                    3941,
                    3943,
                    3945,
                    636,
                    639
                ],
                "obj": [
                    640,
                    4514,
                    6009,
                    4495,
                    3890,
                    4507,
                    3894,
                    6008,
                    3897,
                    3899,
                    638,
                    639
                ],
                "obj.set_axis": [
                    639
                ],
                "self._data.set_axis": [
                    643
                ],
                "self._clear_item_cache": [
                    644,
                    5254,
                    3274,
                    3583,
                    3967
                ],
                "self._construct_axes_from_arguments": [
                    4452,
                    3884,
                    1071,
                    670,
                    1247
                ],
                "axes_names": [
                    673,
                    681
                ],
                "axes_numbers": [
                    674,
                    683
                ],
                "self._get_axis_number": [
                    10240,
                    4229,
                    3472,
                    7952,
                    1555,
                    8595,
                    4506,
                    9115,
                    7581,
                    1694,
                    928,
                    4896,
                    674,
                    1584,
                    949,
                    1079,
                    9912,
                    698,
                    699,
                    5952,
                    1345,
                    6728,
                    3916,
                    9932,
                    10194,
                    9173,
                    7254,
                    1754,
                    11102,
                    1635,
                    1254,
                    7658,
                    3948,
                    7149,
                    10223,
                    8177,
                    7411,
                    8312,
                    9343
                ],
                "self._AXIS_LEN": [
                    708,
                    1636,
                    1094,
                    678,
                    4519,
                    9135,
                    1585,
                    1278,
                    1695
                ],
                "new_axes": [
                    680,
                    713,
                    708,
                    688
                ],
                "self._construct_axes_dict_from": [
                    680
                ],
                "x": [
                    4647,
                    681,
                    4654,
                    9934,
                    9782,
                    9788
                ],
                "new_values": [
                    3522,
                    709,
                    711,
                    713,
                    683,
                    685,
                    688,
                    3508,
                    3515,
                    3516,
                    3519
                ],
                "self.values.transpose": [
                    683
                ],
                "self.values": [
                    5408,
                    5413,
                    709,
                    683,
                    7128,
                    5433
                ],
                "new_values.copy": [
                    685,
                    711
                ],
                "nv.validate_transpose": [
                    687
                ],
                "nv": [
                    11037,
                    687,
                    10995,
                    7252,
                    10997,
                    11059,
                    10999,
                    11161,
                    11098,
                    3357,
                    11039
                ],
                "self._constructor": [
                    8192,
                    11142,
                    1929,
                    6025,
                    8587,
                    8461,
                    6800,
                    5777,
                    6803,
                    9370,
                    8991,
                    3364,
                    1445,
                    5285,
                    6959,
                    688,
                    8624,
                    8509,
                    8894,
                    5829,
                    5320,
                    713,
                    5323,
                    4563,
                    5726,
                    5475,
                    5613,
                    9200,
                    3572,
                    7164,
                    6526
                ],
                "axis1": [
                    698
                ],
                "j": [
                    706,
                    709,
                    952,
                    699,
                    701
                ],
                "axis2": [
                    699
                ],
                "mapping": [
                    706,
                    708
                ],
                "mapping.get": [
                    708
                ],
                "range": [
                    1636,
                    708,
                    1094,
                    5607,
                    1585,
                    1278,
                    1695
                ],
                "self.values.swapaxes": [
                    709
                ],
                "new_labels": [
                    771,
                    772
                ],
                "labels.droplevel": [
                    771
                ],
                "self.set_axis": [
                    772
                ],
                "item": [
                    3557,
                    3559,
                    3213,
                    816,
                    817,
                    3542,
                    3223,
                    3544,
                    3545,
                    3546,
                    3547
                ],
                "result._reset_cacher": [
                    819
                ],
                "AttributeError": [
                    7586,
                    5222,
                    820,
                    7668,
                    5204
                ],
                "self._AXIS_NAMES": [
                    928,
                    1279,
                    1095
                ],
                "self.iloc": [
                    929,
                    3526,
                    5606,
                    4779,
                    4780,
                    4719,
                    8084,
                    8025,
                    3482
                ],
                "slice": [
                    931,
                    3947,
                    3565,
                    9135,
                    9136,
                    3478,
                    8921,
                    8922,
                    8924,
                    8925
                ],
                "self.axes": [
                    932,
                    1701,
                    1641,
                    1642,
                    4907,
                    1101,
                    1105,
                    1590,
                    1560,
                    8541
                ],
                "result._data.axes": [
                    951
                ],
                "result._data.set_axis": [
                    952
                ],
                "labels.swaplevel": [
                    952
                ],
                "errors": [
                    3938,
                    8804,
                    3944,
                    8619,
                    5612,
                    5585,
                    1106,
                    1076,
                    3924,
                    3894,
                    3926,
                    2491,
                    5597,
                    8766
                ],
                "kwargs.keys": [
                    4468,
                    1259,
                    1084
                ],
                "com.count_not_none": [
                    4519,
                    4630,
                    1087
                ],
                "com": [
                    1920,
                    10243,
                    1286,
                    4630,
                    4900,
                    4519,
                    5035,
                    1453,
                    8501,
                    1467,
                    3516,
                    8764,
                    1087,
                    9922,
                    1098,
                    1485,
                    8791,
                    3931,
                    1757,
                    11104,
                    3687,
                    3689,
                    8570
                ],
                "axes.values": [
                    4519,
                    1087
                ],
                "self._consolidate_inplace": [
                    3489,
                    1090,
                    5281,
                    6372,
                    4471,
                    5402,
                    5946,
                    3359
                ],
                "axes.get": [
                    1279,
                    1095
                ],
                "f": [
                    11009,
                    5252,
                    1286,
                    1288,
                    5263,
                    11169,
                    5283,
                    5284,
                    11047,
                    4649,
                    5289,
                    5290,
                    5294,
                    5295,
                    4657,
                    5299,
                    5300,
                    4025,
                    4027,
                    11069,
                    1098,
                    1113,
                    4084,
                    4086
                ],
                "com.get_rename_function": [
                    1098,
                    1286
                ],
                "baxis": [
                    1113,
                    4554,
                    1099,
                    4541
                ],
                "_get_level_number": [
                    1101
                ],
                "callable": [
                    1104
                ],
                "indexer": [
                    3203,
                    3204,
                    4502,
                    3480,
                    3482,
                    4508,
                    7585,
                    7589,
                    4540,
                    4547,
                    4548,
                    4553,
                    1105,
                    1106,
                    1108,
                    3935,
                    3938,
                    3941,
                    3948,
                    7662,
                    7671
                ],
                "get_indexer_for": [
                    1105
                ],
                "missing_labels": [
                    1107,
                    1110
                ],
                "label": [
                    3024,
                    1108,
                    7956
                ],
                "index": [
                    8960,
                    8963,
                    6788,
                    8976,
                    8977,
                    8980,
                    8989,
                    7583,
                    7585,
                    3491,
                    3492,
                    3879,
                    3883,
                    3884,
                    2350,
                    2486,
                    4540,
                    3006,
                    4543,
                    4546,
                    4552,
                    1108,
                    2646,
                    6761,
                    3179,
                    6763,
                    2157,
                    6766,
                    6767,
                    6768,
                    7660,
                    7662,
                    6778,
                    8958
                ],
                "result._data.rename_axis": [
                    1112
                ],
                "result._clear_item_cache": [
                    1115
                ],
                "result.__finalize__": [
                    1120,
                    9202,
                    9372,
                    3573
                ],
                "validate_bool_kwarg": [
                    6368,
                    4228,
                    3876,
                    1348,
                    6726,
                    5772,
                    5773,
                    1262,
                    5774,
                    5775,
                    5776,
                    7250,
                    8498,
                    8790,
                    5943,
                    5279
                ],
                "mapper": [
                    1264,
                    1266,
                    1267,
                    4087,
                    1270,
                    4086,
                    4027,
                    4028
                ],
                "non_mapper": [
                    1283,
                    1266,
                    1282,
                    1269
                ],
                "is_scalar": [
                    1282,
                    1924,
                    7268,
                    1512,
                    7272,
                    7273,
                    3504,
                    7152,
                    1266,
                    3507,
                    10258
                ],
                "is_list_like": [
                    6465,
                    1282,
                    6466,
                    5223,
                    6920,
                    6923,
                    6449,
                    6514,
                    1267,
                    6487,
                    7162,
                    3515,
                    6012,
                    7261,
                    7263,
                    5983
                ],
                "is_dict_like": [
                    6400,
                    6433,
                    1282,
                    6434,
                    6501,
                    5577,
                    6377,
                    1267,
                    6387,
                    6388,
                    6488
                ],
                "self._set_axis_name": [
                    1270
                ],
                "newnames": [
                    1288,
                    1289,
                    1284
                ],
                "curnames": [
                    1288,
                    1287
                ],
                "names": [
                    9734,
                    1287,
                    1641,
                    9752,
                    9742,
                    9748,
                    9717,
                    9781,
                    1560,
                    9785,
                    9786,
                    9788
                ],
                "result._set_axis_name": [
                    1289
                ],
                "rewrite_axis_style_signature": [
                    1122
                ],
                "idx": [
                    1346,
                    1350
                ],
                "set_names": [
                    1346
                ],
                "renamed": [
                    1352,
                    1349,
                    1350
                ],
                "renamed.set_axis": [
                    1350
                ],
                "all": [
                    6403,
                    4475,
                    8540,
                    1358
                ],
                "equals": [
                    3368,
                    8541,
                    1359
                ],
                "other._get_axis": [
                    8541,
                    1359
                ],
                "other": [
                    8448,
                    8450,
                    8325,
                    8327,
                    8587,
                    3855,
                    8464,
                    8592,
                    8338,
                    8466,
                    8603,
                    8606,
                    8482,
                    1445,
                    1447,
                    8360,
                    8616,
                    8362,
                    5165,
                    5166,
                    5167,
                    8366,
                    8368,
                    5170,
                    8380,
                    8764,
                    8766,
                    8398,
                    1359,
                    8273,
                    8530,
                    8533,
                    8279,
                    8535,
                    8536,
                    8282,
                    8541,
                    8799,
                    8292,
                    8421,
                    8295,
                    8551,
                    8297,
                    8425,
                    8553,
                    8429,
                    8561,
                    8562,
                    8437,
                    8566,
                    8439,
                    8313,
                    8315,
                    8572,
                    8573
                ],
                "self._data.equals": [
                    1447
                ],
                "other._data": [
                    1447
                ],
                "com.values_from_object": [
                    1920,
                    11104,
                    9922,
                    1485,
                    1453,
                    8570,
                    1467
                ],
                "is_bool_dtype": [
                    8519,
                    8523,
                    1454,
                    9755,
                    1468
                ],
                "arr": [
                    1475,
                    1478,
                    1485,
                    1486,
                    1455,
                    1461,
                    1464,
                    1469
                ],
                "operator.inv": [
                    1485,
                    1455
                ],
                "operator": [
                    1485,
                    1475,
                    1461,
                    1455
                ],
                "is_numeric_dtype": [
                    1457,
                    9757,
                    6766,
                    1471
                ],
                "is_timedelta64_dtype": [
                    1472,
                    1458,
                    6768,
                    9759
                ],
                "is_object_dtype": [
                    1473,
                    1459
                ],
                "operator.neg": [
                    1461
                ],
                "self.__array_wrap__": [
                    1464,
                    1486,
                    1478
                ],
                "is_period_arraylike": [
                    1468
                ],
                "operator.pos": [
                    1475
                ],
                "self.size": [
                    1481,
                    6429
                ],
                "__bool__": [
                    1494
                ],
                "__nonzero__": [
                    1494
                ],
                "self.squeeze": [
                    1509
                ],
                "np.bool_": [
                    3498,
                    11134,
                    1510
                ],
                "self.__nonzero__": [
                    1518
                ],
                "self.abs": [
                    1521
                ],
                "self.round": [
                    1524
                ],
                "decimals": [
                    1524
                ],
                "is_hashable": [
                    1640,
                    1589,
                    1559
                ],
                "self._is_label_reference": [
                    1561,
                    1697,
                    1613
                ],
                "other_axes": [
                    1699,
                    1636,
                    1642,
                    1708,
                    1585,
                    1590,
                    1695
                ],
                "any": [
                    6402,
                    3943,
                    1642,
                    4938,
                    6956,
                    4941,
                    1910,
                    1590,
                    6778
                ],
                "self._is_level_reference": [
                    1773,
                    1771,
                    1700,
                    1613
                ],
                "level_article": [
                    1646,
                    1655
                ],
                "level_type": [
                    1646,
                    1655
                ],
                "label_article": [
                    1656,
                    1650
                ],
                "label_type": [
                    1656,
                    1650
                ],
                "msg": [
                    8515,
                    8966,
                    8967,
                    8520,
                    8524,
                    9773,
                    9774,
                    8180,
                    8181,
                    1654,
                    8982,
                    1658,
                    8986
                ],
                "self._check_label_or_level_ambiguity": [
                    1698
                ],
                "_values": [
                    1699,
                    1701
                ],
                "self.xs": [
                    1699
                ],
                "get_level_values": [
                    1701
                ],
                "values.ndim": [
                    1706
                ],
                "multi_message": [
                    1722,
                    1716,
                    1709
                ],
                "label_axis_name": [
                    1721,
                    1718
                ],
                "np.ndarray": [
                    3497,
                    1660,
                    8551
                ],
                "keys": [
                    1771,
                    1773,
                    6414,
                    6416,
                    6450,
                    6451,
                    6452,
                    6421,
                    1757,
                    6398,
                    1759
                ],
                "com.maybe_make_list": [
                    1757
                ],
                "invalid_keys": [
                    1766,
                    1762,
                    1758
                ],
                "self._is_label_or_level_reference": [
                    1759
                ],
                "levels_to_drop": [
                    1793,
                    1771,
                    1782,
                    1783,
                    1790
                ],
                "labels_to_drop": [
                    1800,
                    1801,
                    1773,
                    1786,
                    1787
                ],
                "dropped": [
                    1793,
                    1797,
                    1801,
                    1803,
                    1778,
                    1783,
                    1787,
                    1791
                ],
                "dropped.reset_index": [
                    1783
                ],
                "dropped.drop": [
                    1801,
                    1787
                ],
                "dropped.columns": [
                    1793,
                    1797,
                    1791
                ],
                "dropped.columns.droplevel": [
                    1793
                ],
                "RangeIndex": [
                    1797
                ],
                "dropped.columns.size": [
                    1797
                ],
                "repr": [
                    6520,
                    1810,
                    6493
                ],
                "iter": [
                    1823
                ],
                "self._info_axis": [
                    1857,
                    5218,
                    3555,
                    5188,
                    1861,
                    1837,
                    5239,
                    1848,
                    5465,
                    1823
                ],
                "h": [
                    1848,
                    1849
                ],
                "Appender": [
                    7043,
                    7047,
                    10255,
                    11159,
                    11032,
                    8743,
                    5033,
                    11055,
                    8881,
                    9909,
                    6711,
                    1851,
                    10300,
                    8257,
                    8769,
                    10306,
                    10183,
                    7113,
                    7117,
                    2127,
                    6358,
                    11096,
                    10984,
                    10221,
                    10228,
                    9980
                ],
                "items.__doc__": [
                    1851
                ],
                "items": [
                    4641,
                    4643,
                    5476,
                    6413,
                    4630,
                    1851,
                    6397,
                    6398
                ],
                "__array_priority__": [
                    1917
                ],
                "lib.item_from_zerodim": [
                    1923
                ],
                "lib": [
                    1923
                ],
                "self._construct_axes_dict": [
                    11105,
                    1928,
                    8297,
                    8587,
                    8509
                ],
                "meta": [
                    1966,
                    1967,
                    1973,
                    1943,
                    1949
                ],
                "self._metadata": [
                    5211,
                    1966,
                    5169,
                    1943,
                    1947,
                    5183
                ],
                "self._typ": [
                    1946
                ],
                "self.attrs": [
                    1948,
                    5167
                ],
                "state": [
                    1954,
                    1955,
                    1956,
                    1957,
                    1959,
                    1968,
                    1969,
                    1972,
                    1977,
                    1978,
                    1979
                ],
                "typ": [
                    1957,
                    1958
                ],
                "state.get": [
                    1957,
                    1959
                ],
                "self._internal_names": [
                    1966
                ],
                "state.items": [
                    1972
                ],
                "self._unpickle_series_compat": [
                    1977,
                    1979
                ],
                "self._item_cache": [
                    3277,
                    3721,
                    3541,
                    1981
                ],
                "prepr": [
                    1989,
                    1990
                ],
                "join": [
                    8450,
                    1989,
                    8328,
                    8425,
                    8362,
                    10316,
                    8301,
                    8368,
                    8439,
                    8283,
                    8316
                ],
                "map": [
                    1989
                ],
                "pprint_thing": [
                    1989
                ],
                "config.get_option": [
                    3649,
                    1997,
                    2990,
                    2992,
                    2994,
                    2996,
                    2998,
                    2007,
                    2008
                ],
                "config": [
                    2336,
                    3649,
                    1997,
                    2990,
                    2992,
                    2994,
                    2996,
                    2998,
                    2007,
                    2008
                ],
                "self.to_latex": [
                    1998
                ],
                "self.head": [
                    2008
                ],
                "payload": [
                    2009,
                    2012
                ],
                "json.loads": [
                    2009
                ],
                "json": [
                    2009,
                    2339
                ],
                "data.to_json": [
                    2010
                ],
                "collections.OrderedDict": [
                    2010
                ],
                "collections": [
                    2010
                ],
                "df": [
                    3168,
                    2147,
                    2152,
                    8296,
                    8300,
                    8278,
                    8281,
                    3163
                ],
                "ABCDataFrame": [
                    6016,
                    2147,
                    8517,
                    5223,
                    6381,
                    4911,
                    8313,
                    3163
                ],
                "self.to_frame": [
                    3163,
                    2147,
                    2988
                ],
                "formatter": [
                    3015,
                    2151,
                    2162,
                    3189,
                    3000,
                    3192,
                    3167
                ],
                "ExcelFormatter": [
                    2151
                ],
                "na_rep": [
                    2153,
                    3004,
                    3175
                ],
                "columns": [
                    3879,
                    3177,
                    2154,
                    3883,
                    3884,
                    3002
                ],
                "header": [
                    3178,
                    2155,
                    3005
                ],
                "float_format": [
                    3008,
                    3176,
                    2156
                ],
                "index_label": [
                    3180,
                    2158,
                    2647
                ],
                "merge_cells": [
                    2159
                ],
                "inf_rep": [
                    2160
                ],
                "formatter.write": [
                    2162
                ],
                "excel_writer": [
                    2163
                ],
                "sheet_name": [
                    2164
                ],
                "startrow": [
                    2165
                ],
                "startcol": [
                    2166
                ],
                "freeze_panes": [
                    2167
                ],
                "engine": [
                    2168
                ],
                "FilePathOrBuffer": [
                    3029,
                    2173
                ],
                "Callable": [
                    2179,
                    3534
                ],
                "JSONSerializable": [
                    2179
                ],
                "date_format": [
                    2343,
                    3184,
                    2331,
                    2332,
                    2333,
                    2334
                ],
                "orient": [
                    2331,
                    2342
                ],
                "config.is_nonnegative_int": [
                    2336
                ],
                "indent": [
                    2336,
                    2337,
                    2351
                ],
                "json.to_json": [
                    2339
                ],
                "path_or_buf": [
                    3169,
                    2340,
                    2478,
                    3191
                ],
                "double_precision": [
                    2344
                ],
                "force_ascii": [
                    2345
                ],
                "date_unit": [
                    2346
                ],
                "default_handler": [
                    2347
                ],
                "lines": [
                    2348
                ],
                "compression": [
                    2712,
                    3173,
                    2349
                ],
                "Union": [
                    3034,
                    3036,
                    2364,
                    3039
                ],
                "pytables.to_hdf": [
                    2477
                ],
                "pytables": [
                    2477
                ],
                "mode": [
                    2481,
                    3181
                ],
                "complevel": [
                    2482
                ],
                "complib": [
                    2483
                ],
                "append": [
                    2484
                ],
                "format": [
                    10913,
                    10917,
                    10887,
                    4084,
                    2485,
                    4025
                ],
                "min_itemsize": [
                    2487
                ],
                "nan_rep": [
                    2488
                ],
                "dropna": [
                    2489
                ],
                "data_columns": [
                    2490
                ],
                "encoding": [
                    3172,
                    3019,
                    2492
                ],
                "sql.to_sql": [
                    2640
                ],
                "sql": [
                    2640
                ],
                "con": [
                    2643
                ],
                "schema": [
                    2644
                ],
                "if_exists": [
                    2645
                ],
                "chunksize": [
                    2648,
                    3182
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    2657
                ],
                "pickle": [
                    2657
                ],
                "to_pickle": [
                    2712
                ],
                "path": [
                    2712
                ],
                "protocol": [
                    2712
                ],
                "clipboards.to_clipboard": [
                    2770
                ],
                "clipboards": [
                    2770
                ],
                "excel": [
                    2770
                ],
                "sep": [
                    2770,
                    3171
                ],
                "xarray": [
                    2848,
                    2851,
                    2853
                ],
                "import_optional_dependency": [
                    2848
                ],
                "xarray.DataArray.from_series": [
                    2851
                ],
                "xarray.DataArray": [
                    2851
                ],
                "xarray.Dataset.from_dataframe": [
                    2853
                ],
                "xarray.Dataset": [
                    2853
                ],
                "longtable": [
                    3018,
                    2989,
                    2990
                ],
                "escape": [
                    2992,
                    3012,
                    2991
                ],
                "multicolumn": [
                    2993,
                    2994,
                    3020
                ],
                "multicolumn_format": [
                    2995,
                    2996,
                    3021
                ],
                "multirow": [
                    3022,
                    2997,
                    2998
                ],
                "DataFrameFormatter": [
                    3000
                ],
                "col_space": [
                    3003
                ],
                "formatters": [
                    3007
                ],
                "bold_rows": [
                    3009
                ],
                "sparsify": [
                    3010
                ],
                "index_names": [
                    3011
                ],
                "decimal": [
                    3187,
                    3013
                ],
                "formatter.to_latex": [
                    3015
                ],
                "buf": [
                    3016
                ],
                "column_format": [
                    3017
                ],
                "caption": [
                    3023
                ],
                "Substitution": [
                    2855,
                    11054,
                    11023,
                    11088,
                    11150,
                    9970,
                    10975
                ],
                "fmt.return_docstring": [
                    2855
                ],
                "fmt": [
                    2855
                ],
                "Sequence": [
                    3033,
                    3036
                ],
                "CSVFormatter": [
                    3167
                ],
                "line_terminator": [
                    3170
                ],
                "quoting": [
                    3174
                ],
                "quotechar": [
                    3183
                ],
                "doublequote": [
                    3185
                ],
                "escapechar": [
                    3186
                ],
                "formatter.save": [
                    3189
                ],
                "formatter.path_or_buf.getvalue": [
                    3192
                ],
                "formatter.path_or_buf": [
                    3192
                ],
                "_indexer": [
                    3203,
                    3204,
                    11181,
                    11182,
                    3478,
                    3479,
                    3480
                ],
                "functools.partial": [
                    4025,
                    3203,
                    4084
                ],
                "functools": [
                    4025,
                    3203,
                    4084
                ],
                "indexer.__doc__": [
                    3204
                ],
                "self._cacher": [
                    3218,
                    3259,
                    3213
                ],
                "weakref.ref": [
                    3213,
                    3590
                ],
                "weakref": [
                    3213,
                    3590
                ],
                "cacher": [
                    3232,
                    3233,
                    3234,
                    3235,
                    3264,
                    3213,
                    3252,
                    3253,
                    3254
                ],
                "hasattr": [
                    9347,
                    9930,
                    3217,
                    8530,
                    8022,
                    8505,
                    8794,
                    9177
                ],
                "self._data.set": [
                    3582,
                    3223
                ],
                "ref": [
                    3264,
                    3607,
                    3589,
                    3590,
                    3254,
                    3606,
                    3258
                ],
                "ref._maybe_cache_changed": [
                    3264
                ],
                "AssertionError": [
                    3265,
                    6370,
                    3923,
                    3934
                ],
                "verify_is_copy": [
                    3969,
                    3270
                ],
                "self._check_setitem_copy": [
                    3608,
                    3611,
                    3271
                ],
                "clear": [
                    3273
                ],
                "self._item_cache.clear": [
                    3277
                ],
                "nv.validate_take": [
                    3357
                ],
                "new_data": [
                    6017,
                    6785,
                    6022,
                    6025,
                    6800,
                    6801,
                    6803,
                    8979,
                    8980,
                    8604,
                    8988,
                    8989,
                    8991,
                    6432,
                    3361,
                    3364,
                    8612,
                    8615,
                    8624,
                    6454,
                    8888,
                    4538,
                    8894,
                    4551,
                    6473,
                    5966,
                    4560,
                    4561,
                    6481,
                    4563,
                    6502,
                    5992,
                    6506,
                    5612,
                    5613,
                    6515,
                    6524,
                    6013,
                    6526
                ],
                "self._data.take": [
                    3361
                ],
                "indices": [
                    3362
                ],
                "is_copy": [
                    3577,
                    3578,
                    3367
                ],
                "result._get_axis": [
                    3368
                ],
                "result._set_is_copy": [
                    3369,
                    3578,
                    3531
                ],
                "loc": [
                    3475,
                    3479,
                    6944,
                    6945,
                    6946,
                    3493,
                    6949,
                    3495,
                    6950,
                    3497,
                    3498,
                    3499,
                    6951,
                    3502,
                    3504,
                    3505,
                    3507,
                    3508,
                    3521,
                    3526
                ],
                "new_ax": [
                    3475,
                    3483
                ],
                "labels.get_loc_level": [
                    3475
                ],
                "drop_level": [
                    3475,
                    3493
                ],
                "result._get_axis_name": [
                    3483
                ],
                "new_index": [
                    3493,
                    3527,
                    3505,
                    4502,
                    4508
                ],
                "self.index.get_loc_level": [
                    3493
                ],
                "self.index.get_loc": [
                    3495
                ],
                "loc.dtype": [
                    3498
                ],
                "inds": [
                    3499,
                    3500
                ],
                "loc.nonzero": [
                    3499
                ],
                "self.take": [
                    7589,
                    3559,
                    3500,
                    3502,
                    4978,
                    7671,
                    6973
                ],
                "self._data.fast_xs": [
                    3508
                ],
                "com.maybe_box_datetimelike": [
                    3516
                ],
                "self._constructor_sliced": [
                    3518
                ],
                "self.columns": [
                    3520,
                    8448,
                    8449,
                    5607,
                    6919,
                    8297,
                    8366,
                    8367,
                    9680,
                    5617,
                    3698,
                    6963,
                    3700,
                    6934,
                    6967,
                    3709,
                    8446
                ],
                "new_values.dtype": [
                    3522
                ],
                "result.index": [
                    3527
                ],
                "result._is_view": [
                    3577,
                    3531
                ],
                "_xs": [
                    3534
                ],
                "xs": [
                    3534
                ],
                "cache": [
                    3546,
                    3541,
                    3542
                ],
                "res": [
                    6435,
                    6440,
                    6446,
                    6803,
                    6805,
                    3542,
                    3543,
                    6806,
                    3545,
                    3546,
                    3547,
                    3550,
                    3551
                ],
                "cache.get": [
                    3542
                ],
                "self._data.get": [
                    3544
                ],
                "self._box_item_values": [
                    3545
                ],
                "res._set_as_cached": [
                    3547
                ],
                "res._is_copy": [
                    3550
                ],
                "self._is_copy": [
                    3587,
                    3590,
                    3655,
                    3592,
                    3646,
                    3656,
                    3658,
                    3662,
                    3663,
                    3610,
                    3550
                ],
                "ax.is_unique": [
                    3556
                ],
                "lower": [
                    7136,
                    7267,
                    7268,
                    3557,
                    7269,
                    3559,
                    3560,
                    7272,
                    7275,
                    7278,
                    7280,
                    7122,
                    7262,
                    7261,
                    7134,
                    7135
                ],
                "self._get_item_cache": [
                    3557
                ],
                "self._info_axis_number": [
                    3559
                ],
                "self._data.get_slice": [
                    3572
                ],
                "slobj": [
                    3572
                ],
                "self._is_view": [
                    3605
                ],
                "self._is_cached": [
                    3605
                ],
                "self._get_cacher": [
                    3606
                ],
                "ref._is_mixed_type": [
                    3607
                ],
                "force": [
                    3646
                ],
                "r": [
                    3656,
                    3657,
                    4643
                ],
                "gc.get_referents": [
                    3657
                ],
                "gc": [
                    3657
                ],
                "r.shape": [
                    3657
                ],
                "t": [
                    3687,
                    3689,
                    3663,
                    3665,
                    3666,
                    3676
                ],
                "com.SettingWithCopyError": [
                    3687
                ],
                "warnings.warn": [
                    5224,
                    3689
                ],
                "warnings": [
                    5224,
                    3689
                ],
                "com.SettingWithCopyWarning": [
                    3689
                ],
                "stacklevel": [
                    3689
                ],
                "deleted": [
                    3712,
                    3713,
                    3695
                ],
                "maybe_shortcut": [
                    3704,
                    3697,
                    3700
                ],
                "self.columns._engine": [
                    3700
                ],
                "col": [
                    5600,
                    3709,
                    5594,
                    5597,
                    3710,
                    3711
                ],
                "self._data.delete": [
                    3717
                ],
                "default": [
                    3745
                ],
                "self._data.is_view": [
                    3750
                ],
                "other._construct_axes_dict": [
                    8279,
                    3855
                ],
                "tolerance": [
                    4457,
                    4490,
                    3860,
                    4503
                ],
                "self.reindex": [
                    4643,
                    4243,
                    3927,
                    3863
                ],
                "_": [
                    9779,
                    3884,
                    8535,
                    8503
                ],
                "obj._drop_axis": [
                    3894
                ],
                "axis.is_unique": [
                    3920
                ],
                "new_axis": [
                    4242,
                    4243,
                    3924,
                    3926,
                    3927
                ],
                "axis.drop": [
                    3924,
                    3926
                ],
                "ensure_object": [
                    3931
                ],
                "com.index_labels_to_array": [
                    3931
                ],
                "isin": [
                    3935
                ],
                "axis.get_level_values": [
                    3935
                ],
                "indexer.all": [
                    3938
                ],
                "axis.isin": [
                    3941
                ],
                "labels_missing": [
                    3944,
                    3943
                ],
                "axis.get_indexer_for": [
                    3943
                ],
                "slicer": [
                    3947,
                    3948,
                    3950,
                    9135,
                    9136,
                    9137
                ],
                "self.loc": [
                    4650,
                    3950,
                    9137,
                    4658,
                    8027
                ],
                "self._reset_cache": [
                    3966
                ],
                "self._maybe_update_cacher": [
                    3969
                ],
                "self.rename": [
                    4028,
                    4087
                ],
                "suffix": [
                    4084
                ],
                "sort_index": [
                    4240,
                    4242,
                    4238
                ],
                "labels.argsort": [
                    4238
                ],
                "ascending": [
                    8188,
                    4239
                ],
                "labels.take": [
                    4242
                ],
                "missing.clean_reindex_fill_method": [
                    4453
                ],
                "fill_value": [
                    8320,
                    8383,
                    8512,
                    8513,
                    4486,
                    4458,
                    4555,
                    4490,
                    7532,
                    8332,
                    8305,
                    8889,
                    8469,
                    8471,
                    8472,
                    8377,
                    4509,
                    8287
                ],
                "identical": [
                    4476
                ],
                "self._needs_reindex_multi": [
                    4485
                ],
                "self._reindex_multi": [
                    4486
                ],
                "self._reindex_axes": [
                    4489
                ],
                "ax.reindex": [
                    4502
                ],
                "obj._reindex_with_indexers": [
                    4507
                ],
                "self._is_mixed_type": [
                    5305,
                    4522,
                    5956
                ],
                "sorted": [
                    4539,
                    9782
                ],
                "reindexers.keys": [
                    4539
                ],
                "reindexers": [
                    8372,
                    8374,
                    8377,
                    4539,
                    4540
                ],
                "ensure_index": [
                    4546
                ],
                "ensure_int64": [
                    4548
                ],
                "new_data.reindex_indexer": [
                    4551
                ],
                "allow_dups": [
                    4556
                ],
                "new_data.copy": [
                    4561
                ],
                "nkw": [
                    4630,
                    4631
                ],
                "like": [
                    4644,
                    4630,
                    4647
                ],
                "regex": [
                    4630,
                    6424,
                    4651,
                    6444,
                    4656,
                    6459,
                    6477,
                    6482,
                    6486,
                    6487,
                    6488,
                    6493,
                    6496,
                    6369,
                    6377,
                    6511,
                    6388,
                    6516,
                    6394,
                    6395
                ],
                "ensure_str": [
                    4654,
                    4647
                ],
                "labels.map": [
                    4649,
                    4657
                ],
                "matcher.search": [
                    4654
                ],
                "matcher": [
                    4656,
                    4654
                ],
                "re.compile": [
                    4656
                ],
                "re": [
                    4656
                ],
                "n": [
                    4964,
                    4966,
                    4967,
                    4968,
                    4778,
                    4780,
                    4972,
                    4719,
                    4977,
                    4957,
                    4958
                ],
                "self._stat_axis_number": [
                    9985,
                    11043,
                    11100,
                    7657,
                    11063,
                    9114,
                    11003,
                    7580,
                    4894
                ],
                "axis_length": [
                    4897,
                    4977,
                    4933,
                    4967
                ],
                "rs": [
                    9920,
                    9923,
                    4900,
                    9924,
                    4977,
                    9918,
                    9919
                ],
                "com.random_state": [
                    4900
                ],
                "random_state": [
                    4900
                ],
                "weights": [
                    4931,
                    4933,
                    4903,
                    4906,
                    4907,
                    4938,
                    4941,
                    4910,
                    4945,
                    4914,
                    4977,
                    4948,
                    4949,
                    4950,
                    4954
                ],
                "ABCSeries": [
                    6913,
                    8292,
                    8325,
                    8357,
                    7163,
                    4906,
                    5996,
                    8274,
                    7162,
                    5979,
                    8413
                ],
                "weights.reindex": [
                    4907
                ],
                "np.inf": [
                    10040,
                    4938,
                    10079
                ],
                "weights.fillna": [
                    4945
                ],
                "weights.sum": [
                    4948,
                    4949,
                    4950
                ],
                "weights.values": [
                    4954
                ],
                "frac": [
                    4964,
                    4966,
                    4967,
                    4968,
                    4957,
                    4959
                ],
                "replace": [
                    6440,
                    4977,
                    4959
                ],
                "round": [
                    4967
                ],
                "locs": [
                    4977,
                    4978,
                    6969,
                    6972,
                    6973
                ],
                "rs.choice": [
                    4977
                ],
                "com.pipe": [
                    5035
                ],
                "func": [
                    10257,
                    5035
                ],
                "dedent": [
                    5037
                ],
                "NDFrame": [
                    11182,
                    5165,
                    8502
                ],
                "other.attrs": [
                    5166,
                    5167
                ],
                "self._internal_names_set": [
                    5209,
                    5182
                ],
                "self._accessors": [
                    5184
                ],
                "object.__getattribute__": [
                    5186,
                    5202,
                    5190
                ],
                "self._info_axis._can_hold_identifiers_and_holds_name": [
                    5188
                ],
                "existing": [
                    5216,
                    5215
                ],
                "additions": [
                    5242,
                    5237
                ],
                "c": [
                    6436,
                    6437,
                    6440,
                    8297,
                    6442,
                    5238,
                    5239,
                    5240,
                    8279
                ],
                "self._info_axis.unique": [
                    5239
                ],
                "c.isidentifier": [
                    5240
                ],
                "union": [
                    5242
                ],
                "_dir_additions": [
                    5242
                ],
                "super": [
                    5242
                ],
                "blocks_before": [
                    5251,
                    5253
                ],
                "self._data.blocks": [
                    5251,
                    5253
                ],
                "self._data.consolidate": [
                    5283,
                    5261
                ],
                "self._protect_consolidate": [
                    5284,
                    5290,
                    5295,
                    5263,
                    5300
                ],
                "cons_data": [
                    5284,
                    5285
                ],
                "self._data.is_mixed_type": [
                    5289
                ],
                "self._data.is_numeric_mixed_type": [
                    5294
                ],
                "self._data.is_datelike_mixed_type": [
                    5299
                ],
                "self._is_numeric_mixed_type": [
                    5306
                ],
                "is_float": [
                    5309
                ],
                "np.isnan": [
                    5309
                ],
                "self._data.get_numeric_data": [
                    5320
                ],
                "self._data.get_bool_data": [
                    5323
                ],
                "self._data.as_array": [
                    5403
                ],
                "self._AXIS_REVERSED": [
                    8610,
                    5403
                ],
                "Series": [
                    5465,
                    6934,
                    6967
                ],
                "self._data.get_dtypes": [
                    5465
                ],
                "np.object_": [
                    5465
                ],
                "self._data.to_dict": [
                    5476
                ],
                "self.name": [
                    5584,
                    5579,
                    6959
                ],
                "new_type": [
                    5584,
                    5585
                ],
                "self.astype": [
                    5585
                ],
                "col_name": [
                    5587,
                    5588,
                    5594,
                    5595,
                    5597
                ],
                "dtype.keys": [
                    5587
                ],
                "results": [
                    5600,
                    5605,
                    5616,
                    5593,
                    5596
                ],
                "results.append": [
                    5600,
                    5596
                ],
                "col.astype": [
                    5597
                ],
                "col.copy": [
                    5600
                ],
                "is_extension_array_dtype": [
                    5602
                ],
                "astype": [
                    5606
                ],
                "self._data.astype": [
                    5612
                ],
                "pd.concat": [
                    5616,
                    9788
                ],
                "result.columns": [
                    5617
                ],
                "self._data.copy": [
                    8979,
                    8988,
                    5725
                ],
                "deep": [
                    5729,
                    5725
                ],
                "datetime": [
                    5779,
                    5772
                ],
                "numeric": [
                    5780,
                    5773
                ],
                "timedelta": [
                    5781,
                    5774,
                    9335
                ],
                "coerce": [
                    5782,
                    5775
                ],
                "self._data.convert": [
                    5778,
                    5830
                ],
                "validate_fillna_kwargs": [
                    5944
                ],
                "T": [
                    6800,
                    5959
                ],
                "self.T.fillna": [
                    5959
                ],
                "self.T": [
                    6734,
                    5959
                ],
                "result._data.downcast": [
                    5962
                ],
                "self._data.interpolate": [
                    5966
                ],
                "downcast": [
                    5993,
                    6794,
                    6062,
                    5972,
                    6009,
                    6043,
                    6014
                ],
                "create_series_with_explicit_dtype": [
                    5980
                ],
                "self._data.fillna": [
                    5992,
                    6013
                ],
                "value.items": [
                    6504,
                    6005
                ],
                "obj.fillna": [
                    6009
                ],
                "self.where": [
                    6017,
                    8797,
                    7167
                ],
                "self.notna": [
                    6017
                ],
                "self.fillna": [
                    6042,
                    9916,
                    6061
                ],
                "is_bool": [
                    6369
                ],
                "self.apply": [
                    6382
                ],
                "_single_replace": [
                    6385,
                    6383
                ],
                "to_replace.items": [
                    6450,
                    6436,
                    6397
                ],
                "are_mappings": [
                    6400,
                    6402,
                    6403
                ],
                "to_rep_dict": [
                    6416,
                    6410,
                    6419
                ],
                "value_dict": [
                    6419,
                    6417,
                    6411
                ],
                "v.items": [
                    6414
                ],
                "self.replace": [
                    6495,
                    6423
                ],
                "src": [
                    6436,
                    6441,
                    6450,
                    6452,
                    6455
                ],
                "keys_len": [
                    6451,
                    6453
                ],
                "convert": [
                    6460,
                    6453
                ],
                "new_data.replace": [
                    6506,
                    6454
                ],
                "self._data.replace_list": [
                    6473
                ],
                "self._data.replace": [
                    6481,
                    6515
                ],
                "is_re_compilable": [
                    6486
                ],
                "_maybe_transposed_self": [
                    6784,
                    6789,
                    6761,
                    6763,
                    6732,
                    6734,
                    6737,
                    6739,
                    6744,
                    6749,
                    6750
                ],
                "_maybe_transposed_self._get_axis_number": [
                    6737
                ],
                "_maybe_transposed_self.ndim": [
                    6739
                ],
                "alt_ax": [
                    6761,
                    6763,
                    6740,
                    6742
                ],
                "_maybe_transposed_self.index": [
                    6744
                ],
                "get": [
                    6749
                ],
                "_maybe_transposed_self._data.get_dtype_counts": [
                    6749
                ],
                "_maybe_transposed_self._data": [
                    6784,
                    6749
                ],
                "_maybe_transposed_self.T": [
                    6750
                ],
                "np.arange": [
                    6761
                ],
                "_maybe_transposed_self._get_axis": [
                    6761,
                    6763
                ],
                "methods": [
                    6770,
                    6764
                ],
                "is_numeric_or_datetime": [
                    6770,
                    6765
                ],
                "is_datetime64_any_dtype": [
                    9725,
                    6767
                ],
                "isna": [
                    9922,
                    6949,
                    7045,
                    7049,
                    11115,
                    6956,
                    11121,
                    7122,
                    7123,
                    7157,
                    11135,
                    7128,
                    6778,
                    7261,
                    7263
                ],
                "data.interpolate": [
                    6785
                ],
                "limit_direction": [
                    6791
                ],
                "limit_area": [
                    6792
                ],
                "T._data": [
                    6800
                ],
                "res.T": [
                    6805
                ],
                "where": [
                    6944,
                    6953,
                    6954,
                    6923,
                    6927,
                    6959,
                    6930,
                    6963,
                    6934,
                    6967,
                    6969,
                    6907,
                    6908,
                    6974
                ],
                "Timestamp": [
                    9728,
                    9738,
                    9739,
                    6908
                ],
                "self.index.is_monotonic": [
                    6910
                ],
                "is_series": [
                    8416,
                    6913,
                    6914,
                    8357,
                    6956,
                    6958,
                    8366,
                    6931,
                    8371,
                    8475,
                    8413,
                    6943
                ],
                "subset": [
                    7136,
                    6915,
                    6918,
                    6919,
                    6920,
                    6921,
                    6956,
                    7157,
                    7167,
                    7132,
                    7133,
                    7135
                ],
                "is_list": [
                    6976,
                    6954,
                    6923,
                    6924,
                    6960
                ],
                "start": [
                    6925,
                    6928,
                    6930,
                    8083,
                    8084
                ],
                "PeriodIndex": [
                    8976,
                    6926
                ],
                "ordinal": [
                    6927
                ],
                "Period": [
                    6927
                ],
                "self.index.freq": [
                    6927
                ],
                "start.ordinal": [
                    6928
                ],
                "np.float64": [
                    6934
                ],
                "np.nan": [
                    10080,
                    7139,
                    9923,
                    10054,
                    8487,
                    6935,
                    8782,
                    6959,
                    6963,
                    8756,
                    9749,
                    10067,
                    6967,
                    8536,
                    10041,
                    6975
                ],
                "self.index.searchsorted": [
                    6944,
                    8024,
                    8083
                ],
                "self._values": [
                    6948,
                    10295
                ],
                "nulls": [
                    6969,
                    6956,
                    6957
                ],
                "self.isna": [
                    6956
                ],
                "nulls.all": [
                    6957
                ],
                "DataFrame": [
                    6963
                ],
                "self.index.asof_locs": [
                    6969
                ],
                "nulls.values": [
                    6969
                ],
                "data.index": [
                    6974
                ],
                "data.loc": [
                    6975
                ],
                "data.iloc": [
                    6976
                ],
                "notna": [
                    7115,
                    8469,
                    7119
                ],
                "np.any": [
                    7138,
                    7122,
                    7123,
                    7261,
                    7263
                ],
                "upper": [
                    7264,
                    7267,
                    7268,
                    7269,
                    7273,
                    7275,
                    7282,
                    7123,
                    7286,
                    7131,
                    7132,
                    7133,
                    7263
                ],
                "np.errstate": [
                    7130
                ],
                "self.to_numpy": [
                    7132,
                    7135
                ],
                "result.where": [
                    7136,
                    7133
                ],
                "threshold": [
                    7152,
                    7154,
                    7155,
                    7157,
                    7162,
                    7164,
                    7166,
                    7167
                ],
                "is_number": [
                    7152,
                    7273,
                    7272
                ],
                "method.__name__": [
                    7153
                ],
                "self._clip_with_scalar": [
                    7154,
                    7155,
                    7275
                ],
                "_align_method_FRAME": [
                    7166
                ],
                "nv.validate_clip_with_axis": [
                    7252
                ],
                "min": [
                    7269
                ],
                "max": [
                    11117,
                    7269
                ],
                "result._clip_with_one_bound": [
                    7285,
                    7279
                ],
                "self.ge": [
                    7280
                ],
                "self.le": [
                    7286
                ],
                "by": [
                    7409,
                    7415
                ],
                "get_groupby": [
                    7413
                ],
                "as_index": [
                    7418
                ],
                "sort": [
                    7419
                ],
                "group_keys": [
                    7420
                ],
                "squeeze": [
                    7421
                ],
                "observed": [
                    7422
                ],
                "asfreq": [
                    7526
                ],
                "freq": [
                    8960,
                    9921,
                    8962,
                    8963,
                    8965,
                    7528,
                    9737,
                    8972,
                    8973,
                    8983,
                    9743,
                    8978,
                    8887,
                    9723,
                    8892,
                    8989,
                    9918,
                    8959
                ],
                "how": [
                    7530,
                    10295
                ],
                "normalize": [
                    7531
                ],
                "index.indexer_at_time": [
                    7585
                ],
                "time": [
                    7585
                ],
                "asof": [
                    7585
                ],
                "index.indexer_between_time": [
                    7662
                ],
                "start_time": [
                    7663
                ],
                "end_time": [
                    7664
                ],
                "include_start": [
                    7665
                ],
                "include_end": [
                    7666
                ],
                "resample": [
                    7953
                ],
                "rule": [
                    7955
                ],
                "closed": [
                    10205,
                    10216,
                    7957
                ],
                "kind": [
                    7959
                ],
                "loffset": [
                    7960
                ],
                "convention": [
                    7961
                ],
                "base": [
                    7962
                ],
                "on": [
                    10214,
                    7963,
                    10203
                ],
                "DatetimeIndex": [
                    9184,
                    8074,
                    8012,
                    9354
                ],
                "offset": [
                    8080,
                    8018,
                    8019,
                    8082,
                    8022
                ],
                "to_offset": [
                    8080,
                    8977,
                    8018,
                    8973
                ],
                "end_date": [
                    8024,
                    8019,
                    8023
                ],
                "end": [
                    8024,
                    8025,
                    8027,
                    8019
                ],
                "offset.isAnchored": [
                    8022
                ],
                "start_date": [
                    8082,
                    8083
                ],
                "na_option": [
                    8179,
                    8189
                ],
                "ranks": [
                    8184,
                    8192,
                    8193
                ],
                "algos.rank": [
                    8184
                ],
                "algos": [
                    8184
                ],
                "data.values": [
                    8185
                ],
                "pct": [
                    8190
                ],
                "data._construct_axes_dict": [
                    8192
                ],
                "ranks.__finalize__": [
                    8193
                ],
                "numeric_only": [
                    11013,
                    8197,
                    11047,
                    8201,
                    8203,
                    11069
                ],
                "ranker": [
                    8208,
                    8199
                ],
                "self._get_numeric_data": [
                    8204,
                    9989
                ],
                "missing.clean_fill_method": [
                    8271
                ],
                "broadcast_axis": [
                    8273
                ],
                "other.ndim": [
                    8273,
                    8533
                ],
                "cons": [
                    8296,
                    8277,
                    8278,
                    8295
                ],
                "self._constructor_expanddim": [
                    8277
                ],
                "other.columns": [
                    8368,
                    8366,
                    8279
                ],
                "df._align_frame": [
                    8281
                ],
                "fill_axis": [
                    8290,
                    8323,
                    8388,
                    8389,
                    8335,
                    8308,
                    8471
                ],
                "other._constructor_expanddim": [
                    8295
                ],
                "self._align_frame": [
                    8314,
                    8299
                ],
                "self._align_series": [
                    8326
                ],
                "join_index": [
                    8449,
                    8454,
                    8466,
                    8478,
                    8479,
                    8480,
                    8353,
                    8361,
                    8372,
                    8374,
                    8381,
                    8394,
                    8395,
                    8396,
                    8422,
                    8424,
                    8428,
                    8429,
                    8435,
                    8438,
                    8443,
                    8446
                ],
                "join_columns": [
                    8353,
                    8381,
                    8374,
                    8367
                ],
                "ilidx": [
                    8361,
                    8354,
                    8372,
                    8374
                ],
                "iridx": [
                    8361,
                    8354,
                    8381
                ],
                "clidx": [
                    8355,
                    8374,
                    8367
                ],
                "cridx": [
                    8355,
                    8381,
                    8367
                ],
                "self.index.equals": [
                    8360,
                    8437,
                    8421
                ],
                "other.index": [
                    8448,
                    8450,
                    8421,
                    8360,
                    8425,
                    8362,
                    8437,
                    8439
                ],
                "self.index.join": [
                    8424,
                    8361,
                    8438
                ],
                "self.columns.equals": [
                    8448,
                    8366
                ],
                "self.columns.join": [
                    8449,
                    8367
                ],
                "left": [
                    8482,
                    8388,
                    8392,
                    8393,
                    8395,
                    8428,
                    8461,
                    8398,
                    8471,
                    8376,
                    8476,
                    8477,
                    8479
                ],
                "self._reindex_with_indexers": [
                    8376
                ],
                "right": [
                    8480,
                    8482,
                    8389,
                    8393,
                    8396,
                    8429,
                    8398,
                    8464,
                    8466,
                    8472,
                    8380,
                    8477
                ],
                "other._reindex_with_indexers": [
                    8380
                ],
                "left.fillna": [
                    8388,
                    8471
                ],
                "right.fillna": [
                    8472,
                    8389
                ],
                "is_datetime64tz_dtype": [
                    8392,
                    8476
                ],
                "left.index": [
                    8392,
                    8393,
                    8395,
                    8476,
                    8477,
                    8479
                ],
                "left.index.tz": [
                    8393,
                    8477
                ],
                "right.index.tz": [
                    8393,
                    8477
                ],
                "right.index": [
                    8480,
                    8393,
                    8396,
                    8477
                ],
                "left.__finalize__": [
                    8482,
                    8398
                ],
                "right.__finalize__": [
                    8482,
                    8398
                ],
                "lidx": [
                    8449,
                    8453,
                    8422,
                    8454,
                    8424,
                    8428,
                    8436,
                    8438,
                    8442,
                    8443,
                    8447
                ],
                "ridx": [
                    8449,
                    8422,
                    8424,
                    8429,
                    8463,
                    8436,
                    8438,
                    8447
                ],
                "self._reindex_indexer": [
                    8428
                ],
                "other._reindex_indexer": [
                    8429
                ],
                "fdata": [
                    8454,
                    8458,
                    8459,
                    8461,
                    8433,
                    8443
                ],
                "fdata.reindex_indexer": [
                    8443,
                    8454
                ],
                "fdata.copy": [
                    8459
                ],
                "other.reindex": [
                    8466
                ],
                "fill_na": [
                    8469,
                    8470
                ],
                "cond": [
                    8605,
                    8617,
                    8501,
                    8502,
                    8503,
                    8505,
                    8506,
                    8507,
                    8509,
                    8766,
                    8513,
                    8517,
                    8519,
                    8520,
                    8521,
                    8522,
                    8526,
                    8791,
                    8794,
                    8795,
                    8798,
                    8557,
                    8566
                ],
                "com.apply_if_callable": [
                    8764,
                    8501,
                    8791
                ],
                "cond.align": [
                    8503
                ],
                "np.asanyarray": [
                    8506
                ],
                "cond.shape": [
                    8507
                ],
                "cond.fillna": [
                    8513
                ],
                "msg.format": [
                    8520,
                    8524
                ],
                "cond.dtype": [
                    8520
                ],
                "cond.empty": [
                    8521
                ],
                "dt": [
                    8522,
                    8523,
                    8524
                ],
                "cond.dtypes": [
                    8522
                ],
                "try_quick": [
                    8529,
                    8569
                ],
                "self.align": [
                    8535
                ],
                "InvalidIndexError": [
                    8543
                ],
                "other.shape": [
                    8553
                ],
                "icond": [
                    8572,
                    8557,
                    8566
                ],
                "cond.values": [
                    8557
                ],
                "np.array": [
                    8562,
                    8795,
                    9695
                ],
                "new_other": [
                    8570,
                    8571,
                    8572,
                    8573
                ],
                "new_other.copy": [
                    8571
                ],
                "align": [
                    8593,
                    8618,
                    8595,
                    8607
                ],
                "block_axis": [
                    8609,
                    8621,
                    8975,
                    8980,
                    8597,
                    8886,
                    8889,
                    8989
                ],
                "self._check_inplace_setting": [
                    8603
                ],
                "self._data.putmask": [
                    8604
                ],
                "self._data.where": [
                    8615
                ],
                "try_cast": [
                    8803,
                    8620,
                    8766
                ],
                "self._where": [
                    8765
                ],
                "periods": [
                    8924,
                    8969,
                    8989,
                    8883,
                    8921,
                    8917,
                    8980,
                    8920,
                    8889,
                    8922,
                    8892,
                    8925,
                    9918
                ],
                "self._data.shift": [
                    8888
                ],
                "self.tshift": [
                    8892
                ],
                "vslicer": [
                    8921,
                    8924,
                    8927
                ],
                "islicer": [
                    8928,
                    8922,
                    8925
                ],
                "new_obj": [
                    8929,
                    8931,
                    8927
                ],
                "self._slice": [
                    8927
                ],
                "shifted_axis": [
                    8928,
                    8929
                ],
                "new_obj.set_axis": [
                    8929
                ],
                "new_obj.__finalize__": [
                    8931
                ],
                "orig_freq": [
                    8984,
                    8977,
                    8978,
                    8981
                ],
                "index.freq": [
                    8977
                ],
                "new_data.axes": [
                    8980,
                    8989
                ],
                "index.shift": [
                    8980,
                    8989
                ],
                "freq.rule_code": [
                    8983
                ],
                "orig_freq.rule_code": [
                    8984
                ],
                "ax.is_monotonic_increasing": [
                    9120
                ],
                "ax.is_monotonic_decreasing": [
                    9120
                ],
                "ax.is_all_dates": [
                    9125
                ],
                "before": [
                    9128,
                    9131,
                    9132,
                    9133,
                    9136,
                    9140
                ],
                "to_datetime": [
                    9128,
                    9129
                ],
                "after": [
                    9129,
                    9131,
                    9132,
                    9133,
                    9136,
                    9140
                ],
                "ax.truncate": [
                    9140
                ],
                "result.copy": [
                    9143
                ],
                "ax_name": [
                    9179,
                    9181,
                    9349,
                    9351
                ],
                "tz": [
                    9184,
                    9729,
                    9186,
                    9731,
                    9733,
                    9193,
                    9354,
                    9738,
                    9356,
                    9739,
                    9198,
                    9363,
                    9368,
                    9726
                ],
                "ax.tz_convert": [
                    9186
                ],
                "ax._get_level_number": [
                    9192,
                    9362
                ],
                "new_level": [
                    9193,
                    9194,
                    9363,
                    9364
                ],
                "_tz_convert": [
                    9193,
                    9198
                ],
                "ax.levels": [
                    9193,
                    9363
                ],
                "ax.set_levels": [
                    9194,
                    9364
                ],
                "ax.name": [
                    9196,
                    9366
                ],
                "result.set_axis": [
                    9201,
                    9371
                ],
                "nonexistent_options": [
                    9333,
                    9334
                ],
                "nonexistent": [
                    9356,
                    9363,
                    9334,
                    9335,
                    9368
                ],
                "ax.tz_localize": [
                    9356
                ],
                "ambiguous": [
                    9368,
                    9363,
                    9356
                ],
                "_tz_localize": [
                    9368,
                    9363
                ],
                "np.abs": [
                    9994,
                    9443
                ],
                "self.columns.size": [
                    9680
                ],
                "percentiles": [
                    9698,
                    9699,
                    9701,
                    9703,
                    9711,
                    9683,
                    9685,
                    9688,
                    9691,
                    9692,
                    9693,
                    9695
                ],
                "validate_percentile": [
                    9688
                ],
                "percentiles.append": [
                    9692
                ],
                "np.asarray": [
                    11125,
                    9693
                ],
                "unique_pcts": [
                    9698,
                    9699,
                    9701
                ],
                "np.unique": [
                    9698
                ],
                "formatted_percentiles": [
                    9707,
                    9703
                ],
                "format_percentiles": [
                    9703
                ],
                "stat_index": [
                    9706,
                    9714
                ],
                "series.count": [
                    9710
                ],
                "series": [
                    9712,
                    9714,
                    9710,
                    9711
                ],
                "series.mean": [
                    9710
                ],
                "series.std": [
                    9710
                ],
                "series.min": [
                    9710
                ],
                "tolist": [
                    9711
                ],
                "series.quantile": [
                    9711
                ],
                "series.max": [
                    9712
                ],
                "series.name": [
                    9714
                ],
                "objcounts": [
                    9723,
                    9718,
                    9719
                ],
                "data.value_counts": [
                    9718
                ],
                "count_unique": [
                    9720,
                    9719
                ],
                "data.count": [
                    9720
                ],
                "top": [
                    9728,
                    9729,
                    9731,
                    9733,
                    9736,
                    9743,
                    9723
                ],
                "objcounts.index": [
                    9723
                ],
                "objcounts.iloc": [
                    9723
                ],
                "data.dt.tz": [
                    9726
                ],
                "data.dt": [
                    9726
                ],
                "asint": [
                    9738,
                    9739,
                    9727
                ],
                "values.view": [
                    9727
                ],
                "data.dropna": [
                    9727
                ],
                "top.tzinfo": [
                    9729
                ],
                "top.tz_convert": [
                    9731
                ],
                "top.tz_localize": [
                    9733
                ],
                "asint.min": [
                    9738
                ],
                "asint.max": [
                    9739
                ],
                "data.name": [
                    9752
                ],
                "describe_categorical_1d": [
                    9762,
                    9756
                ],
                "describe_numeric_1d": [
                    9760,
                    9758
                ],
                "describe_1d": [
                    9779,
                    9765
                ],
                "include": [
                    9777,
                    9771,
                    9766
                ],
                "exclude": [
                    9777,
                    9772,
                    9766
                ],
                "self.select_dtypes": [
                    9768,
                    9777
                ],
                "np.number": [
                    9768
                ],
                "data.columns": [
                    9769,
                    9789
                ],
                "ldesc": [
                    9779,
                    9788,
                    9782
                ],
                "data.items": [
                    9779
                ],
                "ldesc_indexes": [
                    9782,
                    9783
                ],
                "x.index": [
                    9782
                ],
                "idxnames": [
                    9784,
                    9783
                ],
                "names.append": [
                    9786
                ],
                "x.reindex": [
                    9788
                ],
                "d.columns": [
                    9789
                ],
                "data.columns.copy": [
                    9789
                ],
                "fill_method": [
                    9913,
                    9916
                ],
                "data.div": [
                    9918
                ],
                "data.shift": [
                    9918
                ],
                "rs.loc": [
                    9919
                ],
                "rs.index.duplicated": [
                    9919
                ],
                "rs.index": [
                    9919
                ],
                "rs.reindex_like": [
                    9920
                ],
                "np.putmask": [
                    11136,
                    11122,
                    9923,
                    11138
                ],
                "rs.values": [
                    9923
                ],
                "grouped": [
                    9929,
                    9930,
                    9931,
                    9935
                ],
                "self.groupby": [
                    9929
                ],
                "skipna": [
                    9987,
                    11012,
                    9994,
                    11167,
                    11040,
                    11041,
                    11172,
                    11045,
                    11047,
                    9982,
                    11060,
                    11061,
                    11066,
                    11069,
                    9930,
                    9934,
                    11134,
                    11098,
                    11120,
                    11000,
                    11001,
                    11006,
                    9983
                ],
                "applyf": [
                    9934,
                    9935
                ],
                "grouped.aggregate": [
                    9935
                ],
                "axis_descr": [
                    10119,
                    11154,
                    10003,
                    10132,
                    11027,
                    10014,
                    10143,
                    10024,
                    10152,
                    11054,
                    10036,
                    10165,
                    10049,
                    10315,
                    10062,
                    10320,
                    11092,
                    9943,
                    10075,
                    9950,
                    10979,
                    10089,
                    9962,
                    10101,
                    9975,
                    10110
                ],
                "name2": [
                    10118,
                    11153,
                    10002,
                    10131,
                    11026,
                    10013,
                    10142,
                    10023,
                    10151,
                    11054,
                    10035,
                    10164,
                    10048,
                    10061,
                    10319,
                    10320,
                    11091,
                    9943,
                    10074,
                    9949,
                    10978,
                    10088,
                    9961,
                    10100,
                    9974,
                    10109
                ],
                "_doc_parms": [
                    9943
                ],
                "cls.any": [
                    9945
                ],
                "_make_logical_function": [
                    9945,
                    9957
                ],
                "_any_desc": [
                    10774,
                    9951
                ],
                "nanops.nanany": [
                    9952
                ],
                "nanops": [
                    9952,
                    10017,
                    10112,
                    10145,
                    9964,
                    10028,
                    10092,
                    10103,
                    10124,
                    10156,
                    10134,
                    10007,
                    10169
                ],
                "_any_see_also": [
                    9953,
                    10764
                ],
                "_any_examples": [
                    9954,
                    10781
                ],
                "cls.all": [
                    9957
                ],
                "_all_desc": [
                    10410,
                    9963
                ],
                "nanops.nanall": [
                    9964
                ],
                "_all_see_also": [
                    9965,
                    10463
                ],
                "_all_examples": [
                    10417,
                    9966
                ],
                "self._agg_by_level": [
                    9987,
                    11045,
                    11065,
                    11005,
                    11167
                ],
                "demeaned": [
                    9993,
                    9994,
                    9991
                ],
                "data.mean": [
                    9993,
                    9991
                ],
                "data.sub": [
                    9993
                ],
                "mean": [
                    9994
                ],
                "_num_doc": [
                    10984,
                    11032,
                    10323,
                    9980
                ],
                "cls.mad": [
                    9996
                ],
                "mad": [
                    9996
                ],
                "cls.sem": [
                    9998
                ],
                "_make_stat_function_ddof": [
                    10009,
                    10019,
                    9998
                ],
                "nanops.nansem": [
                    10007
                ],
                "cls.var": [
                    10009
                ],
                "nanops.nanvar": [
                    10017
                ],
                "cls.std": [
                    10019
                ],
                "nanops.nanstd": [
                    10028
                ],
                "cls.cummin": [
                    10031
                ],
                "_make_cum_function": [
                    10057,
                    10044,
                    10070,
                    10031
                ],
                "np.minimum.accumulate": [
                    11112,
                    11123,
                    10038
                ],
                "np.minimum": [
                    11112,
                    11123,
                    10038
                ],
                "_cummin_examples": [
                    10504,
                    10042
                ],
                "cls.cumsum": [
                    10044
                ],
                "np.cumsum": [
                    10051
                ],
                "_cumsum_examples": [
                    10569,
                    10055
                ],
                "cls.cumprod": [
                    10057
                ],
                "np.cumprod": [
                    10064
                ],
                "_cumprod_examples": [
                    10634,
                    10068
                ],
                "cls.cummax": [
                    10070
                ],
                "np.maximum.accumulate": [
                    10077
                ],
                "np.maximum": [
                    10077
                ],
                "_cummax_examples": [
                    10081,
                    10699
                ],
                "cls.sum": [
                    10084
                ],
                "_make_min_count_stat_function": [
                    10084,
                    10127
                ],
                "nanops.nansum": [
                    10092
                ],
                "_stat_func_see_also": [
                    10921,
                    10170,
                    10093,
                    10157
                ],
                "_sum_examples": [
                    10891,
                    10094,
                    10887
                ],
                "cls.mean": [
                    10096
                ],
                "_make_stat_function": [
                    10114,
                    10147,
                    10096,
                    10160,
                    10105,
                    10138
                ],
                "nanops.nanmean": [
                    10103
                ],
                "cls.skew": [
                    10105
                ],
                "nanops.nanskew": [
                    10112
                ],
                "cls.kurt": [
                    10114,
                    10126
                ],
                "nanops.nankurt": [
                    10124
                ],
                "cls.kurtosis": [
                    10126
                ],
                "cls.prod": [
                    10137,
                    10127
                ],
                "nanops.nanprod": [
                    10134
                ],
                "_prod_examples": [
                    10936,
                    10135
                ],
                "cls.product": [
                    10137
                ],
                "cls.median": [
                    10138
                ],
                "nanops.nanmedian": [
                    10145
                ],
                "cls.max": [
                    10147
                ],
                "nanops.nanmax": [
                    10156
                ],
                "_max_examples": [
                    10913,
                    10158
                ],
                "cls.min": [
                    10160
                ],
                "nanops.nanmin": [
                    10169
                ],
                "_min_examples": [
                    10171,
                    10917
                ],
                "win_type": [
                    10202,
                    10196,
                    10213
                ],
                "Window": [
                    10197
                ],
                "window": [
                    10210,
                    10199
                ],
                "min_periods": [
                    10200,
                    10224,
                    10211,
                    10247
                ],
                "center": [
                    10224,
                    10201,
                    10212
                ],
                "Rolling": [
                    10208,
                    10183
                ],
                "Rolling.__doc__": [
                    10183
                ],
                "cls.rolling": [
                    10219
                ],
                "rolling": [
                    10219
                ],
                "Expanding": [
                    10224,
                    10221
                ],
                "Expanding.__doc__": [
                    10221
                ],
                "cls.expanding": [
                    10226
                ],
                "expanding": [
                    10226
                ],
                "EWM": [
                    10241,
                    10228
                ],
                "span": [
                    10244
                ],
                "halflife": [
                    10245
                ],
                "alpha": [
                    10246
                ],
                "adjust": [
                    10248
                ],
                "ignore_na": [
                    10249
                ],
                "EWM.__doc__": [
                    10228
                ],
                "cls.ewm": [
                    10253
                ],
                "ewm": [
                    10253
                ],
                "self.agg": [
                    10257
                ],
                "idxpos": [
                    10296,
                    10298,
                    10295
                ],
                "find_valid_index": [
                    10295
                ],
                "self._find_valid_index": [
                    10304,
                    10310
                ],
                "cls._constructor_sliced.__name__": [
                    10318
                ],
                "cls._constructor_sliced": [
                    10318
                ],
                "cls.__name__": [
                    10319
                ],
                "_num_ddof_doc": [
                    10349,
                    11055
                ],
                "_bool_doc": [
                    10372,
                    11159
                ],
                "_cnum_doc": [
                    11096,
                    10470
                ],
                "_min_count_stub": [
                    10980,
                    10959
                ],
                "nv.validate_sum": [
                    10995
                ],
                "nv.validate_prod": [
                    10997
                ],
                "nv.validate_stat_func": [
                    11039,
                    10999
                ],
                "min_count": [
                    11006,
                    11014
                ],
                "self._reduce": [
                    11008,
                    11168,
                    11068,
                    11046
                ],
                "desc": [
                    10976,
                    11054,
                    11151,
                    11024,
                    11089
                ],
                "name1": [
                    10977,
                    11054,
                    11152,
                    11025,
                    11090
                ],
                "see_also": [
                    11029,
                    11155,
                    10981
                ],
                "examples": [
                    11094,
                    11156,
                    10982,
                    11030
                ],
                "set_function_name": [
                    11072,
                    11144,
                    11017,
                    11050,
                    11177
                ],
                "stat_func": [
                    11072,
                    11017,
                    11050
                ],
                "nv.validate_median": [
                    11037
                ],
                "nv.validate_stat_ddof_func": [
                    11059
                ],
                "ddof": [
                    11066,
                    11069
                ],
                "nv.validate_cum_func_with_skipna": [
                    11098
                ],
                "y": [
                    11104,
                    11136,
                    11137,
                    11108,
                    11140,
                    11111,
                    11116,
                    11117,
                    11119,
                    11134
                ],
                "issubclass": [
                    11108,
                    11134
                ],
                "y.dtype.type": [
                    11108,
                    11134
                ],
                "y.dtype": [
                    11108,
                    11134,
                    11111
                ],
                "np.datetime64": [
                    11108
                ],
                "np.timedelta64": [
                    11108
                ],
                "accum_func": [
                    11137,
                    11140,
                    11112,
                    11119,
                    11123
                ],
                "y.view": [
                    11116,
                    11119
                ],
                "np.iinfo": [
                    11117
                ],
                "np.int64": [
                    11117
                ],
                "view": [
                    11119
                ],
                "iNaT": [
                    11128,
                    11122
                ],
                "nz": [
                    11128,
                    11125,
                    11126
                ],
                "nonzero": [
                    11125
                ],
                "np.integer": [
                    11134
                ],
                "mask_a": [
                    11136
                ],
                "mask_b": [
                    11138
                ],
                "accum_func_name": [
                    11093
                ],
                "cum_func": [
                    11144
                ],
                "nv.validate_logical_func": [
                    11161
                ],
                "bool_only": [
                    11163,
                    11173
                ],
                "empty_value": [
                    11157
                ],
                "logical_func": [
                    11177
                ],
                "_name": [
                    11181,
                    11182
                ],
                "indexing.get_indexers_list": [
                    11181
                ],
                "indexing": [
                    11181
                ],
                "NDFrame._create_indexer": [
                    11182
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs": [
                    6528,
                    7043,
                    7047,
                    10887,
                    7051,
                    10255,
                    8210,
                    10266,
                    10913,
                    10917,
                    8744,
                    5033,
                    5037,
                    6065,
                    8626,
                    8881,
                    9909,
                    6711,
                    10301,
                    9792,
                    8257,
                    8770,
                    10307,
                    6981,
                    7113,
                    7117,
                    2127,
                    6358,
                    5079,
                    97,
                    2017,
                    10851,
                    8807,
                    4980
                ],
                "Dict": [
                    97,
                    293,
                    294,
                    234,
                    301,
                    179,
                    1942,
                    2364
                ],
                "_shared_doc_kwargs": [
                    8257,
                    98,
                    7043,
                    8772,
                    7047,
                    5033,
                    7113,
                    8746,
                    7117,
                    10255,
                    8881,
                    9909,
                    6358,
                    6711
                ],
                "sentinel": [
                    1248,
                    1280,
                    1123,
                    110,
                    1264,
                    372
                ],
                "self.ndim": [
                    6016,
                    2850,
                    5602,
                    9764,
                    5578,
                    2987,
                    3947,
                    8555,
                    8592,
                    8273,
                    3698,
                    9680,
                    8533,
                    3478,
                    118,
                    5978,
                    3515,
                    11130
                ],
                "self": [
                    8192,
                    8193,
                    10240,
                    10242,
                    8199,
                    8204,
                    8206,
                    10257,
                    10258,
                    10295,
                    10298,
                    10304,
                    10310,
                    8273,
                    8274,
                    8277,
                    8279,
                    4185,
                    2147,
                    8297,
                    8299,
                    118,
                    8312,
                    121,
                    8314,
                    124,
                    125,
                    4229,
                    134,
                    4230,
                    4231,
                    137,
                    8326,
                    4243,
                    8357,
                    8360,
                    8361,
                    8366,
                    8367,
                    8376,
                    205,
                    206,
                    207,
                    8398,
                    212,
                    219,
                    8413,
                    6372,
                    8421,
                    8424,
                    8428,
                    6381,
                    238,
                    239,
                    240,
                    6382,
                    6385,
                    8433,
                    244,
                    8435,
                    8437,
                    8438,
                    8446,
                    256,
                    8448,
                    8449,
                    8458,
                    269,
                    8461,
                    276,
                    6423,
                    6429,
                    6430,
                    6432,
                    8482,
                    6435,
                    2341,
                    6437,
                    6450,
                    8501,
                    8503,
                    8507,
                    8509,
                    6473,
                    336,
                    6481,
                    8533,
                    343,
                    8535,
                    8541,
                    6495,
                    4452,
                    6502,
                    6505,
                    362,
                    8553,
                    8555,
                    6515,
                    372,
                    4471,
                    8570,
                    4476,
                    6524,
                    6526,
                    4481,
                    4482,
                    4485,
                    4486,
                    4489,
                    4491,
                    8587,
                    4495,
                    4496,
                    8592,
                    8595,
                    4501,
                    8597,
                    4506,
                    8603,
                    8604,
                    414,
                    415,
                    8610,
                    8612,
                    4519,
                    8615,
                    4522,
                    428,
                    4526,
                    2480,
                    8624,
                    4538,
                    4541,
                    458,
                    459,
                    4560,
                    4563,
                    471,
                    475,
                    479,
                    486,
                    495,
                    518,
                    542,
                    4638,
                    4639,
                    4642,
                    547,
                    4643,
                    552,
                    4650,
                    4658,
                    8764,
                    8765,
                    6728,
                    6731,
                    6732,
                    6734,
                    2641,
                    8791,
                    8797,
                    4719,
                    636,
                    638,
                    643,
                    644,
                    6800,
                    6801,
                    6803,
                    2712,
                    670,
                    673,
                    674,
                    678,
                    680,
                    681,
                    683,
                    4779,
                    4780,
                    688,
                    8884,
                    8886,
                    8888,
                    698,
                    699,
                    8892,
                    8894,
                    703,
                    704,
                    708,
                    709,
                    713,
                    2770,
                    8918,
                    8927,
                    8928,
                    8931,
                    11003,
                    11005,
                    6910,
                    8958,
                    11008,
                    6913,
                    770,
                    772,
                    6919,
                    8970,
                    6925,
                    6926,
                    6927,
                    8975,
                    8979,
                    6934,
                    8988,
                    4894,
                    8991,
                    4896,
                    4897,
                    2850,
                    2851,
                    6944,
                    2853,
                    6948,
                    11043,
                    11045,
                    11046,
                    4907,
                    6956,
                    4911,
                    816,
                    817,
                    4914,
                    6959,
                    6963,
                    6967,
                    11063,
                    6969,
                    11065,
                    11068,
                    6973,
                    11100,
                    11102,
                    11104,
                    11105,
                    11115,
                    11121,
                    4978,
                    11130,
                    11132,
                    11135,
                    7045,
                    11142,
                    7049,
                    9114,
                    9115,
                    9116,
                    11167,
                    928,
                    929,
                    11168,
                    932,
                    5035,
                    2987,
                    2988,
                    9135,
                    9137,
                    9140,
                    949,
                    950,
                    3001,
                    7115,
                    7119,
                    9173,
                    9174,
                    7127,
                    7128,
                    9179,
                    7132,
                    7135,
                    7142,
                    7149,
                    9200,
                    7154,
                    7155,
                    9202,
                    7157,
                    7163,
                    7164,
                    7166,
                    7167,
                    1071,
                    5167,
                    5169,
                    5170,
                    5171,
                    1079,
                    5182,
                    5183,
                    5184,
                    1090,
                    1091,
                    5186,
                    5188,
                    1094,
                    1095,
                    5189,
                    5190,
                    1099,
                    1101,
                    1105,
                    5202,
                    5203,
                    7254,
                    5209,
                    5210,
                    3163,
                    5211,
                    5212,
                    1118,
                    5215,
                    1120,
                    5217,
                    5218,
                    5219,
                    5221,
                    5223,
                    7275,
                    7277,
                    5231,
                    7280,
                    7284,
                    7286,
                    5239,
                    9343,
                    9344,
                    5251,
                    5253,
                    5254,
                    9349,
                    3213,
                    5261,
                    5263,
                    3217,
                    3218,
                    3223,
                    9370,
                    3228,
                    9372,
                    3232,
                    5281,
                    5283,
                    5284,
                    5285,
                    5289,
                    5290,
                    5294,
                    5295,
                    5299,
                    3252,
                    5300,
                    5305,
                    5306,
                    3259,
                    3264,
                    3271,
                    5320,
                    3274,
                    5323,
                    3277,
                    1247,
                    9443,
                    1254,
                    7411,
                    1270,
                    7414,
                    1276,
                    1278,
                    1279,
                    1287,
                    5402,
                    5403,
                    3359,
                    5408,
                    3361,
                    3362,
                    3364,
                    5413,
                    3368,
                    3369,
                    5433,
                    1345,
                    1346,
                    1349,
                    1359,
                    5465,
                    5475,
                    5476,
                    7527,
                    3472,
                    3473,
                    3478,
                    3482,
                    7580,
                    7581,
                    3487,
                    7583,
                    3489,
                    3491,
                    1445,
                    3493,
                    3495,
                    1447,
                    7589,
                    3500,
                    1453,
                    3502,
                    3505,
                    3508,
                    1464,
                    1467,
                    3515,
                    3518,
                    3520,
                    3521,
                    1478,
                    3526,
                    1481,
                    5578,
                    1483,
                    3531,
                    1485,
                    1486,
                    5579,
                    5584,
                    3537,
                    1490,
                    5585,
                    5588,
                    3541,
                    9680,
                    3544,
                    3545,
                    5594,
                    3547,
                    3550,
                    5602,
                    3555,
                    1509,
                    3557,
                    3559,
                    5606,
                    5607,
                    7657,
                    1515,
                    3563,
                    5612,
                    1518,
                    5613,
                    7658,
                    1521,
                    5617,
                    3571,
                    1524,
                    3572,
                    3573,
                    7671,
                    3578,
                    3582,
                    3583,
                    3587,
                    3590,
                    3592,
                    1555,
                    3605,
                    3606,
                    1560,
                    1561,
                    3608,
                    3610,
                    3611,
                    9764,
                    9765,
                    9768,
                    9770,
                    9775,
                    1584,
                    1585,
                    9777,
                    1590,
                    3646,
                    3655,
                    3656,
                    3657,
                    3658,
                    1613,
                    3662,
                    3663,
                    5725,
                    5726,
                    5729,
                    1635,
                    1636,
                    1641,
                    1642,
                    5738,
                    3698,
                    3700,
                    3709,
                    3711,
                    3717,
                    3721,
                    7660,
                    5777,
                    5778,
                    5785,
                    1694,
                    1695,
                    3743,
                    1697,
                    1698,
                    1699,
                    1700,
                    1701,
                    3750,
                    1708,
                    9912,
                    9914,
                    9916,
                    5829,
                    5830,
                    5833,
                    9929,
                    9932,
                    9933,
                    1754,
                    1759,
                    1771,
                    1773,
                    1778,
                    9985,
                    9987,
                    9989,
                    3856,
                    7952,
                    1810,
                    7954,
                    3863,
                    1823,
                    3881,
                    3884,
                    1837,
                    3890,
                    1848,
                    1849,
                    3897,
                    5946,
                    1853,
                    5952,
                    1857,
                    5956,
                    1861,
                    5959,
                    3916,
                    3917,
                    3918,
                    5966,
                    8012,
                    8015,
                    8016,
                    8019,
                    3927,
                    5975,
                    5976,
                    5978,
                    8023,
                    8024,
                    8025,
                    8027,
                    5992,
                    3947,
                    3948,
                    3950,
                    6004,
                    1910,
                    6013,
                    3966,
                    3967,
                    1920,
                    3968,
                    3969,
                    6016,
                    6017,
                    6022,
                    1928,
                    1929,
                    6025,
                    8074,
                    8077,
                    8078,
                    8082,
                    8083,
                    8084,
                    1943,
                    1945,
                    1946,
                    1947,
                    1948,
                    6042,
                    1955,
                    1960,
                    6061,
                    1966,
                    1970,
                    1974,
                    1977,
                    1979,
                    4027,
                    1981,
                    4028,
                    1989,
                    1990,
                    1998,
                    10194,
                    10198,
                    2008,
                    10209,
                    10223,
                    10224,
                    8177,
                    4086,
                    4087
                ],
                "to_replace": [
                    128,
                    6419,
                    6421,
                    6424,
                    6433,
                    6436,
                    6520,
                    6450,
                    6465,
                    6467,
                    6470,
                    6474,
                    6482,
                    6484,
                    6369,
                    6377,
                    6378,
                    6507,
                    6380,
                    6383,
                    6385,
                    6387,
                    6516,
                    120,
                    6394,
                    6397
                ],
                "method": [
                    8321,
                    6786,
                    4485,
                    4490,
                    8333,
                    3857,
                    8469,
                    4503,
                    8471,
                    8472,
                    4520,
                    5944,
                    8387,
                    8388,
                    8389,
                    5959,
                    9933,
                    9934,
                    5967,
                    8271,
                    6744,
                    2650,
                    8288,
                    4453,
                    6759,
                    7529,
                    6383,
                    6385,
                    6770,
                    7153,
                    8306,
                    6773,
                    7157,
                    120,
                    8187,
                    126
                ],
                "orig_dtype": [
                    131,
                    124,
                    11119,
                    11111
                ],
                "self.dtype": [
                    11132,
                    124,
                    134
                ],
                "result": [
                    9735,
                    9743,
                    10257,
                    10258,
                    9749,
                    10261,
                    9752,
                    1091,
                    1112,
                    1115,
                    1118,
                    1120,
                    7277,
                    7279,
                    7284,
                    7285,
                    7289,
                    125,
                    128,
                    129,
                    5252,
                    134,
                    5255,
                    137,
                    140,
                    9370,
                    9371,
                    9372,
                    1276,
                    772,
                    773,
                    1289,
                    1291,
                    9722,
                    3364,
                    3368,
                    3369,
                    3371,
                    816,
                    819,
                    823,
                    5959,
                    5962,
                    5964,
                    3927,
                    3950,
                    11119,
                    3952,
                    11122,
                    6004,
                    6006,
                    6008,
                    11128,
                    6010,
                    3968,
                    11137,
                    11138,
                    1923,
                    1924,
                    11140,
                    11142,
                    1927,
                    1929,
                    3482,
                    3483,
                    3484,
                    9137,
                    9140,
                    950,
                    951,
                    952,
                    953,
                    9143,
                    9145,
                    3518,
                    3526,
                    3527,
                    3531,
                    3532,
                    7127,
                    7133,
                    7136,
                    7139,
                    7142,
                    7144,
                    9200,
                    9201,
                    5616,
                    5617,
                    5618,
                    3572,
                    3573,
                    9202,
                    9720,
                    3577,
                    3578,
                    3579
                ],
                "inplace": [
                    131,
                    4228,
                    6021,
                    136,
                    6793,
                    1290,
                    4235,
                    6798,
                    8599,
                    6424,
                    6043,
                    5279,
                    5280,
                    6435,
                    3876,
                    6062,
                    6446,
                    1073,
                    8498,
                    6523,
                    5943,
                    3896,
                    6458,
                    8766,
                    8512,
                    1091,
                    1348,
                    1349,
                    5957,
                    1351,
                    6726,
                    6476,
                    8526,
                    5970,
                    6482,
                    7250,
                    8790,
                    1117,
                    6368,
                    6496,
                    8800,
                    1251,
                    7141,
                    5993,
                    7275,
                    1262,
                    6383,
                    6510,
                    6385,
                    7154,
                    7155,
                    6004,
                    6516,
                    1270,
                    7280,
                    7283,
                    7286,
                    6010,
                    635,
                    1276,
                    125,
                    6014,
                    7167
                ],
                "self.copy": [
                    4481,
                    5729,
                    1091,
                    6435,
                    1349,
                    5738,
                    1778,
                    6004,
                    8884,
                    950,
                    1276,
                    125,
                    638,
                    703
                ],
                "fill_f": [
                    129,
                    126
                ],
                "missing.get_fill_func": [
                    126
                ],
                "missing": [
                    128,
                    4453,
                    8271,
                    6972,
                    126,
                    6975
                ],
                "mask": [
                    128,
                    129,
                    7138,
                    7139,
                    9922,
                    9923,
                    11136,
                    11138,
                    11115,
                    11117,
                    11121,
                    11122,
                    11125,
                    7128,
                    11135
                ],
                "missing.mask_missing": [
                    128
                ],
                "result.values": [
                    128,
                    129
                ],
                "values": [
                    6400,
                    129,
                    131,
                    134,
                    6414,
                    6417,
                    6421,
                    1699,
                    6948,
                    1701,
                    6949,
                    6951,
                    4649,
                    1706,
                    4650,
                    1453,
                    1454,
                    1455,
                    1457,
                    1458,
                    1459,
                    4657,
                    1461,
                    4658,
                    1463,
                    1467,
                    1468,
                    1469,
                    1726,
                    1471,
                    1472,
                    1473,
                    1475,
                    1477,
                    3544,
                    3545,
                    227,
                    6398,
                    9727
                ],
                "limit": [
                    129,
                    8322,
                    6790,
                    4490,
                    8334,
                    3859,
                    4503,
                    6424,
                    8471,
                    8472,
                    6043,
                    6062,
                    9916,
                    8388,
                    8389,
                    5959,
                    5969,
                    6496,
                    8289,
                    4456,
                    5993,
                    6383,
                    6385,
                    8307,
                    6009,
                    6014
                ],
                "values.dtype": [
                    1463,
                    131,
                    1477,
                    227
                ],
                "__finalize__": [
                    7045,
                    134,
                    11142,
                    1929,
                    4489,
                    6025,
                    7049,
                    5777,
                    6803,
                    8991,
                    3364,
                    5285,
                    688,
                    8624,
                    8894,
                    5829,
                    5320,
                    713,
                    5323,
                    7115,
                    7119,
                    4563,
                    5726,
                    5475,
                    5613,
                    6526
                ],
                "pd.Series": [
                    9752,
                    9714,
                    4931,
                    134
                ],
                "pd": [
                    4931,
                    134,
                    5616,
                    9714,
                    9752,
                    9788
                ],
                "self.index": [
                    134,
                    8074,
                    6925,
                    6926,
                    6927,
                    8077,
                    8082,
                    8083,
                    6944,
                    3491,
                    3493,
                    3495,
                    8360,
                    8361,
                    3505,
                    6969,
                    10298,
                    3521,
                    8012,
                    8015,
                    8019,
                    8023,
                    8024,
                    8421,
                    8424,
                    8435,
                    8437,
                    8438,
                    7164,
                    6910
                ],
                "self._update_inplace": [
                    8612,
                    6022,
                    7142,
                    137,
                    6801,
                    3897,
                    6524,
                    1118
                ],
                "result._data": [
                    137,
                    5962,
                    951,
                    952,
                    1112,
                    1118
                ],
                "bool_t": [
                    7296,
                    2177,
                    3585,
                    7297,
                    2180,
                    7298,
                    2182,
                    7174,
                    7299,
                    7300,
                    3594,
                    7430,
                    6030,
                    143,
                    5265,
                    3226,
                    2714,
                    1564,
                    8090,
                    8092,
                    8093,
                    3872,
                    6049,
                    8346,
                    8994,
                    4516,
                    3238,
                    7595,
                    3756,
                    3373,
                    7596,
                    4532,
                    4533,
                    5302,
                    2361,
                    1593,
                    2363,
                    9148,
                    2366,
                    1859,
                    2501,
                    1864,
                    7121,
                    3282,
                    5843,
                    8406,
                    3034,
                    3035,
                    3036,
                    5467,
                    4191,
                    4192,
                    5728,
                    4195,
                    3045,
                    5479,
                    5742,
                    5743,
                    5744,
                    5745,
                    3954,
                    5746,
                    5620,
                    7535,
                    9209,
                    4094
                ],
                "PandasObject": [
                    146
                ],
                "SelectionMixin": [
                    146
                ],
                "_internal_names": [
                    173,
                    158
                ],
                "List": [
                    292,
                    301,
                    176,
                    3034,
                    188,
                    158,
                    2367
                ],
                "_internal_names_set": [
                    173
                ],
                "Set": [
                    173,
                    174
                ],
                "_accessors": [
                    174
                ],
                "_deprecations": [
                    175
                ],
                "FrozenSet": [
                    175
                ],
                "_metadata": [
                    176
                ],
                "_is_copy": [
                    177
                ],
                "_data": [
                    178
                ],
                "BlockManager": [
                    1954,
                    178,
                    187,
                    378
                ],
                "_attrs": [
                    179
                ],
                "Optional": [
                    7680,
                    2179,
                    2181,
                    7429,
                    2183,
                    2184,
                    6033,
                    2714,
                    8090,
                    6052,
                    3755,
                    179,
                    2359,
                    2360,
                    2362,
                    2364,
                    188,
                    2366,
                    2367,
                    190,
                    191,
                    3029,
                    5846,
                    3032,
                    3033,
                    4568,
                    4569,
                    3036,
                    3038,
                    3039,
                    2656,
                    3040,
                    3042,
                    3043,
                    3044,
                    7677,
                    3046,
                    3047,
                    3048,
                    7678,
                    234,
                    243,
                    2173,
                    2174,
                    2175
                ],
                "Hashable": [
                    234,
                    179,
                    243,
                    3033,
                    3036,
                    191
                ],
                "Any": [
                    2179,
                    234,
                    179,
                    243,
                    1942,
                    191
                ],
                "_typ": [
                    180
                ],
                "Index": [
                    5216,
                    6953,
                    6954,
                    188
                ],
                "Dtype": [
                    190
                ],
                "Mapping": [
                    3039,
                    243,
                    191
                ],
                "fastpath": [
                    195
                ],
                "dtype": [
                    259,
                    9721,
                    9750,
                    9752,
                    196,
                    197,
                    5577,
                    5579,
                    5584,
                    5587,
                    2649,
                    5595,
                    5597,
                    225,
                    5602,
                    227,
                    228,
                    5606,
                    5612,
                    249,
                    250,
                    253
                ],
                "data": [
                    6784,
                    385,
                    6785,
                    8192,
                    9989,
                    9991,
                    9993,
                    8204,
                    8206,
                    8208,
                    9752,
                    9755,
                    9756,
                    9757,
                    9758,
                    9759,
                    9760,
                    9762,
                    9768,
                    9769,
                    9770,
                    9775,
                    9777,
                    9779,
                    9914,
                    9916,
                    6973,
                    6974,
                    6975,
                    6976,
                    9789,
                    9918,
                    9920,
                    9922,
                    197,
                    199,
                    203,
                    206,
                    2008,
                    2010,
                    5725,
                    5726,
                    9718,
                    9720,
                    8185,
                    378,
                    379,
                    9725,
                    9726,
                    9727
                ],
                "data.astype": [
                    197
                ],
                "copy": [
                    4480,
                    3586,
                    4486,
                    4490,
                    8331,
                    8458,
                    5776,
                    3858,
                    5783,
                    9370,
                    4510,
                    1072,
                    9142,
                    8377,
                    702,
                    8382,
                    1091,
                    710,
                    198,
                    4557,
                    4560,
                    5585,
                    1113,
                    5597,
                    8286,
                    223,
                    5600,
                    11104,
                    1250,
                    5476,
                    5606,
                    4455,
                    5612,
                    8428,
                    8429,
                    8304,
                    9200,
                    1276,
                    8319
                ],
                "data.copy": [
                    199
                ],
                "axes": [
                    4485,
                    4486,
                    4490,
                    4497,
                    670,
                    673,
                    674,
                    1279,
                    677,
                    4519,
                    3882,
                    3884,
                    1071,
                    3892,
                    310,
                    311,
                    313,
                    314,
                    315,
                    316,
                    1087,
                    320,
                    1095,
                    201,
                    202,
                    336,
                    343,
                    216,
                    1247,
                    4452,
                    372,
                    373,
                    4477,
                    382,
                    383
                ],
                "i": [
                    931,
                    932,
                    432,
                    6452,
                    6453,
                    439,
                    952,
                    440,
                    698,
                    314,
                    701,
                    706,
                    324,
                    709,
                    328,
                    329,
                    202,
                    203,
                    331,
                    332,
                    10316,
                    8541,
                    5606,
                    5607
                ],
                "ax": [
                    9344,
                    6787,
                    9347,
                    9348,
                    9354,
                    9356,
                    9357,
                    9361,
                    9362,
                    9363,
                    9364,
                    4501,
                    4502,
                    9366,
                    9368,
                    9371,
                    9116,
                    1695,
                    9120,
                    9125,
                    1585,
                    9139,
                    9140,
                    1590,
                    202,
                    203,
                    6731,
                    6735,
                    6737,
                    6740,
                    6742,
                    343,
                    9174,
                    9177,
                    9178,
                    8541,
                    9184,
                    9186,
                    3555,
                    1636,
                    3556,
                    3557,
                    9187,
                    9191,
                    9192,
                    1642,
                    9193,
                    9194,
                    9196,
                    9198,
                    9201,
                    4476,
                    4477,
                    4478
                ],
                "data.reindex_axis": [
                    203
                ],
                "object.__setattr__": [
                    5217,
                    5221,
                    1960,
                    205,
                    206,
                    207,
                    5231,
                    1970,
                    5170,
                    212,
                    5203,
                    1974,
                    5210,
                    5212
                ],
                "attrs": [
                    1959,
                    1960,
                    208,
                    209,
                    242,
                    211,
                    212
                ],
                "a": [
                    4496,
                    4497,
                    4501,
                    4506,
                    673,
                    674,
                    931,
                    932,
                    314,
                    324,
                    325,
                    328,
                    329,
                    331,
                    332,
                    10316,
                    1359,
                    336,
                    343,
                    216,
                    219,
                    486,
                    362,
                    365,
                    367,
                    495,
                    372,
                    1910
                ],
                "axe": [
                    216,
                    217,
                    219
                ],
                "axes.items": [
                    216,
                    3892,
                    4477
                ],
                "mgr": [
                    224,
                    227,
                    228,
                    229,
                    218
                ],
                "mgr.reindex_axis": [
                    218
                ],
                "self._get_block_manager_axis": [
                    3362,
                    1099,
                    8975,
                    3571,
                    8597,
                    8886,
                    219,
                    4541
                ],
                "mgr.copy": [
                    224
                ],
                "mgr.blocks": [
                    227
                ],
                "mgr.astype": [
                    228
                ],
                "self._attrs": [
                    240,
                    244,
                    238,
                    239
                ],
                "value": [
                    6016,
                    6017,
                    6019,
                    6419,
                    6421,
                    3223,
                    6424,
                    6434,
                    6437,
                    6442,
                    6449,
                    6014,
                    5944,
                    6456,
                    5309,
                    3649,
                    3650,
                    5954,
                    6466,
                    6467,
                    6470,
                    6475,
                    6482,
                    5203,
                    5210,
                    5979,
                    5212,
                    5980,
                    5981,
                    5983,
                    6496,
                    5217,
                    5219,
                    5221,
                    3686,
                    5223,
                    3688,
                    5989,
                    5993,
                    6374,
                    5996,
                    6501,
                    6504,
                    5231,
                    6514,
                    244,
                    6005,
                    6516,
                    6012,
                    3582
                ],
                "attrs.setter": [
                    242
                ],
                "pandas_dtype": [
                    250
                ],
                "dtype.kind": [
                    253
                ],
                "AbstractMethodError": [
                    3563,
                    269,
                    4526,
                    3537,
                    276,
                    4185
                ],
                "_AXIS_ALIASES": [
                    287
                ],
                "_AXIS_IALIASES": [
                    288
                ],
                "_stat_axis_number": [
                    289
                ],
                "_stat_axis_name": [
                    290
                ],
                "_ix": [
                    291
                ],
                "_AXIS_ORDERS": [
                    292
                ],
                "_AXIS_NUMBERS": [
                    293
                ],
                "_AXIS_NAMES": [
                    294
                ],
                "_AXIS_REVERSED": [
                    295
                ],
                "_info_axis_number": [
                    296
                ],
                "_info_axis_name": [
                    297
                ],
                "_AXIS_LEN": [
                    298
                ],
                "info_axis": [
                    320,
                    310,
                    319
                ],
                "axes_are_reversed": [
                    317,
                    327,
                    311
                ],
                "cls._AXIS_ORDERS": [
                    313,
                    10316
                ],
                "cls": [
                    10253,
                    10316,
                    10318,
                    10319,
                    3202,
                    3204,
                    9943,
                    9945,
                    9946,
                    9957,
                    9958,
                    11017,
                    9996,
                    9998,
                    9999,
                    10009,
                    10010,
                    10019,
                    10020,
                    11050,
                    10031,
                    10032,
                    313,
                    314,
                    315,
                    316,
                    317,
                    10044,
                    319,
                    320,
                    10045,
                    11072,
                    324,
                    325,
                    328,
                    10057,
                    10058,
                    331,
                    10070,
                    10071,
                    10084,
                    10085,
                    10096,
                    10097,
                    10105,
                    10106,
                    379,
                    381,
                    383,
                    385,
                    10114,
                    10115,
                    389,
                    391,
                    11144,
                    395,
                    398,
                    10126,
                    10127,
                    10128,
                    402,
                    404,
                    408,
                    10137,
                    10138,
                    411,
                    10139,
                    10147,
                    420,
                    421,
                    422,
                    10148,
                    11177,
                    10160,
                    10161,
                    10219,
                    10226
                ],
                "cls._AXIS_NUMBERS": [
                    314,
                    395,
                    404
                ],
                "cls._AXIS_LEN": [
                    10318,
                    315,
                    422
                ],
                "cls._AXIS_NAMES": [
                    391,
                    328,
                    331,
                    408,
                    316
                ],
                "cls._AXIS_REVERSED": [
                    381,
                    317,
                    421
                ],
                "cls._info_axis_number": [
                    319
                ],
                "cls._info_axis_name": [
                    320
                ],
                "properties.AxisProperty": [
                    324
                ],
                "properties": [
                    324
                ],
                "docs.get": [
                    324
                ],
                "docs": [
                    324
                ],
                "cls._internal_names_set.add": [
                    325
                ],
                "cls._internal_names_set": [
                    325
                ],
                "cls._AXIS_NAMES.items": [
                    328,
                    331
                ],
                "set_axis": [
                    329,
                    332
                ],
                "d": [
                    384,
                    385,
                    11142,
                    1928,
                    1929,
                    3855,
                    3863,
                    429,
                    9788,
                    445,
                    9789,
                    9790,
                    453,
                    454,
                    457,
                    459,
                    460,
                    336,
                    337,
                    338,
                    343,
                    344,
                    345,
                    11105,
                    11106,
                    9709,
                    9714,
                    11132,
                    383
                ],
                "self._get_axis": [
                    9344,
                    770,
                    1287,
                    4231,
                    3473,
                    4501,
                    9116,
                    4639,
                    7583,
                    3368,
                    681,
                    1708,
                    1346,
                    708,
                    3918,
                    1359,
                    336,
                    9174,
                    5975,
                    8928,
                    486,
                    7660,
                    495,
                    1910,
                    4476,
                    8958
                ],
                "self._AXIS_ORDERS": [
                    673,
                    674,
                    486,
                    1928,
                    458,
                    362,
                    495,
                    336,
                    1359,
                    3856,
                    4496,
                    372,
                    1910,
                    343
                ],
                "d.update": [
                    344,
                    337,
                    459,
                    384
                ],
                "kwargs": [
                    384,
                    6795,
                    10257,
                    11161,
                    3357,
                    670,
                    671,
                    11037,
                    11039,
                    5035,
                    684,
                    10999,
                    687,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    11059,
                    9912,
                    1081,
                    1084,
                    9918,
                    9931,
                    9934,
                    337,
                    2770,
                    7252,
                    344,
                    11098,
                    1247,
                    1248,
                    1250,
                    1251,
                    1252,
                    4452,
                    4453,
                    4454,
                    1256,
                    4455,
                    4456,
                    1259,
                    4457,
                    365,
                    4458,
                    367,
                    4463,
                    4465,
                    10995,
                    372,
                    373,
                    4468,
                    10997,
                    379
                ],
                "args": [
                    4452,
                    361,
                    5035,
                    684,
                    1071,
                    367,
                    10257,
                    7252,
                    11098,
                    671
                ],
                "args.pop": [
                    367
                ],
                "require_all": [
                    369
                ],
                "kwargs.pop": [
                    1250,
                    1251,
                    1252,
                    4453,
                    4454,
                    4455,
                    4456,
                    4457,
                    4458,
                    684,
                    4463,
                    1072,
                    1073,
                    1074,
                    1075,
                    372,
                    1076,
                    9912
                ],
                "cls._construct_axes_dict_from": [
                    383
                ],
                "axis": [
                    10240,
                    10250,
                    1555,
                    1560,
                    1561,
                    4637,
                    4638,
                    4639,
                    4642,
                    4650,
                    1584,
                    1585,
                    4658,
                    1075,
                    1077,
                    1079,
                    8766,
                    1094,
                    1095,
                    6728,
                    6730,
                    1099,
                    1101,
                    1613,
                    1614,
                    6733,
                    1105,
                    11006,
                    7252,
                    7253,
                    7254,
                    8284,
                    8801,
                    1635,
                    1636,
                    1641,
                    8302,
                    1647,
                    7280,
                    1651,
                    7286,
                    8311,
                    8312,
                    636,
                    8317,
                    639,
                    9343,
                    9344,
                    643,
                    4229,
                    4230,
                    4231,
                    9349,
                    8329,
                    6799,
                    6804,
                    9371,
                    1694,
                    1695,
                    1697,
                    1698,
                    1700,
                    1701,
                    8359,
                    8365,
                    1718,
                    8886,
                    9912,
                    9916,
                    9918,
                    9927,
                    9929,
                    9932,
                    9934,
                    1754,
                    1759,
                    8927,
                    8417,
                    8928,
                    8929,
                    1252,
                    1253,
                    1254,
                    1766,
                    1771,
                    1773,
                    8434,
                    7411,
                    1780,
                    1270,
                    7416,
                    11002,
                    11003,
                    8445,
                    1278,
                    1279,
                    8958,
                    9984,
                    770,
                    9985,
                    772,
                    9987,
                    9990,
                    1287,
                    7583,
                    1289,
                    9994,
                    11011,
                    8975,
                    7952,
                    7958,
                    9113,
                    8475,
                    4893,
                    4894,
                    9114,
                    4896,
                    4897,
                    3362,
                    11042,
                    9115,
                    11043,
                    11045,
                    11047,
                    3368,
                    3881,
                    9116,
                    4907,
                    4912,
                    3892,
                    3894,
                    11062,
                    11063,
                    11066,
                    11069,
                    5950,
                    5951,
                    5952,
                    1345,
                    1346,
                    5956,
                    1350,
                    3916,
                    3917,
                    3918,
                    3920,
                    5968,
                    3922,
                    3924,
                    3926,
                    5975,
                    8536,
                    11099,
                    8540,
                    3933,
                    11100,
                    3935,
                    11102,
                    3941,
                    3943,
                    5997,
                    11119,
                    4978,
                    11167,
                    4476,
                    4477,
                    11137,
                    11140,
                    389,
                    390,
                    391,
                    392,
                    395,
                    8589,
                    398,
                    8590,
                    3472,
                    3473,
                    402,
                    403,
                    404,
                    405,
                    8595,
                    3479,
                    408,
                    8597,
                    4506,
                    411,
                    3483,
                    4508,
                    414,
                    3486,
                    928,
                    6043,
                    7579,
                    931,
                    420,
                    7580,
                    7581,
                    423,
                    424,
                    7589,
                    11171,
                    428,
                    3500,
                    430,
                    3502,
                    6062,
                    9136,
                    9140,
                    949,
                    951,
                    952,
                    4539,
                    4540,
                    4541,
                    453,
                    10194,
                    9173,
                    9174,
                    9179,
                    10204,
                    10215,
                    7656,
                    7657,
                    7658,
                    7148,
                    7149,
                    7660,
                    10223,
                    10224,
                    8177,
                    9201,
                    3571,
                    3572,
                    7157,
                    7671,
                    3577,
                    8186,
                    7166,
                    7167
                ],
                "cls._AXIS_ALIASES.get": [
                    402,
                    389
                ],
                "cls._AXIS_ALIASES": [
                    402,
                    389
                ],
                "is_integer": [
                    390
                ],
                "name": [
                    4642,
                    4643,
                    5166,
                    5167,
                    5169,
                    5170,
                    9784,
                    9785,
                    9786,
                    5182,
                    5183,
                    5184,
                    5186,
                    5188,
                    5189,
                    5190,
                    10318,
                    10320,
                    2642,
                    5202,
                    5203,
                    5209,
                    5210,
                    5211,
                    5212,
                    5215,
                    5217,
                    5218,
                    5219,
                    5221,
                    5231,
                    3202,
                    3203,
                    3204,
                    9930,
                    9931,
                    9933,
                    9943,
                    9948,
                    9960,
                    10994,
                    10996,
                    9973,
                    10999,
                    11006,
                    11010,
                    1288,
                    11017,
                    10001,
                    10012,
                    11036,
                    11039,
                    11045,
                    10022,
                    11047,
                    11050,
                    10034,
                    11059,
                    11066,
                    11069,
                    10047,
                    11072,
                    1346,
                    10060,
                    10073,
                    11098,
                    10087,
                    10099,
                    10108,
                    10117,
                    11144,
                    10130,
                    11161,
                    10141,
                    414,
                    415,
                    11167,
                    11170,
                    10150,
                    11177,
                    432,
                    433,
                    434,
                    10163
                ],
                "self._get_axis_name": [
                    673,
                    4642,
                    9349,
                    4230,
                    3881,
                    3917,
                    9140,
                    9179,
                    636,
                    414
                ],
                "cls._get_axis_number": [
                    420
                ],
                "m": [
                    422,
                    423
                ],
                "axis_index": [
                    448,
                    449,
                    451,
                    428,
                    432,
                    442,
                    444
                ],
                "prefix": [
                    4025,
                    430,
                    439
                ],
                "axis_index.names": [
                    432
                ],
                "key": [
                    3717,
                    3721,
                    3475,
                    1558,
                    1559,
                    1560,
                    1561,
                    3487,
                    3743,
                    1697,
                    1698,
                    1699,
                    1700,
                    1701,
                    3493,
                    1703,
                    3495,
                    2479,
                    434,
                    1588,
                    1589,
                    1590,
                    439,
                    1721,
                    445,
                    1861,
                    1613,
                    1614,
                    1639,
                    1640,
                    1641,
                    1642,
                    3710,
                    3700,
                    1655,
                    3707,
                    3708,
                    3582
                ],
                "level": [
                    8450,
                    771,
                    9986,
                    4485,
                    9987,
                    4233,
                    4490,
                    8330,
                    3474,
                    3475,
                    8466,
                    9362,
                    9363,
                    4503,
                    9364,
                    9366,
                    9367,
                    11162,
                    7964,
                    11167,
                    11044,
                    11045,
                    4521,
                    8362,
                    8368,
                    434,
                    1074,
                    3894,
                    440,
                    11064,
                    442,
                    11066,
                    8766,
                    9929,
                    1100,
                    1101,
                    11006,
                    3921,
                    3924,
                    8536,
                    1113,
                    3932,
                    8285,
                    3935,
                    8802,
                    4454,
                    9192,
                    8425,
                    9193,
                    9194,
                    9196,
                    9197,
                    8303,
                    7409,
                    8439,
                    7417,
                    11004,
                    8318
                ],
                "level_values": [
                    442,
                    443
                ],
                "axis_index.get_level_values": [
                    442
                ],
                "s": [
                    9779,
                    443,
                    444,
                    445
                ],
                "level_values.to_series": [
                    443
                ],
                "s.index": [
                    444
                ],
                "MultiIndex": [
                    448,
                    3492,
                    9191,
                    1708,
                    9361,
                    3698,
                    3922,
                    9139,
                    6744,
                    3933,
                    1791
                ],
                "dindex": [
                    449,
                    451,
                    453
                ],
                "axis_index.to_series": [
                    451
                ],
                "axis_name": [
                    4230,
                    3881,
                    458,
                    459,
                    3882,
                    3917,
                    3948,
                    4243,
                    3927
                ],
                "self._get_axis_resolvers": [
                    459
                ],
                "_remove_spaces_column_name": [
                    471
                ],
                "k": [
                    6413,
                    6416,
                    6417,
                    1943,
                    1967,
                    1968,
                    1969,
                    1970,
                    6450,
                    1972,
                    1973,
                    1974,
                    6452,
                    6457,
                    708,
                    471,
                    1759,
                    5475,
                    5476,
                    6504,
                    6505,
                    1771,
                    1773,
                    6509,
                    6005,
                    6006,
                    6008
                ],
                "v": [
                    1280,
                    6400,
                    1282,
                    1284,
                    1286,
                    6413,
                    6414,
                    1969,
                    1970,
                    1972,
                    1974,
                    1095,
                    1096,
                    1098,
                    1104,
                    1105,
                    1108,
                    471,
                    5475,
                    5476,
                    1509,
                    1510,
                    1511,
                    1512,
                    6504,
                    6508,
                    6005,
                    6009,
                    1279
                ],
                "self.items": [
                    5594,
                    1853,
                    471
                ],
                "self._info_axis_name": [
                    4027,
                    6731,
                    4086,
                    475,
                    4638
                ],
                "self._stat_axis_name": [
                    9912,
                    479
                ],
                "Tuple": [
                    482
                ],
                "self._data.ndim": [
                    518
                ],
                "self._data": [
                    3968,
                    643,
                    5251,
                    3717,
                    518,
                    5253,
                    8458,
                    5261,
                    5778,
                    8979,
                    3223,
                    1945,
                    9370,
                    5403,
                    8604,
                    8988,
                    6432,
                    3361,
                    1955,
                    5283,
                    3750,
                    1447,
                    8615,
                    5289,
                    5294,
                    5299,
                    3508,
                    8888,
                    4538,
                    5830,
                    5320,
                    6473,
                    5323,
                    5966,
                    4560,
                    6481,
                    3544,
                    5465,
                    5725,
                    5476,
                    6502,
                    5992,
                    5612,
                    9200,
                    8433,
                    6515,
                    3572,
                    6013,
                    3582
                ],
                "np.prod": [
                    542
                ],
                "np": [
                    11136,
                    11138,
                    9994,
                    9749,
                    6934,
                    6935,
                    10080,
                    542,
                    8487,
                    9768,
                    3497,
                    3498,
                    6959,
                    6963,
                    8756,
                    10038,
                    6967,
                    10040,
                    10041,
                    8506,
                    5309,
                    6975,
                    9923,
                    10051,
                    10054,
                    4938,
                    8782,
                    10064,
                    7122,
                    7123,
                    10067,
                    8536,
                    5465,
                    7130,
                    8795,
                    7261,
                    9693,
                    7263,
                    9695,
                    10077,
                    7138,
                    7139,
                    9443,
                    9698,
                    1510,
                    8551,
                    10079,
                    6761,
                    11108,
                    11112,
                    11117,
                    8562,
                    11122,
                    11123,
                    11125,
                    1660,
                    11134
                ],
                "self.shape": [
                    4897,
                    3657,
                    8553,
                    8507,
                    542
                ],
                "FrameOrSeries": [
                    6028,
                    6033,
                    8087,
                    8094,
                    6047,
                    5152,
                    545,
                    5153,
                    8994,
                    6052,
                    8995,
                    550,
                    4662,
                    9148,
                    9149,
                    8896,
                    5839,
                    5846,
                    5728,
                    5731,
                    5741,
                    4721,
                    5747,
                    5620,
                    9205,
                    9212
                ],
                "labels": [
                    770,
                    771,
                    643,
                    4231,
                    4238,
                    3473,
                    4242,
                    3475,
                    4497,
                    4498,
                    4503,
                    4639,
                    4643,
                    3878,
                    4649,
                    3882,
                    4657,
                    3892,
                    3893,
                    3894,
                    951,
                    952,
                    3924,
                    3926,
                    3931,
                    3935,
                    3939,
                    3941,
                    3943,
                    3945,
                    636,
                    639
                ],
                "obj": [
                    640,
                    4514,
                    6009,
                    4495,
                    3890,
                    4507,
                    3894,
                    6008,
                    3897,
                    3899,
                    638,
                    639
                ],
                "obj.set_axis": [
                    639
                ],
                "self._data.set_axis": [
                    643
                ],
                "self._clear_item_cache": [
                    644,
                    5254,
                    3274,
                    3583,
                    3967
                ],
                "self._construct_axes_from_arguments": [
                    4452,
                    3884,
                    1071,
                    670,
                    1247
                ],
                "axes_names": [
                    673,
                    681
                ],
                "axes_numbers": [
                    674,
                    683
                ],
                "self._get_axis_number": [
                    10240,
                    4229,
                    3472,
                    7952,
                    1555,
                    8595,
                    4506,
                    9115,
                    7581,
                    1694,
                    928,
                    4896,
                    674,
                    1584,
                    949,
                    1079,
                    9912,
                    698,
                    699,
                    5952,
                    1345,
                    6728,
                    3916,
                    9932,
                    10194,
                    9173,
                    7254,
                    1754,
                    11102,
                    1635,
                    1254,
                    7658,
                    3948,
                    7149,
                    10223,
                    8177,
                    7411,
                    8312,
                    9343
                ],
                "self._AXIS_LEN": [
                    708,
                    1636,
                    1094,
                    678,
                    4519,
                    9135,
                    1585,
                    1278,
                    1695
                ],
                "new_axes": [
                    680,
                    713,
                    708,
                    688
                ],
                "self._construct_axes_dict_from": [
                    680
                ],
                "x": [
                    4647,
                    681,
                    4654,
                    9934,
                    9782,
                    9788
                ],
                "new_values": [
                    3522,
                    709,
                    711,
                    713,
                    683,
                    685,
                    688,
                    3508,
                    3515,
                    3516,
                    3519
                ],
                "self.values.transpose": [
                    683
                ],
                "self.values": [
                    5408,
                    5413,
                    709,
                    683,
                    7128,
                    5433
                ],
                "new_values.copy": [
                    685,
                    711
                ],
                "nv.validate_transpose": [
                    687
                ],
                "nv": [
                    11037,
                    687,
                    10995,
                    7252,
                    10997,
                    11059,
                    10999,
                    11161,
                    11098,
                    3357,
                    11039
                ],
                "self._constructor": [
                    8192,
                    11142,
                    1929,
                    6025,
                    8587,
                    8461,
                    6800,
                    5777,
                    6803,
                    9370,
                    8991,
                    3364,
                    1445,
                    5285,
                    6959,
                    688,
                    8624,
                    8509,
                    8894,
                    5829,
                    5320,
                    713,
                    5323,
                    4563,
                    5726,
                    5475,
                    5613,
                    9200,
                    3572,
                    7164,
                    6526
                ],
                "axis1": [
                    698
                ],
                "j": [
                    706,
                    709,
                    952,
                    699,
                    701
                ],
                "axis2": [
                    699
                ],
                "mapping": [
                    706,
                    708
                ],
                "mapping.get": [
                    708
                ],
                "self.values.swapaxes": [
                    709
                ],
                "new_labels": [
                    771,
                    772
                ],
                "labels.droplevel": [
                    771
                ],
                "self.set_axis": [
                    772
                ],
                "item": [
                    3557,
                    3559,
                    3213,
                    816,
                    817,
                    3542,
                    3223,
                    3544,
                    3545,
                    3546,
                    3547
                ],
                "result._reset_cacher": [
                    819
                ],
                "self._AXIS_NAMES": [
                    928,
                    1279,
                    1095
                ],
                "self.iloc": [
                    929,
                    3526,
                    5606,
                    4779,
                    4780,
                    4719,
                    8084,
                    8025,
                    3482
                ],
                "self.axes": [
                    932,
                    1701,
                    1641,
                    1642,
                    4907,
                    1101,
                    1105,
                    1590,
                    1560,
                    8541
                ],
                "result._data.axes": [
                    951
                ],
                "result._data.set_axis": [
                    952
                ],
                "labels.swaplevel": [
                    952
                ],
                "errors": [
                    3938,
                    8804,
                    3944,
                    8619,
                    5612,
                    5585,
                    1106,
                    1076,
                    3924,
                    3894,
                    3926,
                    2491,
                    5597,
                    8766
                ],
                "kwargs.keys": [
                    4468,
                    1259,
                    1084
                ],
                "com.count_not_none": [
                    4519,
                    4630,
                    1087
                ],
                "com": [
                    1920,
                    10243,
                    1286,
                    4630,
                    4900,
                    4519,
                    5035,
                    1453,
                    8501,
                    1467,
                    3516,
                    8764,
                    1087,
                    9922,
                    1098,
                    1485,
                    8791,
                    3931,
                    1757,
                    11104,
                    3687,
                    3689,
                    8570
                ],
                "axes.values": [
                    4519,
                    1087
                ],
                "self._consolidate_inplace": [
                    3489,
                    1090,
                    5281,
                    6372,
                    4471,
                    5402,
                    5946,
                    3359
                ],
                "axes.get": [
                    1279,
                    1095
                ],
                "f": [
                    11009,
                    5252,
                    1286,
                    1288,
                    5263,
                    11169,
                    5283,
                    5284,
                    11047,
                    4649,
                    5289,
                    5290,
                    5294,
                    5295,
                    4657,
                    5299,
                    5300,
                    4025,
                    4027,
                    11069,
                    1098,
                    1113,
                    4084,
                    4086
                ],
                "com.get_rename_function": [
                    1098,
                    1286
                ],
                "baxis": [
                    1113,
                    4554,
                    1099,
                    4541
                ],
                "_get_level_number": [
                    1101
                ],
                "indexer": [
                    3203,
                    3204,
                    4502,
                    3480,
                    3482,
                    4508,
                    7585,
                    7589,
                    4540,
                    4547,
                    4548,
                    4553,
                    1105,
                    1106,
                    1108,
                    3935,
                    3938,
                    3941,
                    3948,
                    7662,
                    7671
                ],
                "get_indexer_for": [
                    1105
                ],
                "missing_labels": [
                    1107,
                    1110
                ],
                "label": [
                    3024,
                    1108,
                    7956
                ],
                "index": [
                    8960,
                    8963,
                    6788,
                    8976,
                    8977,
                    8980,
                    8989,
                    7583,
                    7585,
                    3491,
                    3492,
                    3879,
                    3883,
                    3884,
                    2350,
                    2486,
                    4540,
                    3006,
                    4543,
                    4546,
                    4552,
                    1108,
                    2646,
                    6761,
                    3179,
                    6763,
                    2157,
                    6766,
                    6767,
                    6768,
                    7660,
                    7662,
                    6778,
                    8958
                ],
                "result._data.rename_axis": [
                    1112
                ],
                "result._clear_item_cache": [
                    1115
                ],
                "result.__finalize__": [
                    1120,
                    9202,
                    9372,
                    3573
                ],
                "validate_bool_kwarg": [
                    6368,
                    4228,
                    3876,
                    1348,
                    6726,
                    5772,
                    5773,
                    1262,
                    5774,
                    5775,
                    5776,
                    7250,
                    8498,
                    8790,
                    5943,
                    5279
                ],
                "mapper": [
                    1264,
                    1266,
                    1267,
                    4087,
                    1270,
                    4086,
                    4027,
                    4028
                ],
                "non_mapper": [
                    1283,
                    1266,
                    1282,
                    1269
                ],
                "is_scalar": [
                    1282,
                    1924,
                    7268,
                    1512,
                    7272,
                    7273,
                    3504,
                    7152,
                    1266,
                    3507,
                    10258
                ],
                "is_list_like": [
                    6465,
                    1282,
                    6466,
                    5223,
                    6920,
                    6923,
                    6449,
                    6514,
                    1267,
                    6487,
                    7162,
                    3515,
                    6012,
                    7261,
                    7263,
                    5983
                ],
                "is_dict_like": [
                    6400,
                    6433,
                    1282,
                    6434,
                    6501,
                    5577,
                    6377,
                    1267,
                    6387,
                    6388,
                    6488
                ],
                "self._set_axis_name": [
                    1270
                ],
                "newnames": [
                    1288,
                    1289,
                    1284
                ],
                "curnames": [
                    1288,
                    1287
                ],
                "names": [
                    9734,
                    1287,
                    1641,
                    9752,
                    9742,
                    9748,
                    9717,
                    9781,
                    1560,
                    9785,
                    9786,
                    9788
                ],
                "result._set_axis_name": [
                    1289
                ],
                "rewrite_axis_style_signature": [
                    1122
                ],
                "idx": [
                    1346,
                    1350
                ],
                "set_names": [
                    1346
                ],
                "renamed": [
                    1352,
                    1349,
                    1350
                ],
                "renamed.set_axis": [
                    1350
                ],
                "equals": [
                    3368,
                    8541,
                    1359
                ],
                "other._get_axis": [
                    8541,
                    1359
                ],
                "other": [
                    8448,
                    8450,
                    8325,
                    8327,
                    8587,
                    3855,
                    8464,
                    8592,
                    8338,
                    8466,
                    8603,
                    8606,
                    8482,
                    1445,
                    1447,
                    8360,
                    8616,
                    8362,
                    5165,
                    5166,
                    5167,
                    8366,
                    8368,
                    5170,
                    8380,
                    8764,
                    8766,
                    8398,
                    1359,
                    8273,
                    8530,
                    8533,
                    8279,
                    8535,
                    8536,
                    8282,
                    8541,
                    8799,
                    8292,
                    8421,
                    8295,
                    8551,
                    8297,
                    8425,
                    8553,
                    8429,
                    8561,
                    8562,
                    8437,
                    8566,
                    8439,
                    8313,
                    8315,
                    8572,
                    8573
                ],
                "self._data.equals": [
                    1447
                ],
                "other._data": [
                    1447
                ],
                "com.values_from_object": [
                    1920,
                    11104,
                    9922,
                    1485,
                    1453,
                    8570,
                    1467
                ],
                "is_bool_dtype": [
                    8519,
                    8523,
                    1454,
                    9755,
                    1468
                ],
                "arr": [
                    1475,
                    1478,
                    1485,
                    1486,
                    1455,
                    1461,
                    1464,
                    1469
                ],
                "operator.inv": [
                    1485,
                    1455
                ],
                "operator": [
                    1485,
                    1475,
                    1461,
                    1455
                ],
                "is_numeric_dtype": [
                    1457,
                    9757,
                    6766,
                    1471
                ],
                "is_timedelta64_dtype": [
                    1472,
                    1458,
                    6768,
                    9759
                ],
                "is_object_dtype": [
                    1473,
                    1459
                ],
                "operator.neg": [
                    1461
                ],
                "self.__array_wrap__": [
                    1464,
                    1486,
                    1478
                ],
                "is_period_arraylike": [
                    1468
                ],
                "operator.pos": [
                    1475
                ],
                "self.size": [
                    1481,
                    6429
                ],
                "__bool__": [
                    1494
                ],
                "__nonzero__": [
                    1494
                ],
                "self.squeeze": [
                    1509
                ],
                "np.bool_": [
                    3498,
                    11134,
                    1510
                ],
                "self.__nonzero__": [
                    1518
                ],
                "self.abs": [
                    1521
                ],
                "self.round": [
                    1524
                ],
                "decimals": [
                    1524
                ],
                "is_hashable": [
                    1640,
                    1589,
                    1559
                ],
                "self._is_label_reference": [
                    1561,
                    1697,
                    1613
                ],
                "other_axes": [
                    1699,
                    1636,
                    1642,
                    1708,
                    1585,
                    1590,
                    1695
                ],
                "self._is_level_reference": [
                    1773,
                    1771,
                    1700,
                    1613
                ],
                "level_article": [
                    1646,
                    1655
                ],
                "level_type": [
                    1646,
                    1655
                ],
                "label_article": [
                    1656,
                    1650
                ],
                "label_type": [
                    1656,
                    1650
                ],
                "msg": [
                    8515,
                    8966,
                    8967,
                    8520,
                    8524,
                    9773,
                    9774,
                    8180,
                    8181,
                    1654,
                    8982,
                    1658,
                    8986
                ],
                "self._check_label_or_level_ambiguity": [
                    1698
                ],
                "_values": [
                    1699,
                    1701
                ],
                "self.xs": [
                    1699
                ],
                "get_level_values": [
                    1701
                ],
                "values.ndim": [
                    1706
                ],
                "multi_message": [
                    1722,
                    1716,
                    1709
                ],
                "label_axis_name": [
                    1721,
                    1718
                ],
                "np.ndarray": [
                    3497,
                    1660,
                    8551
                ],
                "keys": [
                    1771,
                    1773,
                    6414,
                    6416,
                    6450,
                    6451,
                    6452,
                    6421,
                    1757,
                    6398,
                    1759
                ],
                "com.maybe_make_list": [
                    1757
                ],
                "invalid_keys": [
                    1766,
                    1762,
                    1758
                ],
                "self._is_label_or_level_reference": [
                    1759
                ],
                "levels_to_drop": [
                    1793,
                    1771,
                    1782,
                    1783,
                    1790
                ],
                "labels_to_drop": [
                    1800,
                    1801,
                    1773,
                    1786,
                    1787
                ],
                "dropped": [
                    1793,
                    1797,
                    1801,
                    1803,
                    1778,
                    1783,
                    1787,
                    1791
                ],
                "dropped.reset_index": [
                    1783
                ],
                "dropped.drop": [
                    1801,
                    1787
                ],
                "dropped.columns": [
                    1793,
                    1797,
                    1791
                ],
                "dropped.columns.droplevel": [
                    1793
                ],
                "RangeIndex": [
                    1797
                ],
                "dropped.columns.size": [
                    1797
                ],
                "self._info_axis": [
                    1857,
                    5218,
                    3555,
                    5188,
                    1861,
                    1837,
                    5239,
                    1848,
                    5465,
                    1823
                ],
                "h": [
                    1848,
                    1849
                ],
                "Appender": [
                    7043,
                    7047,
                    10255,
                    11159,
                    11032,
                    8743,
                    5033,
                    11055,
                    8881,
                    9909,
                    6711,
                    1851,
                    10300,
                    8257,
                    8769,
                    10306,
                    10183,
                    7113,
                    7117,
                    2127,
                    6358,
                    11096,
                    10984,
                    10221,
                    10228,
                    9980
                ],
                "items.__doc__": [
                    1851
                ],
                "items": [
                    4641,
                    4643,
                    5476,
                    6413,
                    4630,
                    1851,
                    6397,
                    6398
                ],
                "__array_priority__": [
                    1917
                ],
                "lib.item_from_zerodim": [
                    1923
                ],
                "lib": [
                    1923
                ],
                "self._construct_axes_dict": [
                    11105,
                    1928,
                    8297,
                    8587,
                    8509
                ],
                "meta": [
                    1966,
                    1967,
                    1973,
                    1943,
                    1949
                ],
                "self._metadata": [
                    5211,
                    1966,
                    5169,
                    1943,
                    1947,
                    5183
                ],
                "self._typ": [
                    1946
                ],
                "self.attrs": [
                    1948,
                    5167
                ],
                "state": [
                    1954,
                    1955,
                    1956,
                    1957,
                    1959,
                    1968,
                    1969,
                    1972,
                    1977,
                    1978,
                    1979
                ],
                "typ": [
                    1957,
                    1958
                ],
                "state.get": [
                    1957,
                    1959
                ],
                "self._internal_names": [
                    1966
                ],
                "state.items": [
                    1972
                ],
                "self._unpickle_series_compat": [
                    1977,
                    1979
                ],
                "self._item_cache": [
                    3277,
                    3721,
                    3541,
                    1981
                ],
                "prepr": [
                    1989,
                    1990
                ],
                "join": [
                    8450,
                    1989,
                    8328,
                    8425,
                    8362,
                    10316,
                    8301,
                    8368,
                    8439,
                    8283,
                    8316
                ],
                "pprint_thing": [
                    1989
                ],
                "config.get_option": [
                    3649,
                    1997,
                    2990,
                    2992,
                    2994,
                    2996,
                    2998,
                    2007,
                    2008
                ],
                "config": [
                    2336,
                    3649,
                    1997,
                    2990,
                    2992,
                    2994,
                    2996,
                    2998,
                    2007,
                    2008
                ],
                "self.to_latex": [
                    1998
                ],
                "self.head": [
                    2008
                ],
                "payload": [
                    2009,
                    2012
                ],
                "json.loads": [
                    2009
                ],
                "json": [
                    2009,
                    2339
                ],
                "data.to_json": [
                    2010
                ],
                "collections.OrderedDict": [
                    2010
                ],
                "collections": [
                    2010
                ],
                "df": [
                    3168,
                    2147,
                    2152,
                    8296,
                    8300,
                    8278,
                    8281,
                    3163
                ],
                "ABCDataFrame": [
                    6016,
                    2147,
                    8517,
                    5223,
                    6381,
                    4911,
                    8313,
                    3163
                ],
                "self.to_frame": [
                    3163,
                    2147,
                    2988
                ],
                "formatter": [
                    3015,
                    2151,
                    2162,
                    3189,
                    3000,
                    3192,
                    3167
                ],
                "ExcelFormatter": [
                    2151
                ],
                "na_rep": [
                    2153,
                    3004,
                    3175
                ],
                "columns": [
                    3879,
                    3177,
                    2154,
                    3883,
                    3884,
                    3002
                ],
                "header": [
                    3178,
                    2155,
                    3005
                ],
                "float_format": [
                    3008,
                    3176,
                    2156
                ],
                "index_label": [
                    3180,
                    2158,
                    2647
                ],
                "merge_cells": [
                    2159
                ],
                "inf_rep": [
                    2160
                ],
                "formatter.write": [
                    2162
                ],
                "excel_writer": [
                    2163
                ],
                "sheet_name": [
                    2164
                ],
                "startrow": [
                    2165
                ],
                "startcol": [
                    2166
                ],
                "freeze_panes": [
                    2167
                ],
                "engine": [
                    2168
                ],
                "FilePathOrBuffer": [
                    3029,
                    2173
                ],
                "Callable": [
                    2179,
                    3534
                ],
                "JSONSerializable": [
                    2179
                ],
                "date_format": [
                    2343,
                    3184,
                    2331,
                    2332,
                    2333,
                    2334
                ],
                "orient": [
                    2331,
                    2342
                ],
                "config.is_nonnegative_int": [
                    2336
                ],
                "indent": [
                    2336,
                    2337,
                    2351
                ],
                "json.to_json": [
                    2339
                ],
                "path_or_buf": [
                    3169,
                    2340,
                    2478,
                    3191
                ],
                "double_precision": [
                    2344
                ],
                "force_ascii": [
                    2345
                ],
                "date_unit": [
                    2346
                ],
                "default_handler": [
                    2347
                ],
                "lines": [
                    2348
                ],
                "compression": [
                    2712,
                    3173,
                    2349
                ],
                "Union": [
                    3034,
                    3036,
                    2364,
                    3039
                ],
                "pytables.to_hdf": [
                    2477
                ],
                "pytables": [
                    2477
                ],
                "mode": [
                    2481,
                    3181
                ],
                "complevel": [
                    2482
                ],
                "complib": [
                    2483
                ],
                "append": [
                    2484
                ],
                "min_itemsize": [
                    2487
                ],
                "nan_rep": [
                    2488
                ],
                "dropna": [
                    2489
                ],
                "data_columns": [
                    2490
                ],
                "encoding": [
                    3172,
                    3019,
                    2492
                ],
                "sql.to_sql": [
                    2640
                ],
                "sql": [
                    2640
                ],
                "con": [
                    2643
                ],
                "schema": [
                    2644
                ],
                "if_exists": [
                    2645
                ],
                "chunksize": [
                    2648,
                    3182
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    2657
                ],
                "pickle": [
                    2657
                ],
                "to_pickle": [
                    2712
                ],
                "path": [
                    2712
                ],
                "protocol": [
                    2712
                ],
                "clipboards.to_clipboard": [
                    2770
                ],
                "clipboards": [
                    2770
                ],
                "excel": [
                    2770
                ],
                "sep": [
                    2770,
                    3171
                ],
                "xarray": [
                    2848,
                    2851,
                    2853
                ],
                "import_optional_dependency": [
                    2848
                ],
                "xarray.DataArray.from_series": [
                    2851
                ],
                "xarray.DataArray": [
                    2851
                ],
                "xarray.Dataset.from_dataframe": [
                    2853
                ],
                "xarray.Dataset": [
                    2853
                ],
                "longtable": [
                    3018,
                    2989,
                    2990
                ],
                "escape": [
                    2992,
                    3012,
                    2991
                ],
                "multicolumn": [
                    2993,
                    2994,
                    3020
                ],
                "multicolumn_format": [
                    2995,
                    2996,
                    3021
                ],
                "multirow": [
                    3022,
                    2997,
                    2998
                ],
                "DataFrameFormatter": [
                    3000
                ],
                "col_space": [
                    3003
                ],
                "formatters": [
                    3007
                ],
                "bold_rows": [
                    3009
                ],
                "sparsify": [
                    3010
                ],
                "index_names": [
                    3011
                ],
                "decimal": [
                    3187,
                    3013
                ],
                "formatter.to_latex": [
                    3015
                ],
                "buf": [
                    3016
                ],
                "column_format": [
                    3017
                ],
                "caption": [
                    3023
                ],
                "Substitution": [
                    2855,
                    11054,
                    11023,
                    11088,
                    11150,
                    9970,
                    10975
                ],
                "fmt.return_docstring": [
                    2855
                ],
                "fmt": [
                    2855
                ],
                "Sequence": [
                    3033,
                    3036
                ],
                "CSVFormatter": [
                    3167
                ],
                "line_terminator": [
                    3170
                ],
                "quoting": [
                    3174
                ],
                "quotechar": [
                    3183
                ],
                "doublequote": [
                    3185
                ],
                "escapechar": [
                    3186
                ],
                "formatter.save": [
                    3189
                ],
                "formatter.path_or_buf.getvalue": [
                    3192
                ],
                "formatter.path_or_buf": [
                    3192
                ],
                "_indexer": [
                    3203,
                    3204,
                    11181,
                    11182,
                    3478,
                    3479,
                    3480
                ],
                "functools.partial": [
                    4025,
                    3203,
                    4084
                ],
                "functools": [
                    4025,
                    3203,
                    4084
                ],
                "indexer.__doc__": [
                    3204
                ],
                "self._cacher": [
                    3218,
                    3259,
                    3213
                ],
                "weakref.ref": [
                    3213,
                    3590
                ],
                "weakref": [
                    3213,
                    3590
                ],
                "cacher": [
                    3232,
                    3233,
                    3234,
                    3235,
                    3264,
                    3213,
                    3252,
                    3253,
                    3254
                ],
                "self._data.set": [
                    3582,
                    3223
                ],
                "ref": [
                    3264,
                    3607,
                    3589,
                    3590,
                    3254,
                    3606,
                    3258
                ],
                "ref._maybe_cache_changed": [
                    3264
                ],
                "verify_is_copy": [
                    3969,
                    3270
                ],
                "self._check_setitem_copy": [
                    3608,
                    3611,
                    3271
                ],
                "clear": [
                    3273
                ],
                "self._item_cache.clear": [
                    3277
                ],
                "nv.validate_take": [
                    3357
                ],
                "new_data": [
                    6017,
                    6785,
                    6022,
                    6025,
                    6800,
                    6801,
                    6803,
                    8979,
                    8980,
                    8604,
                    8988,
                    8989,
                    8991,
                    6432,
                    3361,
                    3364,
                    8612,
                    8615,
                    8624,
                    6454,
                    8888,
                    4538,
                    8894,
                    4551,
                    6473,
                    5966,
                    4560,
                    4561,
                    6481,
                    4563,
                    6502,
                    5992,
                    6506,
                    5612,
                    5613,
                    6515,
                    6524,
                    6013,
                    6526
                ],
                "self._data.take": [
                    3361
                ],
                "indices": [
                    3362
                ],
                "is_copy": [
                    3577,
                    3578,
                    3367
                ],
                "result._get_axis": [
                    3368
                ],
                "result._set_is_copy": [
                    3369,
                    3578,
                    3531
                ],
                "loc": [
                    3475,
                    3479,
                    6944,
                    6945,
                    6946,
                    3493,
                    6949,
                    3495,
                    6950,
                    3497,
                    3498,
                    3499,
                    6951,
                    3502,
                    3504,
                    3505,
                    3507,
                    3508,
                    3521,
                    3526
                ],
                "new_ax": [
                    3475,
                    3483
                ],
                "labels.get_loc_level": [
                    3475
                ],
                "drop_level": [
                    3475,
                    3493
                ],
                "result._get_axis_name": [
                    3483
                ],
                "new_index": [
                    3493,
                    3527,
                    3505,
                    4502,
                    4508
                ],
                "self.index.get_loc_level": [
                    3493
                ],
                "self.index.get_loc": [
                    3495
                ],
                "loc.dtype": [
                    3498
                ],
                "inds": [
                    3499,
                    3500
                ],
                "loc.nonzero": [
                    3499
                ],
                "self.take": [
                    7589,
                    3559,
                    3500,
                    3502,
                    4978,
                    7671,
                    6973
                ],
                "self._data.fast_xs": [
                    3508
                ],
                "com.maybe_box_datetimelike": [
                    3516
                ],
                "self._constructor_sliced": [
                    3518
                ],
                "self.columns": [
                    3520,
                    8448,
                    8449,
                    5607,
                    6919,
                    8297,
                    8366,
                    8367,
                    9680,
                    5617,
                    3698,
                    6963,
                    3700,
                    6934,
                    6967,
                    3709,
                    8446
                ],
                "new_values.dtype": [
                    3522
                ],
                "result.index": [
                    3527
                ],
                "result._is_view": [
                    3577,
                    3531
                ],
                "_xs": [
                    3534
                ],
                "xs": [
                    3534
                ],
                "cache": [
                    3546,
                    3541,
                    3542
                ],
                "res": [
                    6435,
                    6440,
                    6446,
                    6803,
                    6805,
                    3542,
                    3543,
                    6806,
                    3545,
                    3546,
                    3547,
                    3550,
                    3551
                ],
                "cache.get": [
                    3542
                ],
                "self._data.get": [
                    3544
                ],
                "self._box_item_values": [
                    3545
                ],
                "res._set_as_cached": [
                    3547
                ],
                "res._is_copy": [
                    3550
                ],
                "self._is_copy": [
                    3587,
                    3590,
                    3655,
                    3592,
                    3646,
                    3656,
                    3658,
                    3662,
                    3663,
                    3610,
                    3550
                ],
                "ax.is_unique": [
                    3556
                ],
                "lower": [
                    7136,
                    7267,
                    7268,
                    3557,
                    7269,
                    3559,
                    3560,
                    7272,
                    7275,
                    7278,
                    7280,
                    7122,
                    7262,
                    7261,
                    7134,
                    7135
                ],
                "self._get_item_cache": [
                    3557
                ],
                "self._info_axis_number": [
                    3559
                ],
                "self._data.get_slice": [
                    3572
                ],
                "slobj": [
                    3572
                ],
                "self._is_view": [
                    3605
                ],
                "self._is_cached": [
                    3605
                ],
                "self._get_cacher": [
                    3606
                ],
                "ref._is_mixed_type": [
                    3607
                ],
                "force": [
                    3646
                ],
                "r": [
                    3656,
                    3657,
                    4643
                ],
                "gc.get_referents": [
                    3657
                ],
                "gc": [
                    3657
                ],
                "r.shape": [
                    3657
                ],
                "t": [
                    3687,
                    3689,
                    3663,
                    3665,
                    3666,
                    3676
                ],
                "com.SettingWithCopyError": [
                    3687
                ],
                "warnings.warn": [
                    5224,
                    3689
                ],
                "warnings": [
                    5224,
                    3689
                ],
                "com.SettingWithCopyWarning": [
                    3689
                ],
                "stacklevel": [
                    3689
                ],
                "deleted": [
                    3712,
                    3713,
                    3695
                ],
                "maybe_shortcut": [
                    3704,
                    3697,
                    3700
                ],
                "self.columns._engine": [
                    3700
                ],
                "col": [
                    5600,
                    3709,
                    5594,
                    5597,
                    3710,
                    3711
                ],
                "self._data.delete": [
                    3717
                ],
                "default": [
                    3745
                ],
                "self._data.is_view": [
                    3750
                ],
                "other._construct_axes_dict": [
                    8279,
                    3855
                ],
                "tolerance": [
                    4457,
                    4490,
                    3860,
                    4503
                ],
                "self.reindex": [
                    4643,
                    4243,
                    3927,
                    3863
                ],
                "_": [
                    9779,
                    3884,
                    8535,
                    8503
                ],
                "obj._drop_axis": [
                    3894
                ],
                "axis.is_unique": [
                    3920
                ],
                "new_axis": [
                    4242,
                    4243,
                    3924,
                    3926,
                    3927
                ],
                "axis.drop": [
                    3924,
                    3926
                ],
                "ensure_object": [
                    3931
                ],
                "com.index_labels_to_array": [
                    3931
                ],
                "isin": [
                    3935
                ],
                "axis.get_level_values": [
                    3935
                ],
                "indexer.all": [
                    3938
                ],
                "axis.isin": [
                    3941
                ],
                "labels_missing": [
                    3944,
                    3943
                ],
                "axis.get_indexer_for": [
                    3943
                ],
                "slicer": [
                    3947,
                    3948,
                    3950,
                    9135,
                    9136,
                    9137
                ],
                "self.loc": [
                    4650,
                    3950,
                    9137,
                    4658,
                    8027
                ],
                "self._reset_cache": [
                    3966
                ],
                "self._maybe_update_cacher": [
                    3969
                ],
                "self.rename": [
                    4028,
                    4087
                ],
                "suffix": [
                    4084
                ],
                "sort_index": [
                    4240,
                    4242,
                    4238
                ],
                "labels.argsort": [
                    4238
                ],
                "ascending": [
                    8188,
                    4239
                ],
                "labels.take": [
                    4242
                ],
                "missing.clean_reindex_fill_method": [
                    4453
                ],
                "fill_value": [
                    8320,
                    8383,
                    8512,
                    8513,
                    4486,
                    4458,
                    4555,
                    4490,
                    7532,
                    8332,
                    8305,
                    8889,
                    8469,
                    8471,
                    8472,
                    8377,
                    4509,
                    8287
                ],
                "identical": [
                    4476
                ],
                "self._needs_reindex_multi": [
                    4485
                ],
                "self._reindex_multi": [
                    4486
                ],
                "self._reindex_axes": [
                    4489
                ],
                "ax.reindex": [
                    4502
                ],
                "obj._reindex_with_indexers": [
                    4507
                ],
                "self._is_mixed_type": [
                    5305,
                    4522,
                    5956
                ],
                "reindexers.keys": [
                    4539
                ],
                "reindexers": [
                    8372,
                    8374,
                    8377,
                    4539,
                    4540
                ],
                "ensure_index": [
                    4546
                ],
                "ensure_int64": [
                    4548
                ],
                "new_data.reindex_indexer": [
                    4551
                ],
                "allow_dups": [
                    4556
                ],
                "new_data.copy": [
                    4561
                ],
                "nkw": [
                    4630,
                    4631
                ],
                "like": [
                    4644,
                    4630,
                    4647
                ],
                "regex": [
                    4630,
                    6424,
                    4651,
                    6444,
                    4656,
                    6459,
                    6477,
                    6482,
                    6486,
                    6487,
                    6488,
                    6493,
                    6496,
                    6369,
                    6377,
                    6511,
                    6388,
                    6516,
                    6394,
                    6395
                ],
                "ensure_str": [
                    4654,
                    4647
                ],
                "labels.map": [
                    4649,
                    4657
                ],
                "matcher.search": [
                    4654
                ],
                "matcher": [
                    4656,
                    4654
                ],
                "re.compile": [
                    4656
                ],
                "re": [
                    4656
                ],
                "n": [
                    4964,
                    4966,
                    4967,
                    4968,
                    4778,
                    4780,
                    4972,
                    4719,
                    4977,
                    4957,
                    4958
                ],
                "self._stat_axis_number": [
                    9985,
                    11043,
                    11100,
                    7657,
                    11063,
                    9114,
                    11003,
                    7580,
                    4894
                ],
                "axis_length": [
                    4897,
                    4977,
                    4933,
                    4967
                ],
                "rs": [
                    9920,
                    9923,
                    4900,
                    9924,
                    4977,
                    9918,
                    9919
                ],
                "com.random_state": [
                    4900
                ],
                "random_state": [
                    4900
                ],
                "weights": [
                    4931,
                    4933,
                    4903,
                    4906,
                    4907,
                    4938,
                    4941,
                    4910,
                    4945,
                    4914,
                    4977,
                    4948,
                    4949,
                    4950,
                    4954
                ],
                "ABCSeries": [
                    6913,
                    8292,
                    8325,
                    8357,
                    7163,
                    4906,
                    5996,
                    8274,
                    7162,
                    5979,
                    8413
                ],
                "weights.reindex": [
                    4907
                ],
                "np.inf": [
                    10040,
                    4938,
                    10079
                ],
                "weights.fillna": [
                    4945
                ],
                "weights.sum": [
                    4948,
                    4949,
                    4950
                ],
                "weights.values": [
                    4954
                ],
                "frac": [
                    4964,
                    4966,
                    4967,
                    4968,
                    4957,
                    4959
                ],
                "replace": [
                    6440,
                    4977,
                    4959
                ],
                "locs": [
                    4977,
                    4978,
                    6969,
                    6972,
                    6973
                ],
                "rs.choice": [
                    4977
                ],
                "com.pipe": [
                    5035
                ],
                "func": [
                    10257,
                    5035
                ],
                "dedent": [
                    5037
                ],
                "NDFrame": [
                    11182,
                    5165,
                    8502
                ],
                "other.attrs": [
                    5166,
                    5167
                ],
                "self._internal_names_set": [
                    5209,
                    5182
                ],
                "self._accessors": [
                    5184
                ],
                "object.__getattribute__": [
                    5186,
                    5202,
                    5190
                ],
                "self._info_axis._can_hold_identifiers_and_holds_name": [
                    5188
                ],
                "existing": [
                    5216,
                    5215
                ],
                "additions": [
                    5242,
                    5237
                ],
                "c": [
                    6436,
                    6437,
                    6440,
                    8297,
                    6442,
                    5238,
                    5239,
                    5240,
                    8279
                ],
                "self._info_axis.unique": [
                    5239
                ],
                "c.isidentifier": [
                    5240
                ],
                "union": [
                    5242
                ],
                "_dir_additions": [
                    5242
                ],
                "blocks_before": [
                    5251,
                    5253
                ],
                "self._data.blocks": [
                    5251,
                    5253
                ],
                "self._data.consolidate": [
                    5283,
                    5261
                ],
                "self._protect_consolidate": [
                    5284,
                    5290,
                    5295,
                    5263,
                    5300
                ],
                "cons_data": [
                    5284,
                    5285
                ],
                "self._data.is_mixed_type": [
                    5289
                ],
                "self._data.is_numeric_mixed_type": [
                    5294
                ],
                "self._data.is_datelike_mixed_type": [
                    5299
                ],
                "self._is_numeric_mixed_type": [
                    5306
                ],
                "is_float": [
                    5309
                ],
                "np.isnan": [
                    5309
                ],
                "self._data.get_numeric_data": [
                    5320
                ],
                "self._data.get_bool_data": [
                    5323
                ],
                "self._data.as_array": [
                    5403
                ],
                "self._AXIS_REVERSED": [
                    8610,
                    5403
                ],
                "Series": [
                    5465,
                    6934,
                    6967
                ],
                "self._data.get_dtypes": [
                    5465
                ],
                "np.object_": [
                    5465
                ],
                "self._data.to_dict": [
                    5476
                ],
                "self.name": [
                    5584,
                    5579,
                    6959
                ],
                "new_type": [
                    5584,
                    5585
                ],
                "self.astype": [
                    5585
                ],
                "col_name": [
                    5587,
                    5588,
                    5594,
                    5595,
                    5597
                ],
                "dtype.keys": [
                    5587
                ],
                "results": [
                    5600,
                    5605,
                    5616,
                    5593,
                    5596
                ],
                "results.append": [
                    5600,
                    5596
                ],
                "col.astype": [
                    5597
                ],
                "col.copy": [
                    5600
                ],
                "is_extension_array_dtype": [
                    5602
                ],
                "astype": [
                    5606
                ],
                "self._data.astype": [
                    5612
                ],
                "pd.concat": [
                    5616,
                    9788
                ],
                "result.columns": [
                    5617
                ],
                "self._data.copy": [
                    8979,
                    8988,
                    5725
                ],
                "deep": [
                    5729,
                    5725
                ],
                "datetime": [
                    5779,
                    5772
                ],
                "numeric": [
                    5780,
                    5773
                ],
                "timedelta": [
                    5781,
                    5774,
                    9335
                ],
                "coerce": [
                    5782,
                    5775
                ],
                "self._data.convert": [
                    5778,
                    5830
                ],
                "validate_fillna_kwargs": [
                    5944
                ],
                "T": [
                    6800,
                    5959
                ],
                "self.T.fillna": [
                    5959
                ],
                "self.T": [
                    6734,
                    5959
                ],
                "result._data.downcast": [
                    5962
                ],
                "self._data.interpolate": [
                    5966
                ],
                "downcast": [
                    5993,
                    6794,
                    6062,
                    5972,
                    6009,
                    6043,
                    6014
                ],
                "create_series_with_explicit_dtype": [
                    5980
                ],
                "self._data.fillna": [
                    5992,
                    6013
                ],
                "value.items": [
                    6504,
                    6005
                ],
                "obj.fillna": [
                    6009
                ],
                "self.where": [
                    6017,
                    8797,
                    7167
                ],
                "self.notna": [
                    6017
                ],
                "self.fillna": [
                    6042,
                    9916,
                    6061
                ],
                "is_bool": [
                    6369
                ],
                "self.apply": [
                    6382
                ],
                "_single_replace": [
                    6385,
                    6383
                ],
                "to_replace.items": [
                    6450,
                    6436,
                    6397
                ],
                "are_mappings": [
                    6400,
                    6402,
                    6403
                ],
                "to_rep_dict": [
                    6416,
                    6410,
                    6419
                ],
                "value_dict": [
                    6419,
                    6417,
                    6411
                ],
                "v.items": [
                    6414
                ],
                "self.replace": [
                    6495,
                    6423
                ],
                "src": [
                    6436,
                    6441,
                    6450,
                    6452,
                    6455
                ],
                "keys_len": [
                    6451,
                    6453
                ],
                "convert": [
                    6460,
                    6453
                ],
                "new_data.replace": [
                    6506,
                    6454
                ],
                "self._data.replace_list": [
                    6473
                ],
                "self._data.replace": [
                    6481,
                    6515
                ],
                "is_re_compilable": [
                    6486
                ],
                "_maybe_transposed_self": [
                    6784,
                    6789,
                    6761,
                    6763,
                    6732,
                    6734,
                    6737,
                    6739,
                    6744,
                    6749,
                    6750
                ],
                "_maybe_transposed_self._get_axis_number": [
                    6737
                ],
                "_maybe_transposed_self.ndim": [
                    6739
                ],
                "alt_ax": [
                    6761,
                    6763,
                    6740,
                    6742
                ],
                "_maybe_transposed_self.index": [
                    6744
                ],
                "get": [
                    6749
                ],
                "_maybe_transposed_self._data.get_dtype_counts": [
                    6749
                ],
                "_maybe_transposed_self._data": [
                    6784,
                    6749
                ],
                "_maybe_transposed_self.T": [
                    6750
                ],
                "np.arange": [
                    6761
                ],
                "_maybe_transposed_self._get_axis": [
                    6761,
                    6763
                ],
                "methods": [
                    6770,
                    6764
                ],
                "is_numeric_or_datetime": [
                    6770,
                    6765
                ],
                "is_datetime64_any_dtype": [
                    9725,
                    6767
                ],
                "isna": [
                    9922,
                    6949,
                    7045,
                    7049,
                    11115,
                    6956,
                    11121,
                    7122,
                    7123,
                    7157,
                    11135,
                    7128,
                    6778,
                    7261,
                    7263
                ],
                "data.interpolate": [
                    6785
                ],
                "limit_direction": [
                    6791
                ],
                "limit_area": [
                    6792
                ],
                "T._data": [
                    6800
                ],
                "res.T": [
                    6805
                ],
                "where": [
                    6944,
                    6953,
                    6954,
                    6923,
                    6927,
                    6959,
                    6930,
                    6963,
                    6934,
                    6967,
                    6969,
                    6907,
                    6908,
                    6974
                ],
                "Timestamp": [
                    9728,
                    9738,
                    9739,
                    6908
                ],
                "self.index.is_monotonic": [
                    6910
                ],
                "is_series": [
                    8416,
                    6913,
                    6914,
                    8357,
                    6956,
                    6958,
                    8366,
                    6931,
                    8371,
                    8475,
                    8413,
                    6943
                ],
                "subset": [
                    7136,
                    6915,
                    6918,
                    6919,
                    6920,
                    6921,
                    6956,
                    7157,
                    7167,
                    7132,
                    7133,
                    7135
                ],
                "is_list": [
                    6976,
                    6954,
                    6923,
                    6924,
                    6960
                ],
                "start": [
                    6925,
                    6928,
                    6930,
                    8083,
                    8084
                ],
                "PeriodIndex": [
                    8976,
                    6926
                ],
                "ordinal": [
                    6927
                ],
                "Period": [
                    6927
                ],
                "self.index.freq": [
                    6927
                ],
                "start.ordinal": [
                    6928
                ],
                "np.float64": [
                    6934
                ],
                "np.nan": [
                    10080,
                    7139,
                    9923,
                    10054,
                    8487,
                    6935,
                    8782,
                    6959,
                    6963,
                    8756,
                    9749,
                    10067,
                    6967,
                    8536,
                    10041,
                    6975
                ],
                "self.index.searchsorted": [
                    6944,
                    8024,
                    8083
                ],
                "self._values": [
                    6948,
                    10295
                ],
                "nulls": [
                    6969,
                    6956,
                    6957
                ],
                "self.isna": [
                    6956
                ],
                "nulls.all": [
                    6957
                ],
                "DataFrame": [
                    6963
                ],
                "self.index.asof_locs": [
                    6969
                ],
                "nulls.values": [
                    6969
                ],
                "data.index": [
                    6974
                ],
                "data.loc": [
                    6975
                ],
                "data.iloc": [
                    6976
                ],
                "notna": [
                    7115,
                    8469,
                    7119
                ],
                "np.any": [
                    7138,
                    7122,
                    7123,
                    7261,
                    7263
                ],
                "upper": [
                    7264,
                    7267,
                    7268,
                    7269,
                    7273,
                    7275,
                    7282,
                    7123,
                    7286,
                    7131,
                    7132,
                    7133,
                    7263
                ],
                "np.errstate": [
                    7130
                ],
                "self.to_numpy": [
                    7132,
                    7135
                ],
                "result.where": [
                    7136,
                    7133
                ],
                "threshold": [
                    7152,
                    7154,
                    7155,
                    7157,
                    7162,
                    7164,
                    7166,
                    7167
                ],
                "is_number": [
                    7152,
                    7273,
                    7272
                ],
                "method.__name__": [
                    7153
                ],
                "self._clip_with_scalar": [
                    7154,
                    7155,
                    7275
                ],
                "_align_method_FRAME": [
                    7166
                ],
                "nv.validate_clip_with_axis": [
                    7252
                ],
                "result._clip_with_one_bound": [
                    7285,
                    7279
                ],
                "self.ge": [
                    7280
                ],
                "self.le": [
                    7286
                ],
                "by": [
                    7409,
                    7415
                ],
                "get_groupby": [
                    7413
                ],
                "as_index": [
                    7418
                ],
                "sort": [
                    7419
                ],
                "group_keys": [
                    7420
                ],
                "squeeze": [
                    7421
                ],
                "observed": [
                    7422
                ],
                "asfreq": [
                    7526
                ],
                "freq": [
                    8960,
                    9921,
                    8962,
                    8963,
                    8965,
                    7528,
                    9737,
                    8972,
                    8973,
                    8983,
                    9743,
                    8978,
                    8887,
                    9723,
                    8892,
                    8989,
                    9918,
                    8959
                ],
                "how": [
                    7530,
                    10295
                ],
                "normalize": [
                    7531
                ],
                "index.indexer_at_time": [
                    7585
                ],
                "time": [
                    7585
                ],
                "asof": [
                    7585
                ],
                "index.indexer_between_time": [
                    7662
                ],
                "start_time": [
                    7663
                ],
                "end_time": [
                    7664
                ],
                "include_start": [
                    7665
                ],
                "include_end": [
                    7666
                ],
                "resample": [
                    7953
                ],
                "rule": [
                    7955
                ],
                "closed": [
                    10205,
                    10216,
                    7957
                ],
                "kind": [
                    7959
                ],
                "loffset": [
                    7960
                ],
                "convention": [
                    7961
                ],
                "base": [
                    7962
                ],
                "on": [
                    10214,
                    7963,
                    10203
                ],
                "DatetimeIndex": [
                    9184,
                    8074,
                    8012,
                    9354
                ],
                "offset": [
                    8080,
                    8018,
                    8019,
                    8082,
                    8022
                ],
                "to_offset": [
                    8080,
                    8977,
                    8018,
                    8973
                ],
                "end_date": [
                    8024,
                    8019,
                    8023
                ],
                "end": [
                    8024,
                    8025,
                    8027,
                    8019
                ],
                "offset.isAnchored": [
                    8022
                ],
                "start_date": [
                    8082,
                    8083
                ],
                "na_option": [
                    8179,
                    8189
                ],
                "ranks": [
                    8184,
                    8192,
                    8193
                ],
                "algos.rank": [
                    8184
                ],
                "algos": [
                    8184
                ],
                "data.values": [
                    8185
                ],
                "pct": [
                    8190
                ],
                "data._construct_axes_dict": [
                    8192
                ],
                "ranks.__finalize__": [
                    8193
                ],
                "numeric_only": [
                    11013,
                    8197,
                    11047,
                    8201,
                    8203,
                    11069
                ],
                "ranker": [
                    8208,
                    8199
                ],
                "self._get_numeric_data": [
                    8204,
                    9989
                ],
                "missing.clean_fill_method": [
                    8271
                ],
                "broadcast_axis": [
                    8273
                ],
                "other.ndim": [
                    8273,
                    8533
                ],
                "cons": [
                    8296,
                    8277,
                    8278,
                    8295
                ],
                "self._constructor_expanddim": [
                    8277
                ],
                "other.columns": [
                    8368,
                    8366,
                    8279
                ],
                "df._align_frame": [
                    8281
                ],
                "fill_axis": [
                    8290,
                    8323,
                    8388,
                    8389,
                    8335,
                    8308,
                    8471
                ],
                "other._constructor_expanddim": [
                    8295
                ],
                "self._align_frame": [
                    8314,
                    8299
                ],
                "self._align_series": [
                    8326
                ],
                "join_index": [
                    8449,
                    8454,
                    8466,
                    8478,
                    8479,
                    8480,
                    8353,
                    8361,
                    8372,
                    8374,
                    8381,
                    8394,
                    8395,
                    8396,
                    8422,
                    8424,
                    8428,
                    8429,
                    8435,
                    8438,
                    8443,
                    8446
                ],
                "join_columns": [
                    8353,
                    8381,
                    8374,
                    8367
                ],
                "ilidx": [
                    8361,
                    8354,
                    8372,
                    8374
                ],
                "iridx": [
                    8361,
                    8354,
                    8381
                ],
                "clidx": [
                    8355,
                    8374,
                    8367
                ],
                "cridx": [
                    8355,
                    8381,
                    8367
                ],
                "self.index.equals": [
                    8360,
                    8437,
                    8421
                ],
                "other.index": [
                    8448,
                    8450,
                    8421,
                    8360,
                    8425,
                    8362,
                    8437,
                    8439
                ],
                "self.index.join": [
                    8424,
                    8361,
                    8438
                ],
                "self.columns.equals": [
                    8448,
                    8366
                ],
                "self.columns.join": [
                    8449,
                    8367
                ],
                "left": [
                    8482,
                    8388,
                    8392,
                    8393,
                    8395,
                    8428,
                    8461,
                    8398,
                    8471,
                    8376,
                    8476,
                    8477,
                    8479
                ],
                "self._reindex_with_indexers": [
                    8376
                ],
                "right": [
                    8480,
                    8482,
                    8389,
                    8393,
                    8396,
                    8429,
                    8398,
                    8464,
                    8466,
                    8472,
                    8380,
                    8477
                ],
                "other._reindex_with_indexers": [
                    8380
                ],
                "left.fillna": [
                    8388,
                    8471
                ],
                "right.fillna": [
                    8472,
                    8389
                ],
                "is_datetime64tz_dtype": [
                    8392,
                    8476
                ],
                "left.index": [
                    8392,
                    8393,
                    8395,
                    8476,
                    8477,
                    8479
                ],
                "left.index.tz": [
                    8393,
                    8477
                ],
                "right.index.tz": [
                    8393,
                    8477
                ],
                "right.index": [
                    8480,
                    8393,
                    8396,
                    8477
                ],
                "left.__finalize__": [
                    8482,
                    8398
                ],
                "right.__finalize__": [
                    8482,
                    8398
                ],
                "lidx": [
                    8449,
                    8453,
                    8422,
                    8454,
                    8424,
                    8428,
                    8436,
                    8438,
                    8442,
                    8443,
                    8447
                ],
                "ridx": [
                    8449,
                    8422,
                    8424,
                    8429,
                    8463,
                    8436,
                    8438,
                    8447
                ],
                "self._reindex_indexer": [
                    8428
                ],
                "other._reindex_indexer": [
                    8429
                ],
                "fdata": [
                    8454,
                    8458,
                    8459,
                    8461,
                    8433,
                    8443
                ],
                "fdata.reindex_indexer": [
                    8443,
                    8454
                ],
                "fdata.copy": [
                    8459
                ],
                "other.reindex": [
                    8466
                ],
                "fill_na": [
                    8469,
                    8470
                ],
                "cond": [
                    8605,
                    8617,
                    8501,
                    8502,
                    8503,
                    8505,
                    8506,
                    8507,
                    8509,
                    8766,
                    8513,
                    8517,
                    8519,
                    8520,
                    8521,
                    8522,
                    8526,
                    8791,
                    8794,
                    8795,
                    8798,
                    8557,
                    8566
                ],
                "com.apply_if_callable": [
                    8764,
                    8501,
                    8791
                ],
                "cond.align": [
                    8503
                ],
                "np.asanyarray": [
                    8506
                ],
                "cond.shape": [
                    8507
                ],
                "cond.fillna": [
                    8513
                ],
                "msg.format": [
                    8520,
                    8524
                ],
                "cond.dtype": [
                    8520
                ],
                "cond.empty": [
                    8521
                ],
                "dt": [
                    8522,
                    8523,
                    8524
                ],
                "cond.dtypes": [
                    8522
                ],
                "try_quick": [
                    8529,
                    8569
                ],
                "self.align": [
                    8535
                ],
                "InvalidIndexError": [
                    8543
                ],
                "other.shape": [
                    8553
                ],
                "icond": [
                    8572,
                    8557,
                    8566
                ],
                "cond.values": [
                    8557
                ],
                "np.array": [
                    8562,
                    8795,
                    9695
                ],
                "new_other": [
                    8570,
                    8571,
                    8572,
                    8573
                ],
                "new_other.copy": [
                    8571
                ],
                "align": [
                    8593,
                    8618,
                    8595,
                    8607
                ],
                "block_axis": [
                    8609,
                    8621,
                    8975,
                    8980,
                    8597,
                    8886,
                    8889,
                    8989
                ],
                "self._check_inplace_setting": [
                    8603
                ],
                "self._data.putmask": [
                    8604
                ],
                "self._data.where": [
                    8615
                ],
                "try_cast": [
                    8803,
                    8620,
                    8766
                ],
                "self._where": [
                    8765
                ],
                "periods": [
                    8924,
                    8969,
                    8989,
                    8883,
                    8921,
                    8917,
                    8980,
                    8920,
                    8889,
                    8922,
                    8892,
                    8925,
                    9918
                ],
                "self._data.shift": [
                    8888
                ],
                "self.tshift": [
                    8892
                ],
                "vslicer": [
                    8921,
                    8924,
                    8927
                ],
                "islicer": [
                    8928,
                    8922,
                    8925
                ],
                "new_obj": [
                    8929,
                    8931,
                    8927
                ],
                "self._slice": [
                    8927
                ],
                "shifted_axis": [
                    8928,
                    8929
                ],
                "new_obj.set_axis": [
                    8929
                ],
                "new_obj.__finalize__": [
                    8931
                ],
                "orig_freq": [
                    8984,
                    8977,
                    8978,
                    8981
                ],
                "index.freq": [
                    8977
                ],
                "new_data.axes": [
                    8980,
                    8989
                ],
                "index.shift": [
                    8980,
                    8989
                ],
                "freq.rule_code": [
                    8983
                ],
                "orig_freq.rule_code": [
                    8984
                ],
                "ax.is_monotonic_increasing": [
                    9120
                ],
                "ax.is_monotonic_decreasing": [
                    9120
                ],
                "ax.is_all_dates": [
                    9125
                ],
                "before": [
                    9128,
                    9131,
                    9132,
                    9133,
                    9136,
                    9140
                ],
                "to_datetime": [
                    9128,
                    9129
                ],
                "after": [
                    9129,
                    9131,
                    9132,
                    9133,
                    9136,
                    9140
                ],
                "ax.truncate": [
                    9140
                ],
                "result.copy": [
                    9143
                ],
                "ax_name": [
                    9179,
                    9181,
                    9349,
                    9351
                ],
                "tz": [
                    9184,
                    9729,
                    9186,
                    9731,
                    9733,
                    9193,
                    9354,
                    9738,
                    9356,
                    9739,
                    9198,
                    9363,
                    9368,
                    9726
                ],
                "ax.tz_convert": [
                    9186
                ],
                "ax._get_level_number": [
                    9192,
                    9362
                ],
                "new_level": [
                    9193,
                    9194,
                    9363,
                    9364
                ],
                "_tz_convert": [
                    9193,
                    9198
                ],
                "ax.levels": [
                    9193,
                    9363
                ],
                "ax.set_levels": [
                    9194,
                    9364
                ],
                "ax.name": [
                    9196,
                    9366
                ],
                "result.set_axis": [
                    9201,
                    9371
                ],
                "nonexistent_options": [
                    9333,
                    9334
                ],
                "nonexistent": [
                    9356,
                    9363,
                    9334,
                    9335,
                    9368
                ],
                "ax.tz_localize": [
                    9356
                ],
                "ambiguous": [
                    9368,
                    9363,
                    9356
                ],
                "_tz_localize": [
                    9368,
                    9363
                ],
                "np.abs": [
                    9994,
                    9443
                ],
                "self.columns.size": [
                    9680
                ],
                "percentiles": [
                    9698,
                    9699,
                    9701,
                    9703,
                    9711,
                    9683,
                    9685,
                    9688,
                    9691,
                    9692,
                    9693,
                    9695
                ],
                "validate_percentile": [
                    9688
                ],
                "percentiles.append": [
                    9692
                ],
                "np.asarray": [
                    11125,
                    9693
                ],
                "unique_pcts": [
                    9698,
                    9699,
                    9701
                ],
                "np.unique": [
                    9698
                ],
                "formatted_percentiles": [
                    9707,
                    9703
                ],
                "format_percentiles": [
                    9703
                ],
                "stat_index": [
                    9706,
                    9714
                ],
                "series.count": [
                    9710
                ],
                "series": [
                    9712,
                    9714,
                    9710,
                    9711
                ],
                "series.mean": [
                    9710
                ],
                "series.std": [
                    9710
                ],
                "series.min": [
                    9710
                ],
                "tolist": [
                    9711
                ],
                "series.quantile": [
                    9711
                ],
                "series.max": [
                    9712
                ],
                "series.name": [
                    9714
                ],
                "objcounts": [
                    9723,
                    9718,
                    9719
                ],
                "data.value_counts": [
                    9718
                ],
                "count_unique": [
                    9720,
                    9719
                ],
                "data.count": [
                    9720
                ],
                "top": [
                    9728,
                    9729,
                    9731,
                    9733,
                    9736,
                    9743,
                    9723
                ],
                "objcounts.index": [
                    9723
                ],
                "objcounts.iloc": [
                    9723
                ],
                "data.dt.tz": [
                    9726
                ],
                "data.dt": [
                    9726
                ],
                "asint": [
                    9738,
                    9739,
                    9727
                ],
                "values.view": [
                    9727
                ],
                "data.dropna": [
                    9727
                ],
                "top.tzinfo": [
                    9729
                ],
                "top.tz_convert": [
                    9731
                ],
                "top.tz_localize": [
                    9733
                ],
                "asint.min": [
                    9738
                ],
                "asint.max": [
                    9739
                ],
                "data.name": [
                    9752
                ],
                "describe_categorical_1d": [
                    9762,
                    9756
                ],
                "describe_numeric_1d": [
                    9760,
                    9758
                ],
                "describe_1d": [
                    9779,
                    9765
                ],
                "include": [
                    9777,
                    9771,
                    9766
                ],
                "exclude": [
                    9777,
                    9772,
                    9766
                ],
                "self.select_dtypes": [
                    9768,
                    9777
                ],
                "np.number": [
                    9768
                ],
                "data.columns": [
                    9769,
                    9789
                ],
                "ldesc": [
                    9779,
                    9788,
                    9782
                ],
                "data.items": [
                    9779
                ],
                "ldesc_indexes": [
                    9782,
                    9783
                ],
                "x.index": [
                    9782
                ],
                "idxnames": [
                    9784,
                    9783
                ],
                "names.append": [
                    9786
                ],
                "x.reindex": [
                    9788
                ],
                "d.columns": [
                    9789
                ],
                "data.columns.copy": [
                    9789
                ],
                "fill_method": [
                    9913,
                    9916
                ],
                "data.div": [
                    9918
                ],
                "data.shift": [
                    9918
                ],
                "rs.loc": [
                    9919
                ],
                "rs.index.duplicated": [
                    9919
                ],
                "rs.index": [
                    9919
                ],
                "rs.reindex_like": [
                    9920
                ],
                "np.putmask": [
                    11136,
                    11122,
                    9923,
                    11138
                ],
                "rs.values": [
                    9923
                ],
                "grouped": [
                    9929,
                    9930,
                    9931,
                    9935
                ],
                "self.groupby": [
                    9929
                ],
                "skipna": [
                    9987,
                    11012,
                    9994,
                    11167,
                    11040,
                    11041,
                    11172,
                    11045,
                    11047,
                    9982,
                    11060,
                    11061,
                    11066,
                    11069,
                    9930,
                    9934,
                    11134,
                    11098,
                    11120,
                    11000,
                    11001,
                    11006,
                    9983
                ],
                "applyf": [
                    9934,
                    9935
                ],
                "grouped.aggregate": [
                    9935
                ],
                "axis_descr": [
                    10119,
                    11154,
                    10003,
                    10132,
                    11027,
                    10014,
                    10143,
                    10024,
                    10152,
                    11054,
                    10036,
                    10165,
                    10049,
                    10315,
                    10062,
                    10320,
                    11092,
                    9943,
                    10075,
                    9950,
                    10979,
                    10089,
                    9962,
                    10101,
                    9975,
                    10110
                ],
                "name2": [
                    10118,
                    11153,
                    10002,
                    10131,
                    11026,
                    10013,
                    10142,
                    10023,
                    10151,
                    11054,
                    10035,
                    10164,
                    10048,
                    10061,
                    10319,
                    10320,
                    11091,
                    9943,
                    10074,
                    9949,
                    10978,
                    10088,
                    9961,
                    10100,
                    9974,
                    10109
                ],
                "_doc_parms": [
                    9943
                ],
                "cls.any": [
                    9945
                ],
                "_make_logical_function": [
                    9945,
                    9957
                ],
                "_any_desc": [
                    10774,
                    9951
                ],
                "nanops.nanany": [
                    9952
                ],
                "nanops": [
                    9952,
                    10017,
                    10112,
                    10145,
                    9964,
                    10028,
                    10092,
                    10103,
                    10124,
                    10156,
                    10134,
                    10007,
                    10169
                ],
                "_any_see_also": [
                    9953,
                    10764
                ],
                "_any_examples": [
                    9954,
                    10781
                ],
                "cls.all": [
                    9957
                ],
                "_all_desc": [
                    10410,
                    9963
                ],
                "nanops.nanall": [
                    9964
                ],
                "_all_see_also": [
                    9965,
                    10463
                ],
                "_all_examples": [
                    10417,
                    9966
                ],
                "self._agg_by_level": [
                    9987,
                    11045,
                    11065,
                    11005,
                    11167
                ],
                "demeaned": [
                    9993,
                    9994,
                    9991
                ],
                "data.mean": [
                    9993,
                    9991
                ],
                "data.sub": [
                    9993
                ],
                "mean": [
                    9994
                ],
                "_num_doc": [
                    10984,
                    11032,
                    10323,
                    9980
                ],
                "cls.mad": [
                    9996
                ],
                "mad": [
                    9996
                ],
                "cls.sem": [
                    9998
                ],
                "_make_stat_function_ddof": [
                    10009,
                    10019,
                    9998
                ],
                "nanops.nansem": [
                    10007
                ],
                "cls.var": [
                    10009
                ],
                "nanops.nanvar": [
                    10017
                ],
                "cls.std": [
                    10019
                ],
                "nanops.nanstd": [
                    10028
                ],
                "cls.cummin": [
                    10031
                ],
                "_make_cum_function": [
                    10057,
                    10044,
                    10070,
                    10031
                ],
                "np.minimum.accumulate": [
                    11112,
                    11123,
                    10038
                ],
                "np.minimum": [
                    11112,
                    11123,
                    10038
                ],
                "_cummin_examples": [
                    10504,
                    10042
                ],
                "cls.cumsum": [
                    10044
                ],
                "np.cumsum": [
                    10051
                ],
                "_cumsum_examples": [
                    10569,
                    10055
                ],
                "cls.cumprod": [
                    10057
                ],
                "np.cumprod": [
                    10064
                ],
                "_cumprod_examples": [
                    10634,
                    10068
                ],
                "cls.cummax": [
                    10070
                ],
                "np.maximum.accumulate": [
                    10077
                ],
                "np.maximum": [
                    10077
                ],
                "_cummax_examples": [
                    10081,
                    10699
                ],
                "cls.sum": [
                    10084
                ],
                "_make_min_count_stat_function": [
                    10084,
                    10127
                ],
                "nanops.nansum": [
                    10092
                ],
                "_stat_func_see_also": [
                    10921,
                    10170,
                    10093,
                    10157
                ],
                "_sum_examples": [
                    10891,
                    10094,
                    10887
                ],
                "cls.mean": [
                    10096
                ],
                "_make_stat_function": [
                    10114,
                    10147,
                    10096,
                    10160,
                    10105,
                    10138
                ],
                "nanops.nanmean": [
                    10103
                ],
                "cls.skew": [
                    10105
                ],
                "nanops.nanskew": [
                    10112
                ],
                "cls.kurt": [
                    10114,
                    10126
                ],
                "nanops.nankurt": [
                    10124
                ],
                "cls.kurtosis": [
                    10126
                ],
                "cls.prod": [
                    10137,
                    10127
                ],
                "nanops.nanprod": [
                    10134
                ],
                "_prod_examples": [
                    10936,
                    10135
                ],
                "cls.product": [
                    10137
                ],
                "cls.median": [
                    10138
                ],
                "nanops.nanmedian": [
                    10145
                ],
                "cls.max": [
                    10147
                ],
                "nanops.nanmax": [
                    10156
                ],
                "_max_examples": [
                    10913,
                    10158
                ],
                "cls.min": [
                    10160
                ],
                "nanops.nanmin": [
                    10169
                ],
                "_min_examples": [
                    10171,
                    10917
                ],
                "win_type": [
                    10202,
                    10196,
                    10213
                ],
                "Window": [
                    10197
                ],
                "window": [
                    10210,
                    10199
                ],
                "min_periods": [
                    10200,
                    10224,
                    10211,
                    10247
                ],
                "center": [
                    10224,
                    10201,
                    10212
                ],
                "Rolling": [
                    10208,
                    10183
                ],
                "Rolling.__doc__": [
                    10183
                ],
                "cls.rolling": [
                    10219
                ],
                "rolling": [
                    10219
                ],
                "Expanding": [
                    10224,
                    10221
                ],
                "Expanding.__doc__": [
                    10221
                ],
                "cls.expanding": [
                    10226
                ],
                "expanding": [
                    10226
                ],
                "EWM": [
                    10241,
                    10228
                ],
                "span": [
                    10244
                ],
                "halflife": [
                    10245
                ],
                "alpha": [
                    10246
                ],
                "adjust": [
                    10248
                ],
                "ignore_na": [
                    10249
                ],
                "EWM.__doc__": [
                    10228
                ],
                "cls.ewm": [
                    10253
                ],
                "ewm": [
                    10253
                ],
                "self.agg": [
                    10257
                ],
                "idxpos": [
                    10296,
                    10298,
                    10295
                ],
                "find_valid_index": [
                    10295
                ],
                "self._find_valid_index": [
                    10304,
                    10310
                ],
                "cls._constructor_sliced.__name__": [
                    10318
                ],
                "cls._constructor_sliced": [
                    10318
                ],
                "cls.__name__": [
                    10319
                ],
                "_num_ddof_doc": [
                    10349,
                    11055
                ],
                "_bool_doc": [
                    10372,
                    11159
                ],
                "_cnum_doc": [
                    11096,
                    10470
                ],
                "_min_count_stub": [
                    10980,
                    10959
                ],
                "nv.validate_sum": [
                    10995
                ],
                "nv.validate_prod": [
                    10997
                ],
                "nv.validate_stat_func": [
                    11039,
                    10999
                ],
                "min_count": [
                    11006,
                    11014
                ],
                "self._reduce": [
                    11008,
                    11168,
                    11068,
                    11046
                ],
                "desc": [
                    10976,
                    11054,
                    11151,
                    11024,
                    11089
                ],
                "name1": [
                    10977,
                    11054,
                    11152,
                    11025,
                    11090
                ],
                "see_also": [
                    11029,
                    11155,
                    10981
                ],
                "examples": [
                    11094,
                    11156,
                    10982,
                    11030
                ],
                "set_function_name": [
                    11072,
                    11144,
                    11017,
                    11050,
                    11177
                ],
                "stat_func": [
                    11072,
                    11017,
                    11050
                ],
                "nv.validate_median": [
                    11037
                ],
                "nv.validate_stat_ddof_func": [
                    11059
                ],
                "ddof": [
                    11066,
                    11069
                ],
                "nv.validate_cum_func_with_skipna": [
                    11098
                ],
                "y": [
                    11104,
                    11136,
                    11137,
                    11108,
                    11140,
                    11111,
                    11116,
                    11117,
                    11119,
                    11134
                ],
                "y.dtype.type": [
                    11108,
                    11134
                ],
                "y.dtype": [
                    11108,
                    11134,
                    11111
                ],
                "np.datetime64": [
                    11108
                ],
                "np.timedelta64": [
                    11108
                ],
                "accum_func": [
                    11137,
                    11140,
                    11112,
                    11119,
                    11123
                ],
                "y.view": [
                    11116,
                    11119
                ],
                "np.iinfo": [
                    11117
                ],
                "np.int64": [
                    11117
                ],
                "view": [
                    11119
                ],
                "iNaT": [
                    11128,
                    11122
                ],
                "nz": [
                    11128,
                    11125,
                    11126
                ],
                "nonzero": [
                    11125
                ],
                "np.integer": [
                    11134
                ],
                "mask_a": [
                    11136
                ],
                "mask_b": [
                    11138
                ],
                "accum_func_name": [
                    11093
                ],
                "cum_func": [
                    11144
                ],
                "nv.validate_logical_func": [
                    11161
                ],
                "bool_only": [
                    11163,
                    11173
                ],
                "empty_value": [
                    11157
                ],
                "logical_func": [
                    11177
                ],
                "_name": [
                    11181,
                    11182
                ],
                "indexing.get_indexers_list": [
                    11181
                ],
                "indexing": [
                    11181
                ],
                "NDFrame._create_indexer": [
                    11182
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/tests/arithmetic/conftest.py": {
            "buggy_functions": [
                {
                    "function_name": "box_transpose_fail",
                    "function_code": "@pytest.fixture(\n    params=[\n        (pd.Index, False),\n        (pd.Series, False),\n        (pd.DataFrame, False),\n        pytest.param((pd.DataFrame, True), marks=pytest.mark.xfail),\n        (tm.to_array, False),\n    ],\n    ids=id_func,\n)\ndef box_transpose_fail(request):\n    \"\"\"\n    Fixture similar to `box` but testing both transpose cases for DataFrame,\n    with the transpose=True case xfailed.\n    \"\"\"\n    # GH#23620\n    return request.param\n",
                    "decorators": [
                        "pytest.fixture(params=[(pd.Index, False), (pd.Series, False), (pd.DataFrame, False), pytest.param((pd.DataFrame, True), marks=pytest.mark.xfail), (tm.to_array, False)], ids=id_func)"
                    ],
                    "docstring": "Fixture similar to `box` but testing both transpose cases for DataFrame,\nwith the transpose=True case xfailed.",
                    "start_line": 238,
                    "variables": {
                        "request.param": [
                            254
                        ],
                        "request": [
                            254
                        ],
                        "pytest.fixture": [
                            238
                        ],
                        "pytest": [
                            243,
                            238
                        ],
                        "pd.Index": [
                            240
                        ],
                        "pd": [
                            240,
                            241,
                            242,
                            243
                        ],
                        "pd.Series": [
                            241
                        ],
                        "pd.DataFrame": [
                            242,
                            243
                        ],
                        "pytest.param": [
                            243
                        ],
                        "pytest.mark.xfail": [
                            243
                        ],
                        "pytest.mark": [
                            243
                        ],
                        "tm.to_array": [
                            244
                        ],
                        "tm": [
                            244
                        ],
                        "id_func": [
                            246
                        ]
                    },
                    "filtered_variables": {
                        "request.param": [
                            254
                        ],
                        "request": [
                            254
                        ],
                        "pytest.fixture": [
                            238
                        ],
                        "pytest": [
                            243,
                            238
                        ],
                        "pd.Index": [
                            240
                        ],
                        "pd": [
                            240,
                            241,
                            242,
                            243
                        ],
                        "pd.Series": [
                            241
                        ],
                        "pd.DataFrame": [
                            242,
                            243
                        ],
                        "pytest.param": [
                            243
                        ],
                        "pytest.mark.xfail": [
                            243
                        ],
                        "pytest.mark": [
                            243
                        ],
                        "tm.to_array": [
                            244
                        ],
                        "tm": [
                            244
                        ],
                        "id_func": [
                            246
                        ]
                    },
                    "diff_line_number": 248,
                    "class_data": null,
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "snippets": [
                {
                    "snippet_code": "@pytest.fixture(\n    params=[\n        (pd.Index, False),\n        (pd.Series, False),\n        (pd.DataFrame, False),\n        pytest.param((pd.DataFrame, True), marks=pytest.mark.xfail),\n        (tm.to_array, False),\n    ],\n    ids=id_func,\n)",
                    "start_line": 238,
                    "end_line": 247
                }
            ],
            "inscope_functions": [
                "def id_func(x):\n    if isinstance(x, tuple):\n        assert len(x) == 2\n        return x[0].__name__ + \"-\" + str(x[1])\n    else:\n        return x.__name__",
                "@pytest.fixture(params=[1, np.array(1, dtype=np.int64)])\ndef one(request):\n    \"\"\"\n    Several variants of integer value 1. The zero-dim integer array\n    behaves like an integer.\n\n    This fixture can be used to check that datetimelike indexes handle\n    addition and subtraction of integers and zero-dimensional arrays\n    of integers.\n\n    Examples\n    --------\n    >>> dti = pd.date_range('2016-01-01', periods=2, freq='H')\n    >>> dti\n    DatetimeIndex(['2016-01-01 00:00:00', '2016-01-01 01:00:00'],\n    dtype='datetime64[ns]', freq='H')\n    >>> dti + one\n    DatetimeIndex(['2016-01-01 01:00:00', '2016-01-01 02:00:00'],\n    dtype='datetime64[ns]', freq='H')\n    \"\"\"\n    return request.param",
                "@pytest.fixture(params=zeros)\ndef zero(request):\n    \"\"\"\n    Several types of scalar zeros and length 5 vectors of zeros.\n\n    This fixture can be used to check that numeric-dtype indexes handle\n    division by any zero numeric-dtype.\n\n    Uses vector of length 5 for broadcasting with `numeric_idx` fixture,\n    which creates numeric-dtype vectors also of length 5.\n\n    Examples\n    --------\n    >>> arr = pd.RangeIndex(5)\n    >>> arr / zeros\n    Float64Index([nan, inf, inf, inf, inf], dtype='float64')\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        pd.Float64Index(np.arange(5, dtype=\"float64\")),\n        pd.Int64Index(np.arange(5, dtype=\"int64\")),\n        pd.UInt64Index(np.arange(5, dtype=\"uint64\")),\n        pd.RangeIndex(5),\n    ],\n    ids=lambda x: type(x).__name__,\n)\ndef numeric_idx(request):\n    \"\"\"\n    Several types of numeric-dtypes Index objects\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        pd.Timedelta(\"5m4s\").to_pytimedelta(),\n        pd.Timedelta(\"5m4s\"),\n        pd.Timedelta(\"5m4s\").to_timedelta64(),\n    ],\n    ids=lambda x: type(x).__name__,\n)\ndef scalar_td(request):\n    \"\"\"\n    Several variants of Timedelta scalars representing 5 minutes and 4 seconds\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        pd.offsets.Day(3),\n        pd.offsets.Hour(72),\n        pd.Timedelta(days=3).to_pytimedelta(),\n        pd.Timedelta(\"72:00:00\"),\n        np.timedelta64(3, \"D\"),\n        np.timedelta64(72, \"h\"),\n    ],\n    ids=lambda x: type(x).__name__,\n)\ndef three_days(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 3-day timedelta\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        pd.offsets.Hour(2),\n        pd.offsets.Minute(120),\n        pd.Timedelta(hours=2).to_pytimedelta(),\n        pd.Timedelta(seconds=2 * 3600),\n        np.timedelta64(2, \"h\"),\n        np.timedelta64(120, \"m\"),\n    ],\n    ids=lambda x: type(x).__name__,\n)\ndef two_hours(request):\n    \"\"\"\n    Several timedelta-like and DateOffset objects that each represent\n    a 2-hour timedelta\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        pd.Timedelta(minutes=30).to_pytimedelta(),\n        np.timedelta64(30, \"s\"),\n        pd.Timedelta(seconds=30),\n    ]\n    + _common_mismatch\n)\ndef not_hourly(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Hourly frequencies.\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        np.timedelta64(4, \"h\"),\n        pd.Timedelta(hours=23).to_pytimedelta(),\n        pd.Timedelta(\"23:00:00\"),\n    ]\n    + _common_mismatch\n)\ndef not_daily(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Daily frequencies.\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        np.timedelta64(365, \"D\"),\n        pd.Timedelta(days=365).to_pytimedelta(),\n        pd.Timedelta(days=365),\n    ]\n    + _common_mismatch\n)\ndef mismatched_freq(request):\n    \"\"\"\n    Several timedelta-like and DateOffset instances that are _not_\n    compatible with Monthly or Annual frequencies.\n    \"\"\"\n    return request.param",
                "@pytest.fixture(params=[pd.Index, pd.Series, pd.DataFrame], ids=id_func)\ndef box(request):\n    \"\"\"\n    Several array-like containers that should have effectively identical\n    behavior with respect to arithmetic operations.\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        pd.Index,\n        pd.Series,\n        pytest.param(pd.DataFrame, marks=pytest.mark.xfail),\n        tm.to_array,\n    ],\n    ids=id_func,\n)\ndef box_df_fail(request):\n    \"\"\"\n    Fixture equivalent to `box` fixture but xfailing the DataFrame case.\n    \"\"\"\n    return request.param",
                "@pytest.fixture(\n    params=[\n        (pd.Index, False),\n        (pd.Series, False),\n        (pd.DataFrame, False),\n        pytest.param((pd.DataFrame, True), marks=pytest.mark.xfail),\n        (tm.to_array, False),\n    ],\n    ids=id_func,\n)\ndef box_transpose_fail(request):\n    \"\"\"\n    Fixture similar to `box` but testing both transpose cases for DataFrame,\n    with the transpose=True case xfailed.\n    \"\"\"\n    # GH#23620\n    return request.param",
                "@pytest.fixture(params=[pd.Index, pd.Series, pd.DataFrame, tm.to_array], ids=id_func)\ndef box_with_array(request):\n    \"\"\"\n    Fixture to test behavior for Index, Series, DataFrame, and pandas Array\n    classes\n    \"\"\"\n    return request.param"
            ],
            "inscope_function_signatures": [
                "id_func(x)",
                "one(request)",
                "zero(request)",
                "numeric_idx(request)",
                "scalar_td(request)",
                "three_days(request)",
                "two_hours(request)",
                "not_hourly(request)",
                "not_daily(request)",
                "mismatched_freq(request)",
                "box(request)",
                "box_df_fail(request)",
                "box_transpose_fail(request)",
                "box_with_array(request)"
            ],
            "variables_in_file": {
                "isinstance": [
                    12
                ],
                "x": [
                    12,
                    13,
                    14,
                    108,
                    16,
                    145,
                    89,
                    126
                ],
                "tuple": [
                    12
                ],
                "len": [
                    13
                ],
                "__name__": [
                    108,
                    14,
                    145,
                    89,
                    126
                ],
                "str": [
                    14
                ],
                "x.__name__": [
                    16
                ],
                "request.param": [
                    191,
                    133,
                    263,
                    42,
                    75,
                    235,
                    175,
                    207,
                    114,
                    152,
                    219,
                    254,
                    95
                ],
                "request": [
                    191,
                    133,
                    263,
                    42,
                    75,
                    235,
                    175,
                    207,
                    114,
                    152,
                    219,
                    254,
                    95
                ],
                "pytest.fixture": [
                    257,
                    162,
                    194,
                    102,
                    136,
                    238,
                    82,
                    178,
                    117,
                    22,
                    213,
                    58,
                    222
                ],
                "pytest": [
                    257,
                    162,
                    194,
                    226,
                    102,
                    136,
                    238,
                    82,
                    178,
                    243,
                    117,
                    22,
                    213,
                    58,
                    222
                ],
                "np.array": [
                    47,
                    51,
                    53,
                    54,
                    22
                ],
                "np": [
                    196,
                    165,
                    142,
                    47,
                    48,
                    143,
                    51,
                    84,
                    53,
                    22,
                    54,
                    85,
                    86,
                    180,
                    123,
                    124
                ],
                "np.int64": [
                    48,
                    53,
                    22
                ],
                "zeros": [
                    45,
                    50,
                    53,
                    54,
                    55,
                    58
                ],
                "box_cls": [
                    51,
                    46,
                    47
                ],
                "dtype": [
                    48,
                    53,
                    46
                ],
                "pd.Index": [
                    224,
                    257,
                    47,
                    240,
                    51,
                    213
                ],
                "pd": [
                    257,
                    138,
                    139,
                    140,
                    141,
                    156,
                    157,
                    158,
                    164,
                    166,
                    47,
                    51,
                    181,
                    182,
                    197,
                    198,
                    84,
                    85,
                    86,
                    87,
                    213,
                    224,
                    225,
                    226,
                    104,
                    105,
                    106,
                    240,
                    241,
                    242,
                    243,
                    119,
                    120,
                    121,
                    122
                ],
                "np.uint64": [
                    48,
                    53
                ],
                "np.float64": [
                    48,
                    51,
                    53,
                    54
                ],
                "zeros.extend": [
                    50,
                    53,
                    54,
                    55
                ],
                "pd.Float64Index": [
                    84
                ],
                "np.arange": [
                    84,
                    85,
                    86
                ],
                "pd.Int64Index": [
                    85
                ],
                "pd.UInt64Index": [
                    86
                ],
                "pd.RangeIndex": [
                    87
                ],
                "type": [
                    89,
                    145,
                    108,
                    126
                ],
                "to_pytimedelta": [
                    164,
                    197,
                    104,
                    140,
                    181,
                    121
                ],
                "pd.Timedelta": [
                    164,
                    197,
                    166,
                    198,
                    104,
                    105,
                    106,
                    140,
                    141,
                    181,
                    182,
                    121,
                    122
                ],
                "to_timedelta64": [
                    106
                ],
                "pd.offsets.Day": [
                    119
                ],
                "pd.offsets": [
                    138,
                    139,
                    119,
                    120,
                    156,
                    157,
                    158
                ],
                "pd.offsets.Hour": [
                    120,
                    138
                ],
                "np.timedelta64": [
                    196,
                    165,
                    142,
                    143,
                    180,
                    123,
                    124
                ],
                "pd.offsets.Minute": [
                    139,
                    158
                ],
                "_common_mismatch": [
                    168,
                    155,
                    184,
                    200
                ],
                "pd.offsets.YearBegin": [
                    156
                ],
                "pd.offsets.MonthBegin": [
                    157
                ],
                "pd.Series": [
                    225,
                    241,
                    213,
                    257
                ],
                "pd.DataFrame": [
                    257,
                    226,
                    242,
                    243,
                    213
                ],
                "id_func": [
                    229,
                    213,
                    246,
                    257
                ],
                "pytest.param": [
                    226,
                    243
                ],
                "pytest.mark.xfail": [
                    226,
                    243
                ],
                "pytest.mark": [
                    226,
                    243
                ],
                "tm.to_array": [
                    257,
                    227,
                    244
                ],
                "tm": [
                    257,
                    227,
                    244
                ],
                "box_with_array2": [
                    267
                ],
                "box_with_array": [
                    267
                ]
            },
            "filtered_variables_in_file": {
                "x": [
                    12,
                    13,
                    14,
                    108,
                    16,
                    145,
                    89,
                    126
                ],
                "x.__name__": [
                    16
                ],
                "request.param": [
                    191,
                    133,
                    263,
                    42,
                    75,
                    235,
                    175,
                    207,
                    114,
                    152,
                    219,
                    254,
                    95
                ],
                "request": [
                    191,
                    133,
                    263,
                    42,
                    75,
                    235,
                    175,
                    207,
                    114,
                    152,
                    219,
                    254,
                    95
                ],
                "pytest.fixture": [
                    257,
                    162,
                    194,
                    102,
                    136,
                    238,
                    82,
                    178,
                    117,
                    22,
                    213,
                    58,
                    222
                ],
                "pytest": [
                    257,
                    162,
                    194,
                    226,
                    102,
                    136,
                    238,
                    82,
                    178,
                    243,
                    117,
                    22,
                    213,
                    58,
                    222
                ],
                "np.array": [
                    47,
                    51,
                    53,
                    54,
                    22
                ],
                "np": [
                    196,
                    165,
                    142,
                    47,
                    48,
                    143,
                    51,
                    84,
                    53,
                    22,
                    54,
                    85,
                    86,
                    180,
                    123,
                    124
                ],
                "np.int64": [
                    48,
                    53,
                    22
                ],
                "zeros": [
                    45,
                    50,
                    53,
                    54,
                    55,
                    58
                ],
                "box_cls": [
                    51,
                    46,
                    47
                ],
                "dtype": [
                    48,
                    53,
                    46
                ],
                "pd.Index": [
                    224,
                    257,
                    47,
                    240,
                    51,
                    213
                ],
                "pd": [
                    257,
                    138,
                    139,
                    140,
                    141,
                    156,
                    157,
                    158,
                    164,
                    166,
                    47,
                    51,
                    181,
                    182,
                    197,
                    198,
                    84,
                    85,
                    86,
                    87,
                    213,
                    224,
                    225,
                    226,
                    104,
                    105,
                    106,
                    240,
                    241,
                    242,
                    243,
                    119,
                    120,
                    121,
                    122
                ],
                "np.uint64": [
                    48,
                    53
                ],
                "np.float64": [
                    48,
                    51,
                    53,
                    54
                ],
                "zeros.extend": [
                    50,
                    53,
                    54,
                    55
                ],
                "pd.Float64Index": [
                    84
                ],
                "np.arange": [
                    84,
                    85,
                    86
                ],
                "pd.Int64Index": [
                    85
                ],
                "pd.UInt64Index": [
                    86
                ],
                "pd.RangeIndex": [
                    87
                ],
                "to_pytimedelta": [
                    164,
                    197,
                    104,
                    140,
                    181,
                    121
                ],
                "pd.Timedelta": [
                    164,
                    197,
                    166,
                    198,
                    104,
                    105,
                    106,
                    140,
                    141,
                    181,
                    182,
                    121,
                    122
                ],
                "to_timedelta64": [
                    106
                ],
                "pd.offsets.Day": [
                    119
                ],
                "pd.offsets": [
                    138,
                    139,
                    119,
                    120,
                    156,
                    157,
                    158
                ],
                "pd.offsets.Hour": [
                    120,
                    138
                ],
                "np.timedelta64": [
                    196,
                    165,
                    142,
                    143,
                    180,
                    123,
                    124
                ],
                "pd.offsets.Minute": [
                    139,
                    158
                ],
                "_common_mismatch": [
                    168,
                    155,
                    184,
                    200
                ],
                "pd.offsets.YearBegin": [
                    156
                ],
                "pd.offsets.MonthBegin": [
                    157
                ],
                "pd.Series": [
                    225,
                    241,
                    213,
                    257
                ],
                "pd.DataFrame": [
                    257,
                    226,
                    242,
                    243,
                    213
                ],
                "id_func": [
                    229,
                    213,
                    246,
                    257
                ],
                "pytest.param": [
                    226,
                    243
                ],
                "pytest.mark.xfail": [
                    226,
                    243
                ],
                "pytest.mark": [
                    226,
                    243
                ],
                "tm.to_array": [
                    257,
                    227,
                    244
                ],
                "tm": [
                    257,
                    227,
                    244
                ],
                "box_with_array2": [
                    267
                ],
                "box_with_array": [
                    267
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/tests/extension/base/reshaping.py": {
            "buggy_functions": [
                {
                    "function_name": "test_ravel",
                    "function_code": "def test_ravel(self, data):\n    # as long as EA is 1D-only, ravel is a no-op\n    result = data.ravel()\n    assert type(result) == type(data)\n\n    # Check that we have a view, not a copy\n    result[0] = result[1]\n    assert data[0] == data[1]\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 290,
                    "variables": {
                        "result": [
                            296,
                            292,
                            293
                        ],
                        "data.ravel": [
                            292
                        ],
                        "data": [
                            297,
                            292,
                            293
                        ],
                        "type": [
                            293
                        ]
                    },
                    "filtered_variables": {
                        "result": [
                            296,
                            292,
                            293
                        ],
                        "data.ravel": [
                            292
                        ],
                        "data": [
                            297,
                            292,
                            293
                        ]
                    },
                    "diff_line_number": 297,
                    "class_data": {
                        "signature": "class BaseReshapingTests(BaseExtensionTests)",
                        "docstring": "Tests for reshaping and concatenation.",
                        "constructor_docstring": null,
                        "functions": [
                            "@pytest.mark.parametrize('in_frame', [True, False])\ndef test_concat(self, data, in_frame):\n    wrapped = pd.Series(data)\n    if in_frame:\n        wrapped = pd.DataFrame(wrapped)\n    result = pd.concat([wrapped, wrapped], ignore_index=True)\n    assert len(result) == len(data) * 2\n    if in_frame:\n        dtype = result.dtypes[0]\n    else:\n        dtype = result.dtype\n    assert dtype == data.dtype\n    assert isinstance(result._data.blocks[0], ExtensionBlock)",
                            "@pytest.mark.parametrize('in_frame', [True, False])\ndef test_concat_all_na_block(self, data_missing, in_frame):\n    valid_block = pd.Series(data_missing.take([1, 1]), index=[0, 1])\n    na_block = pd.Series(data_missing.take([0, 0]), index=[2, 3])\n    if in_frame:\n        valid_block = pd.DataFrame({'a': valid_block})\n        na_block = pd.DataFrame({'a': na_block})\n    result = pd.concat([valid_block, na_block])\n    if in_frame:\n        expected = pd.DataFrame({'a': data_missing.take([1, 1, 0, 0])})\n        self.assert_frame_equal(result, expected)\n    else:\n        expected = pd.Series(data_missing.take([1, 1, 0, 0]))\n        self.assert_series_equal(result, expected)",
                            "def test_concat_mixed_dtypes(self, data):\n    df1 = pd.DataFrame({'A': data[:3]})\n    df2 = pd.DataFrame({'A': [1, 2, 3]})\n    df3 = pd.DataFrame({'A': ['a', 'b', 'c']}).astype('category')\n    dfs = [df1, df2, df3]\n    result = pd.concat(dfs)\n    expected = pd.concat([x.astype(object) for x in dfs])\n    self.assert_frame_equal(result, expected)\n    result = pd.concat([x['A'] for x in dfs])\n    expected = pd.concat([x['A'].astype(object) for x in dfs])\n    self.assert_series_equal(result, expected)\n    result = pd.concat([df1, df2])\n    expected = pd.concat([df1.astype('object'), df2.astype('object')])\n    self.assert_frame_equal(result, expected)\n    result = pd.concat([df1['A'], df2['A']])\n    expected = pd.concat([df1['A'].astype('object'), df2['A'].astype('object')])\n    self.assert_series_equal(result, expected)",
                            "def test_concat_columns(self, data, na_value):\n    df1 = pd.DataFrame({'A': data[:3]})\n    df2 = pd.DataFrame({'B': [1, 2, 3]})\n    expected = pd.DataFrame({'A': data[:3], 'B': [1, 2, 3]})\n    result = pd.concat([df1, df2], axis=1)\n    self.assert_frame_equal(result, expected)\n    result = pd.concat([df1['A'], df2['B']], axis=1)\n    self.assert_frame_equal(result, expected)\n    df2 = pd.DataFrame({'B': [1, 2, 3]}, index=[1, 2, 3])\n    expected = pd.DataFrame({'A': data._from_sequence(list(data[:3]) + [na_value], dtype=data.dtype), 'B': [np.nan, 1, 2, 3]})\n    result = pd.concat([df1, df2], axis=1)\n    self.assert_frame_equal(result, expected)\n    result = pd.concat([df1['A'], df2['B']], axis=1)\n    self.assert_frame_equal(result, expected)",
                            "def test_align(self, data, na_value):\n    a = data[:3]\n    b = data[2:5]\n    r1, r2 = pd.Series(a).align(pd.Series(b, index=[1, 2, 3]))\n    e1 = pd.Series(data._from_sequence(list(a) + [na_value], dtype=data.dtype))\n    e2 = pd.Series(data._from_sequence([na_value] + list(b), dtype=data.dtype))\n    self.assert_series_equal(r1, e1)\n    self.assert_series_equal(r2, e2)",
                            "def test_align_frame(self, data, na_value):\n    a = data[:3]\n    b = data[2:5]\n    r1, r2 = pd.DataFrame({'A': a}).align(pd.DataFrame({'A': b}, index=[1, 2, 3]))\n    e1 = pd.DataFrame({'A': data._from_sequence(list(a) + [na_value], dtype=data.dtype)})\n    e2 = pd.DataFrame({'A': data._from_sequence([na_value] + list(b), dtype=data.dtype)})\n    self.assert_frame_equal(r1, e1)\n    self.assert_frame_equal(r2, e2)",
                            "def test_align_series_frame(self, data, na_value):\n    ser = pd.Series(data, name='a')\n    df = pd.DataFrame({'col': np.arange(len(ser) + 1)})\n    r1, r2 = ser.align(df)\n    e1 = pd.Series(data._from_sequence(list(data) + [na_value], dtype=data.dtype), name=ser.name)\n    self.assert_series_equal(r1, e1)\n    self.assert_frame_equal(r2, df)",
                            "def test_set_frame_expand_regular_with_extension(self, data):\n    df = pd.DataFrame({'A': [1] * len(data)})\n    df['B'] = data\n    expected = pd.DataFrame({'A': [1] * len(data), 'B': data})\n    self.assert_frame_equal(df, expected)",
                            "def test_set_frame_expand_extension_with_regular(self, data):\n    df = pd.DataFrame({'A': data})\n    df['B'] = [1] * len(data)\n    expected = pd.DataFrame({'A': data, 'B': [1] * len(data)})\n    self.assert_frame_equal(df, expected)",
                            "def test_set_frame_overwrite_object(self, data):\n    df = pd.DataFrame({'A': [1] * len(data)}, dtype=object)\n    df['A'] = data\n    assert df.dtypes['A'] == data.dtype",
                            "def test_merge(self, data, na_value):\n    df1 = pd.DataFrame({'ext': data[:3], 'int1': [1, 2, 3], 'key': [0, 1, 2]})\n    df2 = pd.DataFrame({'int2': [1, 2, 3, 4], 'key': [0, 0, 1, 3]})\n    res = pd.merge(df1, df2)\n    exp = pd.DataFrame({'int1': [1, 1, 2], 'int2': [1, 2, 3], 'key': [0, 0, 1], 'ext': data._from_sequence([data[0], data[0], data[1]], dtype=data.dtype)})\n    self.assert_frame_equal(res, exp[['ext', 'int1', 'key', 'int2']])\n    res = pd.merge(df1, df2, how='outer')\n    exp = pd.DataFrame({'int1': [1, 1, 2, 3, np.nan], 'int2': [1, 2, 3, np.nan, 4], 'key': [0, 0, 1, 2, 3], 'ext': data._from_sequence([data[0], data[0], data[1], data[2], na_value], dtype=data.dtype)})\n    self.assert_frame_equal(res, exp[['ext', 'int1', 'key', 'int2']])",
                            "def test_merge_on_extension_array(self, data):\n    a, b = data[:2]\n    key = type(data)._from_sequence([a, b], dtype=data.dtype)\n    df = pd.DataFrame({'key': key, 'val': [1, 2]})\n    result = pd.merge(df, df, on='key')\n    expected = pd.DataFrame({'key': key, 'val_x': [1, 2], 'val_y': [1, 2]})\n    self.assert_frame_equal(result, expected)\n    result = pd.merge(df.iloc[[1, 0]], df, on='key')\n    expected = expected.iloc[[1, 0]].reset_index(drop=True)\n    self.assert_frame_equal(result, expected)",
                            "def test_merge_on_extension_array_duplicates(self, data):\n    a, b = data[:2]\n    key = type(data)._from_sequence([a, b, a], dtype=data.dtype)\n    df1 = pd.DataFrame({'key': key, 'val': [1, 2, 3]})\n    df2 = pd.DataFrame({'key': key, 'val': [1, 2, 3]})\n    result = pd.merge(df1, df2, on='key')\n    expected = pd.DataFrame({'key': key.take([0, 0, 0, 0, 1]), 'val_x': [1, 1, 3, 3, 2], 'val_y': [1, 3, 1, 3, 2]})\n    self.assert_frame_equal(result, expected)",
                            "@pytest.mark.parametrize('columns', [['A', 'B'], pd.MultiIndex.from_tuples([('A', 'a'), ('A', 'b')], names=['outer', 'inner'])])\ndef test_stack(self, data, columns):\n    df = pd.DataFrame({'A': data[:5], 'B': data[:5]})\n    df.columns = columns\n    result = df.stack()\n    expected = df.astype(object).stack()\n    expected = expected.astype(object)\n    if isinstance(expected, pd.Series):\n        assert result.dtype == df.iloc[:, 0].dtype\n    else:\n        assert all(result.dtypes == df.iloc[:, 0].dtype)\n    result = result.astype(object)\n    self.assert_equal(result, expected)",
                            "@pytest.mark.parametrize('index', [pd.MultiIndex.from_product([['A', 'B'], ['a', 'b']], names=['a', 'b']), pd.MultiIndex.from_tuples([('A', 'a'), ('A', 'b'), ('B', 'b')]), pd.MultiIndex.from_product([('A', 'B'), ('a', 'b', 'c'), (0, 1, 2)]), pd.MultiIndex.from_tuples([('A', 'a', 1), ('A', 'b', 0), ('A', 'a', 0), ('B', 'a', 0), ('B', 'c', 1)])])\n@pytest.mark.parametrize('obj', ['series', 'frame'])\ndef test_unstack(self, data, index, obj):\n    data = data[:len(index)]\n    if obj == 'series':\n        ser = pd.Series(data, index=index)\n    else:\n        ser = pd.DataFrame({'A': data, 'B': data}, index=index)\n    n = index.nlevels\n    levels = list(range(n))\n    combinations = itertools.chain.from_iterable((itertools.permutations(levels, i) for i in range(1, n)))\n    for level in combinations:\n        result = ser.unstack(level=level)\n        assert all((isinstance(result[col].array, type(data)) for col in result.columns))\n        expected = ser.astype(object).unstack(level=level)\n        result = result.astype(object)\n        self.assert_frame_equal(result, expected)",
                            "def test_ravel(self, data):\n    result = data.ravel()\n    assert type(result) == type(data)\n    result[0] = result[1]\n    assert data[0] == data[1]"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "test_concat(self, data, in_frame)",
                            "test_concat_all_na_block(self, data_missing, in_frame)",
                            "test_concat_mixed_dtypes(self, data)",
                            "test_concat_columns(self, data, na_value)",
                            "test_align(self, data, na_value)",
                            "test_align_frame(self, data, na_value)",
                            "test_align_series_frame(self, data, na_value)",
                            "test_set_frame_expand_regular_with_extension(self, data)",
                            "test_set_frame_expand_extension_with_regular(self, data)",
                            "test_set_frame_overwrite_object(self, data)",
                            "test_merge(self, data, na_value)",
                            "test_merge_on_extension_array(self, data)",
                            "test_merge_on_extension_array_duplicates(self, data)",
                            "test_stack(self, data, columns)",
                            "test_unstack(self, data, index, obj)",
                            "test_ravel(self, data)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "@pytest.mark.parametrize(\"in_frame\", [True, False])\ndef test_concat(self, data, in_frame):\n    wrapped = pd.Series(data)\n    if in_frame:\n        wrapped = pd.DataFrame(wrapped)\n    result = pd.concat([wrapped, wrapped], ignore_index=True)\n\n    assert len(result) == len(data) * 2\n\n    if in_frame:\n        dtype = result.dtypes[0]\n    else:\n        dtype = result.dtype\n\n    assert dtype == data.dtype\n    assert isinstance(result._data.blocks[0], ExtensionBlock)",
                "@pytest.mark.parametrize(\"in_frame\", [True, False])\ndef test_concat_all_na_block(self, data_missing, in_frame):\n    valid_block = pd.Series(data_missing.take([1, 1]), index=[0, 1])\n    na_block = pd.Series(data_missing.take([0, 0]), index=[2, 3])\n    if in_frame:\n        valid_block = pd.DataFrame({\"a\": valid_block})\n        na_block = pd.DataFrame({\"a\": na_block})\n    result = pd.concat([valid_block, na_block])\n    if in_frame:\n        expected = pd.DataFrame({\"a\": data_missing.take([1, 1, 0, 0])})\n        self.assert_frame_equal(result, expected)\n    else:\n        expected = pd.Series(data_missing.take([1, 1, 0, 0]))\n        self.assert_series_equal(result, expected)",
                "def test_concat_mixed_dtypes(self, data):\n    # https://github.com/pandas-dev/pandas/issues/20762\n    df1 = pd.DataFrame({\"A\": data[:3]})\n    df2 = pd.DataFrame({\"A\": [1, 2, 3]})\n    df3 = pd.DataFrame({\"A\": [\"a\", \"b\", \"c\"]}).astype(\"category\")\n    dfs = [df1, df2, df3]\n\n    # dataframes\n    result = pd.concat(dfs)\n    expected = pd.concat([x.astype(object) for x in dfs])\n    self.assert_frame_equal(result, expected)\n\n    # series\n    result = pd.concat([x[\"A\"] for x in dfs])\n    expected = pd.concat([x[\"A\"].astype(object) for x in dfs])\n    self.assert_series_equal(result, expected)\n\n    # simple test for just EA and one other\n    result = pd.concat([df1, df2])\n    expected = pd.concat([df1.astype(\"object\"), df2.astype(\"object\")])\n    self.assert_frame_equal(result, expected)\n\n    result = pd.concat([df1[\"A\"], df2[\"A\"]])\n    expected = pd.concat([df1[\"A\"].astype(\"object\"), df2[\"A\"].astype(\"object\")])\n    self.assert_series_equal(result, expected)",
                "def test_concat_columns(self, data, na_value):\n    df1 = pd.DataFrame({\"A\": data[:3]})\n    df2 = pd.DataFrame({\"B\": [1, 2, 3]})\n\n    expected = pd.DataFrame({\"A\": data[:3], \"B\": [1, 2, 3]})\n    result = pd.concat([df1, df2], axis=1)\n    self.assert_frame_equal(result, expected)\n    result = pd.concat([df1[\"A\"], df2[\"B\"]], axis=1)\n    self.assert_frame_equal(result, expected)\n\n    # non-aligned\n    df2 = pd.DataFrame({\"B\": [1, 2, 3]}, index=[1, 2, 3])\n    expected = pd.DataFrame(\n        {\n            \"A\": data._from_sequence(list(data[:3]) + [na_value], dtype=data.dtype),\n            \"B\": [np.nan, 1, 2, 3],\n        }\n    )\n\n    result = pd.concat([df1, df2], axis=1)\n    self.assert_frame_equal(result, expected)\n    result = pd.concat([df1[\"A\"], df2[\"B\"]], axis=1)\n    self.assert_frame_equal(result, expected)",
                "def test_align(self, data, na_value):\n    a = data[:3]\n    b = data[2:5]\n    r1, r2 = pd.Series(a).align(pd.Series(b, index=[1, 2, 3]))\n\n    # Assumes that the ctor can take a list of scalars of the type\n    e1 = pd.Series(data._from_sequence(list(a) + [na_value], dtype=data.dtype))\n    e2 = pd.Series(data._from_sequence([na_value] + list(b), dtype=data.dtype))\n    self.assert_series_equal(r1, e1)\n    self.assert_series_equal(r2, e2)",
                "def test_align_frame(self, data, na_value):\n    a = data[:3]\n    b = data[2:5]\n    r1, r2 = pd.DataFrame({\"A\": a}).align(pd.DataFrame({\"A\": b}, index=[1, 2, 3]))\n\n    # Assumes that the ctor can take a list of scalars of the type\n    e1 = pd.DataFrame(\n        {\"A\": data._from_sequence(list(a) + [na_value], dtype=data.dtype)}\n    )\n    e2 = pd.DataFrame(\n        {\"A\": data._from_sequence([na_value] + list(b), dtype=data.dtype)}\n    )\n    self.assert_frame_equal(r1, e1)\n    self.assert_frame_equal(r2, e2)",
                "def test_align_series_frame(self, data, na_value):\n    # https://github.com/pandas-dev/pandas/issues/20576\n    ser = pd.Series(data, name=\"a\")\n    df = pd.DataFrame({\"col\": np.arange(len(ser) + 1)})\n    r1, r2 = ser.align(df)\n\n    e1 = pd.Series(\n        data._from_sequence(list(data) + [na_value], dtype=data.dtype),\n        name=ser.name,\n    )\n\n    self.assert_series_equal(r1, e1)\n    self.assert_frame_equal(r2, df)",
                "def test_set_frame_expand_regular_with_extension(self, data):\n    df = pd.DataFrame({\"A\": [1] * len(data)})\n    df[\"B\"] = data\n    expected = pd.DataFrame({\"A\": [1] * len(data), \"B\": data})\n    self.assert_frame_equal(df, expected)",
                "def test_set_frame_expand_extension_with_regular(self, data):\n    df = pd.DataFrame({\"A\": data})\n    df[\"B\"] = [1] * len(data)\n    expected = pd.DataFrame({\"A\": data, \"B\": [1] * len(data)})\n    self.assert_frame_equal(df, expected)",
                "def test_set_frame_overwrite_object(self, data):\n    # https://github.com/pandas-dev/pandas/issues/20555\n    df = pd.DataFrame({\"A\": [1] * len(data)}, dtype=object)\n    df[\"A\"] = data\n    assert df.dtypes[\"A\"] == data.dtype",
                "def test_merge(self, data, na_value):\n    # GH-20743\n    df1 = pd.DataFrame({\"ext\": data[:3], \"int1\": [1, 2, 3], \"key\": [0, 1, 2]})\n    df2 = pd.DataFrame({\"int2\": [1, 2, 3, 4], \"key\": [0, 0, 1, 3]})\n\n    res = pd.merge(df1, df2)\n    exp = pd.DataFrame(\n        {\n            \"int1\": [1, 1, 2],\n            \"int2\": [1, 2, 3],\n            \"key\": [0, 0, 1],\n            \"ext\": data._from_sequence(\n                [data[0], data[0], data[1]], dtype=data.dtype\n            ),\n        }\n    )\n    self.assert_frame_equal(res, exp[[\"ext\", \"int1\", \"key\", \"int2\"]])\n\n    res = pd.merge(df1, df2, how=\"outer\")\n    exp = pd.DataFrame(\n        {\n            \"int1\": [1, 1, 2, 3, np.nan],\n            \"int2\": [1, 2, 3, np.nan, 4],\n            \"key\": [0, 0, 1, 2, 3],\n            \"ext\": data._from_sequence(\n                [data[0], data[0], data[1], data[2], na_value], dtype=data.dtype\n            ),\n        }\n    )\n    self.assert_frame_equal(res, exp[[\"ext\", \"int1\", \"key\", \"int2\"]])",
                "def test_merge_on_extension_array(self, data):\n    # GH 23020\n    a, b = data[:2]\n    key = type(data)._from_sequence([a, b], dtype=data.dtype)\n\n    df = pd.DataFrame({\"key\": key, \"val\": [1, 2]})\n    result = pd.merge(df, df, on=\"key\")\n    expected = pd.DataFrame({\"key\": key, \"val_x\": [1, 2], \"val_y\": [1, 2]})\n    self.assert_frame_equal(result, expected)\n\n    # order\n    result = pd.merge(df.iloc[[1, 0]], df, on=\"key\")\n    expected = expected.iloc[[1, 0]].reset_index(drop=True)\n    self.assert_frame_equal(result, expected)",
                "def test_merge_on_extension_array_duplicates(self, data):\n    # GH 23020\n    a, b = data[:2]\n    key = type(data)._from_sequence([a, b, a], dtype=data.dtype)\n    df1 = pd.DataFrame({\"key\": key, \"val\": [1, 2, 3]})\n    df2 = pd.DataFrame({\"key\": key, \"val\": [1, 2, 3]})\n\n    result = pd.merge(df1, df2, on=\"key\")\n    expected = pd.DataFrame(\n        {\n            \"key\": key.take([0, 0, 0, 0, 1]),\n            \"val_x\": [1, 1, 3, 3, 2],\n            \"val_y\": [1, 3, 1, 3, 2],\n        }\n    )\n    self.assert_frame_equal(result, expected)",
                "@pytest.mark.parametrize(\n    \"columns\",\n    [\n        [\"A\", \"B\"],\n        pd.MultiIndex.from_tuples(\n            [(\"A\", \"a\"), (\"A\", \"b\")], names=[\"outer\", \"inner\"]\n        ),\n    ],\n)\ndef test_stack(self, data, columns):\n    df = pd.DataFrame({\"A\": data[:5], \"B\": data[:5]})\n    df.columns = columns\n    result = df.stack()\n    expected = df.astype(object).stack()\n    # we need a second astype(object), in case the constructor inferred\n    # object -> specialized, as is done for period.\n    expected = expected.astype(object)\n\n    if isinstance(expected, pd.Series):\n        assert result.dtype == df.iloc[:, 0].dtype\n    else:\n        assert all(result.dtypes == df.iloc[:, 0].dtype)\n\n    result = result.astype(object)\n    self.assert_equal(result, expected)",
                "@pytest.mark.parametrize(\n    \"index\",\n    [\n        # Two levels, uniform.\n        pd.MultiIndex.from_product(([[\"A\", \"B\"], [\"a\", \"b\"]]), names=[\"a\", \"b\"]),\n        # non-uniform\n        pd.MultiIndex.from_tuples([(\"A\", \"a\"), (\"A\", \"b\"), (\"B\", \"b\")]),\n        # three levels, non-uniform\n        pd.MultiIndex.from_product([(\"A\", \"B\"), (\"a\", \"b\", \"c\"), (0, 1, 2)]),\n        pd.MultiIndex.from_tuples(\n            [\n                (\"A\", \"a\", 1),\n                (\"A\", \"b\", 0),\n                (\"A\", \"a\", 0),\n                (\"B\", \"a\", 0),\n                (\"B\", \"c\", 1),\n            ]\n        ),\n    ],\n)\n@pytest.mark.parametrize(\"obj\", [\"series\", \"frame\"])\ndef test_unstack(self, data, index, obj):\n    data = data[: len(index)]\n    if obj == \"series\":\n        ser = pd.Series(data, index=index)\n    else:\n        ser = pd.DataFrame({\"A\": data, \"B\": data}, index=index)\n\n    n = index.nlevels\n    levels = list(range(n))\n    # [0, 1, 2]\n    # [(0,), (1,), (2,), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1)]\n    combinations = itertools.chain.from_iterable(\n        itertools.permutations(levels, i) for i in range(1, n)\n    )\n\n    for level in combinations:\n        result = ser.unstack(level=level)\n        assert all(\n            isinstance(result[col].array, type(data)) for col in result.columns\n        )\n        expected = ser.astype(object).unstack(level=level)\n        result = result.astype(object)\n\n        self.assert_frame_equal(result, expected)",
                "def test_ravel(self, data):\n    # as long as EA is 1D-only, ravel is a no-op\n    result = data.ravel()\n    assert type(result) == type(data)\n\n    # Check that we have a view, not a copy\n    result[0] = result[1]\n    assert data[0] == data[1]"
            ],
            "inscope_function_signatures": [
                "test_concat(self, data, in_frame)",
                "test_concat_all_na_block(self, data_missing, in_frame)",
                "test_concat_mixed_dtypes(self, data)",
                "test_concat_columns(self, data, na_value)",
                "test_align(self, data, na_value)",
                "test_align_frame(self, data, na_value)",
                "test_align_series_frame(self, data, na_value)",
                "test_set_frame_expand_regular_with_extension(self, data)",
                "test_set_frame_expand_extension_with_regular(self, data)",
                "test_set_frame_overwrite_object(self, data)",
                "test_merge(self, data, na_value)",
                "test_merge_on_extension_array(self, data)",
                "test_merge_on_extension_array_duplicates(self, data)",
                "test_stack(self, data, columns)",
                "test_unstack(self, data, index, obj)",
                "test_ravel(self, data)"
            ],
            "variables_in_file": {
                "BaseExtensionTests": [
                    12
                ],
                "wrapped": [
                    17,
                    19,
                    20
                ],
                "pd.Series": [
                    129,
                    34,
                    35,
                    100,
                    103,
                    104,
                    44,
                    236,
                    268,
                    17,
                    125
                ],
                "pd": [
                    129,
                    138,
                    140,
                    268,
                    270,
                    144,
                    17,
                    146,
                    19,
                    20,
                    151,
                    157,
                    158,
                    160,
                    161,
                    34,
                    35,
                    37,
                    38,
                    39,
                    41,
                    44,
                    173,
                    174,
                    49,
                    50,
                    51,
                    55,
                    56,
                    60,
                    61,
                    191,
                    192,
                    65,
                    66,
                    193,
                    69,
                    70,
                    197,
                    74,
                    75,
                    77,
                    78,
                    205,
                    80,
                    206,
                    208,
                    209,
                    84,
                    85,
                    92,
                    94,
                    222,
                    100,
                    228,
                    103,
                    104,
                    236,
                    111,
                    114,
                    117,
                    248,
                    253,
                    250,
                    252,
                    125,
                    126
                ],
                "data": [
                    130,
                    138,
                    139,
                    140,
                    266,
                    268,
                    270,
                    144,
                    17,
                    145,
                    146,
                    22,
                    151,
                    152,
                    153,
                    283,
                    29,
                    157,
                    292,
                    293,
                    166,
                    167,
                    297,
                    49,
                    179,
                    180,
                    188,
                    189,
                    74,
                    203,
                    204,
                    77,
                    87,
                    98,
                    99,
                    228,
                    103,
                    104,
                    109,
                    110,
                    115,
                    118,
                    125
                ],
                "in_frame": [
                    24,
                    18,
                    40,
                    36
                ],
                "pd.DataFrame": [
                    138,
                    140,
                    270,
                    144,
                    146,
                    19,
                    151,
                    157,
                    158,
                    161,
                    37,
                    38,
                    41,
                    174,
                    49,
                    50,
                    51,
                    191,
                    193,
                    74,
                    75,
                    77,
                    205,
                    206,
                    209,
                    84,
                    85,
                    228,
                    111,
                    114,
                    117,
                    126
                ],
                "result": [
                    20,
                    22,
                    25,
                    281,
                    27,
                    283,
                    30,
                    286,
                    288,
                    292,
                    293,
                    39,
                    296,
                    42,
                    45,
                    55,
                    57,
                    60,
                    62,
                    192,
                    65,
                    194,
                    67,
                    69,
                    197,
                    71,
                    199,
                    78,
                    79,
                    80,
                    81,
                    208,
                    216,
                    92,
                    93,
                    94,
                    95,
                    230,
                    237,
                    239,
                    241,
                    242
                ],
                "pd.concat": [
                    65,
                    66,
                    69,
                    70,
                    39,
                    78,
                    92,
                    80,
                    20,
                    55,
                    56,
                    60,
                    61,
                    94
                ],
                "len": [
                    138,
                    266,
                    140,
                    145,
                    146,
                    22,
                    151,
                    126
                ],
                "dtype": [
                    237,
                    239,
                    25,
                    27,
                    29
                ],
                "result.dtypes": [
                    25,
                    239
                ],
                "result.dtype": [
                    27,
                    237
                ],
                "data.dtype": [
                    130,
                    103,
                    104,
                    167,
                    204,
                    115,
                    180,
                    189,
                    118,
                    87,
                    153,
                    29
                ],
                "isinstance": [
                    283,
                    236,
                    30
                ],
                "result._data.blocks": [
                    30
                ],
                "result._data": [
                    30
                ],
                "ExtensionBlock": [
                    30
                ],
                "pytest.mark.parametrize": [
                    32,
                    264,
                    15,
                    244,
                    218
                ],
                "pytest.mark": [
                    32,
                    264,
                    15,
                    244,
                    218
                ],
                "pytest": [
                    32,
                    264,
                    15,
                    244,
                    218
                ],
                "valid_block": [
                    34,
                    37,
                    39
                ],
                "data_missing.take": [
                    41,
                    34,
                    35,
                    44
                ],
                "data_missing": [
                    41,
                    34,
                    35,
                    44
                ],
                "na_block": [
                    35,
                    38,
                    39
                ],
                "expected": [
                    140,
                    141,
                    146,
                    147,
                    285,
                    288,
                    41,
                    42,
                    44,
                    45,
                    56,
                    57,
                    61,
                    62,
                    193,
                    66,
                    67,
                    194,
                    70,
                    71,
                    198,
                    199,
                    77,
                    79,
                    81,
                    209,
                    85,
                    216,
                    93,
                    95,
                    231,
                    234,
                    236,
                    242
                ],
                "self.assert_frame_equal": [
                    288,
                    121,
                    194,
                    67,
                    135,
                    199,
                    42,
                    171,
                    141,
                    79,
                    81,
                    147,
                    120,
                    57,
                    216,
                    93,
                    184,
                    95
                ],
                "self": [
                    134,
                    135,
                    141,
                    147,
                    288,
                    42,
                    171,
                    45,
                    184,
                    57,
                    62,
                    194,
                    67,
                    71,
                    199,
                    79,
                    81,
                    216,
                    93,
                    95,
                    105,
                    106,
                    242,
                    120,
                    121
                ],
                "self.assert_series_equal": [
                    134,
                    71,
                    105,
                    106,
                    45,
                    62
                ],
                "df1": [
                    160,
                    65,
                    66,
                    69,
                    70,
                    74,
                    173,
                    78,
                    205,
                    80,
                    49,
                    208,
                    52,
                    92,
                    157,
                    94
                ],
                "df2": [
                    160,
                    65,
                    66,
                    69,
                    70,
                    75,
                    173,
                    78,
                    206,
                    80,
                    208,
                    50,
                    52,
                    84,
                    158,
                    92,
                    94
                ],
                "df3": [
                    51,
                    52
                ],
                "astype": [
                    51,
                    61,
                    70
                ],
                "dfs": [
                    52,
                    55,
                    56,
                    60,
                    61
                ],
                "x.astype": [
                    56
                ],
                "x": [
                    56,
                    60,
                    61
                ],
                "object": [
                    231,
                    234,
                    241,
                    151,
                    56,
                    285,
                    61,
                    286
                ],
                "df1.astype": [
                    66
                ],
                "df2.astype": [
                    66
                ],
                "data._from_sequence": [
                    130,
                    166,
                    103,
                    104,
                    115,
                    179,
                    118,
                    87
                ],
                "list": [
                    130,
                    103,
                    104,
                    273,
                    115,
                    118,
                    87
                ],
                "na_value": [
                    130,
                    103,
                    104,
                    115,
                    180,
                    118,
                    87
                ],
                "np.nan": [
                    88,
                    177,
                    176
                ],
                "np": [
                    88,
                    177,
                    126,
                    176
                ],
                "a": [
                    98,
                    100,
                    103,
                    203,
                    204,
                    109,
                    111,
                    115,
                    188,
                    189
                ],
                "b": [
                    99,
                    100,
                    104,
                    203,
                    204,
                    110,
                    111,
                    118,
                    188,
                    189
                ],
                "r1": [
                    100,
                    134,
                    105,
                    111,
                    120,
                    127
                ],
                "r2": [
                    100,
                    135,
                    106,
                    111,
                    121,
                    127
                ],
                "align": [
                    100,
                    111
                ],
                "e1": [
                    129,
                    134,
                    103,
                    105,
                    114,
                    120
                ],
                "e2": [
                    104,
                    121,
                    106,
                    117
                ],
                "ser": [
                    131,
                    268,
                    270,
                    281,
                    285,
                    125,
                    126,
                    127
                ],
                "df": [
                    135,
                    138,
                    139,
                    141,
                    144,
                    145,
                    147,
                    151,
                    152,
                    153,
                    191,
                    192,
                    197,
                    228,
                    229,
                    230,
                    231,
                    237,
                    239,
                    126,
                    127
                ],
                "np.arange": [
                    126
                ],
                "ser.align": [
                    127
                ],
                "ser.name": [
                    131
                ],
                "df.dtypes": [
                    153
                ],
                "res": [
                    160,
                    171,
                    173,
                    184
                ],
                "pd.merge": [
                    160,
                    192,
                    197,
                    173,
                    208
                ],
                "exp": [
                    184,
                    161,
                    171,
                    174
                ],
                "key": [
                    193,
                    204,
                    205,
                    206,
                    211,
                    189,
                    191
                ],
                "_from_sequence": [
                    204,
                    189
                ],
                "type": [
                    293,
                    283,
                    204,
                    189
                ],
                "df.iloc": [
                    237,
                    197,
                    239
                ],
                "reset_index": [
                    198
                ],
                "expected.iloc": [
                    198
                ],
                "key.take": [
                    211
                ],
                "df.columns": [
                    229
                ],
                "columns": [
                    229
                ],
                "df.stack": [
                    230
                ],
                "stack": [
                    231
                ],
                "df.astype": [
                    231
                ],
                "expected.astype": [
                    234
                ],
                "all": [
                    282,
                    239
                ],
                "result.astype": [
                    241,
                    286
                ],
                "self.assert_equal": [
                    242
                ],
                "pd.MultiIndex.from_tuples": [
                    250,
                    253,
                    222
                ],
                "pd.MultiIndex": [
                    248,
                    250,
                    252,
                    253,
                    222
                ],
                "index": [
                    272,
                    266,
                    268,
                    270
                ],
                "obj": [
                    267
                ],
                "n": [
                    272,
                    273,
                    277
                ],
                "index.nlevels": [
                    272
                ],
                "levels": [
                    273,
                    277
                ],
                "range": [
                    273,
                    277
                ],
                "combinations": [
                    280,
                    276
                ],
                "itertools.chain.from_iterable": [
                    276
                ],
                "itertools.chain": [
                    276
                ],
                "itertools": [
                    276,
                    277
                ],
                "itertools.permutations": [
                    277
                ],
                "i": [
                    277
                ],
                "level": [
                    280,
                    281,
                    285
                ],
                "ser.unstack": [
                    281
                ],
                "array": [
                    283
                ],
                "col": [
                    283
                ],
                "result.columns": [
                    283
                ],
                "unstack": [
                    285
                ],
                "ser.astype": [
                    285
                ],
                "pd.MultiIndex.from_product": [
                    248,
                    252
                ],
                "data.ravel": [
                    292
                ]
            },
            "filtered_variables_in_file": {
                "BaseExtensionTests": [
                    12
                ],
                "wrapped": [
                    17,
                    19,
                    20
                ],
                "pd.Series": [
                    129,
                    34,
                    35,
                    100,
                    103,
                    104,
                    44,
                    236,
                    268,
                    17,
                    125
                ],
                "pd": [
                    129,
                    138,
                    140,
                    268,
                    270,
                    144,
                    17,
                    146,
                    19,
                    20,
                    151,
                    157,
                    158,
                    160,
                    161,
                    34,
                    35,
                    37,
                    38,
                    39,
                    41,
                    44,
                    173,
                    174,
                    49,
                    50,
                    51,
                    55,
                    56,
                    60,
                    61,
                    191,
                    192,
                    65,
                    66,
                    193,
                    69,
                    70,
                    197,
                    74,
                    75,
                    77,
                    78,
                    205,
                    80,
                    206,
                    208,
                    209,
                    84,
                    85,
                    92,
                    94,
                    222,
                    100,
                    228,
                    103,
                    104,
                    236,
                    111,
                    114,
                    117,
                    248,
                    253,
                    250,
                    252,
                    125,
                    126
                ],
                "data": [
                    130,
                    138,
                    139,
                    140,
                    266,
                    268,
                    270,
                    144,
                    17,
                    145,
                    146,
                    22,
                    151,
                    152,
                    153,
                    283,
                    29,
                    157,
                    292,
                    293,
                    166,
                    167,
                    297,
                    49,
                    179,
                    180,
                    188,
                    189,
                    74,
                    203,
                    204,
                    77,
                    87,
                    98,
                    99,
                    228,
                    103,
                    104,
                    109,
                    110,
                    115,
                    118,
                    125
                ],
                "in_frame": [
                    24,
                    18,
                    40,
                    36
                ],
                "pd.DataFrame": [
                    138,
                    140,
                    270,
                    144,
                    146,
                    19,
                    151,
                    157,
                    158,
                    161,
                    37,
                    38,
                    41,
                    174,
                    49,
                    50,
                    51,
                    191,
                    193,
                    74,
                    75,
                    77,
                    205,
                    206,
                    209,
                    84,
                    85,
                    228,
                    111,
                    114,
                    117,
                    126
                ],
                "result": [
                    20,
                    22,
                    25,
                    281,
                    27,
                    283,
                    30,
                    286,
                    288,
                    292,
                    293,
                    39,
                    296,
                    42,
                    45,
                    55,
                    57,
                    60,
                    62,
                    192,
                    65,
                    194,
                    67,
                    69,
                    197,
                    71,
                    199,
                    78,
                    79,
                    80,
                    81,
                    208,
                    216,
                    92,
                    93,
                    94,
                    95,
                    230,
                    237,
                    239,
                    241,
                    242
                ],
                "pd.concat": [
                    65,
                    66,
                    69,
                    70,
                    39,
                    78,
                    92,
                    80,
                    20,
                    55,
                    56,
                    60,
                    61,
                    94
                ],
                "dtype": [
                    237,
                    239,
                    25,
                    27,
                    29
                ],
                "result.dtypes": [
                    25,
                    239
                ],
                "result.dtype": [
                    27,
                    237
                ],
                "data.dtype": [
                    130,
                    103,
                    104,
                    167,
                    204,
                    115,
                    180,
                    189,
                    118,
                    87,
                    153,
                    29
                ],
                "result._data.blocks": [
                    30
                ],
                "result._data": [
                    30
                ],
                "ExtensionBlock": [
                    30
                ],
                "pytest.mark.parametrize": [
                    32,
                    264,
                    15,
                    244,
                    218
                ],
                "pytest.mark": [
                    32,
                    264,
                    15,
                    244,
                    218
                ],
                "pytest": [
                    32,
                    264,
                    15,
                    244,
                    218
                ],
                "valid_block": [
                    34,
                    37,
                    39
                ],
                "data_missing.take": [
                    41,
                    34,
                    35,
                    44
                ],
                "data_missing": [
                    41,
                    34,
                    35,
                    44
                ],
                "na_block": [
                    35,
                    38,
                    39
                ],
                "expected": [
                    140,
                    141,
                    146,
                    147,
                    285,
                    288,
                    41,
                    42,
                    44,
                    45,
                    56,
                    57,
                    61,
                    62,
                    193,
                    66,
                    67,
                    194,
                    70,
                    71,
                    198,
                    199,
                    77,
                    79,
                    81,
                    209,
                    85,
                    216,
                    93,
                    95,
                    231,
                    234,
                    236,
                    242
                ],
                "self.assert_frame_equal": [
                    288,
                    121,
                    194,
                    67,
                    135,
                    199,
                    42,
                    171,
                    141,
                    79,
                    81,
                    147,
                    120,
                    57,
                    216,
                    93,
                    184,
                    95
                ],
                "self": [
                    134,
                    135,
                    141,
                    147,
                    288,
                    42,
                    171,
                    45,
                    184,
                    57,
                    62,
                    194,
                    67,
                    71,
                    199,
                    79,
                    81,
                    216,
                    93,
                    95,
                    105,
                    106,
                    242,
                    120,
                    121
                ],
                "self.assert_series_equal": [
                    134,
                    71,
                    105,
                    106,
                    45,
                    62
                ],
                "df1": [
                    160,
                    65,
                    66,
                    69,
                    70,
                    74,
                    173,
                    78,
                    205,
                    80,
                    49,
                    208,
                    52,
                    92,
                    157,
                    94
                ],
                "df2": [
                    160,
                    65,
                    66,
                    69,
                    70,
                    75,
                    173,
                    78,
                    206,
                    80,
                    208,
                    50,
                    52,
                    84,
                    158,
                    92,
                    94
                ],
                "df3": [
                    51,
                    52
                ],
                "astype": [
                    51,
                    61,
                    70
                ],
                "dfs": [
                    52,
                    55,
                    56,
                    60,
                    61
                ],
                "x.astype": [
                    56
                ],
                "x": [
                    56,
                    60,
                    61
                ],
                "df1.astype": [
                    66
                ],
                "df2.astype": [
                    66
                ],
                "data._from_sequence": [
                    130,
                    166,
                    103,
                    104,
                    115,
                    179,
                    118,
                    87
                ],
                "na_value": [
                    130,
                    103,
                    104,
                    115,
                    180,
                    118,
                    87
                ],
                "np.nan": [
                    88,
                    177,
                    176
                ],
                "np": [
                    88,
                    177,
                    126,
                    176
                ],
                "a": [
                    98,
                    100,
                    103,
                    203,
                    204,
                    109,
                    111,
                    115,
                    188,
                    189
                ],
                "b": [
                    99,
                    100,
                    104,
                    203,
                    204,
                    110,
                    111,
                    118,
                    188,
                    189
                ],
                "r1": [
                    100,
                    134,
                    105,
                    111,
                    120,
                    127
                ],
                "r2": [
                    100,
                    135,
                    106,
                    111,
                    121,
                    127
                ],
                "align": [
                    100,
                    111
                ],
                "e1": [
                    129,
                    134,
                    103,
                    105,
                    114,
                    120
                ],
                "e2": [
                    104,
                    121,
                    106,
                    117
                ],
                "ser": [
                    131,
                    268,
                    270,
                    281,
                    285,
                    125,
                    126,
                    127
                ],
                "df": [
                    135,
                    138,
                    139,
                    141,
                    144,
                    145,
                    147,
                    151,
                    152,
                    153,
                    191,
                    192,
                    197,
                    228,
                    229,
                    230,
                    231,
                    237,
                    239,
                    126,
                    127
                ],
                "np.arange": [
                    126
                ],
                "ser.align": [
                    127
                ],
                "ser.name": [
                    131
                ],
                "df.dtypes": [
                    153
                ],
                "res": [
                    160,
                    171,
                    173,
                    184
                ],
                "pd.merge": [
                    160,
                    192,
                    197,
                    173,
                    208
                ],
                "exp": [
                    184,
                    161,
                    171,
                    174
                ],
                "key": [
                    193,
                    204,
                    205,
                    206,
                    211,
                    189,
                    191
                ],
                "_from_sequence": [
                    204,
                    189
                ],
                "df.iloc": [
                    237,
                    197,
                    239
                ],
                "reset_index": [
                    198
                ],
                "expected.iloc": [
                    198
                ],
                "key.take": [
                    211
                ],
                "df.columns": [
                    229
                ],
                "columns": [
                    229
                ],
                "df.stack": [
                    230
                ],
                "stack": [
                    231
                ],
                "df.astype": [
                    231
                ],
                "expected.astype": [
                    234
                ],
                "result.astype": [
                    241,
                    286
                ],
                "self.assert_equal": [
                    242
                ],
                "pd.MultiIndex.from_tuples": [
                    250,
                    253,
                    222
                ],
                "pd.MultiIndex": [
                    248,
                    250,
                    252,
                    253,
                    222
                ],
                "index": [
                    272,
                    266,
                    268,
                    270
                ],
                "obj": [
                    267
                ],
                "n": [
                    272,
                    273,
                    277
                ],
                "index.nlevels": [
                    272
                ],
                "levels": [
                    273,
                    277
                ],
                "combinations": [
                    280,
                    276
                ],
                "itertools.chain.from_iterable": [
                    276
                ],
                "itertools.chain": [
                    276
                ],
                "itertools": [
                    276,
                    277
                ],
                "itertools.permutations": [
                    277
                ],
                "i": [
                    277
                ],
                "level": [
                    280,
                    281,
                    285
                ],
                "ser.unstack": [
                    281
                ],
                "array": [
                    283
                ],
                "col": [
                    283
                ],
                "result.columns": [
                    283
                ],
                "unstack": [
                    285
                ],
                "ser.astype": [
                    285
                ],
                "pd.MultiIndex.from_product": [
                    248,
                    252
                ],
                "data.ravel": [
                    292
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/tests/arithmetic/test_period.py",
                "test_function": "test_pi_add_offset_n_gt1",
                "test_function_code": "    @pytest.mark.parametrize(\"transpose\", [True, False])\n    def test_pi_add_offset_n_gt1(self, box_with_array, transpose):\n        # GH#23215\n        # add offset to PeriodIndex with freq.n > 1\n\n        per = pd.Period(\"2016-01\", freq=\"2M\")\n        pi = pd.PeriodIndex([per])\n\n        expected = pd.PeriodIndex([\"2016-03\"], freq=\"2M\")\n\n        pi = tm.box_expected(pi, box_with_array, transpose=transpose)\n        expected = tm.box_expected(expected, box_with_array, transpose=transpose)\n\n        result = pi + per.freq\n        tm.assert_equal(result, expected)\n\n        result = per.freq + pi\n        tm.assert_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] are different  Attribute \"dtype\" are different [left]:  period[2M] [right]: object",
                "full_test_error": "self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x1170b6ee0>\nbox_with_array = <class 'pandas.core.frame.DataFrame'>, transpose = True\n\n    @pytest.mark.parametrize(\"transpose\", [True, False])\n    def test_pi_add_offset_n_gt1(self, box_with_array, transpose):\n        # GH#23215\n        # add offset to PeriodIndex with freq.n > 1\n    \n        per = pd.Period(\"2016-01\", freq=\"2M\")\n        pi = pd.PeriodIndex([per])\n    \n        expected = pd.PeriodIndex([\"2016-03\"], freq=\"2M\")\n    \n        pi = tm.box_expected(pi, box_with_array, transpose=transpose)\n        expected = tm.box_expected(expected, box_with_array, transpose=transpose)\n    \n        result = pi + per.freq\n>       tm.assert_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  period[2M]\nE       [right]: object\n\npandas/tests/arithmetic/test_period.py:770: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('transpose', [True, False])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/tests/arithmetic/test_period.py",
                "test_function": "test_parr_add_sub_td64_nat",
                "test_function_code": "    @pytest.mark.parametrize(\"transpose\", [True, False])\n    def test_parr_add_sub_td64_nat(self, box_with_array, transpose):\n        # GH#23320 special handling for timedelta64(\"NaT\")\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        other = np.timedelta64(\"NaT\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n\n        obj = tm.box_expected(pi, box_with_array, transpose=transpose)\n        expected = tm.box_expected(expected, box_with_array, transpose=transpose)\n\n        result = obj + other\n        tm.assert_equal(result, expected)\n        result = other + obj\n        tm.assert_equal(result, expected)\n        result = obj - other\n        tm.assert_equal(result, expected)\n        with pytest.raises(TypeError):\n            other - obj",
                "test_error": "TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'",
                "full_test_error": "self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x1170a0940>\nbox_with_array = <class 'pandas.core.frame.DataFrame'>, transpose = True\n\n    @pytest.mark.parametrize(\"transpose\", [True, False])\n    def test_parr_add_sub_td64_nat(self, box_with_array, transpose):\n        # GH#23320 special handling for timedelta64(\"NaT\")\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        other = np.timedelta64(\"NaT\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n    \n        obj = tm.box_expected(pi, box_with_array, transpose=transpose)\n        expected = tm.box_expected(expected, box_with_array, transpose=transpose)\n    \n>       result = obj + other\n\npandas/tests/arithmetic/test_period.py:995: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:716: in f\n    new_data = dispatch_to_series(self, other, op)\npandas/core/ops/__init__.py:413: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:208: in evaluate\n    return _evaluate(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:376: in column_op\n    return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:376: in <dictcomp>\n    return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\npandas/core/ops/common.py:64: in new_method\n    return method(self, other)\npandas/core/ops/__init__.py:497: in wrapper\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\npandas/core/ops/array_ops.py:191: in arithmetic_op\n    res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>\nleft = array([Period('1994-04-01', '19D')], dtype=object)\nright = <TimedeltaArray>\n[NaT]\nLength: 1, dtype: timedelta64[ns]\n\n    def dispatch_to_extension_op(\n        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n    ):\n        \"\"\"\n        Assume that left or right is a Series backed by an ExtensionArray,\n        apply the operator defined by op.\n    \n        Parameters\n        ----------\n        op : binary operator\n        left : ExtensionArray or np.ndarray\n        right : object\n    \n        Returns\n        -------\n        ExtensionArray or np.ndarray\n            2-tuple of these if op is divmod or rdivmod\n        \"\"\"\n        # NB: left and right should already be unboxed, so neither should be\n        #  a Series or Index.\n    \n        if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n            # We need to cast datetime64 and timedelta64 ndarrays to\n            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n            #  PandasArray as that behaves poorly with e.g. IntegerArray.\n            left = array(left)\n    \n        # The op calls will raise TypeError if the op is not defined\n        # on the ExtensionArray\n>       res_values = op(left, right)\nE       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'\n\npandas/core/ops/dispatch.py:127: TypeError",
                "traceback": "pandas/core/ops/__init__.py:716: in f\n    new_data = dispatch_to_series(self, other, op)\npandas/core/ops/__init__.py:413: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:208: in evaluate\n    return _evaluate(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:376: in column_op\n    return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:376: in <dictcomp>\n    return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\npandas/core/ops/common.py:64: in new_method\n    return method(self, other)\npandas/core/ops/__init__.py:497: in wrapper\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\npandas/core/ops/array_ops.py:191: in arithmetic_op\n    res_values = dispatch_to_extension_op(op, lvalues, rvalues)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>\nleft = array([Period('1994-04-01', '19D')], dtype=object)\nright = <TimedeltaArray>\n[NaT]\nLength: 1, dtype: timedelta64[ns]\n\n    def dispatch_to_extension_op(\n        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n    ):\n        \"\"\"\n        Assume that left or right is a Series backed by an ExtensionArray,\n        apply the operator defined by op.\n    \n        Parameters\n        ----------\n        op : binary operator\n        left : ExtensionArray or np.ndarray\n        right : object\n    \n        Returns\n        -------\n        ExtensionArray or np.ndarray\n            2-tuple of these if op is divmod or rdivmod\n        \"\"\"\n        # NB: left and right should already be unboxed, so neither should be\n        #  a Series or Index.\n    \n        if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n            # We need to cast datetime64 and timedelta64 ndarrays to\n            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n            #  PandasArray as that behaves poorly with e.g. IntegerArray.\n            left = array(left)\n    \n        # The op calls will raise TypeError if the op is not defined\n        # on the ExtensionArray\n>       res_values = op(left, right)\nE       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'\n\npandas/core/ops/dispatch.py:127: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('transpose', [True, False])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/tests/arithmetic/test_period.py",
                "test_function": "test_parr_add_sub_tdt64_nat_array",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            np.array([\"NaT\"] * 9, dtype=\"m8[ns]\"),\n            TimedeltaArray._from_sequence([\"NaT\"] * 9),\n        ],\n    )\n    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n\n        obj = tm.box_expected(pi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = obj + other\n        tm.assert_equal(result, expected)\n        result = other + obj\n        tm.assert_equal(result, expected)\n        result = obj - other\n        tm.assert_equal(result, expected)\n        with pytest.raises(TypeError):\n            other - obj",
                "test_error": "TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'",
                "full_test_error": "self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x117191940>\nbox_with_array = <class 'pandas.core.frame.DataFrame'>\nother = array(['NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT', 'NaT'],\n      dtype='timedelta64[ns]')\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            np.array([\"NaT\"] * 9, dtype=\"m8[ns]\"),\n            TimedeltaArray._from_sequence([\"NaT\"] * 9),\n        ],\n    )\n    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n    \n        obj = tm.box_expected(pi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n    \n>       result = obj + other\n\npandas/tests/arithmetic/test_period.py:1018: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:708: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:616: in _combine_series_frame\n    new_data = dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:413: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:208: in evaluate\n    return _evaluate(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:396: in column_op\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:396: in <dictcomp>\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/common.py:64: in new_method\n    return method(self, other)\npandas/core/ops/__init__.py:497: in wrapper\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\npandas/core/ops/array_ops.py:191: in arithmetic_op\n    res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>\nleft = array([Period('1994-04-01', '19D')], dtype=object)\nright = <TimedeltaArray>\n[NaT]\nLength: 1, dtype: timedelta64[ns]\n\n    def dispatch_to_extension_op(\n        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n    ):\n        \"\"\"\n        Assume that left or right is a Series backed by an ExtensionArray,\n        apply the operator defined by op.\n    \n        Parameters\n        ----------\n        op : binary operator\n        left : ExtensionArray or np.ndarray\n        right : object\n    \n        Returns\n        -------\n        ExtensionArray or np.ndarray\n            2-tuple of these if op is divmod or rdivmod\n        \"\"\"\n        # NB: left and right should already be unboxed, so neither should be\n        #  a Series or Index.\n    \n        if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n            # We need to cast datetime64 and timedelta64 ndarrays to\n            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n            #  PandasArray as that behaves poorly with e.g. IntegerArray.\n            left = array(left)\n    \n        # The op calls will raise TypeError if the op is not defined\n        # on the ExtensionArray\n>       res_values = op(left, right)\nE       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'\n\npandas/core/ops/dispatch.py:127: TypeError",
                "traceback": "pandas/core/ops/__init__.py:708: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:616: in _combine_series_frame\n    new_data = dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:413: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:208: in evaluate\n    return _evaluate(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:396: in column_op\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:396: in <dictcomp>\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/common.py:64: in new_method\n    return method(self, other)\npandas/core/ops/__init__.py:497: in wrapper\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\npandas/core/ops/array_ops.py:191: in arithmetic_op\n    res_values = dispatch_to_extension_op(op, lvalues, rvalues)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>\nleft = array([Period('1994-04-01', '19D')], dtype=object)\nright = <TimedeltaArray>\n[NaT]\nLength: 1, dtype: timedelta64[ns]\n\n    def dispatch_to_extension_op(\n        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n    ):\n        \"\"\"\n        Assume that left or right is a Series backed by an ExtensionArray,\n        apply the operator defined by op.\n    \n        Parameters\n        ----------\n        op : binary operator\n        left : ExtensionArray or np.ndarray\n        right : object\n    \n        Returns\n        -------\n        ExtensionArray or np.ndarray\n            2-tuple of these if op is divmod or rdivmod\n        \"\"\"\n        # NB: left and right should already be unboxed, so neither should be\n        #  a Series or Index.\n    \n        if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n            # We need to cast datetime64 and timedelta64 ndarrays to\n            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n            #  PandasArray as that behaves poorly with e.g. IntegerArray.\n            left = array(left)\n    \n        # The op calls will raise TypeError if the op is not defined\n        # on the ExtensionArray\n>       res_values = op(left, right)\nE       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'\n\npandas/core/ops/dispatch.py:127: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('other', [np.array(['NaT'] * 9, dtype='m8[ns]'), TimedeltaArray._from_sequence(['NaT'] * 9)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_105/pandas/tests/arithmetic/test_period.py",
                "test_function": "test_parr_add_sub_tdt64_nat_array",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"other\",\n        [\n            np.array([\"NaT\"] * 9, dtype=\"m8[ns]\"),\n            TimedeltaArray._from_sequence([\"NaT\"] * 9),\n        ],\n    )\n    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n\n        obj = tm.box_expected(pi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n\n        result = obj + other\n        tm.assert_equal(result, expected)\n        result = other + obj\n        tm.assert_equal(result, expected)\n        result = obj - other\n        tm.assert_equal(result, expected)\n        with pytest.raises(TypeError):\n            other - obj",
                "test_error": "TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'",
                "full_test_error": "self = <pandas.tests.arithmetic.test_period.TestPeriodIndexArithmetic object at 0x117074e20>\nbox_with_array = <class 'pandas.core.frame.DataFrame'>\nother = <TimedeltaArray>\n[NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT, NaT]\nLength: 9, dtype: timedelta64[ns]\n\n    @pytest.mark.parametrize(\n        \"other\",\n        [\n            np.array([\"NaT\"] * 9, dtype=\"m8[ns]\"),\n            TimedeltaArray._from_sequence([\"NaT\"] * 9),\n        ],\n    )\n    def test_parr_add_sub_tdt64_nat_array(self, box_with_array, other):\n        pi = pd.period_range(\"1994-04-01\", periods=9, freq=\"19D\")\n        expected = pd.PeriodIndex([\"NaT\"] * 9, freq=\"19D\")\n    \n        obj = tm.box_expected(pi, box_with_array)\n        expected = tm.box_expected(expected, box_with_array)\n    \n>       result = obj + other\n\npandas/tests/arithmetic/test_period.py:1018: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:708: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:616: in _combine_series_frame\n    new_data = dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:413: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:208: in evaluate\n    return _evaluate(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:396: in column_op\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:396: in <dictcomp>\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/common.py:64: in new_method\n    return method(self, other)\npandas/core/ops/__init__.py:497: in wrapper\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\npandas/core/ops/array_ops.py:191: in arithmetic_op\n    res_values = dispatch_to_extension_op(op, lvalues, rvalues)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>\nleft = array([Period('1994-04-01', '19D')], dtype=object)\nright = <TimedeltaArray>\n[NaT]\nLength: 1, dtype: timedelta64[ns]\n\n    def dispatch_to_extension_op(\n        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n    ):\n        \"\"\"\n        Assume that left or right is a Series backed by an ExtensionArray,\n        apply the operator defined by op.\n    \n        Parameters\n        ----------\n        op : binary operator\n        left : ExtensionArray or np.ndarray\n        right : object\n    \n        Returns\n        -------\n        ExtensionArray or np.ndarray\n            2-tuple of these if op is divmod or rdivmod\n        \"\"\"\n        # NB: left and right should already be unboxed, so neither should be\n        #  a Series or Index.\n    \n        if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n            # We need to cast datetime64 and timedelta64 ndarrays to\n            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n            #  PandasArray as that behaves poorly with e.g. IntegerArray.\n            left = array(left)\n    \n        # The op calls will raise TypeError if the op is not defined\n        # on the ExtensionArray\n>       res_values = op(left, right)\nE       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'\n\npandas/core/ops/dispatch.py:127: TypeError",
                "traceback": "pandas/core/ops/__init__.py:708: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:616: in _combine_series_frame\n    new_data = dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:413: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:208: in evaluate\n    return _evaluate(op, op_str, a, b)\npandas/core/computation/expressions.py:70: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:396: in column_op\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:396: in <dictcomp>\n    return {i: func(a.iloc[:, i], b[i]) for i in range(len(a.columns))}\npandas/core/ops/common.py:64: in new_method\n    return method(self, other)\npandas/core/ops/__init__.py:497: in wrapper\n    result = arithmetic_op(lvalues, rvalues, op, str_rep)\npandas/core/ops/array_ops.py:191: in arithmetic_op\n    res_values = dispatch_to_extension_op(op, lvalues, rvalues)",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function add>\nleft = array([Period('1994-04-01', '19D')], dtype=object)\nright = <TimedeltaArray>\n[NaT]\nLength: 1, dtype: timedelta64[ns]\n\n    def dispatch_to_extension_op(\n        op, left: Union[ABCExtensionArray, np.ndarray], right: Any,\n    ):\n        \"\"\"\n        Assume that left or right is a Series backed by an ExtensionArray,\n        apply the operator defined by op.\n    \n        Parameters\n        ----------\n        op : binary operator\n        left : ExtensionArray or np.ndarray\n        right : object\n    \n        Returns\n        -------\n        ExtensionArray or np.ndarray\n            2-tuple of these if op is divmod or rdivmod\n        \"\"\"\n        # NB: left and right should already be unboxed, so neither should be\n        #  a Series or Index.\n    \n        if left.dtype.kind in \"mM\" and isinstance(left, np.ndarray):\n            # We need to cast datetime64 and timedelta64 ndarrays to\n            #  DatetimeArray/TimedeltaArray.  But we avoid wrapping others in\n            #  PandasArray as that behaves poorly with e.g. IntegerArray.\n            left = array(left)\n    \n        # The op calls will raise TypeError if the op is not defined\n        # on the ExtensionArray\n>       res_values = op(left, right)\nE       TypeError: unsupported operand type(s) for +: 'numpy.ndarray' and 'TimedeltaArray'\n\npandas/core/ops/dispatch.py:127: TypeError",
                "test_function_decorators": [
                    "pytest.mark.parametrize('other', [np.array(['NaT'] * 9, dtype='m8[ns]'), TimedeltaArray._from_sequence(['NaT'] * 9)])"
                ]
            }
        ]
    }
}