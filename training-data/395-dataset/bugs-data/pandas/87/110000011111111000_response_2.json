{
    "pandas": [
        {
            "bugID": 87,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 453,
            "file_name": "pandas/core/reshape/pivot.py",
            "replace_code": "def crosstab(index, columns, values=None, rownames=None, colnames=None, aggfunc=None, margins=False, margins_name='All', dropna=True, normalize=False):\n    import pandas as pd\n    from pandas import DataFrame\n    from numpy import nan, reshape, in1d\n    index = com.maybe_make_list(index)\n    columns = com.maybe_make_list(columns)\n    rownames = _get_names(index, rownames, prefix='row')\n    colnames = _get_names(columns, colnames, prefix='col')\n    \n    if isinstance(index[0], pd.Series):\n        common_idx = index[0].index\n        for arr in index[1:]:\n            common_idx = common_idx.union(arr.index)\n        for arr in columns:\n            common_idx = common_idx.union(arr.index)\n        common_idx = common_idx.intersection(common_idx)\n    else:\n        common_idx = None\n    \n    data = {}\n    data.update(zip(rownames, index))\n    data.update(zip(colnames, columns))\n    \n    if values is not None and aggfunc is None:\n        raise ValueError(\"values cannot be used without an aggfunc.\")\n    elif values is not None:\n        data.update({str(i): values[:, i] for i in range(values.shape[1])})\n        return DataFrame(data, index=common_idx)\n    \n    fill_value = None if values is None else nan\n    kwargs = {\"fill_value\": fill_value}\n    \n    table = DataFrame(data, index=common_idx).pivot_table(\n        \"__dummy__\",\n        index=rownames,\n        columns=colnames,\n        aggfunc=lambda x: len(x),\n        margins=bool(margins),\n        margins_name=margins_name,\n        dropna=dropna,\n        **kwargs)\n    \n    if isinstance(index[0], (pd.Series, pd.DataFrame)):\n        mask = in1d(common_idx, index[0].index)\n        for arr in index[1:]:\n            mask &= in1d(common_idx, arr.index)\n        mask &= in1d(common_idx, columns[0].index)\n        table = table[mask]\n    if normalize:\n        table = (table.T / table.sum(axis=1)).T\n    return table"
        }
    ]
}