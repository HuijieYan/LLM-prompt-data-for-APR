{
    "1.1.1": "def _recast_datetimelike_result(result: DataFrame) -> DataFrame:\n    \n    result = result.copy()\n\n    obj_cols = [\n        idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\n    ]\n\n    # See GH#26285\n    for n in obj_cols:\n        converted = maybe_convert_objects(\n            result.iloc[:, n].values, convert_numeric=False\n        )\n\n        result.iloc[:, n] = converted\n    return result\n",
    "1.1.2": "If we have date/time like in the original, then coerce dates\nas we are stacking can easily have object dtypes here.\n\nParameters\n----------\nresult : DataFrame\n\nReturns\n-------\nDataFrame\n\nNotes\n-----\n- Assumes Groupby._selected_obj has ndim==2 and at least one\ndatetimelike column",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_140/pandas/core/groupby/generic.py",
    "1.3.2": null,
    "1.4.1": [
        "@pytest.mark.parametrize(\n    \"group_column_dtlike\",\n    [datetime.today(), datetime.today().date(), datetime.today().time()],\n)\ndef test_apply_datetime_issue(group_column_dtlike):\n    # GH-28247\n    # groupby-apply throws an error if one of the columns in the DataFrame\n    #   is a datetime object and the column labels are different from\n    #   standard int values in range(len(num_columns))\n\n    df = pd.DataFrame({\"a\": [\"foo\"], \"b\": [group_column_dtlike]})\n    result = df.groupby(\"a\").apply(lambda x: pd.Series([\"spam\"], index=[42]))\n\n    expected = pd.DataFrame(\n        [\"spam\"], Index([\"foo\"], dtype=\"object\", name=\"a\"), columns=[42]\n    )\n    tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_140/pandas/tests/groupby/test_apply.py"
    ],
    "2.1.1": [
        [
            "E   KeyError: 0"
        ]
    ],
    "2.1.2": [
        [
            "group_column_dtlike = datetime.datetime(2023, 12, 11, 19, 18, 17, 355859)\n\n    @pytest.mark.parametrize(\n        \"group_column_dtlike\",\n        [datetime.today(), datetime.today().date(), datetime.today().time()],\n    )\n    def test_apply_datetime_issue(group_column_dtlike):\n        # GH-28247\n        # groupby-apply throws an error if one of the columns in the DataFrame\n        #   is a datetime object and the column labels are different from\n        #   standard int values in range(len(num_columns))\n    \n        df = pd.DataFrame({\"a\": [\"foo\"], \"b\": [group_column_dtlike]})\n>       result = df.groupby(\"a\").apply(lambda x: pd.Series([\"spam\"], index=[42]))\n\npandas/tests/groupby/test_apply.py:673: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/groupby/groupby.py:727: in apply\n    result = self._python_apply_general(f)\npandas/core/groupby/groupby.py:745: in _python_apply_general\n    return self._wrap_applied_output(\npandas/core/groupby/generic.py:516: in _wrap_applied_output\n    result = _recast_datetimelike_result(result)\npandas/core/groupby/generic.py:1915: in _recast_datetimelike_result\n    obj_cols = [\npandas/core/groupby/generic.py:1916: in <listcomp>\n    idx for idx in range(len(result.columns)) if is_object_dtype(result.dtypes[idx])\npandas/core/series.py:1081: in __getitem__\n    result = self.index.get_value(self, key)\npandas/core/indexes/base.py:4658: in get_value\n    return self._engine.get_value(s, k, tz=getattr(series.dtype, \"tz\", None))\npandas/_libs/index.pyx:77: in pandas._libs.index.IndexEngine.get_value\n    cpdef get_value(self, ndarray arr, object key, object tz=None):\npandas/_libs/index.pyx:85: in pandas._libs.index.IndexEngine.get_value\n    loc = self.get_loc(key)\npandas/_libs/index.pyx:128: in pandas._libs.index.IndexEngine.get_loc\n    return self.mapping.get_item(val)\npandas/_libs/hashtable_class_helper.pxi:992: in pandas._libs.hashtable.Int64HashTable.get_item\n    cpdef get_item(self, int64_t val):\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise KeyError(val)",
            "\npandas/_libs/hashtable_class_helper.pxi:998: KeyError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "result": "       42\na        \nfoo  spam",
                "result.copy": "<bound method NDFrame.copy of        42\na        \nfoo  spam>",
                "result.columns": "Int64Index([42], dtype='int64')",
                "result.dtypes": "42    object\ndtype: object",
                "result.iloc": "<pandas.core.indexing._iLocIndexer object at 0x115530d60>"
            },
            {
                "obj_cols": "[0]",
                "n": "0",
                "converted": "array(['spam'], dtype=object)",
                "result.iloc": "<pandas.core.indexing._iLocIndexer object at 0x11556d900>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "result": "DataFrame",
                "result.copy": "method",
                "result.columns": "Int64Index",
                "result.dtypes": "Series",
                "result.iloc": "_iLocIndexer"
            },
            {
                "obj_cols": "list",
                "n": "int",
                "converted": "ndarray",
                "result.iloc": "_iLocIndexer"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}