{
    "1.1.1": "def nunique(self, dropna: bool = True) -> Series:\n    \n    ids, _, _ = self.grouper.group_info\n\n    val = self.obj._internal_get_values()\n\n    # GH 27951\n    # temporary fix while we wait for NumPy bug 12629 to be fixed\n    val[isna(val)] = np.datetime64(\"NaT\")\n\n    try:\n        sorter = np.lexsort((val, ids))\n    except TypeError:  # catches object dtypes\n        msg = f\"val.dtype must be object, got {val.dtype}\"\n        assert val.dtype == object, msg\n        val, _ = algorithms.factorize(val, sort=False)\n        sorter = np.lexsort((val, ids))\n        _isna = lambda a: a == -1\n    else:\n        _isna = isna\n\n    ids, val = ids[sorter], val[sorter]\n\n    # group boundaries are where group ids change\n    # unique observations are where sorted values change\n    idx = np.r_[0, 1 + np.nonzero(ids[1:] != ids[:-1])[0]]\n    inc = np.r_[1, val[1:] != val[:-1]]\n\n    # 1st item of each group is a new unique observation\n    mask = _isna(val)\n    if dropna:\n        inc[idx] = 1\n        inc[mask] = 0\n    else:\n        inc[mask & np.r_[False, mask[:-1]]] = 0\n        inc[idx] = 1\n\n    out = np.add.reduceat(inc, idx).astype(\"int64\", copy=False)\n    if len(ids):\n        # NaN/NaT group exists if the head of ids is -1,\n        # so remove it from res and exclude its index from idx\n        if ids[0] == -1:\n            res = out[1:]\n            idx = idx[np.flatnonzero(idx)]\n        else:\n            res = out\n    else:\n        res = out[1:]\n    ri = self.grouper.result_index\n\n    # we might have duplications among the bins\n    if len(res) != len(ri):\n        res, out = np.zeros(len(ri), dtype=out.dtype), res\n        res[ids[idx]] = out\n\n    result = Series(res, index=ri, name=self._selection_name)\n    return self._reindex_output(result, fill_value=0)\n",
    "1.1.2": "Return number of unique elements in the group.\n\nReturns\n-------\nSeries\n    Number of unique values within each group.",
    "1.2.1": "@pin_whitelisted_properties(Series, base.series_apply_whitelist)\nclass SeriesGroupBy(GroupBy)",
    "1.2.2": null,
    "1.2.3": [
        "_selection_name(self)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/core/groupby/generic.py",
    "1.3.2": [
        "_selection_name(self)"
    ],
    "1.4.1": [
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)",
        "@pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n@pytest.mark.parametrize(\"m\", [10, 100, 1000])\n@pytest.mark.parametrize(\"sort\", [False, True])\n@pytest.mark.parametrize(\"dropna\", [False, True])\ndef test_series_groupby_nunique(n, m, sort, dropna):\n    def check_nunique(df, keys, as_index=True):\n        original_df = df.copy()\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        left = gr[\"julie\"].nunique(dropna=dropna)\n\n        gr = df.groupby(keys, as_index=as_index, sort=sort)\n        right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n        if not as_index:\n            right = right.reset_index(drop=True)\n\n        tm.assert_series_equal(left, right, check_names=False)\n        tm.assert_frame_equal(df, original_df)\n\n    days = date_range(\"2015-08-23\", periods=10)\n\n    frame = DataFrame(\n        {\n            \"jim\": np.random.choice(list(ascii_lowercase), n),\n            \"joe\": np.random.choice(days, n),\n            \"julie\": np.random.randint(0, m, n),\n        }\n    )\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n\n    frame.loc[1::17, \"jim\"] = None\n    frame.loc[3::37, \"joe\"] = None\n    frame.loc[7::19, \"julie\"] = None\n    frame.loc[8::19, \"julie\"] = None\n    frame.loc[9::19, \"julie\"] = None\n\n    check_nunique(frame, [\"jim\"])\n    check_nunique(frame, [\"jim\", \"joe\"])\n    check_nunique(frame, [\"jim\"], as_index=False)\n    check_nunique(frame, [\"jim\", \"joe\"], as_index=False)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_52/pandas/tests/groupby/test_function.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [7.0, 8.0, 1.0, 4.0, 7.0, 1.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 2.0, 0.0, 9.0, 4.0, 1.0, 0.0, 8.0, 6.0, 0.0, 3.0, 6.0, 4.0, 4.0, 6.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 5.0, 2.0, 5.0, 3.0, 2.0, 2.0, 7.0, 4.0, 9.0, 4.0, 1.0, 0.0, 5.0, 4.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 5.0, 9.0, 0.0, 1.0, 4.0, 7.0, 7.0, 3.0, 6.0, 7.0, 0.0, 1.0, 1.0, 1.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 3.0, 3.0, 7.0, 8.0, 0.0, 6.0, 3.0, 7.0, 2.0, 9.0, 7.0, 1.0, 1.0, 1.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 2.0, 7.0, 5.0, 0.0, 9.0, 5.0, 1.0, 3.0, 1.0, 8.0, 5.0, 4.0, 1.0]\nE   [right]: [7.0, 8.0, 1.0, 4.0, 7.0, 1.0, 6.0, nan, nan, nan, 5.0, 2.0, 0.0, 9.0, 4.0, 1.0, 0.0, 8.0, 6.0, 0.0, 3.0, 6.0, 4.0, 4.0, 6.0, 3.0, nan, nan, nan, 5.0, 5.0, 2.0, 5.0, 3.0, 2.0, 2.0, 7.0, 4.0, 9.0, 4.0, 1.0, 0.0, 5.0, 4.0, 5.0, nan, nan, nan, 4.0, 5.0, 9.0, 0.0, 1.0, 4.0, 7.0, 7.0, 3.0, 6.0, 7.0, 0.0, 1.0, 1.0, 1.0, 4.0, nan, nan, nan, 9.0, 3.0, 3.0, 7.0, 8.0, 0.0, 6.0, 3.0, 7.0, 2.0, 9.0, 7.0, 1.0, 1.0, 1.0, 0.0, nan, nan, nan, 3.0, 2.0, 7.0, 5.0, 0.0, 9.0, 5.0, 1.0, 3.0, 1.0, 8.0, 5.0, 4.0, 1.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [6.0, 8.0, 9.0, 8.0, 6.0, 0.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 4.0, 4.0, 6.0, 8.0, 0.0, 0.0, 7.0, 1.0, 5.0, 4.0, 5.0, 4.0, 7.0, 6.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 8.0, 0.0, 4.0, 2.0, 0.0, 3.0, 4.0, 0.0, 2.0, 9.0, 6.0, 7.0, 2.0, 4.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 5.0, 1.0, 8.0, 9.0, 9.0, 2.0, 3.0, 3.0, 4.0, 5.0, 1.0, 6.0, 6.0, 3.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 3.0, 9.0, 4.0, 1.0, 4.0, 3.0, 8.0, 5.0, 3.0, 3.0, 6.0, 2.0, 5.0, 0.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 0.0, 9.0, 7.0, 0.0, 2.0, 3.0, 1.0, 9.0, 1.0, 1.0, 2.0, 3.0, 8.0, ...]\nE   [right]: [6.0, 8.0, 9.0, 8.0, 6.0, 0.0, 2.0, nan, nan, nan, 3.0, 4.0, 4.0, 6.0, 8.0, 0.0, 0.0, 7.0, 1.0, 5.0, 4.0, 5.0, 4.0, 7.0, 6.0, 1.0, nan, nan, nan, 4.0, 8.0, 0.0, 4.0, 2.0, 0.0, 3.0, 4.0, 0.0, 2.0, 9.0, 6.0, 7.0, 2.0, 4.0, 8.0, nan, nan, nan, 1.0, 5.0, 1.0, 8.0, 9.0, 9.0, 2.0, 3.0, 3.0, 4.0, 5.0, 1.0, 6.0, 6.0, 3.0, 0.0, nan, nan, nan, 6.0, 3.0, 9.0, 4.0, 1.0, 4.0, 3.0, 8.0, 5.0, 3.0, 3.0, 6.0, 2.0, 5.0, 0.0, 4.0, nan, nan, nan, 0.0, 0.0, 9.0, 7.0, 0.0, 2.0, 3.0, 1.0, 9.0, 1.0, 1.0, 2.0, 3.0, 8.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [2.0, 7.0, 9.0, 8.0, 9.0, 6.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 0.0, 5.0, 9.0, 0.0, 6.0, 7.0, 9.0, 6.0, 4.0, 7.0, 3.0, 4.0, 4.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 5.0, 6.0, 3.0, 0.0, 6.0, 0.0, 3.0, 1.0, 6.0, 8.0, 8.0, 7.0, 4.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 1.0, 2.0, 7.0, 3.0, 7.0, 1.0, 7.0, 3.0, 7.0, 3.0, 9.0, 5.0, 4.0, 2.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 6.0, 9.0, 3.0, 4.0, 1.0, 2.0, 9.0, 2.0, 4.0, 0.0, 2.0, 1.0, 1.0, 9.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 7.0, 5.0, 9.0, 5.0, 2.0, 4.0, 6.0, 7.0, 1.0, 8.0, 3.0, 9.0, 7.0, ...]\nE   [right]: [2.0, 7.0, 9.0, 8.0, 9.0, 6.0, 1.0, nan, nan, nan, 3.0, 0.0, 5.0, 9.0, 0.0, 6.0, 7.0, 9.0, 6.0, 4.0, 7.0, 3.0, 4.0, 4.0, 0.0, 8.0, nan, nan, nan, 2.0, 5.0, 6.0, 3.0, 0.0, 6.0, 0.0, 3.0, 1.0, 6.0, 8.0, 8.0, 7.0, 4.0, 8.0, 5.0, nan, nan, nan, 6.0, 1.0, 2.0, 7.0, 3.0, 7.0, 1.0, 7.0, 3.0, 7.0, 3.0, 9.0, 5.0, 4.0, 2.0, 7.0, nan, nan, nan, 9.0, 6.0, 9.0, 3.0, 4.0, 1.0, 2.0, 9.0, 2.0, 4.0, 0.0, 2.0, 1.0, 1.0, 9.0, 8.0, nan, nan, nan, 7.0, 7.0, 5.0, 9.0, 5.0, 2.0, 4.0, 6.0, 7.0, 1.0, 8.0, 3.0, 9.0, 7.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [0.0, 2.0, 2.0, 5.0, 0.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 5.0, 2.0, 2.0, 8.0, 8.0, 3.0, 7.0, 1.0, 7.0, 6.0, 6.0, 6.0, 2.0, 1.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 1.0, 1.0, 1.0, 9.0, 1.0, 3.0, 5.0, 2.0, 8.0, 4.0, 2.0, 3.0, 1.0, 3.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 5.0, 1.0, 6.0, 7.0, 5.0, 4.0, 1.0, 6.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 2.0, 8.0, 7.0, 5.0, 5.0, 0.0, 3.0, 9.0, 2.0, 0.0, 2.0, 6.0, 0.0, 4.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 1.0, 5.0, 4.0, 7.0, 7.0, 4.0, 7.0, 6.0, 0.0, 5.0, 9.0, 0.0, 3.0, ...]\nE   [right]: [0.0, 2.0, 2.0, 5.0, 0.0, 7.0, 0.0, nan, nan, nan, 4.0, 5.0, 2.0, 2.0, 8.0, 8.0, 3.0, 7.0, 1.0, 7.0, 6.0, 6.0, 6.0, 2.0, 1.0, 2.0, nan, nan, nan, 8.0, 1.0, 1.0, 1.0, 9.0, 1.0, 3.0, 5.0, 2.0, 8.0, 4.0, 2.0, 3.0, 1.0, 3.0, 4.0, nan, nan, nan, 0.0, 0.0, 4.0, 1.0, 3.0, 1.0, 2.0, 5.0, 1.0, 6.0, 7.0, 5.0, 4.0, 1.0, 6.0, 2.0, nan, nan, nan, 3.0, 2.0, 8.0, 7.0, 5.0, 5.0, 0.0, 3.0, 9.0, 2.0, 0.0, 2.0, 6.0, 0.0, 4.0, 0.0, nan, nan, nan, 3.0, 1.0, 5.0, 4.0, 7.0, 7.0, 4.0, 7.0, 6.0, 0.0, 5.0, 9.0, 0.0, 3.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [46.0, 48.0, 70.0, 11.0, 80.0, 36.0, 30.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 36.0, 84.0, 58.0, 53.0, 43.0, 63.0, 74.0, 65.0, 6.0, 62.0, 22.0, 26.0, 18.0, 52.0, 76.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 66.0, 3.0, 16.0, 24.0, 52.0, 54.0, 44.0, 82.0, 39.0, 41.0, 71.0, 15.0, 53.0, 65.0, 64.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 26.0, 66.0, 40.0, 80.0, 99.0, 77.0, 61.0, 45.0, 24.0, 46.0, 46.0, 23.0, 63.0, 90.0, 51.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 58.0, 57.0, 76.0, 40.0, 14.0, 80.0, 20.0, 18.0, 3.0, 44.0, 56.0, 30.0, 70.0, 92.0, 30.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 68.0, 60.0, 51.0, 49.0, 18.0, 56.0, 23.0, 57.0, 45.0, 53.0, 7.0, 96.0, 66.0, 75.0]\nE   [right]: [46.0, 48.0, 70.0, 11.0, 80.0, 36.0, 30.0, nan, nan, nan, 9.0, 36.0, 84.0, 58.0, 53.0, 43.0, 63.0, 74.0, 65.0, 6.0, 62.0, 22.0, 26.0, 18.0, 52.0, 76.0, nan, nan, nan, 90.0, 66.0, 3.0, 16.0, 24.0, 52.0, 54.0, 44.0, 82.0, 39.0, 41.0, 71.0, 15.0, 53.0, 65.0, 64.0, nan, nan, nan, 26.0, 66.0, 40.0, 80.0, 99.0, 77.0, 61.0, 45.0, 24.0, 46.0, 46.0, 23.0, 63.0, 90.0, 51.0, 7.0, nan, nan, nan, 2.0, 58.0, 57.0, 76.0, 40.0, 14.0, 80.0, 20.0, 18.0, 3.0, 44.0, 56.0, 30.0, 70.0, 92.0, 30.0, nan, nan, nan, 68.0, 60.0, 51.0, 49.0, 18.0, 56.0, 23.0, 57.0, 45.0, 53.0, 7.0, 96.0, 66.0, 75.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [52.0, 65.0, 50.0, 48.0, 60.0, 21.0, 24.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 97.0, 33.0, 95.0, 72.0, 32.0, 21.0, 52.0, 93.0, 56.0, 89.0, 57.0, 41.0, 44.0, 24.0, 70.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 45.0, 38.0, 82.0, 75.0, 50.0, 65.0, 69.0, 7.0, 82.0, 21.0, 55.0, 79.0, 75.0, 2.0, 65.0, 21.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 28.0, 64.0, 61.0, 80.0, 51.0, 85.0, 45.0, 64.0, 4.0, 47.0, 14.0, 21.0, 59.0, 30.0, 61.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 20.0, 25.0, 26.0, 55.0, 69.0, 36.0, 33.0, 92.0, 69.0, 16.0, 43.0, 20.0, 27.0, 51.0, 67.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 74.0, 84.0, 13.0, 32.0, 92.0, 63.0, 33.0, 20.0, 77.0, 91.0, 25.0, 75.0, 71.0, 64.0, ...]\nE   [right]: [52.0, 65.0, 50.0, 48.0, 60.0, 21.0, 24.0, nan, nan, nan, 97.0, 33.0, 95.0, 72.0, 32.0, 21.0, 52.0, 93.0, 56.0, 89.0, 57.0, 41.0, 44.0, 24.0, 70.0, 38.0, nan, nan, nan, 45.0, 38.0, 82.0, 75.0, 50.0, 65.0, 69.0, 7.0, 82.0, 21.0, 55.0, 79.0, 75.0, 2.0, 65.0, 21.0, nan, nan, nan, 2.0, 28.0, 64.0, 61.0, 80.0, 51.0, 85.0, 45.0, 64.0, 4.0, 47.0, 14.0, 21.0, 59.0, 30.0, 61.0, nan, nan, nan, 20.0, 25.0, 26.0, 55.0, 69.0, 36.0, 33.0, 92.0, 69.0, 16.0, 43.0, 20.0, 27.0, 51.0, 67.0, 5.0, nan, nan, nan, 74.0, 84.0, 13.0, 32.0, 92.0, 63.0, 33.0, 20.0, 77.0, 91.0, 25.0, 75.0, 71.0, 64.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [81.0, 35.0, 23.0, 44.0, 10.0, 42.0, 88.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 69.0, 61.0, 8.0, 2.0, 92.0, 96.0, 7.0, 10.0, 5.0, 88.0, 79.0, 97.0, 64.0, 0.0, 91.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 37.0, 9.0, 75.0, 28.0, 61.0, 39.0, 2.0, 27.0, 1.0, 25.0, 26.0, 1.0, 20.0, 9.0, 67.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 46.0, 23.0, 42.0, 3.0, 3.0, 12.0, 17.0, 8.0, 68.0, 76.0, 82.0, 80.0, 20.0, 35.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 11.0, 33.0, 32.0, 1.0, 85.0, 28.0, 21.0, 36.0, 95.0, 83.0, 74.0, 92.0, 19.0, 88.0, 25.0, 29.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 38.0, 52.0, 24.0, 42.0, 54.0, 1.0, 42.0, 20.0, 55.0, 4.0, 20.0, 94.0, 53.0, ...]\nE   [right]: [81.0, 35.0, 23.0, 44.0, 10.0, 42.0, 88.0, nan, nan, nan, 78.0, 69.0, 61.0, 8.0, 2.0, 92.0, 96.0, 7.0, 10.0, 5.0, 88.0, 79.0, 97.0, 64.0, 0.0, 91.0, nan, nan, nan, 8.0, 37.0, 9.0, 75.0, 28.0, 61.0, 39.0, 2.0, 27.0, 1.0, 25.0, 26.0, 1.0, 20.0, 9.0, 67.0, nan, nan, nan, 25.0, 46.0, 23.0, 42.0, 3.0, 3.0, 12.0, 17.0, 8.0, 68.0, 76.0, 82.0, 80.0, 20.0, 35.0, 6.0, nan, nan, nan, 11.0, 33.0, 32.0, 1.0, 85.0, 28.0, 21.0, 36.0, 95.0, 83.0, 74.0, 92.0, 19.0, 88.0, 25.0, 29.0, nan, nan, nan, 7.0, 38.0, 52.0, 24.0, 42.0, 54.0, 1.0, 42.0, 20.0, 55.0, 4.0, 20.0, 94.0, 53.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [70.0, 13.0, 68.0, 29.0, 35.0, 42.0, 43.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 50.0, 68.0, 32.0, 42.0, 85.0, 69.0, 81.0, 57.0, 74.0, 13.0, 58.0, 12.0, 93.0, 37.0, 17.0, 18.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 54.0, 49.0, 49.0, 99.0, 20.0, 63.0, 62.0, 34.0, 67.0, 52.0, 65.0, 7.0, 9.0, 98.0, 56.0, 24.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 43.0, 41.0, 85.0, 51.0, 2.0, 40.0, 95.0, 19.0, 75.0, 78.0, 8.0, 83.0, 27.0, 93.0, 8.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 83.0, 72.0, 75.0, 5.0, 69.0, 59.0, 24.0, 12.0, 64.0, 52.0, 59.0, 81.0, 97.0, 57.0, 36.0, 26.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 93.0, 76.0, 55.0, 58.0, 27.0, 0.0, 3.0, 38.0, 86.0, 72.0, 78.0, 97.0, 23.0, 49.0, ...]\nE   [right]: [70.0, 13.0, 68.0, 29.0, 35.0, 42.0, 43.0, nan, nan, nan, 50.0, 68.0, 32.0, 42.0, 85.0, 69.0, 81.0, 57.0, 74.0, 13.0, 58.0, 12.0, 93.0, 37.0, 17.0, 18.0, nan, nan, nan, 54.0, 49.0, 49.0, 99.0, 20.0, 63.0, 62.0, 34.0, 67.0, 52.0, 65.0, 7.0, 9.0, 98.0, 56.0, 24.0, nan, nan, nan, 43.0, 41.0, 85.0, 51.0, 2.0, 40.0, 95.0, 19.0, 75.0, 78.0, 8.0, 83.0, 27.0, 93.0, 8.0, 2.0, nan, nan, nan, 83.0, 72.0, 75.0, 5.0, 69.0, 59.0, 24.0, 12.0, 64.0, 52.0, 59.0, 81.0, 97.0, 57.0, 36.0, 26.0, nan, nan, nan, 93.0, 76.0, 55.0, 58.0, 27.0, 0.0, 3.0, 38.0, 86.0, 72.0, 78.0, 97.0, 23.0, 49.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [442.0, 420.0, 259.0, 935.0, 134.0, 589.0, 235.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 168.0, 903.0, 560.0, 543.0, 678.0, 45.0, 559.0, 278.0, 996.0, 187.0, 78.0, 320.0, 920.0, 501.0, 2.0, 860.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 211.0, 336.0, 221.0, 34.0, 437.0, 91.0, 3.0, 310.0, 384.0, 621.0, 310.0, 79.0, 368.0, 131.0, 560.0, 265.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 626.0, 743.0, 958.0, 871.0, 834.0, 6.0, 722.0, 972.0, 868.0, 789.0, 299.0, 43.0, 120.0, 300.0, 392.0, 489.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 844.0, 350.0, 261.0, 817.0, 922.0, 661.0, 290.0, 167.0, 135.0, 219.0, 605.0, 431.0, 953.0, 825.0, 249.0, 199.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 438.0, 370.0, 561.0, 983.0, 998.0, 639.0, 916.0, 87.0, 470.0, 959.0, 988.0, 348.0, 286.0, 712.0]\nE   [right]: [442.0, 420.0, 259.0, 935.0, 134.0, 589.0, 235.0, nan, nan, nan, 168.0, 903.0, 560.0, 543.0, 678.0, 45.0, 559.0, 278.0, 996.0, 187.0, 78.0, 320.0, 920.0, 501.0, 2.0, 860.0, nan, nan, nan, 211.0, 336.0, 221.0, 34.0, 437.0, 91.0, 3.0, 310.0, 384.0, 621.0, 310.0, 79.0, 368.0, 131.0, 560.0, 265.0, nan, nan, nan, 626.0, 743.0, 958.0, 871.0, 834.0, 6.0, 722.0, 972.0, 868.0, 789.0, 299.0, 43.0, 120.0, 300.0, 392.0, 489.0, nan, nan, nan, 844.0, 350.0, 261.0, 817.0, 922.0, 661.0, 290.0, 167.0, 135.0, 219.0, 605.0, 431.0, 953.0, 825.0, 249.0, 199.0, nan, nan, nan, 438.0, 370.0, 561.0, 983.0, 998.0, 639.0, 916.0, 87.0, 470.0, 959.0, 988.0, 348.0, 286.0, 712.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [234.0, 96.0, 833.0, 769.0, 953.0, 260.0, 297.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 356.0, 192.0, 898.0, 231.0, 819.0, 462.0, 813.0, 86.0, 513.0, 66.0, 482.0, 784.0, 26.0, 37.0, 229.0, 106.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 294.0, 567.0, 285.0, 659.0, 502.0, 621.0, 222.0, 107.0, 532.0, 665.0, 760.0, 71.0, 198.0, 734.0, 35.0, 351.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 743.0, 200.0, 980.0, 92.0, 605.0, 60.0, 9.0, 37.0, 426.0, 990.0, 368.0, 489.0, 716.0, 566.0, 578.0, 232.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 723.0, 707.0, 466.0, 353.0, 213.0, 884.0, 559.0, 695.0, 243.0, 616.0, 101.0, 101.0, 609.0, 512.0, 227.0, 427.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 189.0, 598.0, 970.0, 491.0, 74.0, 618.0, 868.0, 830.0, 364.0, 269.0, 870.0, 365.0, 107.0, 909.0, ...]\nE   [right]: [234.0, 96.0, 833.0, 769.0, 953.0, 260.0, 297.0, nan, nan, nan, 356.0, 192.0, 898.0, 231.0, 819.0, 462.0, 813.0, 86.0, 513.0, 66.0, 482.0, 784.0, 26.0, 37.0, 229.0, 106.0, nan, nan, nan, 294.0, 567.0, 285.0, 659.0, 502.0, 621.0, 222.0, 107.0, 532.0, 665.0, 760.0, 71.0, 198.0, 734.0, 35.0, 351.0, nan, nan, nan, 743.0, 200.0, 980.0, 92.0, 605.0, 60.0, 9.0, 37.0, 426.0, 990.0, 368.0, 489.0, 716.0, 566.0, 578.0, 232.0, nan, nan, nan, 723.0, 707.0, 466.0, 353.0, 213.0, 884.0, 559.0, 695.0, 243.0, 616.0, 101.0, 101.0, 609.0, 512.0, 227.0, 427.0, nan, nan, nan, 189.0, 598.0, 970.0, 491.0, 74.0, 618.0, 868.0, 830.0, 364.0, 269.0, 870.0, 365.0, 107.0, 909.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [325.0, 574.0, 962.0, 776.0, 439.0, 323.0, 881.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 369.0, 998.0, 164.0, 819.0, 239.0, 579.0, 391.0, 899.0, 248.0, 291.0, 931.0, 619.0, 714.0, 300.0, 461.0, 99.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 411.0, 268.0, 947.0, 869.0, 655.0, 667.0, 586.0, 495.0, 766.0, 117.0, 5.0, 566.0, 98.0, 293.0, 927.0, 71.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 889.0, 878.0, 873.0, 407.0, 597.0, 202.0, 318.0, 201.0, 230.0, 463.0, 770.0, 762.0, 314.0, 773.0, 0.0, 355.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 211.0, 284.0, 401.0, 600.0, 412.0, 747.0, 29.0, 451.0, 465.0, 921.0, 615.0, 901.0, 635.0, 360.0, 430.0, 510.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 120.0, 858.0, 553.0, 921.0, 299.0, 424.0, 428.0, 905.0, 84.0, 618.0, 606.0, 681.0, 753.0, 726.0, ...]\nE   [right]: [325.0, 574.0, 962.0, 776.0, 439.0, 323.0, 881.0, nan, nan, nan, 369.0, 998.0, 164.0, 819.0, 239.0, 579.0, 391.0, 899.0, 248.0, 291.0, 931.0, 619.0, 714.0, 300.0, 461.0, 99.0, nan, nan, nan, 411.0, 268.0, 947.0, 869.0, 655.0, 667.0, 586.0, 495.0, 766.0, 117.0, 5.0, 566.0, 98.0, 293.0, 927.0, 71.0, nan, nan, nan, 889.0, 878.0, 873.0, 407.0, 597.0, 202.0, 318.0, 201.0, 230.0, 463.0, 770.0, 762.0, 314.0, 773.0, 0.0, 355.0, nan, nan, nan, 211.0, 284.0, 401.0, 600.0, 412.0, 747.0, 29.0, 451.0, 465.0, 921.0, 615.0, 901.0, 635.0, 360.0, 430.0, 510.0, nan, nan, nan, 120.0, 858.0, 553.0, 921.0, 299.0, 424.0, 428.0, 905.0, 84.0, 618.0, 606.0, 681.0, 753.0, 726.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [791.0, 711.0, 916.0, 113.0, 315.0, 287.0, 447.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 517.0, 972.0, 665.0, 824.0, 749.0, 680.0, 800.0, 357.0, 32.0, 478.0, 631.0, 255.0, 273.0, 4.0, 701.0, 516.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 779.0, 666.0, 327.0, 96.0, 210.0, 918.0, 105.0, 547.0, 50.0, 589.0, 370.0, 68.0, 726.0, 26.0, 11.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 853.0, 517.0, 879.0, 515.0, 613.0, 601.0, 274.0, 476.0, 92.0, 222.0, 335.0, 14.0, 645.0, 69.0, 620.0, 278.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 526.0, 627.0, 557.0, 67.0, 537.0, 282.0, 459.0, 640.0, 422.0, 299.0, 260.0, 610.0, 370.0, 99.0, 349.0, 254.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 651.0, 106.0, 703.0, 227.0, 312.0, 546.0, 882.0, 709.0, 465.0, 512.0, 588.0, 506.0, 370.0, 953.0, ...]\nE   [right]: [791.0, 711.0, 916.0, 113.0, 315.0, 287.0, 447.0, nan, nan, nan, 517.0, 972.0, 665.0, 824.0, 749.0, 680.0, 800.0, 357.0, 32.0, 478.0, 631.0, 255.0, 273.0, 4.0, 701.0, 516.0, nan, nan, nan, 8.0, 779.0, 666.0, 327.0, 96.0, 210.0, 918.0, 105.0, 547.0, 50.0, 589.0, 370.0, 68.0, 726.0, 26.0, 11.0, nan, nan, nan, 853.0, 517.0, 879.0, 515.0, 613.0, 601.0, 274.0, 476.0, 92.0, 222.0, 335.0, 14.0, 645.0, 69.0, 620.0, 278.0, nan, nan, nan, 526.0, 627.0, 557.0, 67.0, 537.0, 282.0, 459.0, 640.0, 422.0, 299.0, 260.0, 610.0, 370.0, 99.0, 349.0, 254.0, nan, nan, nan, 651.0, 106.0, 703.0, 227.0, 312.0, 546.0, 882.0, 709.0, 465.0, 512.0, 588.0, 506.0, 370.0, 953.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [9.0, 8.0, 1.0, 3.0, 7.0, 8.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 3.0, 6.0, 1.0, 8.0, 2.0, 1.0, 9.0, 2.0, 1.0, 2.0, 3.0, 7.0, 0.0, 2.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 4.0, 4.0, 2.0, 9.0, 9.0, 0.0, 8.0, 0.0, 4.0, 4.0, 0.0, 4.0, 8.0, 1.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 2.0, 1.0, 0.0, 7.0, 8.0, 1.0, 7.0, 4.0, 2.0, 8.0, 0.0, 1.0, 3.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 6.0, 9.0, 7.0, 9.0, 6.0, 9.0, 3.0, 0.0, 1.0, 6.0, 7.0, 4.0, 2.0, 9.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 8.0, 8.0, 9.0, 3.0, 0.0, 2.0, 8.0, 6.0, 8.0, 0.0, 3.0, 6.0, 4.0]\nE   [right]: [9.0, 8.0, 1.0, 3.0, 7.0, 8.0, 8.0, nan, nan, nan, 7.0, 3.0, 6.0, 1.0, 8.0, 2.0, 1.0, 9.0, 2.0, 1.0, 2.0, 3.0, 7.0, 0.0, 2.0, 1.0, nan, nan, nan, 6.0, 4.0, 4.0, 2.0, 9.0, 9.0, 0.0, 8.0, 0.0, 4.0, 4.0, 0.0, 4.0, 8.0, 1.0, 7.0, nan, nan, nan, 3.0, 2.0, 1.0, 0.0, 7.0, 8.0, 1.0, 7.0, 4.0, 2.0, 8.0, 0.0, 1.0, 3.0, 0.0, 3.0, nan, nan, nan, 8.0, 6.0, 9.0, 7.0, 9.0, 6.0, 9.0, 3.0, 0.0, 1.0, 6.0, 7.0, 4.0, 2.0, 9.0, 1.0, nan, nan, nan, 6.0, 8.0, 8.0, 9.0, 3.0, 0.0, 2.0, 8.0, 6.0, 8.0, 0.0, 3.0, 6.0, 4.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [1.0, 9.0, 7.0, 2.0, 9.0, 5.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 2.0, 2.0, 5.0, 0.0, 2.0, 5.0, 0.0, 2.0, 2.0, 1.0, 1.0, 7.0, 3.0, 1.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 9.0, 1.0, 9.0, 3.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 0.0, 5.0, 7.0, 5.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 3.0, 3.0, 2.0, 3.0, 3.0, 5.0, 0.0, 9.0, 3.0, 7.0, 6.0, 3.0, 9.0, 1.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 4.0, 0.0, 4.0, 3.0, 1.0, 4.0, 0.0, 0.0, 0.0, 9.0, 6.0, 9.0, 2.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 2.0, 7.0, 7.0, 3.0, 8.0, 5.0, 9.0, 1.0, 8.0, 3.0, 4.0, 8.0, 0.0, ...]\nE   [right]: [1.0, 9.0, 7.0, 2.0, 9.0, 5.0, 4.0, nan, nan, nan, 8.0, 2.0, 2.0, 5.0, 0.0, 2.0, 5.0, 0.0, 2.0, 2.0, 1.0, 1.0, 7.0, 3.0, 1.0, 1.0, nan, nan, nan, 0.0, 9.0, 1.0, 9.0, 3.0, 3.0, 4.0, 3.0, 4.0, 8.0, 4.0, 0.0, 5.0, 7.0, 5.0, 9.0, nan, nan, nan, 0.0, 3.0, 3.0, 2.0, 3.0, 3.0, 5.0, 0.0, 9.0, 3.0, 7.0, 6.0, 3.0, 9.0, 1.0, 9.0, nan, nan, nan, 4.0, 4.0, 0.0, 4.0, 3.0, 1.0, 4.0, 0.0, 0.0, 0.0, 9.0, 6.0, 9.0, 2.0, 1.0, 8.0, nan, nan, nan, 8.0, 2.0, 7.0, 7.0, 3.0, 8.0, 5.0, 9.0, 1.0, 8.0, 3.0, 4.0, 8.0, 0.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [0.0, 1.0, 7.0, 9.0, 6.0, 9.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 7.0, 8.0, 2.0, 4.0, 0.0, 8.0, 5.0, 3.0, 9.0, 6.0, 6.0, 3.0, 9.0, 4.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 5.0, 0.0, 3.0, 5.0, 7.0, 0.0, 1.0, 4.0, 2.0, 1.0, 9.0, 4.0, 6.0, 2.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 1.0, 0.0, 2.0, 4.0, 5.0, 0.0, 3.0, 3.0, 3.0, 3.0, 7.0, 7.0, 6.0, 1.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 7.0, 0.0, 0.0, 0.0, 5.0, 2.0, 7.0, 7.0, 7.0, 1.0, 5.0, 9.0, 7.0, 5.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 3.0, 5.0, 3.0, 2.0, 7.0, 0.0, 4.0, 8.0, 5.0, 3.0, 3.0, 9.0, 2.0, ...]\nE   [right]: [0.0, 1.0, 7.0, 9.0, 6.0, 9.0, 7.0, nan, nan, nan, 5.0, 7.0, 8.0, 2.0, 4.0, 0.0, 8.0, 5.0, 3.0, 9.0, 6.0, 6.0, 3.0, 9.0, 4.0, 8.0, nan, nan, nan, 3.0, 5.0, 0.0, 3.0, 5.0, 7.0, 0.0, 1.0, 4.0, 2.0, 1.0, 9.0, 4.0, 6.0, 2.0, 7.0, nan, nan, nan, 3.0, 1.0, 0.0, 2.0, 4.0, 5.0, 0.0, 3.0, 3.0, 3.0, 3.0, 7.0, 7.0, 6.0, 1.0, 8.0, nan, nan, nan, 8.0, 7.0, 0.0, 0.0, 0.0, 5.0, 2.0, 7.0, 7.0, 7.0, 1.0, 5.0, 9.0, 7.0, 5.0, 5.0, nan, nan, nan, 5.0, 3.0, 5.0, 3.0, 2.0, 7.0, 0.0, 4.0, 8.0, 5.0, 3.0, 3.0, 9.0, 2.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [0.0, 2.0, 2.0, 4.0, 6.0, 3.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 9.0, 4.0, 7.0, 7.0, 5.0, 5.0, 8.0, 6.0, 6.0, 1.0, 9.0, 5.0, 8.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 0.0, 8.0, 8.0, 1.0, 0.0, 7.0, 5.0, 0.0, 9.0, 2.0, 5.0, 0.0, 7.0, 6.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 8.0, 5.0, 0.0, 4.0, 1.0, 5.0, 3.0, 1.0, 9.0, 6.0, 3.0, 2.0, 9.0, 1.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 8.0, 4.0, 8.0, 1.0, 5.0, 4.0, 2.0, 2.0, 3.0, 2.0, 4.0, 7.0, 3.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 5.0, 9.0, 4.0, 8.0, 4.0, 1.0, 4.0, 1.0, 5.0, 4.0, 0.0, 1.0, 9.0, ...]\nE   [right]: [0.0, 2.0, 2.0, 4.0, 6.0, 3.0, 7.0, nan, nan, nan, 7.0, 4.0, 9.0, 4.0, 7.0, 7.0, 5.0, 5.0, 8.0, 6.0, 6.0, 1.0, 9.0, 5.0, 8.0, 3.0, nan, nan, nan, 3.0, 0.0, 8.0, 8.0, 1.0, 0.0, 7.0, 5.0, 0.0, 9.0, 2.0, 5.0, 0.0, 7.0, 6.0, 6.0, nan, nan, nan, 3.0, 8.0, 5.0, 0.0, 4.0, 1.0, 5.0, 3.0, 1.0, 9.0, 6.0, 3.0, 2.0, 9.0, 1.0, 6.0, nan, nan, nan, 9.0, 8.0, 4.0, 8.0, 1.0, 5.0, 4.0, 2.0, 2.0, 3.0, 2.0, 4.0, 7.0, 3.0, 4.0, 2.0, nan, nan, nan, 7.0, 5.0, 9.0, 4.0, 8.0, 4.0, 1.0, 4.0, 1.0, 5.0, 4.0, 0.0, 1.0, 9.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [32.0, 48.0, 98.0, 39.0, 26.0, 87.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 11.0, 81.0, 86.0, 0.0, 36.0, 45.0, 70.0, 40.0, 19.0, 84.0, 72.0, 91.0, 79.0, 18.0, 76.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 57.0, 77.0, 69.0, 86.0, 42.0, 51.0, 82.0, 22.0, 67.0, 90.0, 33.0, 99.0, 33.0, 31.0, 48.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 89.0, 95.0, 26.0, 1.0, 62.0, 2.0, 86.0, 88.0, 93.0, 76.0, 32.0, 83.0, 27.0, 45.0, 37.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 67.0, 6.0, 37.0, 1.0, 89.0, 52.0, 59.0, 43.0, 12.0, 40.0, 52.0, 49.0, 15.0, 37.0, 65.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 36.0, 41.0, 53.0, 47.0, 23.0, 5.0, 67.0, 24.0, 59.0, 13.0, 23.0, 3.0, 63.0, 89.0]\nE   [right]: [32.0, 48.0, 98.0, 39.0, 26.0, 87.0, 27.0, nan, nan, nan, 80.0, 11.0, 81.0, 86.0, 0.0, 36.0, 45.0, 70.0, 40.0, 19.0, 84.0, 72.0, 91.0, 79.0, 18.0, 76.0, nan, nan, nan, 69.0, 57.0, 77.0, 69.0, 86.0, 42.0, 51.0, 82.0, 22.0, 67.0, 90.0, 33.0, 99.0, 33.0, 31.0, 48.0, nan, nan, nan, 89.0, 95.0, 26.0, 1.0, 62.0, 2.0, 86.0, 88.0, 93.0, 76.0, 32.0, 83.0, 27.0, 45.0, 37.0, 25.0, nan, nan, nan, 67.0, 6.0, 37.0, 1.0, 89.0, 52.0, 59.0, 43.0, 12.0, 40.0, 52.0, 49.0, 15.0, 37.0, 65.0, 25.0, nan, nan, nan, 36.0, 41.0, 53.0, 47.0, 23.0, 5.0, 67.0, 24.0, 59.0, 13.0, 23.0, 3.0, 63.0, 89.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [75.0, 16.0, 89.0, 33.0, 75.0, 3.0, 13.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 27.0, 87.0, 24.0, 98.0, 7.0, 94.0, 3.0, 54.0, 16.0, 84.0, 61.0, 39.0, 12.0, 80.0, 83.0, 10.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 83.0, 49.0, 39.0, 63.0, 56.0, 44.0, 25.0, 88.0, 26.0, 91.0, 23.0, 2.0, 54.0, 14.0, 19.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 36.0, 12.0, 1.0, 51.0, 65.0, 48.0, 48.0, 7.0, 0.0, 7.0, 27.0, 48.0, 84.0, 82.0, 38.0, 95.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 26.0, 91.0, 7.0, 74.0, 98.0, 77.0, 66.0, 42.0, 57.0, 76.0, 79.0, 95.0, 41.0, 92.0, 40.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 53.0, 29.0, 17.0, 9.0, 51.0, 45.0, 74.0, 59.0, 83.0, 30.0, 0.0, 20.0, 54.0, 19.0, ...]\nE   [right]: [75.0, 16.0, 89.0, 33.0, 75.0, 3.0, 13.0, nan, nan, nan, 27.0, 87.0, 24.0, 98.0, 7.0, 94.0, 3.0, 54.0, 16.0, 84.0, 61.0, 39.0, 12.0, 80.0, 83.0, 10.0, nan, nan, nan, 39.0, 83.0, 49.0, 39.0, 63.0, 56.0, 44.0, 25.0, 88.0, 26.0, 91.0, 23.0, 2.0, 54.0, 14.0, 19.0, nan, nan, nan, 36.0, 12.0, 1.0, 51.0, 65.0, 48.0, 48.0, 7.0, 0.0, 7.0, 27.0, 48.0, 84.0, 82.0, 38.0, 95.0, nan, nan, nan, 58.0, 26.0, 91.0, 7.0, 74.0, 98.0, 77.0, 66.0, 42.0, 57.0, 76.0, 79.0, 95.0, 41.0, 92.0, 40.0, nan, nan, nan, 53.0, 29.0, 17.0, 9.0, 51.0, 45.0, 74.0, 59.0, 83.0, 30.0, 0.0, 20.0, 54.0, 19.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [23.0, 60.0, 2.0, 45.0, 12.0, 34.0, 37.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 30.0, 83.0, 77.0, 56.0, 3.0, 82.0, 58.0, 5.0, 0.0, 0.0, 61.0, 65.0, 68.0, 53.0, 67.0, 32.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 35.0, 53.0, 15.0, 70.0, 30.0, 97.0, 76.0, 0.0, 22.0, 98.0, 74.0, 11.0, 5.0, 13.0, 86.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 12.0, 95.0, 20.0, 5.0, 78.0, 95.0, 60.0, 7.0, 96.0, 44.0, 30.0, 86.0, 20.0, 65.0, 65.0, 67.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 34.0, 3.0, 12.0, 14.0, 80.0, 75.0, 63.0, 59.0, 40.0, 87.0, 12.0, 72.0, 41.0, 29.0, 55.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 85.0, 57.0, 76.0, 91.0, 91.0, 27.0, 21.0, 31.0, 22.0, 58.0, 57.0, 22.0, 97.0, ...]\nE   [right]: [23.0, 60.0, 2.0, 45.0, 12.0, 34.0, 37.0, nan, nan, nan, 30.0, 83.0, 77.0, 56.0, 3.0, 82.0, 58.0, 5.0, 0.0, 0.0, 61.0, 65.0, 68.0, 53.0, 67.0, 32.0, nan, nan, nan, 69.0, 35.0, 53.0, 15.0, 70.0, 30.0, 97.0, 76.0, 0.0, 22.0, 98.0, 74.0, 11.0, 5.0, 13.0, 86.0, nan, nan, nan, 12.0, 95.0, 20.0, 5.0, 78.0, 95.0, 60.0, 7.0, 96.0, 44.0, 30.0, 86.0, 20.0, 65.0, 65.0, 67.0, nan, nan, nan, 34.0, 3.0, 12.0, 14.0, 80.0, 75.0, 63.0, 59.0, 40.0, 87.0, 12.0, 72.0, 41.0, 29.0, 55.0, 9.0, nan, nan, nan, 52.0, 85.0, 57.0, 76.0, 91.0, 91.0, 27.0, 21.0, 31.0, 22.0, 58.0, 57.0, 22.0, 97.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [38.0, 74.0, 19.0, 92.0, 83.0, 36.0, 67.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 46.0, 13.0, 95.0, 91.0, 46.0, 75.0, 84.0, 58.0, 58.0, 82.0, 14.0, 83.0, 46.0, 45.0, 66.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 69.0, 35.0, 98.0, 51.0, 45.0, 65.0, 67.0, 97.0, 65.0, 22.0, 40.0, 43.0, 21.0, 80.0, 66.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 29.0, 79.0, 35.0, 12.0, 99.0, 0.0, 96.0, 51.0, 25.0, 0.0, 41.0, 32.0, 98.0, 64.0, 54.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 24.0, 85.0, 97.0, 99.0, 14.0, 77.0, 4.0, 17.0, 44.0, 75.0, 55.0, 43.0, 50.0, 27.0, 20.0, 59.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 70.0, 83.0, 71.0, 71.0, 15.0, 66.0, 75.0, 24.0, 73.0, 18.0, 60.0, 39.0, 53.0, 94.0, ...]\nE   [right]: [38.0, 74.0, 19.0, 92.0, 83.0, 36.0, 67.0, nan, nan, nan, 52.0, 46.0, 13.0, 95.0, 91.0, 46.0, 75.0, 84.0, 58.0, 58.0, 82.0, 14.0, 83.0, 46.0, 45.0, 66.0, nan, nan, nan, 9.0, 69.0, 35.0, 98.0, 51.0, 45.0, 65.0, 67.0, 97.0, 65.0, 22.0, 40.0, 43.0, 21.0, 80.0, 66.0, nan, nan, nan, 44.0, 29.0, 79.0, 35.0, 12.0, 99.0, 0.0, 96.0, 51.0, 25.0, 0.0, 41.0, 32.0, 98.0, 64.0, 54.0, nan, nan, nan, 24.0, 85.0, 97.0, 99.0, 14.0, 77.0, 4.0, 17.0, 44.0, 75.0, 55.0, 43.0, 50.0, 27.0, 20.0, 59.0, nan, nan, nan, 70.0, 83.0, 71.0, 71.0, 15.0, 66.0, 75.0, 24.0, 73.0, 18.0, 60.0, 39.0, 53.0, 94.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [309.0, 785.0, 878.0, 629.0, 297.0, 474.0, 754.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 257.0, 649.0, 214.0, 820.0, 547.0, 667.0, 233.0, 837.0, 934.0, 973.0, 978.0, 803.0, 415.0, 610.0, 471.0, 890.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 793.0, 305.0, 312.0, 680.0, 79.0, 558.0, 558.0, 466.0, 948.0, 543.0, 583.0, 55.0, 103.0, 568.0, 843.0, 237.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 966.0, 320.0, 176.0, 924.0, 358.0, 804.0, 84.0, 164.0, 39.0, 399.0, 497.0, 966.0, 193.0, 825.0, 355.0, 600.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 731.0, 636.0, 645.0, 729.0, 201.0, 434.0, 318.0, 890.0, 148.0, 794.0, 421.0, 76.0, 24.0, 468.0, 998.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 576.0, 408.0, 682.0, 875.0, 437.0, 353.0, 881.0, 541.0, 960.0, 693.0, 40.0, 518.0, 394.0, 283.0]\nE   [right]: [309.0, 785.0, 878.0, 629.0, 297.0, 474.0, 754.0, nan, nan, nan, 257.0, 649.0, 214.0, 820.0, 547.0, 667.0, 233.0, 837.0, 934.0, 973.0, 978.0, 803.0, 415.0, 610.0, 471.0, 890.0, nan, nan, nan, 793.0, 305.0, 312.0, 680.0, 79.0, 558.0, 558.0, 466.0, 948.0, 543.0, 583.0, 55.0, 103.0, 568.0, 843.0, 237.0, nan, nan, nan, 966.0, 320.0, 176.0, 924.0, 358.0, 804.0, 84.0, 164.0, 39.0, 399.0, 497.0, 966.0, 193.0, 825.0, 355.0, 600.0, nan, nan, nan, 2.0, 731.0, 636.0, 645.0, 729.0, 201.0, 434.0, 318.0, 890.0, 148.0, 794.0, 421.0, 76.0, 24.0, 468.0, 998.0, nan, nan, nan, 576.0, 408.0, 682.0, 875.0, 437.0, 353.0, 881.0, 541.0, 960.0, 693.0, 40.0, 518.0, 394.0, 283.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [257.0, 741.0, 205.0, 359.0, 473.0, 812.0, 38.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 365.0, 536.0, 216.0, 338.0, 146.0, 459.0, 615.0, 984.0, 245.0, 559.0, 638.0, 355.0, 342.0, 133.0, 791.0, 204.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 245.0, 85.0, 860.0, 149.0, 839.0, 135.0, 174.0, 701.0, 366.0, 798.0, 940.0, 853.0, 93.0, 601.0, 446.0, 650.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 660.0, 334.0, 13.0, 659.0, 69.0, 918.0, 772.0, 591.0, 240.0, 412.0, 932.0, 14.0, 959.0, 544.0, 618.0, 969.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 667.0, 907.0, 264.0, 469.0, 521.0, 196.0, 688.0, 283.0, 566.0, 567.0, 245.0, 998.0, 326.0, 786.0, 101.0, 879.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 321.0, 964.0, 274.0, 376.0, 969.0, 280.0, 127.0, 232.0, 620.0, 187.0, 506.0, 844.0, 78.0, 842.0, ...]\nE   [right]: [257.0, 741.0, 205.0, 359.0, 473.0, 812.0, 38.0, nan, nan, nan, 365.0, 536.0, 216.0, 338.0, 146.0, 459.0, 615.0, 984.0, 245.0, 559.0, 638.0, 355.0, 342.0, 133.0, 791.0, 204.0, nan, nan, nan, 245.0, 85.0, 860.0, 149.0, 839.0, 135.0, 174.0, 701.0, 366.0, 798.0, 940.0, 853.0, 93.0, 601.0, 446.0, 650.0, nan, nan, nan, 660.0, 334.0, 13.0, 659.0, 69.0, 918.0, 772.0, 591.0, 240.0, 412.0, 932.0, 14.0, 959.0, 544.0, 618.0, 969.0, nan, nan, nan, 667.0, 907.0, 264.0, 469.0, 521.0, 196.0, 688.0, 283.0, 566.0, 567.0, 245.0, 998.0, 326.0, 786.0, 101.0, 879.0, nan, nan, nan, 321.0, 964.0, 274.0, 376.0, 969.0, 280.0, 127.0, 232.0, 620.0, 187.0, 506.0, 844.0, 78.0, 842.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [764.0, 31.0, 334.0, 656.0, 375.0, 73.0, 774.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 899.0, 973.0, 52.0, 582.0, 819.0, 883.0, 839.0, 45.0, 592.0, 222.0, 120.0, 415.0, 160.0, 717.0, 343.0, 553.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 911.0, 764.0, 882.0, 848.0, 802.0, 982.0, 971.0, 118.0, 911.0, 43.0, 366.0, 157.0, 801.0, 532.0, 166.0, 723.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 225.0, 118.0, 437.0, 46.0, 752.0, 562.0, 262.0, 640.0, 515.0, 746.0, 359.0, 699.0, 481.0, 9.0, 623.0, 236.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 590.0, 649.0, 572.0, 293.0, 910.0, 961.0, 887.0, 666.0, 18.0, 145.0, 408.0, 853.0, 306.0, 742.0, 807.0, 304.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 40.0, 808.0, 807.0, 908.0, 92.0, 747.0, 115.0, 275.0, 841.0, 891.0, 796.0, 588.0, 189.0, 728.0, ...]\nE   [right]: [764.0, 31.0, 334.0, 656.0, 375.0, 73.0, 774.0, nan, nan, nan, 899.0, 973.0, 52.0, 582.0, 819.0, 883.0, 839.0, 45.0, 592.0, 222.0, 120.0, 415.0, 160.0, 717.0, 343.0, 553.0, nan, nan, nan, 911.0, 764.0, 882.0, 848.0, 802.0, 982.0, 971.0, 118.0, 911.0, 43.0, 366.0, 157.0, 801.0, 532.0, 166.0, 723.0, nan, nan, nan, 225.0, 118.0, 437.0, 46.0, 752.0, 562.0, 262.0, 640.0, 515.0, 746.0, 359.0, 699.0, 481.0, 9.0, 623.0, 236.0, nan, nan, nan, 590.0, 649.0, 572.0, 293.0, 910.0, 961.0, 887.0, 666.0, 18.0, 145.0, 408.0, 853.0, 306.0, 742.0, 807.0, 304.0, nan, nan, nan, 40.0, 808.0, 807.0, 908.0, 92.0, 747.0, 115.0, 275.0, 841.0, 891.0, 796.0, 588.0, 189.0, 728.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [166.0, 253.0, 665.0, 376.0, 994.0, 555.0, 580.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 67.0, 241.0, 649.0, 760.0, 909.0, 255.0, 945.0, 474.0, 725.0, 118.0, 998.0, 302.0, 786.0, 55.0, 545.0, 530.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 193.0, 177.0, 866.0, 320.0, 841.0, 231.0, 113.0, 648.0, 905.0, 494.0, 415.0, 633.0, 774.0, 404.0, 469.0, 719.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 983.0, 138.0, 309.0, 868.0, 192.0, 46.0, 219.0, 950.0, 126.0, 324.0, 109.0, 600.0, 329.0, 381.0, 818.0, 562.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 793.0, 67.0, 902.0, 105.0, 942.0, 107.0, 788.0, 860.0, 407.0, 479.0, 373.0, 299.0, 94.0, 929.0, 706.0, 649.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 712.0, 202.0, 239.0, 67.0, 471.0, 686.0, 131.0, 11.0, 787.0, 554.0, 632.0, 873.0, 466.0, 472.0, ...]\nE   [right]: [166.0, 253.0, 665.0, 376.0, 994.0, 555.0, 580.0, nan, nan, nan, 67.0, 241.0, 649.0, 760.0, 909.0, 255.0, 945.0, 474.0, 725.0, 118.0, 998.0, 302.0, 786.0, 55.0, 545.0, 530.0, nan, nan, nan, 193.0, 177.0, 866.0, 320.0, 841.0, 231.0, 113.0, 648.0, 905.0, 494.0, 415.0, 633.0, 774.0, 404.0, 469.0, 719.0, nan, nan, nan, 983.0, 138.0, 309.0, 868.0, 192.0, 46.0, 219.0, 950.0, 126.0, 324.0, 109.0, 600.0, 329.0, 381.0, 818.0, 562.0, nan, nan, nan, 793.0, 67.0, 902.0, 105.0, 942.0, 107.0, 788.0, 860.0, 407.0, 479.0, 373.0, 299.0, 94.0, 929.0, 706.0, 649.0, nan, nan, nan, 712.0, 202.0, 239.0, 67.0, 471.0, 686.0, 131.0, 11.0, 787.0, 554.0, 632.0, 873.0, 466.0, 472.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [1.0, 2.0, 2.0, 9.0, 7.0, 5.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 6.0, 3.0, 7.0, 1.0, 0.0, 1.0, 5.0, 0.0, 2.0, 8.0, 2.0, 7.0, 7.0, 8.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 7.0, 0.0, 9.0, 3.0, 1.0, 2.0, 7.0, 7.0, 5.0, 8.0, 5.0, 7.0, 1.0, 2.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 4.0, 6.0, 1.0, 3.0, 2.0, 9.0, 2.0, 6.0, 4.0, 7.0, 7.0, 5.0, 8.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 9.0, 0.0, 8.0, 0.0, 0.0, 8.0, 2.0, 2.0, 5.0, 1.0, 2.0, 4.0, 4.0, 0.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 1.0, 7.0, 2.0, 6.0, 5.0, 4.0, 5.0, 3.0, 5.0, 3.0, 4.0, 0.0, 6.0]\nE   [right]: [1.0, 2.0, 2.0, 9.0, 7.0, 5.0, 6.0, nan, nan, nan, 2.0, 6.0, 3.0, 7.0, 1.0, 0.0, 1.0, 5.0, 0.0, 2.0, 8.0, 2.0, 7.0, 7.0, 8.0, 2.0, nan, nan, nan, 4.0, 7.0, 0.0, 9.0, 3.0, 1.0, 2.0, 7.0, 7.0, 5.0, 8.0, 5.0, 7.0, 1.0, 2.0, 5.0, nan, nan, nan, 3.0, 6.0, 4.0, 6.0, 1.0, 3.0, 2.0, 9.0, 2.0, 6.0, 4.0, 7.0, 7.0, 5.0, 8.0, 2.0, nan, nan, nan, 4.0, 9.0, 0.0, 8.0, 0.0, 0.0, 8.0, 2.0, 2.0, 5.0, 1.0, 2.0, 4.0, 4.0, 0.0, 3.0, nan, nan, nan, 9.0, 1.0, 7.0, 2.0, 6.0, 5.0, 4.0, 5.0, 3.0, 5.0, 3.0, 4.0, 0.0, 6.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [2.0, 1.0, 0.0, 1.0, 0.0, 7.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 8.0, 7.0, 2.0, 2.0, 9.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 8.0, 1.0, 9.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 0.0, 1.0, 8.0, 8.0, 4.0, 2.0, 3.0, 3.0, 9.0, 0.0, 2.0, 7.0, 0.0, 3.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 1.0, 3.0, 5.0, 7.0, 3.0, 7.0, 5.0, 7.0, 0.0, 6.0, 3.0, 8.0, 4.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 7.0, 4.0, 7.0, 1.0, 1.0, 1.0, 6.0, 8.0, 1.0, 1.0, 4.0, 1.0, 9.0, 3.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 6.0, 5.0, 1.0, 7.0, 9.0, 6.0, 4.0, 3.0, 4.0, 9.0, 4.0, 8.0, 8.0, ...]\nE   [right]: [2.0, 1.0, 0.0, 1.0, 0.0, 7.0, 2.0, nan, nan, nan, 1.0, 8.0, 7.0, 2.0, 2.0, 9.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 8.0, 1.0, 9.0, 3.0, nan, nan, nan, 4.0, 0.0, 1.0, 8.0, 8.0, 4.0, 2.0, 3.0, 3.0, 9.0, 0.0, 2.0, 7.0, 0.0, 3.0, 9.0, nan, nan, nan, 6.0, 9.0, 1.0, 3.0, 5.0, 7.0, 3.0, 7.0, 5.0, 7.0, 0.0, 6.0, 3.0, 8.0, 4.0, 3.0, nan, nan, nan, 9.0, 7.0, 4.0, 7.0, 1.0, 1.0, 1.0, 6.0, 8.0, 1.0, 1.0, 4.0, 1.0, 9.0, 3.0, 6.0, nan, nan, nan, 7.0, 6.0, 5.0, 1.0, 7.0, 9.0, 6.0, 4.0, 3.0, 4.0, 9.0, 4.0, 8.0, 8.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [3.0, 3.0, 0.0, 4.0, 3.0, 7.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 9.0, 8.0, 6.0, 9.0, 4.0, 0.0, 3.0, 3.0, 6.0, 1.0, 1.0, 3.0, 1.0, 3.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 3.0, 1.0, 4.0, 8.0, 8.0, 0.0, 4.0, 3.0, 7.0, 8.0, 4.0, 2.0, 7.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 2.0, 9.0, 7.0, 6.0, 5.0, 0.0, 9.0, 5.0, 1.0, 5.0, 1.0, 1.0, 0.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 1.0, 1.0, 2.0, 9.0, 0.0, 2.0, 7.0, 6.0, 6.0, 9.0, 0.0, 6.0, 4.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 5.0, 4.0, 2.0, 7.0, 7.0, 2.0, 7.0, 6.0, 4.0, 4.0, 4.0, 6.0, 3.0, ...]\nE   [right]: [3.0, 3.0, 0.0, 4.0, 3.0, 7.0, 8.0, nan, nan, nan, 1.0, 9.0, 8.0, 6.0, 9.0, 4.0, 0.0, 3.0, 3.0, 6.0, 1.0, 1.0, 3.0, 1.0, 3.0, 5.0, nan, nan, nan, 4.0, 3.0, 1.0, 4.0, 8.0, 8.0, 0.0, 4.0, 3.0, 7.0, 8.0, 4.0, 2.0, 7.0, 2.0, 4.0, nan, nan, nan, 3.0, 2.0, 9.0, 7.0, 6.0, 5.0, 0.0, 9.0, 5.0, 1.0, 5.0, 1.0, 1.0, 0.0, 4.0, 6.0, nan, nan, nan, 4.0, 1.0, 1.0, 2.0, 9.0, 0.0, 2.0, 7.0, 6.0, 6.0, 9.0, 0.0, 6.0, 4.0, 4.0, 2.0, nan, nan, nan, 9.0, 5.0, 4.0, 2.0, 7.0, 7.0, 2.0, 7.0, 6.0, 4.0, 4.0, 4.0, 6.0, 3.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [6.0, 3.0, 2.0, 9.0, 7.0, 7.0, 0.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 8.0, 9.0, 5.0, 5.0, 9.0, 1.0, 5.0, 0.0, 9.0, 4.0, 0.0, 3.0, 2.0, 6.0, 2.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 2.0, 5.0, 0.0, 3.0, 6.0, 1.0, 4.0, 4.0, 6.0, 1.0, 8.0, 6.0, 1.0, 7.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 9.0, 5.0, 9.0, 8.0, 0.0, 7.0, 6.0, 2.0, 6.0, 3.0, 8.0, 5.0, 5.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 6.0, 9.0, 5.0, 7.0, 7.0, 6.0, 0.0, 9.0, 7.0, 9.0, 4.0, 9.0, 3.0, 0.0, 6.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 9.0, 8.0, 5.0, 6.0, 5.0, 3.0, 7.0, 4.0, 9.0, 6.0, 9.0, 5.0, 4.0, ...]\nE   [right]: [6.0, 3.0, 2.0, 9.0, 7.0, 7.0, 0.0, nan, nan, nan, 8.0, 9.0, 5.0, 5.0, 9.0, 1.0, 5.0, 0.0, 9.0, 4.0, 0.0, 3.0, 2.0, 6.0, 2.0, 2.0, nan, nan, nan, 0.0, 2.0, 5.0, 0.0, 3.0, 6.0, 1.0, 4.0, 4.0, 6.0, 1.0, 8.0, 6.0, 1.0, 7.0, 8.0, nan, nan, nan, 3.0, 6.0, 9.0, 5.0, 9.0, 8.0, 0.0, 7.0, 6.0, 2.0, 6.0, 3.0, 8.0, 5.0, 5.0, 1.0, nan, nan, nan, 6.0, 9.0, 5.0, 7.0, 7.0, 6.0, 0.0, 9.0, 7.0, 9.0, 4.0, 9.0, 3.0, 0.0, 6.0, 8.0, nan, nan, nan, 4.0, 9.0, 8.0, 5.0, 6.0, 5.0, 3.0, 7.0, 4.0, 9.0, 6.0, 9.0, 5.0, 4.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [48.0, 31.0, 59.0, 20.0, 39.0, 6.0, 11.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 54.0, 31.0, 63.0, 6.0, 96.0, 45.0, 76.0, 56.0, 64.0, 14.0, 80.0, 9.0, 80.0, 44.0, 12.0, 28.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 67.0, 0.0, 16.0, 89.0, 10.0, 49.0, 95.0, 22.0, 70.0, 84.0, 84.0, 72.0, 38.0, 91.0, 99.0, 90.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 48.0, 13.0, 24.0, 94.0, 85.0, 33.0, 31.0, 41.0, 23.0, 85.0, 78.0, 12.0, 0.0, 5.0, 20.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 35.0, 73.0, 63.0, 54.0, 44.0, 75.0, 89.0, 60.0, 35.0, 38.0, 8.0, 2.0, 38.0, 33.0, 75.0, 63.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 52.0, 46.0, 60.0, 88.0, 94.0, 6.0, 91.0, 18.0, 72.0, 28.0, 92.0, 72.0, 18.0, 98.0]\nE   [right]: [48.0, 31.0, 59.0, 20.0, 39.0, 6.0, 11.0, nan, nan, nan, 54.0, 31.0, 63.0, 6.0, 96.0, 45.0, 76.0, 56.0, 64.0, 14.0, 80.0, 9.0, 80.0, 44.0, 12.0, 28.0, nan, nan, nan, 67.0, 0.0, 16.0, 89.0, 10.0, 49.0, 95.0, 22.0, 70.0, 84.0, 84.0, 72.0, 38.0, 91.0, 99.0, 90.0, nan, nan, nan, 48.0, 13.0, 24.0, 94.0, 85.0, 33.0, 31.0, 41.0, 23.0, 85.0, 78.0, 12.0, 0.0, 5.0, 20.0, 25.0, nan, nan, nan, 35.0, 73.0, 63.0, 54.0, 44.0, 75.0, 89.0, 60.0, 35.0, 38.0, 8.0, 2.0, 38.0, 33.0, 75.0, 63.0, nan, nan, nan, 52.0, 46.0, 60.0, 88.0, 94.0, 6.0, 91.0, 18.0, 72.0, 28.0, 92.0, 72.0, 18.0, 98.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [74.0, 93.0, 82.0, 76.0, 56.0, 55.0, 88.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 23.0, 25.0, 37.0, 50.0, 66.0, 46.0, 40.0, 54.0, 50.0, 53.0, 56.0, 49.0, 44.0, 71.0, 54.0, 81.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 37.0, 80.0, 94.0, 76.0, 2.0, 13.0, 38.0, 34.0, 39.0, 33.0, 6.0, 82.0, 25.0, 49.0, 61.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 40.0, 12.0, 7.0, 70.0, 27.0, 12.0, 42.0, 36.0, 1.0, 25.0, 45.0, 15.0, 53.0, 10.0, 75.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 69.0, 5.0, 50.0, 34.0, 64.0, 4.0, 44.0, 61.0, 89.0, 68.0, 17.0, 37.0, 68.0, 36.0, 64.0, 30.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 27.0, 25.0, 44.0, 21.0, 69.0, 11.0, 50.0, 55.0, 57.0, 65.0, 39.0, 74.0, 35.0, 73.0, ...]\nE   [right]: [74.0, 93.0, 82.0, 76.0, 56.0, 55.0, 88.0, nan, nan, nan, 23.0, 25.0, 37.0, 50.0, 66.0, 46.0, 40.0, 54.0, 50.0, 53.0, 56.0, 49.0, 44.0, 71.0, 54.0, 81.0, nan, nan, nan, 37.0, 80.0, 94.0, 76.0, 2.0, 13.0, 38.0, 34.0, 39.0, 33.0, 6.0, 82.0, 25.0, 49.0, 61.0, 6.0, nan, nan, nan, 22.0, 40.0, 12.0, 7.0, 70.0, 27.0, 12.0, 42.0, 36.0, 1.0, 25.0, 45.0, 15.0, 53.0, 10.0, 75.0, nan, nan, nan, 69.0, 5.0, 50.0, 34.0, 64.0, 4.0, 44.0, 61.0, 89.0, 68.0, 17.0, 37.0, 68.0, 36.0, 64.0, 30.0, nan, nan, nan, 27.0, 25.0, 44.0, 21.0, 69.0, 11.0, 50.0, 55.0, 57.0, 65.0, 39.0, 74.0, 35.0, 73.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [82.0, 22.0, 3.0, 25.0, 57.0, 15.0, 45.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 19.0, 67.0, 43.0, 58.0, 73.0, 9.0, 36.0, 77.0, 66.0, 29.0, 83.0, 93.0, 39.0, 96.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 86.0, 59.0, 50.0, 12.0, 97.0, 65.0, 18.0, 86.0, 92.0, 54.0, 8.0, 13.0, 0.0, 94.0, 24.0, 25.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 77.0, 36.0, 54.0, 4.0, 15.0, 55.0, 67.0, 56.0, 64.0, 94.0, 39.0, 54.0, 0.0, 60.0, 22.0, 27.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 79.0, 54.0, 87.0, 63.0, 47.0, 77.0, 11.0, 87.0, 36.0, 66.0, 85.0, 0.0, 76.0, 4.0, 51.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 26.0, 96.0, 96.0, 96.0, 77.0, 85.0, 93.0, 90.0, 58.0, 4.0, 24.0, 65.0, 45.0, ...]\nE   [right]: [82.0, 22.0, 3.0, 25.0, 57.0, 15.0, 45.0, nan, nan, nan, 19.0, 67.0, 43.0, 58.0, 73.0, 9.0, 36.0, 77.0, 66.0, 29.0, 83.0, 93.0, 39.0, 96.0, 4.0, 1.0, nan, nan, nan, 86.0, 59.0, 50.0, 12.0, 97.0, 65.0, 18.0, 86.0, 92.0, 54.0, 8.0, 13.0, 0.0, 94.0, 24.0, 25.0, nan, nan, nan, 77.0, 36.0, 54.0, 4.0, 15.0, 55.0, 67.0, 56.0, 64.0, 94.0, 39.0, 54.0, 0.0, 60.0, 22.0, 27.0, nan, nan, nan, 79.0, 54.0, 87.0, 63.0, 47.0, 77.0, 11.0, 87.0, 36.0, 66.0, 85.0, 0.0, 76.0, 4.0, 51.0, 89.0, nan, nan, nan, 22.0, 26.0, 96.0, 96.0, 96.0, 77.0, 85.0, 93.0, 90.0, 58.0, 4.0, 24.0, 65.0, 45.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [52.0, 98.0, 33.0, 45.0, 63.0, 46.0, 36.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 25.0, 21.0, 31.0, 37.0, 52.0, 47.0, 6.0, 13.0, 6.0, 37.0, 35.0, 6.0, 37.0, 65.0, 80.0, 92.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 81.0, 9.0, 76.0, 19.0, 85.0, 87.0, 58.0, 30.0, 6.0, 99.0, 45.0, 64.0, 79.0, 90.0, 44.0, 14.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 96.0, 16.0, 38.0, 32.0, 16.0, 35.0, 52.0, 25.0, 28.0, 72.0, 20.0, 49.0, 61.0, 95.0, 18.0, 12.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 97.0, 37.0, 75.0, 71.0, 98.0, 76.0, 94.0, 1.0, 90.0, 40.0, 43.0, 39.0, 27.0, 36.0, 10.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 82.0, 55.0, 23.0, 30.0, 56.0, 53.0, 44.0, 35.0, 83.0, 83.0, 41.0, 28.0, 44.0, 46.0, ...]\nE   [right]: [52.0, 98.0, 33.0, 45.0, 63.0, 46.0, 36.0, nan, nan, nan, 25.0, 21.0, 31.0, 37.0, 52.0, 47.0, 6.0, 13.0, 6.0, 37.0, 35.0, 6.0, 37.0, 65.0, 80.0, 92.0, nan, nan, nan, 81.0, 9.0, 76.0, 19.0, 85.0, 87.0, 58.0, 30.0, 6.0, 99.0, 45.0, 64.0, 79.0, 90.0, 44.0, 14.0, nan, nan, nan, 96.0, 16.0, 38.0, 32.0, 16.0, 35.0, 52.0, 25.0, 28.0, 72.0, 20.0, 49.0, 61.0, 95.0, 18.0, 12.0, nan, nan, nan, 29.0, 97.0, 37.0, 75.0, 71.0, 98.0, 76.0, 94.0, 1.0, 90.0, 40.0, 43.0, 39.0, 27.0, 36.0, 10.0, nan, nan, nan, 82.0, 55.0, 23.0, 30.0, 56.0, 53.0, 44.0, 35.0, 83.0, 83.0, 41.0, 28.0, 44.0, 46.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [270.0, 874.0, 715.0, 844.0, 562.0, 103.0, 539.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 299.0, 657.0, 755.0, 873.0, 727.0, 808.0, 265.0, 698.0, 842.0, 41.0, 286.0, 703.0, 192.0, 106.0, 864.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 417.0, 503.0, 344.0, 471.0, 914.0, 153.0, 236.0, 87.0, 51.0, 5.0, 736.0, 97.0, 589.0, 61.0, 882.0, 463.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 580.0, 143.0, 470.0, 375.0, 302.0, 715.0, 258.0, 960.0, 876.0, 525.0, 800.0, 323.0, 254.0, 591.0, 14.0, 367.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 1.0, 343.0, 635.0, 921.0, 745.0, 368.0, 235.0, 50.0, 844.0, 207.0, 173.0, 277.0, 15.0, 467.0, 599.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 299.0, 309.0, 554.0, 427.0, 2.0, 758.0, 853.0, 25.0, 240.0, 266.0, 67.0, 238.0, 459.0, 408.0]\nE   [right]: [270.0, 874.0, 715.0, 844.0, 562.0, 103.0, 539.0, nan, nan, nan, 44.0, 299.0, 657.0, 755.0, 873.0, 727.0, 808.0, 265.0, 698.0, 842.0, 41.0, 286.0, 703.0, 192.0, 106.0, 864.0, nan, nan, nan, 417.0, 503.0, 344.0, 471.0, 914.0, 153.0, 236.0, 87.0, 51.0, 5.0, 736.0, 97.0, 589.0, 61.0, 882.0, 463.0, nan, nan, nan, 580.0, 143.0, 470.0, 375.0, 302.0, 715.0, 258.0, 960.0, 876.0, 525.0, 800.0, 323.0, 254.0, 591.0, 14.0, 367.0, nan, nan, nan, 44.0, 1.0, 343.0, 635.0, 921.0, 745.0, 368.0, 235.0, 50.0, 844.0, 207.0, 173.0, 277.0, 15.0, 467.0, 599.0, nan, nan, nan, 299.0, 309.0, 554.0, 427.0, 2.0, 758.0, 853.0, 25.0, 240.0, 266.0, 67.0, 238.0, 459.0, 408.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [699.0, 513.0, 104.0, 119.0, 362.0, 815.0, 131.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 60.0, 110.0, 551.0, 568.0, 397.0, 92.0, 346.0, 14.0, 997.0, 408.0, 618.0, 751.0, 763.0, 387.0, 964.0, 945.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 636.0, 111.0, 525.0, 776.0, 973.0, 570.0, 911.0, 877.0, 135.0, 61.0, 606.0, 289.0, 9.0, 92.0, 280.0, 634.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 242.0, 712.0, 428.0, 395.0, 390.0, 129.0, 299.0, 810.0, 396.0, 843.0, 187.0, 429.0, 179.0, 321.0, 733.0, 12.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 953.0, 439.0, 890.0, 557.0, 640.0, 81.0, 454.0, 374.0, 567.0, 324.0, 245.0, 880.0, 508.0, 406.0, 353.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 723.0, 126.0, 9.0, 755.0, 464.0, 761.0, 244.0, 977.0, 277.0, 481.0, 379.0, 188.0, 12.0, 671.0, ...]\nE   [right]: [699.0, 513.0, 104.0, 119.0, 362.0, 815.0, 131.0, nan, nan, nan, 60.0, 110.0, 551.0, 568.0, 397.0, 92.0, 346.0, 14.0, 997.0, 408.0, 618.0, 751.0, 763.0, 387.0, 964.0, 945.0, nan, nan, nan, 636.0, 111.0, 525.0, 776.0, 973.0, 570.0, 911.0, 877.0, 135.0, 61.0, 606.0, 289.0, 9.0, 92.0, 280.0, 634.0, nan, nan, nan, 242.0, 712.0, 428.0, 395.0, 390.0, 129.0, 299.0, 810.0, 396.0, 843.0, 187.0, 429.0, 179.0, 321.0, 733.0, 12.0, nan, nan, nan, 58.0, 953.0, 439.0, 890.0, 557.0, 640.0, 81.0, 454.0, 374.0, 567.0, 324.0, 245.0, 880.0, 508.0, 406.0, 353.0, nan, nan, nan, 723.0, 126.0, 9.0, 755.0, 464.0, 761.0, 244.0, 977.0, 277.0, 481.0, 379.0, 188.0, 12.0, 671.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [286.0, 951.0, 254.0, 380.0, 352.0, 899.0, 509.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 888.0, 538.0, 468.0, 68.0, 999.0, 367.0, 84.0, 962.0, 368.0, 775.0, 437.0, 663.0, 842.0, 344.0, 857.0, 716.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 702.0, 532.0, 908.0, 555.0, 364.0, 994.0, 175.0, 582.0, 308.0, 427.0, 684.0, 269.0, 196.0, 402.0, 891.0, 903.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 665.0, 420.0, 754.0, 874.0, 656.0, 129.0, 777.0, 590.0, 109.0, 579.0, 821.0, 359.0, 25.0, 649.0, 576.0, 371.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 49.0, 384.0, 337.0, 914.0, 494.0, 320.0, 515.0, 542.0, 103.0, 901.0, 975.0, 889.0, 602.0, 921.0, 790.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 920.0, 916.0, 334.0, 452.0, 852.0, 368.0, 808.0, 34.0, 966.0, 41.0, 375.0, 364.0, 918.0, 397.0, ...]\nE   [right]: [286.0, 951.0, 254.0, 380.0, 352.0, 899.0, 509.0, nan, nan, nan, 888.0, 538.0, 468.0, 68.0, 999.0, 367.0, 84.0, 962.0, 368.0, 775.0, 437.0, 663.0, 842.0, 344.0, 857.0, 716.0, nan, nan, nan, 702.0, 532.0, 908.0, 555.0, 364.0, 994.0, 175.0, 582.0, 308.0, 427.0, 684.0, 269.0, 196.0, 402.0, 891.0, 903.0, nan, nan, nan, 665.0, 420.0, 754.0, 874.0, 656.0, 129.0, 777.0, 590.0, 109.0, 579.0, 821.0, 359.0, 25.0, 649.0, 576.0, 371.0, nan, nan, nan, 49.0, 384.0, 337.0, 914.0, 494.0, 320.0, 515.0, 542.0, 103.0, 901.0, 975.0, 889.0, 602.0, 921.0, 790.0, 7.0, nan, nan, nan, 920.0, 916.0, 334.0, 452.0, 852.0, 368.0, 808.0, 34.0, 966.0, 41.0, 375.0, 364.0, 918.0, 397.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [412.0, 916.0, 144.0, 441.0, 476.0, 434.0, 652.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 804.0, 43.0, 301.0, 621.0, 827.0, 260.0, 992.0, 323.0, 450.0, 424.0, 505.0, 817.0, 799.0, 577.0, 99.0, 358.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 476.0, 336.0, 68.0, 136.0, 96.0, 317.0, 77.0, 135.0, 257.0, 413.0, 641.0, 751.0, 11.0, 14.0, 205.0, 314.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 966.0, 730.0, 876.0, 675.0, 147.0, 811.0, 563.0, 410.0, 10.0, 580.0, 393.0, 267.0, 634.0, 142.0, 827.0, 815.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 724.0, 34.0, 709.0, 333.0, 296.0, 342.0, 510.0, 4.0, 456.0, 388.0, 187.0, 513.0, 760.0, 114.0, 873.0, 715.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 370.0, 35.0, 59.0, 664.0, 239.0, 385.0, 595.0, 383.0, 353.0, 461.0, 188.0, 184.0, 944.0, 12.0, ...]\nE   [right]: [412.0, 916.0, 144.0, 441.0, 476.0, 434.0, 652.0, nan, nan, nan, 804.0, 43.0, 301.0, 621.0, 827.0, 260.0, 992.0, 323.0, 450.0, 424.0, 505.0, 817.0, 799.0, 577.0, 99.0, 358.0, nan, nan, nan, 476.0, 336.0, 68.0, 136.0, 96.0, 317.0, 77.0, 135.0, 257.0, 413.0, 641.0, 751.0, 11.0, 14.0, 205.0, 314.0, nan, nan, nan, 966.0, 730.0, 876.0, 675.0, 147.0, 811.0, 563.0, 410.0, 10.0, 580.0, 393.0, 267.0, 634.0, 142.0, 827.0, 815.0, nan, nan, nan, 724.0, 34.0, 709.0, 333.0, 296.0, 342.0, 510.0, 4.0, 456.0, 388.0, 187.0, 513.0, 760.0, 114.0, 873.0, 715.0, nan, nan, nan, 370.0, 35.0, 59.0, 664.0, 239.0, 385.0, 595.0, 383.0, 353.0, 461.0, 188.0, 184.0, 944.0, 12.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [7.0, 6.0, 2.0, 7.0, 9.0, 6.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 3.0, 0.0, 2.0, 7.0, 8.0, 9.0, 5.0, 8.0, 4.0, 3.0, 6.0, 5.0, 3.0, 2.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 8.0, 1.0, 9.0, 8.0, 1.0, 8.0, 0.0, 4.0, 5.0, 1.0, 0.0, 0.0, 6.0, 0.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 2.0, 4.0, 8.0, 4.0, 2.0, 9.0, 1.0, 0.0, 8.0, 3.0, 6.0, 6.0, 2.0, 8.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 3.0, 2.0, 6.0, 5.0, 8.0, 8.0, 0.0, 1.0, 6.0, 7.0, 9.0, 3.0, 7.0, 0.0, 5.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 4.0, 9.0, 7.0, 4.0, 5.0, 1.0, 0.0, 1.0, 7.0, 1.0, 5.0, 5.0, 3.0]\nE   [right]: [7.0, 6.0, 2.0, 7.0, 9.0, 6.0, 2.0, nan, nan, nan, 1.0, 3.0, 0.0, 2.0, 7.0, 8.0, 9.0, 5.0, 8.0, 4.0, 3.0, 6.0, 5.0, 3.0, 2.0, 4.0, nan, nan, nan, 0.0, 8.0, 1.0, 9.0, 8.0, 1.0, 8.0, 0.0, 4.0, 5.0, 1.0, 0.0, 0.0, 6.0, 0.0, 6.0, nan, nan, nan, 1.0, 2.0, 4.0, 8.0, 4.0, 2.0, 9.0, 1.0, 0.0, 8.0, 3.0, 6.0, 6.0, 2.0, 8.0, 5.0, nan, nan, nan, 0.0, 3.0, 2.0, 6.0, 5.0, 8.0, 8.0, 0.0, 1.0, 6.0, 7.0, 9.0, 3.0, 7.0, 0.0, 5.0, nan, nan, nan, 9.0, 4.0, 9.0, 7.0, 4.0, 5.0, 1.0, 0.0, 1.0, 7.0, 1.0, 5.0, 5.0, 3.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [2.0, 1.0, 2.0, 8.0, 0.0, 4.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 4.0, 9.0, 9.0, 8.0, 2.0, 0.0, 1.0, 4.0, 6.0, 9.0, 0.0, 5.0, 7.0, 3.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 4.0, 2.0, 6.0, 3.0, 3.0, 9.0, 8.0, 4.0, 6.0, 2.0, 0.0, 5.0, 5.0, 2.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 5.0, 1.0, 7.0, 2.0, 0.0, 4.0, 2.0, 9.0, 5.0, 6.0, 6.0, 5.0, 1.0, 4.0, 3.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 2.0, 1.0, 0.0, 6.0, 1.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 7.0, 5.0, 0.0, 8.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 4.0, 3.0, 8.0, 3.0, 9.0, 9.0, 9.0, 2.0, 5.0, 8.0, 8.0, 8.0, 8.0, ...]\nE   [right]: [2.0, 1.0, 2.0, 8.0, 0.0, 4.0, 6.0, nan, nan, nan, 5.0, 4.0, 9.0, 9.0, 8.0, 2.0, 0.0, 1.0, 4.0, 6.0, 9.0, 0.0, 5.0, 7.0, 3.0, 1.0, nan, nan, nan, 0.0, 4.0, 2.0, 6.0, 3.0, 3.0, 9.0, 8.0, 4.0, 6.0, 2.0, 0.0, 5.0, 5.0, 2.0, 2.0, nan, nan, nan, 5.0, 1.0, 7.0, 2.0, 0.0, 4.0, 2.0, 9.0, 5.0, 6.0, 6.0, 5.0, 1.0, 4.0, 3.0, 2.0, nan, nan, nan, 2.0, 2.0, 1.0, 0.0, 6.0, 1.0, 4.0, 1.0, 0.0, 0.0, 1.0, 0.0, 7.0, 5.0, 0.0, 8.0, nan, nan, nan, 7.0, 4.0, 3.0, 8.0, 3.0, 9.0, 9.0, 9.0, 2.0, 5.0, 8.0, 8.0, 8.0, 8.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [9.0, 9.0, 3.0, 8.0, 9.0, 4.0, 1.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 6.0, 3.0, 6.0, 1.0, 9.0, 9.0, 5.0, 1.0, 5.0, 3.0, 9.0, 0.0, 4.0, 3.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 6.0, 1.0, 5.0, 0.0, 5.0, 5.0, 8.0, 5.0, 9.0, 5.0, 2.0, 4.0, 1.0, 1.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 0.0, 1.0, 9.0, 3.0, 0.0, 5.0, 0.0, 4.0, 3.0, 4.0, 0.0, 1.0, 2.0, 4.0, 4.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 1.0, 3.0, 5.0, 3.0, 9.0, 9.0, 4.0, 4.0, 1.0, 5.0, 4.0, 6.0, 0.0, 0.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 2.0, 4.0, 8.0, 0.0, 2.0, 9.0, 3.0, 4.0, 8.0, 8.0, 1.0, 6.0, 3.0, ...]\nE   [right]: [9.0, 9.0, 3.0, 8.0, 9.0, 4.0, 1.0, nan, nan, nan, 0.0, 6.0, 3.0, 6.0, 1.0, 9.0, 9.0, 5.0, 1.0, 5.0, 3.0, 9.0, 0.0, 4.0, 3.0, 4.0, nan, nan, nan, 1.0, 6.0, 1.0, 5.0, 0.0, 5.0, 5.0, 8.0, 5.0, 9.0, 5.0, 2.0, 4.0, 1.0, 1.0, 9.0, nan, nan, nan, 3.0, 0.0, 1.0, 9.0, 3.0, 0.0, 5.0, 0.0, 4.0, 3.0, 4.0, 0.0, 1.0, 2.0, 4.0, 4.0, nan, nan, nan, 3.0, 1.0, 3.0, 5.0, 3.0, 9.0, 9.0, 4.0, 4.0, 1.0, 5.0, 4.0, 6.0, 0.0, 0.0, 7.0, nan, nan, nan, 3.0, 2.0, 4.0, 8.0, 0.0, 2.0, 9.0, 3.0, 4.0, 8.0, 8.0, 1.0, 6.0, 3.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [5.0, 8.0, 9.0, 5.0, 6.0, 4.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 7.0, 5.0, 4.0, 5.0, 8.0, 1.0, 1.0, 9.0, 4.0, 0.0, 4.0, 7.0, 9.0, 1.0, 3.0, 9.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 0.0, 9.0, 1.0, 2.0, 0.0, 4.0, 4.0, 7.0, 4.0, 7.0, 8.0, 9.0, 5.0, 1.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 3.0, 6.0, 1.0, 0.0, 3.0, 2.0, 8.0, 3.0, 1.0, 9.0, 3.0, 8.0, 3.0, 2.0, 1.0, 3.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 2.0, 5.0, 5.0, 8.0, 4.0, 5.0, 7.0, 8.0, 4.0, 9.0, 6.0, 3.0, 2.0, 2.0, 2.0, 6.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 4.0, 7.0, 9.0, 6.0, 1.0, 9.0, 0.0, 8.0, 8.0, 8.0, 2.0, 5.0, 8.0, 0.0, ...]\nE   [right]: [5.0, 8.0, 9.0, 5.0, 6.0, 4.0, 2.0, nan, nan, nan, 7.0, 5.0, 4.0, 5.0, 8.0, 1.0, 1.0, 9.0, 4.0, 0.0, 4.0, 7.0, 9.0, 1.0, 3.0, 9.0, nan, nan, nan, 1.0, 0.0, 9.0, 1.0, 2.0, 0.0, 4.0, 4.0, 7.0, 4.0, 7.0, 8.0, 9.0, 5.0, 1.0, 2.0, nan, nan, nan, 3.0, 6.0, 1.0, 0.0, 3.0, 2.0, 8.0, 3.0, 1.0, 9.0, 3.0, 8.0, 3.0, 2.0, 1.0, 3.0, nan, nan, nan, 2.0, 5.0, 5.0, 8.0, 4.0, 5.0, 7.0, 8.0, 4.0, 9.0, 6.0, 3.0, 2.0, 2.0, 2.0, 6.0, nan, nan, nan, 4.0, 7.0, 9.0, 6.0, 1.0, 9.0, 0.0, 8.0, 8.0, 8.0, 2.0, 5.0, 8.0, 0.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [3.0, 79.0, 36.0, 98.0, 64.0, 63.0, 2.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 29.0, 47.0, 92.0, 36.0, 85.0, 61.0, 47.0, 72.0, 67.0, 50.0, 24.0, 78.0, 68.0, 49.0, 63.0, 98.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 50.0, 25.0, 37.0, 18.0, 19.0, 59.0, 8.0, 73.0, 83.0, 88.0, 0.0, 73.0, 93.0, 35.0, 65.0, 62.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 44.0, 14.0, 21.0, 23.0, 38.0, 78.0, 67.0, 37.0, 11.0, 17.0, 24.0, 4.0, 79.0, 35.0, 36.0, 69.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 81.0, 91.0, 60.0, 84.0, 56.0, 80.0, 35.0, 82.0, 29.0, 2.0, 52.0, 15.0, 10.0, 85.0, 95.0, 45.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 31.0, 95.0, 50.0, 70.0, 43.0, 73.0, 7.0, 56.0, 46.0, 34.0, 82.0, 24.0, 27.0, 52.0]\nE   [right]: [3.0, 79.0, 36.0, 98.0, 64.0, 63.0, 2.0, nan, nan, nan, 29.0, 47.0, 92.0, 36.0, 85.0, 61.0, 47.0, 72.0, 67.0, 50.0, 24.0, 78.0, 68.0, 49.0, 63.0, 98.0, nan, nan, nan, 50.0, 25.0, 37.0, 18.0, 19.0, 59.0, 8.0, 73.0, 83.0, 88.0, 0.0, 73.0, 93.0, 35.0, 65.0, 62.0, nan, nan, nan, 44.0, 14.0, 21.0, 23.0, 38.0, 78.0, 67.0, 37.0, 11.0, 17.0, 24.0, 4.0, 79.0, 35.0, 36.0, 69.0, nan, nan, nan, 81.0, 91.0, 60.0, 84.0, 56.0, 80.0, 35.0, 82.0, 29.0, 2.0, 52.0, 15.0, 10.0, 85.0, 95.0, 45.0, nan, nan, nan, 31.0, 95.0, 50.0, 70.0, 43.0, 73.0, 7.0, 56.0, 46.0, 34.0, 82.0, 24.0, 27.0, 52.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [82.0, 36.0, 72.0, 29.0, 61.0, 91.0, 35.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 73.0, 91.0, 43.0, 80.0, 36.0, 14.0, 33.0, 87.0, 46.0, 0.0, 44.0, 47.0, 74.0, 25.0, 32.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 90.0, 9.0, 59.0, 27.0, 29.0, 49.0, 1.0, 98.0, 53.0, 56.0, 70.0, 19.0, 58.0, 2.0, 96.0, 30.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 27.0, 13.0, 58.0, 98.0, 37.0, 78.0, 5.0, 51.0, 65.0, 37.0, 62.0, 62.0, 80.0, 12.0, 44.0, 55.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 66.0, 93.0, 99.0, 33.0, 12.0, 85.0, 22.0, 15.0, 24.0, 79.0, 22.0, 5.0, 97.0, 95.0, 80.0, 61.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 1.0, 53.0, 55.0, 78.0, 11.0, 60.0, 86.0, 85.0, 66.0, 20.0, 91.0, 8.0, 36.0, 5.0, ...]\nE   [right]: [82.0, 36.0, 72.0, 29.0, 61.0, 91.0, 35.0, nan, nan, nan, 73.0, 91.0, 43.0, 80.0, 36.0, 14.0, 33.0, 87.0, 46.0, 0.0, 44.0, 47.0, 74.0, 25.0, 32.0, 89.0, nan, nan, nan, 90.0, 9.0, 59.0, 27.0, 29.0, 49.0, 1.0, 98.0, 53.0, 56.0, 70.0, 19.0, 58.0, 2.0, 96.0, 30.0, nan, nan, nan, 27.0, 13.0, 58.0, 98.0, 37.0, 78.0, 5.0, 51.0, 65.0, 37.0, 62.0, 62.0, 80.0, 12.0, 44.0, 55.0, nan, nan, nan, 66.0, 93.0, 99.0, 33.0, 12.0, 85.0, 22.0, 15.0, 24.0, 79.0, 22.0, 5.0, 97.0, 95.0, 80.0, 61.0, nan, nan, nan, 1.0, 53.0, 55.0, 78.0, 11.0, 60.0, 86.0, 85.0, 66.0, 20.0, 91.0, 8.0, 36.0, 5.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [85.0, 79.0, 15.0, 37.0, 85.0, 72.0, 89.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 53.0, 81.0, 97.0, 87.0, 31.0, 31.0, 37.0, 73.0, 39.0, 4.0, 20.0, 45.0, 54.0, 34.0, 25.0, 48.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 78.0, 25.0, 35.0, 0.0, 98.0, 18.0, 96.0, 92.0, 20.0, 37.0, 87.0, 40.0, 36.0, 86.0, 59.0, 77.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 39.0, 53.0, 16.0, 76.0, 29.0, 34.0, 43.0, 27.0, 18.0, 79.0, 27.0, 36.0, 0.0, 66.0, 47.0, 29.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 86.0, 30.0, 57.0, 52.0, 68.0, 39.0, 41.0, 64.0, 85.0, 87.0, 48.0, 41.0, 77.0, 86.0, 11.0, 58.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 40.0, 73.0, 57.0, 37.0, 66.0, 65.0, 45.0, 77.0, 74.0, 17.0, 72.0, 90.0, 99.0, 73.0, ...]\nE   [right]: [85.0, 79.0, 15.0, 37.0, 85.0, 72.0, 89.0, nan, nan, nan, 53.0, 81.0, 97.0, 87.0, 31.0, 31.0, 37.0, 73.0, 39.0, 4.0, 20.0, 45.0, 54.0, 34.0, 25.0, 48.0, nan, nan, nan, 78.0, 25.0, 35.0, 0.0, 98.0, 18.0, 96.0, 92.0, 20.0, 37.0, 87.0, 40.0, 36.0, 86.0, 59.0, 77.0, nan, nan, nan, 39.0, 53.0, 16.0, 76.0, 29.0, 34.0, 43.0, 27.0, 18.0, 79.0, 27.0, 36.0, 0.0, 66.0, 47.0, 29.0, nan, nan, nan, 86.0, 30.0, 57.0, 52.0, 68.0, 39.0, 41.0, 64.0, 85.0, 87.0, 48.0, 41.0, 77.0, 86.0, 11.0, 58.0, nan, nan, nan, 40.0, 73.0, 57.0, 37.0, 66.0, 65.0, 45.0, 77.0, 74.0, 17.0, 72.0, 90.0, 99.0, 73.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [67.0, 55.0, 12.0, 77.0, 64.0, 11.0, 62.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 58.0, 2.0, 14.0, 70.0, 53.0, 81.0, 62.0, 70.0, 54.0, 20.0, 0.0, 59.0, 73.0, 45.0, 79.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 59.0, 52.0, 94.0, 87.0, 7.0, 99.0, 60.0, 42.0, 16.0, 21.0, 27.0, 22.0, 27.0, 34.0, 60.0, 68.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 9.0, 70.0, 77.0, 23.0, 14.0, 1.0, 82.0, 48.0, 30.0, 34.0, 9.0, 41.0, 14.0, 56.0, 65.0, 7.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 0.0, 46.0, 91.0, 37.0, 73.0, 62.0, 79.0, 96.0, 43.0, 68.0, 23.0, 16.0, 87.0, 86.0, 18.0, 59.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 65.0, 89.0, 8.0, 1.0, 49.0, 84.0, 68.0, 88.0, 17.0, 25.0, 34.0, 69.0, 15.0, ...]\nE   [right]: [67.0, 55.0, 12.0, 77.0, 64.0, 11.0, 62.0, nan, nan, nan, 58.0, 2.0, 14.0, 70.0, 53.0, 81.0, 62.0, 70.0, 54.0, 20.0, 0.0, 59.0, 73.0, 45.0, 79.0, 7.0, nan, nan, nan, 59.0, 52.0, 94.0, 87.0, 7.0, 99.0, 60.0, 42.0, 16.0, 21.0, 27.0, 22.0, 27.0, 34.0, 60.0, 68.0, nan, nan, nan, 9.0, 70.0, 77.0, 23.0, 14.0, 1.0, 82.0, 48.0, 30.0, 34.0, 9.0, 41.0, 14.0, 56.0, 65.0, 7.0, nan, nan, nan, 0.0, 46.0, 91.0, 37.0, 73.0, 62.0, 79.0, 96.0, 43.0, 68.0, 23.0, 16.0, 87.0, 86.0, 18.0, 59.0, nan, nan, nan, 80.0, 65.0, 89.0, 8.0, 1.0, 49.0, 84.0, 68.0, 88.0, 17.0, 25.0, 34.0, 69.0, 15.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.0 %)\nE   [left]:  [769.0, 807.0, 241.0, 50.0, 107.0, 364.0, 95.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 236.0, 778.0, 294.0, 395.0, 62.0, 399.0, 958.0, 407.0, 825.0, 514.0, 675.0, 707.0, 351.0, 485.0, 804.0, 998.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 211.0, 640.0, 334.0, 153.0, 47.0, 154.0, 406.0, 686.0, 89.0, 656.0, 434.0, 233.0, 537.0, 160.0, 298.0, 171.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 831.0, 386.0, 553.0, 505.0, 727.0, 862.0, 807.0, 461.0, 605.0, 404.0, 295.0, 324.0, 863.0, 52.0, 351.0, 105.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 976.0, 984.0, 668.0, 899.0, 147.0, 566.0, 254.0, 862.0, 871.0, 443.0, 179.0, 949.0, 491.0, 264.0, 417.0, 773.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 997.0, 433.0, 113.0, 360.0, 736.0, 267.0, 680.0, 101.0, 254.0, 972.0, 862.0, 363.0, 387.0, 238.0]\nE   [right]: [769.0, 807.0, 241.0, 50.0, 107.0, 364.0, 95.0, nan, nan, nan, 236.0, 778.0, 294.0, 395.0, 62.0, 399.0, 958.0, 407.0, 825.0, 514.0, 675.0, 707.0, 351.0, 485.0, 804.0, 998.0, nan, nan, nan, 211.0, 640.0, 334.0, 153.0, 47.0, 154.0, 406.0, 686.0, 89.0, 656.0, 434.0, 233.0, 537.0, 160.0, 298.0, 171.0, nan, nan, nan, 831.0, 386.0, 553.0, 505.0, 727.0, 862.0, 807.0, 461.0, 605.0, 404.0, 295.0, 324.0, 863.0, 52.0, 351.0, 105.0, nan, nan, nan, 976.0, 984.0, 668.0, 899.0, 147.0, 566.0, 254.0, 862.0, 871.0, 443.0, 179.0, 949.0, 491.0, 264.0, 417.0, 773.0, nan, nan, nan, 997.0, 433.0, 113.0, 360.0, 736.0, 267.0, 680.0, 101.0, 254.0, 972.0, 862.0, 363.0, 387.0, 238.0]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.9 %)\nE   [left]:  [949.0, 482.0, 721.0, 740.0, 341.0, 365.0, 983.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 503.0, 857.0, 227.0, 419.0, 637.0, 251.0, 33.0, 120.0, 791.0, 578.0, 584.0, 232.0, 273.0, 689.0, 9.0, 528.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 614.0, 723.0, 45.0, 847.0, 827.0, 904.0, 115.0, 445.0, 174.0, 44.0, 707.0, 316.0, 188.0, 830.0, 681.0, 468.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 306.0, 519.0, 328.0, 326.0, 764.0, 110.0, 877.0, 398.0, 262.0, 937.0, 514.0, 457.0, 123.0, 338.0, 686.0, 172.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 80.0, 737.0, 138.0, 671.0, 224.0, 532.0, 312.0, 842.0, 829.0, 616.0, 138.0, 375.0, 572.0, 781.0, 359.0, 727.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 348.0, 198.0, 476.0, 499.0, 201.0, 775.0, 500.0, 418.0, 106.0, 535.0, 359.0, 630.0, 880.0, 389.0, ...]\nE   [right]: [949.0, 482.0, 721.0, 740.0, 341.0, 365.0, 983.0, nan, nan, nan, 503.0, 857.0, 227.0, 419.0, 637.0, 251.0, 33.0, 120.0, 791.0, 578.0, 584.0, 232.0, 273.0, 689.0, 9.0, 528.0, nan, nan, nan, 614.0, 723.0, 45.0, 847.0, 827.0, 904.0, 115.0, 445.0, 174.0, 44.0, 707.0, 316.0, 188.0, 830.0, 681.0, 468.0, nan, nan, nan, 306.0, 519.0, 328.0, 326.0, 764.0, 110.0, 877.0, 398.0, 262.0, 937.0, 514.0, 457.0, 123.0, 338.0, 686.0, 172.0, nan, nan, nan, 80.0, 737.0, 138.0, 671.0, 224.0, 532.0, 312.0, 842.0, 829.0, 616.0, 138.0, 375.0, 572.0, 781.0, 359.0, 727.0, nan, nan, nan, 348.0, 198.0, 476.0, 499.0, 201.0, 775.0, 500.0, 418.0, 106.0, 535.0, 359.0, 630.0, 880.0, 389.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.78 %)\nE   [left]:  [164.0, 738.0, 472.0, 252.0, 39.0, 173.0, 498.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 392.0, 539.0, 931.0, 909.0, 742.0, 846.0, 818.0, 128.0, 495.0, 757.0, 436.0, 563.0, 892.0, 153.0, 873.0, 725.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 285.0, 106.0, 818.0, 646.0, 592.0, 965.0, 956.0, 357.0, 720.0, 454.0, 14.0, 407.0, 566.0, 779.0, 128.0, 288.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 606.0, 958.0, 311.0, 485.0, 324.0, 256.0, 940.0, 947.0, 572.0, 880.0, 789.0, 259.0, 772.0, 570.0, 813.0, 219.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 590.0, 183.0, 746.0, 379.0, 187.0, 644.0, 506.0, 644.0, 664.0, 828.0, 326.0, 70.0, 99.0, 878.0, 356.0, 24.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 399.0, 174.0, 989.0, 751.0, 830.0, 366.0, 539.0, 318.0, 830.0, 982.0, 243.0, 311.0, 543.0, 955.0, ...]\nE   [right]: [164.0, 738.0, 472.0, 252.0, 39.0, 173.0, 498.0, nan, nan, nan, 392.0, 539.0, 931.0, 909.0, 742.0, 846.0, 818.0, 128.0, 495.0, 757.0, 436.0, 563.0, 892.0, 153.0, 873.0, 725.0, nan, nan, nan, 285.0, 106.0, 818.0, 646.0, 592.0, 965.0, 956.0, 357.0, 720.0, 454.0, 14.0, 407.0, 566.0, 779.0, 128.0, 288.0, nan, nan, nan, 606.0, 958.0, 311.0, 485.0, 324.0, 256.0, 940.0, 947.0, 572.0, 880.0, 789.0, 259.0, 772.0, 570.0, 813.0, 219.0, nan, nan, nan, 590.0, 183.0, 746.0, 379.0, 187.0, 644.0, 506.0, 644.0, 664.0, 828.0, 326.0, 70.0, 99.0, 878.0, 356.0, 24.0, nan, nan, nan, 399.0, 174.0, 989.0, 751.0, 830.0, 366.0, 539.0, 318.0, 830.0, 982.0, 243.0, 311.0, 543.0, 955.0, ...]"
        ],
        [
            "E   AssertionError: DataFrame.iloc[:, 2] (column name=\"julie\") are different\nE   \nE   DataFrame.iloc[:, 2] (column name=\"julie\") values are different (15.789 %)\nE   [left]:  [442.0, 567.0, 97.0, 317.0, 106.0, 148.0, 700.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 900.0, 820.0, 904.0, 107.0, 622.0, 354.0, 850.0, 773.0, 934.0, 116.0, 80.0, 83.0, 189.0, 258.0, 434.0, 857.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 127.0, 517.0, 186.0, 481.0, 542.0, 290.0, 571.0, 32.0, 322.0, 585.0, 976.0, 452.0, 422.0, 81.0, 288.0, 999.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 22.0, 307.0, 463.0, 583.0, 344.0, 955.0, 715.0, 361.0, 743.0, 899.0, 824.0, 198.0, 783.0, 743.0, 836.0, 141.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 850.0, 145.0, 99.0, 26.0, 18.0, 799.0, 570.0, 534.0, 538.0, 406.0, 44.0, 911.0, 724.0, 355.0, 349.0, 380.0, -9.223372036854776e+18, -9.223372036854776e+18, -9.223372036854776e+18, 165.0, 744.0, 529.0, 857.0, 506.0, 720.0, 537.0, 524.0, 869.0, 905.0, 489.0, 437.0, 599.0, 939.0, ...]\nE   [right]: [442.0, 567.0, 97.0, 317.0, 106.0, 148.0, 700.0, nan, nan, nan, 900.0, 820.0, 904.0, 107.0, 622.0, 354.0, 850.0, 773.0, 934.0, 116.0, 80.0, 83.0, 189.0, 258.0, 434.0, 857.0, nan, nan, nan, 127.0, 517.0, 186.0, 481.0, 542.0, 290.0, 571.0, 32.0, 322.0, 585.0, 976.0, 452.0, 422.0, 81.0, 288.0, 999.0, nan, nan, nan, 22.0, 307.0, 463.0, 583.0, 344.0, 955.0, 715.0, 361.0, 743.0, 899.0, 824.0, 198.0, 783.0, 743.0, 836.0, 141.0, nan, nan, nan, 850.0, 145.0, 99.0, 26.0, 18.0, 799.0, 570.0, 534.0, 538.0, 406.0, 44.0, 911.0, 724.0, 355.0, 349.0, 380.0, nan, nan, nan, 165.0, 744.0, 529.0, 857.0, 506.0, 720.0, 537.0, 524.0, 869.0, 905.0, 489.0, 437.0, 599.0, 939.0, ...]"
        ]
    ],
    "2.1.2": [
        [
            "n = 100, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = False, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = True, dropna = False\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = False, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 10, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 100, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 1000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 10000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ],
        [
            "n = 100000, m = 1000, sort = True, dropna = True\n\n    @pytest.mark.parametrize(\"n\", 10 ** np.arange(2, 6))\n    @pytest.mark.parametrize(\"m\", [10, 100, 1000])\n    @pytest.mark.parametrize(\"sort\", [False, True])\n    @pytest.mark.parametrize(\"dropna\", [False, True])\n    def test_series_groupby_nunique(n, m, sort, dropna):\n        def check_nunique(df, keys, as_index=True):\n            original_df = df.copy()\n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            left = gr[\"julie\"].nunique(dropna=dropna)\n    \n            gr = df.groupby(keys, as_index=as_index, sort=sort)\n            right = gr[\"julie\"].apply(Series.nunique, dropna=dropna)\n            if not as_index:\n                right = right.reset_index(drop=True)\n    \n            tm.assert_series_equal(left, right, check_names=False)\n            tm.assert_frame_equal(df, original_df)\n    \n        days = date_range(\"2015-08-23\", periods=10)\n    \n        frame = DataFrame(\n            {\n                \"jim\": np.random.choice(list(ascii_lowercase), n),\n                \"joe\": np.random.choice(days, n),\n                \"julie\": np.random.randint(0, m, n),\n            }\n        )\n    \n        check_nunique(frame, [\"jim\"])\n        check_nunique(frame, [\"jim\", \"joe\"])\n    \n        frame.loc[1::17, \"jim\"] = None\n        frame.loc[3::37, \"joe\"] = None\n        frame.loc[7::19, \"julie\"] = None\n        frame.loc[8::19, \"julie\"] = None\n        frame.loc[9::19, \"julie\"] = None\n    \n>       check_nunique(frame, [\"jim\"])\n\npandas/tests/groupby/test_function.py:1051: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/tests/groupby/test_function.py:1030: in check_nunique\n    tm.assert_frame_equal(df, original_df)\npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:174: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227f10>",
                "self.obj": "0     5\n1     0\n2     2\n3     3\n4     7\n     ..\n95    8\n96    6\n97    0\n98    6\n99    7\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  4,  5,  5,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  8,  9,  9,  9,\n        9,  9, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14,\n       14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18,\n       18, 18, 19, 19, 19, 20, 20, 21, 22, 22, 22, 23, 24, 25, 25])",
                "_": "26",
                "val": "array([3, 5, 5, 5, 5, 6, 0, 1, 2, 3, 5, 8, 1, 2, 3, 6, 6, 9, 1, 7, 8, 9,\n       9, 2, 2, 2, 2, 3, 5, 6, 7, 8, 4, 6, 9, 0, 1, 1, 6, 7, 1, 3, 3, 4,\n       5, 6, 8, 9, 3, 4, 4, 6, 7, 0, 2, 1, 8, 2, 4, 4, 6, 7, 2, 3, 6, 8,\n       0, 0, 0, 5, 0, 5, 6, 7, 8, 2, 4, 9, 4, 5, 5, 5, 6, 7, 8, 8, 8, 0,\n       0, 1, 5, 8, 9, 0, 7, 9, 1, 4, 4, 8])",
                "sorter": "array([58,  0, 14, 64, 90, 54,  1, 25, 73, 37, 89,  9, 57,  2,  3, 33, 98,\n       66, 10,  4, 93,  8, 49, 11, 43, 50, 53,  5, 35, 13, 76, 48, 85,  6,\n       78, 32,  7, 15, 96, 47, 77, 19, 46, 12, 88, 82, 65, 16, 44, 59, 86,\n       21, 17, 27, 18, 38, 20, 28, 22, 94, 87, 24, 30, 56, 75, 23, 26, 52,\n       97, 84, 39, 63, 41, 61, 29, 51, 31, 68, 92, 34, 42, 55, 70, 80, 36,\n       45, 60, 62, 67, 40, 69, 79, 71, 72, 99, 83, 74, 81, 91, 95])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  6, 12, 18, 23, 32, 35, 40, 47, 48, 53, 55, 57, 62, 66, 70, 75,\n       78, 81, 87, 90, 92, 93, 96, 97, 98])",
                "inc": "array([1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 6, 5, 4, 6, 3, 4, 6, 1, 4, 2, 2, 4, 4, 2, 5, 3, 2, 4, 2, 2, 1,\n       3, 1, 1, 2])",
                "res": "array([3, 6, 5, 4, 6, 3, 4, 6, 1, 4, 2, 2, 4, 4, 2, 5, 3, 2, 4, 2, 2, 1,\n       3, 1, 1, 2])",
                "ri": "Index(['y', 'p', 'm', 'a', 'r', 'g', 'l', 'j', 'n', 'c', 'f', 'x', 'w', 's',\n       't', 'u', 'k', 'o', 'q', 'd', 'h', 'v', 'e', 'z', 'b', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    3\np    6\nm    5\na    4\nr    6\ng    3\nl    4\nj    6\nn    1\nc    4\nf    2\nx    2\nw    4\ns    4\nt    2\nu    5\nk    3\no    2\nq    4\nd    2\nh    2\nv    1\ne    3\nz    1\nb    1\ni    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227310>",
                "self.obj": "0     5\n1     0\n2     2\n3     3\n4     7\n     ..\n95    8\n96    6\n97    0\n98    6\n99    7\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  7,  7,  8,  9, 10, 11,\n       11, 12, 13, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 43, 44, 45, 45, 46, 46, 47, 48, 48, 49, 49, 50, 51, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 59, 60, 60, 61, 62, 63, 64, 65, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81])",
                "_": "82",
                "val": "array([5, 0, 1, 2, 3, 7, 2, 3, 6, 9, 1, 6, 7, 9, 8, 1, 2, 6, 4, 5, 5, 1,\n       9, 4, 7, 2, 3, 8, 6, 4, 8, 7, 1, 0, 0, 2, 8, 2, 4, 0, 6, 5, 5, 7,\n       8, 3, 1, 0, 1, 6, 5, 3, 5, 8, 3, 7, 8, 8, 9, 2, 2, 9, 0, 5, 2, 5,\n       6, 3, 3, 4, 8, 7, 0, 5, 1, 8, 6, 9, 0, 5, 6, 9, 0, 7, 2, 1, 6, 8,\n       4, 6, 9, 4, 6, 5, 5, 4, 4, 4, 8, 0])",
                "sorter": "array([ 0,  1, 57,  2,  3,  4, 43,  5,  6, 78,  7, 96, 47,  8,  9, 10, 11,\n       13, 12, 14, 90, 15, 16, 86, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 32, 33, 34, 35, 80, 36, 37, 38, 39, 40, 41, 42,\n       44, 55, 45, 46, 76, 48, 93, 49, 50, 51, 68, 52, 84, 53, 64, 54, 56,\n       58, 59, 60, 61, 62, 63, 77, 65, 98, 66, 67, 69, 70, 71, 72, 99, 73,\n       74, 75, 79, 81, 82, 83, 85, 87, 88, 89, 91, 92, 94, 95, 97])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  4,  5,  6,  8, 10, 13, 14, 15, 16, 18, 19, 21, 22, 23,\n       25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 57, 59, 60, 62, 64,\n       65, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 84, 85,\n       86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 2, 2, 3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 2, 1, 2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 82",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-23    1\np    2015-08-26    1\nm    2015-08-31    2\n     2015-08-26    1\na    2015-08-30    1\n                  ..\ni    2015-09-01    1\no    2015-09-01    1\nw    2015-08-25    1\ni    2015-08-31    1\nt    2015-08-28    1\nName: julie, Length: 82, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b287d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b287af0>",
                "self.obj": "0     5.0\n1     0.0\n2     2.0\n3     3.0\n4     7.0\n     ... \n95    8.0\n96    6.0\n97    0.0\n98    6.0\n99    7.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,\n        1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,\n        5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,\n        8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13,\n       13, 13, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18,\n       18, 18, 18, 19, 19, 19, 20, 21, 21, 21, 22, 23, 24, 25, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([ 1, 52, 18, 86, 35, 69, 64, 58,  0, 14, 90, 54, 66, 57,  2,  3, 33,\n       98,  8, 10,  4, 93, 49, 11, 43, 50, 53,  5, 13, 76, 48, 85,  6, 78,\n        7, 47, 32, 15, 96,  9, 25, 73, 37, 89, 46, 65, 77, 19, 12, 88, 82,\n       16, 44, 59, 21, 17, 38, 20, 28, 22, 94, 87, 24, 30, 56, 75, 23, 26,\n       84, 97, 27, 39, 63, 41, 61, 29, 51, 31, 68, 92, 34, 42, 45, 55, 70,\n       80, 36, 60, 62, 67, 40, 71, 83, 72, 99, 74, 79, 81, 91, 95])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 12, 18, 23, 31, 34, 39, 44, 51, 52, 56, 58, 63, 67, 70, 71, 76,\n       79, 82, 88, 91, 92, 95, 96, 97, 98])",
                "inc": "array([1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 4, 5, 5, 5, 3, 4, 5, 6, 1, 4, 2, 4, 4, 2, 1, 5, 3, 2, 5, 2, 1,\n       3, 1, 1, 1, 2])",
                "res": "array([4, 5, 5, 5, 3, 4, 5, 6, 1, 4, 2, 4, 4, 2, 1, 5, 3, 2, 5, 2, 1, 3,\n       1, 1, 1, 2])",
                "ri": "Index(['y', 'm', 'a', 'r', 'g', 'l', 'p', 'j', 'n', 'c', 'x', 'w', 's', 't',\n       'f', 'u', 'k', 'o', 'q', 'd', 'v', 'e', 'z', 'h', 'b', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    4\nm    5\na    5\nr    5\ng    3\nl    4\np    5\nj    6\nn    1\nc    4\nx    2\nw    4\ns    4\nt    2\nf    1\nu    5\nk    3\no    2\nq    5\nd    2\nv    1\ne    3\nz    1\nh    1\nb    1\ni    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b260b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b260700>",
                "self.obj": "0      1\n1      8\n2      7\n3      5\n4      3\n      ..\n995    0\n996    9\n997    0\n998    9\n999    4\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  41,  72, 116, 149, 185, 227, 269, 300, 334, 376, 422, 464,\n       503, 539, 579, 615, 666, 705, 748, 793, 830, 861, 899, 926, 958])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9, 10,\n       10, 10, 10, 10,  9,  9, 10,  9, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9, 10,\n       10, 10, 10, 10,  9,  9, 10,  9, 10])",
                "ri": "Index(['q', 'e', 'z', 't', 'y', 'm', 'w', 'h', 'd', 'c', 'l', 'f', 'g', 'o',\n       'u', 'a', 'x', 'v', 'j', 'b', 'r', 's', 'n', 'k', 'p', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    10\ne    10\nz    10\nt    10\ny    10\nm    10\nw    10\nh    10\nd    10\nc    10\nl    10\nf    10\ng    10\no    10\nu    10\na     9\nx    10\nv    10\nj    10\nb    10\nr    10\ns     9\nn     9\nk    10\np     9\ni    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b289460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b289280>",
                "self.obj": "0      1\n1      8\n2      7\n3      5\n4      3\n      ..\n995    0\n996    9\n997    0\n998    9\n999    4\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "256",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 256",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 256",
                "res": "array of shape 256",
                "ri": "array of shape 256",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-27    4\ne    2015-08-30    5\nz    2015-08-28    2\nt    2015-08-26    2\ny    2015-09-01    4\n                  ..\nk    2015-08-26    2\no    2015-08-31    3\na    2015-08-28    1\nn    2015-08-29    3\nb    2015-08-25    2\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b287b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b287910>",
                "self.obj": "0      1.0\n1      8.0\n2      7.0\n3      5.0\n4      3.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    4.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      1.000000e+00\n1      8.000000e+00\n2      7.000000e+00\n3      5.000000e+00\n4      3.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.000000e+00\n999    4.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  99, 139, 172, 203, 242, 281, 309, 342, 382, 427, 468, 505,\n       538, 571, 619, 656, 699, 741, 778, 813, 842, 870, 905, 930, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11, 11, 11, 10, 10, 10, 10, 11, 11, 10, 11, 11, 11, 11, 10, 11, 11,\n       11, 11, 11, 11, 10, 11, 10, 10,  9,  9])",
                "res": "array([11, 11, 10, 10, 10, 10, 11, 11, 10, 11, 11, 11, 11, 10, 11, 11, 11,\n       11, 11, 11, 10, 11, 10, 10,  9,  9])",
                "ri": "Index(['q', 'z', 't', 'y', 'm', 'w', 'h', 'd', 'c', 'l', 'f', 'g', 'o', 'a',\n       'x', 'v', 'j', 'b', 'u', 'r', 's', 'e', 'n', 'k', 'p', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    11\nz    11\nt    10\ny    10\nm    10\nw    10\nh    11\nd    11\nc    10\nl    11\nf    11\ng    11\no    11\na    10\nx    11\nv    11\nj    11\nb    11\nu    11\nr    11\ns    10\ne    11\nn    10\nk    10\np     9\ni     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b2607f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b260b20>",
                "self.obj": "0       7\n1       8\n2       6\n3       8\n4       5\n       ..\n9995    0\n9996    3\n9997    9\n9998    1\n9999    7\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 248,  726,  790, ..., 9109, 9520, 9647])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  410,  778, 1171, 1561, 1947, 2361, 2767, 3140, 3482, 3862,\n       4214, 4552, 4955, 5355, 5777, 6152, 6574, 6918, 7279, 7677, 8104,\n       8508, 8899, 9288, 9650])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['x', 'l', 't', 's', 'u', 'v', 'j', 'm', 'e', 'c', 'p', 'q', 'g', 'o',\n       'a', 'y', 'i', 'z', 'd', 'f', 'h', 'k', 'n', 'r', 'b', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nx    10\nl    10\nt    10\ns    10\nu    10\nv    10\nj    10\nm    10\ne    10\nc    10\np    10\nq    10\ng    10\no    10\na    10\ny    10\ni    10\nz    10\nd    10\nf    10\nh    10\nk    10\nn    10\nr    10\nb    10\nw    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b04d3a0>",
                "self.obj": "0       7\n1       8\n2       6\n3       8\n4       5\n       ..\n9995    0\n9996    3\n9997    9\n9998    1\n9999    7\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1210, 5281, 6073, ..., 2335, 2341, 5019])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nx    2015-08-28    10\n     2015-08-24     9\nl    2015-08-27    10\nt    2015-08-27    10\ns    2015-08-24    10\n                   ..\na    2015-08-27     9\nd    2015-09-01     9\np    2015-08-24     9\nf    2015-08-26    10\ne    2015-08-26    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b04d3a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b13c610>",
                "self.obj": "0       7.0\n1       8.0\n2       6.0\n3       8.0\n4       5.0\n       ... \n9995    0.0\n9996    3.0\n9997    9.0\n9998    1.0\n9999    7.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 8371, 9520, 9647])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  977, 1324, 1691, 2056, 2418, 2815, 3184, 3539, 3857, 4217,\n       4552, 4873, 5249, 5652, 5993, 6383, 6711, 7054, 7426, 7806, 8182,\n       8548, 8923, 9329, 9672])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['x', 'l', 't', 's', 'u', 'v', 'j', 'm', 'e', 'c', 'p', 'q', 'o', 'a',\n       'y', 'i', 'z', 'd', 'f', 'g', 'k', 'n', 'r', 'h', 'b', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nx    11\nl    11\nt    11\ns    11\nu    11\nv    11\nj    11\nm    11\ne    11\nc    11\np    11\nq    11\no    11\na    11\ny    11\ni    11\nz    11\nd    11\nf    11\ng    11\nk    11\nn    11\nr    11\nh    11\nb    11\nw    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b13c040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b13c070>",
                "self.obj": "0        0\n1        0\n2        1\n3        9\n4        8\n        ..\n99995    1\n99996    6\n99997    7\n99998    3\n99999    1\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,   207,   250, ..., 97958, 98657, 99492])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3751,  7498, 11324, 15117, 19024, 22881, 26622, 30540,\n       34466, 38338, 42160, 45995, 49905, 53709, 57621, 61561, 65310,\n       69146, 72960, 76811, 80653, 84637, 88468, 92359, 96086])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['z', 'y', 'v', 'k', 'n', 'u', 'q', 'b', 'p', 'l', 'x', 'a', 'm', 'f',\n       't', 'h', 'd', 'o', 'j', 'g', 'i', 's', 'e', 'c', 'w', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    10\ny    10\nv    10\nk    10\nn    10\nu    10\nq    10\nb    10\np    10\nl    10\nx    10\na    10\nm    10\nf    10\nt    10\nh    10\nd    10\no    10\nj    10\ng    10\ni    10\ns    10\ne    10\nc    10\nw    10\nr    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1782b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b178bb0>",
                "self.obj": "0        0\n1        0\n2        1\n3        9\n4        8\n        ..\n99995    1\n99996    6\n99997    7\n99998    3\n99999    1\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0, 11183, 12660, ..., 89685, 92824, 97479])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-28    10\ny    2015-09-01    10\nv    2015-08-25    10\n     2015-08-24    10\nk    2015-08-31    10\n                   ..\na    2015-08-26    10\nt    2015-08-31    10\np    2015-08-25    10\ns    2015-08-24    10\nd    2015-08-30    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b12deb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b12dee0>",
                "self.obj": "0        0.0\n1        0.0\n2        1.0\n3        9.0\n4        8.0\n        ... \n99995    1.0\n99996    6.0\n99997    7.0\n99998    3.0\n99999    1.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 96967, 97030, 97958])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9406, 12999, 16565, 20235, 23871, 27374, 31042, 34752,\n       38398, 42018, 45613, 49316, 52927, 56594, 60303, 63827, 67424,\n       71022, 74646, 78166, 81907, 85520, 89117, 92774, 96296])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['z', 'v', 'k', 'n', 'u', 'q', 'b', 'p', 'l', 'x', 'a', 'm', 'f', 't',\n       'h', 'd', 'o', 'g', 'i', 'y', 's', 'e', 'j', 'c', 'w', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    11\nv    11\nk    11\nn    11\nu    11\nq    11\nb    11\np    11\nl    11\nx    11\na    11\nm    11\nf    11\nt    11\nh    11\nd    11\no    11\ng    11\ni    11\ny    11\ns    11\ne    11\nj    11\nc    11\nw    11\nr    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4d00>",
                "self.obj": "0     67\n1     48\n2      0\n3     55\n4     66\n      ..\n95    50\n96    15\n97    37\n98    70\n99    61\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,\n        3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10,\n       11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 14, 14, 14,\n       15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 18, 19, 19,\n       20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 25])",
                "_": "26",
                "val": "array([ 4, 13, 25, 61, 67, 26, 29, 48, 64, 90,  0, 67, 69, 89,  9, 15, 19,\n       27, 40, 55, 57,  3, 57, 66, 84, 12, 21, 28, 42, 56,  3,  6, 32, 37,\n       44, 82, 32, 55, 63, 70, 70, 92, 97, 98, 13, 41, 50, 58, 60, 80, 80,\n        3,  6, 15, 17, 39, 40, 49, 93, 28, 51, 76, 96, 68, 70, 47, 62, 84,\n       55, 58, 64, 14, 18, 37, 67, 86,  4, 41,  7, 17, 51, 65, 86, 34, 38,\n       11, 35, 86, 15, 40, 49, 35, 51, 80, 15, 29, 35, 76, 58, 19])",
                "sorter": "array([69, 31, 23, 99,  0, 41, 67,  1, 84, 86,  2, 39, 60, 28,  7, 36,  5,\n       88, 17,  3, 56, 30, 38,  4, 13,  6, 35, 78, 15, 76,  8, 16, 53, 97,\n       51,  9, 14, 87, 10, 46, 98, 21, 72, 33, 11, 49, 95, 93, 66, 12, 18,\n       62, 52, 94, 63, 82, 19, 89, 90, 42, 83, 92, 20, 68, 22, 70, 77, 24,\n       25, 65, 43, 81, 79, 61, 26, 58, 27, 80, 45, 29, 48, 59, 64, 32, 44,\n       75, 54, 34, 71, 40, 37, 50, 91, 47, 96, 55, 74, 73, 57, 85])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  5, 10, 14, 21, 25, 30, 31, 36, 44, 48, 51, 59, 63, 65, 68, 71,\n       76, 78, 83, 85, 88, 91, 94, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 5, 4, 7, 4, 5, 1, 5, 7, 4, 2, 8, 4, 2, 3, 3, 5, 2, 5, 2, 3, 3,\n       3, 4, 1, 1])",
                "res": "array([5, 5, 4, 7, 4, 5, 1, 5, 7, 4, 2, 8, 4, 2, 3, 3, 5, 2, 5, 2, 3, 3,\n       3, 4, 1, 1])",
                "ri": "Index(['r', 'm', 'j', 'a', 'x', 'o', 'f', 'i', 'h', 'c', 'g', 'v', 'q', 'k',\n       'd', 'w', 'p', 'l', 'b', 'u', 'n', 't', 'e', 'y', 's', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    5\nm    5\nj    4\na    7\nx    4\no    5\nf    1\ni    5\nh    7\nc    4\ng    2\nv    8\nq    4\nk    2\nd    3\nw    3\np    5\nl    2\nb    5\nu    2\nn    3\nt    3\ne    3\ny    4\ns    1\nz    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4eb0>",
                "self.obj": "0     67\n1     48\n2      0\n3     55\n4     66\n      ..\n95    50\n96    15\n97    37\n98    70\n99    61\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  1,  2,  3,  4,  4,  5,  6,  6,  7,  8,  9, 10, 10,\n       11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 22, 23, 24,\n       25, 26, 27, 28, 29, 29, 30, 31, 31, 32, 33, 34, 34, 35, 36, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 52, 53,\n       54, 55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 65, 66, 67, 68,\n       69, 70, 71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "83",
                "val": "array([ 4, 61, 67, 48, 90,  0, 55,  3, 66, 19, 12, 21,  9,  3, 82, 63, 98,\n       13, 80, 84, 32, 70, 42,  6, 40, 80, 40, 93, 96, 92, 68, 70, 25, 84,\n       55, 67,  4, 89,  7, 17, 13, 34, 38, 86, 15, 15, 49, 57, 67, 40, 26,\n       28, 64, 80, 51, 41, 35, 44,  6, 32, 35, 29, 57, 58, 14, 18, 86, 65,\n       69, 37,  3, 17, 86, 58, 60, 29, 64, 47, 97, 76, 15, 35, 11, 56, 62,\n       28, 41, 39, 49, 51, 19, 55, 27, 51, 76, 58, 15, 50, 37, 70])",
                "sorter": "array([69, 99,  0,  1, 86,  2,  3, 30,  4,  5,  6, 35,  7,  8,  9, 10, 33,\n       11, 12, 13, 14, 46, 15, 16, 17, 18, 19, 90, 20, 21, 68, 22, 23, 24,\n       25, 26, 27, 28, 45, 29, 31, 32, 44, 34, 36, 71, 37, 38, 39, 40, 41,\n       42, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 81, 79, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 84, 70, 72, 73, 96, 74, 75, 76, 77,\n       78, 80, 82, 89, 83, 85, 87, 88, 91, 92, 93, 94, 95, 97, 98])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  3,  5,  6,  7,  9, 10, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23,\n       24, 25, 26, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44,\n       45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\n       63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83,\n       84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([3, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 83",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-08-29    3\nm    2015-08-30    2\nj    2015-08-30    1\na    2015-08-24    1\nx    2015-08-30    2\n                  ..\nc    2015-08-28    1\nv    2015-08-24    1\nc    2015-09-01    1\ni    2015-08-23    1\nh    2015-08-29    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b260490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b260ac0>",
                "self.obj": "0     67.0\n1     48.0\n2      0.0\n3     55.0\n4     66.0\n      ... \n95    50.0\n96    15.0\n97    37.0\n98    70.0\n99    61.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  6,  6,  6,  6,\n        6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 10, 10,\n       10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14,\n       15, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19,\n       20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([69, 52, 35,  1, 18, 86, 31, 23, 99,  0, 28,  2, 39, 60,  7, 36,  5,\n       88, 17,  3, 56, 30, 38,  4, 13,  6, 78, 15, 76,  8,  9, 16, 53, 97,\n       51, 46, 14, 87, 10, 98, 21, 72, 33, 11, 49, 95, 93, 66, 12, 62, 94,\n       63, 82, 19, 89, 90, 83, 42, 92, 20, 68, 22, 70, 77, 24, 65, 25, 43,\n       26, 81, 79, 61, 58, 27, 80, 45, 64, 29, 48, 59, 32, 44, 75, 54, 34,\n       71, 40, 37, 84, 41, 67, 47, 50, 91, 96, 55, 74, 73, 57, 85])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 10, 14, 21, 25, 29, 30, 35, 43, 47, 49, 56, 60, 62, 65, 68, 73,\n       75, 80, 82, 85, 88, 91, 94, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 4, 4, 7, 4, 4, 1, 5, 8, 4, 2, 7, 4, 2, 3, 3, 5, 2, 4, 2, 3, 3,\n       3, 3, 4, 1, 1])",
                "res": "array([4, 4, 7, 4, 4, 1, 5, 8, 4, 2, 7, 4, 2, 3, 3, 5, 2, 4, 2, 3, 3, 3,\n       3, 4, 1, 1])",
                "ri": "Index(['r', 'j', 'a', 'x', 'o', 'f', 'i', 'h', 'c', 'g', 'v', 'q', 'k', 'd',\n       'w', 'p', 'l', 'b', 'u', 'n', 't', 'm', 'e', 'y', 's', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    4\nj    4\na    7\nx    4\no    4\nf    1\ni    5\nh    8\nc    4\ng    2\nv    7\nq    4\nk    2\nd    3\nw    3\np    5\nl    2\nb    4\nu    2\nn    3\nt    3\nm    3\ne    3\ny    4\ns    1\nz    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b260d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b260d00>",
                "self.obj": "0      62\n1      73\n2      16\n3      54\n4      22\n       ..\n995    12\n996    68\n997    79\n998    77\n999     1\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  32,  77, 111, 147, 192, 230, 281, 326, 359, 400, 441, 482,\n       507, 538, 584, 628, 661, 709, 744, 778, 822, 864, 899, 931, 969])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([27, 36, 30, 31, 36, 28, 41, 36, 29, 36, 33, 32, 23, 26, 36, 37, 30,\n       39, 30, 30, 39, 35, 32, 28, 31, 28])",
                "res": "array([27, 36, 30, 31, 36, 28, 41, 36, 29, 36, 33, 32, 23, 26, 36, 37, 30,\n       39, 30, 30, 39, 35, 32, 28, 31, 28])",
                "ri": "Index(['c', 'v', 'd', 'o', 's', 'g', 'y', 'n', 'x', 'p', 'b', 'k', 'm', 'h',\n       'a', 'u', 'z', 'l', 'r', 'f', 't', 'e', 'q', 'i', 'j', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nc    27\nv    36\nd    30\no    31\ns    36\ng    28\ny    41\nn    36\nx    29\np    36\nb    33\nk    32\nm    23\nh    26\na    36\nu    37\nz    30\nl    39\nr    30\nf    30\nt    39\ne    35\nq    32\ni    28\nj    31\nw    28\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4fd0>",
                "self.obj": "0      62\n1      73\n2      16\n3      54\n4      22\n       ..\n995    12\n996    68\n997    79\n998    77\n999     1\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "257",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 257",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 257",
                "res": "array of shape 257",
                "ri": "array of shape 257",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nc    2015-08-27    6\nv    2015-08-30    8\nd    2015-08-30    3\no    2015-08-29    2\ns    2015-08-29    7\n                  ..\na    2015-08-23    1\nd    2015-09-01    1\nq    2015-08-27    1\nm    2015-08-29    1\nc    2015-08-28    1\nName: julie, Length: 257, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3b48e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3b4e20>",
                "self.obj": "0      62.0\n1      73.0\n2      16.0\n3      54.0\n4      22.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    77.0\n999     1.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      6.200000e+01\n1      7.300000e+01\n2      1.600000e+01\n3      5.400000e+01\n4      2.200000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.700000e+01\n999    1.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  88, 119, 153, 193, 227, 272, 315, 347, 386, 421, 462, 485,\n       528, 570, 614, 645, 674, 721, 755, 786, 830, 871, 904, 935, 972])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([42, 18, 27, 25, 28, 20, 33, 33, 25, 32, 24, 29, 21, 30, 31, 32, 25,\n       21, 35, 23, 28, 34, 29, 28, 25, 28, 24])",
                "res": "array([18, 27, 25, 28, 20, 33, 33, 25, 32, 24, 29, 21, 30, 31, 32, 25, 21,\n       35, 23, 28, 34, 29, 28, 25, 28, 24])",
                "ri": "Index(['c', 'd', 'o', 's', 'g', 'y', 'n', 'x', 'p', 'b', 'k', 'm', 'a', 'u',\n       'v', 'z', 'h', 'l', 'r', 'f', 't', 'e', 'q', 'i', 'j', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nc    18\nd    27\no    25\ns    28\ng    20\ny    33\nn    33\nx    25\np    32\nb    24\nk    29\nm    21\na    30\nu    31\nv    32\nz    25\nh    21\nl    35\nr    23\nf    28\nt    34\ne    29\nq    28\ni    25\nj    28\nw    24\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b088a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b088400>",
                "self.obj": "0        7\n1       46\n2       14\n3       93\n4       38\n        ..\n9995    17\n9996    90\n9997    14\n9998    91\n9999    19\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  1,  2, ..., 98, 99, 99])",
                "sorter": "array([6519, 5784, 2607, ..., 5894, 4555, 6653])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  396,  779, 1152, 1517, 1927, 2351, 2720, 3102, 3472, 3842,\n       4241, 4637, 5014, 5409, 5801, 6195, 6598, 7005, 7393, 7750, 8088,\n       8478, 8856, 9236, 9642])",
                "inc": "array([1, 1, 1, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 95,  96,  98,  98,  98,  97,  97,  97,  97,  98,  96,  97,  96,\n       100,  96,  98,  99,  99,  98,  97,  98,  99,  96,  99,  98,  98])",
                "res": "array([ 95,  96,  98,  98,  98,  97,  97,  97,  97,  98,  96,  97,  96,\n       100,  96,  98,  99,  99,  98,  97,  98,  99,  96,  99,  98,  98])",
                "ri": "Index(['j', 'd', 'c', 'k', 'u', 's', 'w', 'o', 'f', 'h', 'a', 'v', 'g', 'e',\n       'y', 'r', 'q', 't', 'i', 'b', 'x', 'p', 'z', 'm', 'l', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj     95\nd     96\nc     98\nk     98\nu     98\ns     97\nw     97\no     97\nf     97\nh     98\na     96\nv     97\ng     96\ne    100\ny     96\nr     98\nq     99\nt     99\ni     98\nb     97\nx     98\np     99\nz     96\nm     99\nl     98\nn     98\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b16b760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b16bc10>",
                "self.obj": "0        7\n1       46\n2       14\n3       93\n4       38\n        ..\n9995    17\n9996    90\n9997    14\n9998    91\n9999    19\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 5,  7,  7, ..., 94, 99, 99])",
                "sorter": "array([3145,    0, 4811, ..., 7551, 4555, 6653])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 0, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-30    25\nd    2015-08-31    27\n     2015-08-23    31\nc    2015-09-01    28\nk    2015-08-29    32\n                   ..\nl    2015-08-23    23\np    2015-08-25    30\nv    2015-08-23    34\nn    2015-08-24    24\n     2015-09-01    31\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b12ddc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b12d130>",
                "self.obj": "0        7.0\n1       46.0\n2       14.0\n3       93.0\n4       38.0\n        ... \n9995    17.0\n9996    90.0\n9997    14.0\n9998    91.0\n9999    19.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.80000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 5894, 4555, 6653])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  965, 1319, 1670, 2014, 2403, 2805, 3149, 3510, 3853, 4194,\n       4566, 4939, 5294, 5670, 6041, 6418, 6800, 7180, 7544, 7876, 8183,\n       8554, 8912, 9275, 9663])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101,  94,  97,  97,  96,  97,  97,  96,  96,  96,  98,  92,  97,\n        94, 101,  95,  95,  97,  97,  93,  95,  94,  97,  95,  97,  95,\n        96])",
                "res": "array([ 94,  97,  97,  96,  97,  97,  96,  96,  96,  98,  92,  97,  94,\n       101,  95,  95,  97,  97,  93,  95,  94,  97,  95,  97,  95,  96])",
                "ri": "Index(['j', 'd', 'c', 'k', 'u', 's', 'w', 'o', 'f', 'h', 'a', 'v', 'g', 'e',\n       'y', 'r', 'q', 't', 'i', 'b', 'x', 'p', 'z', 'm', 'l', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj     94\nd     97\nc     97\nk     96\nu     97\ns     97\nw     96\no     96\nf     96\nh     98\na     92\nv     97\ng     94\ne    101\ny     95\nr     95\nq     97\nt     97\ni     93\nb     95\nx     94\np     97\nz     95\nm     97\nl     95\nn     96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b287310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b287280>",
                "self.obj": "0        11\n1        18\n2        68\n3         0\n4        80\n         ..\n99995     7\n99996    89\n99997    97\n99998    64\n99999    62\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([  534,  8396,  9119, ..., 97615, 98318, 99619])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3742,  7652, 11559, 15437, 19365, 23317, 27059, 30911,\n       34839, 38662, 42540, 46341, 50270, 54073, 57966, 61734, 65587,\n       69408, 73258, 77137, 81034, 84920, 88710, 92503, 96234])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['v', 'b', 'o', 'a', 'w', 'p', 'k', 'h', 'd', 'm', 'x', 'u', 'f', 'g',\n       'z', 'c', 'y', 's', 'i', 'n', 'j', 't', 'r', 'q', 'e', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nv    100\nb    100\no    100\na    100\nw    100\np    100\nk    100\nh    100\nd    100\nm    100\nx    100\nu    100\nf    100\ng    100\nz    100\nc    100\ny    100\ns    100\ni    100\nn    100\nj    100\nt    100\nr    100\nq    100\ne    100\nl    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b287df0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b2871c0>",
                "self.obj": "0        11\n1        18\n2        68\n3         0\n4        80\n         ..\n99995     7\n99996    89\n99997    97\n99998    64\n99999    62\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([ 9119, 13052, 71964, ..., 70406,  6775, 97931])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nv    2015-08-30     97\nb    2015-08-28     99\nv    2015-08-25     96\no    2015-09-01    100\na    2015-08-31     97\n                  ... \nm    2015-08-29     97\nr    2015-08-28     97\ny    2015-08-27     99\ng    2015-08-27     99\nq    2015-08-26     97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b124ac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1243d0>",
                "self.obj": "0        11.0\n1        18.0\n2        68.0\n3         0.0\n4        80.0\n         ... \n99995     7.0\n99996    89.0\n99997    97.0\n99998    64.0\n99999    62.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 97339, 98318, 99619])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9382, 13064, 16695, 20380, 24101, 27830, 31355, 34975,\n       38660, 42261, 45936, 49489, 53198, 56874, 60415, 64042, 67656,\n       71292, 74955, 78537, 82196, 85848, 89402, 92951, 96461])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['v', 'o', 'a', 'b', 'w', 'p', 'k', 'h', 'd', 'm', 'x', 'u', 'f', 'z',\n       'c', 'y', 's', 'i', 'n', 'g', 'j', 't', 'r', 'q', 'e', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nv    101\no    101\na    101\nb    101\nw    101\np    101\nk    101\nh    101\nd    101\nm    101\nx    101\nu    101\nf    101\nz    101\nc    101\ny    101\ns    101\ni    101\nn    101\ng    101\nj    101\nt    101\nr    101\nq    101\ne    101\nl    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b455c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b455fd0>",
                "self.obj": "0     531\n1     552\n2     965\n3     990\n4     486\n     ... \n95    768\n96    502\n97    193\n98    329\n99    381\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,\n        7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10,\n       11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14,\n       14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20,\n       20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24])",
                "_": "25",
                "val": "array of shape 100",
                "sorter": "array([ 0,  1, 79, 33, 99, 71,  7, 40,  2, 16, 47, 87, 10, 57,  3, 85, 90,\n       34,  4, 52, 53, 63, 92, 51, 23,  5, 46, 38,  6, 29, 59,  8, 27, 50,\n       91, 26, 42, 94, 84, 19,  9, 12, 28, 11, 70, 69, 54, 75, 15, 13, 58,\n       68, 14, 49, 72, 83, 82, 32, 55, 17, 25, 20, 18, 93, 62, 24, 21, 36,\n       95, 45, 22, 67, 80, 77, 78, 37, 60, 30, 65, 31, 66, 35, 96, 39, 73,\n       74, 41, 88, 98, 43, 89, 61, 86, 76, 81, 44, 97, 48, 64, 56])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  9, 15, 20, 27, 31, 36, 42, 47, 51, 58, 62, 65, 70, 73,\n       78, 80, 82, 84, 87, 92, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 7, 6, 5, 7, 4, 5, 6, 5, 4, 7, 4, 3, 5, 3, 5, 2, 2, 2, 3, 5,\n       4, 3, 1])",
                "res": "array([1, 1, 7, 6, 5, 7, 4, 5, 6, 5, 4, 7, 4, 3, 5, 3, 5, 2, 2, 2, 3, 5,\n       4, 3, 1])",
                "ri": "Index(['m', 'w', 'g', 'h', 's', 'v', 'q', 'o', 'u', 'p', 'a', 'c', 'e', 'n',\n       'k', 'b', 'j', 'z', 'l', 'r', 'd', 't', 'i', 'y', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    1\nw    1\ng    7\nh    6\ns    5\nv    7\nq    4\no    5\nu    6\np    5\na    4\nc    7\ne    4\nn    3\nk    5\nb    3\nj    5\nz    2\nl    2\nr    2\nd    3\nt    5\ni    4\ny    3\nf    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b166b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b166a00>",
                "self.obj": "0     531\n1     552\n2     965\n3     990\n4     486\n     ... \n95    768\n96    502\n97    193\n98    329\n99    381\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  4,  5,  5,  5,  6,  7,  7,  8,  9,  9, 10,\n       10, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24,\n       25, 25, 25, 26, 27, 28, 28, 28, 29, 30, 31, 32, 33, 34, 34, 35, 36,\n       37, 37, 38, 39, 40, 41, 41, 42, 42, 43, 43, 44, 45, 46, 47, 47, 48,\n       49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,\n       65, 66, 66, 67, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "78",
                "val": "array of shape 100",
                "sorter": "array([ 0,  1, 33,  2,  3, 34,  4, 53, 23,  5,  6, 71,  7,  8, 42,  9, 87,\n       10, 11, 12, 13, 14, 75, 15, 16, 55, 17, 18, 19, 20, 21, 22, 24, 25,\n       50, 91, 26, 27, 28, 38, 29, 59, 30, 31, 32, 35, 36, 37, 60, 39, 40,\n       74, 41, 43, 44, 45, 92, 46, 47, 57, 48, 64, 49, 51, 52, 70, 54, 56,\n       58, 88, 61, 62, 63, 65, 66, 67, 68, 69, 72, 73, 76, 77, 78, 79, 80,\n       81, 83, 82, 94, 84, 85, 86, 89, 90, 93, 95, 96, 97, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  4,  5,  7, 10, 11, 13, 14, 16, 18, 19, 20, 21, 22, 24,\n       25, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38, 39, 42, 43, 44, 45, 46,\n       47, 49, 50, 51, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 67, 68, 69,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 2, 1, 2, 3, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2,\n       1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 2, 3, 1, 2, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2,\n       1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-31    1\nw    2015-08-31    1\ng    2015-08-30    2\nh    2015-08-24    1\ns    2015-08-25    2\n                  ..\nk    2015-08-31    1\nr    2015-08-31    1\ny    2015-08-28    1\nt    2015-08-27    1\ng    2015-09-01    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12417ccd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12417c9a0>",
                "self.obj": "0     531.0\n1     552.0\n2     965.0\n3     990.0\n4     486.0\n      ...  \n95    768.0\n96    502.0\n97    193.0\n98    329.0\n99    381.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,\n        9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12,\n       12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 17, 17, 17,\n       18, 18, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 22, 22, 23])",
                "_": "24",
                "val": "array of shape 100",
                "sorter": "array([86, 18, 35,  1, 69, 52,  0,  7, 79, 33, 99, 71, 40,  2, 47, 16, 87,\n       10, 57,  3, 85, 90, 34,  4, 46, 53, 63, 92, 51, 23,  5, 38,  6, 29,\n       59,  8, 26, 27, 50, 91,  9, 84, 42, 94, 19, 12, 28, 11, 70, 54, 75,\n       15, 13, 58, 83, 68, 14, 49, 72, 82, 32, 55, 17, 25, 20, 45, 24, 21,\n       36, 95, 22, 67, 80, 77, 78, 37, 60, 30, 65, 31, 96, 39, 73, 74, 41,\n       88, 98, 43, 89, 61, 76, 81, 44, 64, 97, 48, 56, 93, 62, 66])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  7, 14, 20, 24, 31, 35, 40, 46, 50, 54, 61, 65, 70, 73, 78, 80,\n       82, 85, 90, 93, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 1, 7, 6, 4, 7, 4, 3, 5, 4, 4, 7, 4, 5, 3, 5, 2, 2, 3, 5, 3, 3,\n       1, 2, 1])",
                "res": "array([1, 7, 6, 4, 7, 4, 3, 5, 4, 4, 7, 4, 5, 3, 5, 2, 2, 3, 5, 3, 3, 1,\n       2, 1])",
                "ri": "Index(['m', 'g', 'h', 's', 'v', 'q', 'o', 'u', 'p', 'a', 'c', 'e', 'k', 'b',\n       'j', 'z', 'r', 'd', 't', 'i', 'y', 'f', 'n', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    1\ng    7\nh    6\ns    4\nv    7\nq    4\no    3\nu    5\np    4\na    4\nc    7\ne    4\nk    5\nb    3\nj    5\nz    2\nr    2\nd    3\nt    5\ni    3\ny    3\nf    1\nn    2\nl    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1669a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b166340>",
                "self.obj": "0      361\n1      570\n2      909\n3      288\n4      998\n      ... \n995    412\n996    937\n997    546\n998    841\n999    832\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  30,  71, 111, 160, 197, 232, 274, 308, 351, 395, 435, 467,\n       512, 549, 588, 635, 666, 700, 749, 790, 825, 854, 892, 927, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([29, 40, 39, 49, 34, 35, 42, 34, 43, 44, 40, 32, 45, 36, 39, 45, 30,\n       34, 47, 40, 35, 29, 38, 35, 35, 38])",
                "res": "array([29, 40, 39, 49, 34, 35, 42, 34, 43, 44, 40, 32, 45, 36, 39, 45, 30,\n       34, 47, 40, 35, 29, 38, 35, 35, 38])",
                "ri": "Index(['l', 'j', 'm', 'g', 'r', 'w', 'z', 'f', 's', 'x', 'd', 'c', 'h', 't',\n       'a', 'y', 'u', 'b', 'k', 'p', 'n', 'v', 'e', 'o', 'q', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    29\nj    40\nm    39\ng    49\nr    34\nw    35\nz    42\nf    34\ns    43\nx    44\nd    40\nc    32\nh    45\nt    36\na    39\ny    45\nu    30\nb    34\nk    47\np    40\nn    35\nv    29\ne    38\no    35\nq    35\ni    38\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1232534c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1232530a0>",
                "self.obj": "0      361\n1      570\n2      909\n3      288\n4      998\n      ... \n995    412\n996    937\n997    546\n998    841\n999    832\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "253",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 253",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 253",
                "res": "array of shape 253",
                "ri": "array of shape 253",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-08-24    4\nj    2015-08-30    3\nm    2015-08-28    2\ng    2015-08-31    7\nr    2015-08-28    6\n                  ..\nb    2015-08-23    2\nd    2015-08-26    1\nv    2015-08-31    1\nk    2015-08-26    1\nz    2015-08-25    1\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b22e250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b22efd0>",
                "self.obj": "0      361.0\n1      570.0\n2      909.0\n3      288.0\n4      998.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    841.0\n999    832.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      3.610000e+02\n1      5.700000e+02\n2      9.090000e+02\n3      2.880000e+02\n4      9.980000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    8.410000e+02\n999    8.320000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  86, 124, 167, 203, 236, 276, 307, 348, 390, 426, 457, 500,\n       539, 574, 617, 648, 681, 730, 767, 802, 828, 865, 899, 933, 964])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([50, 23, 33, 37, 28, 30, 36, 27, 37, 38, 32, 27, 35, 35, 32, 31, 27,\n       32, 39, 32, 30, 22, 29, 28, 27, 29, 30])",
                "res": "array([23, 33, 37, 28, 30, 36, 27, 37, 38, 32, 27, 35, 35, 32, 31, 27, 32,\n       39, 32, 30, 22, 29, 28, 27, 29, 30])",
                "ri": "Index(['l', 'm', 'g', 'r', 'w', 'z', 'f', 's', 'x', 'd', 'c', 'h', 'j', 'a',\n       'y', 'u', 'b', 'k', 'p', 'n', 'v', 'e', 'o', 'q', 't', 'i'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    23\nm    33\ng    37\nr    28\nw    30\nz    36\nf    27\ns    37\nx    38\nd    32\nc    27\nh    35\nj    35\na    32\ny    31\nu    27\nb    32\nk    39\np    32\nn    30\nv    22\ne    29\no    28\nq    27\nt    29\ni    30\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11aff1b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11aff1970>",
                "self.obj": "0       749\n1         1\n2       952\n3        76\n4       645\n       ... \n9995    433\n9996    929\n9997    477\n9998    680\n9999    506\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  1,   1,   2, ..., 994, 997, 997])",
                "sorter": "array([4875, 6484,  578, ..., 4901, 7312, 8083])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  358,  739, 1132, 1502, 1882, 2272, 2648, 3085, 3489, 3868,\n       4191, 4594, 5012, 5381, 5760, 6129, 6505, 6888, 7260, 7595, 7992,\n       8405, 8830, 9214, 9603])",
                "inc": "array([1, 0, 1, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([315, 320, 313, 316, 318, 320, 318, 354, 332, 313, 283, 332, 346,\n       303, 314, 306, 303, 326, 313, 292, 323, 345, 349, 306, 322, 335])",
                "res": "array([315, 320, 313, 316, 318, 320, 318, 354, 332, 313, 283, 332, 346,\n       303, 314, 306, 303, 326, 313, 292, 323, 345, 349, 306, 322, 335])",
                "ri": "Index(['f', 'c', 'n', 'x', 'w', 'p', 'm', 't', 'z', 'v', 'u', 'i', 'l', 'k',\n       'r', 'g', 'q', 'j', 'e', 'b', 's', 'h', 'o', 'd', 'a', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nf    315\nc    320\nn    313\nx    316\nw    318\np    320\nm    318\nt    354\nz    332\nv    313\nu    283\ni    332\nl    346\nk    303\nr    314\ng    306\nq    303\nj    326\ne    313\nb    292\ns    323\nh    345\no    349\nd    306\na    322\ny    335\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b066070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b066760>",
                "self.obj": "0       749\n1         1\n2       952\n3        76\n4       645\n       ... \n9995    433\n9996    929\n9997    477\n9998    680\n9999    506\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  6,  33,  49, ..., 899, 935, 953])",
                "sorter": "array([3167, 8242, 6939, ..., 8616, 4446, 8445])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nf    2015-08-27    42\nc    2015-08-23    39\nn    2015-08-24    42\nx    2015-08-27    38\nw    2015-08-30    45\n                   ..\nr    2015-09-01    40\nj    2015-08-27    33\np    2015-08-27    35\n     2015-08-24    23\nu    2015-08-29    21\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11aff1f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11aff1970>",
                "self.obj": "0       749.0\n1         1.0\n2       952.0\n3        76.0\n4       645.0\n        ...  \n9995    433.0\n9996    929.0\n9997    477.0\n9998    680.0\n9999    506.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.92000000e+02,  9.94000000e+02,  9.97000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 5088, 4901, 7312])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  926, 1296, 1646, 2006, 2370, 2718, 3135, 3520, 3871, 4173,\n       4550, 4935, 5285, 5645, 5988, 6341, 6707, 7065, 7383, 7751, 8095,\n       8492, 8897, 9259, 9627])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([402, 260, 263, 261, 263, 260, 266, 293, 276, 265, 238, 275, 286,\n       254, 259, 252, 259, 268, 263, 234, 259, 249, 289, 297, 252, 272,\n       274])",
                "res": "array([260, 263, 261, 263, 260, 266, 293, 276, 265, 238, 275, 286, 254,\n       259, 252, 259, 268, 263, 234, 259, 249, 289, 297, 252, 272, 274])",
                "ri": "Index(['f', 'n', 'x', 'w', 'p', 'm', 't', 'z', 'v', 'u', 'i', 'l', 'k', 'r',\n       'g', 'q', 'j', 'e', 'b', 's', 'c', 'h', 'o', 'd', 'a', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nf    260\nn    263\nx    261\nw    263\np    260\nm    266\nt    293\nz    276\nv    265\nu    238\ni    275\nl    286\nk    254\nr    259\ng    252\nq    259\nj    268\ne    263\nb    234\ns    259\nc    249\nh    289\no    297\nd    252\na    272\ny    274\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b12d970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b12d1f0>",
                "self.obj": "0        514\n1        687\n2        136\n3        167\n4        943\n        ... \n99995    101\n99996    847\n99997    461\n99998    340\n99999    957\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([16034, 46880, 53416, ..., 48875, 88830, 96569])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3900,  7783, 11626, 15514, 19400, 23269, 27077, 30846,\n       34699, 38619, 42433, 46201, 50109, 53952, 57929, 61751, 65663,\n       69510, 73447, 77274, 80985, 84726, 88466, 92286, 96066])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([981, 977, 978, 979, 984, 975, 984, 977, 971, 975, 980, 967, 983,\n       988, 974, 975, 976, 979, 983, 981, 974, 981, 982, 972, 980, 978])",
                "res": "array([981, 977, 978, 979, 984, 975, 984, 977, 971, 975, 980, 967, 983,\n       988, 974, 975, 976, 979, 983, 981, 974, 981, 982, 972, 980, 978])",
                "ri": "Index(['u', 'l', 'o', 'p', 'j', 'a', 's', 'v', 'h', 'e', 'i', 'f', 'd', 'y',\n       'r', 'k', 'b', 'w', 'c', 'z', 'n', 'm', 't', 'x', 'g', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    981\nl    977\no    978\np    979\nj    984\na    975\ns    984\nv    977\nh    971\ne    975\ni    980\nf    967\nd    983\ny    988\nr    974\nk    975\nb    976\nw    979\nc    983\nz    981\nn    974\nm    981\nt    982\nx    972\ng    980\nq    978\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b260ac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b260310>",
                "self.obj": "0        514\n1        687\n2        136\n3        167\n4        943\n        ... \n99995    101\n99996    847\n99997    461\n99998    340\n99999    957\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  4,   8,  12, ..., 994, 996, 997])",
                "sorter": "array([86384, 94816, 22581, ..., 91804, 12186, 18001])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-09-01    319\nl    2015-08-30    321\no    2015-08-30    302\np    2015-08-26    331\nj    2015-08-31    315\n                  ... \nc    2015-08-28    307\nk    2015-08-29    331\nm    2015-08-30    307\nq    2015-08-29    320\nc    2015-08-23    351\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b16b760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b16bbe0>",
                "self.obj": "0        514.0\n1        687.0\n2        136.0\n3        167.0\n4        943.0\n         ...  \n99995    101.0\n99996    847.0\n99997    461.0\n99998    340.0\n99999    957.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 42418, 88830, 96569])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9560, 13165, 16845, 20521, 24183, 27760, 31305, 34917,\n       38618, 42221, 45765, 49430, 53102, 56698, 60434, 64020, 67720,\n       71330, 75047, 78648, 82122, 85650, 89172, 92755, 96301])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([992, 946, 939, 946, 963, 942, 962, 955, 956, 952, 956, 943, 952,\n       963, 964, 954, 956, 954, 949, 962, 949, 949, 958, 963, 941, 947,\n       952])",
                "res": "array([946, 939, 946, 963, 942, 962, 955, 956, 952, 956, 943, 952, 963,\n       964, 954, 956, 954, 949, 962, 949, 949, 958, 963, 941, 947, 952])",
                "ri": "Index(['u', 'o', 'p', 'j', 'a', 's', 'v', 'h', 'e', 'i', 'f', 'l', 'd', 'y',\n       'r', 'k', 'b', 'w', 'c', 'z', 'n', 'm', 't', 'x', 'g', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    946\no    939\np    946\nj    963\na    942\ns    962\nv    955\nh    956\ne    952\ni    956\nf    943\nl    952\nd    963\ny    964\nr    954\nk    956\nb    954\nw    949\nc    962\nz    949\nn    949\nm    958\nt    963\nx    941\ng    947\nq    952\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1234d3b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1234d3eb0>",
                "self.obj": "0     7\n1     4\n2     4\n3     5\n4     7\n     ..\n95    5\n96    4\n97    4\n98    5\n99    6\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,\n        3,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,\n        7,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12,\n       13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15,\n       15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19,\n       19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22])",
                "_": "23",
                "val": "array([5, 6, 6, 8, 8, 0, 1, 3, 6, 7, 1, 2, 4, 6, 7, 7, 0, 4, 0, 4, 6, 3,\n       8, 9, 2, 2, 8, 8, 9, 1, 2, 3, 4, 7, 9, 4, 6, 0, 7, 9, 4, 6, 7, 7,\n       9, 0, 3, 5, 7, 1, 7, 1, 1, 2, 6, 3, 5, 6, 7, 8, 9, 3, 3, 4, 5, 7,\n       7, 9, 9, 2, 2, 6, 9, 2, 3, 5, 5, 2, 4, 6, 9, 2, 5, 5, 6, 7, 0, 4,\n       6, 7, 8, 3, 3, 6, 7, 8, 1, 3, 3, 8])",
                "sorter": "array([88, 59, 94, 53, 54, 57, 62, 40, 49, 90, 39, 11,  1, 42,  0, 65,  7,\n       79, 60,  2, 69, 93, 12, 84, 20, 43, 17, 86, 73, 56,  8, 48, 47,  9,\n       74, 96, 35, 38, 14, 13, 77, 75, 37, 44, 66, 22, 27, 31, 76, 34, 82,\n       25, 45, 68, 78, 80, 95, 19, 83, 71, 28,  5, 15, 72, 50, 61, 91, 21,\n       32, 46, 85, 41, 26, 33, 52, 55, 81, 63, 97, 99, 51, 67,  3, 98, 18,\n        6, 23, 92, 89, 24, 29, 16, 64, 10,  4, 70, 58, 36, 87, 30])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  5, 10, 16, 18, 21, 24, 29, 35, 37, 40, 45, 49, 51, 55, 61, 69,\n       73, 77, 81, 86, 91, 96])",
                "inc": "array([1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 5, 5, 2, 3, 3, 3, 6, 2, 3, 4, 4, 2, 3, 6, 5, 3, 3, 4, 4, 5, 4,\n       3])",
                "res": "array([3, 5, 5, 2, 3, 3, 3, 6, 2, 3, 4, 4, 2, 3, 6, 5, 3, 3, 4, 4, 5, 4,\n       3])",
                "ri": "Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'q', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nd    5\ne    2\nf    3\ng    3\nh    3\ni    6\nj    2\nk    3\nl    4\nm    4\nn    2\no    3\nq    6\ns    5\nt    3\nu    3\nv    4\nw    4\nx    5\ny    4\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1234d3190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1234d3400>",
                "self.obj": "0     7\n1     4\n2     4\n3     5\n4     7\n     ..\n95    5\n96    4\n97    4\n98    5\n99    6\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  4,  5,  5,  6,  7,  8,  8,  9, 10, 11, 12,\n       13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n       30, 31, 32, 33, 34, 34, 35, 35, 36, 36, 37, 38, 39, 40, 41, 42, 42,\n       43, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53, 53, 54, 55, 55,\n       56, 57, 58, 58, 59, 60, 61, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69,\n       70, 71, 71, 72, 73, 74, 75, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "83",
                "val": "array([6, 6, 8, 8, 5, 0, 7, 1, 3, 6, 7, 4, 7, 1, 6, 2, 4, 0, 6, 4, 0, 3,\n       9, 8, 8, 2, 8, 2, 9, 7, 9, 2, 1, 4, 3, 6, 4, 0, 7, 9, 4, 7, 7, 9,\n       6, 3, 0, 7, 5, 1, 7, 1, 6, 2, 1, 9, 6, 7, 8, 5, 3, 9, 7, 3, 7, 5,\n       3, 9, 4, 2, 2, 9, 6, 2, 3, 5, 5, 6, 2, 9, 4, 7, 2, 6, 5, 5, 4, 8,\n       6, 7, 0, 3, 3, 8, 7, 6, 3, 3, 8, 1])",
                "sorter": "array([94, 59, 53, 54, 88, 57, 90, 62, 40, 49,  0,  1, 65, 39, 42, 11, 79,\n        7, 69,  2, 60, 93, 84, 12, 86, 43, 17, 20, 73,  9, 74,  8, 56, 47,\n       48, 35, 96, 38, 14, 13, 77, 44, 37, 66, 75, 27, 22, 76, 31, 34, 82,\n       45, 78, 68, 25, 28, 19, 83, 71, 95, 80, 21, 61, 15, 91, 50,  5, 32,\n       72, 85, 46, 26, 41, 33, 52, 81, 55, 99, 63, 51, 97,  6, 67, 18,  3,\n       98, 92, 29, 89, 24, 23, 16, 64, 70,  4, 10, 36, 87, 30, 58])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  4,  5,  7,  9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\n       38, 40, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 58, 59, 60,\n       61, 62, 63, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 78, 80, 81, 82,\n       83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 83",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-27    1\n     2015-08-28    1\nb    2015-08-24    2\n                  ..\ny    2015-08-27    1\nz    2015-08-27    1\n     2015-08-28    1\n     2015-08-29    1\n     2015-08-30    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b455d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b455310>",
                "self.obj": "0     7.0\n1     4.0\n2     4.0\n3     5.0\n4     7.0\n     ... \n95    5.0\n96    4.0\n97    4.0\n98    5.0\n99    6.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  5,  6,  6,  6,  6,  7,  7,\n        7,  7,  7,  7,  8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11,\n       12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15,\n       15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19,\n       19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22])",
                "_": "23",
                "val": "array of shape 100",
                "sorter": "array([52,  1, 18, 35, 69, 86, 88, 59, 94, 53, 54, 57, 62, 40, 49, 90, 65,\n       39, 11, 42,  0,  7, 79, 60,  2, 84, 93, 12, 20, 43, 17, 73,  8,  9,\n       47, 56, 48, 74, 96, 38, 14, 13, 66, 77, 75, 37, 44, 27, 22, 31, 76,\n       34, 82, 45, 25, 68, 78, 28, 83, 80, 95, 19, 71,  5, 15, 72, 50, 61,\n       91, 21, 32, 26, 46, 85, 41, 33, 55, 81, 63, 97, 99, 51, 67,  3, 98,\n        6, 23, 92, 89, 24, 29, 64, 16, 10,  4, 70, 58, 36, 87, 30])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 11, 16, 21, 23, 25, 28, 32, 38, 39, 42, 47, 51, 53, 57, 63, 71,\n       75, 78, 82, 86, 91, 96])",
                "inc": "array([1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 3, 5, 5, 2, 2, 3, 3, 4, 1, 3, 4, 4, 2, 4, 5, 5, 2, 2, 4, 3, 5,\n       5, 3])",
                "res": "array([3, 5, 5, 2, 2, 3, 3, 4, 1, 3, 4, 4, 2, 4, 5, 5, 2, 2, 4, 3, 5, 5,\n       3])",
                "ri": "Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'q', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nd    5\ne    2\nf    2\ng    3\nh    3\ni    4\nj    1\nk    3\nl    4\nm    4\nn    2\no    4\nq    5\ns    5\nt    2\nu    2\nv    4\nw    3\nx    5\ny    5\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1663a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b166ca0>",
                "self.obj": "0      5\n1      7\n2      5\n3      6\n4      0\n      ..\n995    8\n996    5\n997    6\n998    8\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  24,  58, 110, 147, 193, 229, 275, 311, 331, 364, 406, 449,\n       494, 536, 584, 619, 664, 699, 730, 761, 795, 833, 884, 909, 952])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10,\n        9, 10,  9, 10,  9, 10,  9, 10, 10])",
                "res": "array([ 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10,\n        9, 10,  9, 10,  9, 10,  9, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     9\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn     9\no    10\np    10\nq    10\nr     9\ns    10\nt     9\nu    10\nv     9\nw    10\nx     9\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b166ca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b166df0>",
                "self.obj": "0      5\n1      7\n2      5\n3      6\n4      0\n      ..\n995    8\n996    5\n997    6\n998    8\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "255",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 255",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 255",
                "ri": "array of shape 255",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    3\n     2015-08-26    2\n     2015-08-27    2\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    7\n     2015-09-01    4\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1241a86d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1241a8940>",
                "self.obj": "0      5.0\n1      7.0\n2      5.0\n3      6.0\n4      0.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    8.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      5.000000e+00\n1      7.000000e+00\n2      5.000000e+00\n3      6.000000e+00\n4      0.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    8.000000e+00\n999    9.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  80, 112, 157, 194, 236, 269, 314, 346, 366, 395, 435, 477,\n       519, 560, 607, 642, 685, 718, 746, 774, 806, 843, 890, 914, 954])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11,  8, 10, 11, 11, 11, 11, 11, 10, 10, 10, 11, 11, 11, 10, 10, 11,\n       11, 10, 10, 10, 10,  9, 10, 10, 11, 11])",
                "res": "array([ 8, 10, 11, 11, 11, 11, 11, 10, 10, 10, 11, 11, 11, 10, 10, 11, 11,\n       10, 10, 10, 10,  9, 10, 10, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     8\nb    10\nc    11\nd    11\ne    11\nf    11\ng    11\nh    10\ni    10\nj    10\nk    11\nl    11\nm    11\nn    10\no    10\np    11\nq    11\nr    10\ns    10\nt    10\nu    10\nv     9\nw    10\nx    10\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12417ca60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12417c940>",
                "self.obj": "0       3\n1       6\n2       7\n3       7\n4       1\n       ..\n9995    2\n9996    7\n9997    1\n9998    9\n9999    0\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 132,  383,  443, ..., 9686, 9961, 9971])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  388,  745, 1117, 1464, 1887, 2282, 2675, 3054, 3452, 3848,\n       4257, 4654, 5003, 5392, 5789, 6162, 6557, 6935, 7321, 7692, 8074,\n       8491, 8878, 9266, 9641])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12417c460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12417c790>",
                "self.obj": "0       3\n1       6\n2       7\n3       7\n4       1\n       ..\n9995    2\n9996    7\n9997    1\n9998    9\n9999    0\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1183, 2811, 5654, ..., 6809, 9449, 9961])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24     9\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227a00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227040>",
                "self.obj": "0       3.0\n1       6.0\n2       7.0\n3       7.0\n4       1.0\n       ... \n9995    2.0\n9996    7.0\n9997    1.0\n9998    9.0\n9999    0.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 9686, 9961, 9971])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  953, 1289, 1640, 1971, 2367, 2735, 3108, 3467, 3839, 4205,\n       4593, 4968, 5303, 5668, 6039, 6390, 6761, 7123, 7479, 7823, 8181,\n       8577, 8946, 9310, 9661])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3b4790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3b4c70>",
                "self.obj": "0        0\n1        7\n2        2\n3        7\n4        4\n        ..\n99995    6\n99996    8\n99997    5\n99998    4\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  269,   408,   603, ..., 99777, 99812, 99881])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3845,  7716, 11548, 15343, 19272, 23117, 26971, 30832,\n       34725, 38467, 42378, 46140, 50018, 53796, 57602, 61425, 65303,\n       69284, 73147, 77094, 80879, 84716, 88551, 92405, 96259])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b22e0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b22e940>",
                "self.obj": "0        0\n1        7\n2        2\n3        7\n4        4\n        ..\n99995    6\n99996    8\n99997    5\n99998    4\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 9498, 10541, 10729, ..., 92386, 92484, 97301])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b161700>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b161f70>",
                "self.obj": "0        0.0\n1        7.0\n2        2.0\n3        7.0\n4        4.0\n        ... \n99995    6.0\n99996    8.0\n99997    5.0\n99998    4.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 99718, 99812, 99881])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9517, 13162, 16778, 20304, 23991, 27604, 31227, 34873,\n       38547, 42059, 45759, 49276, 52943, 56503, 60057, 63653, 67302,\n       71070, 74696, 78430, 82015, 85627, 89226, 92857, 96480])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3c76a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3c7730>",
                "self.obj": "0     38\n1      7\n2     75\n3      7\n4      3\n      ..\n95    82\n96    18\n97    90\n98    54\n99    95\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  4,\n        5,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  8,  8,  9,  9,  9,  9,\n       10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13,\n       13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17,\n       17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21,\n       22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25])",
                "_": "26",
                "val": "array([37, 67, 95,  3, 15, 38, 66, 84, 18, 79, 29, 41, 20, 48, 55, 59, 69,\n       20, 47, 64, 70, 79, 92, 19, 49, 68, 48, 75, 75, 98, 16, 33, 65, 85,\n        7,  9, 30, 45, 52, 59, 43, 50, 52, 74, 88, 90, 13, 18, 60, 44, 45,\n       49, 87, 27, 78, 90,  7, 40, 57, 66, 67,  4, 16, 20, 33, 54, 82, 29,\n       44, 75, 77, 86,  2, 25, 40, 30, 31, 42, 14, 18, 36, 80, 88, 21, 61,\n        7, 26, 59, 74, 94, 24,  8, 20, 47, 49, 92, 49, 54, 75, 87])",
                "sorter": "array([16, 93, 99,  4, 84,  0, 14, 55, 41, 92, 31,  6, 75, 77, 46, 54, 78,\n       85, 45, 22, 64, 35, 87, 30, 50, 65, 34, 58, 17, 38, 13, 48, 52, 20,\n        1, 21, 70, 44, 10, 79, 82, 53, 76, 49, 90, 97, 25, 96, 61, 43, 81,\n       23, 18, 68, 39, 29, 33, 60,  5, 94, 27,  9, 26, 67, 51, 98, 95, 37,\n        7, 47, 74, 62, 19, 73, 57, 66, 89, 11, 69, 12, 91, 72, 86, 42, 71,\n        3, 32, 36, 88, 83, 56, 63, 15, 40,  8, 24, 59, 80,  2, 28])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  3,  8, 10, 12, 17, 23, 26, 28, 30, 34, 40, 46, 49, 53, 56, 61,\n       67, 72, 75, 78, 83, 85, 90, 91, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 5, 2, 2, 5, 6, 3, 2, 2, 4, 6, 6, 3, 4, 3, 5, 6, 5, 3, 3, 5, 2,\n       5, 1, 5, 4])",
                "res": "array([3, 5, 2, 2, 5, 6, 3, 2, 2, 4, 6, 6, 3, 4, 3, 5, 6, 5, 3, 3, 5, 2,\n       5, 1, 5, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nc    2\nd    2\ne    5\nf    6\ng    3\nh    2\ni    2\nj    4\nk    6\nl    6\nm    3\nn    4\no    3\np    5\nq    6\nr    5\ns    3\nt    3\nu    5\nv    2\nw    5\nx    1\ny    5\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1bd490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1bd1c0>",
                "self.obj": "0     38\n1      7\n2     75\n3      7\n4      3\n      ..\n95    82\n96    18\n97    90\n98    54\n99    95\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  3,  4,  5,  5,  6,  7,  8,  8,  9, 10, 11, 12, 12,\n       13, 14, 15, 16, 16, 17, 18, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 29, 29, 30, 31, 32, 33, 33, 33, 34, 35, 36, 37, 38, 39, 40,\n       41, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 53, 54,\n       55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 81, 82, 83, 83, 84])",
                "_": "85",
                "val": "array([37, 67, 95, 15, 38,  3, 66, 84, 18, 79, 29, 41, 69, 55, 59, 20, 48,\n       47, 92, 64, 70, 79, 20, 19, 68, 49, 75, 48, 98, 75, 16, 65, 85, 33,\n        7, 30, 52, 59,  9, 45, 52, 50, 88, 90, 43, 74, 60, 18, 13, 87, 45,\n       44, 49, 78, 90, 27, 57,  7, 40, 67, 66,  4, 33, 82, 20, 16, 54, 44,\n       29, 86, 75, 77, 40,  2, 25, 31, 42, 30, 18, 80, 14, 36, 88, 21, 61,\n       59, 94,  7, 26, 74, 24, 47, 92,  8, 49, 20, 87, 49, 54, 75])",
                "sorter": "array([16, 93, 99, 84,  0,  4, 14, 55, 41, 92, 31,  6, 78, 46, 54, 75, 77,\n       45, 87, 22, 64, 35, 85, 30, 65, 50, 58, 34, 38, 17, 13, 52, 20, 48,\n        1, 70, 10, 79, 21, 44, 76, 53, 90, 97, 82, 49, 61, 96, 25, 18, 81,\n       43, 23, 39, 29, 68,  5, 33, 60, 27, 94,  9, 51, 95, 67, 26, 98,  7,\n       37, 62, 47, 74, 57, 19, 73, 89, 11, 66, 12, 72, 69, 91, 86, 42, 71,\n       36, 83,  3, 32, 88, 56, 40, 24, 63,  8, 15, 28, 59, 80,  2])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  5,  6,  8,  9, 10, 12, 13, 14, 15, 17, 18, 19, 20,\n       22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 41,\n       44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n       63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n       81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1])",
                "ri": "array of shape 85",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-24    2\n     2015-08-29    1\n                  ..\ny    2015-08-31    2\n     2015-09-01    1\nz    2015-08-28    1\n     2015-08-31    2\n     2015-09-01    1\nName: julie, Length: 85, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4e20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4760>",
                "self.obj": "0     38.0\n1      7.0\n2     75.0\n3      7.0\n4      3.0\n      ... \n95    82.0\n96    18.0\n97    90.0\n98    54.0\n99    95.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  3,\n        3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  8,\n        8,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 12, 12,\n       12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16,\n       16, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21,\n       22, 22, 22, 22, 22, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([ 1, 69, 52, 35, 18, 86, 16, 93, 99, 84,  4,  0, 14, 55, 41, 92, 31,\n        6, 46, 75, 77, 54, 78, 45, 64, 85, 22, 87, 65, 30, 50, 34, 58, 17,\n       38, 13, 48, 20, 21, 70, 44, 10, 79, 82, 53, 76, 49, 90, 97, 25, 96,\n       61, 43, 81, 23, 68, 39, 29, 27, 33, 60,  5, 94,  9, 26, 67, 51, 98,\n       95,  7, 47, 37, 74, 62, 19, 73, 57, 66, 89, 11, 12, 91, 72, 42, 71,\n       83,  3, 32, 36, 88, 56,  8, 63, 15, 40, 24, 28, 59, 80,  2])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  9, 14, 16, 18, 23, 28, 31, 33, 35, 38, 43, 49, 52, 55, 58, 63,\n       69, 74, 77, 80, 83, 85, 90, 91, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 5, 2, 2, 5, 3, 3, 2, 2, 3, 5, 6, 3, 3, 3, 5, 5, 4, 3, 3, 3,\n       2, 5, 1, 5, 4])",
                "res": "array([3, 5, 2, 2, 5, 3, 3, 2, 2, 3, 5, 6, 3, 3, 3, 5, 5, 4, 3, 3, 3, 2,\n       5, 1, 5, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    5\nc    2\nd    2\ne    5\nf    3\ng    3\nh    2\ni    2\nj    3\nk    5\nl    6\nm    3\nn    3\no    3\np    5\nq    5\nr    4\ns    3\nt    3\nu    3\nv    2\nw    5\nx    1\ny    5\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1bdfd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1bdc40>",
                "self.obj": "0      20\n1      39\n2      46\n3      66\n4      76\n       ..\n995    23\n996    23\n997    27\n998    70\n999    35\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  48,  88, 130, 168, 204, 235, 286, 326, 357, 401, 444, 476,\n       515, 554, 602, 629, 665, 705, 747, 780, 822, 855, 898, 942, 968])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([44, 29, 31, 33, 32, 26, 42, 31, 25, 31, 34, 26, 32, 34, 36, 26, 29,\n       34, 36, 28, 31, 27, 34, 36, 22, 26])",
                "res": "array([44, 29, 31, 33, 32, 26, 42, 31, 25, 31, 34, 26, 32, 34, 36, 26, 29,\n       34, 36, 28, 31, 27, 34, 36, 22, 26])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    44\nb    29\nc    31\nd    33\ne    32\nf    26\ng    42\nh    31\ni    25\nj    31\nk    34\nl    26\nm    32\nn    34\no    36\np    26\nq    29\nr    34\ns    36\nt    28\nu    31\nv    27\nw    34\nx    36\ny    22\nz    26\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1bdb50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1bdc40>",
                "self.obj": "0      20\n1      39\n2      46\n3      66\n4      76\n       ..\n995    23\n996    23\n997    27\n998    70\n999    35\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "255",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 255",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 255",
                "ri": "array of shape 255",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    6\n     2015-08-24    4\n     2015-08-25    4\n     2015-08-26    4\n     2015-08-27    7\n                  ..\nz    2015-08-28    7\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    2\n     2015-09-01    5\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11afe7040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11afe7250>",
                "self.obj": "0      20.0\n1      39.0\n2      46.0\n3      66.0\n4      76.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    70.0\n999    35.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      2.000000e+01\n1      3.900000e+01\n2      4.600000e+01\n3      6.600000e+01\n4      7.600000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.000000e+01\n999    3.500000e+01\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59, 102, 139, 180, 214, 248, 276, 326, 365, 394, 436, 477, 506,\n       541, 578, 622, 647, 679, 715, 755, 786, 827, 859, 901, 945, 970])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([39, 33, 28, 27, 27, 28, 17, 34, 26, 24, 27, 31, 20, 26, 33, 33, 23,\n       24, 23, 27, 27, 28, 26, 28, 34, 19, 24])",
                "res": "array([33, 28, 27, 27, 28, 17, 34, 26, 24, 27, 31, 20, 26, 33, 33, 23, 24,\n       23, 27, 27, 28, 26, 28, 34, 19, 24])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    33\nb    28\nc    27\nd    27\ne    28\nf    17\ng    34\nh    26\ni    24\nj    27\nk    31\nl    20\nm    26\nn    33\no    33\np    23\nq    24\nr    23\ns    27\nt    27\nu    28\nv    26\nw    28\nx    34\ny    19\nz    24\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12324a700>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12324a100>",
                "self.obj": "0       35\n1       82\n2       79\n3        3\n4       56\n        ..\n9995    85\n9996    70\n9997    19\n9998    12\n9999    52\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([6839, 9380, 9631, ..., 5986, 8082, 9421])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  404,  798, 1225, 1580, 1996, 2378, 2747, 3142, 3538, 3925,\n       4308, 4685, 5059, 5426, 5798, 6223, 6623, 7004, 7376, 7727, 8082,\n       8453, 8805, 9167, 9578])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100,  98,  99,  98, 100,  98,  98,  99,  99,  96, 100,  98, 100,\n        98,  96,  99,  98,  96,  98,  99,  95,  98, 100,  96,  97, 100])",
                "res": "array([100,  98,  99,  98, 100,  98,  98,  99,  99,  96, 100,  98, 100,\n        98,  96,  99,  98,  96,  98,  99,  95,  98, 100,  96,  97, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb     98\nc     99\nd     98\ne    100\nf     98\ng     98\nh     99\ni     99\nj     96\nk    100\nl     98\nm    100\nn     98\no     96\np     99\nq     98\nr     96\ns     98\nt     99\nu     95\nv     98\nw    100\nx     96\ny     97\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3c7550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3c7820>",
                "self.obj": "0       35\n1       82\n2       79\n3        3\n4       56\n        ..\n9995    85\n9996    70\n9997    19\n9998    12\n9999    52\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 1,  4,  8, ..., 97, 98, 99])",
                "sorter": "array([6275,  695, 8615, ...,  875, 1734, 3701])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    27\n     2015-08-24    33\n     2015-08-25    37\n     2015-08-26    38\n     2015-08-27    28\n                   ..\nz    2015-08-28    27\n     2015-08-29    43\n     2015-08-30    41\n     2015-08-31    33\n     2015-09-01    35\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227df0>",
                "self.obj": "0       35.0\n1       82.0\n2       79.0\n3        3.0\n4       56.0\n        ... \n9995    85.0\n9996    70.0\n9997    19.0\n9998    12.0\n9999    52.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 3701, 5986, 9421])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  969, 1339, 1740, 2075, 2461, 2819, 3165, 3528, 3906, 4263,\n       4628, 4985, 5334, 5683, 6039, 6437, 6810, 7168, 7517, 7847, 8174,\n       8525, 8864, 9204, 9601])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 99,  99,  99,  98,  96,  99,  99,  97,  98,  99,  94, 100,  97,\n        98,  96,  93,  98,  96,  94,  93,  94,  93,  97,  99,  96,  94,\n        97])",
                "res": "array([ 99,  99,  98,  96,  99,  99,  97,  98,  99,  94, 100,  97,  98,\n        96,  93,  98,  96,  94,  93,  94,  93,  97,  99,  96,  94,  97])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     99\nb     99\nc     98\nd     96\ne     99\nf     99\ng     97\nh     98\ni     99\nj     94\nk    100\nl     97\nm     98\nn     96\no     93\np     98\nq     96\nr     94\ns     93\nt     94\nu     93\nv     97\nw     99\nx     96\ny     94\nz     97\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b22e640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b22e760>",
                "self.obj": "0        12\n1        35\n2         4\n3        47\n4        73\n         ..\n99995    42\n99996    77\n99997    27\n99998    46\n99999    49\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 5067,  5655, 14811, ..., 93616, 97172, 98125])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3883,  7825, 11537, 15474, 19258, 23098, 26965, 30820,\n       34660, 38552, 42425, 46220, 50123, 54004, 57901, 61772, 65657,\n       69482, 73331, 77220, 81027, 84852, 88723, 92486, 96208])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b22ea00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b22e280>",
                "self.obj": "0        12\n1        35\n2         4\n3        47\n4        73\n         ..\n99995    42\n99996    77\n99997    27\n99998    46\n99999    49\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  1,  1, ..., 99, 99, 99])",
                "sorter": "array([ 5655,     6, 29217, ...,  8971, 51031, 64936])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     98\n     2015-08-24     98\n     2015-08-25     96\n     2015-08-26    100\n     2015-08-27     99\n                  ... \nz    2015-08-28     99\n     2015-08-29     96\n     2015-08-30     96\n     2015-08-31     99\n     2015-09-01     96\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12324af70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12324a640>",
                "self.obj": "0        12.0\n1        35.0\n2         4.0\n3        47.0\n4        73.0\n         ... \n99995    42.0\n99996    77.0\n99997    27.0\n99998    46.0\n99999    49.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 88574, 93616, 97172])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9553, 13279, 16734, 20432, 23988, 27606, 31243, 34856,\n       38474, 42141, 45782, 49357, 53043, 56689, 60351, 64012, 67663,\n       71269, 74892, 78576, 82166, 85753, 89371, 92917, 96419])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3c7100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3c7520>",
                "self.obj": "0      66\n1     433\n2     826\n3     906\n4     252\n     ... \n95    864\n96    726\n97    324\n98    177\n99    647\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,\n        4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,\n        7,  7,  7,  8,  9, 10, 10, 10, 11, 11, 11, 12, 13, 13, 14, 14, 14,\n       14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17,\n       17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21,\n       21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23])",
                "_": "24",
                "val": "array of shape 100",
                "sorter": "array([62, 70, 42, 93, 47, 83,  4, 17, 59, 37, 15,  1, 24, 67, 14, 95, 28,\n       97, 49, 72, 53,  0, 56, 80, 13, 63, 43, 82, 98, 78,  6, 44, 86, 89,\n       51, 65, 73, 27, 60, 23, 29, 66, 21, 19,  8, 94, 79, 54, 39, 64, 57,\n       11, 31,  3,  7, 10, 25, 46, 32, 85, 41, 91, 77, 33,  2, 92, 68,  5,\n       74, 22, 12, 35, 38, 48, 71, 88, 52, 76, 34, 50, 20, 58, 99, 81, 75,\n       18, 26, 16, 61, 69, 40,  9, 96, 45, 90, 84, 36, 87, 55, 30])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  4,  7,  8, 17, 20, 27, 31, 37, 38, 39, 42, 45, 46, 48, 54, 58,\n       66, 70, 74, 78, 83, 89, 95])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 3, 1, 9, 3, 7, 4, 6, 1, 1, 3, 3, 1, 2, 6, 4, 8, 4, 4, 4, 5, 6,\n       6, 5])",
                "res": "array([4, 3, 1, 9, 3, 7, 4, 6, 1, 1, 3, 3, 1, 2, 6, 4, 8, 4, 4, 4, 5, 6,\n       6, 5])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n       'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    3\nc    1\nd    9\ne    3\nf    7\ng    4\nj    6\nk    1\nl    1\nm    3\nn    3\no    1\np    2\nq    6\nr    4\ns    8\nt    4\nu    4\nv    4\nw    5\nx    6\ny    6\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3c71c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3c7fd0>",
                "self.obj": "0      66\n1     433\n2     826\n3     906\n4     252\n     ... \n95    864\n96    726\n97    324\n98    177\n99    647\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9, 10, 10, 11, 12, 13, 13,\n       14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 23, 23, 24, 25, 26, 27,\n       27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40,\n       41, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49, 50, 51, 51, 52, 53, 53,\n       54, 55, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68,\n       69, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "83",
                "val": "array of shape 100",
                "sorter": "array([70, 93, 62, 42, 83,  4, 47, 17, 14, 95, 37, 15, 24,  1, 59, 67, 28,\n       49, 72, 97, 56, 43, 80,  0, 63, 53, 13, 82, 98,  6, 78, 65, 44, 89,\n       51, 86, 73, 27, 60, 23, 66, 29,  8, 21, 19, 94, 54, 79, 11,  3, 64,\n       57, 31, 39,  7, 25, 46, 10, 92, 77,  2, 91, 33, 85, 41, 32,  5, 22,\n       74, 68, 38, 35, 48, 12, 88, 52, 71, 76, 58, 50, 34, 20, 99, 26, 81,\n       16, 61, 18, 75, 45, 96, 69,  9, 90, 40, 36, 30, 84, 55, 87])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 17, 18, 19,\n       20, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 35, 37, 38, 39, 40, 41,\n       42, 43, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62,\n       63, 65, 66, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83,\n       84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 3, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 3, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 83",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-29    1\n     2015-09-01    2\nb    2015-08-23    1\n     2015-08-27    1\n                  ..\nz    2015-08-24    1\n     2015-08-26    1\n     2015-08-27    1\n     2015-08-29    1\n     2015-08-31    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1bd550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1bd610>",
                "self.obj": "0      66.0\n1     433.0\n2     826.0\n3     906.0\n4     252.0\n      ...  \n95    864.0\n96    726.0\n97    324.0\n98    177.0\n99    647.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  3,  3,  3,\n        3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  7,  7,  7,  7,  7,  8,  9, 10, 10, 10, 11, 11, 11, 12, 13,\n       13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,\n       16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23])",
                "_": "24",
                "val": "array of shape 100",
                "sorter": "array([69, 18, 86,  1, 35, 52, 62, 70, 42, 93, 47, 83,  4, 17, 28, 59, 37,\n       15, 24, 67, 14, 95, 97, 49, 72, 53,  0, 56, 80, 13, 63, 43, 82, 98,\n       78,  6, 65, 44, 89, 51, 73, 27, 60, 66, 23, 29,  8, 21, 19, 94, 79,\n       54, 64, 39, 57, 11, 31,  3,  7, 46, 10, 25, 85, 32, 41, 91, 77, 33,\n        2, 92, 68,  5, 74, 22, 12, 38, 48, 71, 88, 76, 34, 50, 20, 58, 99,\n       26, 81, 75, 16, 61,  9, 45, 40, 96, 90, 84, 36, 87, 55, 30])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 10, 13, 14, 22, 25, 32, 36, 41, 42, 43, 46, 49, 50, 52, 58, 62,\n       70, 74, 77, 80, 85, 90, 95])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 4, 2, 1, 8, 3, 7, 4, 5, 1, 1, 3, 3, 1, 2, 6, 3, 8, 4, 3, 3, 5,\n       5, 4, 5])",
                "res": "array([4, 2, 1, 8, 3, 7, 4, 5, 1, 1, 3, 3, 1, 2, 6, 3, 8, 4, 3, 3, 5, 5,\n       4, 5])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\n       'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    2\nc    1\nd    8\ne    3\nf    7\ng    4\nj    5\nk    1\nl    1\nm    3\nn    3\no    1\np    2\nq    6\nr    3\ns    8\nt    4\nu    3\nv    3\nw    5\nx    5\ny    4\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1234c8370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1234c8f10>",
                "self.obj": "0      777\n1      236\n2      221\n3      819\n4      240\n      ... \n995    513\n996    191\n997    354\n998     38\n999    828\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  38,  72,  98, 136, 168, 212, 252, 293, 322, 353, 389, 436,\n       475, 510, 549, 589, 637, 678, 720, 756, 803, 838, 875, 913, 958])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([36, 34, 25, 38, 30, 44, 40, 40, 29, 30, 35, 46, 39, 35, 39, 40, 46,\n       40, 42, 34, 44, 35, 37, 38, 44, 42])",
                "res": "array([36, 34, 25, 38, 30, 44, 40, 40, 29, 30, 35, 46, 39, 35, 39, 40, 46,\n       40, 42, 34, 44, 35, 37, 38, 44, 42])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    36\nb    34\nc    25\nd    38\ne    30\nf    44\ng    40\nh    40\ni    29\nj    30\nk    35\nl    46\nm    39\nn    35\no    39\np    40\nq    46\nr    40\ns    42\nt    34\nu    44\nv    35\nw    37\nx    38\ny    44\nz    42\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b22e1f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b22ec10>",
                "self.obj": "0      777\n1      236\n2      221\n3      819\n4      240\n      ... \n995    513\n996    191\n997    354\n998     38\n999    828\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "249",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 249",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 249",
                "res": "array of shape 249",
                "ri": "array of shape 249",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    5\n     2015-08-27    2\n                  ..\nz    2015-08-28    8\n     2015-08-29    4\n     2015-08-30    4\n     2015-08-31    4\n     2015-09-01    5\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3e85e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3e8c10>",
                "self.obj": "0      777.0\n1      236.0\n2      221.0\n3      819.0\n4      240.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     38.0\n999    828.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      7.770000e+02\n1      2.360000e+02\n2      2.210000e+02\n3      8.190000e+02\n4      2.400000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    3.800000e+01\n999    8.280000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  94, 126, 150, 184, 213, 254, 292, 333, 359, 388, 424, 467,\n       502, 535, 573, 610, 657, 694, 735, 769, 814, 847, 884, 920, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([50, 28, 27, 21, 28, 24, 37, 35, 34, 24, 25, 28, 37, 33, 26, 33, 32,\n       38, 30, 41, 29, 39, 27, 35, 29, 33, 30])",
                "res": "array([28, 27, 21, 28, 24, 37, 35, 34, 24, 25, 28, 37, 33, 26, 33, 32, 38,\n       30, 41, 29, 39, 27, 35, 29, 33, 30])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    28\nb    27\nc    21\nd    28\ne    24\nf    37\ng    35\nh    34\ni    24\nj    25\nk    28\nl    37\nm    33\nn    26\no    33\np    32\nq    38\nr    30\ns    41\nt    29\nu    39\nv    27\nw    35\nx    29\ny    33\nz    30\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3ee910>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3ee0d0>",
                "self.obj": "0        42\n1       667\n2       446\n3       546\n4       905\n       ... \n9995    743\n9996    664\n9997    683\n9998    910\n9999    899\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  1,   5,   6, ..., 994, 997, 998])",
                "sorter": "array([7359, 3511, 1009, ...,  812, 4141, 3333])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  369,  737, 1105, 1487, 1885, 2304, 2694, 3064, 3443, 3814,\n       4187, 4574, 4958, 5332, 5719, 6134, 6518, 6944, 7321, 7711, 8080,\n       8484, 8883, 9244, 9621])",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([309, 310, 301, 324, 334, 337, 323, 320, 312, 306, 313, 313, 300,\n       311, 330, 339, 323, 340, 314, 309, 298, 333, 341, 309, 305, 310])",
                "res": "array([309, 310, 301, 324, 334, 337, 323, 320, 312, 306, 313, 313, 300,\n       311, 330, 339, 323, 340, 314, 309, 298, 333, 341, 309, 305, 310])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    309\nb    310\nc    301\nd    324\ne    334\nf    337\ng    323\nh    320\ni    312\nj    306\nk    313\nl    313\nm    300\nn    311\no    330\np    339\nq    323\nr    340\ns    314\nt    309\nu    298\nv    333\nw    341\nx    309\ny    305\nz    310\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1cfaf0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1cf2b0>",
                "self.obj": "0        42\n1       667\n2       446\n3       546\n4       905\n       ... \n9995    743\n9996    664\n9997    683\n9998    910\n9999    899\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 34, 127, 147, ..., 871, 888, 994])",
                "sorter": "array([ 156, 8099, 9796, ..., 1536, 4692,  812])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    38\n     2015-08-24    34\n     2015-08-25    32\n     2015-08-26    37\n     2015-08-27    35\n                   ..\nz    2015-08-28    34\n     2015-08-29    28\n     2015-08-30    29\n     2015-08-31    39\n     2015-09-01    41\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b166160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b166b50>",
                "self.obj": "0        42.0\n1       667.0\n2       446.0\n3       546.0\n4       905.0\n        ...  \n9995    743.0\n9996    664.0\n9997    683.0\n9998    910.0\n9999    899.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.92000000e+02,  9.94000000e+02,  9.97000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 8777,  812, 4141])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  929, 1277, 1626, 1989, 2362, 2753, 3119, 3470, 3831, 4172,\n       4530, 4896, 5258, 5615, 5983, 6365, 6725, 7125, 7477, 7848, 8192,\n       8570, 8947, 9282, 9645])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([395, 251, 260, 257, 271, 267, 266, 262, 271, 276, 244, 263, 261,\n       263, 261, 277, 275, 265, 288, 257, 255, 245, 281, 272, 252, 257,\n       253])",
                "res": "array([251, 260, 257, 271, 267, 266, 262, 271, 276, 244, 263, 261, 263,\n       261, 277, 275, 265, 288, 257, 255, 245, 281, 272, 252, 257, 253])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    251\nb    260\nc    257\nd    271\ne    267\nf    266\ng    262\nh    271\ni    276\nj    244\nk    263\nl    261\nm    263\nn    261\no    277\np    275\nq    265\nr    288\ns    257\nt    255\nu    245\nv    281\nw    272\nx    252\ny    257\nz    253\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b124640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1241c0>",
                "self.obj": "0        126\n1        676\n2        472\n3        408\n4        487\n        ... \n99995    341\n99996    314\n99997    458\n99998    976\n99999     95\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   1,   1, ..., 999, 999, 999])",
                "sorter": "array([33352,  5398, 17905, ...,  2990,  4514, 26050])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3957,  7817, 11523, 15373, 19252, 23108, 27042, 30911,\n       34686, 38605, 42439, 46237, 50025, 53836, 57748, 61595, 65334,\n       69125, 73068, 76893, 80665, 84530, 88476, 92408, 96229])",
                "inc": "array([1, 1, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([984, 988, 974, 978, 979, 977, 986, 978, 976, 976, 975, 984, 981,\n       974, 983, 975, 974, 975, 984, 979, 966, 983, 979, 983, 979, 975])",
                "res": "array([984, 988, 974, 978, 979, 977, 986, 978, 976, 976, 975, 984, 981,\n       974, 983, 975, 974, 975, 984, 979, 966, 983, 979, 983, 979, 975])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    984\nb    988\nc    974\nd    978\ne    979\nf    977\ng    986\nh    978\ni    976\nj    976\nk    975\nl    984\nm    981\nn    974\no    983\np    975\nq    974\nr    975\ns    984\nt    979\nu    966\nv    983\nw    979\nx    983\ny    979\nz    975\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4e80>",
                "self.obj": "0        126\n1        676\n2        472\n3        408\n4        487\n        ... \n99995    341\n99996    314\n99997    458\n99998    976\n99999     95\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  5,   7,  12, ..., 995, 996, 998])",
                "sorter": "array([16376, 24178, 39291, ..., 25711, 83544, 91569])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    330\n     2015-08-24    340\n     2015-08-25    320\n     2015-08-26    323\n     2015-08-27    352\n                  ... \nz    2015-08-28    321\n     2015-08-29    323\n     2015-08-30    303\n     2015-08-31    297\n     2015-09-01    324\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x124173b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124173b80>",
                "self.obj": "0        126.0\n1        676.0\n2        472.0\n3        408.0\n4        487.0\n         ...  \n99995    341.0\n99996    314.0\n99997    458.0\n99998    976.0\n99999     95.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.98000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 63289,  4514, 26050])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9622, 13233, 16745, 20353, 24007, 27639, 31341, 34975,\n       38525, 42188, 45817, 49398, 52958, 56548, 60220, 63831, 67353,\n       70926, 74615, 78246, 81795, 85446, 89163, 92844, 96459])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([996, 953, 960, 944, 954, 956, 956, 955, 951, 946, 957, 953, 954,\n       945, 951, 962, 952, 951, 951, 965, 951, 933, 961, 956, 959, 955,\n       956])",
                "res": "array([953, 960, 944, 954, 956, 956, 955, 951, 946, 957, 953, 954, 945,\n       951, 962, 952, 951, 951, 965, 951, 933, 961, 956, 959, 955, 956])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    953\nb    960\nc    944\nd    954\ne    956\nf    956\ng    955\nh    951\ni    946\nj    957\nk    953\nl    954\nm    945\nn    951\no    962\np    952\nq    951\nr    951\ns    965\nt    951\nu    933\nv    961\nw    956\nx    959\ny    955\nz    956\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1241a87f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1241a8df0>",
                "self.obj": "0     5\n1     6\n2     7\n3     5\n4     7\n     ..\n95    0\n96    2\n97    8\n98    1\n99    3\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n        2,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  5,  6,  6,  6,  6,  7,\n        7,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11,\n       11, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 16,\n       16, 16, 16, 16, 16, 17, 17, 17, 18, 18, 19, 19, 20, 20, 20, 20, 20,\n       20, 21, 21, 22, 22, 22, 22, 23, 23, 24, 24, 24, 25, 25, 25])",
                "_": "26",
                "val": "array([1, 3, 3, 4, 5, 6, 5, 6, 7, 8, 1, 2, 4, 4, 5, 7, 7, 9, 2, 3, 5, 7,\n       0, 3, 7, 7, 8, 8, 2, 1, 3, 7, 9, 2, 7, 0, 3, 9, 0, 7, 7, 0, 1, 1,\n       2, 3, 4, 5, 6, 5, 8, 8, 1, 9, 6, 8, 9, 1, 1, 4, 5, 6, 7, 9, 1, 2,\n       2, 0, 2, 3, 7, 8, 9, 2, 4, 5, 2, 6, 6, 9, 1, 2, 3, 4, 8, 8, 0, 8,\n       0, 4, 8, 8, 6, 7, 5, 6, 9, 0, 3, 5])",
                "sorter": "array([89, 91, 99, 46,  0, 25, 33,  1, 65, 53, 79, 62, 42, 90, 66,  2, 18,\n       54, 10,  6,  3, 75, 34, 58,  4, 14, 94, 97,  5, 24, 72, 50,  7, 23,\n        8, 27, 93,  9, 64, 11, 77, 83, 12, 28, 87, 32, 40, 38, 22, 13, 31,\n       73, 48, 15, 56, 16, 43, 82, 84, 49, 45, 57, 17, 88, 19, 20, 55, 21,\n       67, 35, 36, 63, 47, 69, 26, 30, 41, 29, 71, 37, 98, 96, 51, 80, 39,\n       86, 44, 78, 95, 70, 52, 81, 59, 60, 76, 68, 61, 92, 85, 74])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  6, 10, 18, 22, 28, 29, 33, 35, 38, 41, 49, 52, 54, 57, 64, 67,\n       73, 76, 78, 80, 86, 88, 92, 94, 97])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 4, 6, 4, 4, 1, 4, 2, 3, 2, 7, 2, 2, 3, 6, 2, 6, 3, 2, 2, 5, 2,\n       3, 2, 3, 3])",
                "res": "array([5, 4, 6, 4, 4, 1, 4, 2, 3, 2, 7, 2, 2, 3, 6, 2, 6, 3, 2, 2, 5, 2,\n       3, 2, 3, 3])",
                "ri": "Index(['c', 'z', 'l', 'a', 'h', 'y', 'p', 'x', 't', 'b', 'n', 'k', 'w', 'd',\n       'j', 'm', 'f', 's', 'g', 'v', 'i', 'r', 'e', 'u', 'o', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nc    5\nz    4\nl    6\na    4\nh    4\ny    1\np    4\nx    2\nt    3\nb    2\nn    7\nk    2\nw    2\nd    3\nj    6\nm    2\nf    6\ns    3\ng    2\nv    2\ni    5\nr    2\ne    3\nu    2\no    3\nq    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b178a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b178580>",
                "self.obj": "0     5\n1     6\n2     7\n3     5\n4     7\n     ..\n95    0\n96    2\n97    8\n98    1\n99    3\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 12, 13,\n       14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,\n       30, 31, 32, 33, 34, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 43, 43,\n       44, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 52, 52, 53, 54, 55, 56,\n       57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n       74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87])",
                "_": "88",
                "val": "array([5, 6, 5, 7, 7, 5, 7, 2, 3, 9, 7, 9, 2, 7, 1, 5, 5, 7, 9, 8, 1, 7,\n       1, 2, 0, 6, 2, 1, 6, 4, 0, 1, 6, 5, 8, 3, 5, 0, 2, 3, 7, 9, 8, 4,\n       2, 4, 9, 0, 5, 6, 9, 1, 4, 9, 1, 4, 7, 3, 0, 8, 8, 2, 4, 9, 2, 6,\n       3, 6, 7, 9, 8, 0, 7, 6, 2, 4, 6, 3, 8, 5, 7, 5, 7, 8, 1, 4, 8, 1,\n       0, 0, 3, 8, 2, 3, 3, 8, 2, 8, 1, 3])",
                "sorter": "array([ 0,  1, 66,  2, 18,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 38, 13,\n       14, 15, 16, 84, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n       31, 32, 33, 34, 67, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 57, 88,\n       89, 46, 47, 48, 49, 50, 51, 95, 52, 53, 62, 90, 54, 55, 56, 58, 59,\n       60, 61, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n       80, 81, 82, 83, 92, 85, 86, 87, 91, 93, 94, 96, 97, 98, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 16, 17, 18, 19,\n       20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\n       38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58,\n       60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78,\n       79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96,\n       97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 3,\n       2, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 88",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nc    2015-09-01    1\nz    2015-08-24    1\nl    2015-08-27    2\na    2015-08-31    1\nh    2015-08-30    1\n                  ..\n     2015-08-28    1\ni    2015-08-29    1\nh    2015-08-26    1\ni    2015-09-01    1\nc    2015-08-24    1\nName: julie, Length: 88, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b124c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b124af0>",
                "self.obj": "0     5.0\n1     6.0\n2     7.0\n3     5.0\n4     7.0\n     ... \n95    0.0\n96    2.0\n97    8.0\n98    1.0\n99    3.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,\n        1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,  5,  5,  5,  5,\n        6,  6,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9, 10,\n       10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14,\n       15, 15, 15, 15, 15, 16, 16, 17, 17, 18, 18, 18, 19, 19, 20, 20, 20,\n       20, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([69, 35,  1, 18, 52, 86, 46, 89, 91, 99,  0, 25, 66, 79, 62, 42, 90,\n        2, 54, 10,  6,  3, 75, 34, 58,  4, 14, 94, 97,  5,  7, 24, 72, 50,\n        8, 23,  9, 27, 93, 64, 11, 77, 28, 83, 12, 87, 32, 40, 38, 22, 13,\n       31, 73, 48, 15, 56, 16, 43, 45, 84, 82, 49, 57, 17, 88, 19, 20, 55,\n       47, 21, 67, 36, 63, 26, 30, 41, 29, 65, 33, 53, 71, 37, 98, 96, 51,\n       80, 39, 44, 78, 59, 60, 76, 68, 61, 95, 70, 81, 85, 92, 74])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6, 12, 19, 23, 29, 30, 34, 36, 39, 42, 50, 53, 55, 58, 65, 68, 73,\n       75, 77, 80, 82, 87, 89, 91, 94, 97])",
                "inc": "array([1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 5, 6, 4, 4, 1, 4, 2, 2, 2, 7, 2, 2, 3, 6, 2, 5, 2, 2, 3, 2, 5,\n       2, 2, 3, 3, 3])",
                "res": "array([5, 6, 4, 4, 1, 4, 2, 2, 2, 7, 2, 2, 3, 6, 2, 5, 2, 2, 3, 2, 5, 2,\n       2, 3, 3, 3])",
                "ri": "Index(['c', 'l', 'a', 'h', 'y', 'p', 'x', 't', 'b', 'n', 'k', 'w', 'd', 'j',\n       'm', 'f', 's', 'g', 'z', 'v', 'i', 'r', 'u', 'o', 'e', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nc    5\nl    6\na    4\nh    4\ny    1\np    4\nx    2\nt    2\nb    2\nn    7\nk    2\nw    2\nd    3\nj    6\nm    2\nf    5\ns    2\ng    2\nz    3\nv    2\ni    5\nr    2\nu    2\no    3\ne    3\nq    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1357c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1350a0>",
                "self.obj": "0      2\n1      9\n2      8\n3      1\n4      0\n      ..\n995    5\n996    3\n997    9\n998    9\n999    4\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  37,  80, 122, 178, 201, 240, 282, 320, 354, 382, 424, 471,\n       501, 541, 584, 624, 661, 704, 746, 777, 819, 859, 897, 931, 964])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10, 10, 10,  9, 10,  9,\n       10, 10, 10, 10, 10, 10, 10, 10,  9])",
                "res": "array([10, 10, 10, 10,  9, 10,  9, 10, 10, 10, 10, 10, 10, 10,  9, 10,  9,\n       10, 10, 10, 10, 10, 10, 10, 10,  9])",
                "ri": "Index(['w', 'c', 'v', 'z', 't', 'm', 'a', 'i', 'p', 'q', 'y', 'e', 'r', 's',\n       'd', 'x', 'g', 'l', 'n', 'j', 'h', 'f', 'u', 'k', 'o', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    10\nc    10\nv    10\nz    10\nt     9\nm    10\na     9\ni    10\np    10\nq    10\ny    10\ne    10\nr    10\ns    10\nd     9\nx    10\ng     9\nl    10\nn    10\nj    10\nh    10\nf    10\nu    10\nk    10\no    10\nb     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1231fe370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1231fee20>",
                "self.obj": "0      2\n1      9\n2      8\n3      1\n4      0\n      ..\n995    5\n996    3\n997    9\n998    9\n999    4\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "252",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 252",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-31    3\nc    2015-08-25    6\nv    2015-08-30    6\nz    2015-09-01    3\nt    2015-08-29    2\n                  ..\nx    2015-08-25    2\nu    2015-08-24    1\nb    2015-08-28    1\no    2015-08-25    1\nk    2015-08-28    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x123228c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1232289a0>",
                "self.obj": "0      2.0\n1      9.0\n2      8.0\n3      1.0\n4      0.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    4.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      2.000000e+00\n1      9.000000e+00\n2      8.000000e+00\n3      1.000000e+00\n4      0.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.000000e+00\n999    4.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  94, 134, 187, 210, 248, 289, 323, 353, 395, 420, 461, 504,\n       544, 586, 625, 659, 698, 736, 767, 806, 843, 881, 913, 944, 969])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11, 11, 11, 11, 10, 11, 10, 11, 11, 11,  9, 11, 11, 11, 10, 11, 10,\n       11, 10, 11, 11, 11, 11, 11, 10, 10,  9])",
                "res": "array([11, 11, 11, 10, 11, 10, 11, 11, 11,  9, 11, 11, 11, 10, 11, 10, 11,\n       10, 11, 11, 11, 11, 11, 10, 10,  9])",
                "ri": "Index(['w', 'v', 'z', 't', 'm', 'a', 'i', 'p', 'c', 'q', 'y', 'e', 's', 'd',\n       'x', 'g', 'l', 'n', 'j', 'h', 'f', 'u', 'k', 'o', 'r', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    11\nv    11\nz    11\nt    10\nm    11\na    10\ni    11\np    11\nc    11\nq     9\ny    11\ne    11\ns    11\nd    10\nx    11\ng    10\nl    11\nn    10\nj    11\nh    11\nf    11\nu    11\nk    11\no    10\nr    10\nb     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1e3070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1e33a0>",
                "self.obj": "0       9\n1       2\n2       8\n3       5\n4       4\n       ..\n9995    8\n9996    2\n9997    6\n9998    3\n9999    9\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  99,  506,  600, ..., 9019, 9222, 9753])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  403,  797, 1185, 1571, 1947, 2314, 2766, 3122, 3494, 3888,\n       4278, 4651, 5071, 5451, 5846, 6195, 6572, 6929, 7326, 7704, 8116,\n       8524, 8877, 9247, 9657])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['o', 'y', 'k', 'e', 'h', 'q', 'x', 'b', 'f', 'r', 'z', 'w', 's', 'u',\n       'v', 'j', 'n', 'g', 'i', 'p', 't', 'l', 'm', 'd', 'c', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    10\ny    10\nk    10\ne    10\nh    10\nq    10\nx    10\nb    10\nf    10\nr    10\nz    10\nw    10\ns    10\nu    10\nv    10\nj    10\nn    10\ng    10\ni    10\np    10\nt    10\nl    10\nm    10\nd    10\nc    10\na    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1d4880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1d4820>",
                "self.obj": "0       9\n1       2\n2       8\n3       5\n4       4\n       ..\n9995    8\n9996    2\n9997    6\n9998    3\n9999    9\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 506, 2333, 5021, ..., 3440, 8009, 9254])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-29     9\ny    2015-08-25     9\nk    2015-09-01     9\ne    2015-08-26    10\nh    2015-08-30     9\n                   ..\ni    2015-08-24     8\ns    2015-08-30     8\nl    2015-08-31    10\n     2015-08-30    10\nv    2015-08-31     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227c70>",
                "self.obj": "0       9.0\n1       2.0\n2       8.0\n3       5.0\n4       4.0\n       ... \n9995    8.0\n9996    2.0\n9997    6.0\n9998    3.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 8585, 9019, 9753])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  966, 1326, 1692, 2046, 2396, 2821, 3152, 3505, 3879, 4246,\n       4596, 4988, 5343, 5680, 6055, 6408, 6749, 7122, 7487, 7847, 8239,\n       8624, 8955, 9300, 9686])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['o', 'k', 'e', 'h', 'q', 'x', 'b', 'f', 'r', 'z', 'w', 's', 'u', 'j',\n       'v', 'n', 'g', 'i', 'y', 'p', 't', 'l', 'm', 'd', 'c', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    11\nk    11\ne    11\nh    11\nq    11\nx    11\nb    11\nf    11\nr    11\nz    11\nw    11\ns    11\nu    11\nj    11\nv    11\nn    11\ng    11\ni    11\ny    11\np    11\nt    11\nl    11\nm    11\nd    11\nc    11\na    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1350a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b135730>",
                "self.obj": "0        1\n1        3\n2        4\n3        0\n4        7\n        ..\n99995    2\n99996    0\n99997    5\n99998    0\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   11,   109,   228, ..., 99215, 99227, 99803])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3842,  7763, 11618, 15603, 19548, 23300, 27135, 30984,\n       34830, 38673, 42507, 46273, 50062, 53998, 57925, 61782, 65548,\n       69490, 73339, 77116, 80975, 84727, 88567, 92328, 96110])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['h', 'q', 'i', 'g', 'p', 'y', 'f', 'z', 'e', 'x', 'v', 'o', 'u', 't',\n       's', 'r', 'm', 'd', 'a', 'b', 'l', 'j', 'k', 'w', 'n', 'c'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    10\nq    10\ni    10\ng    10\np    10\ny    10\nf    10\nz    10\ne    10\nx    10\nv    10\no    10\nu    10\nt    10\ns    10\nr    10\nm    10\nd    10\na    10\nb    10\nl    10\nj    10\nk    10\nw    10\nn    10\nc    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4b80>",
                "self.obj": "0        1\n1        3\n2        4\n3        0\n4        7\n        ..\n99995    2\n99996    0\n99997    5\n99998    0\n99999    8\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   11,  1173,  2015, ..., 91541, 92622, 93690])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-09-01    10\nq    2015-08-23    10\ni    2015-08-29    10\ng    2015-08-24    10\np    2015-08-29    10\n                   ..\nc    2015-09-01    10\np    2015-08-27    10\nw    2015-08-29    10\nf    2015-08-29    10\nu    2015-08-30    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1e09d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1e0eb0>",
                "self.obj": "0        1.0\n1        3.0\n2        4.0\n3        0.0\n4        7.0\n        ... \n99995    2.0\n99996    0.0\n99997    5.0\n99998    0.0\n99999    8.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 98889, 99215, 99803])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9473, 13081, 16845, 20587, 24121, 27739, 31368, 34983,\n       38634, 42246, 45877, 49407, 53110, 56827, 60465, 63994, 67650,\n       71211, 74853, 78373, 82002, 85562, 89239, 92817, 96364])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['h', 'i', 'g', 'p', 'y', 'f', 'z', 'e', 'q', 'x', 'v', 'o', 't', 's',\n       'r', 'm', 'a', 'b', 'l', 'j', 'k', 'w', 'd', 'u', 'n', 'c'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    11\ni    11\ng    11\np    11\ny    11\nf    11\nz    11\ne    11\nq    11\nx    11\nv    11\no    11\nt    11\ns    11\nr    11\nm    11\na    11\nb    11\nl    11\nj    11\nk    11\nw    11\nd    11\nu    11\nn    11\nc    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1d4520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1d43a0>",
                "self.obj": "0     18\n1      7\n2     86\n3     93\n4      9\n      ..\n95    93\n96    56\n97    70\n98    92\n99    78\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,  3,  3,\n        3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,\n        7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10,\n       10, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 14, 14,\n       14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 17,\n       18, 18, 18, 18, 19, 19, 19, 20, 21, 21, 21, 22, 22, 22, 23])",
                "_": "24",
                "val": "array([18, 18, 87, 88,  7, 31, 36, 93, 20, 32, 86, 98,  6, 30, 45, 65, 92,\n       93,  9, 38, 82,  0,  1,  3, 27, 61, 67, 98, 61, 65, 76, 91, 97, 16,\n       66,  0,  4, 11, 57, 58, 86,  6, 12, 23, 34, 65, 80,  1, 35, 35, 51,\n       52, 32, 66, 31, 39, 44, 45, 56, 63, 82, 92, 97, 18, 43, 69, 24, 41,\n       52, 62, 97, 25, 34, 58, 74, 81,  7, 23, 80, 11, 60, 69, 70, 80, 92,\n       20, 69, 72, 78, 31, 38, 52, 23, 51, 70, 97, 58, 59, 88, 20])",
                "sorter": "array([ 0, 23, 33, 52,  1, 46, 87, 95, 56, 38,  2, 84, 70, 20, 35, 49, 91,\n        3,  4, 86, 10, 19,  5, 74, 68, 61,  6, 39, 22, 14,  7, 16, 80,  8,\n       90, 48, 12, 26,  9, 85, 47, 73, 58, 43, 50, 54, 11, 59, 53, 72, 24,\n       13, 44, 15, 82, 62, 42, 31, 96, 66, 17, 30, 57, 18, 67, 75, 93, 21,\n       89, 65, 81, 94, 25, 71, 79, 34, 78, 51, 27, 28, 37, 76, 36, 92, 98,\n       55, 29, 69, 99, 32, 40, 63, 41, 77, 97, 45, 60, 88, 64, 83])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  4,  8, 12, 18, 21, 28, 33, 35, 41, 47, 52, 54, 63, 66, 71, 76,\n       79, 85, 89, 92, 93, 96, 99])",
                "inc": "array([1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 4, 4, 6, 3, 7, 5, 2, 6, 6, 4, 2, 9, 3, 5, 5, 3, 6, 4, 3, 1, 3,\n       3, 1])",
                "res": "array([3, 4, 4, 6, 3, 7, 5, 2, 6, 6, 4, 2, 9, 3, 5, 5, 3, 6, 4, 3, 1, 3,\n       3, 1])",
                "ri": "Index(['h', 'a', 'r', 'c', 'l', 'm', 'w', 'u', 'o', 'g', 'x', 'z', 'b', 'p',\n       'j', 'n', 's', 't', 'y', 'e', 'f', 'v', 'q', 'k'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    3\na    4\nr    4\nc    6\nl    3\nm    7\nw    5\nu    2\no    6\ng    6\nx    4\nz    2\nb    9\np    3\nj    5\nn    5\ns    3\nt    6\ny    4\ne    3\nf    1\nv    3\nq    3\nk    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b135a90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b135040>",
                "self.obj": "0     18\n1      7\n2     86\n3     93\n4      9\n      ..\n95    93\n96    56\n97    70\n98    92\n99    78\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 11, 12,\n       13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 24, 25, 26, 27,\n       27, 27, 28, 29, 30, 30, 31, 32, 32, 33, 33, 33, 34, 35, 35, 36, 37,\n       38, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51,\n       52, 53, 54, 55, 56, 56, 57, 58, 58, 59, 59, 60, 61, 62, 63, 63, 64,\n       65, 66, 67, 67, 68, 69, 70, 71, 71, 72, 73, 74, 75, 76, 77])",
                "_": "78",
                "val": "array([18, 87,  7, 86, 30, 93,  9,  1,  3, 67, 76, 16, 57, 82,  6, 80,  4,\n       52, 65, 66, 91, 82, 18,  0, 41, 61, 18, 51, 25, 34, 74, 11, 80, 11,\n       60, 70, 69, 92, 44, 45, 31, 58, 81,  6, 45, 65, 32, 61, 98, 38, 23,\n       23, 65, 32, 97, 31, 58, 86,  0, 34, 23, 88, 35, 20, 20, 31, 97, 12,\n        1, 58, 39, 52, 59, 88, 62, 56, 63, 43, 69, 27, 72, 35, 69, 92, 51,\n        7, 97, 52, 97, 20, 98, 38, 36, 93, 66, 92, 80, 24, 70, 78])",
                "sorter": "array([ 0, 33,  1,  2, 20,  3,  4,  5, 74,  6,  7,  8,  9, 10, 73, 11, 12,\n       13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 94, 25, 79, 26, 27, 28,\n       37, 36, 29, 30, 42, 31, 32, 71, 34, 70, 35, 49, 38, 61, 39, 40, 41,\n       43, 54, 44, 45, 46, 85, 47, 48, 50, 51, 52, 53, 55, 56, 82, 57, 58,\n       59, 60, 62, 63, 88, 64, 65, 96, 66, 67, 75, 68, 69, 72, 76, 98, 77,\n       78, 80, 89, 81, 83, 84, 86, 87, 95, 90, 91, 92, 93, 97, 99])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  3,  4,  6,  7,  8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 36, 37, 38, 40, 41, 43,\n       46, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65,\n       67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 81, 82, 84, 85, 86, 87,\n       89, 90, 91, 92, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 3, 1, 1, 3, 1, 1, 2, 1, 2, 3, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 3, 1, 1, 3, 1, 1, 2, 1, 2, 3, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-31    2\na    2015-08-25    1\nr    2015-08-25    1\nc    2015-08-25    2\nl    2015-09-01    1\n                  ..\nc    2015-08-24    1\nt    2015-08-26    1\nj    2015-09-01    1\nv    2015-09-01    1\ny    2015-08-31    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b04d3a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0538b0>",
                "self.obj": "0     18.0\n1      7.0\n2     86.0\n3     93.0\n4      9.0\n      ... \n95    93.0\n96    56.0\n97    70.0\n98    92.0\n99    78.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,\n       10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 17,\n       17, 17, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 23])",
                "_": "24",
                "val": "array of shape 100",
                "sorter": "array([ 1, 18, 86, 35, 69, 52,  0, 23, 33, 84, 56, 38,  2, 70, 20, 49, 91,\n        3,  4, 10, 19,  5, 74, 68, 61,  6, 39,  7, 22, 14, 16, 80,  8, 90,\n        9, 26, 47, 85, 48, 12, 73, 58, 43, 50, 54, 11, 59, 53, 72, 24, 13,\n       44, 15, 66, 82, 62, 42, 31, 96, 17, 30, 57, 65, 93, 21, 89, 81, 94,\n       25, 71, 79, 34, 27, 78, 51, 28, 37, 76, 36, 92, 98, 55, 29, 99, 32,\n       40, 63, 41, 45, 77, 97, 46, 87, 95, 64, 60, 88, 67, 75, 83])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  9, 13, 18, 20, 27, 32, 34, 40, 46, 51, 53, 62, 67, 72, 75, 81,\n       84, 87, 88, 91, 94, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 2, 4, 5, 2, 7, 5, 2, 3, 6, 4, 2, 9, 5, 5, 3, 6, 3, 3, 1, 3, 3,\n       3, 2, 1])",
                "res": "array([2, 4, 5, 2, 7, 5, 2, 3, 6, 4, 2, 9, 5, 5, 3, 6, 3, 3, 1, 3, 3, 3,\n       2, 1])",
                "ri": "Index(['h', 'r', 'c', 'l', 'm', 'w', 'u', 'o', 'g', 'x', 'z', 'b', 'j', 'n',\n       's', 't', 'y', 'e', 'f', 'v', 'a', 'q', 'p', 'k'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    2\nr    4\nc    5\nl    2\nm    7\nw    5\nu    2\no    3\ng    6\nx    4\nz    2\nb    9\nj    5\nn    5\ns    3\nt    6\ny    3\ne    3\nf    1\nv    3\na    3\nq    3\np    2\nk    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1e3af0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1e32b0>",
                "self.obj": "0      10\n1       8\n2      14\n3       2\n4      28\n       ..\n995     3\n996    84\n997    72\n998    33\n999    48\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  39,  80, 115, 167, 206, 236, 269, 320, 360, 396, 436, 478,\n       525, 574, 608, 651, 680, 710, 751, 786, 817, 860, 890, 930, 964])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([33, 35, 28, 42, 32, 25, 29, 41, 34, 31, 32, 35, 37, 34, 29, 35, 25,\n       25, 35, 32, 26, 32, 24, 31, 29, 29])",
                "res": "array([33, 35, 28, 42, 32, 25, 29, 41, 34, 31, 32, 35, 37, 34, 29, 35, 25,\n       25, 35, 32, 26, 32, 24, 31, 29, 29])",
                "ri": "Index(['w', 'g', 'z', 'a', 'u', 'x', 'l', 'i', 'p', 'j', 'k', 'm', 'r', 'h',\n       't', 'n', 'e', 'o', 'v', 'q', 'd', 'f', 'c', 's', 'y', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    33\ng    35\nz    28\na    42\nu    32\nx    25\nl    29\ni    41\np    34\nj    31\nk    32\nm    35\nr    37\nh    34\nt    29\nn    35\ne    25\no    25\nv    35\nq    32\nd    26\nf    32\nc    24\ns    31\ny    29\nb    29\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4dc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b4be0>",
                "self.obj": "0      10\n1       8\n2      14\n3       2\n4      28\n       ..\n995     3\n996    84\n997    72\n998    33\n999    48\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "256",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 256",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 256",
                "res": "array of shape 256",
                "ri": "array of shape 256",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-28    4\ng    2015-08-23    4\nz    2015-08-30    6\na    2015-08-26    6\n     2015-08-30    5\n                  ..\nj    2015-08-24    1\nr    2015-08-23    1\nd    2015-08-29    1\ny    2015-08-24    2\nq    2015-08-31    1\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1234c8a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1234c8ac0>",
                "self.obj": "0      10.0\n1       8.0\n2      14.0\n3       2.0\n4      28.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    33.0\n999    48.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      1.000000e+01\n1      8.000000e+00\n2      1.400000e+01\n3      2.000000e+00\n4      2.800000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    3.300000e+01\n999    4.800000e+01\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  98, 131, 180, 214, 242, 274, 322, 361, 396, 434, 475, 520,\n       567, 601, 643, 681, 708, 736, 773, 805, 834, 873, 901, 936, 969])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([42, 30, 25, 34, 27, 24, 25, 35, 28, 27, 31, 27, 30, 31, 27, 30, 26,\n       20, 22, 32, 27, 22, 30, 16, 25, 29, 23])",
                "res": "array([30, 25, 34, 27, 24, 25, 35, 28, 27, 31, 27, 30, 31, 27, 30, 26, 20,\n       22, 32, 27, 22, 30, 16, 25, 29, 23])",
                "ri": "Index(['w', 'z', 'a', 'u', 'x', 'l', 'i', 'p', 'j', 'k', 'm', 'r', 'h', 't',\n       'n', 'g', 'e', 'o', 'v', 'q', 'd', 'f', 'c', 's', 'y', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    30\nz    25\na    34\nu    27\nx    24\nl    25\ni    35\np    28\nj    27\nk    31\nm    27\nr    30\nh    31\nt    27\nn    30\ng    26\ne    20\no    22\nv    32\nq    27\nd    22\nf    30\nc    16\ns    25\ny    29\nb    23\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1231fe4f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1231fe250>",
                "self.obj": "0       14\n1       66\n2       94\n3       37\n4       36\n        ..\n9995    48\n9996    65\n9997     6\n9998     7\n9999    17\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 673, 2809, 3141, ..., 6494, 7632, 9987])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  373,  759, 1133, 1496, 1896, 2314, 2664, 3095, 3496, 3849,\n       4204, 4576, 4983, 5365, 5726, 6114, 6538, 6931, 7338, 7723, 8118,\n       8445, 8850, 9266, 9629])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100,  95,  97, 100,  97,  97,  94,  99,  99,  98,  98,  99,  99,\n        97,  97, 100,  99,  99,  99, 100,  98,  96,  98, 100,  98,  96])",
                "res": "array([100,  95,  97, 100,  97,  97,  94,  99,  99,  98,  98,  99,  99,\n        97,  97, 100,  99,  99,  99, 100,  98,  96,  98, 100,  98,  96])",
                "ri": "Index(['m', 'n', 'u', 'o', 'j', 't', 'w', 'g', 'l', 'i', 'k', 'p', 'q', 'h',\n       'y', 'r', 'e', 'z', 'd', 'c', 'f', 'a', 'x', 'v', 'b', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    100\nn     95\nu     97\no    100\nj     97\nt     97\nw     94\ng     99\nl     99\ni     98\nk     98\np     99\nq     99\nh     97\ny     97\nr    100\ne     99\nz     99\nd     99\nc    100\nf     98\na     96\nx     98\nv    100\nb     98\ns     96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1231fe100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1231fe280>",
                "self.obj": "0       14\n1       66\n2       94\n3       37\n4       36\n        ..\n9995    48\n9996    65\n9997     6\n9998     7\n9999    17\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 3, 10, 14, ..., 73, 95, 99])",
                "sorter": "array([ 630, 4424,    0, ..., 2146, 6850, 3147])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-25    35\nn    2015-08-27    28\nu    2015-08-28    27\no    2015-09-01    30\nj    2015-08-30    43\n                   ..\ny    2015-08-30    26\nr    2015-08-28    32\nw    2015-09-01    27\na    2015-08-29    25\n     2015-08-23    22\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b22eb50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b22e5b0>",
                "self.obj": "0       14.0\n1       66.0\n2       94.0\n3       37.0\n4       36.0\n        ... \n9995    48.0\n9996    65.0\n9997     6.0\n9998     7.0\n9999    17.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 6494, 7632, 9987])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  942, 1292, 1624, 2008, 2408, 2735, 3135, 3513, 3834, 4168,\n       4518, 4882, 5264, 5628, 5975, 6348, 6736, 7114, 7495, 7859, 8229,\n       8535, 8918, 9311, 9649])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101,  98,  97,  99,  98,  95,  91,  97,  98,  96,  97,  97,  96,\n        99,  97,  93, 100,  97,  98,  96, 100,  97,  94,  96, 100,  98,\n        94])",
                "res": "array([ 98,  97,  99,  98,  95,  91,  97,  98,  96,  97,  97,  96,  99,\n        97,  93, 100,  97,  98,  96, 100,  97,  94,  96, 100,  98,  94])",
                "ri": "Index(['m', 'u', 'o', 'j', 't', 'w', 'g', 'l', 'i', 'k', 'p', 'n', 'q', 'h',\n       'y', 'r', 'e', 'z', 'd', 'c', 'f', 'a', 'x', 'v', 'b', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm     98\nu     97\no     99\nj     98\nt     95\nw     91\ng     97\nl     98\ni     96\nk     97\np     97\nn     96\nq     99\nh     97\ny     93\nr    100\ne     97\nz     98\nd     96\nc    100\nf     97\na     94\nx     96\nv    100\nb     98\ns     94\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1cf100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1cf370>",
                "self.obj": "0         6\n1        18\n2        51\n3        70\n4        99\n         ..\n99995    91\n99996    69\n99997    83\n99998     7\n99999    80\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 5846,  6194,  8627, ..., 95269, 95277, 96001])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3738,  7649, 11539, 15401, 19216, 22994, 26800, 30707,\n       34555, 38407, 42182, 46044, 49940, 53816, 57637, 61426, 65300,\n       69204, 73094, 76983, 80910, 84706, 88480, 92363, 96174])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'c', 'w', 'f', 'd', 'j', 'b', 'n', 'm', 's', 'h', 'l', 'e', 'g',\n       'u', 'k', 'o', 't', 'r', 'i', 'q', 'y', 'z', 'v', 'p', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nc    100\nw    100\nf    100\nd    100\nj    100\nb    100\nn    100\nm    100\ns    100\nh    100\nl    100\ne    100\ng    100\nu    100\nk    100\no    100\nt    100\nr    100\ni    100\nq    100\ny    100\nz    100\nv    100\np    100\nx    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b135f10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b135dc0>",
                "self.obj": "0         6\n1        18\n2        51\n3        70\n4        99\n         ..\n99995    91\n99996    69\n99997    83\n99998     7\n99999    80\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([31510, 32066, 46126, ..., 18536, 52582, 55801])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    100\nc    2015-08-28     97\nw    2015-08-28     99\nf    2015-08-31     97\nw    2015-08-29     97\n                  ... \nd    2015-09-01     98\ns    2015-08-25     99\nu    2015-08-25     97\nb    2015-08-26     99\np    2015-08-28     95\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b161970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b161850>",
                "self.obj": "0         6.0\n1        18.0\n2        51.0\n3        70.0\n4        99.0\n         ... \n99995    91.0\n99996    69.0\n99997    83.0\n99998     7.0\n99999    80.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 87268, 92304, 97053])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9414, 13060, 16704, 20305, 23866, 27466, 31135, 34766,\n       38385, 41964, 45587, 49267, 52932, 56483, 60114, 63804, 67489,\n       71128, 74785, 78507, 82063, 85627, 89265, 92839, 96436])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'w', 'f', 'd', 'j', 'b', 'n', 'm', 's', 'h', 'l', 'e', 'g', 'k',\n       'o', 'c', 't', 'r', 'i', 'q', 'y', 'z', 'v', 'p', 'x', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nw    101\nf    101\nd    101\nj    101\nb    101\nn    101\nm    101\ns    101\nh    101\nl    101\ne    101\ng    101\nk    101\no    101\nc    101\nt    101\nr    101\ni    101\nq    101\ny    101\nz    101\nv    101\np    101\nx    101\nu    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b12d2b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b12d9d0>",
                "self.obj": "0     608\n1     125\n2     170\n3     336\n4     585\n     ... \n95    920\n96    790\n97    774\n98    128\n99    254\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,  3,  4,\n        4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,\n        7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 11, 11, 12, 12,\n       13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16,\n       16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19,\n       20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([86, 12, 81,  0, 37,  1, 83, 70, 74,  2, 53, 25, 35,  3, 79, 15,  7,\n        4, 43, 98, 56,  5, 55, 59, 38,  6, 47, 73, 91, 14, 63, 61, 99, 23,\n        8,  9, 44, 18, 72, 54, 20, 94, 36, 84, 10, 11, 13, 16, 67, 17, 50,\n       92, 58, 90, 64, 19, 78, 21, 71, 39, 96, 22, 52, 29, 68, 48, 51, 69,\n       75, 24, 34, 26, 82, 30, 62, 46, 27, 49, 80, 31, 66, 32, 28, 89, 97,\n       33, 41, 40, 42, 60, 77, 45, 95, 93, 57, 65, 85, 76, 87, 88])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  4,  7, 13, 16, 19, 22, 31, 35, 40, 46, 47, 49, 51, 56, 61, 65,\n       71, 75, 79, 85, 86, 88, 90, 95, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 3, 6, 3, 3, 3, 9, 4, 5, 6, 1, 2, 2, 5, 5, 4, 6, 4, 4, 6, 1, 2,\n       2, 5, 3, 2])",
                "res": "array([4, 3, 6, 3, 3, 3, 9, 4, 5, 6, 1, 2, 2, 5, 5, 4, 6, 4, 4, 6, 1, 2,\n       2, 5, 3, 2])",
                "ri": "Index(['r', 'e', 'o', 'c', 'x', 'w', 'a', 'y', 'g', 'm', 's', 'b', 'l', 'v',\n       'u', 'p', 'i', 'd', 'z', 'n', 'q', 'k', 'h', 'f', 'j', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    4\ne    3\no    6\nc    3\nx    3\nw    3\na    9\ny    4\ng    5\nm    6\ns    1\nb    2\nl    2\nv    5\nu    5\np    4\ni    6\nd    4\nz    4\nn    6\nq    1\nk    2\nh    2\nf    5\nj    3\nt    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b12dfd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b12d130>",
                "self.obj": "0     608\n1     125\n2     170\n3     336\n4     585\n     ... \n95    920\n96    790\n97    774\n98    128\n99    254\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  4,  5,  5,  6,  6,  7,  8,  8,  9, 10, 10, 11,\n       11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41, 42, 43,\n       43, 43, 44, 45, 45, 45, 46, 47, 48, 49, 50, 51, 51, 52, 52, 53, 54,\n       55, 56, 57, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83])",
                "_": "84",
                "val": "array of shape 100",
                "sorter": "array([81,  0,  1,  2,  3,  4, 98,  5,  6, 91,  7, 23,  8,  9, 10, 11, 86,\n       12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 38, 47, 39, 40, 41, 42, 43, 44, 45,\n       95, 57, 46, 48, 69, 75, 49, 50, 51, 52, 53, 72, 54, 55, 63, 56, 58,\n       59, 60, 61, 99, 62, 92, 64, 65, 66, 67, 68, 70, 71, 73, 74, 76, 77,\n       78, 96, 79, 80, 82, 83, 84, 85, 87, 88, 89, 90, 93, 94, 97])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  3,  4,  5,  6,  8, 10, 11, 13, 14, 16, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 59, 60, 61,\n       62, 64, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82,\n       83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3,\n       1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3,\n       1, 3, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 84",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-08-24    2\ne    2015-08-31    1\no    2015-08-23    1\nc    2015-08-29    1\nx    2015-08-26    1\n                  ..\nn    2015-08-25    1\nv    2015-09-01    1\nf    2015-09-01    1\nm    2015-08-25    1\nn    2015-08-29    1\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1e31f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1e3cd0>",
                "self.obj": "0     608.0\n1     125.0\n2     170.0\n3     336.0\n4     585.0\n      ...  \n95    920.0\n96    790.0\n97    774.0\n98    128.0\n99    254.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,\n        3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        6,  6,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  9, 10, 10, 11, 11,\n       12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15,\n       15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 20,\n       20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([ 1, 86, 18, 69, 35, 52, 12, 81,  0, 70, 74,  2, 53, 25,  3, 79, 15,\n        7,  4, 43, 98, 56,  5, 47, 55, 59, 38,  6, 73, 91, 14, 63,  8, 61,\n       99, 23,  9, 44, 72, 54, 84, 20, 94, 36, 10, 11, 13, 16, 67, 17, 50,\n       64, 92, 58, 90, 19, 78, 21, 71, 39, 96, 22, 29, 68, 48, 51, 75, 24,\n       34, 26, 82, 30, 62, 27, 46, 49, 80, 28, 66, 31, 32, 89, 97, 33, 83,\n       37, 41, 40, 42, 60, 45, 77, 95, 93, 57, 65, 85, 76, 87, 88])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  9, 14, 17, 20, 23, 32, 36, 40, 46, 47, 49, 51, 56, 61, 64, 69,\n       73, 77, 83, 84, 86, 88, 90, 95, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 5, 3, 3, 3, 9, 4, 4, 6, 1, 2, 2, 5, 5, 3, 5, 4, 3, 5, 1, 2,\n       2, 2, 5, 2, 2])",
                "res": "array([3, 5, 3, 3, 3, 9, 4, 4, 6, 1, 2, 2, 5, 5, 3, 5, 4, 3, 5, 1, 2, 2,\n       2, 5, 2, 2])",
                "ri": "Index(['r', 'o', 'c', 'x', 'w', 'a', 'y', 'g', 'm', 's', 'b', 'l', 'v', 'u',\n       'p', 'i', 'd', 'z', 'n', 'q', 'e', 'k', 'h', 'f', 'j', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    3\no    5\nc    3\nx    3\nw    3\na    9\ny    4\ng    4\nm    6\ns    1\nb    2\nl    2\nv    5\nu    5\np    3\ni    5\nd    4\nz    3\nn    5\nq    1\ne    2\nk    2\nh    2\nf    5\nj    2\nt    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b135c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1354c0>",
                "self.obj": "0      963\n1      220\n2      655\n3      524\n4      289\n      ... \n995    267\n996    121\n997     97\n998    736\n999    903\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  42,  88, 124, 168, 217, 248, 281, 316, 364, 398, 439, 477,\n       522, 563, 604, 642, 678, 714, 752, 791, 829, 862, 896, 937, 960])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([42, 45, 35, 43, 48, 31, 33, 34, 48, 34, 39, 38, 44, 41, 39, 37, 36,\n       36, 38, 39, 38, 32, 33, 38, 23, 40])",
                "res": "array([42, 45, 35, 43, 48, 31, 33, 34, 48, 34, 39, 38, 44, 41, 39, 37, 36,\n       36, 38, 39, 38, 32, 33, 38, 23, 40])",
                "ri": "Index(['y', 'j', 'u', 'p', 'z', 'e', 's', 'f', 'i', 'n', 'x', 'q', 'c', 'o',\n       'm', 'v', 'g', 'd', 'k', 'a', 't', 'l', 'h', 'w', 'r', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    42\nj    45\nu    35\np    43\nz    48\ne    31\ns    33\nf    34\ni    48\nn    34\nx    39\nq    38\nc    44\no    41\nm    39\nv    37\ng    36\nd    36\nk    38\na    39\nt    38\nl    32\nh    33\nw    38\nr    23\nb    40\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b135af0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1354c0>",
                "self.obj": "0      963\n1      220\n2      655\n3      524\n4      289\n      ... \n995    267\n996    121\n997     97\n998    736\n999    903\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "252",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 252",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-09-01    4\nj    2015-09-01    8\nu    2015-08-29    6\np    2015-08-27    5\nz    2015-08-26    5\n                  ..\nj    2015-08-24    2\nl    2015-08-30    1\ne    2015-08-26    1\nd    2015-08-23    2\nl    2015-08-23    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0665e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0664f0>",
                "self.obj": "0      963.0\n1      220.0\n2      655.0\n3      524.0\n4      289.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    736.0\n999    903.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      9.630000e+02\n1      2.200000e+02\n2      6.550000e+02\n3      5.240000e+02\n4      2.890000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    7.360000e+02\n999    9.030000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  98, 133, 173, 221, 250, 282, 315, 361, 404, 437, 474, 509,\n       547, 586, 621, 657, 688, 726, 764, 806, 843, 872, 904, 941, 964])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([49, 34, 27, 34, 41, 27, 27, 25, 38, 37, 28, 34, 31, 32, 33, 30, 34,\n       23, 34, 31, 37, 35, 26, 29, 26, 21, 31])",
                "res": "array([34, 27, 34, 41, 27, 27, 25, 38, 37, 28, 34, 31, 32, 33, 30, 34, 23,\n       34, 31, 37, 35, 26, 29, 26, 21, 31])",
                "ri": "Index(['y', 'u', 'p', 'z', 'e', 's', 'f', 'i', 'j', 'n', 'x', 'q', 'o', 'm',\n       'v', 'g', 'd', 'k', 'a', 'c', 't', 'l', 'h', 'w', 'r', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    34\nu    27\np    34\nz    41\ne    27\ns    27\nf    25\ni    38\nj    37\nn    28\nx    34\nq    31\no    32\nm    33\nv    30\ng    34\nd    23\nk    34\na    31\nc    37\nt    35\nl    26\nh    29\nw    26\nr    21\nb    31\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b166250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b166f70>",
                "self.obj": "0       582\n1       743\n2       467\n3       631\n4       361\n       ... \n9995    893\n9996    852\n9997    409\n9998    659\n9999    329\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  2,   4,   7, ..., 997, 998, 999])",
                "sorter": "array([8312, 2755, 8045, ..., 5806, 6748, 5472])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  379,  757, 1143, 1517, 1910, 2334, 2725, 3131, 3541, 3924,\n       4302, 4677, 5061, 5432, 5813, 6193, 6561, 6941, 7344, 7736, 8096,\n       8491, 8872, 9257, 9632])",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([314, 309, 319, 317, 327, 339, 324, 335, 339, 319, 319, 321, 327,\n       319, 317, 312, 301, 318, 333, 326, 298, 329, 322, 318, 302, 311])",
                "res": "array([314, 309, 319, 317, 327, 339, 324, 335, 339, 319, 319, 321, 327,\n       319, 317, 312, 301, 318, 333, 326, 298, 329, 322, 318, 302, 311])",
                "ri": "Index(['z', 's', 't', 'q', 'e', 'd', 'l', 'u', 'x', 'j', 'p', 'b', 'a', 'v',\n       'm', 'i', 'w', 'k', 'n', 'g', 'y', 'f', 'r', 'c', 'h', 'o'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    314\ns    309\nt    319\nq    317\ne    327\nd    339\nl    324\nu    335\nx    339\nj    319\np    319\nb    321\na    327\nv    319\nm    317\ni    312\nw    301\nk    318\nn    333\ng    326\ny    298\nf    329\nr    322\nc    318\nh    302\no    311\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4eb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b43d0>",
                "self.obj": "0       582\n1       743\n2       467\n3       631\n4       361\n       ... \n9995    893\n9996    852\n9997    409\n9998    659\n9999    329\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 39, 101, 228, ..., 944, 983, 986])",
                "sorter": "array([2148, 2918, 7966, ..., 5568, 4785, 5964])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-25    38\ns    2015-08-29    50\nt    2015-08-28    50\nq    2015-08-24    34\ne    2015-08-31    29\n                   ..\n     2015-08-28    36\np    2015-08-30    26\ns    2015-08-28    33\n     2015-08-30    42\nu    2015-09-01    35\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b2604f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b260820>",
                "self.obj": "0       582.0\n1       743.0\n2       467.0\n3       631.0\n4       361.0\n        ...  \n9995    893.0\n9996    852.0\n9997    409.0\n9998    659.0\n9999    329.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.97000000e+02,  9.98000000e+02,  9.99000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 5806, 6748, 5472])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  948, 1309, 1665, 2037, 2428, 2793, 3172, 3556, 3915, 4273,\n       4629, 4997, 5348, 5704, 6062, 6409, 6762, 7125, 7503, 7871, 8211,\n       8584, 8942, 9307, 9658])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([402, 255, 282, 265, 270, 278, 263, 283, 286, 266, 269, 273, 275,\n       270, 271, 261, 250, 257, 261, 285, 259, 244, 266, 260, 268, 254,\n       244])",
                "res": "array([255, 282, 265, 270, 278, 263, 283, 286, 266, 269, 273, 275, 270,\n       271, 261, 250, 257, 261, 285, 259, 244, 266, 260, 268, 254, 244])",
                "ri": "Index(['z', 't', 'q', 'e', 'd', 'l', 'u', 'x', 'j', 'p', 'b', 'a', 'v', 'm',\n       'i', 's', 'w', 'k', 'n', 'g', 'y', 'f', 'r', 'c', 'h', 'o'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    255\nt    282\nq    265\ne    270\nd    278\nl    263\nu    283\nx    286\nj    266\np    269\nb    273\na    275\nv    270\nm    271\ni    261\ns    250\nw    257\nk    261\nn    285\ng    259\ny    244\nf    266\nr    260\nc    268\nh    254\no    244\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1d4a30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1d4af0>",
                "self.obj": "0        949\n1        198\n2        471\n3        387\n4        659\n        ... \n99995    565\n99996    661\n99997    617\n99998    914\n99999    236\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   0,   1, ..., 999, 999, 999])",
                "sorter": "array([33029, 45188, 64953, ...,  3503,  3960, 86071])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3865,  7644, 11549, 15427, 19219, 23059, 26884, 30768,\n       34675, 38450, 42368, 46219, 50156, 53981, 57801, 61669, 65458,\n       69365, 73221, 76989, 80704, 84595, 88461, 92259, 96133])",
                "inc": "array([1, 0, 1, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([986, 982, 984, 977, 970, 983, 976, 973, 976, 969, 988, 982, 979,\n       982, 974, 980, 977, 986, 978, 975, 975, 989, 981, 979, 978, 984])",
                "res": "array([986, 982, 984, 977, 970, 983, 976, 973, 976, 969, 988, 982, 979,\n       982, 974, 980, 977, 986, 978, 975, 975, 989, 981, 979, 978, 984])",
                "ri": "Index(['t', 's', 'j', 'b', 'p', 'z', 'k', 'e', 'r', 'n', 'q', 'y', 'd', 'u',\n       'x', 'a', 'g', 'w', 'c', 'i', 'l', 'o', 'v', 'f', 'h', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt    986\ns    982\nj    984\nb    977\np    970\nz    983\nk    976\ne    973\nr    976\nn    969\nq    988\ny    982\nd    979\nu    982\nx    974\na    980\ng    977\nw    986\nc    978\ni    975\nl    975\no    989\nv    981\nf    979\nh    978\nm    984\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3e8460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3e8130>",
                "self.obj": "0        949\n1        198\n2        471\n3        387\n4        659\n        ... \n99995    565\n99996    661\n99997    617\n99998    914\n99999    236\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  4,   6,   6, ..., 986, 994, 996])",
                "sorter": "array([13778, 26122, 37714, ..., 17721, 40806, 32802])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nt    2015-08-29    348\ns    2015-08-26    325\nj    2015-08-23    309\nb    2015-08-29    302\np    2015-08-23    325\n                  ... \nm    2015-08-23    297\nc    2015-08-23    320\nd    2015-09-01    314\nu    2015-08-23    338\nx    2015-08-23    312\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1cf040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1cf5b0>",
                "self.obj": "0        949.0\n1        198.0\n2        471.0\n3        387.0\n4        659.0\n         ...  \n99995    565.0\n99996    661.0\n99997    617.0\n99998    914.0\n99999    236.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.98000000e+02,  9.98000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 48608, 64161, 86071])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9521, 13212, 16854, 20440, 24042, 27661, 31333, 34969,\n       38525, 42203, 45823, 49524, 53133, 56735, 60380, 63936, 67481,\n       71104, 74641, 78143, 81793, 85474, 89105, 92691, 96340])",
                "inc": "array([1, 0, 0, ..., 0, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([991, 946, 964, 940, 943, 947, 956, 958, 956, 938, 962, 955, 946,\n       958, 956, 963, 949, 958, 948, 952, 949, 963, 970, 962, 949, 957,\n       956])",
                "res": "array([946, 964, 940, 943, 947, 956, 958, 956, 938, 962, 955, 946, 958,\n       956, 963, 949, 958, 948, 952, 949, 963, 970, 962, 949, 957, 956])",
                "ri": "Index(['t', 'j', 'b', 'p', 'z', 'k', 'e', 'r', 'n', 'q', 'y', 'd', 'u', 'x',\n       'a', 'g', 's', 'c', 'i', 'l', 'o', 'w', 'v', 'f', 'h', 'm'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nt    946\nj    964\nb    940\np    943\nz    947\nk    956\ne    958\nr    956\nn    938\nq    962\ny    955\nd    946\nu    958\nx    956\na    963\ng    949\ns    958\nc    948\ni    952\nl    949\no    963\nw    970\nv    962\nf    949\nh    957\nm    956\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b455730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b455fd0>",
                "self.obj": "0     1\n1     3\n2     0\n3     0\n4     6\n     ..\n95    7\n96    5\n97    2\n98    2\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  4,\n        4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  8,  8,  9,  9,\n        9,  9,  9, 10, 10, 10, 10, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13,\n       13, 14, 14, 14, 14, 14, 14, 14, 15, 16, 16, 17, 17, 18, 18, 18, 18,\n       18, 19, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 23, 23, 24,\n       24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25])",
                "_": "26",
                "val": "array([0, 4, 5, 0, 7, 0, 2, 2, 7, 8, 0, 1, 2, 5, 7, 9, 2, 5, 9, 0, 1, 2,\n       4, 7, 1, 8, 8, 2, 3, 7, 1, 3, 4, 5, 5, 6, 7, 6, 7, 7, 9, 2, 1, 4,\n       5, 6, 6, 1, 3, 4, 6, 8, 1, 1, 2, 3, 4, 5, 6, 6, 3, 7, 2, 4, 1, 5,\n       7, 9, 9, 5, 5, 6, 7, 1, 5, 0, 3, 9, 0, 7, 2, 6, 7, 8, 0, 2, 4, 5,\n       5, 8, 8, 0, 1, 2, 3, 3, 3, 5, 8, 9])",
                "sorter": "array([91, 75, 49,  3, 47,  2, 55, 98, 54, 45, 16, 21, 42, 58, 94, 57, 89,\n       38, 46, 32, 72, 82, 28, 84, 34, 22, 53, 97, 40, 12, 67, 30, 64, 18,\n       77, 13, 80, 86,  9, 19, 90, 10, 14, 23, 48, 17, 33, 71, 87, 81, 50,\n       11,  0, 51, 37, 36, 41, 56, 26, 20, 92, 25, 70,  7, 62,  8,  6,  5,\n       31, 43, 96,  4, 59, 68, 24, 83, 29, 63, 65, 44, 69, 39, 95, 52, 78,\n       15, 60, 85, 93, 74, 79, 99, 35, 66,  1, 73, 88, 76, 27, 61])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  3,  5, 10, 16, 19, 24, 27, 30, 32, 37, 41, 42, 47, 52, 59, 60,\n       62, 64, 69, 73, 75, 78, 80, 84, 91])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 2, 4, 6, 3, 5, 2, 3, 2, 4, 3, 1, 4, 5, 6, 1, 2, 2, 4, 3, 2, 3,\n       2, 4, 5, 7])",
                "res": "array([3, 2, 4, 6, 3, 5, 2, 3, 2, 4, 3, 1, 4, 5, 6, 1, 2, 2, 4, 3, 2, 3,\n       2, 4, 5, 7])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    2\nc    4\nd    6\ne    3\nf    5\ng    2\nh    3\ni    2\nj    4\nk    3\nl    1\nm    4\nn    5\no    6\np    1\nq    2\nr    2\ns    4\nt    3\nu    2\nv    3\nw    2\nx    4\ny    5\nz    7\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b455be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b455ac0>",
                "self.obj": "0     1\n1     3\n2     0\n3     0\n4     6\n     ..\n95    7\n96    5\n97    2\n98    2\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 13, 14, 15,\n       16, 17, 18, 19, 20, 20, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29,\n       29, 29, 30, 31, 32, 33, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42,\n       43, 44, 45, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n       58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 73,\n       74, 74, 75, 75, 76, 77, 78, 79, 79, 80, 81, 81, 82, 83, 83])",
                "_": "84",
                "val": "array([5, 4, 0, 0, 7, 2, 8, 2, 0, 7, 1, 2, 5, 7, 9, 0, 2, 5, 9, 0, 7, 1,\n       2, 4, 8, 8, 1, 2, 3, 7, 1, 3, 5, 5, 6, 7, 4, 9, 7, 6, 7, 2, 6, 4,\n       1, 5, 6, 3, 4, 6, 8, 1, 5, 4, 6, 1, 3, 2, 1, 6, 7, 3, 2, 4, 7, 9,\n       1, 5, 9, 5, 7, 6, 5, 5, 1, 3, 9, 0, 0, 7, 8, 2, 7, 6, 0, 5, 5, 8,\n       8, 2, 4, 8, 3, 9, 2, 0, 1, 3, 3, 5])",
                "sorter": "array([49, 75, 91,  3, 47, 98, 45, 55,  2, 54, 21, 42, 58, 94, 57, 16, 89,\n       38, 46, 32, 84, 72, 82, 28, 53, 22, 34, 97, 40, 12, 67, 30, 18, 77,\n       13, 80, 64, 90, 19, 86,  9, 10, 17, 23, 14, 48, 33, 87, 81, 50, 11,\n       71, 56, 41, 26,  0, 36, 37, 51, 20, 25, 92, 70,  7,  6, 31, 62,  8,\n        5, 96, 59,  4, 43, 24, 68, 29, 63, 83, 65, 44, 52, 69, 95, 39, 78,\n       85, 93, 74, 79, 15, 60, 27,  1, 61, 66, 99, 35, 73, 88, 76])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 15, 16, 17,\n       18, 19, 20, 21, 24, 25, 26, 27, 28, 30, 31, 32, 33, 36, 37, 38, 39,\n       41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n       78, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 94, 95, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1,\n       1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1,\n       1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2])",
                "ri": "array of shape 84",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-25    1\n     2015-08-27    1\n     2015-08-28    1\nb    2015-08-27    1\n     2015-09-01    1\n                  ..\nz    2015-08-25    2\n     2015-08-28    1\n     2015-08-30    2\n     2015-08-31    1\n     2015-09-01    2\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b4556a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b455b80>",
                "self.obj": "0     1.0\n1     3.0\n2     0.0\n3     0.0\n4     6.0\n     ... \n95    7.0\n96    5.0\n97    2.0\n98    2.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  3,\n        3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,\n        7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 10, 11, 12, 12, 12, 12, 12,\n       13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 15, 16, 16, 17, 17,\n       18, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23,\n       23, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25])",
                "_": "26",
                "val": "array of shape 100",
                "sorter": "array([35, 69,  1, 18, 86, 52, 91, 75, 49, 47,  3, 45,  2, 55, 98, 54, 16,\n       21, 42, 58, 94, 57, 46, 89, 38, 28, 84, 32, 72, 82, 34, 22, 53, 97,\n       40, 12, 67, 30, 64, 77, 13, 80,  9, 19, 90, 10, 14, 23, 48, 17, 33,\n       71, 87, 81, 50, 11, 26,  0, 51, 37, 36, 41, 56, 20, 92, 25,  7, 70,\n        8, 62,  6,  5, 31, 43, 96,  4, 59, 68, 24, 83, 29, 63, 65, 44, 39,\n       95, 85, 78, 15, 60, 93, 74, 79, 27, 66, 99, 73, 88, 76, 61])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  9, 11, 16, 22, 25, 30, 33, 36, 38, 42, 45, 46, 51, 56, 63, 64,\n       66, 68, 73, 77, 79, 82, 84, 86, 93])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 2, 4, 6, 3, 4, 2, 3, 2, 4, 3, 1, 4, 5, 6, 1, 2, 2, 4, 3, 2,\n       3, 2, 2, 6, 5])",
                "res": "array([3, 2, 4, 6, 3, 4, 2, 3, 2, 4, 3, 1, 4, 5, 6, 1, 2, 2, 4, 3, 2, 3,\n       2, 2, 6, 5])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    2\nc    4\nd    6\ne    3\nf    4\ng    2\nh    3\ni    2\nj    4\nk    3\nl    1\nm    4\nn    5\no    6\np    1\nq    2\nr    2\ns    4\nt    3\nu    2\nv    3\nw    2\nx    2\ny    6\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b178100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b178fd0>",
                "self.obj": "0      1\n1      2\n2      2\n3      9\n4      0\n      ..\n995    6\n996    5\n997    9\n998    6\n999    6\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  42,  87, 134, 172, 216, 247, 283, 322, 352, 397, 436, 465,\n       501, 536, 569, 599, 646, 684, 719, 759, 804, 849, 873, 910, 956])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  8,  9, 10, 10])",
                "res": "array([10, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10,  8,  9, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd     9\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl     9\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw     8\nx     9\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b178d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b178df0>",
                "self.obj": "0      1\n1      2\n2      2\n3      9\n4      0\n      ..\n995    6\n996    5\n997    9\n998    6\n999    6\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "258",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 258",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 258",
                "res": "array of shape 258",
                "ri": "array of shape 258",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    4\n     2015-08-25    1\n     2015-08-26    4\n     2015-08-27    3\n                  ..\nz    2015-08-28    1\n     2015-08-29    5\n     2015-08-30    2\n     2015-08-31    3\n     2015-09-01    4\nName: julie, Length: 258, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b12d400>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b12d6d0>",
                "self.obj": "0      1.0\n1      2.0\n2      2.0\n3      9.0\n4      0.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    6.0\n999    6.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      1.000000e+00\n1      2.000000e+00\n2      2.000000e+00\n3      9.000000e+00\n4      0.000000e+00\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    6.000000e+00\n999    6.000000e+00\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  96, 138, 182, 220, 262, 291, 323, 360, 389, 434, 469, 496,\n       528, 562, 593, 621, 667, 701, 736, 774, 816, 860, 882, 917, 957])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11, 11, 11, 11, 10, 11, 11, 10, 11, 11, 11, 11, 10, 10, 11, 11, 11,\n       11, 11, 11, 11, 10, 11,  9,  7, 10, 11])",
                "res": "array([11, 11, 11, 10, 11, 11, 10, 11, 11, 11, 11, 10, 10, 11, 11, 11, 11,\n       11, 11, 11, 10, 11,  9,  7, 10, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    10\ne    11\nf    11\ng    10\nh    11\ni    11\nj    11\nk    11\nl    10\nm    10\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    10\nv    11\nw     9\nx     7\ny    10\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3ee340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3ee7f0>",
                "self.obj": "0       9\n1       0\n2       4\n3       4\n4       7\n       ..\n9995    6\n9996    6\n9997    7\n9998    1\n9999    6\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 262,  954, 1029, ..., 8668, 8857, 9267])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  364,  742, 1145, 1534, 1889, 2273, 2667, 3057, 3422, 3811,\n       4212, 4579, 4975, 5368, 5770, 6143, 6480, 6858, 7235, 7618, 8025,\n       8411, 8826, 9214, 9610])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0cb430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0cb880>",
                "self.obj": "0       9\n1       0\n2       4\n3       4\n4       7\n       ..\n9995    6\n9996    6\n9997    7\n9998    1\n9999    6\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([1029, 1170, 4601, ..., 4321, 5618, 5717])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27     9\n                   ..\nz    2015-08-28     9\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0b4ee0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0b48e0>",
                "self.obj": "0       9.0\n1       0.0\n2       4.0\n3       4.0\n4       7.0\n       ... \n9995    6.0\n9996    6.0\n9997    7.0\n9998    1.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([ 103,  256,  273, ..., 8668, 8857, 9267])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  924, 1273, 1659, 2016, 2343, 2709, 3079, 3454, 3797, 4158,\n       4543, 4889, 5267, 5639, 6021, 6363, 6684, 7042, 7396, 7753, 8135,\n       8506, 8901, 9271, 9640])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3e8a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3e86d0>",
                "self.obj": "0        7\n1        9\n2        1\n3        2\n4        6\n        ..\n99995    5\n99996    1\n99997    4\n99998    7\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  152,   581,   870, ..., 99111, 99511, 99948])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3951,  7719, 11622, 15445, 19307, 23177, 27006, 30855,\n       34662, 38501, 42460, 46307, 50153, 53991, 57890, 61701, 65538,\n       69373, 73116, 77013, 80888, 84665, 88516, 92398, 96162])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1234d3f10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1234d30d0>",
                "self.obj": "0        7\n1        9\n2        1\n3        2\n4        6\n        ..\n99995    5\n99996    1\n99997    4\n99998    7\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 8058, 14373, 15014, ..., 92260, 92930, 99111])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12417c070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12417c670>",
                "self.obj": "0        7.0\n1        9.0\n2        1.0\n3        2.0\n4        6.0\n        ... \n99995    5.0\n99996    1.0\n99997    4.0\n99998    7.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.00000000e+00,  9.00000000e+00,  9.00000000e+00])",
                "sorter": "array([  103,   256,   273, ..., 96796, 97770, 98610])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9595, 13129, 16795, 20419, 24070, 27726, 31317, 34948,\n       38534, 42143, 45862, 49470, 53079, 56696, 60361, 63934, 67549,\n       71164, 74722, 78396, 82018, 85563, 89186, 92829, 96393])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x123253b80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123253370>",
                "self.obj": "0     33\n1     28\n2      3\n3     81\n4     76\n      ..\n95    43\n96    79\n97    99\n98    25\n99    38\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,\n        4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  8,  8,  8,  9,  9, 10,\n       10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 14, 14, 14, 14, 14,\n       14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17,\n       17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21,\n       21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "25",
                "val": "array([24, 61, 20, 20, 32, 33, 35, 54, 60, 83, 99, 38, 54, 73, 43, 79, 96,\n       82, 30, 38, 57, 74, 36, 46, 77, 98, 60, 71, 15, 67, 93,  5, 86, 14,\n       79, 83, 97, 16, 39, 96, 27, 32, 49, 65, 66,  6, 25, 25, 37, 53, 58,\n       99, 11, 28, 32, 48, 60, 62, 65, 94, 99,  1,  1,  3, 81, 89, 38, 62,\n       92, 60, 64, 73, 96, 98, 17, 36, 41, 79, 90, 20, 27, 66, 23, 39, 66,\n       71, 73, 76, 34, 55, 71,  2,  3, 61, 63, 73, 77, 28, 44, 85])",
                "sorter": "array([47, 12, 41, 44, 30,  0, 33, 72, 50, 18, 11,  6, 70, 75, 95, 68, 89,\n        7, 40, 99, 60, 34, 53, 84, 83, 58, 71, 29, 39, 82, 62, 90, 37,  9,\n       88, 21, 43, 10, 28, 56, 22, 79, 77, 78, 80, 94, 38, 98, 19,  8, 23,\n       97, 66,  1, 93, 73, 86, 49, 31, 54, 55, 20, 35,  2,  3, 59, 85, 46,\n       65, 91, 64, 52, 48, 51, 25, 27, 76, 96, 69, 26, 36, 14, 92, 17, 32,\n       15,  5,  4, 24, 57, 87, 13, 61, 74, 45, 81, 42, 67, 16, 63])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2, 11, 14, 17, 18, 22, 26, 28, 31, 33, 37, 40, 45, 46, 52, 61,\n       66, 69, 74, 79, 82, 88, 91, 97])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 8, 3, 3, 1, 4, 4, 2, 3, 2, 4, 3, 5, 1, 5, 9, 4, 3, 5, 5, 3, 6,\n       3, 6, 3])",
                "res": "array([2, 8, 3, 3, 1, 4, 4, 2, 3, 2, 4, 3, 5, 1, 5, 9, 4, 3, 5, 5, 3, 6,\n       3, 6, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    8\nc    3\nd    3\ne    1\nf    4\ng    4\nh    2\ni    3\nj    2\nk    4\nl    3\nm    5\nn    1\no    5\np    9\nq    4\nr    3\ns    5\nt    5\nu    3\nw    6\nx    3\ny    6\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x123253520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123253a60>",
                "self.obj": "0     33\n1     28\n2      3\n3     81\n4     76\n      ..\n95    43\n96    79\n97    99\n98    25\n99    38\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n       15, 16, 17, 18, 19, 20, 21, 22, 22, 23, 23, 24, 25, 26, 27, 28, 29,\n       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 41, 42, 42, 43,\n       44, 45, 46, 46, 46, 47, 48, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n       57, 58, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70,\n       71, 72, 72, 73, 74, 75, 76, 77, 78, 78, 79, 80, 81, 82, 83])",
                "_": "84",
                "val": "array([24, 61, 20, 99, 33, 35, 60, 32, 83, 20, 54, 73, 54, 38, 96, 79, 43,\n       82, 57, 74, 30, 38, 36, 77, 46, 98, 60, 71, 15, 67, 93, 86,  5, 79,\n       97, 14, 83, 96, 39, 16, 49, 32, 66, 65, 27,  6, 37, 99, 25, 53, 58,\n       25, 32, 48, 94, 99, 60, 11, 28, 65, 62,  3, 81, 89,  1,  1, 62, 38,\n       92, 64, 98, 73, 96, 60, 41, 90, 17, 36, 79, 20, 66, 27, 23, 39, 71,\n       73, 66, 76, 71, 34, 55,  3, 63, 61, 77, 73,  2, 85, 44, 28])",
                "sorter": "array([47, 12, 44, 11,  0, 33, 50, 30, 18, 41, 72, 75, 70,  6, 89, 68, 95,\n        7, 60, 34, 40, 99, 53, 83, 84, 58, 71, 29, 39, 82, 62, 37, 90, 88,\n       43,  9, 21, 56, 28, 10, 77, 79, 80, 78, 22, 94, 19, 97, 38,  8, 23,\n       98, 93, 73, 54, 55, 86, 66,  1, 31, 49,  2,  3, 59, 20, 35, 46, 85,\n       65, 64, 51, 52, 48, 91, 76, 69, 25, 27, 96, 26, 14, 36, 92, 17, 15,\n        5, 32,  4, 87, 24, 57, 61, 45, 74, 42, 81, 13, 63, 16, 67])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  4,  5,  6,  7,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\n       19, 20, 21, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38,\n       39, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 56, 57, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80,\n       81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1,\n       1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1,\n       1, 1, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "ri": "array of shape 84",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-25    1\n     2015-08-28    1\nb    2015-08-23    2\n     2015-08-24    1\n     2015-08-25    1\n                  ..\ny    2015-08-28    1\n     2015-08-29    1\nz    2015-08-25    1\n     2015-08-27    1\n     2015-09-01    1\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3b4b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3b4220>",
                "self.obj": "0     33.0\n1     28.0\n2      3.0\n3     81.0\n4     76.0\n      ... \n95    43.0\n96    79.0\n97    99.0\n98    25.0\n99    38.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  3,  3,  3,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  8,\n        8,  8,  9,  9, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13,\n       14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21,\n       21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "25",
                "val": "array of shape 100",
                "sorter": "array([35,  1, 86, 52, 18, 69, 47, 12, 41, 44, 30,  0, 33, 72, 50, 11,  6,\n       70, 75, 95, 68, 89,  7, 40, 99, 60, 34, 83, 84, 53, 58, 71, 29, 39,\n       82, 62, 90, 37,  9, 88, 21, 43, 28, 10, 56, 22, 79, 77, 78, 80, 94,\n        8, 38, 98, 19, 23, 97, 66, 93, 73, 49, 31, 54, 55, 20,  2,  3, 59,\n       46, 65, 85, 64, 91, 48, 51, 27, 25, 76, 96, 26, 36, 14, 92, 17, 32,\n       15,  5,  4, 24, 57, 87, 45, 13, 61, 74, 81, 42, 67, 16, 63])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  8, 16, 19, 22, 23, 27, 31, 33, 36, 38, 42, 45, 50, 51, 57, 64,\n       68, 71, 75, 79, 82, 88, 91, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 2, 7, 3, 3, 1, 4, 3, 2, 3, 2, 4, 3, 5, 1, 5, 7, 4, 1, 4, 4, 3,\n       6, 3, 6, 3])",
                "res": "array([2, 7, 3, 3, 1, 4, 3, 2, 3, 2, 4, 3, 5, 1, 5, 7, 4, 1, 4, 4, 3, 6,\n       3, 6, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    7\nc    3\nd    3\ne    1\nf    4\ng    3\nh    2\ni    3\nj    2\nk    4\nl    3\nm    5\nn    1\no    5\np    7\nq    4\nr    1\ns    4\nt    4\nu    3\nw    6\nx    3\ny    6\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12325ec70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12325e610>",
                "self.obj": "0      81\n1      90\n2      79\n3      72\n4      57\n       ..\n995    75\n996    41\n997    37\n998    92\n999    28\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  34,  73, 102, 146, 189, 220, 256, 295, 328, 362, 408, 454,\n       495, 537, 591, 637, 672, 708, 750, 783, 823, 860, 897, 921, 958])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([32, 30, 24, 33, 36, 28, 30, 34, 26, 30, 37, 37, 37, 35, 43, 34, 32,\n       30, 31, 28, 35, 28, 34, 20, 34, 32])",
                "res": "array([32, 30, 24, 33, 36, 28, 30, 34, 26, 30, 37, 37, 37, 35, 43, 34, 32,\n       30, 31, 28, 35, 28, 34, 20, 34, 32])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    32\nb    30\nc    24\nd    33\ne    36\nf    28\ng    30\nh    34\ni    26\nj    30\nk    37\nl    37\nm    37\nn    35\no    43\np    34\nq    32\nr    30\ns    31\nt    28\nu    35\nv    28\nw    34\nx    20\ny    34\nz    32\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12325e940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12325e7c0>",
                "self.obj": "0      81\n1      90\n2      79\n3      72\n4      57\n       ..\n995    75\n996    41\n997    37\n998    92\n999    28\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "250",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 250",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 250",
                "res": "array of shape 250",
                "ri": "array of shape 250",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    1\n     2015-08-25    5\n     2015-08-26    7\n     2015-08-27    4\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    3\n     2015-08-31    5\n     2015-09-01    3\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1232289a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123228730>",
                "self.obj": "0      81.0\n1      90.0\n2      79.0\n3      72.0\n4      57.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    92.0\n999    28.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      8.100000e+01\n1      9.000000e+01\n2      7.900000e+01\n3      7.200000e+01\n4      5.700000e+01\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    9.200000e+01\n999    2.800000e+01\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  93, 130, 158, 198, 239, 265, 300, 337, 367, 400, 444, 488,\n       527, 565, 617, 657, 691, 723, 765, 797, 837, 872, 903, 927, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([38, 28, 27, 22, 28, 27, 17, 27, 27, 22, 26, 33, 31, 35, 29, 35, 30,\n       27, 24, 26, 28, 33, 26, 26, 19, 26, 26])",
                "res": "array([28, 27, 22, 28, 27, 17, 27, 27, 22, 26, 33, 31, 35, 29, 35, 30, 27,\n       24, 26, 28, 33, 26, 26, 19, 26, 26])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    28\nb    27\nc    22\nd    28\ne    27\nf    17\ng    27\nh    27\ni    22\nj    26\nk    33\nl    31\nm    35\nn    29\no    35\np    30\nq    27\nr    24\ns    26\nt    28\nu    33\nv    26\nw    26\nx    19\ny    26\nz    26\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x124173bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1241730d0>",
                "self.obj": "0       99\n1       81\n2       20\n3        2\n4        5\n        ..\n9995    84\n9996    68\n9997    45\n9998    73\n9999    38\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([4711, 5002, 5095, ..., 4079, 7282, 8338])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  379,  744, 1103, 1522, 1915, 2310, 2703, 3057, 3424, 3789,\n       4178, 4578, 4973, 5348, 5754, 6136, 6539, 6947, 7342, 7743, 8109,\n       8516, 8877, 9272, 9640])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 99,  97,  97,  98,  97,  97,  97,  93,  98,  96,  97,  98,  96,\n        98, 100,  99, 100, 100,  96,  98,  96,  98,  99, 100,  99,  97])",
                "res": "array([ 99,  97,  97,  98,  97,  97,  97,  93,  98,  96,  97,  98,  96,\n        98, 100,  99, 100, 100,  96,  98,  96,  98,  99, 100,  99,  97])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     99\nb     97\nc     97\nd     98\ne     97\nf     97\ng     97\nh     93\ni     98\nj     96\nk     97\nl     98\nm     96\nn     98\no    100\np     99\nq    100\nr    100\ns     96\nt     98\nu     96\nv     98\nw     99\nx    100\ny     99\nz     97\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x124173970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124173190>",
                "self.obj": "0       99\n1       81\n2       20\n3        2\n4        5\n        ..\n9995    84\n9996    68\n9997    45\n9998    73\n9999    38\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 3, 16, 23, ..., 92, 94, 95])",
                "sorter": "array([3361, 3097, 7429, ..., 1283, 4431, 5021])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    23\n     2015-08-24    39\n     2015-08-25    30\n     2015-08-26    32\n     2015-08-27    37\n                   ..\nz    2015-08-28    33\n     2015-08-29    26\n     2015-08-30    35\n     2015-08-31    30\n     2015-09-01    20\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1232167f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x123216a90>",
                "self.obj": "0       99.0\n1       81.0\n2       20.0\n3        2.0\n4        5.0\n        ... \n9995    84.0\n9996    68.0\n9997    45.0\n9998    73.0\n9999    38.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([ 103,  256,  273, ..., 4079, 7282, 8338])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  951, 1289, 1630, 2025, 2395, 2773, 3146, 3472, 3807, 4149,\n       4514, 4882, 5253, 5607, 5982, 6352, 6731, 7108, 7480, 7853, 8205,\n       8590, 8929, 9308, 9660])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 100,  96,  94,  97,  95,  96,  94,  90,  94,  96,  94,  96,\n        93,  95,  99,  96,  96,  97,  93,  98,  92,  99,  96,  99,  96,\n        96])",
                "res": "array([100,  96,  94,  97,  95,  96,  94,  90,  94,  96,  94,  96,  93,\n        95,  99,  96,  96,  97,  93,  98,  92,  99,  96,  99,  96,  96])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb     96\nc     94\nd     97\ne     95\nf     96\ng     94\nh     90\ni     94\nj     96\nk     94\nl     96\nm     93\nn     95\no     99\np     96\nq     96\nr     97\ns     93\nt     98\nu     92\nv     99\nw     96\nx     99\ny     96\nz     96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0cbaf0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0cb9d0>",
                "self.obj": "0        99\n1         8\n2        69\n3        34\n4         6\n         ..\n99995    94\n99996    42\n99997    97\n99998    67\n99999    38\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 1304,  7432,  8811, ..., 94577, 95143, 97518])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3811,  7641, 11494, 15320, 19077, 22892, 26695, 30606,\n       34466, 38241, 42144, 45963, 49744, 53637, 57464, 61401, 65222,\n       69095, 73067, 76982, 80789, 84583, 88389, 92272, 96064])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b0cb730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0cb2b0>",
                "self.obj": "0        99\n1         8\n2        69\n3        34\n4         6\n         ..\n99995    94\n99996    42\n99997    97\n99998    67\n99999    38\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([25616, 31108, 31772, ..., 31655, 60007, 97518])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     98\n     2015-08-24     97\n     2015-08-25    100\n     2015-08-26     99\n     2015-08-27     97\n                  ... \nz    2015-08-28     97\n     2015-08-29     98\n     2015-08-30    100\n     2015-08-31     98\n     2015-09-01     98\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b446cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b446370>",
                "self.obj": "0        99.0\n1         8.0\n2        69.0\n3        34.0\n4         6.0\n         ... \n99995    94.0\n99996    42.0\n99997    97.0\n99998    67.0\n99999    38.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.90000000e+01,  9.90000000e+01,  9.90000000e+01])",
                "sorter": "array([  103,   256,   273, ..., 94577, 95143, 97518])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9451, 13070, 16688, 20281, 23815, 27415, 30990, 34693,\n       38318, 41883, 45537, 49113, 52667, 56316, 59935, 63625, 67241,\n       70891, 74619, 78292, 81895, 85477, 89047, 92704, 96301])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x124173670>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1241732e0>",
                "self.obj": "0     381\n1     767\n2     844\n3     407\n4      19\n     ... \n95    646\n96    312\n97    220\n98     84\n99    353\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  1,  2,  3,  3,  3,  3,  4,  4,  4,  4,\n        5,  5,  5,  5,  5,  6,  6,  7,  7,  7,  8,  8,  9,  9,  9, 10, 10,\n       10, 11, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14,\n       14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 17, 17, 17,\n       18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21, 21,\n       21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24])",
                "_": "25",
                "val": "array of shape 100",
                "sorter": "array([45, 68, 77, 31, 28, 14, 38,  2, 95, 78,  7, 99,  0, 80, 79, 94, 48,\n        9, 21, 32, 84, 23, 70, 61, 22, 64, 52, 96, 86, 98, 62, 37, 89, 67,\n       43, 92, 69, 55,  8, 57,  5,  3, 13, 63, 54, 49, 12, 73, 65, 51, 30,\n       41, 47, 66, 50, 82, 91, 26, 87, 81, 60, 88, 19, 75, 17, 39, 24, 85,\n       34, 76, 59, 53,  6, 11, 35, 44, 40, 15, 33, 10, 18, 90, 25, 72, 56,\n       16,  4, 97, 83, 36, 74, 29, 42, 93, 71, 27, 58, 20, 46,  1])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  2,  8,  9, 13, 17, 22, 24, 27, 29, 32, 35, 38, 40, 46, 55, 63,\n       65, 68, 72, 78, 83, 86, 91, 95])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 6, 1, 4, 4, 5, 2, 3, 2, 3, 3, 3, 2, 6, 9, 8, 2, 3, 4, 6, 5, 3,\n       5, 4, 5])",
                "res": "array([2, 6, 1, 4, 4, 5, 2, 3, 2, 3, 3, 3, 2, 6, 9, 8, 2, 3, 4, 6, 5, 3,\n       5, 4, 5])",
                "ri": "Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    6\nd    1\ne    4\nf    4\ng    5\nh    2\ni    3\nj    2\nk    3\nl    3\nm    3\nn    2\no    6\np    9\nq    8\nr    2\ns    3\nt    4\nu    6\nv    5\nw    3\nx    5\ny    4\nz    5\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227f10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227f70>",
                "self.obj": "0     381\n1     767\n2     844\n3     407\n4      19\n     ... \n95    646\n96    312\n97    220\n98     84\n99    353\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 10, 11, 12, 13, 14,\n       15, 16, 16, 17, 18, 19, 20, 21, 21, 22, 23, 24, 25, 26, 26, 27, 28,\n       28, 29, 29, 30, 31, 32, 33, 33, 34, 34, 35, 36, 37, 38, 39, 40, 40,\n       41, 41, 41, 42, 43, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,\n       55, 56, 57, 58, 59, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 71, 72, 72, 73, 74, 75, 76, 77, 78, 79, 80, 80, 81])",
                "_": "82",
                "val": "array of shape 100",
                "sorter": "array([68, 45,  2, 77, 28, 31, 38, 14, 95,  0, 78,  7, 99, 94, 79, 80, 48,\n        9, 21, 23, 32, 84, 70, 61, 64, 52, 22, 96, 86, 98, 62, 37, 67, 89,\n       43, 69, 55, 92, 57,  8,  5, 13, 63, 54, 49,  3, 47, 51, 12, 73, 50,\n       65, 41, 66, 30, 26, 60, 19, 82, 91, 88, 81, 87, 75, 17, 24, 39, 85,\n       59, 34, 76, 53,  6, 15, 11, 40, 35, 44, 25, 90, 10, 18, 33, 16, 56,\n       72, 97, 83, 36, 74,  4, 42, 93, 29, 71,  1, 27, 58, 20, 46])",
                "val.dtype": "dtype('int64')",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  7,  8,  9, 10, 11, 13, 14, 15, 16, 17, 18,\n       20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40,\n       42, 44, 45, 46, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 61, 62, 63,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 78, 79, 80, 81, 82,\n       83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "res": "array([1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1])",
                "ri": "array of shape 82",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-31    1\nb    2015-08-23    1\n     2015-08-25    1\n     2015-08-26    1\n                  ..\ny    2015-08-29    1\nz    2015-08-23    1\n     2015-08-28    1\n     2015-08-29    2\n     2015-09-01    1\nName: julie, Length: 82, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x12325e0d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x12325e670>",
                "self.obj": "0     381.0\n1     767.0\n2     844.0\n3     407.0\n4      19.0\n      ...  \n95    646.0\n96    312.0\n97    220.0\n98     84.0\n99    353.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  1,  1,  1,  1,  1,  1,  2,  3,  3,\n        3,  3,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  7,  7,  8,  9,\n        9,  9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14,\n       14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21,\n       21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "25",
                "val": "array of shape 100",
                "sorter": "array([35, 86,  1, 52, 69, 18, 45, 68, 28, 77, 31, 14, 38,  2, 95,  7, 78,\n       99,  0, 80, 79, 94, 48,  9, 84, 21, 32, 23, 70, 61, 64, 22, 96, 98,\n       62, 37, 89, 67, 43, 92, 55,  8, 57,  5,  3, 13, 63, 54, 49, 47, 65,\n       66, 12, 73, 51, 30, 41, 50, 26, 82, 91, 87, 81, 60, 88, 19, 75, 17,\n       85, 39, 24, 34, 76, 59, 53,  6, 11, 44, 40, 15, 33, 10, 90, 25, 72,\n       56, 16, 83,  4, 97, 36, 74, 29, 42, 93, 71, 27, 46, 58, 20])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 6,  8, 14, 15, 19, 23, 28, 30, 32, 33, 36, 39, 41, 43, 49, 58, 66,\n       68, 71, 75, 80, 84, 87, 92, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 2, 6, 1, 4, 4, 4, 2, 2, 1, 3, 3, 2, 2, 6, 7, 8, 2, 3, 4, 5, 4,\n       3, 5, 4, 3])",
                "res": "array([2, 6, 1, 4, 4, 4, 2, 2, 1, 3, 3, 2, 2, 6, 7, 8, 2, 3, 4, 5, 4, 3,\n       5, 4, 3])",
                "ri": "Index(['a', 'b', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    2\nb    6\nd    1\ne    4\nf    4\ng    4\nh    2\ni    2\nj    1\nk    3\nl    3\nm    2\nn    2\no    6\np    7\nq    8\nr    2\ns    3\nt    4\nu    5\nv    4\nw    3\nx    5\ny    4\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b124a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b124dc0>",
                "self.obj": "0      225\n1      985\n2      938\n3      382\n4      636\n      ... \n995    574\n996    773\n997    149\n998    354\n999    463\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array([  0,  36,  83, 113, 145, 182, 235, 278, 312, 354, 388, 424, 447,\n       484, 513, 550, 584, 626, 666, 713, 749, 799, 833, 868, 906, 954])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([35, 46, 30, 32, 36, 52, 43, 33, 41, 34, 36, 23, 37, 29, 36, 34, 42,\n       39, 45, 36, 48, 34, 34, 38, 47, 45])",
                "res": "array([35, 46, 30, 32, 36, 52, 43, 33, 41, 34, 36, 23, 37, 29, 36, 34, 42,\n       39, 45, 36, 48, 34, 34, 38, 47, 45])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    35\nb    46\nc    30\nd    32\ne    36\nf    52\ng    43\nh    33\ni    41\nj    34\nk    36\nl    23\nm    37\nn    29\no    36\np    34\nq    42\nr    39\ns    45\nt    36\nu    48\nv    34\nw    34\nx    38\ny    47\nz    45\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x124173a00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x124173610>",
                "self.obj": "0      225\n1      985\n2      938\n3      382\n4      636\n      ... \n995    574\n996    773\n997    149\n998    354\n999    463\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "255",
                "val": "array of shape 1000",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 255",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 255",
                "ri": "array of shape 255",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    8\n     2015-08-26    4\n     2015-08-27    2\n                  ..\nz    2015-08-26    6\n     2015-08-27    3\n     2015-08-30    3\n     2015-08-31    9\n     2015-09-01    6\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b3e83a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b3e8a00>",
                "self.obj": "0      225.0\n1      985.0\n2      938.0\n3      382.0\n4      636.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    354.0\n999    463.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "26",
                "val": "array of shape 1000",
                "self.obj": "0      2.250000e+02\n1      9.850000e+02\n2      9.380000e+02\n3      3.820000e+02\n4      6.360000e+02\n           ...     \n995   -9.223372e+18\n996   -9.223372e+18\n997   -9.223372e+18\n998    3.540000e+02\n999    4.630000e+02\nName: julie, Length: 1000, dtype: float64",
                "sorter": "array of shape 1000",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 59,  93, 137, 167, 198, 233, 280, 322, 352, 392, 426, 461, 481,\n       515, 541, 572, 605, 646, 685, 730, 765, 813, 845, 878, 912, 956])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([51, 27, 40, 28, 28, 34, 43, 31, 27, 34, 29, 24, 20, 28, 22, 25, 28,\n       36, 35, 39, 32, 39, 27, 30, 27, 36, 39])",
                "res": "array([27, 40, 28, 28, 34, 43, 31, 27, 34, 29, 24, 20, 28, 22, 25, 28, 36,\n       35, 39, 32, 39, 27, 30, 27, 36, 39])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\nb    40\nc    28\nd    28\ne    34\nf    43\ng    31\nh    27\ni    34\nj    29\nk    24\nl    20\nm    28\nn    22\no    25\np    28\nq    36\nr    35\ns    39\nt    32\nu    39\nv    27\nw    30\nx    27\ny    36\nz    39\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b227280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b227df0>",
                "self.obj": "0       164\n1       757\n2       154\n3       990\n4        48\n       ... \n9995    947\n9996    991\n9997    477\n9998    520\n9999    692\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  2,   2,   3, ..., 993, 995, 997])",
                "sorter": "array([2795, 5339, 9442, ..., 2772, 7021,  609])",
                "val.dtype": "dtype('int64')",
                "idx": "array([   0,  405,  791, 1166, 1521, 1918, 2301, 2707, 3107, 3459, 3845,\n       4222, 4604, 4968, 5356, 5732, 6124, 6545, 6945, 7329, 7721, 8103,\n       8467, 8854, 9245, 9597])",
                "inc": "array([1, 0, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([337, 322, 318, 300, 326, 317, 333, 330, 302, 325, 312, 325, 309,\n       325, 309, 329, 339, 333, 314, 328, 327, 306, 320, 331, 296, 334])",
                "res": "array([337, 322, 318, 300, 326, 317, 333, 330, 302, 325, 312, 325, 309,\n       325, 309, 329, 339, 333, 314, 328, 327, 306, 320, 331, 296, 334])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    337\nb    322\nc    318\nd    300\ne    326\nf    317\ng    333\nh    330\ni    302\nj    325\nk    312\nl    325\nm    309\nn    325\no    309\np    329\nq    339\nr    333\ns    314\nt    328\nu    327\nv    306\nw    320\nx    331\ny    296\nz    334\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1a43d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1a4400>",
                "self.obj": "0       164\n1       757\n2       154\n3       990\n4        48\n       ... \n9995    947\n9996    991\n9997    477\n9998    520\n9999    692\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([ 32,  41,  60, ..., 931, 987, 997])",
                "sorter": "array([2485, 2615, 4970, ..., 9630, 3881,  609])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    43\n     2015-08-24    49\n     2015-08-25    34\n     2015-08-26    45\n     2015-08-27    37\n                   ..\nz    2015-08-28    42\n     2015-08-29    37\n     2015-08-30    37\n     2015-08-31    44\n     2015-09-01    33\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x1241732b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x1241734f0>",
                "self.obj": "0       164.0\n1       757.0\n2       154.0\n3       990.0\n4        48.0\n        ...  \n9995    947.0\n9996    991.0\n9997    477.0\n9998    520.0\n9999    692.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.91000000e+02,  9.95000000e+02,  9.97000000e+02])",
                "sorter": "array([ 103,  256,  273, ..., 2100, 7021,  609])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 589,  973, 1347, 1707, 2036, 2417, 2778, 3154, 3527, 3860, 4215,\n       4571, 4934, 5270, 5629, 5980, 6341, 6739, 7115, 7474, 7850, 8210,\n       8554, 8916, 9281, 9623])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([394, 277, 279, 261, 255, 272, 261, 278, 266, 257, 248, 259, 268,\n       237, 267, 259, 271, 290, 276, 254, 273, 267, 257, 255, 264, 255,\n       257])",
                "res": "array([277, 279, 261, 255, 272, 261, 278, 266, 257, 248, 259, 268, 237,\n       267, 259, 271, 290, 276, 254, 273, 267, 257, 255, 264, 255, 257])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    277\nb    279\nc    261\nd    255\ne    272\nf    261\ng    278\nh    266\ni    257\nj    248\nk    259\nl    268\nm    237\nn    267\no    259\np    271\nq    290\nr    276\ns    254\nt    273\nu    267\nv    257\nw    255\nx    264\ny    255\nz    257\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b260cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b2605b0>",
                "self.obj": "0        692\n1        658\n2          4\n3        913\n4        632\n        ... \n99995    368\n99996    296\n99997    275\n99998    579\n99999    353\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([10323, 17542, 33582, ..., 38873, 53374, 67094])",
                "val.dtype": "dtype('int64')",
                "idx": "array([    0,  3821,  7686, 11563, 15434, 19302, 23186, 27166, 30994,\n       34842, 38649, 42537, 46371, 50285, 54105, 57879, 61710, 65483,\n       69228, 73207, 77045, 80797, 84621, 88423, 92278, 96153])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([974, 983, 971, 986, 981, 985, 984, 981, 976, 977, 977, 984, 981,\n       972, 966, 976, 976, 979, 982, 976, 978, 976, 977, 976, 982, 977])",
                "res": "array([974, 983, 971, 986, 981, 985, 984, 981, 976, 977, 977, 984, 981,\n       972, 966, 976, 976, 979, 982, 976, 978, 976, 977, 976, 982, 977])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    974\nb    983\nc    971\nd    986\ne    981\nf    985\ng    984\nh    981\ni    976\nj    977\nk    977\nl    984\nm    981\nn    972\no    966\np    976\nq    976\nr    979\ns    982\nt    976\nu    978\nv    976\nw    977\nx    976\ny    982\nz    977\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b1ad190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b1ad0d0>",
                "self.obj": "0        692\n1        658\n2          4\n3        913\n4        632\n        ... \n99995    368\n99996    296\n99997    275\n99998    579\n99999    353\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "260",
                "val": "array([  0,   1,   1, ..., 993, 994, 998])",
                "sorter": "array([48510, 18315, 25343, ..., 51295, 17320, 10616])",
                "val.dtype": "dtype('int64')",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 0, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    307\n     2015-08-24    320\n     2015-08-25    313\n     2015-08-26    359\n     2015-08-27    318\n                  ... \nz    2015-08-28    343\n     2015-08-29    317\n     2015-08-30    318\n     2015-08-31    302\n     2015-09-01    294\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x11b088eb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x11b0883a0>",
                "self.obj": "0        692.0\n1        658.0\n2          4.0\n3        913.0\n4        632.0\n         ...  \n99995    368.0\n99996    296.0\n99997    275.0\n99998    579.0\n99999    353.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "26",
                "val": "array([-9.22337204e+18, -9.22337204e+18, -9.22337204e+18, ...,\n        9.99000000e+02,  9.99000000e+02,  9.99000000e+02])",
                "sorter": "array([  103,   256,   273, ..., 38873, 53374, 67094])",
                "val.dtype": "dtype('float64')",
                "idx": "array([ 5883,  9481, 13108, 16753, 20404, 24075, 27739, 31506, 35127,\n       38732, 42334, 45982, 49592, 53263, 56869, 60424, 64045, 67576,\n       71102, 74835, 78409, 81928, 85537, 89122, 92750, 96377])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([992, 952, 949, 953, 960, 952, 964, 969, 954, 950, 947, 942, 964,\n       956, 948, 935, 949, 946, 955, 962, 948, 943, 951, 949, 955, 965,\n       958])",
                "res": "array([952, 949, 953, 960, 952, 964, 969, 954, 950, 947, 942, 964, 956,\n       948, 935, 949, 946, 955, 962, 948, 943, 951, 949, 955, 965, 958])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    952\nb    949\nc    953\nd    960\ne    952\nf    964\ng    969\nh    954\ni    950\nj    947\nk    942\nl    964\nm    956\nn    948\no    935\np    949\nq    946\nr    955\ns    962\nt    948\nu    943\nv    951\nw    949\nx    955\ny    965\nz    958\nName: julie, dtype: int64"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "self.obj": "Series",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "int",
                "val": "ndarray",
                "sorter": "ndarray",
                "val.dtype": "dtype",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c41d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c41b80>",
                "self.obj": "0     6\n1     3\n2     2\n3     4\n4     5\n     ..\n95    7\n96    0\n97    7\n98    7\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,\n        3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,  7,\n        7,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9,  9, 10, 10, 10, 10,\n       11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13,\n       13, 14, 14, 14, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 18,\n       18, 18, 19, 19, 19, 20, 20, 20, 21, 22, 22, 23, 23, 23, 24])",
                "_": "array([6, 3, 2, 4, 5, 8, 7, 0, 1, 9])",
                "val": "array([6, 3, 2, 4, 5, 2, 2, 3, 4, 5, 2, 8, 7, 0, 5, 3, 5, 8, 1, 9, 4, 8,\n       0, 5, 4, 7, 5, 5, 2, 4, 8, 3, 6, 9, 3, 9, 0, 1, 5, 7, 3, 2, 6, 2,\n       8, 9, 8, 4, 3, 5, 3, 4, 9, 3, 3, 2, 5, 2, 0, 9, 6, 0, 2, 7, 7, 7,\n       6, 4, 3, 7, 6, 5, 8, 6, 6, 9, 9, 6, 0, 1, 6, 0, 4, 3, 9, 8, 0, 4,\n       8, 0, 4, 8, 2, 3, 8, 7, 0, 7, 7, 0])",
                "codes": "array([0, 0, 4, 5, 7, 7, 1, 1, 1, 5, 5, 1, 2, 3, 5, 6, 7, 1, 3, 0, 3, 4,\n       2, 2, 7, 1, 2, 3, 5, 7, 1, 1, 2, 3, 5, 5, 6, 6, 4, 6, 9, 9, 2, 3,\n       3, 8, 9, 0, 1, 5, 6, 0, 5, 6, 7, 9, 0, 0, 2, 4, 4, 6, 9, 4, 4, 6,\n       7, 8, 9, 2, 4, 4, 0, 2, 3, 4, 5, 9, 2, 4, 5, 6, 3, 3, 1, 1, 7, 3,\n       7, 9, 2, 8, 9, 1, 7, 7, 0, 1, 6, 0])",
                "sorter": "array([ 0, 80, 56, 46, 86, 96,  1, 48, 54, 85, 94, 68,  2, 20, 91, 65, 22,\n       15,  3, 73, 90,  4,  5, 55, 81, 31,  6,  8, 21, 61,  7, 50, 28, 24,\n       30, 72, 12, 69,  9, 95, 45, 76, 10, 51, 82, 18, 35, 32, 53, 11, 98,\n       42, 17, 97, 13, 33, 60, 66, 57, 14, 71, 39, 75, 16, 49, 25, 78, 79,\n       19, 92, 23, 38, 74, 41, 87, 26, 44, 59, 43, 27, 88, 64, 29, 67, 34,\n       83, 89, 47, 36, 52, 62, 37, 84, 40, 58, 99, 70, 93, 63, 77])",
                "idx": "array([ 0,  6, 11, 17, 19, 22, 25, 30, 38, 42, 47, 51, 56, 63, 69, 72, 78,\n       82, 84, 87, 90, 93, 94, 96, 99])",
                "inc": "array([1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 2, 6, 2, 3, 2, 5, 5, 3, 4, 4, 5, 5, 5, 2, 6, 4, 1, 2, 3, 3, 1,\n       1, 3, 1])",
                "res": "array([4, 2, 6, 2, 3, 2, 5, 5, 3, 4, 4, 5, 5, 5, 2, 6, 4, 1, 2, 3, 3, 1,\n       1, 3, 1])",
                "ri": "Index(['h', 'g', 'v', 'u', 'z', 'b', 'q', 'n', 'm', 'x', 'k', 'y', 'f', 'j',\n       'w', 'l', 'o', 'e', 's', 'i', 'r', 'p', 'd', 'a', 'c'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    4\ng    2\nv    6\nu    2\nz    3\nb    2\nq    5\nn    5\nm    3\nx    4\nk    4\ny    5\nf    5\nj    5\nw    2\nl    6\no    4\ne    1\ns    2\ni    3\nr    3\np    1\nd    1\na    3\nc    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c41e80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c410d0>",
                "self.obj": "0     6\n1     3\n2     2\n3     4\n4     5\n     ..\n95    7\n96    0\n97    7\n98    7\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 11, 11, 12,\n       12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 19, 19, 20, 20, 21, 22, 22,\n       23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54,\n       55, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n       71, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84])",
                "_": "array([6, 3, 2, 4, 5, 8, 7, 0, 1, 9])",
                "val": "array([6, 3, 2, 4, 5, 2, 2, 3, 4, 5, 2, 8, 7, 0, 5, 3, 5, 8, 1, 9, 4, 8,\n       0, 5, 4, 7, 5, 5, 2, 4, 8, 3, 6, 9, 3, 9, 0, 1, 5, 7, 3, 2, 6, 2,\n       8, 9, 8, 4, 3, 5, 3, 4, 9, 3, 3, 2, 5, 2, 0, 9, 6, 0, 2, 7, 7, 7,\n       6, 4, 3, 7, 6, 5, 8, 6, 6, 9, 9, 6, 0, 1, 6, 0, 4, 3, 9, 8, 0, 4,\n       8, 0, 4, 8, 2, 3, 8, 7, 0, 7, 7, 0])",
                "codes": "array([0, 4, 1, 1, 2, 3, 4, 2, 2, 1, 3, 4, 6, 2, 5, 6, 1, 3, 6, 7, 4, 1,\n       4, 5, 8, 4, 7, 8, 9, 1, 3, 5, 5, 7, 4, 6, 4, 4, 2, 3, 5, 1, 0, 9,\n       1, 9, 7, 8, 4, 6, 1, 2, 0, 2, 5, 9, 5, 3, 9, 3, 1, 1, 5, 2, 2, 7,\n       9, 0, 7, 2, 1, 6, 6, 6, 0, 3, 6, 0, 4, 5, 0, 0, 9, 9, 0, 0, 7, 7,\n       3, 1, 9, 5, 7, 3, 5, 7, 3, 2, 6, 7])",
                "sorter": "array([ 0, 56,  1, 48,  2,  3,  4,  5,  6,  7,  8,  9, 95, 10, 11, 98, 50,\n       24, 12, 13, 14, 15, 16, 17, 18, 49, 78, 79, 19, 68, 20, 21, 91, 22,\n       23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 52, 51, 53, 54, 94, 55, 57, 58, 59, 60,\n       61, 62, 93, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77,\n       80, 96, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 97, 99])",
                "idx": "array([ 0,  2,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 16, 19, 20, 21, 22,\n       23, 24, 25, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63,\n       64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\n       82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 4, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 1, 4, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 85",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-28    2\ng    2015-08-25    1\nv    2015-08-23    1\nu    2015-08-26    1\nz    2015-08-27    1\n                  ..\ns    2015-08-29    1\nz    2015-08-26    1\nw    2015-09-01    1\ny    2015-08-25    1\nd    2015-09-01    1\nName: julie, Length: 85, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c46f40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c46d90>",
                "self.obj": "0     6.0\n1     3.0\n2     2.0\n3     4.0\n4     5.0\n     ... \n95    7.0\n96    0.0\n97    7.0\n98    7.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n        2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10,\n       10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13,\n       13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 18,\n       18, 19, 19, 19, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24])",
                "_": "array([6., 3., 2., 4., 5., 8., 7., 0., 1., 9.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  6,  7,  8,  9,  9, -1,  0,  0,  4,  7, -1,  1,  2,  3,  5,  7,\n        1,  3,  0,  3,  4,  2,  2,  7, -1,  1,  2,  5,  7, -1, -1,  1,  3,\n        5,  5,  6, -1, -1,  6,  9,  2,  3,  3,  0,  1,  5,  6,  0,  5,  6,\n        7,  9, -1,  0,  2,  4,  4,  6,  9,  4,  4,  6,  7,  8,  9,  2,  4,\n        4, -1,  0,  2,  3,  5,  9, -1, -1,  2,  5,  3,  3, -1,  1,  7, -1,\n        7, -1,  2,  8,  1, -1,  1,  1,  5,  7,  7,  0,  1,  6,  0])",
                "sorter": "array([ 1, 69, 86, 18, 35, 52, 46,  0, 80, 56, 96, 65, 68,  2, 20, 91, 22,\n       15,  3, 73, 90,  4,  5, 55, 81,  8, 31,  6, 21, 61,  7, 28, 50, 24,\n       30, 72, 12,  9, 45, 95, 76, 10, 51, 82, 32, 53, 11, 98, 42, 17, 97,\n       13, 33, 66, 60, 57, 14, 71, 39, 75, 16, 49, 25, 78, 79, 19, 92, 23,\n       38, 26, 74, 41, 87, 44, 59, 27, 64, 43, 88, 29, 67, 83, 34, 89, 47,\n       36, 84, 62, 37, 40, 85, 48, 54, 94, 58, 99, 70, 93, 63, 77])",
                "idx": "array([ 6, 11, 17, 19, 22, 25, 30, 37, 41, 44, 48, 53, 60, 66, 69, 75, 79,\n       81, 84, 86, 89, 90, 94, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 4, 6, 2, 3, 2, 5, 5, 3, 2, 4, 5, 6, 5, 2, 6, 3, 1, 3, 2, 3, 1,\n       3, 1, 3, 1])",
                "res": "array([4, 6, 2, 3, 2, 5, 5, 3, 2, 4, 5, 6, 5, 2, 6, 3, 1, 3, 2, 3, 1, 3,\n       1, 3, 1])",
                "ri": "Index(['h', 'v', 'u', 'z', 'b', 'q', 'n', 'm', 'x', 'k', 'y', 'f', 'j', 'w',\n       'l', 'o', 'e', 's', 'i', 'r', 'p', 'g', 'd', 'a', 'c'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    4\nv    6\nu    2\nz    3\nb    2\nq    5\nn    5\nm    3\nx    2\nk    4\ny    5\nf    6\nj    5\nw    2\nl    6\no    3\ne    1\ns    3\ni    2\nr    3\np    1\ng    3\nd    1\na    3\nc    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c46bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c46e80>",
                "self.obj": "0     6.0\n1     3.0\n2     2.0\n3     4.0\n4     5.0\n     ... \n95    7.0\n96    0.0\n97    7.0\n98    7.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  4,  5,  6,\n        7,  7,  8,  9,  9, 10, 10, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16,\n       17, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47,\n       48, 49, 50, 51, 52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "array([6., 3., 2., 4., 5., 8., 7., 0., 1., 9.])",
                "val": "array of shape 100",
                "codes": "array([ 0,  1,  1,  3,  6,  7,  8,  9,  9,  0,  4,  2,  4,  2,  2, -1, -1,\n       -1,  6,  2,  5,  6,  1,  3,  6,  7,  4,  1,  4,  5,  4,  7,  8,  9,\n        1,  3,  5,  5,  7,  4,  6, -1, -1, -1,  3,  5,  1,  0,  9,  1,  7,\n        8,  4,  6,  2,  0,  2,  5, -1, -1, -1,  1,  3,  1,  1,  5,  2,  2,\n        7,  9,  0,  7,  2,  1,  6, -1, -1, -1,  3,  0,  4,  5,  0,  0,  9,\n        9,  0,  7,  7,  3, -1, -1, -1,  3,  5,  7,  3,  2,  6,  7])",
                "sorter": "array([77,  1, 40,  3, 69, 86, 18, 35, 52,  0, 56,  2,  4,  5,  6,  7,  8,\n        9, 95, 10, 11, 98, 50, 24, 12, 13, 14, 15, 16, 17, 49, 78, 79, 19,\n       68, 20, 21, 91, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36,\n       37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 94, 55, 57,\n       58, 59, 60, 61, 62, 93, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75,\n       76, 80, 96, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 97, 99])",
                "idx": "array([ 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30,\n       34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70,\n       71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 4, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 4, 2, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-28    2\nv    2015-08-23    1\nz    2015-08-27    1\nb    2015-08-28    1\nq    2015-08-24    1\n                  ..\ns    2015-08-29    1\nz    2015-08-26    1\nw    2015-09-01    1\ny    2015-08-25    1\nd    2015-09-01    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c41d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c41400>",
                "self.obj": "0     6.0\n1     3.0\n2     2.0\n3     4.0\n4     5.0\n     ... \n95    7.0\n96    0.0\n97    7.0\n98    7.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n        2,  2,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,\n        6,  6,  6,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10,\n       10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 13, 13,\n       13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 18,\n       18, 19, 19, 19, 20, 21, 21, 21, 21, 22, 22, 23, 23, 23, 24])",
                "_": "array([6., 3., 2., 4., 5., 8., 7., 0., 1., 9.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  6,  7,  8,  9,  9, -1,  0,  0,  4,  7, -1,  1,  2,  3,  5,  7,\n        1,  3,  0,  3,  4,  2,  2,  7, -1,  1,  2,  5,  7, -1, -1,  1,  3,\n        5,  5,  6, -1, -1,  6,  9,  2,  3,  3,  0,  1,  5,  6,  0,  5,  6,\n        7,  9, -1,  0,  2,  4,  4,  6,  9,  4,  4,  6,  7,  8,  9,  2,  4,\n        4, -1,  0,  2,  3,  5,  9, -1, -1,  2,  5,  3,  3, -1,  1,  7, -1,\n        7, -1,  2,  8,  1, -1,  1,  1,  5,  7,  7,  0,  1,  6,  0])",
                "sorter": "array([ 1, 69, 86, 18, 35, 52, 46,  0, 80, 56, 96, 65, 68,  2, 20, 91, 22,\n       15,  3, 73, 90,  4,  5, 55, 81,  8, 31,  6, 21, 61,  7, 28, 50, 24,\n       30, 72, 12,  9, 45, 95, 76, 10, 51, 82, 32, 53, 11, 98, 42, 17, 97,\n       13, 33, 66, 60, 57, 14, 71, 39, 75, 16, 49, 25, 78, 79, 19, 92, 23,\n       38, 26, 74, 41, 87, 44, 59, 27, 64, 43, 88, 29, 67, 83, 34, 89, 47,\n       36, 84, 62, 37, 40, 85, 48, 54, 94, 58, 99, 70, 93, 63, 77])",
                "idx": "array([ 6, 11, 17, 19, 22, 25, 30, 37, 41, 44, 48, 53, 60, 66, 69, 75, 79,\n       81, 84, 86, 89, 90, 94, 96, 99])",
                "inc": "array([1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 4, 6, 2, 3, 2, 5, 5, 3, 2, 4, 5, 6, 5, 2, 6, 3, 1, 3, 2, 3, 1,\n       3, 1, 3, 1])",
                "res": "array([4, 6, 2, 3, 2, 5, 5, 3, 2, 4, 5, 6, 5, 2, 6, 3, 1, 3, 2, 3, 1, 3,\n       1, 3, 1])",
                "ri": "Index(['h', 'v', 'u', 'z', 'b', 'q', 'n', 'm', 'x', 'k', 'y', 'f', 'j', 'w',\n       'l', 'o', 'e', 's', 'i', 'r', 'p', 'g', 'd', 'a', 'c'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    4\nv    6\nu    2\nz    3\nb    2\nq    5\nn    5\nm    3\nx    2\nk    4\ny    5\nf    6\nj    5\nw    2\nl    6\no    3\ne    1\ns    3\ni    2\nr    3\np    1\ng    3\nd    1\na    3\nc    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c61310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c61910>",
                "self.obj": "0     6.0\n1     3.0\n2     2.0\n3     4.0\n4     5.0\n     ... \n95    7.0\n96    0.0\n97    7.0\n98    7.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  4,  5,  6,\n        7,  7,  8,  9,  9, 10, 10, 10, 11, 12, 13, 14, 15, 16, 16, 16, 16,\n       17, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\n       32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47,\n       48, 49, 50, 51, 52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\n       64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "array([6., 3., 2., 4., 5., 8., 7., 0., 1., 9.])",
                "val": "array of shape 100",
                "codes": "array([ 0,  1,  1,  3,  6,  7,  8,  9,  9,  0,  4,  2,  4,  2,  2, -1, -1,\n       -1,  6,  2,  5,  6,  1,  3,  6,  7,  4,  1,  4,  5,  4,  7,  8,  9,\n        1,  3,  5,  5,  7,  4,  6, -1, -1, -1,  3,  5,  1,  0,  9,  1,  7,\n        8,  4,  6,  2,  0,  2,  5, -1, -1, -1,  1,  3,  1,  1,  5,  2,  2,\n        7,  9,  0,  7,  2,  1,  6, -1, -1, -1,  3,  0,  4,  5,  0,  0,  9,\n        9,  0,  7,  7,  3, -1, -1, -1,  3,  5,  7,  3,  2,  6,  7])",
                "sorter": "array([77,  1, 40,  3, 69, 86, 18, 35, 52,  0, 56,  2,  4,  5,  6,  7,  8,\n        9, 95, 10, 11, 98, 50, 24, 12, 13, 14, 15, 16, 17, 49, 78, 79, 19,\n       68, 20, 21, 91, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36,\n       37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 94, 55, 57,\n       58, 59, 60, 61, 62, 93, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75,\n       76, 80, 96, 81, 82, 83, 84, 85, 87, 88, 89, 90, 92, 97, 99])",
                "idx": "array([ 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 25, 26, 27, 28, 29, 30,\n       34, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\n       53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70,\n       71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 4, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 3, 1, 1, 1, 1, 1, 4, 2, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-28    2\nv    2015-08-23    1\nz    2015-08-27    1\nb    2015-08-28    1\nq    2015-08-24    1\n                  ..\ns    2015-08-29    1\nz    2015-08-26    1\nw    2015-09-01    1\ny    2015-08-25    1\nd    2015-09-01    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c41bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c41c10>",
                "self.obj": "0      5\n1      2\n2      3\n3      8\n4      5\n      ..\n995    7\n996    1\n997    5\n998    9\n999    3\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([5, 2, 3, 8, 6, 4, 1, 9, 7, 0])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  33,  75, 120, 158, 201, 233, 276, 309, 351, 395, 422, 458,\n       497, 541, 579, 627, 657, 699, 731, 774, 814, 853, 896, 932, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7, 10,  9, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  7, 10,  9, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['i', 'm', 'a', 'e', 'k', 'b', 'h', 'j', 'd', 'o', 't', 'g', 'x', 'w',\n       'u', 'z', 'n', 's', 'r', 'y', 'l', 'q', 'p', 'c', 'v', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    10\nm    10\na    10\ne    10\nk    10\nb    10\nh    10\nj    10\nd    10\no    10\nt     7\ng    10\nx     9\nw    10\nu    10\nz    10\nn    10\ns    10\nr    10\ny    10\nl    10\nq    10\np    10\nc    10\nv    10\nf    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118cd1070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118cd1ac0>",
                "self.obj": "0      5\n1      2\n2      3\n3      8\n4      5\n      ..\n995    7\n996    1\n997    5\n998    9\n999    3\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([5, 2, 3, 8, 6, 4, 1, 9, 7, 0])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 256",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 256",
                "res": "array of shape 256",
                "ri": "array of shape 256",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-27    6\nm    2015-08-31    4\n     2015-08-28    4\na    2015-08-29    3\ne    2015-08-25    3\n                  ..\nb    2015-08-25    1\nw    2015-08-31    1\nz    2015-08-27    2\ni    2015-08-24    1\nv    2015-08-24    1\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25820>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25a30>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      8.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    3.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([5., 2., 3., 8., 6., 4., 1., 9., 7., 0.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  91, 125, 167, 204, 247, 279, 319, 350, 386, 429, 456, 491,\n       529, 570, 608, 652, 680, 717, 745, 788, 826, 863, 904, 937, 964])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11,  8, 11, 10, 11, 11, 11,\n       11, 11, 11, 11,  9, 10, 11, 11, 11, 10])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 10, 11, 11,  8, 11, 10, 11, 11, 11, 11,\n       11, 11, 11,  9, 10, 11, 11, 11, 10])",
                "ri": "Index(['i', 'm', 'a', 'e', 'k', 'b', 'h', 'j', 'd', 'o', 't', 'g', 'x', 'w',\n       'u', 'z', 'n', 's', 'r', 'y', 'l', 'q', 'p', 'c', 'v', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    11\nm    11\na    11\ne    11\nk    11\nb    11\nh    11\nj    10\nd    11\no    11\nt     8\ng    11\nx    10\nw    11\nu    11\nz    11\nn    11\ns    11\nr    11\ny    11\nl     9\nq    10\np    11\nc    11\nv    11\nf    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dc6e80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dc6910>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      8.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    3.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([5., 2., 3., 8., 6., 4., 1., 9., 7., 0.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 253",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-27    6\nm    2015-08-28    4\ne    2015-08-25    3\nk    2015-08-23    2\nb    2015-09-01    3\n                  ..\n     2015-08-25    1\nw    2015-08-31    1\nz    2015-08-27    2\ni    2015-08-24    1\nv    2015-08-24    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56550>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      8.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    3.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([5., 2., 3., 8., 6., 4., 1., 9., 7., 0.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  91, 125, 167, 204, 247, 279, 319, 350, 386, 429, 456, 491,\n       529, 570, 608, 652, 680, 717, 745, 788, 826, 863, 904, 937, 964])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 10, 11, 11,  8, 11, 10, 11, 11, 11,\n       11, 11, 11, 11,  9, 10, 11, 11, 11, 10])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 10, 11, 11,  8, 11, 10, 11, 11, 11, 11,\n       11, 11, 11,  9, 10, 11, 11, 11, 10])",
                "ri": "Index(['i', 'm', 'a', 'e', 'k', 'b', 'h', 'j', 'd', 'o', 't', 'g', 'x', 'w',\n       'u', 'z', 'n', 's', 'r', 'y', 'l', 'q', 'p', 'c', 'v', 'f'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    11\nm    11\na    11\ne    11\nk    11\nb    11\nh    11\nj    10\nd    11\no    11\nt     8\ng    11\nx    10\nw    11\nu    11\nz    11\nn    11\ns    11\nr    11\ny    11\nl     9\nq    10\np    11\nc    11\nv    11\nf    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d569a0>",
                "self.obj": "0      5.0\n1      2.0\n2      3.0\n3      8.0\n4      5.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    3.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([5., 2., 3., 8., 6., 4., 1., 9., 7., 0.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 253",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-27    6\nm    2015-08-28    4\ne    2015-08-25    3\nk    2015-08-23    2\nb    2015-09-01    3\n                  ..\n     2015-08-25    1\nw    2015-08-31    1\nz    2015-08-27    2\ni    2015-08-24    1\nv    2015-08-24    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1070>",
                "self.obj": "0       1\n1       0\n2       3\n3       6\n4       8\n       ..\n9995    0\n9996    2\n9997    5\n9998    3\n9999    5\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([1, 0, 3, 6, 8, 5, 7, 9, 4, 2])",
                "val": "array([1, 0, 3, ..., 5, 3, 5])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0, 1004, 1359, ..., 8735, 9214, 9216])",
                "idx": "array([   0,  369,  761, 1155, 1554, 1950, 2315, 2718, 3070, 3449, 3846,\n       4235, 4631, 5034, 5421, 5812, 6185, 6584, 6975, 7372, 7764, 8115,\n       8479, 8850, 9239, 9636])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['h', 'i', 'k', 'u', 'o', 'w', 'p', 'z', 'g', 'b', 'l', 'y', 'e', 'd',\n       'm', 'x', 'c', 's', 't', 'v', 'j', 'f', 'q', 'a', 'n', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    10\ni    10\nk    10\nu    10\no    10\nw    10\np    10\nz    10\ng    10\nb    10\nl    10\ny    10\ne    10\nd    10\nm    10\nx    10\nc    10\ns    10\nt    10\nv    10\nj    10\nf    10\nq    10\na    10\nn    10\nr    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a0a0>",
                "self.obj": "0       1\n1       0\n2       3\n3       6\n4       8\n       ..\n9995    0\n9996    2\n9997    5\n9998    3\n9999    5\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([1, 0, 3, 6, 8, 5, 7, 9, 4, 2])",
                "val": "array([1, 0, 3, ..., 5, 3, 5])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0, 3583, 5855, ..., 2750, 5288, 8924])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    10\ni    2015-08-23    10\nk    2015-09-01     8\nu    2015-08-23     9\no    2015-08-29    10\n                   ..\nt    2015-09-01     9\nn    2015-08-27    10\nw    2015-09-01    10\ns    2015-08-26    10\nt    2015-08-29    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118b6fc40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b4c0>",
                "self.obj": "0       1.0\n1       0.0\n2       3.0\n3       6.0\n4       8.0\n       ... \n9995    0.0\n9996    2.0\n9997    5.0\n9998    3.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([1., 0., 3., 6., 8., 5., 4., 9., 2., 7.])",
                "val": "array([1., 0., 3., ..., 5., 3., 5.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9251, 9705, 9806])",
                "idx": "array([ 589,  921, 1281, 1660, 2032, 2376, 2756, 3096, 3456, 3839, 4203,\n       4572, 4952, 5320, 5678, 6034, 6414, 6775, 7148, 7521, 7889, 8219,\n       8564, 8917, 9278, 9651])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['h', 'k', 'u', 'o', 'w', 'p', 'z', 'g', 'b', 'l', 'y', 'e', 'd', 'i',\n       'x', 'c', 'm', 's', 't', 'v', 'j', 'f', 'q', 'a', 'n', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    11\nk    11\nu    11\no    11\nw    11\np    11\nz    11\ng    11\nb    11\nl    11\ny    11\ne    11\nd    11\ni    11\nx    11\nc    11\nm    11\ns    11\nt    11\nv    11\nj    11\nf    11\nq    11\na    11\nn    11\nr    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bd90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a0a0>",
                "self.obj": "0       1.0\n1       0.0\n2       3.0\n3       6.0\n4       8.0\n       ... \n9995    0.0\n9996    2.0\n9997    5.0\n9998    3.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([1., 0., 3., 6., 8., 5., 4., 9., 2., 7.])",
                "val": "array([1., 0., 3., ..., 5., 3., 5.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 2912, 3719, 9915])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    11\nk    2015-09-01     9\no    2015-08-29    11\nw    2015-08-30    10\np    2015-09-01    10\n                   ..\nn    2015-08-27    11\nw    2015-09-01     8\nr    2015-08-28    11\ns    2015-08-26    10\nt    2015-08-29    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc8e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddccd0>",
                "self.obj": "0       1.0\n1       0.0\n2       3.0\n3       6.0\n4       8.0\n       ... \n9995    0.0\n9996    2.0\n9997    5.0\n9998    3.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([1., 0., 3., 6., 8., 5., 4., 9., 2., 7.])",
                "val": "array([1., 0., 3., ..., 5., 3., 5.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9251, 9705, 9806])",
                "idx": "array([ 589,  921, 1281, 1660, 2032, 2376, 2756, 3096, 3456, 3839, 4203,\n       4572, 4952, 5320, 5678, 6034, 6414, 6775, 7148, 7521, 7889, 8219,\n       8564, 8917, 9278, 9651])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['h', 'k', 'u', 'o', 'w', 'p', 'z', 'g', 'b', 'l', 'y', 'e', 'd', 'i',\n       'x', 'c', 'm', 's', 't', 'v', 'j', 'f', 'q', 'a', 'n', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    11\nk    11\nu    11\no    11\nw    11\np    11\nz    11\ng    11\nb    11\nl    11\ny    11\ne    11\nd    11\ni    11\nx    11\nc    11\nm    11\ns    11\nt    11\nv    11\nj    11\nf    11\nq    11\na    11\nn    11\nr    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dc6eb0>",
                "self.obj": "0       1.0\n1       0.0\n2       3.0\n3       6.0\n4       8.0\n       ... \n9995    0.0\n9996    2.0\n9997    5.0\n9998    3.0\n9999    5.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([1., 0., 3., 6., 8., 5., 4., 9., 2., 7.])",
                "val": "array([1., 0., 3., ..., 5., 3., 5.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 2912, 3719, 9915])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    11\nk    2015-09-01     9\no    2015-08-29    11\nw    2015-08-30    10\np    2015-09-01    10\n                   ..\nn    2015-08-27    11\nw    2015-09-01     8\nr    2015-08-28    11\ns    2015-08-26    10\nt    2015-08-29    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0340>",
                "self.obj": "0        1\n1        4\n2        9\n3        2\n4        4\n        ..\n99995    1\n99996    2\n99997    2\n99998    1\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([1, 4, 9, 2, 0, 6, 5, 3, 8, 7])",
                "val": "array([1, 4, 9, ..., 2, 1, 2])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,    38,   251, ..., 99259, 99622, 99772])",
                "idx": "array([    0,  3947,  7918, 11705, 15599, 19386, 23122, 27005, 30756,\n       34655, 38529, 42333, 46152, 50010, 53899, 57701, 61564, 65384,\n       69245, 73093, 76932, 80767, 84682, 88551, 92374, 96174])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['p', 'd', 'r', 'o', 'e', 'f', 'w', 'b', 'l', 'm', 'v', 'c', 'y', 'u',\n       'h', 'q', 'g', 'a', 'j', 'z', 'k', 'n', 't', 'i', 's', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\np    10\nd    10\nr    10\no    10\ne    10\nf    10\nw    10\nb    10\nl    10\nm    10\nv    10\nc    10\ny    10\nu    10\nh    10\nq    10\ng    10\na    10\nj    10\nz    10\nk    10\nn    10\nt    10\ni    10\ns    10\nx    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da00a0>",
                "self.obj": "0        1\n1        4\n2        9\n3        2\n4        4\n        ..\n99995    1\n99996    2\n99997    2\n99998    1\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([1, 4, 9, 2, 0, 6, 5, 3, 8, 7])",
                "val": "array([1, 4, 9, ..., 2, 1, 2])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,   820,  5407, ..., 97894, 98938, 99643])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \np    2015-08-26    10\nd    2015-08-27    10\nr    2015-08-30    10\no    2015-08-29    10\ne    2015-08-29    10\n                   ..\ns    2015-08-28    10\nt    2015-08-23    10\ns    2015-08-31    10\n     2015-09-01    10\nn    2015-08-28    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1130>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1be0>",
                "self.obj": "0        1.0\n1        4.0\n2        9.0\n3        2.0\n4        4.0\n        ... \n99995    1.0\n99996    2.0\n99997    2.0\n99998    1.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([1., 4., 9., 2., 6., 5., 3., 8., 7., 0.])",
                "val": "array([1., 4., 9., ..., 2., 1., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99167, 99192, 99251])",
                "idx": "array([ 5883,  9581, 13158, 16835, 20408, 23917, 27568, 31131, 34763,\n       38397, 41977, 45551, 49177, 52817, 56413, 60034, 63617, 67348,\n       70975, 74590, 78202, 81895, 85562, 89171, 92804, 96378])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['p', 'r', 'o', 'e', 'f', 'w', 'b', 'l', 'm', 'v', 'c', 'y', 'u', 'h',\n       'q', 'g', 'd', 'a', 'j', 'k', 'n', 't', 'i', 'z', 's', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\np    11\nr    11\no    11\ne    11\nf    11\nw    11\nb    11\nl    11\nm    11\nv    11\nc    11\ny    11\nu    11\nh    11\nq    11\ng    11\nd    11\na    11\nj    11\nk    11\nn    11\nt    11\ni    11\nz    11\ns    11\nx    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd12e0>",
                "self.obj": "0        1.0\n1        4.0\n2        9.0\n3        2.0\n4        4.0\n        ... \n99995    1.0\n99996    2.0\n99997    2.0\n99998    1.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([1., 4., 9., 2., 6., 5., 3., 8., 7., 0.])",
                "val": "array([1., 4., 9., ..., 2., 1., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 91234, 92365, 95284])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \np    2015-08-26    11\nr    2015-08-30    11\ne    2015-08-29    11\nf    2015-08-31    11\nw    2015-08-29    11\n                   ..\nt    2015-08-23    11\nk    2015-09-01    11\ns    2015-08-31    11\n     2015-09-01    11\nn    2015-08-28    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a6d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a850>",
                "self.obj": "0        1.0\n1        4.0\n2        9.0\n3        2.0\n4        4.0\n        ... \n99995    1.0\n99996    2.0\n99997    2.0\n99998    1.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([1., 4., 9., 2., 6., 5., 3., 8., 7., 0.])",
                "val": "array([1., 4., 9., ..., 2., 1., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99167, 99192, 99251])",
                "idx": "array([ 5883,  9581, 13158, 16835, 20408, 23917, 27568, 31131, 34763,\n       38397, 41977, 45551, 49177, 52817, 56413, 60034, 63617, 67348,\n       70975, 74590, 78202, 81895, 85562, 89171, 92804, 96378])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['p', 'r', 'o', 'e', 'f', 'w', 'b', 'l', 'm', 'v', 'c', 'y', 'u', 'h',\n       'q', 'g', 'd', 'a', 'j', 'k', 'n', 't', 'i', 'z', 's', 'x'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\np    11\nr    11\no    11\ne    11\nf    11\nw    11\nb    11\nl    11\nm    11\nv    11\nc    11\ny    11\nu    11\nh    11\nq    11\ng    11\nd    11\na    11\nj    11\nk    11\nn    11\nt    11\ni    11\nz    11\ns    11\nx    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc8b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcac0>",
                "self.obj": "0        1.0\n1        4.0\n2        9.0\n3        2.0\n4        4.0\n        ... \n99995    1.0\n99996    2.0\n99997    2.0\n99998    1.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([1., 4., 9., 2., 6., 5., 3., 8., 7., 0.])",
                "val": "array([1., 4., 9., ..., 2., 1., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 91234, 92365, 95284])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \np    2015-08-26    11\nr    2015-08-30    11\ne    2015-08-29    11\nf    2015-08-31    11\nw    2015-08-29    11\n                   ..\nt    2015-08-23    11\nk    2015-09-01    11\ns    2015-08-31    11\n     2015-09-01    11\nn    2015-08-28    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd14c0>",
                "self.obj": "0     11\n1     69\n2     42\n3     25\n4     58\n      ..\n95    55\n96    85\n97    47\n98    27\n99    23\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,\n        3,  3,  3,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  6,  6,  6,\n        6,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10, 10, 10,\n       10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 14,\n       15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20,\n       20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25])",
                "_": "array([11, 69, 42, 25, 58, 17, 72, 76, 43, 54, 55, 67, 44, 64, 29, 26, 35,\n       48, 30, 70, 57, 52, 28, 98, 97, 22, 65,  2, 40, 24, 21, 36, 39,  1,\n       75, 10, 50, 94,  3,  9, 82, 66, 88, 80, 78,  5, 86, 33, 99, 61, 60,\n       38, 27, 45, 90, 71, 62, 87, 95, 89, 53, 84, 83, 14, 63, 47, 15, 85,\n       23])",
                "val": "array([11, 69, 42, 25, 58, 17, 72, 76, 25, 43, 54, 55, 67, 17, 44, 64, 29,\n       26, 35, 48, 30, 70, 69, 11, 72, 57, 52, 28, 98, 97, 29, 22, 65, 48,\n        2, 44, 40, 24, 21, 29, 36, 39,  1, 26, 75, 55, 10, 50, 94,  3, 65,\n        9, 82, 66, 88, 80, 78,  5, 86, 33, 39, 99, 54, 61, 60, 38, 27, 50,\n        2, 45, 94, 52, 90, 28, 71, 62, 87, 65, 95, 27, 26, 89, 53, 84, 89,\n       83, 83, 14, 98, 64, 42, 63, 47, 15, 65, 55, 85, 47, 27, 23])",
                "codes": "array([ 0, 15, 25, 27, 52,  1,  5,  9, 46,  2, 24, 26, 28, 33, 37,  2,  3,\n       29, 40, 65,  3,  4, 23, 45, 58,  6,  7, 10, 42, 51, 54,  8, 56, 64,\n       65,  5, 10, 11, 12, 16, 34, 44, 12, 21, 59, 13, 38, 57, 13, 14, 22,\n       36, 36, 50, 63, 66, 17, 59,  0,  6,  9, 18, 61, 19, 37, 47, 62,  1,\n       15, 20, 62, 68, 23, 30, 14, 14, 26, 67, 26, 26, 55, 17, 31, 27, 32,\n       35, 43, 60, 32, 52, 10, 39, 53, 21, 41, 52, 48, 49, 15, 22])",
                "sorter": "array([ 0, 17, 31, 68, 66,  1,  5, 10, 58,  2, 29, 50, 36, 42, 70, 90,  3,\n       37, 52, 97,  8,  4, 88, 57, 78,  6,  7, 95, 54, 65, 72,  9, 75, 91,\n       92, 13, 11, 12, 35, 18, 44, 56, 14, 26, 84, 15, 49, 76, 89, 16, 27,\n       47, 67, 64, 87, 93, 19, 81, 23, 24, 62, 20, 83, 21, 48, 59, 86, 22,\n       43, 25, 85, 99, 28, 38, 30, 39, 77, 96, 32, 94, 74, 33, 40, 34, 60,\n       46, 55, 82, 41, 79, 45, 51, 69, 71, 53, 98, 61, 63, 80, 73])",
                "idx": "array([ 0,  5,  9, 15, 20, 25, 31, 35, 42, 45, 48, 56, 58, 63, 67, 68, 72,\n       74, 78, 81, 83, 88, 90, 93, 96, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 4, 6, 5, 5, 6, 4, 7, 3, 3, 7, 2, 5, 4, 1, 4, 2, 3, 2, 2, 5, 2,\n       3, 3, 2, 2])",
                "res": "array([5, 4, 6, 5, 5, 6, 4, 7, 3, 3, 7, 2, 5, 4, 1, 4, 2, 3, 2, 2, 5, 2,\n       3, 3, 2, 2])",
                "ri": "Index(['u', 'w', 'b', 'v', 'a', 'f', 'l', 'g', 'z', 'm', 'o', 'h', 'p', 'n',\n       'j', 'q', 'e', 'd', 'x', 't', 'c', 'r', 'i', 'y', 'k', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    5\nw    4\nb    6\nv    5\na    5\nf    6\nl    4\ng    7\nz    3\nm    3\no    7\nh    2\np    5\nn    4\nj    1\nq    4\ne    2\nd    3\nx    2\nt    2\nc    5\nr    2\ni    3\ny    3\nk    2\ns    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25a00>",
                "self.obj": "0     11\n1     69\n2     42\n3     25\n4     58\n      ..\n95    55\n96    85\n97    47\n98    27\n99    23\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  4,  4,  5,  6,  7,  8,  9, 10, 11, 12, 12, 13,\n       14, 14, 14, 15, 16, 16, 17, 18, 19, 19, 20, 21, 22, 23, 24, 25, 26,\n       27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\n       43, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\n       57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 67, 67, 68, 69, 70,\n       71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85])",
                "_": "array([11, 69, 42, 25, 58, 17, 72, 76, 43, 54, 55, 67, 44, 64, 29, 26, 35,\n       48, 30, 70, 57, 52, 28, 98, 97, 22, 65,  2, 40, 24, 21, 36, 39,  1,\n       75, 10, 50, 94,  3,  9, 82, 66, 88, 80, 78,  5, 86, 33, 99, 61, 60,\n       38, 27, 45, 90, 71, 62, 87, 95, 89, 53, 84, 83, 14, 63, 47, 15, 85,\n       23])",
                "val": "array([11, 69, 42, 25, 58, 17, 72, 76, 25, 43, 54, 55, 67, 17, 44, 64, 29,\n       26, 35, 48, 30, 70, 69, 11, 72, 57, 52, 28, 98, 97, 29, 22, 65, 48,\n        2, 44, 40, 24, 21, 29, 36, 39,  1, 26, 75, 55, 10, 50, 94,  3, 65,\n        9, 82, 66, 88, 80, 78,  5, 86, 33, 39, 99, 54, 61, 60, 38, 27, 50,\n        2, 45, 94, 52, 90, 28, 71, 62, 87, 65, 95, 27, 26, 89, 53, 84, 89,\n       83, 83, 14, 98, 64, 42, 63, 47, 15, 65, 55, 85, 47, 27, 23])",
                "codes": "array([ 0,  1,  2,  3,  4, 45, 58,  5,  6,  7,  3,  8,  9, 10, 11, 16,  5,\n       12, 21, 59, 13, 14, 63, 15, 17,  9, 18, 19,  1,  0,  6, 20, 22, 23,\n       24, 14, 25, 26, 17, 27, 35, 12, 28, 29, 30, 14, 31, 32, 33, 15, 34,\n       10, 39, 36, 37, 47, 38, 26, 37, 40, 41, 42, 43, 44, 46, 32, 48, 49,\n       50, 51, 52, 13, 36, 27, 53, 21, 54, 22, 55, 56, 64, 65, 57, 26, 52,\n       15, 59, 60, 61, 62, 62, 23,  2, 66, 26, 10, 67, 65, 52, 68])",
                "sorter": "array([ 0,  1,  2,  3,  4, 57, 78,  5,  6,  7,  8,  9, 10, 11, 12, 18, 13,\n       14, 26, 84, 15, 16, 87, 17, 19, 62, 20, 21, 22, 23, 24, 25, 27, 28,\n       29, 30, 31, 32, 33, 34, 46, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 51, 47, 48, 59, 49, 50, 70, 52, 53, 54, 55, 56, 58, 60, 61, 63,\n       64, 65, 66, 89, 67, 68, 69, 71, 72, 73, 74, 75, 91, 92, 76, 77, 79,\n       80, 81, 82, 83, 85, 86, 88, 90, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 0,  1,  2,  3,  4,  7,  8,  9, 10, 11, 12, 13, 14, 16, 17, 20, 21,\n       23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 59, 60, 61,\n       62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79,\n       82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\n       99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 2, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 2, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,\n       1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 86",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-25    1\nw    2015-08-29    1\nb    2015-08-25    1\nv    2015-09-01    1\na    2015-08-31    3\n                  ..\nf    2015-08-25    1\nd    2015-09-01    1\nv    2015-08-29    1\ny    2015-08-28    1\nq    2015-08-27    1\nName: julie, Length: 86, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d080d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08df0>",
                "self.obj": "0     11.0\n1     69.0\n2     42.0\n3     25.0\n4     58.0\n      ... \n95    55.0\n96    85.0\n97    47.0\n98    27.0\n99    23.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,\n        5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13,\n       14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 20,\n       20, 20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25])",
                "_": "array([11., 69., 42., 25., 58., 17., 72., 54., 55., 67., 44., 64., 29.,\n       26., 35., 48., 30., 70., 57., 97., 22., 65.,  2., 40., 24., 21.,\n       36., 39.,  1., 75., 94.,  3.,  9., 82., 66., 88., 80., 78.,  5.,\n       86., 33., 99., 61., 50., 45., 52., 90., 28., 71., 62., 87., 95.,\n       27., 89., 53., 83., 14., 98., 63., 47., 15., 85., 23.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 10, 14, 33, 44, 55, -1,  0, 13, 20, 22,  2, 19, 21, 23, 28, 30,\n        2,  3, 24, 59, -1,  4, 38, 51, 57,  5,  7, 39, -1, -1,  6,  8, 35,\n       46, -1, 49, 58, 59,  5,  8,  9, 29, 37, -1, -1, 10, 11, 31, 50, -1,\n       -1, -1, 11, 12, 43, 56, 60, 15, 53, -1,  0,  6,  7, 16, 17, 30, 40,\n        1, -1, 13, 18, 62, -1, 25, 12, 12, 21, 61, 21, 21, 48, 15, 26, -1,\n       22, 27, 36, 54, 27, 52, -1, 32, 34, 45, 52, 41, 42, 13, 47])",
                "sorter": "array([ 1, 35, 18, 52, 69, 86, 66,  0, 17, 31, 68,  2, 29, 50, 36, 42, 70,\n       90,  3, 37, 97,  8,  4, 57, 78, 88,  5, 10, 58,  7, 65,  6, 95, 54,\n       72,  9, 75, 91, 92, 13, 11, 12, 44, 56, 26, 84, 14, 15, 49, 76, 27,\n       47, 64, 89, 16, 67, 87, 93, 19, 81, 83, 23, 24, 62, 20, 21, 48, 59,\n       22, 85, 43, 25, 99, 28, 38, 30, 39, 77, 96, 32, 94, 74, 33, 40, 46,\n       34, 60, 55, 82, 41, 79, 45, 51, 53, 71, 98, 61, 63, 80, 73])",
                "idx": "array([ 6, 11, 17, 21, 26, 29, 35, 39, 44, 47, 50, 58, 60, 65, 68, 69, 73,\n       75, 79, 82, 84, 89, 91, 93, 96, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 5, 6, 4, 5, 3, 5, 4, 5, 2, 3, 6, 2, 5, 3, 1, 4, 2, 3, 2, 2, 5,\n       2, 2, 3, 2, 2])",
                "res": "array([5, 6, 4, 5, 3, 5, 4, 5, 2, 3, 6, 2, 5, 3, 1, 4, 2, 3, 2, 2, 5, 2,\n       2, 3, 2, 2])",
                "ri": "Index(['u', 'b', 'v', 'a', 'w', 'f', 'l', 'g', 'z', 'm', 'o', 'h', 'p', 'n',\n       'j', 'q', 'e', 'd', 'x', 't', 'c', 'r', 'i', 'y', 'k', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    5\nb    6\nv    4\na    5\nw    3\nf    5\nl    4\ng    5\nz    2\nm    3\no    6\nh    2\np    5\nn    3\nj    1\nq    4\ne    2\nd    3\nx    2\nt    2\nc    5\nr    2\ni    2\ny    3\nk    2\ns    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d085e0>",
                "self.obj": "0     11.0\n1     69.0\n2     42.0\n3     25.0\n4     58.0\n      ... \n95    55.0\n96    85.0\n97    47.0\n98    27.0\n99    23.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  3,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 12, 12, 13, 14, 14, 15, 16, 17, 17, 18,\n       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 46, 47, 48,\n       49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 61, 61, 62,\n       63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "array([11., 69., 42., 25., 58., 17., 72., 54., 55., 67., 44., 64., 29.,\n       26., 35., 48., 30., 70., 57., 97., 22., 65.,  2., 40., 24., 21.,\n       36., 39.,  1., 75., 94.,  3.,  9., 82., 66., 88., 80., 78.,  5.,\n       86., 33., 99., 61., 50., 45., 52., 90., 28., 71., 62., 87., 95.,\n       27., 89., 53., 83., 14., 98., 63., 47., 15., 85., 23.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 10, 14, 21, 26, 33, 44, 55,  0,  2,  4, 38, 51,  5,  6, -1,\n       -1, -1,  7,  8,  9,  5, -1, -1, 10, 11, 12, 56, 13, 15,  7, 16, 17,\n        1,  0,  6, 18, -1, -1, 19, 12, 20, 21, 15, -1, 22, 23, 24, 25, 12,\n       27, 28, 13, 29, -1, 32, -1, 30, 40, 31, 21, 30, 34, 35, 36, 37, 39,\n       27, 41, 42, -1, -1, -1, 11, 43, 22, 45, 46, 47, 48, 49, 58, 59, 50,\n       52, 13, 53, 54, -1, -1, 57,  2, 60, 21,  8, 61, 59, 52, 62])",
                "sorter": "array([ 1,  3, 35, 18, 77, 40, 52, 69, 86,  0,  2,  4, 57, 78,  5,  6,  7,\n        8,  9, 10, 11, 12, 13, 26, 84, 14, 15, 16, 87, 17, 19, 62, 20, 21,\n       22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 46, 34, 36, 37, 38, 39,\n       41, 42, 43, 44, 45, 51, 47, 48, 59, 49, 50, 70, 53, 54, 55, 56, 58,\n       60, 61, 63, 64, 65, 66, 89, 67, 68, 71, 72, 73, 74, 75, 91, 92, 76,\n       79, 80, 81, 82, 83, 85, 88, 90, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30,\n       31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-25    1\nb    2015-08-25    1\na    2015-08-31    3\nw    2015-08-30    1\nf    2015-08-24    1\n                  ..\n     2015-08-25    1\nd    2015-09-01    1\nv    2015-08-29    1\ny    2015-08-28    1\nq    2015-08-27    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e257f0>",
                "self.obj": "0     11.0\n1     69.0\n2     42.0\n3     25.0\n4     58.0\n      ... \n95    55.0\n96    85.0\n97    47.0\n98    27.0\n99    23.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,\n        2,  2,  2,  2,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,\n        5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10,\n       10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13,\n       14, 15, 15, 15, 15, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 20,\n       20, 20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25])",
                "_": "array([11., 69., 42., 25., 58., 17., 72., 54., 55., 67., 44., 64., 29.,\n       26., 35., 48., 30., 70., 57., 97., 22., 65.,  2., 40., 24., 21.,\n       36., 39.,  1., 75., 94.,  3.,  9., 82., 66., 88., 80., 78.,  5.,\n       86., 33., 99., 61., 50., 45., 52., 90., 28., 71., 62., 87., 95.,\n       27., 89., 53., 83., 14., 98., 63., 47., 15., 85., 23.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 10, 14, 33, 44, 55, -1,  0, 13, 20, 22,  2, 19, 21, 23, 28, 30,\n        2,  3, 24, 59, -1,  4, 38, 51, 57,  5,  7, 39, -1, -1,  6,  8, 35,\n       46, -1, 49, 58, 59,  5,  8,  9, 29, 37, -1, -1, 10, 11, 31, 50, -1,\n       -1, -1, 11, 12, 43, 56, 60, 15, 53, -1,  0,  6,  7, 16, 17, 30, 40,\n        1, -1, 13, 18, 62, -1, 25, 12, 12, 21, 61, 21, 21, 48, 15, 26, -1,\n       22, 27, 36, 54, 27, 52, -1, 32, 34, 45, 52, 41, 42, 13, 47])",
                "sorter": "array([ 1, 35, 18, 52, 69, 86, 66,  0, 17, 31, 68,  2, 29, 50, 36, 42, 70,\n       90,  3, 37, 97,  8,  4, 57, 78, 88,  5, 10, 58,  7, 65,  6, 95, 54,\n       72,  9, 75, 91, 92, 13, 11, 12, 44, 56, 26, 84, 14, 15, 49, 76, 27,\n       47, 64, 89, 16, 67, 87, 93, 19, 81, 83, 23, 24, 62, 20, 21, 48, 59,\n       22, 85, 43, 25, 99, 28, 38, 30, 39, 77, 96, 32, 94, 74, 33, 40, 46,\n       34, 60, 55, 82, 41, 79, 45, 51, 53, 71, 98, 61, 63, 80, 73])",
                "idx": "array([ 6, 11, 17, 21, 26, 29, 35, 39, 44, 47, 50, 58, 60, 65, 68, 69, 73,\n       75, 79, 82, 84, 89, 91, 93, 96, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 5, 6, 4, 5, 3, 5, 4, 5, 2, 3, 6, 2, 5, 3, 1, 4, 2, 3, 2, 2, 5,\n       2, 2, 3, 2, 2])",
                "res": "array([5, 6, 4, 5, 3, 5, 4, 5, 2, 3, 6, 2, 5, 3, 1, 4, 2, 3, 2, 2, 5, 2,\n       2, 3, 2, 2])",
                "ri": "Index(['u', 'b', 'v', 'a', 'w', 'f', 'l', 'g', 'z', 'm', 'o', 'h', 'p', 'n',\n       'j', 'q', 'e', 'd', 'x', 't', 'c', 'r', 'i', 'y', 'k', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nu    5\nb    6\nv    4\na    5\nw    3\nf    5\nl    4\ng    5\nz    2\nm    3\no    6\nh    2\np    5\nn    3\nj    1\nq    4\ne    2\nd    3\nx    2\nt    2\nc    5\nr    2\ni    2\ny    3\nk    2\ns    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dc6790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e252e0>",
                "self.obj": "0     11.0\n1     69.0\n2     42.0\n3     25.0\n4     58.0\n      ... \n95    55.0\n96    85.0\n97    47.0\n98    27.0\n99    23.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  3,  4,  5,\n        6,  7,  8,  9, 10, 11, 12, 12, 12, 13, 14, 14, 15, 16, 17, 17, 18,\n       19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34,\n       35, 36, 37, 38, 39, 39, 40, 41, 41, 42, 43, 43, 44, 45, 46, 47, 48,\n       49, 50, 51, 52, 53, 54, 55, 55, 56, 57, 58, 59, 60, 61, 61, 61, 62,\n       63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77])",
                "_": "array([11., 69., 42., 25., 58., 17., 72., 54., 55., 67., 44., 64., 29.,\n       26., 35., 48., 30., 70., 57., 97., 22., 65.,  2., 40., 24., 21.,\n       36., 39.,  1., 75., 94.,  3.,  9., 82., 66., 88., 80., 78.,  5.,\n       86., 33., 99., 61., 50., 45., 52., 90., 28., 71., 62., 87., 95.,\n       27., 89., 53., 83., 14., 98., 63., 47., 15., 85., 23.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 10, 14, 21, 26, 33, 44, 55,  0,  2,  4, 38, 51,  5,  6, -1,\n       -1, -1,  7,  8,  9,  5, -1, -1, 10, 11, 12, 56, 13, 15,  7, 16, 17,\n        1,  0,  6, 18, -1, -1, 19, 12, 20, 21, 15, -1, 22, 23, 24, 25, 12,\n       27, 28, 13, 29, -1, 32, -1, 30, 40, 31, 21, 30, 34, 35, 36, 37, 39,\n       27, 41, 42, -1, -1, -1, 11, 43, 22, 45, 46, 47, 48, 49, 58, 59, 50,\n       52, 13, 53, 54, -1, -1, 57,  2, 60, 21,  8, 61, 59, 52, 62])",
                "sorter": "array([ 1,  3, 35, 18, 77, 40, 52, 69, 86,  0,  2,  4, 57, 78,  5,  6,  7,\n        8,  9, 10, 11, 12, 13, 26, 84, 14, 15, 16, 87, 17, 19, 62, 20, 21,\n       22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 46, 34, 36, 37, 38, 39,\n       41, 42, 43, 44, 45, 51, 47, 48, 59, 49, 50, 70, 53, 54, 55, 56, 58,\n       60, 61, 63, 64, 65, 66, 89, 67, 68, 71, 72, 73, 74, 75, 91, 92, 76,\n       79, 80, 81, 82, 83, 85, 88, 90, 93, 94, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 29, 30,\n       31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69,\n       70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 89,\n       90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nu    2015-08-25    1\nb    2015-08-25    1\na    2015-08-31    3\nw    2015-08-30    1\nf    2015-08-24    1\n                  ..\n     2015-08-25    1\nd    2015-09-01    1\nv    2015-08-29    1\ny    2015-08-28    1\nq    2015-08-27    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c094c0>",
                "self.obj": "0      46\n1      18\n2      63\n3      67\n4      85\n       ..\n995    58\n996    13\n997    36\n998    25\n999     5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([46, 18, 63, 67, 85, 22, 35, 66, 92, 93, 36, 20, 21, 88, 61, 40, 95,\n       64,  6, 34, 30, 79, 70, 73,  5,  9, 80, 59, 96, 17, 84, 38, 52, 86,\n       58, 91, 82, 43, 12, 39,  2,  1, 26, 76, 13, 53, 98, 10,  0, 33, 51,\n       45, 54, 97, 71,  3, 11,  8, 16, 87, 57, 42, 31, 55, 29, 48, 60, 77,\n       14, 41, 50, 65, 94, 99, 75, 37, 83, 68, 15, 25, 32, 89, 69, 72, 27,\n        7, 62, 90,  4, 28, 81, 44, 23, 24, 49, 74, 78, 47, 19, 56])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  45,  81, 120, 157, 209, 246, 273, 313, 353, 394, 441, 485,\n       522, 551, 586, 616, 648, 684, 715, 759, 794, 839, 882, 915, 956])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([33, 32, 33, 33, 36, 30, 21, 29, 36, 37, 39, 36, 30, 26, 29, 27, 27,\n       32, 26, 36, 33, 37, 34, 29, 32, 36])",
                "res": "array([33, 32, 33, 33, 36, 30, 21, 29, 36, 37, 39, 36, 30, 26, 29, 27, 27,\n       32, 26, 36, 33, 37, 34, 29, 32, 36])",
                "ri": "Index(['j', 'u', 'b', 't', 'x', 'e', 'o', 'n', 'f', 's', 'y', 'v', 'p', 'c',\n       'q', 'd', 'a', 'z', 'l', 'w', 'h', 'g', 'i', 'k', 'm', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    33\nu    32\nb    33\nt    33\nx    36\ne    30\no    21\nn    29\nf    36\ns    37\ny    39\nv    36\np    30\nc    26\nq    29\nd    27\na    27\nz    32\nl    26\nw    36\nh    33\ng    37\ni    34\nk    29\nm    32\nr    36\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd13d0>",
                "self.obj": "0      46\n1      18\n2      63\n3      67\n4      85\n       ..\n995    58\n996    13\n997    36\n998    25\n999     5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([46, 18, 63, 67, 85, 22, 35, 66, 92, 93, 36, 20, 21, 88, 61, 40, 95,\n       64,  6, 34, 30, 79, 70, 73,  5,  9, 80, 59, 96, 17, 84, 38, 52, 86,\n       58, 91, 82, 43, 12, 39,  2,  1, 26, 76, 13, 53, 98, 10,  0, 33, 51,\n       45, 54, 97, 71,  3, 11,  8, 16, 87, 57, 42, 31, 55, 29, 48, 60, 77,\n       14, 41, 50, 65, 94, 99, 75, 37, 83, 68, 15, 25, 32, 89, 69, 72, 27,\n        7, 62, 90,  4, 28, 81, 44, 23, 24, 49, 74, 78, 47, 19, 56])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 253",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 253",
                "res": "array of shape 253",
                "ri": "array of shape 253",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-25    2\nu    2015-08-31    5\nb    2015-08-31    1\nt    2015-08-29    4\nx    2015-08-29    4\n                  ..\no    2015-08-26    1\nl    2015-09-01    1\nu    2015-08-24    2\nz    2015-08-25    1\na    2015-09-01    1\nName: julie, Length: 253, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0070>",
                "self.obj": "0      46.0\n1      18.0\n2      63.0\n3      67.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    25.0\n999     5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59, 101, 139, 176, 225, 262, 289, 326, 363, 401, 445, 488, 523,\n       551, 583, 611, 640, 675, 703, 743, 777, 816, 849, 892, 930, 971])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([41, 31, 29, 30, 31, 29, 19, 23, 28, 32, 27, 32, 29, 23, 24, 20, 23,\n       28, 23, 29, 27, 29, 25, 33, 30, 31, 23])",
                "res": "array([31, 29, 30, 31, 29, 19, 23, 28, 32, 27, 32, 29, 23, 24, 20, 23, 28,\n       23, 29, 27, 29, 25, 33, 30, 31, 23])",
                "ri": "Index(['j', 'b', 't', 'x', 'e', 'o', 'n', 'f', 's', 'y', 'v', 'p', 'c', 'q',\n       'd', 'a', 'z', 'l', 'w', 'h', 'i', 'k', 'g', 'm', 'r', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    31\nb    29\nt    30\nx    31\ne    29\no    19\nn    23\nf    28\ns    32\ny    27\nv    32\np    29\nc    23\nq    24\nd    20\na    23\nz    28\nl    23\nw    29\nh    27\ni    29\nk    25\ng    33\nm    30\nr    31\nu    23\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da08b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0b80>",
                "self.obj": "0      46.0\n1      18.0\n2      63.0\n3      67.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    25.0\n999     5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 250",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 251",
                "res": "array of shape 250",
                "ri": "array of shape 250",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-25    2\nb    2015-08-31    1\nx    2015-08-29    4\ne    2015-08-29    3\no    2015-08-27    2\n                  ..\n     2015-08-26    1\nu    2015-08-24    2\ni    2015-08-23    1\nz    2015-08-25    1\na    2015-09-01    1\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dc6e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dc6190>",
                "self.obj": "0      46.0\n1      18.0\n2      63.0\n3      67.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    25.0\n999     5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59, 101, 139, 176, 225, 262, 289, 326, 363, 401, 445, 488, 523,\n       551, 583, 611, 640, 675, 703, 743, 777, 816, 849, 892, 930, 971])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([41, 31, 29, 30, 31, 29, 19, 23, 28, 32, 27, 32, 29, 23, 24, 20, 23,\n       28, 23, 29, 27, 29, 25, 33, 30, 31, 23])",
                "res": "array([31, 29, 30, 31, 29, 19, 23, 28, 32, 27, 32, 29, 23, 24, 20, 23, 28,\n       23, 29, 27, 29, 25, 33, 30, 31, 23])",
                "ri": "Index(['j', 'b', 't', 'x', 'e', 'o', 'n', 'f', 's', 'y', 'v', 'p', 'c', 'q',\n       'd', 'a', 'z', 'l', 'w', 'h', 'i', 'k', 'g', 'm', 'r', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    31\nb    29\nt    30\nx    31\ne    29\no    19\nn    23\nf    28\ns    32\ny    27\nv    32\np    29\nc    23\nq    24\nd    20\na    23\nz    28\nl    23\nw    29\nh    27\ni    29\nk    25\ng    33\nm    30\nr    31\nu    23\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dc6550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dc6b80>",
                "self.obj": "0      46.0\n1      18.0\n2      63.0\n3      67.0\n4      85.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    25.0\n999     5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 250",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 251",
                "res": "array of shape 250",
                "ri": "array of shape 250",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-25    2\nb    2015-08-31    1\nx    2015-08-29    4\ne    2015-08-29    3\no    2015-08-27    2\n                  ..\n     2015-08-26    1\nu    2015-08-24    2\ni    2015-08-23    1\nz    2015-08-25    1\na    2015-09-01    1\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da03d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0220>",
                "self.obj": "0       57\n1       29\n2       45\n3       57\n4       51\n        ..\n9995    23\n9996    14\n9997    15\n9998    65\n9999    98\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([57, 29, 45, 51, 46, 99, 89,  6, 15,  0, 27, 33, 92, 54, 50, 13, 87,\n       44, 35, 18, 83,  9, 79,  7, 20, 81, 53, 63, 61, 97,  2, 38,  8, 12,\n       75, 32,  1, 41, 59, 95, 71, 78, 49, 98, 85, 10, 28, 14,  3, 34, 40,\n       43, 26, 23, 70, 25, 37, 90, 19, 86, 76, 94, 66, 88, 36,  5,  4, 55,\n       24, 72, 93, 31, 21, 64, 42, 22, 65, 58, 17, 56, 74, 62, 60, 52, 82,\n       30, 48, 16, 91, 67, 80, 96, 47, 68, 73, 84, 39, 77, 69, 11])",
                "val": "array([57, 29, 45, ..., 15, 65, 98])",
                "codes": "array([ 0,  0,  1, ..., 98, 99, 99])",
                "sorter": "array([   0, 5706, 4919, ..., 9498,  814, 5891])",
                "idx": "array([   0,  376,  760, 1124, 1541, 1909, 2270, 2634, 3002, 3389, 3774,\n       4126, 4513, 4920, 5313, 5700, 6067, 6460, 6851, 7231, 7642, 8020,\n       8453, 8839, 9215, 9632])",
                "inc": "array([1, 0, 1, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 97,  95,  97,  98,  97,  98,  94,  97,  98,  97,  97,  98,  98,\n        97,  97,  96, 100,  98,  99,  98,  98,  99,  98,  98,  99, 100])",
                "res": "array([ 97,  95,  97,  98,  97,  98,  94,  97,  98,  97,  97,  98,  98,\n        97,  97,  96, 100,  98,  99,  98,  98,  99,  98,  98,  99, 100])",
                "ri": "Index(['r', 'e', 'a', 'k', 'n', 't', 'c', 'b', 's', 'x', 'l', 'f', 'y', 'i',\n       'h', 'd', 'w', 'o', 'g', 'm', 'p', 'u', 'j', 'v', 'z', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr     97\ne     95\na     97\nk     98\nn     97\nt     98\nc     94\nb     97\ns     98\nx     97\nl     97\nf     98\ny     98\ni     97\nh     97\nd     96\nw    100\no     98\ng     99\nm     98\np     98\nu     99\nj     98\nv     98\nz     99\nq    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da01f0>",
                "self.obj": "0       57\n1       29\n2       45\n3       57\n4       51\n        ..\n9995    23\n9996    14\n9997    15\n9998    65\n9999    98\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([57, 29, 45, 51, 46, 99, 89,  6, 15,  0, 27, 33, 92, 54, 50, 13, 87,\n       44, 35, 18, 83,  9, 79,  7, 20, 81, 53, 63, 61, 97,  2, 38,  8, 12,\n       75, 32,  1, 41, 59, 95, 71, 78, 49, 98, 85, 10, 28, 14,  3, 34, 40,\n       43, 26, 23, 70, 25, 37, 90, 19, 86, 76, 94, 66, 88, 36,  5,  4, 55,\n       24, 72, 93, 31, 21, 64, 42, 22, 65, 58, 17, 56, 74, 62, 60, 52, 82,\n       30, 48, 16, 91, 67, 80, 96, 47, 68, 73, 84, 39, 77, 69, 11])",
                "val": "array([57, 29, 45, ..., 15, 65, 98])",
                "codes": "array([ 0,  2,  6, ..., 92, 98, 98])",
                "sorter": "array([   0,  784, 8748, ..., 3603, 8712, 8740])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    26\ne    2015-08-28    35\na    2015-09-01    27\nk    2015-08-31    32\nn    2015-08-25    27\n                   ..\nm    2015-08-24    33\nf    2015-08-26    38\nd    2015-08-25    22\nf    2015-08-25    28\nx    2015-08-27    28\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bf10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7ba30>",
                "self.obj": "0       57.0\n1       29.0\n2       45.0\n3       57.0\n4       51.0\n        ... \n9995    23.0\n9996    14.0\n9997    15.0\n9998    65.0\n9999    98.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([57., 29., 45., ..., 15., 65., 98.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 4945, 5238, 7548])",
                "idx": "array([ 589,  944, 1289, 1686, 2035, 2381, 2728, 3079, 3427, 3786, 4145,\n       4477, 4839, 5208, 5580, 5946, 6291, 6657, 7019, 7377, 7767, 8123,\n       8533, 8902, 9261, 9651])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100,  97,  96,  96,  94,  97,  92,  95,  93,  96,  98,  95,  97,\n        98,  98,  97,  93,  98,  97,  98,  96,  99,  98,  98,  96,  97,\n        99])",
                "res": "array([97, 96, 96, 94, 97, 92, 95, 93, 96, 98, 95, 97, 98, 98, 97, 93, 98,\n       97, 98, 96, 99, 98, 98, 96, 97, 99])",
                "ri": "Index(['r', 'a', 'k', 'n', 't', 'c', 'b', 'e', 's', 'x', 'l', 'f', 'y', 'i',\n       'h', 'd', 'w', 'o', 'g', 'm', 'p', 'u', 'j', 'v', 'z', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    97\na    96\nk    96\nn    94\nt    97\nc    92\nb    95\ne    93\ns    96\nx    98\nl    95\nf    97\ny    98\ni    98\nh    97\nd    93\nw    98\no    97\ng    98\nm    96\np    99\nu    98\nj    98\nv    96\nz    97\nq    99\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bc70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bf40>",
                "self.obj": "0       57.0\n1       29.0\n2       45.0\n3       57.0\n4       51.0\n        ... \n9995    23.0\n9996    14.0\n9997    15.0\n9998    65.0\n9999    98.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([57., 29., 45., ..., 15., 65., 98.])",
                "codes": "array([-1, -1, -1, ..., 93, 97, 97])",
                "sorter": "array([ 103,  256,  273, ..., 4562, 8712, 8740])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    23\na    2015-09-01    21\nn    2015-08-25    24\nt    2015-08-30    25\nc    2015-08-25    29\n                   ..\nf    2015-08-26    31\ng    2015-08-29    26\nd    2015-08-25    17\nf    2015-08-25    25\nx    2015-08-27    24\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc8b0>",
                "self.obj": "0       57.0\n1       29.0\n2       45.0\n3       57.0\n4       51.0\n        ... \n9995    23.0\n9996    14.0\n9997    15.0\n9998    65.0\n9999    98.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([57., 29., 45., ..., 15., 65., 98.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 4945, 5238, 7548])",
                "idx": "array([ 589,  944, 1289, 1686, 2035, 2381, 2728, 3079, 3427, 3786, 4145,\n       4477, 4839, 5208, 5580, 5946, 6291, 6657, 7019, 7377, 7767, 8123,\n       8533, 8902, 9261, 9651])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100,  97,  96,  96,  94,  97,  92,  95,  93,  96,  98,  95,  97,\n        98,  98,  97,  93,  98,  97,  98,  96,  99,  98,  98,  96,  97,\n        99])",
                "res": "array([97, 96, 96, 94, 97, 92, 95, 93, 96, 98, 95, 97, 98, 98, 97, 93, 98,\n       97, 98, 96, 99, 98, 98, 96, 97, 99])",
                "ri": "Index(['r', 'a', 'k', 'n', 't', 'c', 'b', 'e', 's', 'x', 'l', 'f', 'y', 'i',\n       'h', 'd', 'w', 'o', 'g', 'm', 'p', 'u', 'j', 'v', 'z', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    97\na    96\nk    96\nn    94\nt    97\nc    92\nb    95\ne    93\ns    96\nx    98\nl    95\nf    97\ny    98\ni    98\nh    97\nd    93\nw    98\no    97\ng    98\nm    96\np    99\nu    98\nj    98\nv    96\nz    97\nq    99\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0610>",
                "self.obj": "0       57.0\n1       29.0\n2       45.0\n3       57.0\n4       51.0\n        ... \n9995    23.0\n9996    14.0\n9997    15.0\n9998    65.0\n9999    98.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([57., 29., 45., ..., 15., 65., 98.])",
                "codes": "array([-1, -1, -1, ..., 93, 97, 97])",
                "sorter": "array([ 103,  256,  273, ..., 4562, 8712, 8740])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    23\na    2015-09-01    21\nn    2015-08-25    24\nt    2015-08-30    25\nc    2015-08-25    29\n                   ..\nf    2015-08-26    31\ng    2015-08-29    26\nd    2015-08-25    17\nf    2015-08-25    25\nx    2015-08-27    24\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b9d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b550>",
                "self.obj": "0         6\n1        55\n2        50\n3         2\n4        71\n         ..\n99995    96\n99996    57\n99997    60\n99998    16\n99999    60\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([ 6, 55, 50,  2, 71, 75, 80, 31, 69, 27, 33, 37, 77, 91, 10,  5,  1,\n       46, 21, 42, 25, 60, 56, 40, 63, 82, 99, 93, 15, 45, 16, 48, 95, 98,\n       11, 89, 49, 14, 32, 23, 39, 28, 52, 74, 54, 67, 19, 96, 87, 51, 38,\n       72, 44, 97, 43, 12, 53, 86,  9, 58, 81, 29,  7, 64, 83, 13, 41, 90,\n       62, 24, 68, 66, 20, 84, 85, 70, 73, 34,  0, 88, 76, 57, 35,  8, 79,\n       61, 65, 59, 92, 78, 17, 30, 36,  3, 94, 18,  4, 47, 26, 22])",
                "val": "array([ 6, 55, 50, ..., 60, 16, 60])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([    0,   709, 15178, ..., 96433, 98197, 99959])",
                "idx": "array([    0,  3939,  7766, 11601, 15380, 19162, 23095, 26956, 30817,\n       34639, 38474, 42392, 46209, 50045, 54000, 57845, 61746, 65569,\n       69409, 73369, 77175, 81038, 84843, 88575, 92344, 96226])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['i', 'm', 'j', 'k', 'x', 'h', 'e', 'y', 'g', 'w', 's', 'f', 'v', 'b',\n       't', 'c', 'n', 'd', 'q', 'o', 'z', 'l', 'u', 'p', 'r', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    100\nm    100\nj    100\nk    100\nx    100\nh    100\ne    100\ny    100\ng    100\nw    100\ns    100\nf    100\nv    100\nb    100\nt    100\nc    100\nn    100\nd    100\nq    100\no    100\nz    100\nl    100\nu    100\np    100\nr    100\na    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1ac0>",
                "self.obj": "0         6\n1        55\n2        50\n3         2\n4        71\n         ..\n99995    96\n99996    57\n99997    60\n99998    16\n99999    60\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([ 6, 55, 50,  2, 71, 75, 80, 31, 69, 27, 33, 37, 77, 91, 10,  5,  1,\n       46, 21, 42, 25, 60, 56, 40, 63, 82, 99, 93, 15, 45, 16, 48, 95, 98,\n       11, 89, 49, 14, 32, 23, 39, 28, 52, 74, 54, 67, 19, 96, 87, 51, 38,\n       72, 44, 97, 43, 12, 53, 86,  9, 58, 81, 29,  7, 64, 83, 13, 41, 90,\n       62, 24, 68, 66, 20, 84, 85, 70, 73, 34,  0, 88, 76, 57, 35,  8, 79,\n       61, 65, 59, 92, 78, 17, 30, 36,  3, 94, 18,  4, 47, 26, 22])",
                "val": "array([ 6, 55, 50, ..., 60, 16, 60])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([    0, 18958, 47344, ..., 45582, 65935, 95162])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-26     99\nm    2015-09-01    100\nj    2015-08-30     99\nk    2015-08-27    100\nx    2015-08-27     98\n                  ... \n     2015-08-23     98\ne    2015-08-29     97\nu    2015-09-01     94\nd    2015-09-01     98\nw    2015-08-25     97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddcdc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddce20>",
                "self.obj": "0         6.0\n1        55.0\n2        50.0\n3         2.0\n4        71.0\n         ... \n99995    96.0\n99996    57.0\n99997    60.0\n99998    16.0\n99999    60.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([ 6., 55., 50., ..., 60., 16., 60.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 86831, 93585, 99773])",
                "idx": "array([ 5883,  9594, 13221, 16766, 20330, 24047, 27684, 31300, 34879,\n       38478, 42182, 45766, 49401, 53055, 56728, 60333, 63940, 67641,\n       71226, 74846, 78546, 82152, 85742, 89247, 92793, 96451])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['i', 'j', 'k', 'x', 'h', 'e', 'y', 'g', 'w', 's', 'f', 'v', 't', 'c',\n       'n', 'd', 'q', 'o', 'z', 'b', 'm', 'l', 'u', 'p', 'r', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    101\nj    101\nk    101\nx    101\nh    101\ne    101\ny    101\ng    101\nw    101\ns    101\nf    101\nv    101\nt    101\nc    101\nn    101\nd    101\nq    101\no    101\nz    101\nb    101\nm    101\nl    101\nu    101\np    101\nr    101\na    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dc6940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dc6d90>",
                "self.obj": "0         6.0\n1        55.0\n2        50.0\n3         2.0\n4        71.0\n         ... \n99995    96.0\n99996    57.0\n99997    60.0\n99998    16.0\n99999    60.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([ 6., 55., 50., ..., 60., 16., 60.])",
                "codes": "array([-1, -1, -1, ..., 98, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 80002, 24755, 92269])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-26    100\nj    2015-08-30     98\nx    2015-08-27     98\nh    2015-08-28     98\nk    2015-08-23     92\n                  ... \nu    2015-09-01     91\np    2015-08-23     96\nk    2015-08-27     97\nw    2015-08-25     94\nd    2015-09-01     97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da07f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0b80>",
                "self.obj": "0         6.0\n1        55.0\n2        50.0\n3         2.0\n4        71.0\n         ... \n99995    96.0\n99996    57.0\n99997    60.0\n99998    16.0\n99999    60.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([ 6., 55., 50., ..., 60., 16., 60.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 86831, 93585, 99773])",
                "idx": "array([ 5883,  9594, 13221, 16766, 20330, 24047, 27684, 31300, 34879,\n       38478, 42182, 45766, 49401, 53055, 56728, 60333, 63940, 67641,\n       71226, 74846, 78546, 82152, 85742, 89247, 92793, 96451])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['i', 'j', 'k', 'x', 'h', 'e', 'y', 'g', 'w', 's', 'f', 'v', 't', 'c',\n       'n', 'd', 'q', 'o', 'z', 'b', 'm', 'l', 'u', 'p', 'r', 'a'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ni    101\nj    101\nk    101\nx    101\nh    101\ne    101\ny    101\ng    101\nw    101\ns    101\nf    101\nv    101\nt    101\nc    101\nn    101\nd    101\nq    101\no    101\nz    101\nb    101\nm    101\nl    101\nu    101\np    101\nr    101\na    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da07f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0160>",
                "self.obj": "0         6.0\n1        55.0\n2        50.0\n3         2.0\n4        71.0\n         ... \n99995    96.0\n99996    57.0\n99997    60.0\n99998    16.0\n99999    60.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([ 6., 55., 50., ..., 60., 16., 60.])",
                "codes": "array([-1, -1, -1, ..., 98, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 80002, 24755, 92269])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ni    2015-08-26    100\nj    2015-08-30     98\nx    2015-08-27     98\nh    2015-08-28     98\nk    2015-08-23     92\n                  ... \nu    2015-09-01     91\np    2015-08-23     96\nk    2015-08-27     97\nw    2015-08-25     94\nd    2015-09-01     97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddcca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc040>",
                "self.obj": "0     974\n1     928\n2      10\n3     224\n4     836\n     ... \n95    506\n96    281\n97    924\n98    233\n99    483\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,\n        3,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,\n       10, 10, 11, 11, 11, 11, 11, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15,\n       15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19,\n       20, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25])",
                "_": "array of shape 96",
                "val": "array of shape 100",
                "codes": "array([ 0, 37, 41, 83,  1, 30, 53, 59, 89, 94,  2, 29, 34, 49,  3, 12, 23,\n       36, 46, 55, 65, 74, 93,  4, 66, 71,  5, 33, 70, 77,  4,  6, 15, 73,\n        7, 19, 47, 51, 57, 67,  8,  9, 13, 32, 38, 48, 84, 10, 17, 25, 60,\n       11, 21, 14, 32, 35, 56, 78, 16, 86, 17, 40, 69, 18, 39, 63, 20, 54,\n       88, 22, 61, 82, 24, 43, 50, 58, 26, 27, 68, 76, 28, 44, 52, 62, 90,\n       31, 64, 72, 42, 87, 95, 45, 79, 75, 81, 80, 91, 71, 85, 92])",
                "sorter": "array([ 0, 37, 41, 85,  1, 30, 54, 60, 93, 98,  2, 29, 34, 50,  3, 12, 23,\n       36, 46, 56, 66, 75, 97,  4, 67, 72,  5, 33, 71, 79, 76,  6, 15, 74,\n        7, 19, 48, 52, 58, 68,  8,  9, 13, 32, 38, 49, 86, 10, 90, 25, 61,\n       11, 21, 14, 47, 35, 57, 80, 16, 88, 17, 40, 70, 18, 39, 64, 20, 55,\n       92, 22, 62, 84, 24, 43, 51, 59, 26, 27, 69, 78, 28, 44, 53, 63, 94,\n       31, 65, 73, 42, 91, 99, 45, 81, 77, 83, 82, 95, 89, 87, 96])",
                "idx": "array([ 0,  4, 10, 14, 23, 26, 30, 34, 40, 47, 51, 53, 58, 60, 63, 66, 69,\n       72, 76, 80, 85, 88, 91, 93, 95, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 6, 4, 9, 3, 4, 4, 6, 7, 4, 2, 5, 2, 3, 3, 3, 3, 4, 4, 5, 3, 3,\n       2, 2, 2, 3])",
                "res": "array([4, 6, 4, 9, 3, 4, 4, 6, 7, 4, 2, 5, 2, 3, 3, 3, 3, 4, 4, 5, 3, 3,\n       2, 2, 2, 3])",
                "ri": "Index(['l', 'm', 'b', 'r', 'f', 'h', 'o', 'u', 'c', 'j', 'q', 'd', 'i', 'e',\n       'v', 'a', 'n', 'x', 't', 'g', 'k', 's', 'y', 'w', 'z', 'p'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    4\nm    6\nb    4\nr    9\nf    3\nh    4\no    4\nu    6\nc    7\nj    4\nq    2\nd    5\ni    2\ne    3\nv    3\na    3\nn    3\nx    4\nt    4\ng    5\nk    3\ns    3\ny    2\nw    2\nz    2\np    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84df0>",
                "self.obj": "0     974\n1     928\n2      10\n3     224\n4     836\n     ... \n95    506\n96    281\n97    924\n98    233\n99    483\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  2,  3,  3,  4,  4,  5,  6,  7,  7,  8,  8,  9,  9, 10,\n       10, 11, 12, 12, 13, 14, 14, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22,\n       22, 23, 23, 24, 25, 26, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,\n       35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,\n       52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82])",
                "_": "array of shape 96",
                "val": "array of shape 100",
                "codes": "array([ 0, 41,  1,  2,  3, 36,  4, 66,  5,  6,  7, 47,  8, 32,  9, 48, 10,\n       60, 11, 12, 93, 13, 14, 32, 35, 15, 16, 17, 69, 18, 19, 20, 21, 22,\n       61, 23, 74, 24, 25, 26, 27, 76, 28, 29, 30, 31, 33, 34, 37, 38, 39,\n       63, 40, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n       59, 62, 90, 64, 65, 67, 68, 70, 71, 72, 73,  4, 75, 77, 78, 79, 80,\n       81, 82, 83, 84, 85, 86, 71, 17, 87, 88, 89, 91, 92, 94, 95])",
                "sorter": "array([ 0, 41,  1,  2,  3, 36,  4, 67,  5,  6,  7, 48,  8, 32,  9, 49, 10,\n       61, 11, 12, 97, 13, 14, 47, 35, 15, 16, 17, 70, 18, 19, 20, 21, 22,\n       62, 23, 75, 24, 25, 26, 27, 78, 28, 29, 30, 31, 33, 34, 37, 38, 39,\n       64, 40, 42, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 63, 94, 65, 66, 68, 69, 71, 72, 73, 74, 76, 77, 79, 80, 81, 82,\n       83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99])",
                "idx": "array([ 0,  2,  3,  4,  6,  8,  9, 10, 12, 14, 16, 18, 19, 21, 22, 25, 26,\n       27, 29, 30, 31, 32, 33, 35, 37, 38, 39, 42, 43, 44, 45, 46, 47, 48,\n       49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\n       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 1,\n       2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 3, 1, 1, 2, 1, 1, 1, 1,\n       2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 83",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-09-01    2\nm    2015-08-23    1\nb    2015-09-01    1\nr    2015-08-27    2\nf    2015-08-24    2\n                  ..\nm    2015-08-27    1\nz    2015-08-27    1\np    2015-09-01    1\nm    2015-08-28    1\ns    2015-08-27    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56ee0>",
                "self.obj": "0     974.0\n1     928.0\n2      10.0\n3     224.0\n4     836.0\n      ...  \n95    506.0\n96    281.0\n97    924.0\n98    233.0\n99    483.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,\n        6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,\n       10, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15,\n       15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19,\n       19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25])",
                "_": "array of shape 82",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 29, 43, 57, 70, -1,  0, 31, 35,  2, 23, 28, 41, -1, -1,  3,\n        9, 20, 30, 47, 63, 79,  4, 55, 60,  5, 27, 59, 66,  4,  6, 12, 62,\n       -1, 16, 39, 49, 56, -1, -1, 10, 26, 32, 40,  7, 14, 22, 52,  8, 18,\n       -1, 11, 48, 67, 13, 72, 14, 34, 58, 17, 46, 74, -1, 19, 53, 21, 37,\n       42, 50, -1, -1, 65, -1, 38, 44, 54, 76, 24, 45, 51, 75, 80, -1, 25,\n       61, -1, 33, 36, 73, 81, -1, 68, -1, 64, 69, 77, 60, 71, 78])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 85,  0, 37, 41,  2, 29, 34, 50, 46, 66,  3,\n       12, 23, 36, 56, 75, 97,  4, 67, 72,  5, 33, 71, 79, 76,  6, 15, 74,\n        7, 19, 48, 58, 68,  8,  9, 13, 32, 38, 49, 10, 90, 25, 61, 11, 21,\n       47, 14, 57, 80, 16, 88, 17, 40, 70, 20, 55, 92, 84, 22, 62, 24, 43,\n       51, 59, 26, 27, 78, 28, 44, 53, 63, 94, 30, 54, 60, 93, 98, 65, 31,\n       73, 64, 39, 42, 91, 99, 45, 81, 83, 77, 82, 95, 89, 87, 96])",
                "idx": "array([ 6, 10, 14, 23, 26, 30, 34, 39, 45, 49, 51, 55, 57, 60, 63, 66, 70,\n       73, 78, 83, 86, 88, 91, 93, 95, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 4, 4, 8, 3, 4, 4, 5, 5, 4, 2, 4, 2, 3, 3, 3, 4, 2, 5, 5, 3, 2,\n       3, 2, 2, 2, 3])",
                "res": "array([4, 4, 8, 3, 4, 4, 5, 5, 4, 2, 4, 2, 3, 3, 3, 4, 2, 5, 5, 3, 2, 3,\n       2, 2, 2, 3])",
                "ri": "Index(['l', 'b', 'r', 'f', 'h', 'o', 'u', 'c', 'j', 'q', 'd', 'i', 'e', 'a',\n       'n', 'x', 't', 'g', 'm', 'k', 'v', 's', 'y', 'w', 'z', 'p'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    4\nb    4\nr    8\nf    3\nh    4\no    4\nu    5\nc    5\nj    4\nq    2\nd    4\ni    2\ne    3\na    3\nn    3\nx    4\nt    2\ng    5\nm    5\nk    3\nv    2\ns    3\ny    2\nw    2\nz    2\np    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d567f0>",
                "self.obj": "0     974.0\n1     928.0\n2      10.0\n3     224.0\n4     836.0\n      ...  \n95    506.0\n96    281.0\n97    924.0\n98    233.0\n99    483.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  2,  3,  4,  5,\n        5,  6,  6,  7,  7,  8,  8,  9, 10, 10, 11, 12, 12, 13, 14, 15, 15,\n       16, 17, 18, 19, 19, 20, 20, 21, 22, 23, 23, 23, 24, 25, 26, 27, 28,\n       29, 30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75])",
                "_": "array of shape 82",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 29, 34, 43, 57, 64, 70,  0, 35,  2,  4, 55,  5,  6, -1,\n       39, -1, 26, -1, 40,  7, 52,  8,  9, 79, 10, -1, 11, 12, 13, 14, 58,\n       16, 17, 18, 19, 53, 20, 63, 21, 22, -1, -1, 65, -1, 23, 24, 25, 27,\n       28, 30, 31, 32, -1, 33, 36, 37, 38, -1, -1, 41, 42, 44, 45, 46, 47,\n       48, 49, 50, 51, 54, 76, -1, -1, 56, 59, 60, 61, 62,  4, 66, 67, 68,\n       69, -1, -1, -1, 71, 72, 60, 14, 73, 74, 75, 77, 78, 80, 81])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0, 41,  2,  4, 67,  5,  6,  7,\n       48,  8, 32,  9, 49, 10, 61, 11, 12, 97, 13, 47, 14, 15, 16, 17, 70,\n       19, 20, 21, 22, 62, 23, 75, 24, 25, 26, 27, 78, 28, 29, 30, 31, 33,\n       34, 36, 37, 38, 64, 39, 42, 43, 44, 45, 46, 50, 51, 53, 54, 55, 56,\n       57, 58, 59, 60, 63, 94, 65, 66, 68, 71, 72, 73, 74, 76, 79, 80, 81,\n       82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99])",
                "idx": "array([ 9, 11, 12, 14, 15, 16, 18, 20, 22, 24, 25, 27, 28, 30, 31, 32, 34,\n       35, 36, 37, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n       57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\n       92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 76",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-09-01    2\nb    2015-09-01    1\nf    2015-08-24    2\nh    2015-08-28    1\no    2015-08-30    1\n                  ..\nm    2015-08-27    1\nz    2015-08-27    1\np    2015-09-01    1\nm    2015-08-28    1\ns    2015-08-27    1\nName: julie, Length: 76, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddca00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcaf0>",
                "self.obj": "0     974.0\n1     928.0\n2      10.0\n3     224.0\n4     836.0\n      ...  \n95    506.0\n96    281.0\n97    924.0\n98    233.0\n99    483.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,\n        2,  2,  2,  2,  2,  2,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  5,\n        6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9,\n       10, 10, 10, 10, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15,\n       15, 15, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 19, 19,\n       19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 25])",
                "_": "array of shape 82",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 29, 43, 57, 70, -1,  0, 31, 35,  2, 23, 28, 41, -1, -1,  3,\n        9, 20, 30, 47, 63, 79,  4, 55, 60,  5, 27, 59, 66,  4,  6, 12, 62,\n       -1, 16, 39, 49, 56, -1, -1, 10, 26, 32, 40,  7, 14, 22, 52,  8, 18,\n       -1, 11, 48, 67, 13, 72, 14, 34, 58, 17, 46, 74, -1, 19, 53, 21, 37,\n       42, 50, -1, -1, 65, -1, 38, 44, 54, 76, 24, 45, 51, 75, 80, -1, 25,\n       61, -1, 33, 36, 73, 81, -1, 68, -1, 64, 69, 77, 60, 71, 78])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 85,  0, 37, 41,  2, 29, 34, 50, 46, 66,  3,\n       12, 23, 36, 56, 75, 97,  4, 67, 72,  5, 33, 71, 79, 76,  6, 15, 74,\n        7, 19, 48, 58, 68,  8,  9, 13, 32, 38, 49, 10, 90, 25, 61, 11, 21,\n       47, 14, 57, 80, 16, 88, 17, 40, 70, 20, 55, 92, 84, 22, 62, 24, 43,\n       51, 59, 26, 27, 78, 28, 44, 53, 63, 94, 30, 54, 60, 93, 98, 65, 31,\n       73, 64, 39, 42, 91, 99, 45, 81, 83, 77, 82, 95, 89, 87, 96])",
                "idx": "array([ 6, 10, 14, 23, 26, 30, 34, 39, 45, 49, 51, 55, 57, 60, 63, 66, 70,\n       73, 78, 83, 86, 88, 91, 93, 95, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 4, 4, 8, 3, 4, 4, 5, 5, 4, 2, 4, 2, 3, 3, 3, 4, 2, 5, 5, 3, 2,\n       3, 2, 2, 2, 3])",
                "res": "array([4, 4, 8, 3, 4, 4, 5, 5, 4, 2, 4, 2, 3, 3, 3, 4, 2, 5, 5, 3, 2, 3,\n       2, 2, 2, 3])",
                "ri": "Index(['l', 'b', 'r', 'f', 'h', 'o', 'u', 'c', 'j', 'q', 'd', 'i', 'e', 'a',\n       'n', 'x', 't', 'g', 'm', 'k', 'v', 's', 'y', 'w', 'z', 'p'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nl    4\nb    4\nr    8\nf    3\nh    4\no    4\nu    5\nc    5\nj    4\nq    2\nd    4\ni    2\ne    3\na    3\nn    3\nx    4\nt    2\ng    5\nm    5\nk    3\nv    2\ns    3\ny    2\nw    2\nz    2\np    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25b20>",
                "self.obj": "0     974.0\n1     928.0\n2      10.0\n3     224.0\n4     836.0\n      ...  \n95    506.0\n96    281.0\n97    924.0\n98    233.0\n99    483.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  2,  3,  4,  5,\n        5,  6,  6,  7,  7,  8,  8,  9, 10, 10, 11, 12, 12, 13, 14, 15, 15,\n       16, 17, 18, 19, 19, 20, 20, 21, 22, 23, 23, 23, 24, 25, 26, 27, 28,\n       29, 30, 31, 32, 33, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75])",
                "_": "array of shape 82",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 29, 34, 43, 57, 64, 70,  0, 35,  2,  4, 55,  5,  6, -1,\n       39, -1, 26, -1, 40,  7, 52,  8,  9, 79, 10, -1, 11, 12, 13, 14, 58,\n       16, 17, 18, 19, 53, 20, 63, 21, 22, -1, -1, 65, -1, 23, 24, 25, 27,\n       28, 30, 31, 32, -1, 33, 36, 37, 38, -1, -1, 41, 42, 44, 45, 46, 47,\n       48, 49, 50, 51, 54, 76, -1, -1, 56, 59, 60, 61, 62,  4, 66, 67, 68,\n       69, -1, -1, -1, 71, 72, 60, 14, 73, 74, 75, 77, 78, 80, 81])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0, 41,  2,  4, 67,  5,  6,  7,\n       48,  8, 32,  9, 49, 10, 61, 11, 12, 97, 13, 47, 14, 15, 16, 17, 70,\n       19, 20, 21, 22, 62, 23, 75, 24, 25, 26, 27, 78, 28, 29, 30, 31, 33,\n       34, 36, 37, 38, 64, 39, 42, 43, 44, 45, 46, 50, 51, 53, 54, 55, 56,\n       57, 58, 59, 60, 63, 94, 65, 66, 68, 71, 72, 73, 74, 76, 79, 80, 81,\n       82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98, 99])",
                "idx": "array([ 9, 11, 12, 14, 15, 16, 18, 20, 22, 24, 25, 27, 28, 30, 31, 32, 34,\n       35, 36, 37, 39, 41, 42, 43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,\n       57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\n       92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 76",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nl    2015-09-01    2\nb    2015-09-01    1\nf    2015-08-24    2\nh    2015-08-28    1\no    2015-08-30    1\n                  ..\nm    2015-08-27    1\nz    2015-08-27    1\np    2015-09-01    1\nm    2015-08-28    1\ns    2015-08-27    1\nName: julie, Length: 76, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84eb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84070>",
                "self.obj": "0      109\n1       54\n2      395\n3      636\n4      199\n      ... \n995    175\n996    463\n997    441\n998      6\n999    367\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 637",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  40,  74, 118, 161, 199, 242, 281, 313, 349, 379, 417, 464,\n       511, 540, 579, 617, 655, 706, 746, 798, 830, 852, 888, 925, 955])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([40, 34, 44, 41, 38, 42, 37, 32, 36, 29, 38, 45, 46, 29, 36, 38, 37,\n       50, 39, 52, 32, 22, 34, 37, 30, 45])",
                "res": "array([40, 34, 44, 41, 38, 42, 37, 32, 36, 29, 38, 45, 46, 29, 36, 38, 37,\n       50, 39, 52, 32, 22, 34, 37, 30, 45])",
                "ri": "Index(['h', 'n', 'x', 'e', 'q', 'l', 'w', 'o', 'b', 'r', 'z', 'y', 't', 'f',\n       'd', 'v', 'c', 's', 'u', 'p', 'j', 'k', 'm', 'a', 'i', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    40\nn    34\nx    44\ne    41\nq    38\nl    42\nw    37\no    32\nb    36\nr    29\nz    38\ny    45\nt    46\nf    29\nd    36\nv    38\nc    37\ns    50\nu    39\np    52\nj    32\nk    22\nm    34\na    37\ni    30\ng    45\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d084c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08eb0>",
                "self.obj": "0      109\n1       54\n2      395\n3      636\n4      199\n      ... \n995    175\n996    463\n997    441\n998      6\n999    367\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 637",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 252",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-26    6\nn    2015-08-26    3\nx    2015-08-27    6\ne    2015-08-29    1\nq    2015-08-25    5\n                  ..\ne    2015-09-01    2\nb    2015-08-29    1\nf    2015-08-31    3\nx    2015-08-26    1\ne    2015-08-23    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd12e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1a30>",
                "self.obj": "0      109.0\n1       54.0\n2      395.0\n3      636.0\n4      199.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998      6.0\n999    367.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  96, 138, 174, 209, 251, 286, 316, 350, 380, 416, 462, 505,\n       537, 565, 604, 640, 675, 721, 757, 806, 838, 859, 894, 928, 957])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([51, 31, 38, 29, 30, 37, 26, 24, 31, 24, 32, 42, 36, 30, 24, 34, 28,\n       31, 39, 32, 39, 31, 18, 29, 25, 27, 38])",
                "res": "array([31, 38, 29, 30, 37, 26, 24, 31, 24, 32, 42, 36, 30, 24, 34, 28, 31,\n       39, 32, 39, 31, 18, 29, 25, 27, 38])",
                "ri": "Index(['h', 'x', 'e', 'q', 'l', 'w', 'o', 'b', 'r', 'z', 'y', 't', 'n', 'f',\n       'd', 'v', 'c', 's', 'u', 'p', 'j', 'k', 'm', 'a', 'i', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    31\nx    38\ne    29\nq    30\nl    37\nw    26\no    24\nb    31\nr    24\nz    32\ny    42\nt    36\nn    30\nf    24\nd    34\nv    28\nc    31\ns    39\nu    32\np    39\nj    31\nk    18\nm    29\na    25\ni    27\ng    38\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1280>",
                "self.obj": "0      109.0\n1       54.0\n2      395.0\n3      636.0\n4      199.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998      6.0\n999    367.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 249",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 250",
                "res": "array of shape 249",
                "ri": "array of shape 249",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-26    6\nx    2015-08-27    5\nq    2015-08-25    4\nx    2015-08-29    5\nl    2015-08-27    8\n                  ..\ne    2015-09-01    2\nb    2015-08-29    1\nf    2015-08-31    3\nx    2015-08-26    1\ne    2015-08-23    1\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d844c0>",
                "self.obj": "0      109.0\n1       54.0\n2      395.0\n3      636.0\n4      199.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998      6.0\n999    367.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  96, 138, 174, 209, 251, 286, 316, 350, 380, 416, 462, 505,\n       537, 565, 604, 640, 675, 721, 757, 806, 838, 859, 894, 928, 957])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([51, 31, 38, 29, 30, 37, 26, 24, 31, 24, 32, 42, 36, 30, 24, 34, 28,\n       31, 39, 32, 39, 31, 18, 29, 25, 27, 38])",
                "res": "array([31, 38, 29, 30, 37, 26, 24, 31, 24, 32, 42, 36, 30, 24, 34, 28, 31,\n       39, 32, 39, 31, 18, 29, 25, 27, 38])",
                "ri": "Index(['h', 'x', 'e', 'q', 'l', 'w', 'o', 'b', 'r', 'z', 'y', 't', 'n', 'f',\n       'd', 'v', 'c', 's', 'u', 'p', 'j', 'k', 'm', 'a', 'i', 'g'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    31\nx    38\ne    29\nq    30\nl    37\nw    26\no    24\nb    31\nr    24\nz    32\ny    42\nt    36\nn    30\nf    24\nd    34\nv    28\nc    31\ns    39\nu    32\np    39\nj    31\nk    18\nm    29\na    25\ni    27\ng    38\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d844c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84a00>",
                "self.obj": "0      109.0\n1       54.0\n2      395.0\n3      636.0\n4      199.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998      6.0\n999    367.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 249",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 250",
                "res": "array of shape 249",
                "ri": "array of shape 249",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-26    6\nx    2015-08-27    5\nq    2015-08-25    4\nx    2015-08-29    5\nl    2015-08-27    8\n                  ..\ne    2015-09-01    2\nb    2015-08-29    1\nf    2015-08-31    3\nx    2015-08-26    1\ne    2015-08-23    1\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da07c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da05e0>",
                "self.obj": "0       207\n1       717\n2       291\n3       949\n4       345\n       ... \n9995    191\n9996    755\n9997    945\n9998    862\n9999    813\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([207, 717, 291, ..., 945, 862, 813])",
                "codes": "array([  0,   0,   3, ..., 978, 978, 984])",
                "sorter": "array([   0, 4669, 4993, ..., 6093, 7354, 4448])",
                "idx": "array([   0,  365,  760, 1135, 1505, 1884, 2267, 2602, 2959, 3341, 3770,\n       4148, 4566, 4996, 5381, 5799, 6180, 6558, 6942, 7300, 7693, 8073,\n       8458, 8836, 9237, 9609])",
                "inc": "array([1, 0, 1, ..., 1, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([300, 326, 307, 304, 310, 314, 285, 306, 319, 347, 315, 338, 342,\n       321, 346, 312, 310, 325, 303, 318, 325, 337, 324, 345, 312, 321])",
                "res": "array([300, 326, 307, 304, 310, 314, 285, 306, 319, 347, 315, 338, 342,\n       321, 346, 312, 310, 325, 303, 318, 325, 337, 324, 345, 312, 321])",
                "ri": "Index(['o', 'y', 'v', 'i', 'k', 'q', 'a', 'j', 'd', 'u', 'x', 'f', 'c', 'w',\n       'r', 'z', 'e', 'b', 's', 'm', 't', 'n', 'p', 'h', 'g', 'l'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    300\ny    326\nv    307\ni    304\nk    310\nq    314\na    285\nj    306\nd    319\nu    347\nx    315\nf    338\nc    342\nw    321\nr    346\nz    312\ne    310\nb    325\ns    303\nm    318\nt    325\nn    337\np    324\nh    345\ng    312\nl    321\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd10d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd15e0>",
                "self.obj": "0       207\n1       717\n2       291\n3       949\n4       345\n       ... \n9995    191\n9996    755\n9997    945\n9998    862\n9999    813\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([207, 717, 291, ..., 945, 862, 813])",
                "codes": "array([  0,   3,  28, ..., 860, 880, 981])",
                "sorter": "array([   0, 7910, 7536, ..., 3698, 9203, 5523])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-31    37\ny    2015-08-29    49\nv    2015-09-01    37\ni    2015-08-27    34\nk    2015-08-28    38\n                   ..\nv    2015-08-26    40\nf    2015-08-29    36\ng    2015-08-30    31\nz    2015-08-24    27\na    2015-08-28    30\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08070>",
                "self.obj": "0       207.0\n1       717.0\n2       291.0\n3       949.0\n4       345.0\n        ...  \n9995    191.0\n9996    755.0\n9997    945.0\n9998    862.0\n9999    813.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 999",
                "val": "array([207., 717., 291., ..., 945., 862., 813.])",
                "codes": "array([ -1,  -1,  -1, ..., 966, 966, 995])",
                "sorter": "array([ 103,  256,  273, ..., 4276, 5142, 6105])",
                "idx": "array([ 589,  941, 1287, 1638, 1995, 2360, 2676, 3010, 3372, 3784, 4140,\n       4536, 4950, 5312, 5694, 6045, 6400, 6755, 7087, 7460, 7819, 8178,\n       8536, 8906, 9257, 9630])",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([396, 263, 246, 246, 254, 269, 237, 245, 271, 284, 257, 280, 306,\n       259, 273, 252, 258, 256, 254, 270, 269, 272, 272, 291, 261, 269,\n       256])",
                "res": "array([263, 246, 246, 254, 269, 237, 245, 271, 284, 257, 280, 306, 259,\n       273, 252, 258, 256, 254, 270, 269, 272, 272, 291, 261, 269, 256])",
                "ri": "Index(['o', 'v', 'i', 'k', 'q', 'a', 'j', 'd', 'u', 'x', 'f', 'c', 'w', 'r',\n       'z', 'e', 'b', 's', 'm', 't', 'n', 'p', 'h', 'g', 'l', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    263\nv    246\ni    246\nk    254\nq    269\na    237\nj    245\nd    271\nu    284\nx    257\nf    280\nc    306\nw    259\nr    273\nz    252\ne    258\nb    256\ns    254\nm    270\nt    269\nn    272\np    272\nh    291\ng    261\nl    269\ny    256\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08100>",
                "self.obj": "0       207.0\n1       717.0\n2       291.0\n3       949.0\n4       345.0\n        ...  \n9995    191.0\n9996    755.0\n9997    945.0\n9998    862.0\n9999    813.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 999",
                "val": "array([207., 717., 291., ..., 945., 862., 813.])",
                "codes": "array([ -1,  -1,  -1, ..., 760, 812, 962])",
                "sorter": "array([ 103,  256,  273, ..., 4917, 3698, 5523])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-31    31\nv    2015-09-01    32\nk    2015-08-28    27\nq    2015-08-24    31\na    2015-08-27    32\n                   ..\nh    2015-08-31    20\nf    2015-08-29    31\ng    2015-08-30    25\nz    2015-08-24    24\na    2015-08-28    25\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84fa0>",
                "self.obj": "0       207.0\n1       717.0\n2       291.0\n3       949.0\n4       345.0\n        ...  \n9995    191.0\n9996    755.0\n9997    945.0\n9998    862.0\n9999    813.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 999",
                "val": "array([207., 717., 291., ..., 945., 862., 813.])",
                "codes": "array([ -1,  -1,  -1, ..., 966, 966, 995])",
                "sorter": "array([ 103,  256,  273, ..., 4276, 5142, 6105])",
                "idx": "array([ 589,  941, 1287, 1638, 1995, 2360, 2676, 3010, 3372, 3784, 4140,\n       4536, 4950, 5312, 5694, 6045, 6400, 6755, 7087, 7460, 7819, 8178,\n       8536, 8906, 9257, 9630])",
                "inc": "array([1, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([396, 263, 246, 246, 254, 269, 237, 245, 271, 284, 257, 280, 306,\n       259, 273, 252, 258, 256, 254, 270, 269, 272, 272, 291, 261, 269,\n       256])",
                "res": "array([263, 246, 246, 254, 269, 237, 245, 271, 284, 257, 280, 306, 259,\n       273, 252, 258, 256, 254, 270, 269, 272, 272, 291, 261, 269, 256])",
                "ri": "Index(['o', 'v', 'i', 'k', 'q', 'a', 'j', 'd', 'u', 'x', 'f', 'c', 'w', 'r',\n       'z', 'e', 'b', 's', 'm', 't', 'n', 'p', 'h', 'g', 'l', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    263\nv    246\ni    246\nk    254\nq    269\na    237\nj    245\nd    271\nu    284\nx    257\nf    280\nc    306\nw    259\nr    273\nz    252\ne    258\nb    256\ns    254\nm    270\nt    269\nn    272\np    272\nh    291\ng    261\nl    269\ny    256\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84fa0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d841f0>",
                "self.obj": "0       207.0\n1       717.0\n2       291.0\n3       949.0\n4       345.0\n        ...  \n9995    191.0\n9996    755.0\n9997    945.0\n9998    862.0\n9999    813.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 999",
                "val": "array([207., 717., 291., ..., 945., 862., 813.])",
                "codes": "array([ -1,  -1,  -1, ..., 760, 812, 962])",
                "sorter": "array([ 103,  256,  273, ..., 4917, 3698, 5523])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-31    31\nv    2015-09-01    32\nk    2015-08-28    27\nq    2015-08-24    31\na    2015-08-27    32\n                   ..\nh    2015-08-31    20\nf    2015-08-29    31\ng    2015-08-30    25\nz    2015-08-24    24\na    2015-08-28    25\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08220>",
                "self.obj": "0        795\n1        767\n2        877\n3        101\n4        389\n        ... \n99995    988\n99996    929\n99997    452\n99998    991\n99999    397\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([795, 767, 877, ..., 452, 991, 397])",
                "codes": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([    0, 31124, 64380, ..., 78199, 89261, 89677])",
                "idx": "array([    0,  3862,  7672, 11604, 15398, 19301, 23065, 26959, 30787,\n       34675, 38585, 42412, 46245, 50118, 54006, 57756, 61554, 65463,\n       69300, 73191, 77031, 80890, 84697, 88442, 92334, 96154])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([986, 979, 981, 971, 983, 969, 985, 987, 979, 978, 963, 973, 981,\n       978, 981, 974, 979, 983, 980, 978, 979, 969, 983, 983, 979, 981])",
                "res": "array([986, 979, 981, 971, 983, 969, 985, 987, 979, 978, 963, 973, 981,\n       978, 981, 974, 979, 983, 980, 978, 979, 969, 983, 983, 979, 981])",
                "ri": "Index(['o', 'p', 'm', 'z', 'j', 't', 'd', 'x', 'u', 'b', 'q', 'a', 'e', 'n',\n       'r', 's', 'i', 'w', 'y', 'g', 'f', 'c', 'l', 'v', 'h', 'k'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    986\np    979\nm    981\nz    971\nj    983\nt    969\nd    985\nx    987\nu    979\nb    978\nq    963\na    973\ne    981\nn    978\nr    981\ns    974\ni    979\nw    983\ny    980\ng    978\nf    979\nc    969\nl    983\nv    983\nh    979\nk    981\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d565e0>",
                "self.obj": "0        795\n1        767\n2        877\n3        101\n4        389\n        ... \n99995    988\n99996    929\n99997    452\n99998    991\n99999    397\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([795, 767, 877, ..., 452, 991, 397])",
                "codes": "array([  0,   5,   6, ..., 990, 991, 993])",
                "sorter": "array([    0, 20949, 67321, ..., 79095, 34779, 83344])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-23    325\np    2015-08-29    308\nm    2015-08-31    341\nz    2015-08-26    306\nj    2015-08-28    329\n                  ... \n     2015-08-26    313\nv    2015-08-30    300\ne    2015-08-26    303\nw    2015-08-25    322\ny    2015-08-31    322\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd15e0>",
                "self.obj": "0        795.0\n1        767.0\n2        877.0\n3        101.0\n4        389.0\n         ...  \n99995    988.0\n99996    929.0\n99997    452.0\n99998    991.0\n99999    397.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([795., 767., 877., ..., 452., 991., 397.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 78199, 89261, 89677])",
                "idx": "array([ 5883,  9521, 13221, 16780, 20450, 23984, 27640, 31222, 34825,\n       38485, 42160, 45742, 49329, 52967, 56630, 60173, 63756, 67430,\n       71044, 74725, 78352, 81986, 85569, 89092, 92760, 96370])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([994, 963, 951, 954, 963, 943, 961, 951, 972, 965, 954, 938, 944,\n       954, 955, 959, 938, 960, 960, 959, 955, 960, 939, 960, 962, 953,\n       961])",
                "res": "array([963, 951, 954, 963, 943, 961, 951, 972, 965, 954, 938, 944, 954,\n       955, 959, 938, 960, 960, 959, 955, 960, 939, 960, 962, 953, 961])",
                "ri": "Index(['o', 'm', 'z', 'j', 't', 'd', 'p', 'x', 'u', 'b', 'q', 'a', 'e', 'n',\n       'r', 's', 'i', 'w', 'y', 'g', 'f', 'c', 'l', 'v', 'h', 'k'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    963\nm    951\nz    954\nj    963\nt    943\nd    961\np    951\nx    972\nu    965\nb    954\nq    938\na    944\ne    954\nn    955\nr    959\ns    938\ni    960\nw    960\ny    959\ng    955\nf    960\nc    939\nl    960\nv    962\nh    953\nk    961\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1b20>",
                "self.obj": "0        795.0\n1        767.0\n2        877.0\n3        101.0\n4        389.0\n         ...  \n99995    988.0\n99996    929.0\n99997    452.0\n99998    991.0\n99999    397.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([795., 767., 877., ..., 452., 991., 397.])",
                "codes": "array([ -1,  -1,  -1, ..., 990, 994, 998])",
                "sorter": "array([  103,   256,   273, ..., 23233, 80490, 24983])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-23    269\nm    2015-08-31    282\nj    2015-08-28    258\nt    2015-08-25    258\n     2015-08-24    251\n                  ... \nw    2015-08-25    260\nj    2015-08-31    248\ny    2015-08-31    260\nd    2015-08-23    238\nj    2015-08-26    244\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56a30>",
                "self.obj": "0        795.0\n1        767.0\n2        877.0\n3        101.0\n4        389.0\n         ...  \n99995    988.0\n99996    929.0\n99997    452.0\n99998    991.0\n99999    397.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([795., 767., 877., ..., 452., 991., 397.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 78199, 89261, 89677])",
                "idx": "array([ 5883,  9521, 13221, 16780, 20450, 23984, 27640, 31222, 34825,\n       38485, 42160, 45742, 49329, 52967, 56630, 60173, 63756, 67430,\n       71044, 74725, 78352, 81986, 85569, 89092, 92760, 96370])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([994, 963, 951, 954, 963, 943, 961, 951, 972, 965, 954, 938, 944,\n       954, 955, 959, 938, 960, 960, 959, 955, 960, 939, 960, 962, 953,\n       961])",
                "res": "array([963, 951, 954, 963, 943, 961, 951, 972, 965, 954, 938, 944, 954,\n       955, 959, 938, 960, 960, 959, 955, 960, 939, 960, 962, 953, 961])",
                "ri": "Index(['o', 'm', 'z', 'j', 't', 'd', 'p', 'x', 'u', 'b', 'q', 'a', 'e', 'n',\n       'r', 's', 'i', 'w', 'y', 'g', 'f', 'c', 'l', 'v', 'h', 'k'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\no    963\nm    951\nz    954\nj    963\nt    943\nd    961\np    951\nx    972\nu    965\nb    954\nq    938\na    944\ne    954\nn    955\nr    959\ns    938\ni    960\nw    960\ny    959\ng    955\nf    960\nc    939\nl    960\nv    962\nh    953\nk    961\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d567c0>",
                "self.obj": "0        795.0\n1        767.0\n2        877.0\n3        101.0\n4        389.0\n         ...  \n99995    988.0\n99996    929.0\n99997    452.0\n99998    991.0\n99999    397.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([795., 767., 877., ..., 452., 991., 397.])",
                "codes": "array([ -1,  -1,  -1, ..., 990, 994, 998])",
                "sorter": "array([  103,   256,   273, ..., 23233, 80490, 24983])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \no    2015-08-23    269\nm    2015-08-31    282\nj    2015-08-28    258\nt    2015-08-25    258\n     2015-08-24    251\n                  ... \nw    2015-08-25    260\nj    2015-08-31    248\ny    2015-08-31    260\nd    2015-08-23    238\nj    2015-08-26    244\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da01f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0880>",
                "self.obj": "0     2\n1     2\n2     7\n3     8\n4     8\n     ..\n95    2\n96    6\n97    5\n98    7\n99    2\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  3,  3,\n        3,  4,  4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,\n        8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12, 13,\n       13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 17,\n       17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 21,\n       21, 21, 21, 21, 22, 22, 23, 24, 24, 24, 24, 24, 24, 25, 25])",
                "_": "array([2, 7, 8, 5, 9, 0, 3, 1, 6, 4])",
                "val": "array([2, 2, 7, 8, 8, 8, 5, 9, 2, 2, 0, 3, 1, 6, 1, 9, 6, 9, 1, 2, 9, 3,\n       2, 6, 4, 8, 7, 9, 0, 8, 0, 0, 6, 8, 7, 4, 7, 6, 8, 4, 6, 6, 7, 8,\n       2, 9, 1, 2, 2, 2, 6, 1, 4, 0, 4, 1, 4, 5, 7, 7, 8, 7, 2, 3, 0, 2,\n       5, 4, 8, 4, 8, 3, 1, 4, 5, 5, 0, 7, 6, 4, 7, 4, 6, 5, 2, 4, 6, 1,\n       8, 5, 0, 9, 9, 9, 2, 2, 6, 5, 7, 2])",
                "codes": "array([0, 1, 5, 7, 9, 0, 0, 2, 4, 2, 3, 4, 5, 8, 9, 2, 5, 5, 4, 9, 0, 8,\n       9, 0, 0, 2, 7, 8, 9, 1, 4, 9, 0, 3, 3, 5, 8, 8, 2, 1, 3, 6, 7, 8,\n       8, 9, 5, 7, 1, 7, 2, 2, 3, 3, 6, 7, 0, 1, 4, 6, 9, 0, 9, 2, 2, 6,\n       8, 0, 1, 2, 5, 7, 8, 8, 9, 1, 1, 4, 4, 4, 7, 8, 0, 9, 0, 0, 1, 3,\n       9, 0, 2, 1, 0, 1, 2, 3, 4, 5, 0, 8])",
                "sorter": "array([62, 42, 90, 87, 79, 84, 99, 25, 45,  5, 83, 93, 31, 86, 73, 38, 64,\n       76, 17, 69, 47, 78, 52,  1, 22,  3, 18, 13, 81, 59,  7, 39, 19, 74,\n       97, 28, 32, 96, 70, 26, 75, 63, 12, 16, 40, 56, 53, 14, 98, 46,  4,\n       29,  6, 57, 71, 51,  9, 36, 27, 11, 54, 65, 85, 33, 43, 21, 50, 95,\n       34, 68, 30, 72, 23, 37, 67,  2, 61, 20, 91, 92, 55, 82, 44, 35,  0,\n       49, 77, 66, 24, 48, 88, 58,  8, 80, 60, 89, 15, 10, 94, 41])",
                "idx": "array([ 0,  5,  9, 15, 18, 20, 23, 29, 32, 38, 39, 46, 48, 50, 56, 61, 63,\n       67, 71, 75, 82, 84, 89, 91, 92, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 3, 6, 2, 2, 3, 5, 3, 4, 1, 6, 2, 2, 4, 5, 2, 3, 4, 3, 4, 2, 4,\n       2, 1, 6, 2])",
                "res": "array([5, 3, 6, 2, 2, 3, 5, 3, 4, 1, 6, 2, 2, 4, 5, 2, 3, 4, 3, 4, 2, 4,\n       2, 1, 6, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    5\nb    3\nc    6\nd    2\ne    2\nf    3\ng    5\nh    3\ni    4\nj    1\nk    6\nl    2\nm    2\nn    4\no    5\np    2\nq    3\nr    4\ns    3\nt    4\nu    2\nv    4\nw    2\nx    1\ny    6\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da07c0>",
                "self.obj": "0     2\n1     2\n2     7\n3     8\n4     8\n     ..\n95    2\n96    6\n97    5\n98    7\n99    2\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n       15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 27, 28, 29,\n       30, 31, 32, 32, 33, 34, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\n       44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 53, 54, 55, 56, 57, 58,\n       59, 60, 61, 62, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n       73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 84, 85, 86])",
                "_": "array([2, 7, 8, 5, 9, 0, 3, 1, 6, 4])",
                "val": "array([2, 2, 7, 8, 8, 8, 5, 9, 2, 2, 0, 3, 1, 6, 1, 9, 6, 9, 1, 2, 9, 3,\n       2, 6, 4, 8, 7, 9, 0, 8, 0, 0, 6, 8, 7, 4, 7, 6, 8, 4, 6, 6, 7, 8,\n       2, 9, 1, 2, 2, 2, 6, 1, 4, 0, 4, 1, 4, 5, 7, 7, 8, 7, 2, 3, 0, 2,\n       5, 4, 8, 4, 8, 3, 1, 4, 5, 5, 0, 7, 6, 4, 7, 4, 6, 5, 2, 4, 6, 1,\n       8, 5, 0, 9, 9, 9, 2, 2, 6, 5, 7, 2])",
                "codes": "array([0, 1, 9, 5, 7, 0, 0, 2, 4, 2, 5, 9, 3, 8, 4, 5, 2, 5, 4, 9, 8, 9,\n       0, 0, 8, 0, 7, 9, 2, 9, 4, 1, 8, 3, 8, 5, 0, 3, 2, 1, 9, 6, 8, 3,\n       8, 7, 7, 5, 1, 7, 2, 3, 6, 3, 2, 7, 9, 1, 4, 6, 0, 0, 9, 6, 2, 2,\n       8, 1, 2, 5, 0, 7, 9, 8, 8, 1, 8, 4, 1, 4, 7, 4, 0, 9, 0, 0, 9, 1,\n       3, 0, 2, 1, 1, 5, 0, 3, 2, 4, 0, 8])",
                "sorter": "array([62, 42, 79, 90, 87, 84, 99, 25, 45,  5, 31, 73, 83, 86, 93, 64, 38,\n       76, 17, 69, 78, 52, 47, 22, 13,  1, 18, 81,  3, 39,  7, 59, 32, 97,\n       96, 28, 19, 74, 70, 26, 56, 63, 16, 75, 40, 12, 14, 53, 98, 46, 29,\n        6, 71, 57,  4, 51, 54, 36, 27, 11,  9, 65, 85, 21, 43, 33, 50, 34,\n       68, 30, 95, 72, 67, 23, 37,  2, 82, 92, 61, 20, 55, 91, 44, 35,  0,\n       49, 24, 77, 66, 48, 88, 58, 80, 10,  8, 89, 60, 15, 94, 41])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  8,  9, 10, 11, 12, 13, 14, 15, 16, 18,\n       20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38,\n       39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57,\n       59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 77, 78,\n       79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\n       98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "ri": "array of shape 87",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\n                  ..\ny    2015-08-25    1\n     2015-08-26    1\n     2015-08-30    2\nz    2015-08-24    1\n     2015-08-29    1\nName: julie, Length: 87, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a100>",
                "self.obj": "0     2.0\n1     2.0\n2     7.0\n3     8.0\n4     8.0\n     ... \n95    2.0\n96    6.0\n97    5.0\n98    7.0\n99    2.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,\n        2,  2,  2,  3,  3,  3,  4,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,\n        8,  8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12,\n       13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16,\n       17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 21,\n       21, 21, 21, 21, 22, 22, 23, 24, 24, 24, 24, 24, 24, 25, 25])",
                "_": "array([2., 7., 8., 5., 0., 3., 1., 6., 9., 4.])",
                "val": "array of shape 100",
                "codes": "array([ 0,  6,  7,  9,  9,  9,  0,  1,  4,  6,  9, -1, -1,  0,  2, -1,  2,\n        4,  8,  9, -1,  2,  4,  8, -1,  7,  0,  2,  7,  9, -1,  1,  9, -1,\n        0,  3,  3,  7,  7,  2, -1,  3,  5,  6,  7,  7,  9,  4,  6, -1,  1,\n        2,  2,  3,  3,  5,  6, -1, -1,  1,  5,  9, -1, -1,  2,  2,  5,  7,\n        0,  1,  2,  4,  6,  7,  7,  9,  1,  1,  6,  7,  8,  8,  8,  0, -1,\n        0,  0,  1,  9,  0,  2,  1, -1,  1,  2,  3,  4,  8,  0,  7])",
                "sorter": "array([ 1, 18, 86, 35, 52, 69, 62, 42, 90, 87, 79, 45, 84, 99, 25, 83,  5,\n       31, 93, 73, 64, 38, 76, 17, 47, 78, 22,  3, 13, 81,  7, 59, 39, 28,\n       19, 74, 97, 32, 96, 70, 26, 75, 63, 12, 16, 40, 56, 53, 14, 46, 98,\n        4, 29,  6, 57, 71, 51,  9, 27, 36, 11, 54, 65, 85, 33, 43, 21, 50,\n       95, 34, 68, 30, 72, 23, 37, 67,  2, 61, 55, 82, 20, 91, 92, 44, 66,\n        0, 49, 77, 24, 48, 88, 58,  8, 80, 60, 89, 10, 15, 94, 41])",
                "idx": "array([ 6, 11, 15, 20, 23, 24, 26, 30, 33, 39, 40, 47, 49, 51, 57, 62, 64,\n       68, 72, 76, 83, 84, 89, 91, 92, 98])",
                "inc": "array([1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 5, 3, 5, 3, 1, 2, 4, 3, 4, 1, 6, 2, 2, 4, 4, 1, 3, 4, 3, 4, 1,\n       4, 2, 1, 6, 2])",
                "res": "array([5, 3, 5, 3, 1, 2, 4, 3, 4, 1, 6, 2, 2, 4, 4, 1, 3, 4, 3, 4, 1, 4,\n       2, 1, 6, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    5\nb    3\nc    5\nd    3\ne    1\nf    2\ng    4\nh    3\ni    4\nj    1\nk    6\nl    2\nm    2\nn    4\no    4\np    1\nq    3\nr    4\ns    3\nt    4\nu    1\nv    4\nw    2\nx    1\ny    6\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bd60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7be80>",
                "self.obj": "0     2.0\n1     2.0\n2     7.0\n3     8.0\n4     8.0\n     ... \n95    2.0\n96    6.0\n97    5.0\n98    7.0\n99    2.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 27, 28, 28, 29, 30, 30, 31, 32, 33, 34, 35, 36, 37,\n       38, 39, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66,\n       67, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79])",
                "_": "array([2., 7., 8., 5., 0., 3., 1., 6., 9., 4.])",
                "val": "array of shape 100",
                "codes": "array([ 0,  1,  2,  6,  7,  7,  9,  9,  9,  0,  1,  9,  4,  6, -1,  0,  2,\n       -1,  2,  4,  9, -1,  8, -1,  2,  4,  8,  7, -1,  0,  7,  9,  9, -1,\n        1,  7,  3,  7, -1,  0,  3,  2, -1,  9,  5,  7,  3,  6,  6,  4,  1,\n       -1,  2,  3,  5,  3,  2,  6,  9, -1,  1,  5, -1, -1, -1,  5,  2,  2,\n        7,  1,  2,  4,  0,  6,  9,  7,  7,  1,  7,  8,  1,  8,  6,  8,  0,\n        0,  0,  9, -1,  0,  2,  1,  1,  4, -1,  3,  2,  8,  0,  7])",
                "sorter": "array([ 1, 77,  3, 18, 40, 86, 35, 52, 69, 62, 42, 79, 90, 87, 84, 99, 25,\n       45,  5, 31, 73, 83, 93, 64, 38, 76, 17, 78, 47, 22, 13, 81, 39,  7,\n       59, 32, 97, 96, 28, 19, 74, 70, 26, 56, 63, 16, 75, 12, 14, 53, 98,\n       46, 29,  6, 71, 57,  4, 51, 54, 27, 36, 11,  9, 65, 85, 21, 43, 33,\n       50, 34, 68, 30, 95, 72, 67, 23, 37,  2, 82, 92, 61, 20, 55, 91, 44,\n        0, 49, 24, 66, 48, 88, 58, 80, 10,  8, 89, 60, 15, 94, 41])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46,\n       47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85,\n       87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "ri": "array of shape 80",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\n                  ..\ny    2015-08-25    1\n     2015-08-26    1\n     2015-08-30    2\nz    2015-08-24    1\n     2015-08-29    1\nName: julie, Length: 80, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09850>",
                "self.obj": "0     2.0\n1     2.0\n2     7.0\n3     8.0\n4     8.0\n     ... \n95    2.0\n96    6.0\n97    5.0\n98    7.0\n99    2.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,\n        2,  2,  2,  3,  3,  3,  4,  5,  5,  6,  6,  6,  6,  7,  7,  7,  8,\n        8,  8,  8,  8,  8,  9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 12, 12,\n       13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16,\n       17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 21,\n       21, 21, 21, 21, 22, 22, 23, 24, 24, 24, 24, 24, 24, 25, 25])",
                "_": "array([2., 7., 8., 5., 0., 3., 1., 6., 9., 4.])",
                "val": "array of shape 100",
                "codes": "array([ 0,  6,  7,  9,  9,  9,  0,  1,  4,  6,  9, -1, -1,  0,  2, -1,  2,\n        4,  8,  9, -1,  2,  4,  8, -1,  7,  0,  2,  7,  9, -1,  1,  9, -1,\n        0,  3,  3,  7,  7,  2, -1,  3,  5,  6,  7,  7,  9,  4,  6, -1,  1,\n        2,  2,  3,  3,  5,  6, -1, -1,  1,  5,  9, -1, -1,  2,  2,  5,  7,\n        0,  1,  2,  4,  6,  7,  7,  9,  1,  1,  6,  7,  8,  8,  8,  0, -1,\n        0,  0,  1,  9,  0,  2,  1, -1,  1,  2,  3,  4,  8,  0,  7])",
                "sorter": "array([ 1, 18, 86, 35, 52, 69, 62, 42, 90, 87, 79, 45, 84, 99, 25, 83,  5,\n       31, 93, 73, 64, 38, 76, 17, 47, 78, 22,  3, 13, 81,  7, 59, 39, 28,\n       19, 74, 97, 32, 96, 70, 26, 75, 63, 12, 16, 40, 56, 53, 14, 46, 98,\n        4, 29,  6, 57, 71, 51,  9, 27, 36, 11, 54, 65, 85, 33, 43, 21, 50,\n       95, 34, 68, 30, 72, 23, 37, 67,  2, 61, 55, 82, 20, 91, 92, 44, 66,\n        0, 49, 77, 24, 48, 88, 58,  8, 80, 60, 89, 10, 15, 94, 41])",
                "idx": "array([ 6, 11, 15, 20, 23, 24, 26, 30, 33, 39, 40, 47, 49, 51, 57, 62, 64,\n       68, 72, 76, 83, 84, 89, 91, 92, 98])",
                "inc": "array([1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 5, 3, 5, 3, 1, 2, 4, 3, 4, 1, 6, 2, 2, 4, 4, 1, 3, 4, 3, 4, 1,\n       4, 2, 1, 6, 2])",
                "res": "array([5, 3, 5, 3, 1, 2, 4, 3, 4, 1, 6, 2, 2, 4, 4, 1, 3, 4, 3, 4, 1, 4,\n       2, 1, 6, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    5\nb    3\nc    5\nd    3\ne    1\nf    2\ng    4\nh    3\ni    4\nj    1\nk    6\nl    2\nm    2\nn    4\no    4\np    1\nq    3\nr    4\ns    3\nt    4\nu    1\nv    4\nw    2\nx    1\ny    6\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a790>",
                "self.obj": "0     2.0\n1     2.0\n2     7.0\n3     8.0\n4     8.0\n     ... \n95    2.0\n96    6.0\n97    5.0\n98    7.0\n99    2.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n       23, 24, 25, 26, 27, 28, 28, 29, 30, 30, 31, 32, 33, 34, 35, 36, 37,\n       38, 39, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47, 48, 48, 49, 50, 51,\n       52, 53, 54, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66,\n       67, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79])",
                "_": "array([2., 7., 8., 5., 0., 3., 1., 6., 9., 4.])",
                "val": "array of shape 100",
                "codes": "array([ 0,  1,  2,  6,  7,  7,  9,  9,  9,  0,  1,  9,  4,  6, -1,  0,  2,\n       -1,  2,  4,  9, -1,  8, -1,  2,  4,  8,  7, -1,  0,  7,  9,  9, -1,\n        1,  7,  3,  7, -1,  0,  3,  2, -1,  9,  5,  7,  3,  6,  6,  4,  1,\n       -1,  2,  3,  5,  3,  2,  6,  9, -1,  1,  5, -1, -1, -1,  5,  2,  2,\n        7,  1,  2,  4,  0,  6,  9,  7,  7,  1,  7,  8,  1,  8,  6,  8,  0,\n        0,  0,  9, -1,  0,  2,  1,  1,  4, -1,  3,  2,  8,  0,  7])",
                "sorter": "array([ 1, 77,  3, 18, 40, 86, 35, 52, 69, 62, 42, 79, 90, 87, 84, 99, 25,\n       45,  5, 31, 73, 83, 93, 64, 38, 76, 17, 78, 47, 22, 13, 81, 39,  7,\n       59, 32, 97, 96, 28, 19, 74, 70, 26, 56, 63, 16, 75, 12, 14, 53, 98,\n       46, 29,  6, 71, 57,  4, 51, 54, 27, 36, 11,  9, 65, 85, 21, 43, 33,\n       50, 34, 68, 30, 95, 72, 67, 23, 37,  2, 82, 92, 61, 20, 55, 91, 44,\n        0, 49, 24, 66, 48, 88, 58, 80, 10,  8, 89, 60, 15, 94, 41])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 45, 46,\n       47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85,\n       87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1])",
                "ri": "array of shape 80",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-08-29    1\n     2015-08-30    1\n     2015-08-31    1\n                  ..\ny    2015-08-25    1\n     2015-08-26    1\n     2015-08-30    2\nz    2015-08-24    1\n     2015-08-29    1\nName: julie, Length: 80, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bf70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bbb0>",
                "self.obj": "0      8\n1      1\n2      9\n3      5\n4      4\n      ..\n995    7\n996    2\n997    4\n998    9\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([8, 1, 9, 5, 4, 3, 6, 0, 7, 2])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  42,  69,  97, 131, 174, 209, 245, 278, 319, 359, 405, 431,\n       461, 491, 527, 559, 591, 645, 682, 724, 774, 812, 846, 890, 940])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([ 9,  9, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,\n       10, 10, 10, 10, 10,  8, 10, 10, 10])",
                "res": "array([ 9,  9, 10, 10,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,\n       10, 10, 10, 10, 10,  8, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     9\nb     9\nc    10\nd    10\ne     9\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq     9\nr    10\ns    10\nt    10\nu    10\nv    10\nw     8\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd15e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1130>",
                "self.obj": "0      8\n1      1\n2      9\n3      5\n4      4\n      ..\n995    7\n996    2\n997    4\n998    9\n999    9\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([8, 1, 9, 5, 4, 3, 6, 0, 7, 2])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 255",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 255",
                "ri": "array of shape 255",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    4\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    7\n     2015-08-30    4\n     2015-08-31    6\n     2015-09-01    4\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d568e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56c40>",
                "self.obj": "0      8.0\n1      1.0\n2      9.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([8., 1., 9., 5., 4., 3., 0., 7., 6., 2.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59, 100, 123, 150, 184, 225, 257, 288, 320, 360, 399, 443, 465,\n       492, 520, 554, 583, 612, 661, 696, 736, 783, 821, 852, 894, 943])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11,  8, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11,\n        9, 11, 11, 11, 11, 11,  9, 11, 10, 11])",
                "res": "array([ 8, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11,  9,\n       11, 11, 11, 11, 11,  9, 11, 10, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     8\nb    10\nc    11\nd    11\ne    10\nf    11\ng    10\nh    11\ni    11\nj    11\nk    10\nl    11\nm    10\nn    11\no    11\np    11\nq     9\nr    11\ns    11\nt    11\nu    11\nv    11\nw     9\nx    11\ny    10\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56820>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56970>",
                "self.obj": "0      8.0\n1      1.0\n2      9.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([8., 1., 9., 5., 4., 3., 0., 7., 6., 2.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 247",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 248",
                "res": "array of shape 247",
                "ri": "array of shape 247",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    4\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    7\n     2015-08-30    3\n     2015-08-31    7\n     2015-09-01    5\nName: julie, Length: 247, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd1970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1550>",
                "self.obj": "0      8.0\n1      1.0\n2      9.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([8., 1., 9., 5., 4., 3., 0., 7., 6., 2.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59, 100, 123, 150, 184, 225, 257, 288, 320, 360, 399, 443, 465,\n       492, 520, 554, 583, 612, 661, 696, 736, 783, 821, 852, 894, 943])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([11,  8, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11,\n        9, 11, 11, 11, 11, 11,  9, 11, 10, 11])",
                "res": "array([ 8, 10, 11, 11, 10, 11, 10, 11, 11, 11, 10, 11, 10, 11, 11, 11,  9,\n       11, 11, 11, 11, 11,  9, 11, 10, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     8\nb    10\nc    11\nd    11\ne    10\nf    11\ng    10\nh    11\ni    11\nj    11\nk    10\nl    11\nm    10\nn    11\no    11\np    11\nq     9\nr    11\ns    11\nt    11\nu    11\nv    11\nw     9\nx    11\ny    10\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7ba90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bb20>",
                "self.obj": "0      8.0\n1      1.0\n2      9.0\n3      5.0\n4      4.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    9.0\n999    9.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([8., 1., 9., 5., 4., 3., 0., 7., 6., 2.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 247",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 248",
                "res": "array of shape 247",
                "ri": "array of shape 247",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-24    3\n     2015-08-25    5\n     2015-08-26    4\n     2015-08-27    4\n                  ..\nz    2015-08-28    3\n     2015-08-29    7\n     2015-08-30    3\n     2015-08-31    7\n     2015-09-01    5\nName: julie, Length: 247, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84cd0>",
                "self.obj": "0       4\n1       0\n2       3\n3       9\n4       5\n       ..\n9995    0\n9996    9\n9997    5\n9998    3\n9999    8\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([4, 0, 3, 9, 5, 1, 6, 2, 8, 7])",
                "val": "array([4, 0, 3, ..., 5, 3, 8])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 361,  511,  623, ..., 9206, 9369, 9774])",
                "idx": "array([   0,  363,  727, 1097, 1480, 1875, 2257, 2632, 3019, 3422, 3769,\n       4172, 4564, 4955, 5349, 5719, 6112, 6511, 6905, 7306, 7696, 8085,\n       8463, 8846, 9227, 9611])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d564c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d569d0>",
                "self.obj": "0       4\n1       0\n2       3\n3       9\n4       5\n       ..\n9995    0\n9996    9\n9997    5\n9998    3\n9999    8\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([4, 0, 3, 9, 5, 1, 6, 2, 8, 7])",
                "val": "array([4, 0, 3, ..., 5, 3, 8])",
                "codes": "array([0, 0, 0, ..., 8, 8, 9])",
                "sorter": "array([ 361, 7519, 9718, ..., 7125, 7491, 5703])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     9\n     2015-08-24     8\n     2015-08-25     9\n     2015-08-26    10\n     2015-08-27     9\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b2e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b8e0>",
                "self.obj": "0       4.0\n1       0.0\n2       3.0\n3       9.0\n4       5.0\n       ... \n9995    0.0\n9996    9.0\n9997    5.0\n9998    3.0\n9999    8.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([4., 0., 3., 9., 5., 1., 6., 7., 8., 2.])",
                "val": "array([4., 0., 3., ..., 5., 3., 8.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 7480, 7745, 9171])",
                "idx": "array([ 589,  924, 1264, 1614, 1973, 2344, 2697, 3048, 3408, 3786, 4117,\n       4499, 4870, 5248, 5623, 5971, 6327, 6704, 7075, 7457, 7818, 8189,\n       8553, 8910, 9272, 9634])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118dd15b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118dd1880>",
                "self.obj": "0       4.0\n1       0.0\n2       3.0\n3       9.0\n4       5.0\n       ... \n9995    0.0\n9996    9.0\n9997    5.0\n9998    3.0\n9999    8.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([4., 0., 3., 9., 5., 1., 6., 7., 8., 2.])",
                "val": "array([4., 0., 3., ..., 5., 3., 8.])",
                "codes": "array([-1, -1, -1, ...,  8,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 7491, 4356, 5485])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24     8\n     2015-08-25     9\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    10\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d510a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d511f0>",
                "self.obj": "0       4.0\n1       0.0\n2       3.0\n3       9.0\n4       5.0\n       ... \n9995    0.0\n9996    9.0\n9997    5.0\n9998    3.0\n9999    8.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([4., 0., 3., 9., 5., 1., 6., 7., 8., 2.])",
                "val": "array([4., 0., 3., ..., 5., 3., 8.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 7480, 7745, 9171])",
                "idx": "array([ 589,  924, 1264, 1614, 1973, 2344, 2697, 3048, 3408, 3786, 4117,\n       4499, 4870, 5248, 5623, 5971, 6327, 6704, 7075, 7457, 7818, 8189,\n       8553, 8910, 9272, 9634])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51700>",
                "self.obj": "0       4.0\n1       0.0\n2       3.0\n3       9.0\n4       5.0\n       ... \n9995    0.0\n9996    9.0\n9997    5.0\n9998    3.0\n9999    8.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([4., 0., 3., 9., 5., 1., 6., 7., 8., 2.])",
                "val": "array([4., 0., 3., ..., 5., 3., 8.])",
                "codes": "array([-1, -1, -1, ...,  8,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 7491, 4356, 5485])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24     8\n     2015-08-25     9\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    10\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7ba90>",
                "self.obj": "0        4\n1        4\n2        1\n3        5\n4        3\n        ..\n99995    9\n99996    2\n99997    5\n99998    8\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([4, 1, 5, 3, 9, 7, 2, 6, 8, 0])",
                "val": "array([4, 4, 1, ..., 5, 8, 2])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  448,   776,  1828, ..., 99292, 99654, 99746])",
                "idx": "array([    0,  3806,  7777, 11577, 15366, 19100, 22976, 26843, 30744,\n       34490, 38314, 42179, 45998, 49830, 53613, 57454, 61275, 65127,\n       69028, 72952, 76787, 80708, 84591, 88386, 92223, 96122])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b5b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b700>",
                "self.obj": "0        4\n1        4\n2        1\n3        5\n4        3\n        ..\n99995    9\n99996    2\n99997    5\n99998    8\n99999    2\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([4, 1, 5, 3, 9, 7, 2, 6, 8, 0])",
                "val": "array([4, 4, 1, ..., 5, 8, 2])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 7977,  8075,  9121, ..., 91703, 93221, 99292])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56ee0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d565e0>",
                "self.obj": "0        4.0\n1        4.0\n2        1.0\n3        5.0\n4        3.0\n        ... \n99995    9.0\n99996    2.0\n99997    5.0\n99998    8.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([4., 1., 5., 3., 2., 9., 6., 7., 8., 0.])",
                "val": "array([4., 4., 1., ..., 5., 8., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99292, 99654, 99746])",
                "idx": "array([ 5883,  9453, 13198, 16760, 20332, 23863, 27504, 31143, 34821,\n       38334, 41927, 45566, 49169, 52780, 56321, 59945, 63545, 67165,\n       70849, 74527, 78150, 81821, 85474, 89064, 92671, 96322])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56460>",
                "self.obj": "0        4.0\n1        4.0\n2        1.0\n3        5.0\n4        3.0\n        ... \n99995    9.0\n99996    2.0\n99997    5.0\n99998    8.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([4., 1., 5., 3., 2., 9., 6., 7., 8., 0.])",
                "val": "array([4., 4., 1., ..., 5., 8., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 81248, 90021, 99292])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51ac0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51be0>",
                "self.obj": "0        4.0\n1        4.0\n2        1.0\n3        5.0\n4        3.0\n        ... \n99995    9.0\n99996    2.0\n99997    5.0\n99998    8.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([4., 1., 5., 3., 2., 9., 6., 7., 8., 0.])",
                "val": "array([4., 4., 1., ..., 5., 8., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99292, 99654, 99746])",
                "idx": "array([ 5883,  9453, 13198, 16760, 20332, 23863, 27504, 31143, 34821,\n       38334, 41927, 45566, 49169, 52780, 56321, 59945, 63545, 67165,\n       70849, 74527, 78150, 81821, 85474, 89064, 92671, 96322])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "res": "array([11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n       11, 11, 11, 11, 11, 11, 11, 11, 11])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    11\nb    11\nc    11\nd    11\ne    11\nf    11\ng    11\nh    11\ni    11\nj    11\nk    11\nl    11\nm    11\nn    11\no    11\np    11\nq    11\nr    11\ns    11\nt    11\nu    11\nv    11\nw    11\nx    11\ny    11\nz    11\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d518b0>",
                "self.obj": "0        4.0\n1        4.0\n2        1.0\n3        5.0\n4        3.0\n        ... \n99995    9.0\n99996    2.0\n99997    5.0\n99998    8.0\n99999    2.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([4., 1., 5., 3., 2., 9., 6., 7., 8., 0.])",
                "val": "array([4., 4., 1., ..., 5., 8., 2.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 81248, 90021, 99292])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    11\n     2015-08-24    11\n     2015-08-25    11\n     2015-08-26    11\n     2015-08-27    11\n                   ..\nz    2015-08-28    11\n     2015-08-29    11\n     2015-08-30    11\n     2015-08-31    11\n     2015-09-01    11\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56af0>",
                "self.obj": "0     31\n1     56\n2     11\n3     60\n4      7\n      ..\n95    35\n96    11\n97    43\n98    76\n99    39\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  1,  1,  2,  2,  2,  3,  4,  4,  4,  4,  4,  5,  5,  5,\n        5,  5,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,\n        9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 12, 12,\n       12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16,\n       16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18,\n       18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23])",
                "_": "array([31, 56, 11, 60,  7, 58, 22, 40, 33, 23, 42, 93, 67, 37, 76, 17, 18,\n       34, 86, 79, 12, 46, 73, 83, 47, 57, 51, 41, 68, 20, 30, 24, 91, 29,\n        8, 66, 70, 52, 27, 75, 61, 94, 71, 63, 25, 35, 82, 48, 87, 69, 54,\n       59, 84, 19, 89, 55, 39, 65, 43])",
                "val": "array([31, 56, 11, 60,  7, 58, 22, 40, 33, 23, 42, 93, 67, 37, 76, 17, 93,\n       18, 34, 86, 79, 12, 46, 31, 73, 83, 47, 57, 51, 34, 17, 41, 68, 20,\n       58, 30, 24, 57, 91, 29,  8, 86, 29, 73, 66, 86, 70, 52, 70, 27, 75,\n       30, 61, 73, 94, 75, 71, 63, 25, 35, 12, 46, 82, 48, 87, 69, 54, 93,\n       42, 66, 59, 41, 87, 31, 70, 84, 68, 19, 86, 82, 18, 20, 89, 66, 42,\n       29, 55, 25, 39, 18, 84, 73, 65, 30, 34, 35, 11, 43, 76, 39])",
                "codes": "array([19,  4, 13, 45, 46, 10, 20, 36, 27,  0, 18, 18, 21, 28,  2, 24, 34,\n       41, 51, 29, 30, 35, 36,  9, 26, 29, 42, 49, 54, 23, 27, 36, 28, 30,\n       31, 32, 33, 44,  2, 16, 16, 38,  5,  6, 15, 21, 35, 52, 52,  8, 14,\n       39, 46, 55,  7, 25, 33,  0, 10, 17, 17, 22,  1, 22, 30, 57, 58,  0,\n       15, 16, 25, 44, 56, 56, 22, 39, 40, 45, 50, 11, 11, 12, 17, 35, 43,\n       48, 18, 22, 33, 47, 48, 53,  3,  5, 20, 11, 37, 14, 10, 18])",
                "sorter": "array([20,  4, 13, 95, 79, 10, 60, 46, 31, 73, 45, 78, 22, 32, 96, 26, 40,\n       54, 70, 81, 35, 44, 48,  9, 28, 33, 56, 65, 82, 25, 71, 74, 76, 93,\n       36, 38, 85, 58,  2, 17, 80, 49, 34,  6, 15, 61, 83, 75, 90,  8, 98,\n       50, 62, 86,  7, 27, 39, 23, 68, 18, 94, 24,  1, 91, 51, 92, 97,  0,\n       30, 89, 37, 87, 88, 99, 53, 55, 52, 59, 66, 11, 16, 12, 29, 69, 57,\n       64, 41, 43, 42, 63, 72, 77,  3,  5, 21, 67, 47, 14, 84, 19])",
                "idx": "array([ 0,  1,  5,  8,  9, 14, 19, 23, 29, 32, 38, 42, 49, 54, 57, 62, 67,\n       74, 79, 86, 92, 95, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 4, 3, 1, 4, 5, 4, 6, 3, 6, 3, 6, 5, 3, 4, 5, 6, 5, 6, 6, 3, 2,\n       1, 2])",
                "res": "array([1, 4, 3, 1, 4, 5, 4, 6, 3, 6, 3, 6, 5, 3, 4, 5, 6, 5, 6, 6, 3, 2,\n       1, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    1\nb    4\nc    3\nd    1\ne    4\nf    5\ng    4\nh    6\ni    3\nk    6\nl    3\nm    6\nn    5\no    3\np    4\nq    5\nr    6\ns    5\nt    6\nu    6\nw    3\nx    2\ny    1\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56f70>",
                "self.obj": "0     31\n1     56\n2     11\n3     60\n4      7\n      ..\n95    35\n96    11\n97    43\n98    76\n99    39\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 10, 11, 12, 13, 13, 14,\n       15, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 22, 23, 23, 24, 25, 25,\n       26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\n       58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 69, 70, 71,\n       72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 81, 82, 83, 84])",
                "_": "array([31, 56, 11, 60,  7, 58, 22, 40, 33, 23, 42, 93, 67, 37, 76, 17, 18,\n       34, 86, 79, 12, 46, 73, 83, 47, 57, 51, 41, 68, 20, 30, 24, 91, 29,\n        8, 66, 70, 52, 27, 75, 61, 94, 71, 63, 25, 35, 82, 48, 87, 69, 54,\n       59, 84, 19, 89, 55, 39, 65, 43])",
                "val": "array([31, 56, 11, 60,  7, 58, 22, 40, 33, 23, 42, 93, 67, 37, 76, 17, 93,\n       18, 34, 86, 79, 12, 46, 31, 73, 83, 47, 57, 51, 34, 17, 41, 68, 20,\n       58, 30, 24, 57, 91, 29,  8, 86, 29, 73, 66, 86, 70, 52, 70, 27, 75,\n       30, 61, 73, 94, 75, 71, 63, 25, 35, 12, 46, 82, 48, 87, 69, 54, 93,\n       42, 66, 59, 41, 87, 31, 70, 84, 68, 19, 86, 82, 18, 20, 89, 66, 42,\n       29, 55, 25, 39, 18, 84, 73, 65, 30, 34, 35, 11, 43, 76, 39])",
                "codes": "array([19, 46, 45, 13,  4, 20, 36, 10, 27, 18, 21, 28, 18,  0, 34, 41, 51,\n        2, 24, 30, 35, 36, 29, 42, 26, 49, 29,  9, 54, 23, 27, 36, 28, 31,\n       30, 32, 44, 33,  2, 38, 16, 16, 21,  6, 35, 52, 15, 52,  5, 46, 14,\n       55,  8, 39, 33,  7, 25, 17,  0, 22, 17, 10, 57, 30,  1, 22, 58, 16,\n       44, 56, 15,  0, 56, 25, 22, 50, 40, 39, 45, 17, 48, 11, 43, 35, 12,\n       11, 33, 18, 47, 48, 22, 53, 20,  3,  5, 11, 37, 14, 18, 10])",
                "sorter": "array([20, 79, 95, 13,  4, 60, 46, 10, 31, 45, 22, 32, 78, 73, 40, 54, 70,\n       96, 26, 35, 44, 48, 81, 56, 28, 65, 33,  9, 82, 25, 71, 74, 76, 36,\n       93, 38, 58, 85,  2, 49, 17, 80, 61,  6, 83, 75, 15, 90, 34, 62, 98,\n       86,  8, 50, 39,  7, 27, 18, 23, 24, 94, 68, 92, 51,  1, 91, 97, 89,\n       87, 88, 30,  0, 99, 37, 53, 66, 52, 55, 59, 29, 64, 11, 57, 69, 12,\n       16, 42, 41, 63, 72, 43, 77, 21,  3,  5, 67, 47, 14, 19, 84])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 16, 17, 19,\n       20, 22, 23, 24, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41,\n       42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 78,\n       79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1,\n       2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1,\n       2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1])",
                "ri": "array of shape 85",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\nb    2015-08-28    1\n     2015-08-29    1\n     2015-08-31    1\n     2015-09-01    1\n                  ..\nw    2015-09-01    1\nx    2015-08-30    2\ny    2015-08-25    1\nz    2015-08-24    1\n     2015-08-29    1\nName: julie, Length: 85, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08d30>",
                "self.obj": "0     31.0\n1     56.0\n2     11.0\n3     60.0\n4      7.0\n      ... \n95    35.0\n96    11.0\n97    43.0\n98    76.0\n99    39.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  1,  2,  2,  2,  3,  4,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,\n       11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,\n       15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18,\n       18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23])",
                "_": "array([31., 56., 11., 60.,  7., 58., 22., 42., 93., 67., 37., 76., 17.,\n       18., 34., 86., 79., 12., 46., 73., 83., 41., 68., 20., 30., 24.,\n       57., 91., 29.,  8., 66., 70., 27., 75., 61., 94., 71., 63., 25.,\n       35., 82., 48., 59., 87., 84., 19., 89., 55., 39., 65., 43.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 14, 24, 30, 34, 47, 16,  4, 10, 39, 40, -1,  7, 17, 21, -1,  0,\n       15, 18, 22, -1,  2, 29, 35, 42, 23, 30, 31, -1, -1, -1, 23, 36, 46,\n       20, 21, 31, -1, 22, 24, 25, 27, 38,  2, 13, 13, 32, -1,  5,  6, 12,\n       18, 44, 44, -1, 11, 33, 40, -1, -1, 28,  0,  7, 14, 19, 19, 24, 49,\n       50,  0, 12, 13, 26, 38, 48, 48, -1, 19, 33, 39, -1,  8,  8,  9, 14,\n       37, 15, 19, 28, 41, 43, 45,  3,  5, 17, -1,  8, 11, -1, 15])",
                "sorter": "array([ 1, 18, 35, 69, 52, 86, 20,  4, 13, 95, 79, 46, 10, 60, 31, 45, 73,\n       78, 22, 32, 26, 96, 40, 54, 70, 81, 44, 48,  9, 28, 65, 33, 56, 82,\n       25, 71, 74, 85, 76, 93, 36, 38, 58,  2, 17, 80, 49, 83, 34,  6, 15,\n       61, 75, 90,  8, 98, 50, 62,  7, 27, 39, 23, 68, 94, 24, 91, 51, 92,\n       97,  0, 30, 89, 37, 87, 88, 99, 66, 53, 55, 59, 64, 11, 16, 12, 29,\n       57, 41, 43, 42, 63, 72, 77,  3,  5, 21, 47, 67, 14, 84, 19])",
                "idx": "array([ 6,  7, 11, 14, 15, 20, 25, 28, 34, 37, 43, 47, 54, 58, 61, 65, 69,\n       76, 80, 86, 92, 95, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 1, 4, 3, 1, 5, 5, 3, 4, 3, 6, 3, 6, 4, 2, 4, 4, 6, 4, 5, 6, 3,\n       2, 1, 2])",
                "res": "array([1, 4, 3, 1, 5, 5, 3, 4, 3, 6, 3, 6, 4, 2, 4, 4, 6, 4, 5, 6, 3, 2,\n       1, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    1\nb    4\nc    3\nd    1\ne    5\nf    5\ng    3\nh    4\ni    3\nk    6\nl    3\nm    6\nn    4\no    2\np    4\nq    4\nr    6\ns    4\nt    5\nu    6\nw    3\nx    2\ny    1\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d085b0>",
                "self.obj": "0     31.0\n1     56.0\n2     11.0\n3     60.0\n4      7.0\n      ... \n95    35.0\n96    11.0\n97    43.0\n98    76.0\n99    39.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 16, 17, 18, 19, 19, 20,\n       21, 21, 22, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 74, 75, 76, 77])",
                "_": "array([31., 56., 11., 60.,  7., 58., 22., 42., 93., 67., 37., 76., 17.,\n       18., 34., 86., 79., 12., 46., 73., 83., 41., 68., 20., 30., 24.,\n       57., 91., 29.,  8., 66., 70., 27., 75., 61., 94., 71., 63., 25.,\n       35., 82., 48., 59., 87., 84., 19., 89., 55., 39., 65., 43.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 14, 24, 29, 30, 34, 45, 47, 16, 40, 39, 10,  4, 17, -1,  7,\n       21, -1, 18, 22, 15,  0, 35, 42, -1,  2, 30, 31, 23, 36, -1, -1, 23,\n       -1, 46, 20, 21, 31, 22, 25, 24, 27, 38, -1,  2, 32, 13, 13, 18,  6,\n       -1, 44, 12, 44,  5, 40, 11, -1, 33, 28, -1, -1,  0, 19, 14,  7, 49,\n       24, 19, 50, 13, 38, 48, 12,  0, 48, 26, 19, -1, 33, 39, -1, 14,  8,\n       37,  9,  8, 28, 15, 41, 43, 19, 17,  5, -1,  8, 11, 15, -1])",
                "sorter": "array([ 1,  3, 18, 35, 40, 69, 52, 77, 86, 20, 79, 95, 13,  4, 60, 46, 10,\n       31, 45, 22, 32, 78, 73, 54, 70, 26, 96, 44, 48, 81, 56, 28, 65, 33,\n        9, 82, 25, 71, 74, 76, 36, 93, 38, 58, 85,  2, 49, 17, 80, 61,  6,\n       83, 75, 15, 90, 34, 62, 98,  8, 50, 39,  7, 27, 23, 24, 94, 68, 92,\n       51, 91, 97, 89, 87, 88, 30,  0, 99, 37, 53, 66, 55, 59, 64, 29, 11,\n       57, 12, 16, 42, 41, 63, 72, 43, 21,  5, 47, 67, 14, 19, 84])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27,\n       29, 30, 31, 33, 34, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,\n       2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2,\n       2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\nb    2015-08-28    1\n     2015-08-29    1\n     2015-08-31    1\n     2015-09-01    1\n                  ..\nw    2015-09-01    1\nx    2015-08-30    2\ny    2015-08-25    1\nz    2015-08-24    1\n     2015-08-29    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56d30>",
                "self.obj": "0     31.0\n1     56.0\n2     11.0\n3     60.0\n4      7.0\n      ... \n95    35.0\n96    11.0\n97    43.0\n98    76.0\n99    39.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  1,  1,  2,  2,  2,  3,  4,  4,\n        4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  7,  7,  7,  7,  7,  7,\n        8,  8,  8,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11, 11,\n       11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,\n       15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18,\n       18, 19, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 22, 23, 23])",
                "_": "array([31., 56., 11., 60.,  7., 58., 22., 42., 93., 67., 37., 76., 17.,\n       18., 34., 86., 79., 12., 46., 73., 83., 41., 68., 20., 30., 24.,\n       57., 91., 29.,  8., 66., 70., 27., 75., 61., 94., 71., 63., 25.,\n       35., 82., 48., 59., 87., 84., 19., 89., 55., 39., 65., 43.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 14, 24, 30, 34, 47, 16,  4, 10, 39, 40, -1,  7, 17, 21, -1,  0,\n       15, 18, 22, -1,  2, 29, 35, 42, 23, 30, 31, -1, -1, -1, 23, 36, 46,\n       20, 21, 31, -1, 22, 24, 25, 27, 38,  2, 13, 13, 32, -1,  5,  6, 12,\n       18, 44, 44, -1, 11, 33, 40, -1, -1, 28,  0,  7, 14, 19, 19, 24, 49,\n       50,  0, 12, 13, 26, 38, 48, 48, -1, 19, 33, 39, -1,  8,  8,  9, 14,\n       37, 15, 19, 28, 41, 43, 45,  3,  5, 17, -1,  8, 11, -1, 15])",
                "sorter": "array([ 1, 18, 35, 69, 52, 86, 20,  4, 13, 95, 79, 46, 10, 60, 31, 45, 73,\n       78, 22, 32, 26, 96, 40, 54, 70, 81, 44, 48,  9, 28, 65, 33, 56, 82,\n       25, 71, 74, 85, 76, 93, 36, 38, 58,  2, 17, 80, 49, 83, 34,  6, 15,\n       61, 75, 90,  8, 98, 50, 62,  7, 27, 39, 23, 68, 94, 24, 91, 51, 92,\n       97,  0, 30, 89, 37, 87, 88, 99, 66, 53, 55, 59, 64, 11, 16, 12, 29,\n       57, 41, 43, 42, 63, 72, 77,  3,  5, 21, 47, 67, 14, 84, 19])",
                "idx": "array([ 6,  7, 11, 14, 15, 20, 25, 28, 34, 37, 43, 47, 54, 58, 61, 65, 69,\n       76, 80, 86, 92, 95, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 1, 4, 3, 1, 5, 5, 3, 4, 3, 6, 3, 6, 4, 2, 4, 4, 6, 4, 5, 6, 3,\n       2, 1, 2])",
                "res": "array([1, 4, 3, 1, 5, 5, 3, 4, 3, 6, 3, 6, 4, 2, 4, 4, 6, 4, 5, 6, 3, 2,\n       1, 2])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    1\nb    4\nc    3\nd    1\ne    5\nf    5\ng    3\nh    4\ni    3\nk    6\nl    3\nm    6\nn    4\no    2\np    4\nq    4\nr    6\ns    4\nt    5\nu    6\nw    3\nx    2\ny    1\nz    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84bb0>",
                "self.obj": "0     31.0\n1     56.0\n2     11.0\n3     60.0\n4      7.0\n      ... \n95    35.0\n96    11.0\n97    43.0\n98    76.0\n99    39.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 16, 17, 18, 19, 19, 20,\n       21, 21, 22, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\n       35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,\n       51, 52, 53, 54, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 74, 75, 76, 77])",
                "_": "array([31., 56., 11., 60.,  7., 58., 22., 42., 93., 67., 37., 76., 17.,\n       18., 34., 86., 79., 12., 46., 73., 83., 41., 68., 20., 30., 24.,\n       57., 91., 29.,  8., 66., 70., 27., 75., 61., 94., 71., 63., 25.,\n       35., 82., 48., 59., 87., 84., 19., 89., 55., 39., 65., 43.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 14, 24, 29, 30, 34, 45, 47, 16, 40, 39, 10,  4, 17, -1,  7,\n       21, -1, 18, 22, 15,  0, 35, 42, -1,  2, 30, 31, 23, 36, -1, -1, 23,\n       -1, 46, 20, 21, 31, 22, 25, 24, 27, 38, -1,  2, 32, 13, 13, 18,  6,\n       -1, 44, 12, 44,  5, 40, 11, -1, 33, 28, -1, -1,  0, 19, 14,  7, 49,\n       24, 19, 50, 13, 38, 48, 12,  0, 48, 26, 19, -1, 33, 39, -1, 14,  8,\n       37,  9,  8, 28, 15, 41, 43, 19, 17,  5, -1,  8, 11, 15, -1])",
                "sorter": "array([ 1,  3, 18, 35, 40, 69, 52, 77, 86, 20, 79, 95, 13,  4, 60, 46, 10,\n       31, 45, 22, 32, 78, 73, 54, 70, 26, 96, 44, 48, 81, 56, 28, 65, 33,\n        9, 82, 25, 71, 74, 76, 36, 93, 38, 58, 85,  2, 49, 17, 80, 61,  6,\n       83, 75, 15, 90, 34, 62, 98,  8, 50, 39,  7, 27, 23, 24, 94, 68, 92,\n       51, 91, 97, 89, 87, 88, 30,  0, 99, 37, 53, 66, 55, 59, 64, 29, 11,\n       57, 12, 16, 42, 41, 63, 72, 43, 21,  5, 47, 67, 14, 19, 84])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27,\n       29, 30, 31, 33, 34, 36, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,\n       68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1,\n       2, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2,\n       2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\nb    2015-08-28    1\n     2015-08-29    1\n     2015-08-31    1\n     2015-09-01    1\n                  ..\nw    2015-09-01    1\nx    2015-08-30    2\ny    2015-08-25    1\nz    2015-08-24    1\n     2015-08-29    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08c70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08760>",
                "self.obj": "0      18\n1      15\n2      82\n3      56\n4      25\n       ..\n995    31\n996    35\n997    76\n998    69\n999    77\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([18, 15, 82, 56, 25,  5, 33, 32,  4, 81,  6,  0, 59, 62, 68, 86, 38,\n       99, 46, 76, 90, 85, 72, 19, 95, 57, 66, 22, 41, 58, 26, 79, 63, 89,\n       69, 52, 40, 54, 78, 20, 64, 36, 75, 91, 24, 74, 43,  1, 80, 65, 21,\n       13, 29, 93, 49, 60, 77, 71, 45,  8, 14, 98, 94,  9, 17, 34, 50, 16,\n       39, 67, 83, 44, 28, 84, 96, 47, 53, 30, 31,  7, 10, 70, 35, 23,  3,\n       88, 87, 42, 48, 51, 61,  2, 12, 55, 92, 73, 11, 97, 27, 37])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  42,  81, 117, 157, 186, 218, 277, 314, 358, 393, 423, 468,\n       509, 556, 589, 628, 664, 699, 748, 782, 815, 851, 886, 924, 960])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([40, 34, 28, 31, 26, 27, 46, 28, 36, 28, 26, 39, 32, 33, 26, 34, 28,\n       31, 36, 27, 31, 28, 29, 31, 30, 37])",
                "res": "array([40, 34, 28, 31, 26, 27, 46, 28, 36, 28, 26, 39, 32, 33, 26, 34, 28,\n       31, 36, 27, 31, 28, 29, 31, 30, 37])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    40\nb    34\nc    28\nd    31\ne    26\nf    27\ng    46\nh    28\ni    36\nj    28\nk    26\nl    39\nm    32\nn    33\no    26\np    34\nq    28\nr    31\ns    36\nt    27\nu    31\nv    28\nw    29\nx    31\ny    30\nz    37\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc3a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc040>",
                "self.obj": "0      18\n1      15\n2      82\n3      56\n4      25\n       ..\n995    31\n996    35\n997    76\n998    69\n999    77\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([18, 15, 82, 56, 25,  5, 33, 32,  4, 81,  6,  0, 59, 62, 68, 86, 38,\n       99, 46, 76, 90, 85, 72, 19, 95, 57, 66, 22, 41, 58, 26, 79, 63, 89,\n       69, 52, 40, 54, 78, 20, 64, 36, 75, 91, 24, 74, 43,  1, 80, 65, 21,\n       13, 29, 93, 49, 60, 77, 71, 45,  8, 14, 98, 94,  9, 17, 34, 50, 16,\n       39, 67, 83, 44, 28, 84, 96, 47, 53, 30, 31,  7, 10, 70, 35, 23,  3,\n       88, 87, 42, 48, 51, 61,  2, 12, 55, 92, 73, 11, 97, 27, 37])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 258",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 258",
                "res": "array of shape 258",
                "ri": "array of shape 258",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    6\n     2015-08-25    6\n     2015-08-26    3\n     2015-08-27    6\n                  ..\nz    2015-08-28    3\n     2015-08-29    4\n     2015-08-30    3\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 258, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bdf0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b880>",
                "self.obj": "0      18.0\n1      15.0\n2      82.0\n3      56.0\n4      25.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    69.0\n999    77.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  98, 133, 168, 205, 234, 265, 320, 355, 398, 432, 461, 503,\n       543, 585, 614, 652, 684, 719, 762, 794, 825, 857, 890, 928, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([40, 31, 26, 25, 24, 24, 23, 40, 26, 33, 24, 22, 34, 30, 27, 23, 29,\n       26, 27, 30, 23, 26, 22, 25, 26, 27, 30])",
                "res": "array([31, 26, 25, 24, 24, 23, 40, 26, 33, 24, 22, 34, 30, 27, 23, 29, 26,\n       27, 30, 23, 26, 22, 25, 26, 27, 30])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    31\nb    26\nc    25\nd    24\ne    24\nf    23\ng    40\nh    26\ni    33\nj    24\nk    22\nl    34\nm    30\nn    27\no    23\np    29\nq    26\nr    27\ns    30\nt    23\nu    26\nv    22\nw    25\nx    26\ny    27\nz    30\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b760>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b340>",
                "self.obj": "0      18.0\n1      15.0\n2      82.0\n3      56.0\n4      25.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    69.0\n999    77.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 257",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 258",
                "res": "array of shape 257",
                "ri": "array of shape 257",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    6\n     2015-08-25    5\n     2015-08-26    2\n     2015-08-27    6\n                  ..\nz    2015-08-28    3\n     2015-08-29    4\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    2\nName: julie, Length: 257, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51790>",
                "self.obj": "0      18.0\n1      15.0\n2      82.0\n3      56.0\n4      25.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    69.0\n999    77.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  98, 133, 168, 205, 234, 265, 320, 355, 398, 432, 461, 503,\n       543, 585, 614, 652, 684, 719, 762, 794, 825, 857, 890, 928, 962])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([40, 31, 26, 25, 24, 24, 23, 40, 26, 33, 24, 22, 34, 30, 27, 23, 29,\n       26, 27, 30, 23, 26, 22, 25, 26, 27, 30])",
                "res": "array([31, 26, 25, 24, 24, 23, 40, 26, 33, 24, 22, 34, 30, 27, 23, 29, 26,\n       27, 30, 23, 26, 22, 25, 26, 27, 30])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    31\nb    26\nc    25\nd    24\ne    24\nf    23\ng    40\nh    26\ni    33\nj    24\nk    22\nl    34\nm    30\nn    27\no    23\np    29\nq    26\nr    27\ns    30\nt    23\nu    26\nv    22\nw    25\nx    26\ny    27\nz    30\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51ca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d516a0>",
                "self.obj": "0      18.0\n1      15.0\n2      82.0\n3      56.0\n4      25.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    69.0\n999    77.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 257",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 258",
                "res": "array of shape 257",
                "ri": "array of shape 257",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    6\n     2015-08-25    5\n     2015-08-26    2\n     2015-08-27    6\n                  ..\nz    2015-08-28    3\n     2015-08-29    4\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    2\nName: julie, Length: 257, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b4c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b4f0>",
                "self.obj": "0       30\n1       73\n2       25\n3       74\n4       39\n        ..\n9995     7\n9996    66\n9997    22\n9998    27\n9999    15\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([30, 73, 25, 74, 39, 20, 11,  6, 84, 57, 75, 48, 83,  8, 53, 85, 46,\n       93, 98, 36,  1, 50, 60, 71, 33, 49, 68, 87, 10, 13, 28, 94, 62, 65,\n       88, 61, 45, 81, 63, 96,  4, 38, 14, 97,  9, 12, 86, 35, 59, 42, 15,\n       76, 92, 43, 51, 44, 55, 40, 82, 70, 64,  3, 54, 37, 31, 69, 34, 17,\n        5, 27, 41, 79, 32, 78,  7, 67, 19, 58, 23, 89,  2, 77, 18, 95, 16,\n       22, 47, 66, 99, 56, 21, 52, 29,  0, 80, 26, 91, 24, 72, 90])",
                "val": "array([30, 73, 25, ..., 22, 27, 15])",
                "codes": "array([ 0,  0,  0, ..., 98, 98, 98])",
                "sorter": "array([ 908, 1486, 2183, ..., 8936, 9789, 9796])",
                "idx": "array([   0,  365,  738, 1122, 1518, 1912, 2291, 2692, 3077, 3480, 3821,\n       4200, 4584, 4963, 5360, 5733, 6116, 6535, 6917, 7322, 7703, 8071,\n       8465, 8850, 9226, 9611])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 99,  97,  97,  98,  98,  98,  96,  98,  97,  99,  99,  95,  97,\n        96,  96,  96,  99, 100, 100,  99,  98,  99,  96,  99,  98,  96])",
                "res": "array([ 99,  97,  97,  98,  98,  98,  96,  98,  97,  99,  99,  95,  97,\n        96,  96,  96,  99, 100, 100,  99,  98,  99,  96,  99,  98,  96])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     99\nb     97\nc     97\nd     98\ne     98\nf     98\ng     96\nh     98\ni     97\nj     99\nk     99\nl     95\nm     97\nn     96\no     96\np     96\nq     99\nr    100\ns    100\nt     99\nu     98\nv     99\nw     96\nx     99\ny     98\nz     96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bf10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bbe0>",
                "self.obj": "0       30\n1       73\n2       25\n3       74\n4       39\n        ..\n9995     7\n9996    66\n9997    22\n9998    27\n9999    15\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([30, 73, 25, 74, 39, 20, 11,  6, 84, 57, 75, 48, 83,  8, 53, 85, 46,\n       93, 98, 36,  1, 50, 60, 71, 33, 49, 68, 87, 10, 13, 28, 94, 62, 65,\n       88, 61, 45, 81, 63, 96,  4, 38, 14, 97,  9, 12, 86, 35, 59, 42, 15,\n       76, 92, 43, 51, 44, 55, 40, 82, 70, 64,  3, 54, 37, 31, 69, 34, 17,\n        5, 27, 41, 79, 32, 78,  7, 67, 19, 58, 23, 89,  2, 77, 18, 95, 16,\n       22, 47, 66, 99, 56, 21, 52, 29,  0, 80, 26, 91, 24, 72, 90])",
                "val": "array([30, 73, 25, ..., 22, 27, 15])",
                "codes": "array([ 8, 10, 12, ..., 85, 86, 92])",
                "sorter": "array([1354,  879, 9207, ..., 4652, 9842, 4782])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    34\n     2015-08-24    27\n     2015-08-25    25\n     2015-08-26    28\n     2015-08-27    31\n                   ..\nz    2015-08-28    39\n     2015-08-29    36\n     2015-08-30    23\n     2015-08-31    33\n     2015-09-01    27\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddce50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcf10>",
                "self.obj": "0       30.0\n1       73.0\n2       25.0\n3       74.0\n4       39.0\n        ... \n9995     7.0\n9996    66.0\n9997    22.0\n9998    27.0\n9999    15.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([30., 73., 25., ..., 22., 27., 15.])",
                "codes": "array([-1, -1, -1, ..., 98, 98, 98])",
                "sorter": "array([ 103,  256,  273, ..., 3039, 7905, 9665])",
                "idx": "array([ 589,  932, 1288, 1649, 2030, 2399, 2756, 3135, 3499, 3878, 4203,\n       4559, 4927, 5284, 5652, 6005, 6359, 6751, 7100, 7489, 7849, 8185,\n       8560, 8922, 9273, 9639])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101,  98,  97,  94,  95,  96,  98,  95,  96,  96,  98,  96,  93,\n        97,  93,  94,  92,  97,  99,  99,  98,  93,  98,  96,  96,  96,\n        95])",
                "res": "array([98, 97, 94, 95, 96, 98, 95, 96, 96, 98, 96, 93, 97, 93, 94, 92, 97,\n       99, 99, 98, 93, 98, 96, 96, 96, 95])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    98\nb    97\nc    94\nd    95\ne    96\nf    98\ng    95\nh    96\ni    96\nj    98\nk    96\nl    93\nm    97\nn    93\no    94\np    92\nq    97\nr    99\ns    99\nt    98\nu    93\nv    98\nw    96\nx    96\ny    96\nz    95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08f70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d089a0>",
                "self.obj": "0       30.0\n1       73.0\n2       25.0\n3       74.0\n4       39.0\n        ... \n9995     7.0\n9996    66.0\n9997    22.0\n9998    27.0\n9999    15.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([30., 73., 25., ..., 22., 27., 15.])",
                "codes": "array([-1, -1, -1, ..., 85, 88, 92])",
                "sorter": "array([ 103,  256,  273, ..., 4799, 4782, 4652])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    27\n     2015-08-24    23\n     2015-08-25    23\n     2015-08-26    24\n     2015-08-27    25\n                   ..\nz    2015-08-28    33\n     2015-08-29    30\n     2015-08-30    22\n     2015-08-31    30\n     2015-09-01    24\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d519d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51370>",
                "self.obj": "0       30.0\n1       73.0\n2       25.0\n3       74.0\n4       39.0\n        ... \n9995     7.0\n9996    66.0\n9997    22.0\n9998    27.0\n9999    15.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([30., 73., 25., ..., 22., 27., 15.])",
                "codes": "array([-1, -1, -1, ..., 98, 98, 98])",
                "sorter": "array([ 103,  256,  273, ..., 3039, 7905, 9665])",
                "idx": "array([ 589,  932, 1288, 1649, 2030, 2399, 2756, 3135, 3499, 3878, 4203,\n       4559, 4927, 5284, 5652, 6005, 6359, 6751, 7100, 7489, 7849, 8185,\n       8560, 8922, 9273, 9639])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101,  98,  97,  94,  95,  96,  98,  95,  96,  96,  98,  96,  93,\n        97,  93,  94,  92,  97,  99,  99,  98,  93,  98,  96,  96,  96,\n        95])",
                "res": "array([98, 97, 94, 95, 96, 98, 95, 96, 96, 98, 96, 93, 97, 93, 94, 92, 97,\n       99, 99, 98, 93, 98, 96, 96, 96, 95])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    98\nb    97\nc    94\nd    95\ne    96\nf    98\ng    95\nh    96\ni    96\nj    98\nk    96\nl    93\nm    97\nn    93\no    94\np    92\nq    97\nr    99\ns    99\nt    98\nu    93\nv    98\nw    96\nx    96\ny    96\nz    95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d519d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51d30>",
                "self.obj": "0       30.0\n1       73.0\n2       25.0\n3       74.0\n4       39.0\n        ... \n9995     7.0\n9996    66.0\n9997    22.0\n9998    27.0\n9999    15.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([30., 73., 25., ..., 22., 27., 15.])",
                "codes": "array([-1, -1, -1, ..., 85, 88, 92])",
                "sorter": "array([ 103,  256,  273, ..., 4799, 4782, 4652])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    27\n     2015-08-24    23\n     2015-08-25    23\n     2015-08-26    24\n     2015-08-27    25\n                   ..\nz    2015-08-28    33\n     2015-08-29    30\n     2015-08-30    22\n     2015-08-31    30\n     2015-09-01    24\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08eb0>",
                "self.obj": "0        30\n1        34\n2         2\n3        78\n4         7\n         ..\n99995    95\n99996     0\n99997    67\n99998     1\n99999    23\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([30, 34,  2, 78,  7, 99, 90, 28, 25, 46, 68, 53, 44, 39, 17, 18, 33,\n       35, 24, 58, 16, 80, 12,  8, 14,  3, 11,  4, 82, 86, 91, 10, 81, 42,\n       97, 63, 75, 60, 31, 23, 61, 95, 96, 45, 74, 66, 64,  1, 27, 22, 79,\n       76,  5, 84, 69, 62, 36, 85, 77, 49, 37,  0, 15, 88, 89, 38, 26, 93,\n       51, 41, 21, 70, 57,  6, 54, 55, 73, 98, 72, 94, 65, 19, 83, 67, 56,\n       29, 71, 48,  9, 47, 59, 32, 20, 52, 40, 92, 50, 87, 43, 13])",
                "val": "array([30, 34,  2, ..., 67,  1, 23])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([ 6667, 10362, 15019, ..., 90613, 95160, 97734])",
                "idx": "array([    0,  3975,  7860, 11767, 15598, 19464, 23351, 27156, 30986,\n       34787, 38592, 42330, 46099, 50052, 53773, 57588, 61500, 65278,\n       69159, 73053, 76899, 80787, 84662, 88534, 92291, 96139])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08730>",
                "self.obj": "0        30\n1        34\n2         2\n3        78\n4         7\n         ..\n99995    95\n99996     0\n99997    67\n99998     1\n99999    23\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([30, 34,  2, 78,  7, 99, 90, 28, 25, 46, 68, 53, 44, 39, 17, 18, 33,\n       35, 24, 58, 16, 80, 12,  8, 14,  3, 11,  4, 82, 86, 91, 10, 81, 42,\n       97, 63, 75, 60, 31, 23, 61, 95, 96, 45, 74, 66, 64,  1, 27, 22, 79,\n       76,  5, 84, 69, 62, 36, 85, 77, 49, 37,  0, 15, 88, 89, 38, 26, 93,\n       51, 41, 21, 70, 57,  6, 54, 55, 73, 98, 72, 94, 65, 19, 83, 67, 56,\n       29, 71, 48,  9, 47, 59, 32, 20, 52, 40, 92, 50, 87, 43, 13])",
                "val": "array([30, 34,  2, ..., 67,  1, 23])",
                "codes": "array([ 0,  0,  0, ..., 98, 99, 99])",
                "sorter": "array([ 6667, 37559, 66659, ..., 98082, 18401, 77298])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     99\n     2015-08-24     99\n     2015-08-25     98\n     2015-08-26     96\n     2015-08-27     98\n                  ... \nz    2015-08-28     97\n     2015-08-29     99\n     2015-08-30     99\n     2015-08-31    100\n     2015-09-01     97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0670>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0160>",
                "self.obj": "0        30.0\n1        34.0\n2         2.0\n3        78.0\n4         7.0\n         ... \n99995    95.0\n99996     0.0\n99997    67.0\n99998     1.0\n99999    23.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([30., 34.,  2., ..., 67.,  1., 23.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 93225, 94131, 98059])",
                "idx": "array([ 5883,  9632, 13284, 16961, 20550, 24185, 27850, 31448, 35056,\n       38636, 42239, 45744, 49301, 53006, 56522, 60094, 63781, 67318,\n       70973, 74621, 78242, 81911, 85556, 89220, 92719, 96355])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da01c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0e80>",
                "self.obj": "0        30.0\n1        34.0\n2         2.0\n3        78.0\n4         7.0\n         ... \n99995    95.0\n99996     0.0\n99997    67.0\n99998     1.0\n99999    23.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([30., 34.,  2., ..., 67.,  1., 23.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 41890, 92470, 98059])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    96\n     2015-08-24    98\n     2015-08-25    92\n     2015-08-26    94\n     2015-08-27    98\n                   ..\nz    2015-08-28    96\n     2015-08-29    97\n     2015-08-30    97\n     2015-08-31    96\n     2015-09-01    95\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51340>",
                "self.obj": "0        30.0\n1        34.0\n2         2.0\n3        78.0\n4         7.0\n         ... \n99995    95.0\n99996     0.0\n99997    67.0\n99998     1.0\n99999    23.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([30., 34.,  2., ..., 67.,  1., 23.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 93225, 94131, 98059])",
                "idx": "array([ 5883,  9632, 13284, 16961, 20550, 24185, 27850, 31448, 35056,\n       38636, 42239, 45744, 49301, 53006, 56522, 60094, 63781, 67318,\n       70973, 74621, 78242, 81911, 85556, 89220, 92719, 96355])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101])",
                "res": "array([101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101,\n       101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    101\nb    101\nc    101\nd    101\ne    101\nf    101\ng    101\nh    101\ni    101\nj    101\nk    101\nl    101\nm    101\nn    101\no    101\np    101\nq    101\nr    101\ns    101\nt    101\nu    101\nv    101\nw    101\nx    101\ny    101\nz    101\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d519a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d518b0>",
                "self.obj": "0        30.0\n1        34.0\n2         2.0\n3        78.0\n4         7.0\n         ... \n99995    95.0\n99996     0.0\n99997    67.0\n99998     1.0\n99999    23.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([30., 34.,  2., ..., 67.,  1., 23.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 41890, 92470, 98059])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    96\n     2015-08-24    98\n     2015-08-25    92\n     2015-08-26    94\n     2015-08-27    98\n                   ..\nz    2015-08-28    96\n     2015-08-29    97\n     2015-08-30    97\n     2015-08-31    96\n     2015-09-01    95\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b4c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b220>",
                "self.obj": "0     775\n1     396\n2      15\n3     754\n4     111\n     ... \n95    393\n96    709\n97    974\n98    360\n99    903\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  3,  3,  3,  3,  4,\n        4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  8,  8,  8,\n        8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 12,\n       12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16,\n       16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19,\n       20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "array of shape 93",
                "val": "array of shape 100",
                "codes": "array([35, 46, 55, 59, 68, 71, 82,  5, 67, 79, 20, 74,  6, 16, 61, 81, 33,\n       44, 57, 76,  1,  4, 30, 41, 18, 27, 28, 47, 66, 56, 58, 21, 43, 50,\n       83, 91, 92, 10, 37, 52, 87, 13, 39, 64, 78, 90,  3, 73, 80, 85, 14,\n       28, 31, 44, 51, 69, 88, 32, 38,  9, 48, 70, 22, 23, 45, 26, 31, 34,\n       62, 65, 17, 25, 49, 75, 15, 18, 29, 36, 40, 54, 86, 23, 24, 42, 89,\n        8, 63, 84, 39, 72, 12, 53,  2, 11, 14, 77,  0,  7, 19, 60])",
                "sorter": "array([36, 48, 58, 63, 73, 76, 88,  5, 72, 85, 20, 79,  6, 16, 65, 87, 34,\n       66, 60, 82,  1,  4, 30, 43, 18, 27, 91, 49, 71, 59, 61, 21, 45, 52,\n       89, 98, 99, 10, 39, 54, 94, 13, 62, 69, 84, 97,  3, 78, 86, 92, 14,\n       28, 80, 46, 53, 74, 95, 33, 40,  9, 50, 75, 22, 23, 47, 26, 32, 35,\n       67, 70, 17, 25, 51, 81, 15, 31, 29, 37, 42, 57, 93, 55, 24, 44, 96,\n        8, 68, 90, 41, 77, 12, 56,  2, 11, 38, 83,  0,  7, 19, 64])",
                "idx": "array([ 0,  7, 10, 12, 16, 20, 24, 29, 31, 37, 41, 46, 50, 57, 59, 62, 65,\n       70, 74, 81, 85, 88, 90, 92, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 3, 2, 4, 4, 4, 5, 2, 6, 4, 5, 4, 7, 2, 3, 3, 5, 4, 7, 4, 3, 2,\n       2, 4, 4])",
                "res": "array([7, 3, 2, 4, 4, 4, 5, 2, 6, 4, 5, 4, 7, 2, 3, 3, 5, 4, 7, 4, 3, 2,\n       2, 4, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    7\nb    3\nc    2\nd    4\ne    4\nf    4\ng    5\nh    2\ni    6\nj    4\nk    5\nl    4\nm    7\nn    2\no    3\np    3\nq    5\nr    4\nt    7\nu    4\nv    3\nw    2\nx    2\ny    4\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bbe0>",
                "self.obj": "0     775\n1     396\n2      15\n3     754\n4     111\n     ... \n95    393\n96    709\n97    974\n98    360\n99    903\nName: julie, Length: 100, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  2,  3,  4,  5,  6,  7,  8,  9,  9, 10, 10, 11, 11, 12,\n       13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 23, 24, 25, 26, 27, 27,\n       28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 40, 41, 42, 43,\n       43, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56,\n       57, 57, 58, 59, 60, 60, 61, 62, 62, 63, 64, 65, 65, 66, 67, 68, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 77, 78, 79, 80, 81, 82])",
                "_": "array of shape 93",
                "val": "array of shape 100",
                "codes": "array([35, 55, 46, 82, 68, 71, 59, 67,  5, 79, 20, 74, 16, 81,  6, 61, 76,\n       33, 44, 57,  1,  4, 30, 41, 66, 28, 27, 18, 47, 56, 58, 83, 43, 91,\n       92, 21, 50, 87, 10, 37, 52, 64, 78, 90, 13, 39, 80,  3, 85, 73, 14,\n       28, 88, 44, 51, 31, 69, 38, 32, 70,  9, 48, 45, 23, 22, 65, 31, 34,\n       26, 62, 75, 25, 17, 49, 86, 18, 36, 54, 29, 15, 40, 89, 42, 23, 24,\n        8, 63, 84, 39, 72, 53, 12, 14, 11, 77,  2,  7, 19, 60,  0])",
                "sorter": "array([36, 58, 48, 88, 73, 76, 63, 72,  5, 85, 20, 79, 16, 87,  6, 65, 82,\n       34, 66, 60,  1,  4, 30, 43, 71, 91, 27, 18, 49, 59, 61, 89, 45, 98,\n       99, 21, 52, 94, 10, 39, 54, 69, 84, 97, 13, 62, 86,  3, 92, 78, 14,\n       28, 95, 46, 53, 80, 74, 40, 33, 75,  9, 50, 47, 23, 22, 70, 32, 35,\n       26, 67, 81, 25, 17, 51, 93, 31, 37, 57, 29, 15, 42, 96, 44, 55, 24,\n        8, 68, 90, 41, 77, 56, 12, 38, 11, 83,  2,  7, 19, 64,  0])",
                "idx": "array([ 0,  1,  2,  4,  5,  6,  7,  8,  9, 10, 12, 14, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39,\n       40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 53, 54, 55, 57, 58, 59, 60,\n       61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 74, 75, 77, 78, 79, 81, 82,\n       83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 3,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "ri": "array of shape 83",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-26    2\n     2015-08-29    1\n     2015-08-31    1\n                  ..\ny    2015-09-01    1\nz    2015-08-23    1\n     2015-08-24    1\n     2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 83, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6ac40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a760>",
                "self.obj": "0     775.0\n1     396.0\n2      15.0\n3     754.0\n4     111.0\n      ...  \n95    393.0\n96    709.0\n97    974.0\n98    360.0\n99    903.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  2,\n        2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  7,\n        7,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11,\n       12, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16,\n       16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19,\n       20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "array of shape 80",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 28, 41, 53, 66, 29, 37, 46, 50, 57, 60, 68, -1,  5, 56, 17,\n       63, -1,  6, 13, 67, -1, 27, 48, 65,  4, 24, 35, -1, 38, 55, 71, 47,\n       49, -1, 18, 69, 78, 79,  7, 31, 43, 74, -1, 10, 33, 77,  3, 62, 72,\n       -1, -1, 11, 25, 42, 58, 75, 26, 32, -1, 39, 59, -1, 19, 20, -1, 25,\n       51, 54, 14, 22, 40, 64, 12, 15, 23, 30, 34, 45, 73, 20, 21, 36, 76,\n       -1, 52, 70, 33, 61,  9, 44, -1,  2,  8, 11, -1, -1,  0, 16])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 36, 48, 58, 63, 73, 76, 88, 85,  5, 72, 20,\n       79, 65,  6, 16, 87, 66, 34, 60, 82,  4, 30, 43, 27, 49, 71, 91, 59,\n       61, 45, 21, 89, 98, 99, 10, 39, 54, 94, 84, 13, 62, 97,  3, 78, 92,\n       28, 46, 14, 80, 53, 74, 95, 33, 40,  9, 50, 75, 47, 22, 23, 26, 32,\n       67, 70, 17, 25, 51, 81, 15, 31, 29, 37, 42, 57, 93, 55, 24, 44, 96,\n        8, 68, 90, 41, 77, 12, 56, 83,  2, 11, 38,  7, 64,  0, 19])",
                "idx": "array([ 6, 13, 16, 18, 22, 26, 29, 33, 35, 40, 44, 48, 51, 58, 60, 63, 66,\n       70, 74, 81, 85, 88, 90, 92, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 7, 3, 2, 4, 4, 3, 4, 2, 5, 4, 4, 3, 6, 2, 3, 3, 4, 4, 7, 4, 3,\n       2, 2, 4, 3])",
                "res": "array([7, 3, 2, 4, 4, 3, 4, 2, 5, 4, 4, 3, 6, 2, 3, 3, 4, 4, 7, 4, 3, 2,\n       2, 4, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    7\nb    3\nc    2\nd    4\ne    4\nf    3\ng    4\nh    2\ni    5\nj    4\nk    4\nl    3\nm    6\nn    2\no    3\np    3\nq    4\nr    4\nt    7\nu    4\nv    3\nw    2\nx    2\ny    4\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a400>",
                "self.obj": "0     775.0\n1     396.0\n2      15.0\n3     754.0\n4     111.0\n      ...  \n95    393.0\n96    709.0\n97    974.0\n98    360.0\n99    903.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  3,  4,  5,  6,\n        7,  8,  9,  9, 10, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35,\n       36, 37, 38, 38, 38, 39, 40, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 51, 52, 53, 54, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62,\n       62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75])",
                "_": "array of shape 80",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 28, 32, 41, 53, 61, 66, 29, 46, 37, 68, 57, 60, 50, 56,\n        5, -1, 17, 63, 13, 67, -1,  6, 65, 27, -1, 48,  4, 24, 35, 55, 71,\n       -1, 38, 47, 49, 69, -1, 78, 79, 18, 74,  7, 31, 43, -1, 77, 10, 33,\n       72, 62, -1, 11, 75, -1, 42, 25, 58, 26, 59, -1, 39, -1, 20, 19, 54,\n       25, -1, 51, 64, 22, 14, 40, 73, 15, 30, 45, 23, 12, 34, 76, 36, 20,\n       21, -1, 52, 70, 33, 44,  9, 11, -1,  8,  2, -1, 16, -1,  0])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 36, 58, 48, 88, 73, 76, 63, 72,\n        5, 85, 20, 79, 16, 87, 65,  6, 82, 34, 66, 60,  4, 30, 43, 71, 91,\n       27, 49, 59, 61, 89, 45, 98, 99, 21, 94, 10, 39, 54, 84, 97, 13, 62,\n       92, 78, 28, 14, 95, 46, 53, 80, 74, 33, 75,  9, 50, 47, 23, 22, 70,\n       32, 26, 67, 81, 25, 17, 51, 93, 31, 37, 57, 29, 15, 42, 96, 44, 55,\n       24,  8, 68, 90, 41, 56, 12, 38, 83, 11,  2,  7, 19, 64,  0])",
                "idx": "array([ 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 71, 72, 73, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90,\n       91, 92, 93, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "ri": "array of shape 76",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-26    2\n     2015-08-29    1\n     2015-08-31    1\n                  ..\ny    2015-09-01    1\nz    2015-08-23    1\n     2015-08-24    1\n     2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 76, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da04c0>",
                "self.obj": "0     775.0\n1     396.0\n2      15.0\n3     754.0\n4     111.0\n      ...  \n95    393.0\n96    709.0\n97    974.0\n98    360.0\n99    903.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  2,\n        2,  3,  3,  3,  3,  4,  4,  4,  4,  5,  5,  5,  6,  6,  6,  6,  7,\n        7,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11,\n       12, 12, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16,\n       16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19,\n       20, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "array of shape 80",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 28, 41, 53, 66, 29, 37, 46, 50, 57, 60, 68, -1,  5, 56, 17,\n       63, -1,  6, 13, 67, -1, 27, 48, 65,  4, 24, 35, -1, 38, 55, 71, 47,\n       49, -1, 18, 69, 78, 79,  7, 31, 43, 74, -1, 10, 33, 77,  3, 62, 72,\n       -1, -1, 11, 25, 42, 58, 75, 26, 32, -1, 39, 59, -1, 19, 20, -1, 25,\n       51, 54, 14, 22, 40, 64, 12, 15, 23, 30, 34, 45, 73, 20, 21, 36, 76,\n       -1, 52, 70, 33, 61,  9, 44, -1,  2,  8, 11, -1, -1,  0, 16])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 36, 48, 58, 63, 73, 76, 88, 85,  5, 72, 20,\n       79, 65,  6, 16, 87, 66, 34, 60, 82,  4, 30, 43, 27, 49, 71, 91, 59,\n       61, 45, 21, 89, 98, 99, 10, 39, 54, 94, 84, 13, 62, 97,  3, 78, 92,\n       28, 46, 14, 80, 53, 74, 95, 33, 40,  9, 50, 75, 47, 22, 23, 26, 32,\n       67, 70, 17, 25, 51, 81, 15, 31, 29, 37, 42, 57, 93, 55, 24, 44, 96,\n        8, 68, 90, 41, 77, 12, 56, 83,  2, 11, 38,  7, 64,  0, 19])",
                "idx": "array([ 6, 13, 16, 18, 22, 26, 29, 33, 35, 40, 44, 48, 51, 58, 60, 63, 66,\n       70, 74, 81, 85, 88, 90, 92, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 7, 3, 2, 4, 4, 3, 4, 2, 5, 4, 4, 3, 6, 2, 3, 3, 4, 4, 7, 4, 3,\n       2, 2, 4, 3])",
                "res": "array([7, 3, 2, 4, 4, 3, 4, 2, 5, 4, 4, 3, 6, 2, 3, 3, 4, 4, 7, 4, 3, 2,\n       2, 4, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    7\nb    3\nc    2\nd    4\ne    4\nf    3\ng    4\nh    2\ni    5\nj    4\nk    4\nl    3\nm    6\nn    2\no    3\np    3\nq    4\nr    4\nt    7\nu    4\nv    3\nw    2\nx    2\ny    4\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b9a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b820>",
                "self.obj": "0     775.0\n1     396.0\n2      15.0\n3     754.0\n4     111.0\n      ...  \n95    393.0\n96    709.0\n97    974.0\n98    360.0\n99    903.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  3,  4,  5,  6,\n        7,  8,  9,  9, 10, 10, 11, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n       21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 35,\n       36, 37, 38, 38, 38, 39, 40, 41, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n       50, 51, 51, 52, 53, 54, 54, 55, 56, 56, 57, 58, 59, 59, 60, 61, 62,\n       62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72, 73, 74, 75])",
                "_": "array of shape 80",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 28, 32, 41, 53, 61, 66, 29, 46, 37, 68, 57, 60, 50, 56,\n        5, -1, 17, 63, 13, 67, -1,  6, 65, 27, -1, 48,  4, 24, 35, 55, 71,\n       -1, 38, 47, 49, 69, -1, 78, 79, 18, 74,  7, 31, 43, -1, 77, 10, 33,\n       72, 62, -1, 11, 75, -1, 42, 25, 58, 26, 59, -1, 39, -1, 20, 19, 54,\n       25, -1, 51, 64, 22, 14, 40, 73, 15, 30, 45, 23, 12, 34, 76, 36, 20,\n       21, -1, 52, 70, 33, 44,  9, 11, -1,  8,  2, -1, 16, -1,  0])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 36, 58, 48, 88, 73, 76, 63, 72,\n        5, 85, 20, 79, 16, 87, 65,  6, 82, 34, 66, 60,  4, 30, 43, 71, 91,\n       27, 49, 59, 61, 89, 45, 98, 99, 21, 94, 10, 39, 54, 84, 97, 13, 62,\n       92, 78, 28, 14, 95, 46, 53, 80, 74, 33, 75,  9, 50, 47, 23, 22, 70,\n       32, 26, 67, 81, 25, 17, 51, 93, 31, 37, 57, 29, 15, 42, 96, 44, 55,\n       24,  8, 68, 90, 41, 56, 12, 38, 83, 11,  2,  7, 19, 64,  0])",
                "idx": "array([ 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 25, 26, 27, 28, 29,\n       30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47,\n       48, 49, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68,\n       69, 71, 72, 73, 75, 76, 78, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90,\n       91, 92, 93, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 2, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 1, 1, 1])",
                "ri": "array of shape 76",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    1\n     2015-08-25    1\n     2015-08-26    2\n     2015-08-29    1\n     2015-08-31    1\n                  ..\ny    2015-09-01    1\nz    2015-08-23    1\n     2015-08-24    1\n     2015-08-27    1\n     2015-08-31    1\nName: julie, Length: 76, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09ca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09bb0>",
                "self.obj": "0      651\n1      795\n2      774\n3      435\n4       38\n      ... \n995    738\n996    245\n997    409\n998    720\n999    162\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 641",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  35,  71, 103, 147, 183, 214, 263, 299, 330, 368, 398, 448,\n       491, 531, 578, 613, 655, 686, 727, 774, 801, 854, 892, 927, 956])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([34, 36, 32, 44, 36, 31, 47, 36, 31, 38, 30, 47, 42, 39, 46, 33, 40,\n       31, 41, 47, 27, 52, 38, 35, 29, 42])",
                "res": "array([34, 36, 32, 44, 36, 31, 47, 36, 31, 38, 30, 47, 42, 39, 46, 33, 40,\n       31, 41, 47, 27, 52, 38, 35, 29, 42])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    34\nb    36\nc    32\nd    44\ne    36\nf    31\ng    47\nh    36\ni    31\nj    38\nk    30\nl    47\nm    42\nn    39\no    46\np    33\nq    40\nr    31\ns    41\nt    47\nu    27\nv    52\nw    38\nx    35\ny    29\nz    42\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6ac40>",
                "self.obj": "0      651\n1      795\n2      774\n3      435\n4       38\n      ... \n995    738\n996    245\n997    409\n998    720\n999    162\nName: julie, Length: 1000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 641",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 251",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 251",
                "res": "array of shape 251",
                "ri": "array of shape 251",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    3\n                  ..\nz    2015-08-28    5\n     2015-08-29    7\n     2015-08-30    1\n     2015-08-31    6\n     2015-09-01    3\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5caf0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c460>",
                "self.obj": "0      651.0\n1      795.0\n2      774.0\n3      435.0\n4       38.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    720.0\n999    162.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 579",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  91, 126, 158, 200, 235, 264, 306, 339, 368, 402, 430, 479,\n       522, 559, 605, 639, 677, 706, 742, 785, 812, 861, 897, 930, 958])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([51, 27, 30, 31, 36, 29, 25, 33, 28, 23, 31, 27, 41, 38, 32, 41, 29,\n       32, 24, 28, 35, 26, 39, 32, 32, 25, 32])",
                "res": "array([27, 30, 31, 36, 29, 25, 33, 28, 23, 31, 27, 41, 38, 32, 41, 29, 32,\n       24, 28, 35, 26, 39, 32, 32, 25, 32])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\nb    30\nc    31\nd    36\ne    29\nf    25\ng    33\nh    28\ni    23\nj    31\nk    27\nl    41\nm    38\nn    32\no    41\np    29\nq    32\nr    24\ns    28\nt    35\nu    26\nv    39\nw    32\nx    32\ny    25\nz    32\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5cc70>",
                "self.obj": "0      651.0\n1      795.0\n2      774.0\n3      435.0\n4       38.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    720.0\n999    162.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 579",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 250",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 251",
                "res": "array of shape 250",
                "ri": "array of shape 250",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-28    3\n     2015-08-29    7\n     2015-08-30    1\n     2015-08-31    5\n     2015-09-01    3\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a310>",
                "self.obj": "0      651.0\n1      795.0\n2      774.0\n3      435.0\n4       38.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    720.0\n999    162.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 579",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  91, 126, 158, 200, 235, 264, 306, 339, 368, 402, 430, 479,\n       522, 559, 605, 639, 677, 706, 742, 785, 812, 861, 897, 930, 958])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([51, 27, 30, 31, 36, 29, 25, 33, 28, 23, 31, 27, 41, 38, 32, 41, 29,\n       32, 24, 28, 35, 26, 39, 32, 32, 25, 32])",
                "res": "array([27, 30, 31, 36, 29, 25, 33, 28, 23, 31, 27, 41, 38, 32, 41, 29, 32,\n       24, 28, 35, 26, 39, 32, 32, 25, 32])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    27\nb    30\nc    31\nd    36\ne    29\nf    25\ng    33\nh    28\ni    23\nj    31\nk    27\nl    41\nm    38\nn    32\no    41\np    29\nq    32\nr    24\ns    28\nt    35\nu    26\nv    39\nw    32\nx    32\ny    25\nz    32\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d081c0>",
                "self.obj": "0      651.0\n1      795.0\n2      774.0\n3      435.0\n4       38.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    720.0\n999    162.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 579",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 250",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 251",
                "res": "array of shape 250",
                "ri": "array of shape 250",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    5\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-28    3\n     2015-08-29    7\n     2015-08-30    1\n     2015-08-31    5\n     2015-09-01    3\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5cb50>",
                "self.obj": "0       680\n1       624\n2       498\n3       240\n4       433\n       ... \n9995    807\n9996    915\n9997    117\n9998      1\n9999    762\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([680, 624, 498, ..., 117,   1, 762])",
                "codes": "array([  4,  12,  15, ..., 982, 991, 994])",
                "sorter": "array([1691, 8505,   15, ..., 4461, 9578, 5734])",
                "idx": "array([   0,  397,  769, 1165, 1565, 1916, 2339, 2711, 3085, 3527, 3882,\n       4240, 4598, 4955, 5358, 5759, 6153, 6564, 6924, 7339, 7725, 8099,\n       8469, 8838, 9234, 9592])",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([325, 308, 330, 334, 309, 342, 301, 318, 348, 298, 295, 301, 305,\n       338, 325, 324, 328, 304, 350, 320, 303, 303, 307, 324, 304, 335])",
                "res": "array([325, 308, 330, 334, 309, 342, 301, 318, 348, 298, 295, 301, 305,\n       338, 325, 324, 328, 304, 350, 320, 303, 303, 307, 324, 304, 335])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    325\nb    308\nc    330\nd    334\ne    309\nf    342\ng    301\nh    318\ni    348\nj    298\nk    295\nl    301\nm    305\nn    338\no    325\np    324\nq    328\nr    304\ns    350\nt    320\nu    303\nv    303\nw    307\nx    324\ny    304\nz    335\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c640>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c280>",
                "self.obj": "0       680\n1       624\n2       498\n3       240\n4       433\n       ... \n9995    807\n9996    915\n9997    117\n9998      1\n9999    762\nName: julie, Length: 10000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([680, 624, 498, ..., 117,   1, 762])",
                "codes": "array([ 33,  36,  59, ..., 899, 933, 979])",
                "sorter": "array([8400, 3785, 1411, ..., 3807, 3484, 8853])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    40\n     2015-08-24    38\n     2015-08-25    37\n     2015-08-26    42\n     2015-08-27    51\n                   ..\nz    2015-08-28    35\n     2015-08-29    47\n     2015-08-30    41\n     2015-08-31    36\n     2015-09-01    43\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08be0>",
                "self.obj": "0       680.0\n1       624.0\n2       498.0\n3       240.0\n4       433.0\n        ...  \n9995    807.0\n9996    915.0\n9997    117.0\n9998      1.0\n9999    762.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([680., 624., 498., ..., 117.,   1., 762.])",
                "codes": "array([ -1,  -1,  -1, ..., 988, 994, 995])",
                "sorter": "array([ 103,  256,  273, ..., 8853, 7709, 8281])",
                "idx": "array([ 589,  967, 1321, 1695, 2070, 2396, 2791, 3137, 3495, 3918, 4250,\n       4584, 4921, 5261, 5640, 6024, 6386, 6765, 7099, 7487, 7847, 8206,\n       8551, 8906, 9279, 9617])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([392, 275, 248, 280, 279, 253, 276, 245, 262, 297, 243, 244, 245,\n       263, 288, 272, 263, 269, 232, 291, 265, 262, 255, 261, 271, 252,\n       275])",
                "res": "array([275, 248, 280, 279, 253, 276, 245, 262, 297, 243, 244, 245, 263,\n       288, 272, 263, 269, 232, 291, 265, 262, 255, 261, 271, 252, 275])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    275\nb    248\nc    280\nd    279\ne    253\nf    276\ng    245\nh    262\ni    297\nj    243\nk    244\nl    245\nm    263\nn    288\no    272\np    263\nq    269\nr    232\ns    291\nt    265\nu    262\nv    255\nw    261\nx    271\ny    252\nz    275\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d080d0>",
                "self.obj": "0       680.0\n1       624.0\n2       498.0\n3       240.0\n4       433.0\n        ...  \n9995    807.0\n9996    915.0\n9997    117.0\n9998      1.0\n9999    762.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([680., 624., 498., ..., 117.,   1., 762.])",
                "codes": "array([ -1,  -1,  -1, ..., 913, 961, 988])",
                "sorter": "array([ 103,  256,  273, ..., 8172, 4080, 8853])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    35\n     2015-08-24    31\n     2015-08-25    27\n     2015-08-26    35\n     2015-08-27    43\n                   ..\nz    2015-08-28    24\n     2015-08-29    39\n     2015-08-30    28\n     2015-08-31    27\n     2015-09-01    34\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51250>",
                "self.obj": "0       680.0\n1       624.0\n2       498.0\n3       240.0\n4       433.0\n        ...  \n9995    807.0\n9996    915.0\n9997    117.0\n9998      1.0\n9999    762.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([680., 624., 498., ..., 117.,   1., 762.])",
                "codes": "array([ -1,  -1,  -1, ..., 988, 994, 995])",
                "sorter": "array([ 103,  256,  273, ..., 8853, 7709, 8281])",
                "idx": "array([ 589,  967, 1321, 1695, 2070, 2396, 2791, 3137, 3495, 3918, 4250,\n       4584, 4921, 5261, 5640, 6024, 6386, 6765, 7099, 7487, 7847, 8206,\n       8551, 8906, 9279, 9617])",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([392, 275, 248, 280, 279, 253, 276, 245, 262, 297, 243, 244, 245,\n       263, 288, 272, 263, 269, 232, 291, 265, 262, 255, 261, 271, 252,\n       275])",
                "res": "array([275, 248, 280, 279, 253, 276, 245, 262, 297, 243, 244, 245, 263,\n       288, 272, 263, 269, 232, 291, 265, 262, 255, 261, 271, 252, 275])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    275\nb    248\nc    280\nd    279\ne    253\nf    276\ng    245\nh    262\ni    297\nj    243\nk    244\nl    245\nm    263\nn    288\no    272\np    263\nq    269\nr    232\ns    291\nt    265\nu    262\nv    255\nw    261\nx    271\ny    252\nz    275\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d513d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51910>",
                "self.obj": "0       680.0\n1       624.0\n2       498.0\n3       240.0\n4       433.0\n        ...  \n9995    807.0\n9996    915.0\n9997    117.0\n9998      1.0\n9999    762.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([680., 624., 498., ..., 117.,   1., 762.])",
                "codes": "array([ -1,  -1,  -1, ..., 913, 961, 988])",
                "sorter": "array([ 103,  256,  273, ..., 8172, 4080, 8853])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    35\n     2015-08-24    31\n     2015-08-25    27\n     2015-08-26    35\n     2015-08-27    43\n                   ..\nz    2015-08-28    24\n     2015-08-29    39\n     2015-08-30    28\n     2015-08-31    27\n     2015-09-01    34\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08a60>",
                "self.obj": "0        264\n1        300\n2        301\n3        132\n4        920\n        ... \n99995    939\n99996    738\n99997    644\n99998    339\n99999    660\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([264, 300, 301, ..., 644, 339, 660])",
                "codes": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([34465, 80368, 82240, ..., 34385, 63020, 86615])",
                "idx": "array([    0,  3863,  7707, 11620, 15386, 19233, 23029, 26910, 30766,\n       34633, 38462, 42359, 46176, 50115, 54018, 57929, 61723, 65546,\n       69442, 73141, 76971, 80840, 84676, 88565, 92406, 96192])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([975, 980, 982, 980, 976, 971, 978, 984, 968, 974, 976, 983, 983,\n       986, 971, 982, 983, 982, 973, 969, 973, 975, 981, 978, 978, 978])",
                "res": "array([975, 980, 982, 980, 976, 971, 978, 984, 968, 974, 976, 983, 983,\n       986, 971, 982, 983, 982, 973, 969, 973, 975, 981, 978, 978, 978])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    975\nb    980\nc    982\nd    980\ne    976\nf    971\ng    978\nh    984\ni    968\nj    974\nk    976\nl    983\nm    983\nn    986\no    971\np    982\nq    983\nr    982\ns    973\nt    969\nu    973\nv    975\nw    981\nx    978\ny    978\nz    978\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a370>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a760>",
                "self.obj": "0        264\n1        300\n2        301\n3        132\n4        920\n        ... \n99995    939\n99996    738\n99997    644\n99998    339\n99999    660\nName: julie, Length: 100000, dtype: int64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([264, 300, 301, ..., 644, 339, 660])",
                "codes": "array([  3,   4,   5, ..., 990, 997, 998])",
                "sorter": "array([36798, 14715,  2350, ..., 26019, 27647, 85112])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    337\n     2015-08-24    299\n     2015-08-25    314\n     2015-08-26    346\n     2015-08-27    314\n                  ... \nz    2015-08-28    317\n     2015-08-29    322\n     2015-08-30    311\n     2015-08-31    311\n     2015-09-01    318\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5cd00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c880>",
                "self.obj": "0        264.0\n1        300.0\n2        301.0\n3        132.0\n4        920.0\n         ...  \n99995    939.0\n99996    738.0\n99997    644.0\n99998    339.0\n99999    660.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([264., 300., 301., ..., 644., 339., 660.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 86615, 75824, 77789])",
                "idx": "array([ 5883,  9509, 13131, 16796, 20342, 23971, 27582, 31245, 34890,\n       38519, 42142, 45815, 49426, 53120, 56802, 60472, 64032, 67627,\n       71304, 74762, 78335, 81966, 85549, 89213, 92842, 96413])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([995, 960, 960, 961, 959, 948, 946, 955, 957, 942, 951, 951, 961,\n       960, 965, 955, 951, 954, 957, 947, 944, 954, 946, 958, 949, 954,\n       963])",
                "res": "array([960, 960, 961, 959, 948, 946, 955, 957, 942, 951, 951, 961, 960,\n       965, 955, 951, 954, 957, 947, 944, 954, 946, 958, 949, 954, 963])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    960\nb    960\nc    961\nd    959\ne    948\nf    946\ng    955\nh    957\ni    942\nj    951\nk    951\nl    961\nm    960\nn    965\no    955\np    951\nq    954\nr    957\ns    947\nt    944\nu    954\nv    946\nw    958\nx    949\ny    954\nz    963\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5ce50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c490>",
                "self.obj": "0        264.0\n1        300.0\n2        301.0\n3        132.0\n4        920.0\n         ...  \n99995    939.0\n99996    738.0\n99997    644.0\n99998    339.0\n99999    660.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([264., 300., 301., ..., 644., 339., 660.])",
                "codes": "array([ -1,  -1,  -1, ..., 991, 994, 997])",
                "sorter": "array([  103,   256,   273, ..., 27647,  8357, 85112])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    267\n     2015-08-24    244\n     2015-08-25    251\n     2015-08-26    280\n     2015-08-27    265\n                  ... \nz    2015-08-28    255\n     2015-08-29    259\n     2015-08-30    246\n     2015-08-31    253\n     2015-09-01    237\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51b50>",
                "self.obj": "0        264.0\n1        300.0\n2        301.0\n3        132.0\n4        920.0\n         ...  \n99995    939.0\n99996    738.0\n99997    644.0\n99998    339.0\n99999    660.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([264., 300., 301., ..., 644., 339., 660.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 86615, 75824, 77789])",
                "idx": "array([ 5883,  9509, 13131, 16796, 20342, 23971, 27582, 31245, 34890,\n       38519, 42142, 45815, 49426, 53120, 56802, 60472, 64032, 67627,\n       71304, 74762, 78335, 81966, 85549, 89213, 92842, 96413])",
                "inc": "array([1, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([995, 960, 960, 961, 959, 948, 946, 955, 957, 942, 951, 951, 961,\n       960, 965, 955, 951, 954, 957, 947, 944, 954, 946, 958, 949, 954,\n       963])",
                "res": "array([960, 960, 961, 959, 948, 946, 955, 957, 942, 951, 951, 961, 960,\n       965, 955, 951, 954, 957, 947, 944, 954, 946, 958, 949, 954, 963])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    960\nb    960\nc    961\nd    959\ne    948\nf    946\ng    955\nh    957\ni    942\nj    951\nk    951\nl    961\nm    960\nn    965\no    955\np    951\nq    954\nr    957\ns    947\nt    944\nu    954\nv    946\nw    958\nx    949\ny    954\nz    963\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51850>",
                "self.obj": "0        264.0\n1        300.0\n2        301.0\n3        132.0\n4        920.0\n         ...  \n99995    939.0\n99996    738.0\n99997    644.0\n99998    339.0\n99999    660.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "False",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([264., 300., 301., ..., 644., 339., 660.])",
                "codes": "array([ -1,  -1,  -1, ..., 991, 994, 997])",
                "sorter": "array([  103,   256,   273, ..., 27647,  8357, 85112])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    267\n     2015-08-24    244\n     2015-08-25    251\n     2015-08-26    280\n     2015-08-27    265\n                  ... \nz    2015-08-28    255\n     2015-08-29    259\n     2015-08-30    246\n     2015-08-31    253\n     2015-09-01    237\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5cdc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c310>",
                "self.obj": "0     7\n1     6\n2     4\n3     1\n4     3\n     ..\n95    4\n96    2\n97    5\n98    8\n99    1\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  2,  2,  2,  2,  2,\n        2,  2,  3,  3,  3,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,\n        6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  9,  9,  9, 10, 10,\n       10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14,\n       14, 14, 14, 14, 14, 15, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 19,\n       19, 20, 20, 20, 20, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24])",
                "_": "array([7, 6, 4, 1, 3, 9, 5, 0, 2, 8])",
                "val": "array([7, 6, 4, 1, 3, 1, 9, 5, 9, 4, 0, 6, 7, 7, 0, 7, 3, 5, 4, 5, 2, 0,\n       0, 3, 0, 9, 6, 4, 6, 5, 3, 5, 3, 7, 7, 3, 7, 7, 5, 4, 8, 3, 0, 3,\n       9, 8, 9, 6, 1, 6, 0, 3, 4, 1, 9, 9, 0, 8, 1, 6, 2, 1, 6, 3, 0, 8,\n       4, 8, 0, 0, 7, 0, 3, 1, 7, 2, 6, 2, 7, 9, 7, 2, 8, 2, 6, 2, 3, 1,\n       1, 7, 2, 9, 2, 1, 6, 4, 2, 5, 8, 1])",
                "codes": "array([0, 0, 0, 3, 6, 7, 8, 9, 1, 2, 0, 1, 1, 2, 3, 4, 5, 7, 7, 2, 2, 3,\n       4, 8, 3, 3, 3, 4, 4, 6, 7, 9, 4, 5, 5, 0, 2, 4, 5, 6, 7, 7, 7, 1,\n       8, 8, 0, 1, 2, 0, 3, 6, 7, 7, 3, 4, 4, 8, 8, 1, 5, 6, 0, 1, 2, 3,\n       0, 1, 1, 2, 4, 7, 8, 4, 6, 7, 8, 0, 0, 0, 1, 9, 3, 7, 5, 5, 4, 5,\n       8, 9, 9, 1, 3, 4, 0, 5, 8, 9, 6, 9])",
                "sorter": "array([ 0, 13, 36, 73, 31, 10, 85, 65,  1,  9, 33, 26, 62,  2, 88, 23, 44,\n       14, 24, 18, 66,  3,  4, 83,  5, 58, 93, 43, 63, 17, 68, 40, 32,  6,\n       25, 34, 52, 41,  8,  7, 21, 22, 50, 11, 20, 92, 12, 47, 95, 15, 87,\n       29, 42, 71, 99, 16, 51, 60, 81, 49, 46, 19, 80, 59, 27, 48, 37, 28,\n       84, 39, 30, 64, 90, 35, 38, 69, 75, 74, 78, 89, 94, 45, 53, 56, 54,\n       79, 72, 55, 77, 98, 57, 76, 61, 86, 70, 91, 96, 67, 97, 82])",
                "idx": "array([ 0,  8, 10, 19, 22, 24, 32, 35, 43, 46, 49, 54, 59, 62, 66, 73, 74,\n       77, 82, 84, 86, 90, 91, 94, 98])",
                "inc": "array([1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n       1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 2, 7, 2, 2, 5, 2, 6, 2, 3, 4, 3, 3, 4, 6, 1, 3, 3, 2, 1, 4, 1,\n       3, 4, 2])",
                "res": "array([6, 2, 7, 2, 2, 5, 2, 6, 2, 3, 4, 3, 3, 4, 6, 1, 3, 3, 2, 1, 4, 1,\n       3, 4, 2])",
                "ri": "Index(['w', 's', 'p', 'o', 'g', 'y', 'f', 't', 'j', 'e', 'd', 'v', 'i', 'u',\n       'x', 'c', 'k', 'n', 'r', 'z', 'b', 'h', 'm', 'a', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    6\ns    2\np    7\no    2\ng    2\ny    5\nf    2\nt    6\nj    2\ne    3\nd    4\nv    3\ni    3\nu    4\nx    6\nc    1\nk    3\nn    3\nr    2\nz    1\nb    4\nh    1\nm    3\na    4\nq    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcd60>",
                "self.obj": "0     7\n1     6\n2     4\n3     1\n4     3\n     ..\n95    4\n96    2\n97    5\n98    8\n99    1\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  8,  8,  9, 10, 10, 11, 12, 13,\n       13, 14, 14, 15, 16, 17, 17, 17, 18, 19, 19, 20, 21, 22, 23, 24, 24,\n       25, 26, 27, 28, 28, 29, 29, 30, 31, 32, 33, 34, 34, 35, 35, 35, 36,\n       37, 38, 38, 39, 40, 41, 41, 42, 43, 43, 44, 45, 46, 47, 47, 48, 49,\n       50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\n       67, 68, 69, 70, 71, 72, 73, 73, 74, 75, 76, 77, 78, 79, 80])",
                "_": "array([7, 6, 4, 1, 3, 9, 5, 0, 2, 8])",
                "val": "array([7, 6, 4, 1, 3, 1, 9, 5, 9, 4, 0, 6, 7, 7, 0, 7, 3, 5, 4, 5, 2, 0,\n       0, 3, 0, 9, 6, 4, 6, 5, 3, 5, 3, 7, 7, 3, 7, 7, 5, 4, 8, 3, 0, 3,\n       9, 8, 9, 6, 1, 6, 0, 3, 4, 1, 9, 9, 0, 8, 1, 6, 2, 1, 6, 3, 0, 8,\n       4, 8, 0, 0, 7, 0, 3, 1, 7, 2, 6, 2, 7, 9, 7, 2, 8, 2, 6, 2, 3, 1,\n       1, 7, 2, 9, 2, 1, 6, 4, 2, 5, 8, 1])",
                "codes": "array([0, 1, 2, 3, 4, 3, 5, 6, 2, 4, 5, 2, 7, 8, 1, 0, 0, 6, 3, 7, 0, 4,\n       3, 6, 7, 2, 5, 6, 8, 7, 7, 4, 1, 7, 5, 1, 2, 1, 4, 6, 7, 4, 0, 0,\n       4, 0, 3, 0, 1, 8, 6, 2, 3, 9, 4, 5, 0, 9, 1, 0, 3, 1, 7, 4, 3, 7,\n       5, 5, 9, 1, 8, 3, 4, 7, 9, 2, 9, 7, 0, 7, 4, 0, 8, 1, 8, 5, 8, 9,\n       8, 4, 3, 0, 1, 5, 8, 2, 8, 6, 9, 3])",
                "sorter": "array([ 0,  1,  2,  3,  4,  5,  6,  7, 52, 41,  8,  9, 10, 85, 11, 12, 13,\n       31, 88, 14, 15, 16, 93, 17, 68, 18, 46, 19, 20, 21, 22, 23, 62, 24,\n       25, 26, 27, 28, 30, 29, 42, 32, 33, 34, 35, 36, 73, 37, 84, 90, 38,\n       39, 58, 40, 43, 44, 78, 45, 47, 80, 48, 49, 50, 51, 53, 56, 54, 55,\n       57, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 71, 72, 74, 75, 76, 77,\n       79, 81, 82, 83, 86, 87, 89, 94, 91, 92, 95, 96, 97, 98, 99])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 11, 12, 14, 15, 16, 18, 20, 21,\n       22, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 41, 42, 43, 44,\n       45, 47, 50, 51, 52, 54, 55, 56, 58, 59, 61, 62, 63, 64, 66, 67, 68,\n       69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\n       86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 3, 1, 2, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 2,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, 2, 2, 1, 1, 3, 1, 2, 1, 1,\n       1, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 2,\n       1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 81",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-31    1\ns    2015-09-01    1\np    2015-08-28    1\no    2015-08-29    1\ng    2015-08-27    1\n                  ..\ne    2015-08-25    1\na    2015-08-31    1\nq    2015-08-29    1\nb    2015-08-31    1\nv    2015-08-30    1\nName: julie, Length: 81, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84070>",
                "self.obj": "0     7.0\n1     6.0\n2     4.0\n3     1.0\n4     3.0\n     ... \n95    4.0\n96    2.0\n97    5.0\n98    8.0\n99    1.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  4,  4,  4,\n        4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8,  8,  9,  9,\n        9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n       13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 17, 17,\n       18, 18, 19, 19, 19, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23])",
                "_": "array([7., 6., 4., 1., 3., 9., 0., 5., 2., 8.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  2,  4,  4,  6, -1, -1,  0,  0,  0,  3,  6,  7, -1,  0,  1,\n        2,  3,  4,  5,  6,  6, -1,  3, -1,  4,  3,  3,  3,  4,  4,  6,  7,\n        9,  4,  5,  5, -1, -1,  0,  4,  6,  6,  6, -1,  1,  8,  8, -1,  0,\n        2,  0,  3,  6,  6,  7,  3,  4,  4,  8,  8, -1,  1,  7, -1,  0,  1,\n        3, -1, -1, -1,  0,  2,  4,  8,  7,  8, -1,  0,  0,  0,  1,  3,  6,\n        5,  5,  4,  5,  8,  9,  9,  1,  3,  0,  5,  8,  9,  7,  9])",
                "sorter": "array([ 1, 18, 52, 35, 86, 69, 65, 85,  0, 13, 36, 73, 10, 31, 26, 33, 62,\n        2, 88, 23, 44, 14, 24, 66,  3, 83,  4,  5, 58, 93, 43, 63, 68, 17,\n       40, 32,  6, 25,  7,  8, 34, 41, 21, 22, 50,  9, 11, 20, 92, 47, 12,\n       95, 15, 87, 42, 71, 29, 99, 16, 51, 60, 81, 46, 49, 19, 27, 80, 59,\n       48, 28, 64, 84, 37, 39, 30, 90, 38, 75, 45, 74, 78, 89, 94, 53, 56,\n       54, 79, 72, 55, 77, 98, 57, 76, 61, 70, 91, 96, 67, 97, 82])",
                "idx": "array([ 6, 14, 23, 25, 27, 35, 38, 45, 46, 49, 52, 57, 62, 65, 69, 76, 78,\n       83, 85, 87, 91, 92, 94, 98])",
                "inc": "array([1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,\n       0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0,\n       1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 4, 7, 1, 1, 5, 2, 3, 0, 2, 2, 4, 3, 2, 3, 4, 2, 2, 2, 1, 4, 1,\n       2, 4, 2])",
                "res": "array([4, 7, 1, 1, 5, 2, 3, 0, 2, 2, 4, 3, 2, 3, 4, 2, 2, 2, 1, 4, 1, 2,\n       4, 2])",
                "ri": "Index(['w', 'p', 'o', 'g', 'y', 'f', 't', 's', 'j', 'e', 'd', 'v', 'i', 'u',\n       'x', 'k', 'n', 'r', 'z', 'b', 'h', 'm', 'a', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    4\np    7\no    1\ng    1\ny    5\nf    2\nt    3\ns    0\nj    2\ne    2\nd    4\nv    3\ni    2\nu    3\nx    4\nk    2\nn    2\nr    2\nz    1\nb    4\nh    1\nm    2\na    4\nq    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84a60>",
                "self.obj": "0     7.0\n1     6.0\n2     4.0\n3     1.0\n4     3.0\n     ... \n95    4.0\n96    2.0\n97    5.0\n98    8.0\n99    1.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  8,  9, 10, 11, 11, 12, 12, 13, 14, 15, 15, 15, 16, 16, 17,\n       18, 19, 20, 21, 21, 22, 23, 24, 25, 25, 26, 26, 27, 28, 29, 30, 30,\n       31, 31, 31, 32, 33, 34, 35, 36, 36, 37, 38, 38, 39, 40, 41, 42, 42,\n       43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72, 73])",
                "_": "array([7., 6., 4., 1., 3., 9., 0., 5., 2., 8.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  2,  3,  4,  4,  6,  8,  9,  0,  2,  4,  3,  5, -1, -1,  4,\n       -1, -1,  6,  1,  0,  0,  7,  3,  6,  0,  4,  3,  6,  7, -1,  7,  8,\n        6,  6,  4,  1,  6,  5, -1, -1, -1,  4,  6,  7,  4,  0,  0,  0,  3,\n       -1,  0,  8,  7,  2,  4,  5, -1,  0, -1,  0,  3,  1,  6,  4,  3,  6,\n        5,  5,  9,  3,  1,  8,  3,  4, -1, -1, -1,  9,  0,  6,  4,  0,  8,\n        1,  5,  8,  9, -1,  3,  0,  1,  5,  8,  2,  8,  7,  9,  3])",
                "sorter": "array([ 1, 18, 52,  3, 35, 86, 69, 77, 40,  0,  2,  4,  5,  6,  7,  8, 41,\n        9, 85, 10, 11, 12, 13, 31, 88, 14, 15, 16, 93, 68, 17, 46, 19, 20,\n       21, 22, 23, 62, 24, 25, 26, 27, 28, 30, 42, 29, 32, 33, 34, 36, 73,\n       84, 37, 90, 38, 39, 43, 44, 45, 78, 47, 80, 48, 49, 50, 51, 53, 56,\n       54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75,\n       76, 79, 81, 82, 83, 87, 89, 94, 91, 92, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 26, 27, 28, 31,\n       33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 54, 55,\n       56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1,\n       2, 1, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 2, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2,\n       1, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       2, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-31    1\np    2015-08-28    1\ng    2015-08-27    1\ny    2015-08-28    1\nf    2015-08-28    1\n                  ..\ne    2015-08-25    1\na    2015-08-31    1\nq    2015-08-29    1\nb    2015-08-31    1\nv    2015-08-30    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddcf70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc1f0>",
                "self.obj": "0     7.0\n1     6.0\n2     4.0\n3     1.0\n4     3.0\n     ... \n95    4.0\n96    2.0\n97    5.0\n98    8.0\n99    1.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,\n        1,  1,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  4,  4,  4,\n        4,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  8,  8,  8,  9,  9,\n        9, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13,\n       13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 16, 16, 16, 16, 16, 17, 17,\n       18, 18, 19, 19, 19, 19, 20, 21, 21, 22, 22, 22, 22, 23, 23])",
                "_": "array([7., 6., 4., 1., 3., 9., 0., 5., 2., 8.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  2,  4,  4,  6, -1, -1,  0,  0,  0,  3,  6,  7, -1,  0,  1,\n        2,  3,  4,  5,  6,  6, -1,  3, -1,  4,  3,  3,  3,  4,  4,  6,  7,\n        9,  4,  5,  5, -1, -1,  0,  4,  6,  6,  6, -1,  1,  8,  8, -1,  0,\n        2,  0,  3,  6,  6,  7,  3,  4,  4,  8,  8, -1,  1,  7, -1,  0,  1,\n        3, -1, -1, -1,  0,  2,  4,  8,  7,  8, -1,  0,  0,  0,  1,  3,  6,\n        5,  5,  4,  5,  8,  9,  9,  1,  3,  0,  5,  8,  9,  7,  9])",
                "sorter": "array([ 1, 18, 52, 35, 86, 69, 65, 85,  0, 13, 36, 73, 10, 31, 26, 33, 62,\n        2, 88, 23, 44, 14, 24, 66,  3, 83,  4,  5, 58, 93, 43, 63, 68, 17,\n       40, 32,  6, 25,  7,  8, 34, 41, 21, 22, 50,  9, 11, 20, 92, 47, 12,\n       95, 15, 87, 42, 71, 29, 99, 16, 51, 60, 81, 46, 49, 19, 27, 80, 59,\n       48, 28, 64, 84, 37, 39, 30, 90, 38, 75, 45, 74, 78, 89, 94, 53, 56,\n       54, 79, 72, 55, 77, 98, 57, 76, 61, 70, 91, 96, 67, 97, 82])",
                "idx": "array([ 6, 14, 23, 25, 27, 35, 38, 45, 46, 49, 52, 57, 62, 65, 69, 76, 78,\n       83, 85, 87, 91, 92, 94, 98])",
                "inc": "array([1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,\n       0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0,\n       0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0,\n       1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 4, 7, 1, 1, 5, 2, 3, 0, 2, 2, 4, 3, 2, 3, 4, 2, 2, 2, 1, 4, 1,\n       2, 4, 2])",
                "res": "array([4, 7, 1, 1, 5, 2, 3, 0, 2, 2, 4, 3, 2, 3, 4, 2, 2, 2, 1, 4, 1, 2,\n       4, 2])",
                "ri": "Index(['w', 'p', 'o', 'g', 'y', 'f', 't', 's', 'j', 'e', 'd', 'v', 'i', 'u',\n       'x', 'k', 'n', 'r', 'z', 'b', 'h', 'm', 'a', 'q'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nw    4\np    7\no    1\ng    1\ny    5\nf    2\nt    3\ns    0\nj    2\ne    2\nd    4\nv    3\ni    2\nu    3\nx    4\nk    2\nn    2\nr    2\nz    1\nb    4\nh    1\nm    2\na    4\nq    2\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c3d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c6a0>",
                "self.obj": "0     7.0\n1     6.0\n2     4.0\n3     1.0\n4     3.0\n     ... \n95    4.0\n96    2.0\n97    5.0\n98    8.0\n99    1.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  6,\n        7,  8,  8,  9, 10, 11, 11, 12, 12, 13, 14, 15, 15, 15, 16, 16, 17,\n       18, 19, 20, 21, 21, 22, 23, 24, 25, 25, 26, 26, 27, 28, 29, 30, 30,\n       31, 31, 31, 32, 33, 34, 35, 36, 36, 37, 38, 38, 39, 40, 41, 42, 42,\n       43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n       60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72, 73])",
                "_": "array([7., 6., 4., 1., 3., 9., 0., 5., 2., 8.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  2,  3,  4,  4,  6,  8,  9,  0,  2,  4,  3,  5, -1, -1,  4,\n       -1, -1,  6,  1,  0,  0,  7,  3,  6,  0,  4,  3,  6,  7, -1,  7,  8,\n        6,  6,  4,  1,  6,  5, -1, -1, -1,  4,  6,  7,  4,  0,  0,  0,  3,\n       -1,  0,  8,  7,  2,  4,  5, -1,  0, -1,  0,  3,  1,  6,  4,  3,  6,\n        5,  5,  9,  3,  1,  8,  3,  4, -1, -1, -1,  9,  0,  6,  4,  0,  8,\n        1,  5,  8,  9, -1,  3,  0,  1,  5,  8,  2,  8,  7,  9,  3])",
                "sorter": "array([ 1, 18, 52,  3, 35, 86, 69, 77, 40,  0,  2,  4,  5,  6,  7,  8, 41,\n        9, 85, 10, 11, 12, 13, 31, 88, 14, 15, 16, 93, 68, 17, 46, 19, 20,\n       21, 22, 23, 62, 24, 25, 26, 27, 28, 30, 42, 29, 32, 33, 34, 36, 73,\n       84, 37, 90, 38, 39, 43, 44, 45, 78, 47, 80, 48, 49, 50, 51, 53, 56,\n       54, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 70, 71, 72, 74, 75,\n       76, 79, 81, 82, 83, 87, 89, 94, 91, 92, 95, 96, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 24, 26, 27, 28, 31,\n       33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 54, 55,\n       56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75,\n       76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1,\n       2, 1, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 2, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 3, 1, 1, 1, 1, 1, 2,\n       1, 0, 0, 1, 2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       2, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nw    2015-08-31    1\np    2015-08-28    1\ng    2015-08-27    1\ny    2015-08-28    1\nf    2015-08-28    1\n                  ..\ne    2015-08-25    1\na    2015-08-31    1\nq    2015-08-29    1\nb    2015-08-31    1\nv    2015-08-30    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84460>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84a60>",
                "self.obj": "0      9\n1      5\n2      2\n3      6\n4      8\n      ..\n995    3\n996    0\n997    5\n998    5\n999    8\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([9, 5, 2, 6, 8, 1, 7, 0, 4, 3])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  39,  85, 140, 191, 233, 277, 310, 356, 384, 422, 457, 498,\n       530, 566, 598, 644, 681, 710, 751, 777, 820, 860, 891, 928, 972])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10, 10, 10,  9, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10,  9, 10, 10, 10, 10, 10,  9])",
                "res": "array([10, 10, 10, 10, 10,  9, 10,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10,  9, 10, 10, 10, 10, 10,  9])",
                "ri": "Index(['m', 'f', 'q', 't', 'i', 'g', 'l', 'j', 'o', 'c', 'r', 'b', 'e', 'a',\n       'y', 'p', 'k', 'x', 'd', 'h', 'u', 'n', 'z', 'w', 'v', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    10\nf    10\nq    10\nt    10\ni    10\ng     9\nl    10\nj     9\no     9\nc    10\nr    10\nb    10\ne    10\na    10\ny    10\np    10\nk    10\nx    10\nd    10\nh     9\nu    10\nn    10\nz    10\nw    10\nv    10\ns     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56ee0>",
                "self.obj": "0      9\n1      5\n2      2\n3      6\n4      8\n      ..\n995    3\n996    0\n997    5\n998    5\n999    8\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([9, 5, 2, 6, 8, 1, 7, 0, 4, 3])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 254",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 254",
                "res": "array of shape 254",
                "ri": "array of shape 254",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-26    5\nf    2015-08-23    7\nq    2015-08-31    6\nt    2015-08-27    5\ni    2015-08-25    5\n                  ..\np    2015-08-30    1\nb    2015-09-01    1\nm    2015-09-01    1\nc    2015-08-31    1\nu    2015-08-26    1\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c091f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09460>",
                "self.obj": "0      9.0\n1      5.0\n2      2.0\n3      6.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    8.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([9., 5., 2., 6., 8., 1., 0., 7., 4., 3.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  95, 148, 196, 236, 278, 322, 352, 394, 418, 454, 489, 529,\n       560, 593, 624, 668, 699, 726, 764, 789, 828, 867, 897, 933, 975])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10, 10, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,\n        9, 10,  9,  8, 10, 10, 10, 10, 10,  9])",
                "res": "array([10, 10, 10, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,  9,\n       10,  9,  8, 10, 10, 10, 10, 10,  9])",
                "ri": "Index(['m', 'q', 't', 'i', 'g', 'f', 'l', 'j', 'o', 'c', 'r', 'b', 'e', 'a',\n       'y', 'p', 'k', 'x', 'd', 'h', 'u', 'n', 'z', 'w', 'v', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    10\nq    10\nt    10\ni    10\ng     9\nf    10\nl     9\nj     9\no     9\nc    10\nr    10\nb    10\ne    10\na    10\ny    10\np    10\nk     9\nx    10\nd     9\nh     8\nu    10\nn    10\nz    10\nw    10\nv    10\ns     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09c40>",
                "self.obj": "0      9.0\n1      5.0\n2      2.0\n3      6.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    8.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([9., 5., 2., 6., 8., 1., 0., 7., 4., 3.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 254",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 254",
                "ri": "array of shape 254",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-26    4\nq    2015-08-31    3\ni    2015-08-25    3\ng    2015-08-24    4\nf    2015-08-25    4\n                  ..\np    2015-08-30    1\nb    2015-09-01    1\nm    2015-09-01    1\nc    2015-08-31    1\nu    2015-08-26    0\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d514f0>",
                "self.obj": "0      9.0\n1      5.0\n2      2.0\n3      6.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    8.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([9., 5., 2., 6., 8., 1., 0., 7., 4., 3.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  95, 148, 196, 236, 278, 322, 352, 394, 418, 454, 489, 529,\n       560, 593, 624, 668, 699, 726, 764, 789, 828, 867, 897, 933, 975])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10, 10, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,\n        9, 10,  9,  8, 10, 10, 10, 10, 10,  9])",
                "res": "array([10, 10, 10, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10,  9,\n       10,  9,  8, 10, 10, 10, 10, 10,  9])",
                "ri": "Index(['m', 'q', 't', 'i', 'g', 'f', 'l', 'j', 'o', 'c', 'r', 'b', 'e', 'a',\n       'y', 'p', 'k', 'x', 'd', 'h', 'u', 'n', 'z', 'w', 'v', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nm    10\nq    10\nt    10\ni    10\ng     9\nf    10\nl     9\nj     9\no     9\nc    10\nr    10\nb    10\ne    10\na    10\ny    10\np    10\nk     9\nx    10\nd     9\nh     8\nu    10\nn    10\nz    10\nw    10\nv    10\ns     9\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d515e0>",
                "self.obj": "0      9.0\n1      5.0\n2      2.0\n3      6.0\n4      8.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    5.0\n999    8.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([9., 5., 2., 6., 8., 1., 0., 7., 4., 3.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 254",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 254",
                "ri": "array of shape 254",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nm    2015-08-26    4\nq    2015-08-31    3\ni    2015-08-25    3\ng    2015-08-24    4\nf    2015-08-25    4\n                  ..\np    2015-08-30    1\nb    2015-09-01    1\nm    2015-09-01    1\nc    2015-08-31    1\nu    2015-08-26    0\nName: julie, Length: 254, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c098b0>",
                "self.obj": "0       8\n1       0\n2       6\n3       7\n4       0\n       ..\n9995    3\n9996    6\n9997    3\n9998    1\n9999    9\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([8, 0, 6, 7, 1, 4, 3, 9, 5, 2])",
                "val": "array([8, 0, 6, ..., 3, 1, 9])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0,   13,  253, ..., 8105, 8873, 9031])",
                "idx": "array([   0,  420,  787, 1139, 1507, 1884, 2260, 2611, 3030, 3425, 3816,\n       4190, 4580, 4977, 5347, 5749, 6129, 6513, 6911, 7282, 7649, 8004,\n       8393, 8828, 9205, 9615])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['j', 'y', 'a', 't', 'g', 'n', 'r', 'q', 'h', 'x', 'l', 'i', 'c', 'd',\n       'e', 'm', 'k', 'b', 'v', 'u', 'f', 'z', 'p', 'o', 's', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    10\ny    10\na    10\nt    10\ng    10\nn    10\nr    10\nq    10\nh    10\nx    10\nl    10\ni    10\nc    10\nd    10\ne    10\nm    10\nk    10\nb    10\nv    10\nu    10\nf    10\nz    10\np    10\no    10\ns    10\nw    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d085e0>",
                "self.obj": "0       8\n1       0\n2       6\n3       7\n4       0\n       ..\n9995    3\n9996    6\n9997    3\n9998    1\n9999    9\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([8, 0, 6, 7, 1, 4, 3, 9, 5, 2])",
                "val": "array([8, 0, 6, ..., 3, 1, 9])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   0, 1313, 1725, ..., 5653, 6124, 6723])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-29    10\ny    2015-08-27    10\na    2015-08-31     9\nt    2015-08-30    10\ng    2015-09-01    10\n                   ..\ne    2015-08-31    10\ng    2015-08-29    10\nw    2015-08-28    10\nh    2015-08-27    10\nm    2015-08-24    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56bb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56fd0>",
                "self.obj": "0       8.0\n1       0.0\n2       6.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    6.0\n9997    3.0\n9998    1.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([8., 0., 6., 7., 1., 4., 3., 9., 5., 2.])",
                "val": "array([8., 0., 6., ..., 3., 1., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 8105, 8873, 9031])",
                "idx": "array([ 589,  981, 1309, 1667, 2024, 2381, 2710, 3104, 3475, 3844, 4191,\n       4557, 4909, 5288, 5634, 5987, 6342, 6722, 7069, 7390, 7738, 8108,\n       8521, 8892, 9250, 9634])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['j', 'a', 't', 'g', 'n', 'r', 'q', 'h', 'x', 'l', 'i', 'd', 'e', 'y',\n       'm', 'k', 'b', 'u', 'f', 'v', 'z', 'p', 'c', 'o', 's', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    10\na    10\nt    10\ng    10\nn    10\nr    10\nq    10\nh    10\nx    10\nl    10\ni    10\nd    10\ne    10\ny    10\nm    10\nk    10\nb    10\nu    10\nf    10\nv    10\nz    10\np    10\nc    10\no    10\ns    10\nw    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d568e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56760>",
                "self.obj": "0       8.0\n1       0.0\n2       6.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    6.0\n9997    3.0\n9998    1.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([8., 0., 6., 7., 1., 4., 3., 9., 5., 2.])",
                "val": "array([8., 0., 6., ..., 3., 1., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 5653, 6124, 6723])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-29    10\na    2015-08-31     9\ng    2015-09-01    10\nn    2015-08-29     9\nr    2015-08-29     9\n                   ..\ng    2015-08-29    10\nw    2015-08-28    10\nm    2015-08-31    10\nh    2015-08-27    10\nm    2015-08-24     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d081c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08dc0>",
                "self.obj": "0       8.0\n1       0.0\n2       6.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    6.0\n9997    3.0\n9998    1.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([8., 0., 6., 7., 1., 4., 3., 9., 5., 2.])",
                "val": "array([8., 0., 6., ..., 3., 1., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 8105, 8873, 9031])",
                "idx": "array([ 589,  981, 1309, 1667, 2024, 2381, 2710, 3104, 3475, 3844, 4191,\n       4557, 4909, 5288, 5634, 5987, 6342, 6722, 7069, 7390, 7738, 8108,\n       8521, 8892, 9250, 9634])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['j', 'a', 't', 'g', 'n', 'r', 'q', 'h', 'x', 'l', 'i', 'd', 'e', 'y',\n       'm', 'k', 'b', 'u', 'f', 'v', 'z', 'p', 'c', 'o', 's', 'w'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nj    10\na    10\nt    10\ng    10\nn    10\nr    10\nq    10\nh    10\nx    10\nl    10\ni    10\nd    10\ne    10\ny    10\nm    10\nk    10\nb    10\nu    10\nf    10\nv    10\nz    10\np    10\nc    10\no    10\ns    10\nw    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08d60>",
                "self.obj": "0       8.0\n1       0.0\n2       6.0\n3       7.0\n4       0.0\n       ... \n9995    3.0\n9996    6.0\n9997    3.0\n9998    1.0\n9999    9.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([8., 0., 6., 7., 1., 4., 3., 9., 5., 2.])",
                "val": "array([8., 0., 6., ..., 3., 1., 9.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 5653, 6124, 6723])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nj    2015-08-29    10\na    2015-08-31     9\ng    2015-09-01    10\nn    2015-08-29     9\nr    2015-08-29     9\n                   ..\ng    2015-08-29    10\nw    2015-08-28    10\nm    2015-08-31    10\nh    2015-08-27    10\nm    2015-08-24     9\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40f10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40fd0>",
                "self.obj": "0        4\n1        7\n2        9\n3        6\n4        3\n        ..\n99995    5\n99996    0\n99997    3\n99998    7\n99999    3\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([4, 7, 9, 6, 3, 8, 1, 2, 0, 5])",
                "val": "array([4, 7, 9, ..., 3, 7, 3])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,     6,   242, ..., 99507, 99893, 99971])",
                "idx": "array([    0,  3885,  7701, 11609, 15436, 19275, 23205, 26978, 30759,\n       34608, 38515, 42256, 46077, 49915, 53717, 57573, 61475, 65316,\n       69279, 73154, 76967, 80770, 84526, 88394, 92323, 96128])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['r', 'v', 'y', 'x', 'i', 'm', 'g', 'w', 'l', 'c', 'd', 'e', 't', 'f',\n       'b', 'j', 'k', 'o', 'a', 'p', 'h', 'q', 'u', 'n', 'z', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    10\nv    10\ny    10\nx    10\ni    10\nm    10\ng    10\nw    10\nl    10\nc    10\nd    10\ne    10\nt    10\nf    10\nb    10\nj    10\nk    10\no    10\na    10\np    10\nh    10\nq    10\nu    10\nn    10\nz    10\ns    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40a60>",
                "self.obj": "0        4\n1        7\n2        9\n3        6\n4        3\n        ..\n99995    5\n99996    0\n99997    3\n99998    7\n99999    3\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([4, 7, 9, 6, 3, 8, 1, 2, 0, 5])",
                "val": "array([4, 7, 9, ..., 3, 7, 3])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([    0,   242,  1636, ..., 92025, 94197, 97341])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    10\nv    2015-08-24    10\ny    2015-09-01    10\nx    2015-08-31    10\n     2015-08-27    10\n                   ..\nq    2015-08-28    10\nm    2015-08-24    10\nf    2015-08-23    10\nr    2015-08-26    10\np    2015-08-23    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09b80>",
                "self.obj": "0        4.0\n1        7.0\n2        9.0\n3        6.0\n4        3.0\n        ... \n99995    5.0\n99996    0.0\n99997    3.0\n99998    7.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([4., 7., 9., 6., 3., 8., 2., 0., 5., 1.])",
                "val": "array([4., 7., 9., ..., 3., 7., 3.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98388, 98798, 99420])",
                "idx": "array([ 5883,  9531, 13215, 16816, 20413, 24025, 27734, 31282, 34847,\n       38467, 42132, 45650, 49248, 52849, 56429, 60077, 63753, 67360,\n       71076, 74719, 78294, 81866, 85386, 89039, 92752, 96358])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['r', 'y', 'x', 'v', 'i', 'm', 'g', 'w', 'l', 'c', 'd', 'e', 't', 'f',\n       'b', 'j', 'k', 'o', 'a', 'p', 'h', 'q', 'u', 'n', 'z', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    10\ny    10\nx    10\nv    10\ni    10\nm    10\ng    10\nw    10\nl    10\nc    10\nd    10\ne    10\nt    10\nf    10\nb    10\nj    10\nk    10\no    10\na    10\np    10\nh    10\nq    10\nu    10\nn    10\nz    10\ns    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c094f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09cd0>",
                "self.obj": "0        4.0\n1        7.0\n2        9.0\n3        6.0\n4        3.0\n        ... \n99995    5.0\n99996    0.0\n99997    3.0\n99998    7.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([4., 7., 9., 6., 3., 8., 2., 0., 5., 1.])",
                "val": "array([4., 7., 9., ..., 3., 7., 3.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 83125, 92878, 94767])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    10\ny    2015-09-01    10\nx    2015-08-27    10\nv    2015-08-25    10\nr    2015-08-27    10\n                   ..\nf    2015-08-23    10\nl    2015-09-01    10\nr    2015-08-26    10\nc    2015-08-26    10\np    2015-08-23    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d511f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51e20>",
                "self.obj": "0        4.0\n1        7.0\n2        9.0\n3        6.0\n4        3.0\n        ... \n99995    5.0\n99996    0.0\n99997    3.0\n99998    7.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([4., 7., 9., 6., 3., 8., 2., 0., 5., 1.])",
                "val": "array([4., 7., 9., ..., 3., 7., 3.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 98388, 98798, 99420])",
                "idx": "array([ 5883,  9531, 13215, 16816, 20413, 24025, 27734, 31282, 34847,\n       38467, 42132, 45650, 49248, 52849, 56429, 60077, 63753, 67360,\n       71076, 74719, 78294, 81866, 85386, 89039, 92752, 96358])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['r', 'y', 'x', 'v', 'i', 'm', 'g', 'w', 'l', 'c', 'd', 'e', 't', 'f',\n       'b', 'j', 'k', 'o', 'a', 'p', 'h', 'q', 'u', 'n', 'z', 's'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nr    10\ny    10\nx    10\nv    10\ni    10\nm    10\ng    10\nw    10\nl    10\nc    10\nd    10\ne    10\nt    10\nf    10\nb    10\nj    10\nk    10\no    10\na    10\np    10\nh    10\nq    10\nu    10\nn    10\nz    10\ns    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51ee0>",
                "self.obj": "0        4.0\n1        7.0\n2        9.0\n3        6.0\n4        3.0\n        ... \n99995    5.0\n99996    0.0\n99997    3.0\n99998    7.0\n99999    3.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([4., 7., 9., 6., 3., 8., 2., 0., 5., 1.])",
                "val": "array([4., 7., 9., ..., 3., 7., 3.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 83125, 92878, 94767])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nr    2015-09-01    10\ny    2015-09-01    10\nx    2015-08-27    10\nv    2015-08-25    10\nr    2015-08-27    10\n                   ..\nf    2015-08-23    10\nl    2015-09-01    10\nr    2015-08-26    10\nc    2015-08-26    10\np    2015-08-23    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d087c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08eb0>",
                "self.obj": "0     78\n1     70\n2     34\n3     97\n4     98\n      ..\n95    60\n96    20\n97    50\n98     7\n99    13\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  1,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,\n        4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,\n        7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 10, 10, 11, 11, 11, 12,\n       12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14,\n       15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19, 19,\n       19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 23])",
                "_": "array([78, 70, 34, 97, 98, 71, 32, 21, 62, 85,  8, 28, 90, 53, 69, 42,  2,\n       24, 75, 43,  3,  0, 29, 33, 47, 39, 60, 13, 41, 16, 19, 65, 17, 44,\n       93, 50, 15,  1, 91, 95, 49, 68, 87, 73, 55, 14, 30, 11, 82, 67, 63,\n        4, 36, 31, 52, 66, 22, 61, 10, 23,  9, 20,  7])",
                "val": "array([78, 70, 34, 97, 98, 71, 32, 21, 62, 85, 98,  8, 28, 90, 53, 69, 42,\n        2, 24, 24, 75, 43, 97,  3,  0, 29, 33, 47, 39, 60, 13, 41, 16, 19,\n       65, 17, 44, 69, 65, 93, 50, 15, 13, 15, 24,  1, 91, 24, 95, 49, 68,\n       87, 33, 13, 73, 73, 55, 98, 47, 98, 14, 47, 30, 11, 82, 24, 67, 53,\n       63, 30,  4, 53, 36, 63, 29, 91,  2, 31, 63, 52, 32, 66, 22, 61, 10,\n       41, 24, 23, 44, 63, 10, 55,  9, 71, 14, 60, 20, 50,  7, 13])",
                "codes": "array([ 0, 23,  1,  9, 25, 39, 44, 53, 61,  2, 36,  3,  5,  4, 17, 22, 26,\n       27, 28, 30, 32,  6, 17, 20, 26, 33, 41, 42,  4,  5,  7, 13, 58,  8,\n       24, 24, 46, 49, 62,  4, 10, 45, 50, 11, 58, 12, 27, 13, 21, 50,  4,\n       14, 14, 27, 43, 50, 50,  3, 15, 17, 46, 60, 13, 16, 19, 37, 43, 44,\n       17, 18, 23, 24, 29, 16, 22, 28, 35, 56, 59, 31, 54, 17, 17, 33, 36,\n       38, 55,  6, 31, 34, 35, 38, 40, 47, 48, 51, 52, 27, 57, 45])",
                "sorter": "array([ 0, 52,  1,  9, 28, 48, 91, 77, 96,  2, 43,  3,  5,  4, 44, 25, 29,\n       30, 85, 33, 35,  6, 18, 23, 95, 88, 50, 51, 10, 93,  7, 71, 84,  8,\n       27, 61, 69, 66, 98, 57, 11, 94, 78, 12, 90, 13, 99, 14, 24, 68, 59,\n       15, 37, 42, 55, 73, 89, 22, 16, 65, 62, 92, 67, 17, 21, 45, 54, 56,\n       19, 20, 26, 58, 32, 76, 74, 31, 97, 82, 87, 34, 79, 47, 86, 36, 41,\n       75, 81, 80, 38, 39, 40, 46, 49, 63, 64, 70, 72, 53, 83, 60])",
                "idx": "array([ 0,  2,  9, 11, 13, 21, 28, 33, 39, 43, 45, 47, 50, 57, 62, 68, 69,\n       73, 79, 81, 87, 92, 97, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 7, 2, 2, 8, 7, 5, 5, 4, 2, 2, 3, 5, 5, 6, 1, 4, 6, 2, 5, 5, 5,\n       2, 1])",
                "res": "array([2, 7, 2, 2, 8, 7, 5, 5, 4, 2, 2, 3, 5, 5, 6, 1, 4, 6, 2, 5, 5, 5,\n       2, 1])",
                "ri": "Index(['y', 'p', 'w', 't', 'v', 'x', 'b', 'l', 'j', 'f', 'r', 'i', 'u', 'a',\n       'o', 'c', 'm', 'g', 's', 'q', 'z', 'k', 'h', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    2\np    7\nw    2\nt    2\nv    8\nx    7\nb    5\nl    5\nj    4\nf    2\nr    2\ni    3\nu    5\na    5\no    6\nc    1\nm    4\ng    6\ns    2\nq    5\nz    5\nk    5\nh    2\nn    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a8e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a310>",
                "self.obj": "0     78\n1     70\n2     34\n3     97\n4     98\n      ..\n95    60\n96    20\n97    50\n98     7\n99    13\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  2,  3,  4,  4,  4,  5,  6,  6,  7,  8,  8,  9,  9,\n       10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 18, 19, 20, 21, 22, 23, 23,\n       24, 25, 26, 27, 27, 28, 29, 30, 31, 32, 33, 34, 34, 34, 35, 35, 35,\n       36, 37, 38, 39, 40, 41, 42, 42, 43, 43, 44, 45, 45, 46, 47, 48, 49,\n       50, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64,\n       64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])",
                "_": "array([78, 70, 34, 97, 98, 71, 32, 21, 62, 85,  8, 28, 90, 53, 69, 42,  2,\n       24, 75, 43,  3,  0, 29, 33, 47, 39, 60, 13, 41, 16, 19, 65, 17, 44,\n       93, 50, 15,  1, 91, 95, 49, 68, 87, 73, 55, 14, 30, 11, 82, 67, 63,\n        4, 36, 31, 52, 66, 22, 61, 10, 23,  9, 20,  7])",
                "val": "array([78, 70, 34, 97, 98, 71, 32, 21, 62, 85, 98,  8, 28, 90, 53, 69, 42,\n        2, 24, 24, 75, 43, 97,  3,  0, 29, 33, 47, 39, 60, 13, 41, 16, 19,\n       65, 17, 44, 69, 65, 93, 50, 15, 13, 15, 24,  1, 91, 24, 95, 49, 68,\n       87, 33, 13, 73, 73, 55, 98, 47, 98, 14, 47, 30, 11, 82, 24, 67, 53,\n       63, 30,  4, 53, 36, 63, 29, 91,  2, 31, 63, 52, 32, 66, 22, 61, 10,\n       41, 24, 23, 44, 63, 10, 55,  9, 71, 14, 60, 20, 50,  7, 13])",
                "codes": "array([ 0, 23,  1, 53,  2,  3,  4, 26, 30,  5,  6, 33,  7,  8, 24,  9, 39,\n        4, 10, 11, 12, 13, 14, 15, 13, 16, 17, 26, 17, 18, 19,  3, 20, 42,\n       21, 22, 23, 25, 61, 27, 28, 29, 31, 32, 33, 14, 50, 50, 31, 34, 35,\n       36, 27, 36, 17, 37, 38, 17, 55, 40, 48, 41, 27, 57, 43, 43, 44,  4,\n       24,  4, 45, 24, 17, 46, 47, 49, 50, 46, 51, 13, 52, 16, 22, 38, 45,\n       50, 54,  6, 56, 58, 28, 17, 59, 58, 44, 60,  5, 35, 62, 27])",
                "sorter": "array([ 0, 52,  1, 77,  2,  3,  4, 29, 33,  5,  6, 88,  7,  8, 27,  9, 48,\n       10, 11, 12, 13, 14, 15, 16, 67, 17, 18, 95, 19, 20, 21, 22, 23, 51,\n       24, 25, 26, 28, 96, 30, 31, 32, 34, 35, 36, 37, 73, 89, 38, 39, 40,\n       41, 42, 43, 44, 45, 46, 47, 81, 49, 64, 50, 53, 83, 54, 55, 56, 57,\n       58, 59, 60, 61, 65, 62, 63, 66, 68, 69, 70, 71, 72, 76, 74, 75, 94,\n       78, 79, 80, 82, 84, 85, 86, 87, 90, 91, 92, 93, 97, 98, 99])",
                "idx": "array([ 0,  2,  4,  5,  6,  9, 10, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23,\n       24, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44,\n       45, 48, 51, 52, 53, 54, 55, 56, 57, 59, 61, 62, 64, 65, 66, 67, 68,\n       69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88,\n       89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 2, 1, 1, 3, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 2, 1, 1, 3, 1, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1,\n       1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 2, 2,\n       1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 79",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-23    2\np    2015-08-24    2\nw    2015-08-25    1\nt    2015-08-28    1\nv    2015-08-28    3\n                  ..\na    2015-08-30    1\nb    2015-08-29    1\ng    2015-08-23    1\nl    2015-08-31    1\nr    2015-08-26    1\nName: julie, Length: 79, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0c40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0880>",
                "self.obj": "0     78.0\n1     70.0\n2     34.0\n3     97.0\n4     98.0\n      ... \n95    60.0\n96    20.0\n97    50.0\n98     7.0\n99    13.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,\n        3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 10, 10, 11, 11, 11,\n       12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14,\n       14, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19,\n       19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 23])",
                "_": "array([78., 70., 34., 97., 98., 71., 32.,  8., 28., 90., 53., 69., 42.,\n        2., 24., 75., 43.,  3.,  0., 29., 60., 13., 41., 16., 19., 65.,\n       17., 44., 93., 50., 15., 95., 49., 68., 87., 33., 73., 55., 47.,\n       14., 30., 11., 63.,  4., 36., 91., 31., 52., 66., 22., 23., 10.,\n        9., 20.,  7.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 14, 14, 26, 35, 40,  0,  2, 30,  3,  5, -1,  4, 14, 19, 20, 21,\n       24,  6, 17, 20, 27, 33, 34, -1, -1,  4,  5, 10, -1, -1, -1, 38, 54,\n       -1, -1, 31, 37, 46, 53,  4,  7, 39, 42,  8, 51,  9, 21, 10, 18, 42,\n        4, 11, 11, 21, 36, 42, 42, -1,  3, 12, 40, 52, -1, 10, 13, 16, 36,\n       37, 14, -1, 15, 23, 38, 13, 19, 22, 29, 49, 50, 25, 47, -1, 27, 30,\n       45, 48, -1,  6, 25, 28, 29, -1, 32, 41, 43, 44, -1, 21, 39])",
                "sorter": "array([ 1, 18, 86, 35, 52, 69,  0,  2, 43,  3,  5, 85,  4, 44, 25, 29, 30,\n       33,  6, 23, 95, 88, 50, 51,  7, 84, 10, 93, 71,  8, 27, 66, 61, 98,\n        9, 28, 48, 91, 77, 96, 57, 11, 94, 78, 12, 90, 13, 99, 14, 24, 68,\n       59, 15, 37, 42, 55, 73, 89, 65, 22, 16, 62, 92, 45, 67, 17, 21, 54,\n       56, 19, 26, 20, 32, 58, 76, 74, 31, 97, 82, 87, 34, 79, 47, 36, 41,\n       75, 81, 46, 80, 38, 39, 40, 64, 49, 63, 70, 72, 83, 53, 60])",
                "idx": "array([ 6,  7,  9, 11, 18, 24, 29, 34, 40, 44, 46, 48, 51, 58, 63, 69, 70,\n       74, 80, 82, 87, 92, 97, 99])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 1, 2, 2, 6, 6, 3, 2, 4, 4, 2, 2, 3, 5, 4, 5, 1, 3, 6, 2, 4, 4,\n       4, 1, 1])",
                "res": "array([1, 2, 2, 6, 6, 3, 2, 4, 4, 2, 2, 3, 5, 4, 5, 1, 3, 6, 2, 4, 4, 4,\n       1, 1])",
                "ri": "Index(['y', 'w', 't', 'v', 'x', 'b', 'l', 'p', 'j', 'f', 'r', 'i', 'u', 'a',\n       'o', 'c', 'm', 'g', 's', 'q', 'z', 'k', 'h', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    1\nw    2\nt    2\nv    6\nx    6\nb    3\nl    2\np    4\nj    4\nf    2\nr    2\ni    3\nu    5\na    4\no    5\nc    1\nm    3\ng    6\ns    2\nq    4\nz    4\nk    4\nh    1\nn    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da00a0>",
                "self.obj": "0     78.0\n1     70.0\n2     34.0\n3     97.0\n4     98.0\n      ... \n95    60.0\n96    20.0\n97    50.0\n98     7.0\n99    13.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  3,  4,  4,\n        5,  6,  6,  7,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18,\n       19, 20, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 30, 30, 31,\n       31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 39, 40, 41, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 57, 58, 59,\n       59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73])",
                "_": "array([78., 70., 34., 97., 98., 71., 32.,  8., 28., 90., 53., 69., 42.,\n        2., 24., 75., 43.,  3.,  0., 29., 60., 13., 41., 16., 19., 65.,\n       17., 44., 93., 50., 15., 95., 49., 68., 87., 33., 73., 55., 47.,\n       14., 30., 11., 63.,  4., 36., 91., 31., 52., 66., 22., 23., 10.,\n        9., 20.,  7.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 14, 14, 26, 29, 35, 40, 46,  0,  2,  4, 20, 24,  5,  6, 27,\n       -1, -1, -1, -1, 31,  4,  7,  8,  9, 10, 11, 12, 10, 13, 14, 15, 16,\n        3, 17, 34, 18, 19, -1, -1, 53, 21, 22, 23, 25, 27, 11, 42, 42, 25,\n       28, 30, 21, 30, 14, -1, -1, -1, 48, -1, 32, 33, -1, 21, 36, 36, 37,\n        4, 38,  4, 39, 38, -1, 40, 41, -1, 42, 43, 10, 44, 13, 19, 45, 39,\n       42, 47,  6, 49, -1, -1, 50, 51, 37, 52,  5, 20, 29, 54, 21])",
                "sorter": "array([ 1,  3, 18, 86, 35, 40, 52, 69, 77,  0,  2,  4, 29, 33,  5,  6, 88,\n        7,  8, 27,  9, 48, 10, 11, 12, 13, 14, 15, 16, 67, 17, 19, 20, 21,\n       22, 23, 51, 24, 25, 26, 28, 96, 30, 31, 32, 34, 36, 37, 73, 89, 38,\n       39, 41, 42, 43, 44, 45, 46, 47, 81, 64, 49, 50, 83, 53, 54, 55, 56,\n       57, 58, 59, 60, 61, 65, 62, 63, 66, 68, 70, 71, 72, 76, 74, 75, 94,\n       78, 79, 80, 82, 84, 85, 87, 90, 91, 92, 93, 95, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31,\n       32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 52, 53,\n       54, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n       75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([8, 1, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-23    1\nw    2015-08-25    1\nv    2015-08-28    3\nt    2015-08-29    1\nx    2015-09-01    2\n                  ..\nb    2015-08-29    1\nx    2015-08-31    1\ng    2015-08-23    1\nl    2015-08-31    1\nr    2015-08-26    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a0a0>",
                "self.obj": "0     78.0\n1     70.0\n2     34.0\n3     97.0\n4     98.0\n      ... \n95    60.0\n96    20.0\n97    50.0\n98     7.0\n99    13.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,\n        3,  4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,\n        7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  9,  9, 10, 10, 11, 11, 11,\n       12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14,\n       14, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 19, 19, 19,\n       19, 19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 23])",
                "_": "array([78., 70., 34., 97., 98., 71., 32.,  8., 28., 90., 53., 69., 42.,\n        2., 24., 75., 43.,  3.,  0., 29., 60., 13., 41., 16., 19., 65.,\n       17., 44., 93., 50., 15., 95., 49., 68., 87., 33., 73., 55., 47.,\n       14., 30., 11., 63.,  4., 36., 91., 31., 52., 66., 22., 23., 10.,\n        9., 20.,  7.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 14, 14, 26, 35, 40,  0,  2, 30,  3,  5, -1,  4, 14, 19, 20, 21,\n       24,  6, 17, 20, 27, 33, 34, -1, -1,  4,  5, 10, -1, -1, -1, 38, 54,\n       -1, -1, 31, 37, 46, 53,  4,  7, 39, 42,  8, 51,  9, 21, 10, 18, 42,\n        4, 11, 11, 21, 36, 42, 42, -1,  3, 12, 40, 52, -1, 10, 13, 16, 36,\n       37, 14, -1, 15, 23, 38, 13, 19, 22, 29, 49, 50, 25, 47, -1, 27, 30,\n       45, 48, -1,  6, 25, 28, 29, -1, 32, 41, 43, 44, -1, 21, 39])",
                "sorter": "array([ 1, 18, 86, 35, 52, 69,  0,  2, 43,  3,  5, 85,  4, 44, 25, 29, 30,\n       33,  6, 23, 95, 88, 50, 51,  7, 84, 10, 93, 71,  8, 27, 66, 61, 98,\n        9, 28, 48, 91, 77, 96, 57, 11, 94, 78, 12, 90, 13, 99, 14, 24, 68,\n       59, 15, 37, 42, 55, 73, 89, 65, 22, 16, 62, 92, 45, 67, 17, 21, 54,\n       56, 19, 26, 20, 32, 58, 76, 74, 31, 97, 82, 87, 34, 79, 47, 36, 41,\n       75, 81, 46, 80, 38, 39, 40, 64, 49, 63, 70, 72, 83, 53, 60])",
                "idx": "array([ 6,  7,  9, 11, 18, 24, 29, 34, 40, 44, 46, 48, 51, 58, 63, 69, 70,\n       74, 80, 82, 87, 92, 97, 99])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([5, 1, 2, 2, 6, 6, 3, 2, 4, 4, 2, 2, 3, 5, 4, 5, 1, 3, 6, 2, 4, 4,\n       4, 1, 1])",
                "res": "array([1, 2, 2, 6, 6, 3, 2, 4, 4, 2, 2, 3, 5, 4, 5, 1, 3, 6, 2, 4, 4, 4,\n       1, 1])",
                "ri": "Index(['y', 'w', 't', 'v', 'x', 'b', 'l', 'p', 'j', 'f', 'r', 'i', 'u', 'a',\n       'o', 'c', 'm', 'g', 's', 'q', 'z', 'k', 'h', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ny    1\nw    2\nt    2\nv    6\nx    6\nb    3\nl    2\np    4\nj    4\nf    2\nr    2\ni    3\nu    5\na    4\no    5\nc    1\nm    3\ng    6\ns    2\nq    4\nz    4\nk    4\nh    1\nn    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d087c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08d30>",
                "self.obj": "0     78.0\n1     70.0\n2     34.0\n3     97.0\n4     98.0\n      ... \n95    60.0\n96    20.0\n97    50.0\n98     7.0\n99    13.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  2,  2,  3,  4,  4,\n        5,  6,  6,  7,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18,\n       19, 20, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 30, 30, 31,\n       31, 32, 33, 34, 35, 36, 37, 38, 38, 39, 39, 40, 41, 41, 42, 43, 44,\n       45, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 57, 58, 59,\n       59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73])",
                "_": "array([78., 70., 34., 97., 98., 71., 32.,  8., 28., 90., 53., 69., 42.,\n        2., 24., 75., 43.,  3.,  0., 29., 60., 13., 41., 16., 19., 65.,\n       17., 44., 93., 50., 15., 95., 49., 68., 87., 33., 73., 55., 47.,\n       14., 30., 11., 63.,  4., 36., 91., 31., 52., 66., 22., 23., 10.,\n        9., 20.,  7.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 14, 14, 26, 29, 35, 40, 46,  0,  2,  4, 20, 24,  5,  6, 27,\n       -1, -1, -1, -1, 31,  4,  7,  8,  9, 10, 11, 12, 10, 13, 14, 15, 16,\n        3, 17, 34, 18, 19, -1, -1, 53, 21, 22, 23, 25, 27, 11, 42, 42, 25,\n       28, 30, 21, 30, 14, -1, -1, -1, 48, -1, 32, 33, -1, 21, 36, 36, 37,\n        4, 38,  4, 39, 38, -1, 40, 41, -1, 42, 43, 10, 44, 13, 19, 45, 39,\n       42, 47,  6, 49, -1, -1, 50, 51, 37, 52,  5, 20, 29, 54, 21])",
                "sorter": "array([ 1,  3, 18, 86, 35, 40, 52, 69, 77,  0,  2,  4, 29, 33,  5,  6, 88,\n        7,  8, 27,  9, 48, 10, 11, 12, 13, 14, 15, 16, 67, 17, 19, 20, 21,\n       22, 23, 51, 24, 25, 26, 28, 96, 30, 31, 32, 34, 36, 37, 73, 89, 38,\n       39, 41, 42, 43, 44, 45, 46, 47, 81, 64, 49, 50, 83, 53, 54, 55, 56,\n       57, 58, 59, 60, 61, 65, 62, 63, 66, 68, 70, 71, 72, 76, 74, 75, 94,\n       78, 79, 80, 82, 84, 85, 87, 90, 91, 92, 93, 95, 97, 98, 99])",
                "idx": "array([ 9, 10, 11, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31,\n       32, 33, 34, 35, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 50, 52, 53,\n       54, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73,\n       75, 76, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([8, 1, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 3, 1, 2, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ny    2015-08-23    1\nw    2015-08-25    1\nv    2015-08-28    3\nt    2015-08-29    1\nx    2015-09-01    2\n                  ..\nb    2015-08-29    1\nx    2015-08-31    1\ng    2015-08-23    1\nl    2015-08-31    1\nr    2015-08-26    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0160>",
                "self.obj": "0      60\n1      55\n2      66\n3      72\n4      26\n       ..\n995    37\n996    93\n997    58\n998    49\n999    62\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([60, 55, 66, 72, 26, 98, 33, 80, 81, 87, 67, 43, 79,  2, 47, 25, 90,\n       89, 16, 54, 69, 95, 85,  4, 58, 86,  8, 22, 57, 38, 92,  9, 34, 99,\n       36,  3, 71, 29, 88, 10, 19, 84, 14, 49, 68, 13, 51, 82, 83,  7, 30,\n       15, 93, 62, 24, 56, 37, 61, 45, 35, 52, 75, 48, 96,  6, 94, 32, 70,\n       18, 50, 39, 74,  5, 41, 11, 64,  1, 46, 40, 59, 17, 65, 91, 73, 78,\n       31, 21, 20, 76,  0, 42, 77, 12, 53, 44, 28, 27, 97, 23, 63])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  37,  84, 114, 148, 182, 230, 257, 296, 340, 377, 415, 456,\n       496, 541, 575, 614, 654, 696, 735, 773, 804, 851, 894, 927, 966])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([30, 37, 27, 28, 28, 41, 24, 32, 35, 31, 31, 37, 33, 35, 31, 31, 34,\n       37, 33, 34, 26, 40, 37, 29, 34, 28])",
                "res": "array([30, 37, 27, 28, 28, 41, 24, 32, 35, 31, 31, 37, 33, 35, 31, 31, 34,\n       37, 33, 34, 26, 40, 37, 29, 34, 28])",
                "ri": "Index(['z', 's', 'w', 'l', 'd', 'p', 'm', 'h', 'a', 'q', 'v', 'y', 'o', 'n',\n       'k', 'c', 'f', 'j', 'g', 't', 'u', 'x', 'r', 'e', 'i', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    30\ns    37\nw    27\nl    28\nd    28\np    41\nm    24\nh    32\na    35\nq    31\nv    31\ny    37\no    33\nn    35\nk    31\nc    31\nf    34\nj    37\ng    33\nt    34\nu    26\nx    40\nr    37\ne    29\ni    34\nb    28\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0580>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da01c0>",
                "self.obj": "0      60\n1      55\n2      66\n3      72\n4      26\n       ..\n995    37\n996    93\n997    58\n998    49\n999    62\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([60, 55, 66, 72, 26, 98, 33, 80, 81, 87, 67, 43, 79,  2, 47, 25, 90,\n       89, 16, 54, 69, 95, 85,  4, 58, 86,  8, 22, 57, 38, 92,  9, 34, 99,\n       36,  3, 71, 29, 88, 10, 19, 84, 14, 49, 68, 13, 51, 82, 83,  7, 30,\n       15, 93, 62, 24, 56, 37, 61, 45, 35, 52, 75, 48, 96,  6, 94, 32, 70,\n       18, 50, 39, 74,  5, 41, 11, 64,  1, 46, 40, 59, 17, 65, 91, 73, 78,\n       31, 21, 20, 76,  0, 42, 77, 12, 53, 44, 28, 27, 97, 23, 63])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 252",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-26    5\ns    2015-08-27    5\nw    2015-08-29    5\nl    2015-08-30    8\nd    2015-08-25    3\n                  ..\ny    2015-08-29    1\nm    2015-08-29    1\nl    2015-08-24    1\nw    2015-08-28    4\nu    2015-09-01    1\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56be0>",
                "self.obj": "0      60.0\n1      55.0\n2      66.0\n3      72.0\n4      26.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    49.0\n999    62.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  96, 124, 154, 187, 232, 259, 298, 341, 375, 412, 451, 489,\n       534, 571, 604, 642, 680, 718, 750, 795, 820, 859, 902, 931, 969])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([42, 26, 19, 21, 24, 35, 17, 26, 28, 27, 26, 28, 29, 30, 29, 23, 28,\n       30, 28, 22, 37, 18, 26, 33, 24, 26, 25])",
                "res": "array([26, 19, 21, 24, 35, 17, 26, 28, 27, 26, 28, 29, 30, 29, 23, 28, 30,\n       28, 22, 37, 18, 26, 33, 24, 26, 25])",
                "ri": "Index(['z', 'w', 'l', 'd', 'p', 'm', 'h', 'a', 'q', 'v', 'y', 'o', 'n', 'c',\n       'k', 'f', 'j', 'g', 't', 'x', 'u', 'r', 's', 'e', 'i', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    26\nw    19\nl    21\nd    24\np    35\nm    17\nh    26\na    28\nq    27\nv    26\ny    28\no    29\nn    30\nc    29\nk    23\nf    28\nj    30\ng    28\nt    22\nx    37\nu    18\nr    26\ns    33\ne    24\ni    26\nb    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d56790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d56fd0>",
                "self.obj": "0      60.0\n1      55.0\n2      66.0\n3      72.0\n4      26.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    49.0\n999    62.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 251",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 252",
                "res": "array of shape 251",
                "ri": "array of shape 251",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-26    4\nw    2015-08-29    4\nd    2015-08-25    3\np    2015-08-25    3\nm    2015-09-01    1\n                  ..\n     2015-08-29    0\nl    2015-08-24    1\nu    2015-09-01    1\nw    2015-08-28    2\nt    2015-08-28    1\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d404f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d409a0>",
                "self.obj": "0      60.0\n1      55.0\n2      66.0\n3      72.0\n4      26.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    49.0\n999    62.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  96, 124, 154, 187, 232, 259, 298, 341, 375, 412, 451, 489,\n       534, 571, 604, 642, 680, 718, 750, 795, 820, 859, 902, 931, 969])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([42, 26, 19, 21, 24, 35, 17, 26, 28, 27, 26, 28, 29, 30, 29, 23, 28,\n       30, 28, 22, 37, 18, 26, 33, 24, 26, 25])",
                "res": "array([26, 19, 21, 24, 35, 17, 26, 28, 27, 26, 28, 29, 30, 29, 23, 28, 30,\n       28, 22, 37, 18, 26, 33, 24, 26, 25])",
                "ri": "Index(['z', 'w', 'l', 'd', 'p', 'm', 'h', 'a', 'q', 'v', 'y', 'o', 'n', 'c',\n       'k', 'f', 'j', 'g', 't', 'x', 'u', 'r', 's', 'e', 'i', 'b'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    26\nw    19\nl    21\nd    24\np    35\nm    17\nh    26\na    28\nq    27\nv    26\ny    28\no    29\nn    30\nc    29\nk    23\nf    28\nj    30\ng    28\nt    22\nx    37\nu    18\nr    26\ns    33\ne    24\ni    26\nb    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40130>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40fd0>",
                "self.obj": "0      60.0\n1      55.0\n2      66.0\n3      72.0\n4      26.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998    49.0\n999    62.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 251",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 252",
                "res": "array of shape 251",
                "ri": "array of shape 251",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-26    4\nw    2015-08-29    4\nd    2015-08-25    3\np    2015-08-25    3\nm    2015-09-01    1\n                  ..\n     2015-08-29    0\nl    2015-08-24    1\nu    2015-09-01    1\nw    2015-08-28    2\nt    2015-08-28    1\nName: julie, Length: 251, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d842b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d841f0>",
                "self.obj": "0        0\n1       13\n2       45\n3       35\n4       89\n        ..\n9995    85\n9996    79\n9997    95\n9998    44\n9999    55\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([ 0, 13, 45, 35, 89, 49, 16, 53, 65, 46, 91, 70, 74, 14, 41, 44, 69,\n       38, 92, 23,  8, 80, 75, 88, 55, 27, 99, 29, 54, 36, 64, 94, 90, 18,\n        3, 78, 95,  9, 34, 22,  4, 31, 24, 85,  1, 63, 97, 10,  2, 87,  6,\n       21, 57, 42, 82, 33, 32, 50, 77, 11, 72, 84, 58, 98, 86, 20, 26, 73,\n       48, 71, 60, 28, 68, 59, 15, 66, 83, 61, 81, 19, 52, 76, 56, 79, 62,\n       12, 30, 40, 47, 17, 39, 51, 93, 43,  7, 67, 37, 25, 96,  5])",
                "val": "array([ 0, 13, 45, ..., 95, 44, 55])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([   0,  136, 3212, ..., 1326, 5362, 6442])",
                "idx": "array([   0,  378,  792, 1145, 1538, 1889, 2297, 2681, 3045, 3403, 3792,\n       4161, 4567, 4939, 5315, 5702, 6118, 6492, 6889, 7251, 7621, 8044,\n       8419, 8819, 9214, 9597])",
                "inc": "array([1, 0, 0, ..., 1, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 96,  99,  97,  95,  97,  98,  99,  96,  99,  99,  98,  98,  99,\n        97,  98, 100,  97,  99,  99,  98,  96,  95,  99,  99,  94,  99])",
                "res": "array([ 96,  99,  97,  95,  97,  98,  99,  96,  99,  99,  98,  98,  99,\n        97,  98, 100,  97,  99,  99,  98,  96,  95,  99,  99,  94,  99])",
                "ri": "Index(['h', 'z', 'y', 'v', 'o', 'f', 'a', 'm', 'e', 'r', 'p', 'b', 't', 'g',\n       'i', 'c', 'j', 'w', 'd', 'l', 'n', 'k', 's', 'q', 'x', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh     96\nz     99\ny     97\nv     95\no     97\nf     98\na     99\nm     96\ne     99\nr     99\np     98\nb     98\nt     99\ng     97\ni     98\nc    100\nj     97\nw     99\nd     99\nl     98\nn     96\nk     95\ns     99\nq     99\nx     94\nu     99\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5cdc0>",
                "self.obj": "0        0\n1       13\n2       45\n3       35\n4       89\n        ..\n9995    85\n9996    79\n9997    95\n9998    44\n9999    55\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([ 0, 13, 45, 35, 89, 49, 16, 53, 65, 46, 91, 70, 74, 14, 41, 44, 69,\n       38, 92, 23,  8, 80, 75, 88, 55, 27, 99, 29, 54, 36, 64, 94, 90, 18,\n        3, 78, 95,  9, 34, 22,  4, 31, 24, 85,  1, 63, 97, 10,  2, 87,  6,\n       21, 57, 42, 82, 33, 32, 50, 77, 11, 72, 84, 58, 98, 86, 20, 26, 73,\n       48, 71, 60, 28, 68, 59, 15, 66, 83, 61, 81, 19, 52, 76, 56, 79, 62,\n       12, 30, 40, 47, 17, 39, 51, 93, 43,  7, 67, 37, 25, 96,  5])",
                "val": "array([ 0, 13, 45, ..., 95, 44, 55])",
                "codes": "array([ 0,  0,  3, ..., 95, 96, 97])",
                "sorter": "array([   0,  136, 8619, ..., 6556, 6880, 2807])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 1, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    33\nz    2015-08-25    38\n     2015-08-31    32\ny    2015-08-28    35\nv    2015-08-24    36\n                   ..\nt    2015-08-29    30\nd    2015-08-26    32\ni    2015-08-25    34\ns    2015-08-30    25\ng    2015-08-27    26\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40460>",
                "self.obj": "0        0.0\n1       13.0\n2       45.0\n3       35.0\n4       89.0\n        ... \n9995    85.0\n9996    79.0\n9997    95.0\n9998    44.0\n9999    55.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([ 0., 13., 45., ..., 95., 44., 55.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 6171, 7738, 8341])",
                "idx": "array([ 589,  946, 1328, 1658, 2031, 2365, 2748, 3115, 3448, 3790, 4156,\n       4504, 4886, 5238, 5588, 5947, 6334, 6685, 7061, 7406, 7752, 8152,\n       8507, 8889, 9258, 9616])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([98, 95, 98, 88, 93, 96, 95, 94, 90, 93, 96, 96, 97, 95, 95, 94, 97,\n       92, 98, 97, 95, 95, 93, 96, 95, 91, 96])",
                "res": "array([95, 98, 88, 93, 96, 95, 94, 90, 93, 96, 96, 97, 95, 95, 94, 97, 92,\n       98, 97, 95, 95, 93, 96, 95, 91, 96])",
                "ri": "Index(['h', 'z', 'y', 'v', 'o', 'f', 'a', 'm', 'e', 'r', 'p', 'b', 't', 'g',\n       'i', 'c', 'j', 'w', 'd', 'l', 'n', 'k', 's', 'q', 'x', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    95\nz    98\ny    88\nv    93\no    96\nf    95\na    94\nm    90\ne    93\nr    96\np    96\nb    97\nt    95\ng    95\ni    94\nc    97\nj    92\nw    98\nd    97\nl    95\nn    95\nk    93\ns    96\nq    95\nx    91\nu    96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40b80>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40a30>",
                "self.obj": "0        0.0\n1       13.0\n2       45.0\n3       35.0\n4       89.0\n        ... \n9995    85.0\n9996    79.0\n9997    95.0\n9998    44.0\n9999    55.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([ 0., 13., 45., ..., 95., 44., 55.])",
                "codes": "array([-1, -1, -1, ..., 91, 95, 97])",
                "sorter": "array([ 103,  256,  273, ..., 2807, 5808, 6880])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    27\nz    2015-08-31    26\nv    2015-08-24    22\no    2015-08-29    25\nh    2015-08-31    23\n                   ..\nd    2015-08-26    30\ni    2015-08-25    25\nh    2015-08-25    17\ns    2015-08-30    19\ng    2015-08-27    24\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d515b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d516d0>",
                "self.obj": "0        0.0\n1       13.0\n2       45.0\n3       35.0\n4       89.0\n        ... \n9995    85.0\n9996    79.0\n9997    95.0\n9998    44.0\n9999    55.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([ 0., 13., 45., ..., 95., 44., 55.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 6171, 7738, 8341])",
                "idx": "array([ 589,  946, 1328, 1658, 2031, 2365, 2748, 3115, 3448, 3790, 4156,\n       4504, 4886, 5238, 5588, 5947, 6334, 6685, 7061, 7406, 7752, 8152,\n       8507, 8889, 9258, 9616])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([98, 95, 98, 88, 93, 96, 95, 94, 90, 93, 96, 96, 97, 95, 95, 94, 97,\n       92, 98, 97, 95, 95, 93, 96, 95, 91, 96])",
                "res": "array([95, 98, 88, 93, 96, 95, 94, 90, 93, 96, 96, 97, 95, 95, 94, 97, 92,\n       98, 97, 95, 95, 93, 96, 95, 91, 96])",
                "ri": "Index(['h', 'z', 'y', 'v', 'o', 'f', 'a', 'm', 'e', 'r', 'p', 'b', 't', 'g',\n       'i', 'c', 'j', 'w', 'd', 'l', 'n', 'k', 's', 'q', 'x', 'u'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nh    95\nz    98\ny    88\nv    93\no    96\nf    95\na    94\nm    90\ne    93\nr    96\np    96\nb    97\nt    95\ng    95\ni    94\nc    97\nj    92\nw    98\nd    97\nl    95\nn    95\nk    93\ns    96\nq    95\nx    91\nu    96\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d516d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51bb0>",
                "self.obj": "0        0.0\n1       13.0\n2       45.0\n3       35.0\n4       89.0\n        ... \n9995    85.0\n9996    79.0\n9997    95.0\n9998    44.0\n9999    55.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([ 0., 13., 45., ..., 95., 44., 55.])",
                "codes": "array([-1, -1, -1, ..., 91, 95, 97])",
                "sorter": "array([ 103,  256,  273, ..., 2807, 5808, 6880])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nh    2015-08-24    27\nz    2015-08-31    26\nv    2015-08-24    22\no    2015-08-29    25\nh    2015-08-31    23\n                   ..\nd    2015-08-26    30\ni    2015-08-25    25\nh    2015-08-25    17\ns    2015-08-30    19\ng    2015-08-27    24\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40bb0>",
                "self.obj": "0        35\n1        27\n2        72\n3        77\n4        42\n         ..\n99995    60\n99996    95\n99997    66\n99998    98\n99999    80\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([35, 27, 72, 77, 42, 89, 37, 14, 60, 55,  8, 43, 28, 94, 25, 85, 64,\n       58, 36,  5, 90, 81, 12, 10, 48, 70, 74, 51,  4, 79, 26, 83,  0, 75,\n       21, 61, 47, 52, 29, 92, 91, 78, 30, 46, 88, 65, 41, 24, 49, 11, 99,\n       67, 56, 95, 82, 63, 54, 22, 97, 62, 50, 39, 93, 16, 96, 98, 40,  9,\n       71, 33, 31, 68, 13, 38, 34,  3, 19, 23, 80, 20,  1, 57, 18, 86, 32,\n       69, 17, 76, 15, 53, 84, 87, 73, 66,  7, 44, 45,  6,  2, 59])",
                "val": "array([35, 27, 72, ..., 66, 98, 80])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([    0,   473, 15637, ..., 89654, 90410, 92447])",
                "idx": "array([    0,  3804,  7672, 11377, 15300, 19098, 22959, 26866, 30592,\n       34430, 38306, 42300, 46084, 50035, 53876, 57613, 61555, 65364,\n       69146, 73055, 76944, 80786, 84648, 88529, 92329, 96178])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['k', 'b', 'y', 'e', 'u', 'p', 'a', 'z', 'i', 'w', 'f', 'h', 'd', 'l',\n       'g', 'v', 'r', 'j', 'x', 'o', 's', 'n', 'm', 'c', 'q', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    100\nb    100\ny    100\ne    100\nu    100\np    100\na    100\nz    100\ni    100\nw    100\nf    100\nh    100\nd    100\nl    100\ng    100\nv    100\nr    100\nj    100\nx    100\no    100\ns    100\nn    100\nm    100\nc    100\nq    100\nt    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09160>",
                "self.obj": "0        35\n1        27\n2        72\n3        77\n4        42\n         ..\n99995    60\n99996    95\n99997    66\n99998    98\n99999    80\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([35, 27, 72, 77, 42, 89, 37, 14, 60, 55,  8, 43, 28, 94, 25, 85, 64,\n       58, 36,  5, 90, 81, 12, 10, 48, 70, 74, 51,  4, 79, 26, 83,  0, 75,\n       21, 61, 47, 52, 29, 92, 91, 78, 30, 46, 88, 65, 41, 24, 49, 11, 99,\n       67, 56, 95, 82, 63, 54, 22, 97, 62, 50, 39, 93, 16, 96, 98, 40,  9,\n       71, 33, 31, 68, 13, 38, 34,  3, 19, 23, 80, 20,  1, 57, 18, 86, 32,\n       69, 17, 76, 15, 53, 84, 87, 73, 66,  7, 44, 45,  6,  2, 59])",
                "val": "array([35, 27, 72, ..., 66, 98, 80])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([    0, 17424, 44985, ..., 26130, 62794, 78490])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-25    95\nb    2015-08-29    98\ny    2015-08-31    99\ne    2015-08-31    96\nu    2015-08-29    97\n                   ..\ny    2015-08-25    95\nc    2015-08-31    98\ng    2015-09-01    96\nf    2015-08-28    98\ne    2015-08-23    97\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5cca0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5ce20>",
                "self.obj": "0        35.0\n1        27.0\n2        72.0\n3        77.0\n4        42.0\n         ... \n99995    60.0\n99996    95.0\n99997    66.0\n99998    98.0\n99999    80.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([35., 27., 72., ..., 66., 98., 80.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 90892, 92645, 98590])",
                "idx": "array([ 5883,  9484, 12959, 16646, 20229, 23882, 27564, 31052, 34665,\n       38304, 42084, 45638, 49363, 53020, 56544, 60264, 63846, 67542,\n       71211, 74814, 78443, 82063, 85712, 89280, 92841, 96436])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['k', 'y', 'e', 'u', 'p', 'a', 'z', 'i', 'w', 'f', 'h', 'd', 'l', 'g',\n       'v', 'r', 'x', 'o', 's', 'b', 'n', 'm', 'c', 'j', 'q', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    100\ny    100\ne    100\nu    100\np    100\na    100\nz    100\ni    100\nw    100\nf    100\nh    100\nd    100\nl    100\ng    100\nv    100\nr    100\nx    100\no    100\ns    100\nb    100\nn    100\nm    100\nc    100\nj    100\nq    100\nt    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c880>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c6d0>",
                "self.obj": "0        35.0\n1        27.0\n2        72.0\n3        77.0\n4        42.0\n         ... \n99995    60.0\n99996    95.0\n99997    66.0\n99998    98.0\n99999    80.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([35., 27., 72., ..., 66., 98., 80.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 10315, 26120, 32627])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-25    92\ny    2015-08-31    97\nu    2015-08-29    93\np    2015-08-25    93\na    2015-08-25    91\n                   ..\nc    2015-08-31    97\n     2015-08-28    98\ng    2015-09-01    94\nf    2015-08-28    98\ne    2015-08-23    94\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d515e0>",
                "self.obj": "0        35.0\n1        27.0\n2        72.0\n3        77.0\n4        42.0\n         ... \n99995    60.0\n99996    95.0\n99997    66.0\n99998    98.0\n99999    80.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([35., 27., 72., ..., 66., 98., 80.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 90892, 92645, 98590])",
                "idx": "array([ 5883,  9484, 12959, 16646, 20229, 23882, 27564, 31052, 34665,\n       38304, 42084, 45638, 49363, 53020, 56544, 60264, 63846, 67542,\n       71211, 74814, 78443, 82063, 85712, 89280, 92841, 96436])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['k', 'y', 'e', 'u', 'p', 'a', 'z', 'i', 'w', 'f', 'h', 'd', 'l', 'g',\n       'v', 'r', 'x', 'o', 's', 'b', 'n', 'm', 'c', 'j', 'q', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nk    100\ny    100\ne    100\nu    100\np    100\na    100\nz    100\ni    100\nw    100\nf    100\nh    100\nd    100\nl    100\ng    100\nv    100\nr    100\nx    100\no    100\ns    100\nb    100\nn    100\nm    100\nc    100\nj    100\nq    100\nt    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51250>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d510d0>",
                "self.obj": "0        35.0\n1        27.0\n2        72.0\n3        77.0\n4        42.0\n         ... \n99995    60.0\n99996    95.0\n99997    66.0\n99998    98.0\n99999    80.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([35., 27., 72., ..., 66., 98., 80.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 10315, 26120, 32627])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nk    2015-08-25    92\ny    2015-08-31    97\nu    2015-08-29    93\np    2015-08-25    93\na    2015-08-25    91\n                   ..\nc    2015-08-31    97\n     2015-08-28    98\ng    2015-09-01    94\nf    2015-08-28    98\ne    2015-08-23    94\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d5c1c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d5c8e0>",
                "self.obj": "0     457\n1     650\n2     959\n3     972\n4     601\n     ... \n95    891\n96    202\n97    949\n98    501\n99    221\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,\n        2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  6,  6,  6,\n        6,  6,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11,\n       11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 15, 15,\n       15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20,\n       20, 20, 20, 20, 20, 20, 20, 21, 21, 22, 22, 22, 23, 24, 25])",
                "_": "array of shape 99",
                "val": "array of shape 100",
                "codes": "array([ 0, 22, 94,  1,  3, 19, 30, 35, 59, 60, 65, 81, 90,  2,  6, 11, 23,\n       29, 36, 37, 68,  4, 16, 78, 97,  5, 49, 50,  7,  9, 74,  8, 26, 28,\n       51, 76, 10, 53, 12, 24, 46, 56, 70, 13, 54, 75, 87, 14, 38, 15, 41,\n       72, 95, 96, 17, 20, 47, 66, 82, 18, 89, 21, 42, 80, 86, 98, 25, 52,\n       83, 88, 19, 27, 32, 31, 40, 67, 77, 33, 48, 93, 34, 44, 58, 73, 39,\n       43, 57, 61, 63, 64, 84, 91, 45, 92, 55, 62, 71, 69, 79, 85])",
                "sorter": "array([ 0, 22, 95,  1,  3, 19, 31, 36, 60, 61, 66, 82, 91,  2,  6, 11, 23,\n       29, 37, 38, 69,  4, 16, 79, 98,  5, 50, 51,  7,  9, 75,  8, 26, 28,\n       52, 77, 10, 54, 12, 24, 47, 57, 71, 13, 55, 76, 88, 14, 39, 15, 42,\n       73, 96, 97, 17, 20, 48, 67, 83, 18, 90, 21, 43, 81, 87, 99, 25, 53,\n       84, 89, 30, 27, 33, 32, 41, 68, 78, 34, 49, 94, 35, 45, 59, 74, 40,\n       44, 58, 62, 64, 65, 85, 92, 46, 93, 56, 63, 72, 70, 80, 86])",
                "idx": "array([ 0,  3, 13, 21, 25, 28, 31, 36, 38, 43, 47, 49, 54, 59, 61, 66, 70,\n       73, 77, 80, 84, 92, 94, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([ 3, 10,  8,  4,  3,  3,  5,  2,  5,  4,  2,  5,  5,  2,  5,  4,  3,\n        4,  3,  4,  8,  2,  3,  1,  1,  1])",
                "res": "array([ 3, 10,  8,  4,  3,  3,  5,  2,  5,  4,  2,  5,  5,  2,  5,  4,  3,\n        4,  3,  4,  8,  2,  3,  1,  1,  1])",
                "ri": "Index(['v', 'p', 'e', 'l', 'a', 's', 'y', 't', 'd', 'k', 'u', 'z', 'f', 'j',\n       'i', 'g', 'm', 'b', 'n', 'o', 'w', 'h', 'c', 'x', 'q', 'r'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nv     3\np    10\ne     8\nl     4\na     3\ns     3\ny     5\nt     2\nd     5\nk     4\nu     2\nz     5\nf     5\nj     2\ni     5\ng     4\nm     3\nb     4\nn     3\no     4\nw     8\nh     2\nc     3\nx     1\nq     1\nr     1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d842b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84df0>",
                "self.obj": "0     457\n1     650\n2     959\n3     972\n4     601\n     ... \n95    891\n96    202\n97    949\n98    501\n99    221\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  1,  1,  1,  1,  2,  3,  3,  3,  4,  5,  5,  6,  7,  8,  8,\n        8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21,\n       22, 23, 24, 25, 26, 27, 28, 29, 29, 30, 31, 32, 33, 34, 35, 35, 36,\n       37, 37, 38, 39, 39, 40, 41, 41, 42, 43, 44, 45, 46, 47, 48, 48, 49,\n       50, 51, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64,\n       65, 66, 67, 68, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78])",
                "_": "array of shape 99",
                "val": "array of shape 100",
                "codes": "array([ 0, 94,  1, 35, 81, 90,  2,  3, 59, 60,  4,  5, 49,  6,  7,  8, 26,\n       28,  9, 10, 11, 12, 13, 14, 15, 16, 17, 47, 18, 19, 20, 82, 21, 98,\n       22, 23, 24, 25, 27, 29, 19, 30, 65, 31, 32, 33, 34, 36, 37, 68, 38,\n       39, 57, 40, 41, 96, 42, 43, 84, 44, 45, 46, 48, 50, 51, 52, 88, 53,\n       54, 55, 62, 56, 58, 61, 63, 64, 66, 67, 69, 70, 71, 72, 95, 73, 74,\n       75, 76, 77, 78, 97, 79, 80, 83, 85, 86, 87, 89, 91, 92, 93])",
                "sorter": "array([ 0, 95,  1, 36, 82, 91,  2,  3, 60, 61,  4,  5, 50,  6,  7,  8, 26,\n       28,  9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 18, 19, 20, 83, 21, 99,\n       22, 23, 24, 25, 27, 29, 30, 31, 66, 32, 33, 34, 35, 37, 38, 69, 39,\n       40, 58, 41, 42, 97, 43, 44, 85, 45, 46, 47, 49, 51, 52, 53, 89, 54,\n       55, 56, 63, 57, 59, 62, 64, 65, 67, 68, 70, 71, 72, 73, 96, 74, 75,\n       76, 77, 78, 79, 98, 80, 81, 84, 86, 87, 88, 90, 92, 93, 94])",
                "idx": "array([ 0,  2,  6,  7, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25,\n       26, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46,\n       47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68,\n       69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87,\n       88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([2, 4, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 4, 1, 3, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2,\n       1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1,\n       1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 79",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nv    2015-08-30    2\np    2015-08-27    4\ne    2015-08-24    1\np    2015-08-23    3\nl    2015-08-24    1\n                  ..\nk    2015-08-26    1\nj    2015-08-30    1\nw    2015-08-31    1\nh    2015-08-27    1\nn    2015-08-28    1\nName: julie, Length: 79, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc910>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcaf0>",
                "self.obj": "0     457.0\n1     650.0\n2     959.0\n3     972.0\n4     601.0\n      ...  \n95    891.0\n96    202.0\n97    949.0\n98    501.0\n99    221.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  5,  5,\n        5,  6,  6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10,\n       10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14,\n       14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18,\n       18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24])",
                "_": "array of shape 84",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 28, 42, 56, 70,  0, 19, 79,  2,  6,  8, 20, 23, 30, 31, -1,\n        3, 16, 24, 29, 50, 51, 69, 75,  4, 13, 66, 82,  5, 40, 41, -1, -1,\n       62, -1, -1, -1, 64,  7, 44, -1,  9, 21, 47, 58, 10, 45, 63, 72, 11,\n       32, 12, 35, 60, 80, 81, -1, 14, 17, 38, 54, 18, 36, 68, 71, 83, -1,\n       22, 43, 73, -1, 16, 26, 25, 34, 55, 65, 27, 39, 78, -1, -1, -1, 33,\n       37, 48, 52, 76, -1, 49, 61, -1, 77, 46, 53, 59, 57, 67, 74])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86,  0, 22, 95,  2,  6, 11, 23, 29, 37, 38, 66,\n        3, 19, 31, 36, 60, 61, 82, 91,  4, 16, 79, 98,  5, 50, 51,  7,  9,\n       75,  8, 26, 28, 77, 10, 54, 47, 12, 24, 57, 71, 13, 55, 76, 88, 14,\n       39, 15, 42, 73, 96, 97, 83, 17, 20, 48, 67, 21, 43, 81, 87, 99, 84,\n       25, 53, 89, 27, 30, 33, 32, 41, 68, 78, 34, 49, 94, 64, 65, 85, 40,\n       44, 58, 62, 92, 45, 59, 74, 46, 93, 56, 63, 72, 70, 80, 90])",
                "idx": "array([ 6,  9, 16, 25, 29, 32, 35, 39, 41, 46, 50, 52, 57, 62, 67, 71, 74,\n       78, 81, 89, 92, 94, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 7, 8, 4, 3, 1, 1, 2, 4, 4, 2, 5, 4, 5, 3, 2, 4, 3, 5, 2, 1,\n       3, 1, 1, 1])",
                "res": "array([3, 7, 8, 4, 3, 1, 1, 2, 4, 4, 2, 5, 4, 5, 3, 2, 4, 3, 5, 2, 1, 3,\n       1, 1, 1])",
                "ri": "Index(['v', 'e', 'p', 'l', 'a', 's', 'y', 't', 'd', 'k', 'u', 'z', 'f', 'i',\n       'g', 'm', 'b', 'n', 'w', 'o', 'h', 'c', 'x', 'q', 'j'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nv    3\ne    7\np    8\nl    4\na    3\ns    1\ny    1\nt    2\nd    4\nk    4\nu    2\nz    5\nf    4\ni    5\ng    3\nm    2\nb    4\nn    3\nw    5\no    2\nh    1\nc    3\nx    1\nq    1\nj    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc9d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcbb0>",
                "self.obj": "0     457.0\n1     650.0\n2     959.0\n3     972.0\n4     601.0\n      ...  \n95    891.0\n96    202.0\n97    949.0\n98    501.0\n99    221.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  3,  4,  5,\n        6,  6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 30, 30, 31,\n       32, 33, 34, 35, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45,\n       46, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59,\n       60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73])",
                "_": "array of shape 84",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 28, 33, 42, 56, 64, 70,  0, 79,  2,  4,  5, 40,  6, -1,\n       -1, -1, -1, -1,  7,  8,  9, 10, 11, 12, 13, 14, 38, 16, -1, 17, 18,\n       83, 19, 20, 21, 22, -1, 23, 16, -1, 24, 25, 26, 27, 29, 69, 75, 30,\n       31, 32, 34, 35, 81, 36, -1, 37, -1, -1, -1, 39, 41, 43, 73, 44, 45,\n       46, 53, 47, 48, 49, 50, 51, 52, -1, -1, 54, 55, 57, 58, 59, 60, 80,\n       61, 62, 63, 65, 66, 82, 67, 68, -1, 71, 72, 74, 76, 77, 78])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0, 95,  2,  4,  5, 50,  6,  7,\n        8, 26, 28,  9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 19, 83, 20, 21,\n       99, 22, 23, 24, 25, 27, 29, 30, 66, 31, 32, 33, 34, 36, 82, 91, 37,\n       38, 39, 41, 42, 97, 43, 85, 44, 45, 46, 47, 49, 51, 53, 89, 54, 55,\n       56, 63, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 96,\n       74, 75, 76, 78, 79, 98, 80, 81, 84, 87, 88, 90, 92, 93, 94])",
                "idx": "array([ 9, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30,\n       31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52,\n       53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1,\n       2, 1, 1, 2, 1, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1, 2,\n       1, 1, 2, 1, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 0, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nv    2015-08-30    2\ne    2015-08-24    1\nl    2015-08-24    1\na    2015-08-24    2\ne    2015-08-31    1\n                  ..\nk    2015-08-26    1\nj    2015-08-30    1\nw    2015-08-31    1\nh    2015-08-27    1\nn    2015-08-28    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25070>",
                "self.obj": "0     457.0\n1     650.0\n2     959.0\n3     972.0\n4     601.0\n      ...  \n95    891.0\n96    202.0\n97    949.0\n98    501.0\n99    221.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  2,\n        2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  4,  4,  4,  5,  5,\n        5,  6,  6,  6,  6,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9, 10,\n       10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14,\n       14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18,\n       18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 22, 23, 24])",
                "_": "array of shape 84",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 28, 42, 56, 70,  0, 19, 79,  2,  6,  8, 20, 23, 30, 31, -1,\n        3, 16, 24, 29, 50, 51, 69, 75,  4, 13, 66, 82,  5, 40, 41, -1, -1,\n       62, -1, -1, -1, 64,  7, 44, -1,  9, 21, 47, 58, 10, 45, 63, 72, 11,\n       32, 12, 35, 60, 80, 81, -1, 14, 17, 38, 54, 18, 36, 68, 71, 83, -1,\n       22, 43, 73, -1, 16, 26, 25, 34, 55, 65, 27, 39, 78, -1, -1, -1, 33,\n       37, 48, 52, 76, -1, 49, 61, -1, 77, 46, 53, 59, 57, 67, 74])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86,  0, 22, 95,  2,  6, 11, 23, 29, 37, 38, 66,\n        3, 19, 31, 36, 60, 61, 82, 91,  4, 16, 79, 98,  5, 50, 51,  7,  9,\n       75,  8, 26, 28, 77, 10, 54, 47, 12, 24, 57, 71, 13, 55, 76, 88, 14,\n       39, 15, 42, 73, 96, 97, 83, 17, 20, 48, 67, 21, 43, 81, 87, 99, 84,\n       25, 53, 89, 27, 30, 33, 32, 41, 68, 78, 34, 49, 94, 64, 65, 85, 40,\n       44, 58, 62, 92, 45, 59, 74, 46, 93, 56, 63, 72, 70, 80, 90])",
                "idx": "array([ 6,  9, 16, 25, 29, 32, 35, 39, 41, 46, 50, 52, 57, 62, 67, 71, 74,\n       78, 81, 89, 92, 94, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 7, 8, 4, 3, 1, 1, 2, 4, 4, 2, 5, 4, 5, 3, 2, 4, 3, 5, 2, 1,\n       3, 1, 1, 1])",
                "res": "array([3, 7, 8, 4, 3, 1, 1, 2, 4, 4, 2, 5, 4, 5, 3, 2, 4, 3, 5, 2, 1, 3,\n       1, 1, 1])",
                "ri": "Index(['v', 'e', 'p', 'l', 'a', 's', 'y', 't', 'd', 'k', 'u', 'z', 'f', 'i',\n       'g', 'm', 'b', 'n', 'w', 'o', 'h', 'c', 'x', 'q', 'j'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nv    3\ne    7\np    8\nl    4\na    3\ns    1\ny    1\nt    2\nd    4\nk    4\nu    2\nz    5\nf    4\ni    5\ng    3\nm    2\nb    4\nn    3\nw    5\no    2\nh    1\nc    3\nx    1\nq    1\nj    1\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25820>",
                "self.obj": "0     457.0\n1     650.0\n2     959.0\n3     972.0\n4     601.0\n      ...  \n95    891.0\n96    202.0\n97    949.0\n98    501.0\n99    221.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  0,  1,  2,  3,  3,  4,  5,\n        6,  6,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 15, 16, 17, 17, 18,\n       18, 19, 20, 21, 22, 23, 24, 25, 26, 26, 27, 28, 29, 30, 30, 30, 31,\n       32, 33, 34, 35, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 43, 44, 45,\n       46, 46, 47, 48, 49, 50, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 59,\n       60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73])",
                "_": "array of shape 84",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 28, 33, 42, 56, 64, 70,  0, 79,  2,  4,  5, 40,  6, -1,\n       -1, -1, -1, -1,  7,  8,  9, 10, 11, 12, 13, 14, 38, 16, -1, 17, 18,\n       83, 19, 20, 21, 22, -1, 23, 16, -1, 24, 25, 26, 27, 29, 69, 75, 30,\n       31, 32, 34, 35, 81, 36, -1, 37, -1, -1, -1, 39, 41, 43, 73, 44, 45,\n       46, 53, 47, 48, 49, 50, 51, 52, -1, -1, 54, 55, 57, 58, 59, 60, 80,\n       61, 62, 63, 65, 66, 82, 67, 68, -1, 71, 72, 74, 76, 77, 78])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86,  0, 95,  2,  4,  5, 50,  6,  7,\n        8, 26, 28,  9, 10, 11, 12, 13, 14, 15, 16, 17, 48, 19, 83, 20, 21,\n       99, 22, 23, 24, 25, 27, 29, 30, 66, 31, 32, 33, 34, 36, 82, 91, 37,\n       38, 39, 41, 42, 97, 43, 85, 44, 45, 46, 47, 49, 51, 53, 89, 54, 55,\n       56, 63, 57, 58, 59, 60, 61, 62, 64, 65, 67, 68, 70, 71, 72, 73, 96,\n       74, 75, 76, 78, 79, 98, 80, 81, 84, 87, 88, 90, 92, 93, 94])",
                "idx": "array([ 9, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30,\n       31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 50, 51, 52,\n       53, 54, 56, 57, 59, 60, 61, 62, 63, 64, 66, 67, 68, 70, 71, 72, 73,\n       75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91, 92, 93,\n       94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([9, 2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1,\n       2, 1, 1, 2, 1, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2,\n       1, 1, 0, 1, 1, 1, 1, 1, 1])",
                "res": "array([2, 1, 1, 2, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 1, 2,\n       1, 1, 2, 1, 1, 1, 2, 1, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1,\n       1, 0, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nv    2015-08-30    2\ne    2015-08-24    1\nl    2015-08-24    1\na    2015-08-24    2\ne    2015-08-31    1\n                  ..\nk    2015-08-26    1\nj    2015-08-30    1\nw    2015-08-31    1\nh    2015-08-27    1\nn    2015-08-28    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc040>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc250>",
                "self.obj": "0      881\n1      777\n2      115\n3      107\n4      324\n      ... \n995    603\n996    891\n997    375\n998    463\n999    749\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 651",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  45,  78, 116, 157, 202, 248, 283, 322, 355, 389, 421, 461,\n       501, 545, 575, 619, 649, 686, 721, 750, 792, 831, 871, 916, 961])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([42, 32, 37, 39, 45, 46, 35, 39, 33, 34, 30, 40, 39, 43, 28, 44, 29,\n       37, 35, 29, 39, 38, 40, 44, 42, 38])",
                "res": "array([42, 32, 37, 39, 45, 46, 35, 39, 33, 34, 30, 40, 39, 43, 28, 44, 29,\n       37, 35, 29, 39, 38, 40, 44, 42, 38])",
                "ri": "Index(['g', 'n', 's', 'a', 'd', 't', 'w', 'c', 'f', 'v', 'o', 'u', 'x', 'b',\n       'z', 'l', 'e', 'h', 'r', 'm', 'k', 'y', 'j', 'q', 'i', 'p'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    42\nn    32\ns    37\na    39\nd    45\nt    46\nw    35\nc    39\nf    33\nv    34\no    30\nu    40\nx    39\nb    43\nz    28\nl    44\ne    29\nh    37\nr    35\nm    29\nk    39\ny    38\nj    40\nq    44\ni    42\np    38\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddcf10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcee0>",
                "self.obj": "0      881\n1      777\n2      115\n3      107\n4      324\n      ... \n995    603\n996    891\n997    375\n998    463\n999    749\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 651",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 249",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 249",
                "res": "array of shape 249",
                "ri": "array of shape 249",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ng    2015-08-30    7\nn    2015-08-25    7\ns    2015-08-31    8\na    2015-08-24    4\nd    2015-08-29    4\n                  ..\na    2015-08-28    2\np    2015-08-26    1\nh    2015-08-24    1\nt    2015-08-23    1\nd    2015-08-28    1\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09c40>",
                "self.obj": "0      881.0\n1      777.0\n2      115.0\n3      107.0\n4      324.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    463.0\n999    749.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59, 103, 139, 176, 219, 263, 295, 331, 360, 394, 426, 462, 501,\n       543, 571, 608, 638, 674, 705, 731, 771, 809, 848, 892, 933, 970])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([49, 35, 29, 31, 35, 38, 23, 33, 21, 26, 22, 33, 33, 33, 23, 34, 25,\n       32, 25, 22, 33, 30, 33, 36, 35, 32, 26])",
                "res": "array([35, 29, 31, 35, 38, 23, 33, 21, 26, 22, 33, 33, 33, 23, 34, 25, 32,\n       25, 22, 33, 30, 33, 36, 35, 32, 26])",
                "ri": "Index(['g', 's', 'a', 'd', 't', 'w', 'c', 'f', 'v', 'o', 'u', 'x', 'b', 'z',\n       'l', 'e', 'h', 'r', 'm', 'k', 'y', 'j', 'q', 'i', 'p', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    35\ns    29\na    31\nd    35\nt    38\nw    23\nc    33\nf    21\nv    26\no    22\nu    33\nx    33\nb    33\nz    23\nl    34\ne    25\nh    32\nr    25\nm    22\nk    33\ny    30\nj    33\nq    36\ni    35\np    32\nn    26\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c092b0>",
                "self.obj": "0      881.0\n1      777.0\n2      115.0\n3      107.0\n4      324.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    463.0\n999    749.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 246",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 247",
                "res": "array of shape 246",
                "ri": "array of shape 246",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ng    2015-08-30    6\na    2015-08-24    3\nd    2015-08-29    3\nt    2015-08-27    6\nw    2015-09-01    1\n                  ..\na    2015-08-28    2\np    2015-08-26    1\nh    2015-08-24    1\nt    2015-08-23    1\nd    2015-08-28    1\nName: julie, Length: 246, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51910>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51850>",
                "self.obj": "0      881.0\n1      777.0\n2      115.0\n3      107.0\n4      324.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    463.0\n999    749.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59, 103, 139, 176, 219, 263, 295, 331, 360, 394, 426, 462, 501,\n       543, 571, 608, 638, 674, 705, 731, 771, 809, 848, 892, 933, 970])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([49, 35, 29, 31, 35, 38, 23, 33, 21, 26, 22, 33, 33, 33, 23, 34, 25,\n       32, 25, 22, 33, 30, 33, 36, 35, 32, 26])",
                "res": "array([35, 29, 31, 35, 38, 23, 33, 21, 26, 22, 33, 33, 33, 23, 34, 25, 32,\n       25, 22, 33, 30, 33, 36, 35, 32, 26])",
                "ri": "Index(['g', 's', 'a', 'd', 't', 'w', 'c', 'f', 'v', 'o', 'u', 'x', 'b', 'z',\n       'l', 'e', 'h', 'r', 'm', 'k', 'y', 'j', 'q', 'i', 'p', 'n'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\ng    35\ns    29\na    31\nd    35\nt    38\nw    23\nc    33\nf    21\nv    26\no    22\nu    33\nx    33\nb    33\nz    23\nl    34\ne    25\nh    32\nr    25\nm    22\nk    33\ny    30\nj    33\nq    36\ni    35\np    32\nn    26\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddce50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc160>",
                "self.obj": "0      881.0\n1      777.0\n2      115.0\n3      107.0\n4      324.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998    463.0\n999    749.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 581",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 246",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 247",
                "res": "array of shape 246",
                "ri": "array of shape 246",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \ng    2015-08-30    6\na    2015-08-24    3\nd    2015-08-29    3\nt    2015-08-27    6\nw    2015-09-01    1\n                  ..\na    2015-08-28    2\np    2015-08-26    1\nh    2015-08-24    1\nt    2015-08-23    1\nd    2015-08-28    1\nName: julie, Length: 246, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09610>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c093d0>",
                "self.obj": "0        71\n1       380\n2        46\n3       856\n4        97\n       ... \n9995     97\n9996    752\n9997    322\n9998    939\n9999    707\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([ 71, 380,  46, ..., 322, 939, 707])",
                "codes": "array([  0,   2,   4, ..., 985, 993, 996])",
                "sorter": "array([   0,  765, 2109, ..., 3892, 7359, 6455])",
                "idx": "array([   0,  403,  779, 1164, 1556, 1916, 2292, 2693, 3116, 3484, 3825,\n       4216, 4596, 4951, 5343, 5744, 6134, 6525, 6918, 7319, 7734, 8099,\n       8458, 8842, 9242, 9616])",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([330, 310, 314, 328, 309, 311, 330, 353, 316, 283, 325, 328, 300,\n       312, 325, 324, 319, 329, 328, 338, 316, 302, 316, 327, 320, 318])",
                "res": "array([330, 310, 314, 328, 309, 311, 330, 353, 316, 283, 325, 328, 300,\n       312, 325, 324, 319, 329, 328, 338, 316, 302, 316, 327, 320, 318])",
                "ri": "Index(['z', 'f', 'b', 's', 'e', 'u', 'c', 'i', 'p', 'g', 'k', 'm', 'v', 'n',\n       'q', 'x', 'j', 'r', 'y', 'w', 'l', 'd', 'h', 'o', 'a', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    330\nf    310\nb    314\ns    328\ne    309\nu    311\nc    330\ni    353\np    316\ng    283\nk    325\nm    328\nv    300\nn    312\nq    325\nx    324\nj    319\nr    329\ny    328\nw    338\nl    316\nd    302\nh    316\no    327\na    320\nt    318\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09730>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09820>",
                "self.obj": "0        71\n1       380\n2        46\n3       856\n4        97\n       ... \n9995     97\n9996    752\n9997    322\n9998    939\n9999    707\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([ 71, 380,  46, ..., 322, 939, 707])",
                "codes": "array([  0,  21,  37, ..., 839, 887, 955])",
                "sorter": "array([   0, 7409, 3943, ..., 5384, 5583, 9366])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-30    36\nf    2015-08-24    50\nb    2015-08-25    38\ns    2015-08-25    40\ne    2015-08-30    34\n                   ..\nq    2015-08-26    42\nz    2015-08-29    40\ne    2015-08-27    34\n     2015-08-25    31\nt    2015-09-01    31\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51d30>",
                "self.obj": "0        71.0\n1       380.0\n2        46.0\n3       856.0\n4        97.0\n        ...  \n9995     97.0\n9996    752.0\n9997    322.0\n9998    939.0\n9999    707.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([ 71., 380.,  46., ..., 322., 939., 707.])",
                "codes": "array([ -1,  -1,  -1, ..., 987, 990, 994])",
                "sorter": "array([ 103,  256,  273, ..., 7508, 7359, 6455])",
                "idx": "array([ 589,  963, 1328, 1705, 2048, 2397, 2770, 3166, 3509, 3834, 4198,\n       4559, 4885, 5260, 5635, 5997, 6362, 6726, 7106, 7505, 7845, 8193,\n       8534, 8903, 9280, 9635])",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([404, 267, 261, 279, 257, 253, 275, 296, 269, 235, 267, 271, 240,\n       255, 272, 250, 255, 252, 266, 281, 264, 256, 250, 269, 272, 255,\n       267])",
                "res": "array([267, 261, 279, 257, 253, 275, 296, 269, 235, 267, 271, 240, 255,\n       272, 250, 255, 252, 266, 281, 264, 256, 250, 269, 272, 255, 267])",
                "ri": "Index(['z', 'b', 's', 'e', 'u', 'c', 'i', 'p', 'g', 'k', 'm', 'v', 'n', 'q',\n       'x', 'j', 'r', 'y', 'w', 'l', 'f', 'd', 'h', 'o', 'a', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    267\nb    261\ns    279\ne    257\nu    253\nc    275\ni    296\np    269\ng    235\nk    267\nm    271\nv    240\nn    255\nq    272\nx    250\nj    255\nr    252\ny    266\nw    281\nl    264\nf    256\nd    250\nh    269\no    272\na    255\nt    267\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51bb0>",
                "self.obj": "0        71.0\n1       380.0\n2        46.0\n3       856.0\n4        97.0\n        ...  \n9995     97.0\n9996    752.0\n9997    322.0\n9998    939.0\n9999    707.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([ 71., 380.,  46., ..., 322., 939., 707.])",
                "codes": "array([ -1,  -1,  -1, ..., 843, 844, 936])",
                "sorter": "array([ 103,  256,  273, ..., 5583, 4462, 9366])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-30    27\nb    2015-08-25    31\ne    2015-08-30    22\nu    2015-08-27    33\nc    2015-09-01    39\n                   ..\nf    2015-08-25    23\nz    2015-08-29    24\ne    2015-08-27    27\n     2015-08-25    23\nt    2015-09-01    27\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c097c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09190>",
                "self.obj": "0        71.0\n1       380.0\n2        46.0\n3       856.0\n4        97.0\n        ...  \n9995     97.0\n9996    752.0\n9997    322.0\n9998    939.0\n9999    707.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([ 71., 380.,  46., ..., 322., 939., 707.])",
                "codes": "array([ -1,  -1,  -1, ..., 987, 990, 994])",
                "sorter": "array([ 103,  256,  273, ..., 7508, 7359, 6455])",
                "idx": "array([ 589,  963, 1328, 1705, 2048, 2397, 2770, 3166, 3509, 3834, 4198,\n       4559, 4885, 5260, 5635, 5997, 6362, 6726, 7106, 7505, 7845, 8193,\n       8534, 8903, 9280, 9635])",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([404, 267, 261, 279, 257, 253, 275, 296, 269, 235, 267, 271, 240,\n       255, 272, 250, 255, 252, 266, 281, 264, 256, 250, 269, 272, 255,\n       267])",
                "res": "array([267, 261, 279, 257, 253, 275, 296, 269, 235, 267, 271, 240, 255,\n       272, 250, 255, 252, 266, 281, 264, 256, 250, 269, 272, 255, 267])",
                "ri": "Index(['z', 'b', 's', 'e', 'u', 'c', 'i', 'p', 'g', 'k', 'm', 'v', 'n', 'q',\n       'x', 'j', 'r', 'y', 'w', 'l', 'f', 'd', 'h', 'o', 'a', 't'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nz    267\nb    261\ns    279\ne    257\nu    253\nc    275\ni    296\np    269\ng    235\nk    267\nm    271\nv    240\nn    255\nq    272\nx    250\nj    255\nr    252\ny    266\nw    281\nl    264\nf    256\nd    250\nh    269\no    272\na    255\nt    267\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddce50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc910>",
                "self.obj": "0        71.0\n1       380.0\n2        46.0\n3       856.0\n4        97.0\n        ...  \n9995     97.0\n9996    752.0\n9997    322.0\n9998    939.0\n9999    707.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([ 71., 380.,  46., ..., 322., 939., 707.])",
                "codes": "array([ -1,  -1,  -1, ..., 843, 844, 936])",
                "sorter": "array([ 103,  256,  273, ..., 5583, 4462, 9366])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nz    2015-08-30    27\nb    2015-08-25    31\ne    2015-08-30    22\nu    2015-08-27    33\nc    2015-09-01    39\n                   ..\nf    2015-08-25    23\nz    2015-08-29    24\ne    2015-08-27    27\n     2015-08-25    23\nt    2015-09-01    27\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51b50>",
                "self.obj": "0        483\n1        772\n2        443\n3        382\n4        699\n        ... \n99995     45\n99996    718\n99997    718\n99998    810\n99999    601\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([483, 772, 443, ..., 718, 810, 601])",
                "codes": "array([  0,   0,   1, ..., 999, 999, 999])",
                "sorter": "array([    0, 33456,  9049, ..., 68730, 91932, 92304])",
                "idx": "array([    0,  3894,  7751, 11567, 15371, 19150, 23020, 26819, 30485,\n       34340, 38191, 42047, 45894, 49772, 53623, 57472, 61331, 65161,\n       69040, 72991, 76883, 80764, 84587, 88497, 92373, 96172])",
                "inc": "array([1, 0, 1, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([977, 975, 979, 978, 980, 972, 977, 973, 982, 976, 977, 979, 986,\n       979, 975, 974, 977, 979, 978, 976, 975, 977, 970, 979, 979, 975])",
                "res": "array([977, 975, 979, 978, 980, 972, 977, 973, 982, 976, 977, 979, 986,\n       979, 975, 974, 977, 979, 978, 976, 975, 977, 970, 979, 979, 975])",
                "ri": "Index(['q', 'w', 'z', 'j', 'm', 'r', 'b', 's', 'c', 'i', 'l', 'k', 'v', 'p',\n       'o', 'u', 'g', 'd', 'h', 'e', 'n', 't', 'f', 'a', 'x', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    977\nw    975\nz    979\nj    978\nm    980\nr    972\nb    977\ns    973\nc    982\ni    976\nl    977\nk    979\nv    986\np    979\no    975\nu    974\ng    977\nd    979\nh    978\ne    976\nn    975\nt    977\nf    970\na    979\nx    979\ny    975\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d513a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51c40>",
                "self.obj": "0        483\n1        772\n2        443\n3        382\n4        699\n        ... \n99995     45\n99996    718\n99997    718\n99998    810\n99999    601\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([483, 772, 443, ..., 718, 810, 601])",
                "codes": "array([  0,   2,   3, ..., 989, 989, 999])",
                "sorter": "array([    0, 57695, 42239, ..., 50887, 97559, 16709])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 0, 0, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-23    290\nw    2015-09-01    312\nz    2015-08-26    337\nj    2015-09-01    296\nm    2015-08-29    323\n                  ... \nc    2015-08-30    331\nu    2015-08-28    344\nk    2015-08-26    338\ng    2015-08-23    310\nu    2015-08-23    333\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09280>",
                "self.obj": "0        483.0\n1        772.0\n2        443.0\n3        382.0\n4        699.0\n         ...  \n99995     45.0\n99996    718.0\n99997    718.0\n99998    810.0\n99999    601.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([483., 772., 443., ..., 718., 810., 601.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 53097, 81217, 99223])",
                "idx": "array([ 5883,  9501, 13099, 16675, 20238, 23886, 27488, 30924, 34542,\n       38166, 41812, 45428, 49093, 52709, 56349, 59980, 63564, 67218,\n       70965, 74643, 78293, 81923, 85490, 89166, 92817, 96381])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([995, 950, 950, 956, 954, 950, 948, 942, 958, 943, 944, 947, 961,\n       956, 948, 950, 958, 948, 959, 957, 955, 946, 947, 951, 952, 956,\n       956])",
                "res": "array([950, 950, 956, 954, 950, 948, 942, 958, 943, 944, 947, 961, 956,\n       948, 950, 958, 948, 959, 957, 955, 946, 947, 951, 952, 956, 956])",
                "ri": "Index(['q', 'z', 'j', 'm', 'r', 'b', 's', 'c', 'i', 'l', 'k', 'v', 'p', 'o',\n       'u', 'g', 'd', 'h', 'e', 'n', 'w', 't', 'f', 'a', 'x', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    950\nz    950\nj    956\nm    954\nr    950\nb    948\ns    942\nc    958\ni    943\nl    944\nk    947\nv    961\np    956\no    948\nu    950\ng    958\nd    948\nh    959\ne    957\nn    955\nw    946\nt    947\nf    951\na    952\nx    956\ny    956\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09ee0>",
                "self.obj": "0        483.0\n1        772.0\n2        443.0\n3        382.0\n4        699.0\n         ...  \n99995     45.0\n99996    718.0\n99997    718.0\n99998    810.0\n99999    601.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([483., 772., 443., ..., 718., 810., 601.])",
                "codes": "array([ -1,  -1,  -1, ..., 990, 990, 992])",
                "sorter": "array([  103,   256,   273, ..., 46951, 83914, 67994])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-23    224\nz    2015-08-26    258\nm    2015-08-29    247\nr    2015-09-01    257\nz    2015-08-25    251\n                  ... \nu    2015-08-28    275\nk    2015-08-26    254\ny    2015-08-30    255\ng    2015-08-23    237\nu    2015-08-23    264\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddc9d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddcbe0>",
                "self.obj": "0        483.0\n1        772.0\n2        443.0\n3        382.0\n4        699.0\n         ...  \n99995     45.0\n99996    718.0\n99997    718.0\n99998    810.0\n99999    601.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([483., 772., 443., ..., 718., 810., 601.])",
                "codes": "array([ -1,  -1,  -1, ..., 999, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 53097, 81217, 99223])",
                "idx": "array([ 5883,  9501, 13099, 16675, 20238, 23886, 27488, 30924, 34542,\n       38166, 41812, 45428, 49093, 52709, 56349, 59980, 63564, 67218,\n       70965, 74643, 78293, 81923, 85490, 89166, 92817, 96381])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([995, 950, 950, 956, 954, 950, 948, 942, 958, 943, 944, 947, 961,\n       956, 948, 950, 958, 948, 959, 957, 955, 946, 947, 951, 952, 956,\n       956])",
                "res": "array([950, 950, 956, 954, 950, 948, 942, 958, 943, 944, 947, 961, 956,\n       948, 950, 958, 948, 959, 957, 955, 946, 947, 951, 952, 956, 956])",
                "ri": "Index(['q', 'z', 'j', 'm', 'r', 'b', 's', 'c', 'i', 'l', 'k', 'v', 'p', 'o',\n       'u', 'g', 'd', 'h', 'e', 'n', 'w', 't', 'f', 'a', 'x', 'y'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nq    950\nz    950\nj    956\nm    954\nr    950\nb    948\ns    942\nc    958\ni    943\nl    944\nk    947\nv    961\np    956\no    948\nu    950\ng    958\nd    948\nh    959\ne    957\nn    955\nw    946\nt    947\nf    951\na    952\nx    956\ny    956\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84d60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84370>",
                "self.obj": "0        483.0\n1        772.0\n2        443.0\n3        382.0\n4        699.0\n         ...  \n99995     45.0\n99996    718.0\n99997    718.0\n99998    810.0\n99999    601.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([483., 772., 443., ..., 718., 810., 601.])",
                "codes": "array([ -1,  -1,  -1, ..., 990, 990, 992])",
                "sorter": "array([  103,   256,   273, ..., 46951, 83914, 67994])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 0, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nq    2015-08-23    224\nz    2015-08-26    258\nm    2015-08-29    247\nr    2015-09-01    257\nz    2015-08-25    251\n                  ... \nu    2015-08-28    275\nk    2015-08-26    254\ny    2015-08-30    255\ng    2015-08-23    237\nu    2015-08-23    264\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40f70>",
                "self.obj": "0     0\n1     9\n2     2\n3     1\n4     9\n     ..\n95    8\n96    2\n97    4\n98    3\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  3,  3,  3,  3,  3,\n        4,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  7,  7,  7,\n        7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 11, 12, 12,\n       12, 12, 12, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16, 17, 17,\n       17, 17, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21, 21, 21,\n       22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24])",
                "_": "array([0, 9, 2, 1, 6, 7, 5, 4, 3, 8])",
                "val": "array([0, 9, 2, 1, 9, 2, 6, 7, 1, 7, 2, 5, 2, 4, 4, 0, 5, 6, 2, 4, 2, 3,\n       1, 0, 4, 6, 6, 9, 3, 2, 1, 0, 0, 8, 5, 6, 7, 0, 9, 8, 3, 7, 5, 6,\n       5, 6, 4, 2, 0, 4, 0, 1, 1, 2, 9, 2, 2, 6, 8, 9, 4, 4, 0, 3, 9, 2,\n       0, 1, 9, 3, 3, 5, 4, 3, 2, 9, 3, 5, 8, 9, 2, 7, 2, 3, 9, 5, 8, 1,\n       4, 0, 1, 5, 5, 9, 8, 8, 2, 4, 3, 0])",
                "codes": "array([0, 0, 2, 3, 3, 0, 4, 7, 7, 0, 4, 8, 0, 2, 2, 5, 6, 0, 3, 3, 7, 0,\n       1, 6, 7, 8, 2, 2, 6, 7, 8, 0, 1, 2, 3, 6, 9, 3, 9, 5, 7, 9, 9, 1,\n       8, 1, 2, 8, 9, 2, 2, 4, 4, 7, 9, 9, 6, 8, 2, 2, 2, 2, 0, 0, 4, 6,\n       3, 5, 7, 8, 8, 1, 2, 4, 5, 5, 1, 7, 7, 0, 1, 1, 4, 6, 6, 1, 1, 1,\n       2, 4, 6, 8, 1, 2, 6, 7, 0, 3, 3, 8])",
                "sorter": "array([31, 37, 96, 30, 51, 15, 43, 46, 61, 99, 26, 83, 32, 12, 53, 41, 71,\n       66, 52, 90, 97, 48, 84, 16, 14, 73, 47, 80, 85, 88, 63, 89, 27, 10,\n        8, 77, 58,  3, 94, 81, 24, 33, 95,  4, 70, 93, 74, 98, 86, 20, 82,\n       45, 57, 19, 39, 78, 11, 69, 18, 65, 29, 56, 23, 50, 17, 92, 67,  9,\n       60, 76, 28, 75,  5, 25,  7, 36, 79, 49, 72, 62, 64, 68,  6, 42, 91,\n       38, 54, 59,  2, 35, 44, 21,  1, 55, 34, 13,  0, 22, 87, 40])",
                "idx": "array([ 0,  5,  9, 12, 17, 21, 26, 31, 37, 39, 43, 45, 49, 56, 58, 60, 62,\n       66, 70, 71, 76, 79, 85, 92, 96])",
                "inc": "array([1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 3, 3, 4, 3, 5, 4, 6, 2, 3, 2, 4, 4, 2, 1, 1, 3, 4, 1, 4, 2, 4,\n       5, 4, 3])",
                "res": "array([3, 3, 3, 4, 3, 5, 4, 6, 2, 3, 2, 4, 4, 2, 1, 1, 3, 4, 1, 4, 2, 4,\n       5, 4, 3])",
                "ri": "Index(['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nb    3\nc    3\nd    3\ne    4\nf    3\ng    5\nh    4\ni    6\nj    2\nk    3\nl    2\nm    4\nn    4\no    2\np    1\nq    1\nr    3\ns    4\nt    1\nu    4\nv    2\nw    4\nx    5\ny    4\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40130>",
                "self.obj": "0     0\n1     9\n2     2\n3     1\n4     9\n     ..\n95    8\n96    2\n97    4\n98    3\n99    0\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  1,  2,  3,  4,  5,  6,  6,  7,  8,  8,  9,  9, 10, 11, 12,\n       13, 14, 15, 16, 17, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 26,\n       27, 28, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 37, 38, 38, 39, 40,\n       41, 42, 43, 44, 44, 45, 46, 47, 48, 49, 50, 51, 51, 52, 53, 54, 55,\n       55, 56, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69,\n       70, 71, 71, 72, 72, 72, 73, 74, 75, 76, 76, 77, 78, 79, 79])",
                "_": "array([0, 9, 2, 1, 6, 7, 5, 4, 3, 8])",
                "val": "array([0, 9, 2, 1, 9, 2, 6, 7, 1, 7, 2, 5, 2, 4, 4, 0, 5, 6, 2, 4, 2, 3,\n       1, 0, 4, 6, 6, 9, 3, 2, 1, 0, 0, 8, 5, 6, 7, 0, 9, 8, 3, 7, 5, 6,\n       5, 6, 4, 2, 0, 4, 0, 1, 1, 2, 9, 2, 2, 6, 8, 9, 4, 4, 0, 3, 9, 2,\n       0, 1, 9, 3, 3, 5, 4, 3, 2, 9, 3, 5, 8, 9, 2, 7, 2, 3, 9, 5, 8, 1,\n       4, 0, 1, 5, 5, 9, 8, 8, 2, 4, 3, 0])",
                "codes": "array([3, 0, 2, 0, 3, 4, 0, 7, 7, 0, 4, 8, 2, 6, 2, 5, 0, 7, 3, 0, 3, 0,\n       6, 8, 7, 1, 2, 7, 8, 6, 2, 2, 1, 6, 3, 0, 9, 9, 3, 9, 5, 9, 7, 8,\n       1, 9, 2, 1, 8, 7, 9, 4, 4, 2, 2, 9, 8, 6, 2, 2, 2, 2, 0, 0, 4, 6,\n       7, 5, 8, 3, 8, 1, 5, 5, 2, 4, 7, 7, 1, 6, 4, 6, 1, 0, 1, 2, 1, 8,\n       1, 4, 6, 1, 7, 1, 2, 6, 3, 3, 0, 8])",
                "sorter": "array([30, 31, 96, 37, 51, 43, 15, 46, 61, 99, 26, 83, 12, 71, 53, 41, 32,\n       97, 90, 66, 52, 48, 16, 73, 14, 84, 80, 88, 63, 85, 47, 10, 27, 77,\n        8, 89, 58, 94,  3, 95, 81, 33, 24, 70,  4, 86, 74, 93, 98, 19, 78,\n       45, 57, 82, 20, 39, 69, 11, 65, 18, 29, 56, 23, 50, 17, 92, 60,  9,\n       76, 67, 28, 75,  7, 36,  5, 25, 49, 72, 79, 91,  6, 42, 68, 62, 64,\n        2, 59, 21, 54, 35, 44, 38, 13,  1, 55, 34, 22, 87,  0, 40])",
                "idx": "array([ 0,  1,  3,  4,  5,  6,  7,  9, 10, 12, 14, 15, 16, 17, 18, 19, 20,\n       21, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 35, 37, 38, 39, 40, 42,\n       43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61,\n       62, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 82,\n       83, 84, 85, 86, 88, 91, 92, 93, 94, 96, 97, 98])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 2, 3, 1, 1, 1, 2, 1, 1, 2])",
                "res": "array([1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 2, 3, 1, 1, 1, 2, 1, 1, 2])",
                "ri": "array of shape 80",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nb    2015-08-24    1\n     2015-08-25    2\n     2015-08-27    1\n     2015-09-01    1\nc    2015-08-26    1\n                  ..\ny    2015-08-27    1\n     2015-09-01    2\nz    2015-08-25    1\n     2015-08-26    1\n     2015-09-01    2\nName: julie, Length: 80, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da01f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0850>",
                "self.obj": "0     0.0\n1     9.0\n2     2.0\n3     1.0\n4     9.0\n     ... \n95    8.0\n96    2.0\n97    4.0\n98    3.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,\n        2,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,\n        6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 11,\n       11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 15, 16, 16, 16, 16,\n       17, 17, 17, 17, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21,\n       21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24])",
                "_": "array([0., 9., 2., 1., 6., 5., 4., 3., 8., 7.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  3,  4,  7,  8,  0,  0,  2,  3,  3, -1,  0,  4,  6, -1, -1,\n        0,  0,  2,  2,  5,  9, -1,  3,  6, -1,  0,  5,  6,  7, -1, -1,  2,\n        6,  7, -1, -1,  0,  2,  5,  8,  3,  8,  6,  8,  8,  9,  1,  7,  1,\n        2,  7, -1,  2,  2,  4,  6,  8,  8,  5, -1,  2,  2,  0,  0,  4,  5,\n       -1,  3,  6,  7, -1, -1,  1,  2,  4,  9,  1,  6,  6, -1,  0,  1,  4,\n        5,  5,  1,  1,  1,  2,  5,  7,  2,  5,  6,  0,  3,  3,  7])",
                "sorter": "array([ 1, 18, 52, 35, 69, 86, 31, 37, 96, 30, 51, 46, 15, 43, 61, 26, 83,\n       99, 32, 12, 53, 71, 41, 66, 90, 97, 84, 48, 16, 14, 73, 47, 85, 80,\n       88, 63,  8, 27, 89, 10, 77, 58,  3, 94, 24, 33, 95, 81,  4, 70, 93,\n       74, 98, 45, 20, 82, 57, 19, 39, 78, 11, 65, 29, 56, 23, 50, 17, 92,\n        9, 67, 60, 76, 28,  7, 75,  5, 25, 36, 79, 49, 72, 64, 62, 68,  6,\n       42, 91, 38, 54, 59,  2, 44, 21, 55, 34, 13,  0, 22, 87, 40])",
                "idx": "array([ 6, 11, 15, 18, 23, 26, 31, 36, 42, 44, 48, 50, 53, 60, 61, 62, 64,\n       68, 72, 73, 78, 81, 87, 93, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0,\n       1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 3, 1, 4, 2, 4, 3, 4, 2, 3, 2, 3, 4, 1, 0, 1, 3, 3, 0, 4, 2,\n       4, 4, 3, 3])",
                "res": "array([3, 3, 1, 4, 2, 4, 3, 4, 2, 3, 2, 3, 4, 1, 0, 1, 3, 3, 0, 4, 2, 4,\n       4, 3, 3])",
                "ri": "Index(['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nb    3\nc    3\nd    1\ne    4\nf    2\ng    4\nh    3\ni    4\nj    2\nk    3\nl    2\nm    3\nn    4\no    1\np    0\nq    1\nr    3\ns    3\nt    0\nu    4\nv    2\nw    4\nx    4\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09310>",
                "self.obj": "0     0.0\n1     9.0\n2     2.0\n3     1.0\n4     9.0\n     ... \n95    8.0\n96    2.0\n97    4.0\n98    3.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  6,\n        6,  7,  8,  8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19,\n       20, 21, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 30, 31, 32, 33,\n       34, 35, 35, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44, 45, 46, 46, 47,\n       48, 49, 50, 50, 51, 52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 61,\n       62, 63, 64, 65, 66, 66, 67, 67, 68, 69, 70, 70, 71, 72, 73])",
                "_": "array([0., 9., 2., 1., 6., 5., 4., 3., 8., 7.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  3,  3,  4,  5,  7,  7,  8,  3,  0,  2,  0,  3,  4,  0, -1,\n        6,  0, -1, -1,  2,  5,  2,  9,  0,  6,  3, -1,  0,  5,  7,  6, -1,\n        2,  6,  7, -1, -1,  2, -1, -1,  0,  8,  8,  8,  8,  9,  6,  7,  1,\n        2,  1,  7,  6,  8, -1,  4,  2,  2,  8,  5, -1,  2,  2,  0,  0,  4,\n        5,  6, -1,  7,  3, -1, -1,  1,  9,  2,  4,  6,  6,  1,  5,  4,  5,\n        1,  0, -1,  2,  1,  7,  1,  5,  1,  6,  2,  5,  3,  3,  0])",
                "sorter": "array([ 1, 18,  3, 52, 35, 77, 40, 69, 86, 30, 31, 96, 37, 51, 43, 15, 46,\n       61, 99, 26, 83, 12, 71, 53, 41, 32, 97, 90, 66, 48, 16, 73, 14, 84,\n       80, 88, 63, 85, 47, 10, 27,  8, 89, 58, 94, 95, 33, 81, 24, 70,  4,\n       74, 93, 98, 19, 78, 45, 57, 82, 20, 39, 11, 65, 29, 56, 23, 50, 17,\n       92, 60,  9, 76, 67, 28,  7, 75, 36,  5, 25, 49, 72, 79, 91,  6, 42,\n       68, 62, 64,  2, 59, 21, 54, 44, 38, 13, 55, 34, 22, 87,  0])",
                "idx": "array([ 9, 10, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29,\n       31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50,\n       51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70,\n       72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91,\n       93, 94, 95, 97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 1, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1,\n       2, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0,\n       1, 2, 2, 1, 1, 2, 1, 1, 1])",
                "res": "array([1, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 2,\n       0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1,\n       2, 2, 1, 1, 2, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nb    2015-08-24    1\n     2015-08-25    2\n     2015-08-27    1\n     2015-09-01    1\nc    2015-08-26    1\n                  ..\ny    2015-08-24    1\n     2015-09-01    2\nz    2015-08-25    1\n     2015-08-26    1\n     2015-09-01    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bbb0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7ba30>",
                "self.obj": "0     0.0\n1     9.0\n2     2.0\n3     1.0\n4     9.0\n     ... \n95    8.0\n96    2.0\n97    4.0\n98    3.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,\n        2,  3,  3,  3,  3,  3,  4,  4,  4,  5,  5,  5,  5,  5,  6,  6,  6,\n        6,  6,  7,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9, 10, 10, 11,\n       11, 11, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 15, 16, 16, 16, 16,\n       17, 17, 17, 17, 18, 19, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 21,\n       21, 21, 22, 22, 22, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24])",
                "_": "array([0., 9., 2., 1., 6., 5., 4., 3., 8., 7.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  3,  4,  7,  8,  0,  0,  2,  3,  3, -1,  0,  4,  6, -1, -1,\n        0,  0,  2,  2,  5,  9, -1,  3,  6, -1,  0,  5,  6,  7, -1, -1,  2,\n        6,  7, -1, -1,  0,  2,  5,  8,  3,  8,  6,  8,  8,  9,  1,  7,  1,\n        2,  7, -1,  2,  2,  4,  6,  8,  8,  5, -1,  2,  2,  0,  0,  4,  5,\n       -1,  3,  6,  7, -1, -1,  1,  2,  4,  9,  1,  6,  6, -1,  0,  1,  4,\n        5,  5,  1,  1,  1,  2,  5,  7,  2,  5,  6,  0,  3,  3,  7])",
                "sorter": "array([ 1, 18, 52, 35, 69, 86, 31, 37, 96, 30, 51, 46, 15, 43, 61, 26, 83,\n       99, 32, 12, 53, 71, 41, 66, 90, 97, 84, 48, 16, 14, 73, 47, 85, 80,\n       88, 63,  8, 27, 89, 10, 77, 58,  3, 94, 24, 33, 95, 81,  4, 70, 93,\n       74, 98, 45, 20, 82, 57, 19, 39, 78, 11, 65, 29, 56, 23, 50, 17, 92,\n        9, 67, 60, 76, 28,  7, 75,  5, 25, 36, 79, 49, 72, 64, 62, 68,  6,\n       42, 91, 38, 54, 59,  2, 44, 21, 55, 34, 13,  0, 22, 87, 40])",
                "idx": "array([ 6, 11, 15, 18, 23, 26, 31, 36, 42, 44, 48, 50, 53, 60, 61, 62, 64,\n       68, 72, 73, 78, 81, 87, 93, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1,\n       1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0,\n       1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1,\n       0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 3, 1, 4, 2, 4, 3, 4, 2, 3, 2, 3, 4, 1, 0, 1, 3, 3, 0, 4, 2,\n       4, 4, 3, 3])",
                "res": "array([3, 3, 1, 4, 2, 4, 3, 4, 2, 3, 2, 3, 4, 1, 0, 1, 3, 3, 0, 4, 2, 4,\n       4, 3, 3])",
                "ri": "Index(['b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\n       'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\nb    3\nc    3\nd    1\ne    4\nf    2\ng    4\nh    3\ni    4\nj    2\nk    3\nl    2\nm    3\nn    4\no    1\np    0\nq    1\nr    3\ns    3\nt    0\nu    4\nv    2\nw    4\nx    4\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bc70>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bc10>",
                "self.obj": "0     0.0\n1     9.0\n2     2.0\n3     1.0\n4     9.0\n     ... \n95    8.0\n96    2.0\n97    4.0\n98    3.0\n99    0.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  1,  2,  3,  4,  5,  6,\n        6,  7,  8,  8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19,\n       20, 21, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 30, 30, 31, 32, 33,\n       34, 35, 35, 36, 37, 38, 39, 40, 41, 41, 42, 43, 44, 45, 46, 46, 47,\n       48, 49, 50, 50, 51, 52, 53, 53, 54, 55, 56, 57, 58, 59, 60, 61, 61,\n       62, 63, 64, 65, 66, 66, 67, 67, 68, 69, 70, 70, 71, 72, 73])",
                "_": "array([0., 9., 2., 1., 6., 5., 4., 3., 8., 7.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  2,  3,  3,  4,  5,  7,  7,  8,  3,  0,  2,  0,  3,  4,  0, -1,\n        6,  0, -1, -1,  2,  5,  2,  9,  0,  6,  3, -1,  0,  5,  7,  6, -1,\n        2,  6,  7, -1, -1,  2, -1, -1,  0,  8,  8,  8,  8,  9,  6,  7,  1,\n        2,  1,  7,  6,  8, -1,  4,  2,  2,  8,  5, -1,  2,  2,  0,  0,  4,\n        5,  6, -1,  7,  3, -1, -1,  1,  9,  2,  4,  6,  6,  1,  5,  4,  5,\n        1,  0, -1,  2,  1,  7,  1,  5,  1,  6,  2,  5,  3,  3,  0])",
                "sorter": "array([ 1, 18,  3, 52, 35, 77, 40, 69, 86, 30, 31, 96, 37, 51, 43, 15, 46,\n       61, 99, 26, 83, 12, 71, 53, 41, 32, 97, 90, 66, 48, 16, 73, 14, 84,\n       80, 88, 63, 85, 47, 10, 27,  8, 89, 58, 94, 95, 33, 81, 24, 70,  4,\n       74, 93, 98, 19, 78, 45, 57, 82, 20, 39, 11, 65, 29, 56, 23, 50, 17,\n       92, 60,  9, 76, 67, 28,  7, 75, 36,  5, 25, 49, 72, 79, 91,  6, 42,\n       68, 62, 64,  2, 59, 21, 54, 44, 38, 13, 55, 34, 22, 87,  0])",
                "idx": "array([ 9, 10, 12, 13, 14, 15, 16, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29,\n       31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 49, 50,\n       51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70,\n       72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 91,\n       93, 94, 95, 97, 98, 99])",
                "inc": "array([1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([7, 1, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1,\n       2, 0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0,\n       1, 2, 2, 1, 1, 2, 1, 1, 1])",
                "res": "array([1, 2, 1, 1, 1, 1, 1, 1, 0, 2, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 2,\n       0, 0, 1, 0, 0, 2, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 0, 1, 1, 2, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 0, 1,\n       2, 2, 1, 1, 2, 1, 1, 1])",
                "ri": "array of shape 74",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \nb    2015-08-24    1\n     2015-08-25    2\n     2015-08-27    1\n     2015-09-01    1\nc    2015-08-26    1\n                  ..\ny    2015-08-24    1\n     2015-09-01    2\nz    2015-08-25    1\n     2015-08-26    1\n     2015-09-01    1\nName: julie, Length: 74, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c092e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09cd0>",
                "self.obj": "0      0\n1      7\n2      0\n3      7\n4      9\n      ..\n995    0\n996    4\n997    5\n998    4\n999    5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([0, 7, 9, 6, 2, 4, 1, 8, 3, 5])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  36,  82, 121, 149, 192, 230, 270, 314, 351, 393, 423, 467,\n       499, 544, 577, 616, 660, 703, 740, 776, 816, 843, 875, 914, 957])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([10, 10, 10,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10,  9, 10, 10, 10, 10])",
                "res": "array([10, 10, 10,  9, 10, 10, 10, 10, 10, 10,  9, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10,  9, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd     9\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk     9\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr     9\ns    10\nt    10\nu    10\nv     9\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c092e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09730>",
                "self.obj": "0      0\n1      7\n2      0\n3      7\n4      9\n      ..\n995    0\n996    4\n997    5\n998    4\n999    5\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([0, 7, 9, 6, 2, 4, 1, 8, 3, 5])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 255",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 255",
                "res": "array of shape 255",
                "ri": "array of shape 255",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    4\n     2015-08-25    4\n     2015-08-26    1\n     2015-08-27    4\n                  ..\nz    2015-08-28    4\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 255, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84af0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84100>",
                "self.obj": "0      0.0\n1      7.0\n2      0.0\n3      7.0\n4      9.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([0., 7., 9., 6., 2., 1., 4., 8., 3., 5.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  90, 132, 170, 196, 236, 274, 310, 353, 386, 425, 454, 495,\n       524, 566, 598, 636, 679, 720, 755, 790, 828, 853, 882, 920, 959])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([ 9, 10, 10, 10,  8,  9, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10,\n       10,  9, 10, 10, 10,  8, 10, 10, 10, 10])",
                "res": "array([10, 10, 10,  8,  9, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10,  8, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd     8\ne     9\nf    10\ng     9\nh    10\ni     9\nj     9\nk     9\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr     9\ns    10\nt    10\nu    10\nv     8\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118ddca60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118ddc040>",
                "self.obj": "0      0.0\n1      7.0\n2      0.0\n3      7.0\n4      9.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([0., 7., 9., 6., 2., 1., 4., 8., 3., 5.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 253",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    4\n     2015-08-26    1\n     2015-08-27    3\n                  ..\nz    2015-08-28    3\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    2\n     2015-09-01    2\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d686d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d68df0>",
                "self.obj": "0      0.0\n1      7.0\n2      0.0\n3      7.0\n4      9.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([0., 7., 9., 6., 2., 1., 4., 8., 3., 5.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  90, 132, 170, 196, 236, 274, 310, 353, 386, 425, 454, 495,\n       524, 566, 598, 636, 679, 720, 755, 790, 828, 853, 882, 920, 959])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([ 9, 10, 10, 10,  8,  9, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10,\n       10,  9, 10, 10, 10,  8, 10, 10, 10, 10])",
                "res": "array([10, 10, 10,  8,  9, 10,  9, 10,  9,  9,  9, 10, 10, 10, 10, 10, 10,\n        9, 10, 10, 10,  8, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd     8\ne     9\nf    10\ng     9\nh    10\ni     9\nj     9\nk     9\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr     9\ns    10\nt    10\nu    10\nv     8\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d68df0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d68460>",
                "self.obj": "0      0.0\n1      7.0\n2      0.0\n3      7.0\n4      9.0\n      ... \n995    NaN\n996    NaN\n997    NaN\n998    4.0\n999    5.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([0., 7., 9., 6., 2., 1., 4., 8., 3., 5.])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 252",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 253",
                "res": "array of shape 252",
                "ri": "array of shape 252",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    2\n     2015-08-25    4\n     2015-08-26    1\n     2015-08-27    3\n                  ..\nz    2015-08-28    3\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    2\n     2015-09-01    2\nName: julie, Length: 252, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51b50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d513d0>",
                "self.obj": "0       3\n1       2\n2       5\n3       7\n4       8\n       ..\n9995    7\n9996    4\n9997    4\n9998    6\n9999    6\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([3, 2, 5, 7, 8, 0, 4, 1, 9, 6])",
                "val": "array([3, 2, 5, ..., 4, 6, 6])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([  59,  225,  228, ..., 9520, 9587, 9670])",
                "idx": "array([   0,  423,  809, 1181, 1563, 1927, 2287, 2696, 3064, 3459, 3837,\n       4186, 4559, 4948, 5342, 5725, 6122, 6516, 6902, 7290, 7678, 8074,\n       8459, 8827, 9223, 9612])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d515b0>",
                "self.obj": "0       3\n1       2\n2       5\n3       7\n4       8\n       ..\n9995    7\n9996    4\n9997    4\n9998    6\n9999    6\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([3, 2, 5, 7, 8, 0, 4, 1, 9, 6])",
                "val": "array([3, 2, 5, ..., 4, 6, 6])",
                "codes": "array([0, 1, 1, ..., 8, 9, 9])",
                "sorter": "array([9426, 4571, 6097, ..., 6789, 5559, 6234])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 0, ..., 0, 1, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09ee0>",
                "self.obj": "0       3.0\n1       2.0\n2       5.0\n3       7.0\n4       8.0\n       ... \n9995    7.0\n9996    4.0\n9997    4.0\n9998    6.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 2., 5., 7., 8., 0., 4., 1., 9., 6.])",
                "val": "array([3., 2., 5., ..., 4., 6., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9520, 9587, 9670])",
                "idx": "array([ 589,  988, 1355, 1698, 2055, 2404, 2741, 3124, 3465, 3845, 4199,\n       4523, 4874, 5238, 5611, 5972, 6348, 6723, 7085, 7453, 7810, 8184,\n       8551, 8901, 9279, 9640])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c094f0>",
                "self.obj": "0       3.0\n1       2.0\n2       5.0\n3       7.0\n4       8.0\n       ... \n9995    7.0\n9996    4.0\n9997    4.0\n9998    6.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 2., 5., 7., 8., 0., 4., 1., 9., 6.])",
                "val": "array([3., 2., 5., ..., 4., 6., 6.])",
                "codes": "array([-1, -1, -1, ...,  8,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 6789, 5559, 6234])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25     9\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31     9\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84d90>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d847c0>",
                "self.obj": "0       3.0\n1       2.0\n2       5.0\n3       7.0\n4       8.0\n       ... \n9995    7.0\n9996    4.0\n9997    4.0\n9998    6.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 2., 5., 7., 8., 0., 4., 1., 9., 6.])",
                "val": "array([3., 2., 5., ..., 4., 6., 6.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 9520, 9587, 9670])",
                "idx": "array([ 589,  988, 1355, 1698, 2055, 2404, 2741, 3124, 3465, 3845, 4199,\n       4523, 4874, 5238, 5611, 5972, 6348, 6723, 7085, 7453, 7810, 8184,\n       8551, 8901, 9279, 9640])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d847c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d841c0>",
                "self.obj": "0       3.0\n1       2.0\n2       5.0\n3       7.0\n4       8.0\n       ... \n9995    7.0\n9996    4.0\n9997    4.0\n9998    6.0\n9999    6.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 2., 5., 7., 8., 0., 4., 1., 9., 6.])",
                "val": "array([3., 2., 5., ..., 4., 6., 6.])",
                "codes": "array([-1, -1, -1, ...,  8,  9,  9])",
                "sorter": "array([ 103,  256,  273, ..., 6789, 5559, 6234])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25     9\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28     9\n     2015-08-29     9\n     2015-08-30    10\n     2015-08-31     9\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da0970>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0160>",
                "self.obj": "0        3\n1        7\n2        8\n3        8\n4        0\n        ..\n99995    2\n99996    7\n99997    9\n99998    2\n99999    7\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([3, 7, 8, 0, 2, 6, 9, 1, 4, 5])",
                "val": "array([3, 7, 8, ..., 9, 2, 7])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([   41,    83,   369, ..., 99225, 99693, 99841])",
                "idx": "array([    0,  3854,  7681, 11495, 15304, 19098, 23012, 26908, 30710,\n       34622, 38437, 42149, 46099, 49938, 53718, 57597, 61501, 65322,\n       69165, 73018, 76850, 80574, 84440, 88259, 92162, 96136])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09850>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09880>",
                "self.obj": "0        3\n1        7\n2        8\n3        8\n4        0\n        ..\n99995    2\n99996    7\n99997    9\n99998    2\n99999    7\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([3, 7, 8, 0, 2, 6, 9, 1, 4, 5])",
                "val": "array([3, 7, 8, ..., 9, 2, 7])",
                "codes": "array([0, 0, 0, ..., 9, 9, 9])",
                "sorter": "array([ 2815,  4177,  9277, ..., 98640, 98750, 99225])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51fd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d513a0>",
                "self.obj": "0        3.0\n1        7.0\n2        8.0\n3        8.0\n4        0.0\n        ... \n99995    2.0\n99996    7.0\n99997    9.0\n99998    2.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 7., 8., 0., 2., 6., 1., 4., 5., 9.])",
                "val": "array([3., 7., 8., ..., 9., 2., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99611, 99789, 99997])",
                "idx": "array([ 5883,  9511, 13098, 16699, 20304, 23866, 27565, 31231, 34818,\n       38511, 42112, 45597, 49324, 52950, 56503, 60163, 63822, 67385,\n       71000, 74633, 78244, 81741, 85389, 88961, 92640, 96356])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51100>",
                "self.obj": "0        3.0\n1        7.0\n2        8.0\n3        8.0\n4        0.0\n        ... \n99995    2.0\n99996    7.0\n99997    9.0\n99998    2.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 7., 8., 0., 2., 6., 1., 4., 5., 9.])",
                "val": "array([3., 7., 8., ..., 9., 2., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 84371, 97415, 98250])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84dc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84430>",
                "self.obj": "0        3.0\n1        7.0\n2        8.0\n3        8.0\n4        0.0\n        ... \n99995    2.0\n99996    7.0\n99997    9.0\n99998    2.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array([3., 7., 8., 0., 2., 6., 1., 4., 5., 9.])",
                "val": "array([3., 7., 8., ..., 9., 2., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 99611, 99789, 99997])",
                "idx": "array([ 5883,  9511, 13098, 16699, 20304, 23866, 27565, 31231, 34818,\n       38511, 42112, 45597, 49324, 52950, 56503, 60163, 63822, 67385,\n       71000, 74633, 78244, 81741, 85389, 88961, 92640, 96356])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "res": "array([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n       10, 10, 10, 10, 10, 10, 10, 10, 10])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    10\nb    10\nc    10\nd    10\ne    10\nf    10\ng    10\nh    10\ni    10\nj    10\nk    10\nl    10\nm    10\nn    10\no    10\np    10\nq    10\nr    10\ns    10\nt    10\nu    10\nv    10\nw    10\nx    10\ny    10\nz    10\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84d90>",
                "self.obj": "0        3.0\n1        7.0\n2        8.0\n3        8.0\n4        0.0\n        ... \n99995    2.0\n99996    7.0\n99997    9.0\n99998    2.0\n99999    7.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array([3., 7., 8., 0., 2., 6., 1., 4., 5., 9.])",
                "val": "array([3., 7., 8., ..., 9., 2., 7.])",
                "codes": "array([-1, -1, -1, ...,  9,  9,  9])",
                "sorter": "array([  103,   256,   273, ..., 84371, 97415, 98250])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    10\n     2015-08-24    10\n     2015-08-25    10\n     2015-08-26    10\n     2015-08-27    10\n                   ..\nz    2015-08-28    10\n     2015-08-29    10\n     2015-08-30    10\n     2015-08-31    10\n     2015-09-01    10\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d512e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51970>",
                "self.obj": "0     85\n1     16\n2     74\n3      2\n4     43\n      ..\n95    49\n96    94\n97    54\n98    74\n99    41\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  1,  2,  2,  2,  2,  3,  4,  4,  4,  5,  5,  5,  5,  6,\n        6,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,\n        9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13,\n       13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,\n       17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "array([85, 16, 74,  2, 43, 84, 32, 22, 98, 53, 58, 73, 28, 83, 14, 76, 51,\n       86, 72, 52, 13,  7, 12, 69, 54, 17, 34, 92, 35, 39,  4, 88,  8, 49,\n       36, 80, 60, 47, 65, 11, 75, 71, 66, 31, 24, 99,  9, 46, 19, 62, 23,\n       57,  3, 95, 56, 37, 33, 61, 18, 59, 96, 94, 10, 91, 89, 41])",
                "val": "array([85, 16, 74,  2, 43, 74, 84, 32, 22, 98, 53, 58, 84, 73, 28, 83, 14,\n       76, 51, 86, 72, 52, 13,  7, 53, 12, 74, 69, 54, 17, 34, 92, 35, 72,\n       39,  4, 88,  8, 49, 36, 80, 60, 69, 47,  8, 49, 65, 47, 65, 11, 75,\n       71, 66,  8, 31, 28, 24, 99,  9, 92, 46, 19, 58, 62, 12, 23, 17, 57,\n        3, 95, 56, 37, 85, 46, 33, 31, 61,  2, 76, 33, 18, 61, 59, 62, 96,\n       35, 83, 61, 94, 32, 10, 91, 73, 89, 34, 49, 94, 54, 74, 41])",
                "codes": "array([ 4, 15, 26, 18,  0,  2, 42, 60,  8,  2, 11, 22, 17, 24, 55, 57,  6,\n       12, 15, 19, 32, 37, 58, 33, 44, 47, 27, 30, 32, 43, 48, 18, 38, 47,\n       65, 32, 53, 56,  7, 11, 16, 63,  2,  2, 10, 23, 36, 41, 56, 57, 24,\n       31, 43, 52, 62,  9, 25, 26, 54,  1, 22, 27, 28, 13, 20, 46, 61, 14,\n       45, 49,  6, 10, 13, 38, 50,  5, 21, 23, 37, 51, 59, 64,  3, 28, 33,\n        0,  3, 25, 29, 34,  9, 12, 33, 35, 40, 49, 57,  5, 39, 61])",
                "sorter": "array([ 4, 17, 30, 20,  0,  5, 52, 84,  9, 26, 92, 25, 19, 28, 71, 87, 89,\n       14, 78, 21, 53, 47, 80, 45, 56, 73, 31, 35, 44, 75, 61, 33, 46, 60,\n       99, 37, 69, 79,  8, 13, 18, 91,  2, 98, 62, 27, 41, 51, 74, 81, 97,\n       36, 54, 68, 90, 24, 29, 94, 70,  1, 64, 59, 85, 86, 22, 58, 96, 16,\n       57, 83,  7, 11, 15, 48, 65, 12, 23, 42, 43, 67, 82, 93,  3, 32, 95,\n       72, 77, 66, 34, 39, 10, 55, 38, 40, 50, 63, 76,  6, 49, 88])",
                "idx": "array([ 0,  3,  4,  8,  9, 12, 16, 23, 26, 31, 35, 38, 42, 50, 55, 59, 63,\n       67, 70, 75, 82, 85, 90, 92, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([3, 1, 4, 1, 3, 4, 7, 3, 5, 4, 3, 4, 7, 5, 4, 4, 4, 3, 5, 7, 3, 5,\n       2, 5, 3])",
                "res": "array([3, 1, 4, 1, 3, 4, 7, 3, 5, 4, 3, 4, 7, 5, 4, 4, 4, 3, 5, 7, 3, 5,\n       2, 5, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    1\nc    4\nd    1\ne    3\nf    4\ng    7\nh    3\ni    5\nj    4\nk    3\nl    4\nm    7\nn    5\no    4\np    4\nq    4\nr    3\ns    5\nt    7\nu    3\nv    5\nx    2\ny    5\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d510a0>",
                "self.obj": "0     85\n1     16\n2     74\n3      2\n4     43\n      ..\n95    49\n96    94\n97    54\n98    74\n99    41\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 10, 11, 12, 13, 14, 15,\n       16, 17, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 25, 26, 27, 27, 28,\n       28, 29, 30, 30, 31, 31, 32, 32, 33, 34, 35, 36, 36, 36, 37, 38, 39,\n       39, 40, 41, 42, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 52, 53,\n       54, 54, 55, 55, 56, 56, 57, 58, 58, 59, 60, 61, 61, 62, 63, 64, 65,\n       66, 67, 67, 68, 69, 70, 70, 71, 71, 72, 73, 74, 75, 76, 77])",
                "_": "array([85, 16, 74,  2, 43, 84, 32, 22, 98, 53, 58, 73, 28, 83, 14, 76, 51,\n       86, 72, 52, 13,  7, 12, 69, 54, 17, 34, 92, 35, 39,  4, 88,  8, 49,\n       36, 80, 60, 47, 65, 11, 75, 71, 66, 31, 24, 99,  9, 46, 19, 62, 23,\n       57,  3, 95, 56, 37, 33, 61, 18, 59, 96, 94, 10, 91, 89, 41])",
                "val": "array([85, 16, 74,  2, 43, 74, 84, 32, 22, 98, 53, 58, 84, 73, 28, 83, 14,\n       76, 51, 86, 72, 52, 13,  7, 53, 12, 74, 69, 54, 17, 34, 92, 35, 72,\n       39,  4, 88,  8, 49, 36, 80, 60, 69, 47,  8, 49, 65, 47, 65, 11, 75,\n       71, 66,  8, 31, 28, 24, 99,  9, 92, 46, 19, 58, 62, 12, 23, 17, 57,\n        3, 95, 56, 37, 85, 46, 33, 31, 61,  2, 76, 33, 18, 61, 59, 62, 96,\n       35, 83, 61, 94, 32, 10, 91, 73, 89, 34, 49, 94, 54, 74, 41])",
                "codes": "array([26,  4, 15, 18,  0, 42,  2, 60,  8, 22,  2, 11, 24, 57, 55, 17,  6,\n       15, 12, 19, 58, 37, 32, 33, 47, 44, 43, 48, 30, 32, 27, 18, 38, 47,\n       65, 53, 32, 56, 11, 63,  7, 16, 23, 56, 10,  2,  2, 57, 36, 41, 52,\n       62, 24, 43, 31, 54, 26, 25,  9, 27, 28,  1, 22, 20, 46, 13, 61, 49,\n       14, 45, 10, 13,  6, 50, 38, 37, 64, 21, 51,  5, 23, 59, 28,  3, 33,\n       29,  0, 25,  3, 34,  9, 12, 35, 49, 33, 40, 57, 61, 39,  5])",
                "sorter": "array([30,  4, 17, 20,  0, 52,  5, 84,  9, 25, 26, 92, 28, 87, 71, 19, 89,\n       78, 14, 21, 80, 47, 53, 45, 73, 56, 75, 61, 35, 44, 31, 33, 46, 60,\n       99, 69, 37, 79, 13, 91,  8, 18, 27, 74, 62,  2, 98, 81, 41, 51, 68,\n       90, 97, 54, 36, 70, 94, 29, 24, 59, 85,  1, 64, 22, 58, 86, 96, 83,\n       16, 57, 11, 15,  7, 65, 48, 43, 93, 23, 67, 12, 42, 82, 32,  3, 95,\n       34, 72, 66, 77, 39, 10, 55, 40, 63, 38, 50, 76, 88, 49,  6])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 12, 13, 14, 15, 16, 17,\n       18, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 33, 35, 36, 38, 40, 42,\n       43, 44, 45, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63,\n       64, 65, 67, 68, 70, 72, 74, 75, 77, 78, 79, 81, 82, 83, 84, 85, 86,\n       88, 89, 90, 92, 94, 95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 2, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 78",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-09-01    1\nb    2015-08-31    1\nc    2015-08-27    1\n                  ..\ny    2015-08-29    1\n     2015-09-01    1\nz    2015-08-25    1\n     2015-08-28    1\n     2015-08-30    1\nName: julie, Length: 78, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e255e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25520>",
                "self.obj": "0     85.0\n1     16.0\n2     74.0\n3      2.0\n4     43.0\n      ... \n95    49.0\n96    94.0\n97    54.0\n98    74.0\n99    41.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  2,  3,  4,  4,  4,\n        5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,\n        8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12,\n       12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17,\n       17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "array([85., 16., 74.,  2., 43., 84., 53., 58., 73., 28., 83., 14., 76.,\n       51., 86., 72., 52., 13.,  7., 12., 17., 34., 92., 35., 39.,  4.,\n       88.,  8., 49., 36., 80., 60., 69., 47., 65., 11., 75., 71., 66.,\n       31., 24., 99.,  9., 46., 19., 62., 57.,  3., 95., 56., 37., 33.,\n       61., 18., 59., 94., 32., 10., 91., 89., 54., 41.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 10, 13, 25, 38, 48,  4, 12, 21, 15, -1,  0,  2, -1, -1,  8, 19,\n       -1, 14, 50, 52, -1,  9, 12, 16, 27, 53, 56, -1, 40, 43, 22, 27, 39,\n       44, -1, 15, 43, 61, 27, 51, -1,  8, 58, -1,  2,  2,  7, 31, 37, 51,\n       52, 26, 39, 47, 57, 60,  6, 20, 21, 49, -1, -1, 22, 17, 42, 55, -1,\n       11, 41, -1, -1,  7, 10, 34,  5, 18, 32, 33, 46, 54, 59,  3, 23, 28,\n       -1,  0,  3, 24, 29,  6,  9, 28, 30, 36, 45, 52,  5, 35, 55])",
                "sorter": "array([ 1, 86, 18, 35, 52, 69,  4, 17, 30, 20, 84,  0,  5,  9, 26, 92, 25,\n       28, 19, 71, 87, 47, 14, 78, 21, 53, 80, 89, 45, 56, 73, 31, 44, 75,\n       61, 46, 33, 60, 99, 37, 79,  8, 13, 91, 27,  2, 98, 62, 41, 51, 74,\n       81, 36, 54, 68, 90, 97, 24, 29, 94, 70, 64, 85, 59, 22, 58, 96, 83,\n       16, 57,  7, 65, 11, 15, 48, 12, 23, 42, 43, 67, 82, 93,  3, 32, 95,\n       66, 72, 77, 34, 39, 10, 55, 38, 40, 50, 63, 76,  6, 49, 88])",
                "idx": "array([ 6,  9, 10, 13, 14, 17, 21, 28, 31, 35, 39, 41, 44, 52, 57, 61, 64,\n       67, 70, 75, 82, 85, 90, 92, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 1, 2, 0, 2, 3, 6, 2, 4, 3, 2, 2, 6, 5, 4, 1, 3, 2, 3, 7, 3,\n       4, 2, 5, 3])",
                "res": "array([3, 1, 2, 0, 2, 3, 6, 2, 4, 3, 2, 2, 6, 5, 4, 1, 3, 2, 3, 7, 3, 4,\n       2, 5, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    1\nc    2\nd    0\ne    2\nf    3\ng    6\nh    2\ni    4\nj    3\nk    2\nl    2\nm    6\nn    5\no    4\np    1\nq    3\nr    2\ns    3\nt    7\nu    3\nv    4\nx    2\ny    5\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118e25b20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118e25d60>",
                "self.obj": "0     85.0\n1     16.0\n2     74.0\n3      2.0\n4     43.0\n      ... \n95    49.0\n96    94.0\n97    54.0\n98    74.0\n99    41.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22,\n       23, 23, 24, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 33, 34,\n       34, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47,\n       48, 49, 50, 51, 51, 52, 52, 53, 53, 54, 55, 55, 56, 57, 58, 58, 59,\n       60, 61, 62, 63, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71, 72])",
                "_": "array([85., 16., 74.,  2., 43., 84., 53., 58., 73., 28., 83., 14., 76.,\n       51., 86., 72., 52., 13.,  7., 12., 17., 34., 92., 35., 39.,  4.,\n       88.,  8., 49., 36., 80., 60., 69., 47., 65., 11., 75., 71., 66.,\n       31., 24., 99.,  9., 46., 19., 62., 57.,  3., 95., 56., 37., 33.,\n       61., 18., 59., 94., 32., 10., 91., 89., 54., 41.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3,  3, 10, 13, 25, 30, 38, 48, 21,  4, 12, 15,  0,  2, -1, -1,\n       19, -1,  8, -1, 52, 50, 14, 56, 12,  9, 16, 53, -1, 27, -1, 43, 40,\n       39, 44, 27, 22, -1, 15, 43, 61, 27, 51,  8, 58, -1, -1, 51,  7,  2,\n        2, 52, 31, 37, 47, 57, 60, 39, 26, 49, 21, 20,  6, -1, 22, -1, 17,\n       42, 55, -1, 11, 41,  7, 10, -1, -1, 34, 33, 59, 18, 46,  5, 32, 54,\n       23, 28, 24, -1,  0, 29,  6,  9, 45, 28, 36, 52, 55, 35,  5])",
                "sorter": "array([ 1,  3, 77, 86, 18, 35, 40, 52, 69, 30,  4, 17, 20,  0,  5, 84,  9,\n       25, 26, 92, 28, 87, 71, 19, 89, 78, 14, 21, 80, 47, 53, 45, 73, 56,\n       75, 61, 44, 31, 46, 33, 60, 99, 37, 79, 13, 91,  8, 27, 74, 62,  2,\n       98, 81, 41, 51, 68, 90, 97, 54, 36, 70, 94, 29, 24, 85, 59, 64, 22,\n       58, 96, 83, 16, 57, 11, 15,  7, 65, 48, 43, 93, 23, 67, 12, 42, 82,\n       32, 95, 34, 66, 72, 39, 10, 55, 63, 38, 50, 76, 88, 49,  6])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26,\n       28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49,\n       50, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70,\n       71, 73, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 93, 94,\n       95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([8, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 0,\n       1, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 0, 1,\n       1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 73",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-09-01    1\nb    2015-08-31    1\nc    2015-08-27    1\n                  ..\ny    2015-08-29    1\n     2015-09-01    1\nz    2015-08-25    1\n     2015-08-28    1\n     2015-08-30    1\nName: julie, Length: 73, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d518e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51940>",
                "self.obj": "0     85.0\n1     16.0\n2     74.0\n3      2.0\n4     43.0\n      ... \n95    49.0\n96    94.0\n97    54.0\n98    74.0\n99    41.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  1,  2,  2,  2,  3,  4,  4,  4,\n        5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,\n        8,  9,  9,  9,  9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12,\n       12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17,\n       17, 17, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,\n       21, 21, 21, 21, 21, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24])",
                "_": "array([85., 16., 74.,  2., 43., 84., 53., 58., 73., 28., 83., 14., 76.,\n       51., 86., 72., 52., 13.,  7., 12., 17., 34., 92., 35., 39.,  4.,\n       88.,  8., 49., 36., 80., 60., 69., 47., 65., 11., 75., 71., 66.,\n       31., 24., 99.,  9., 46., 19., 62., 57.,  3., 95., 56., 37., 33.,\n       61., 18., 59., 94., 32., 10., 91., 89., 54., 41.])",
                "val": "array of shape 100",
                "codes": "array([ 1, 10, 13, 25, 38, 48,  4, 12, 21, 15, -1,  0,  2, -1, -1,  8, 19,\n       -1, 14, 50, 52, -1,  9, 12, 16, 27, 53, 56, -1, 40, 43, 22, 27, 39,\n       44, -1, 15, 43, 61, 27, 51, -1,  8, 58, -1,  2,  2,  7, 31, 37, 51,\n       52, 26, 39, 47, 57, 60,  6, 20, 21, 49, -1, -1, 22, 17, 42, 55, -1,\n       11, 41, -1, -1,  7, 10, 34,  5, 18, 32, 33, 46, 54, 59,  3, 23, 28,\n       -1,  0,  3, 24, 29,  6,  9, 28, 30, 36, 45, 52,  5, 35, 55])",
                "sorter": "array([ 1, 86, 18, 35, 52, 69,  4, 17, 30, 20, 84,  0,  5,  9, 26, 92, 25,\n       28, 19, 71, 87, 47, 14, 78, 21, 53, 80, 89, 45, 56, 73, 31, 44, 75,\n       61, 46, 33, 60, 99, 37, 79,  8, 13, 91, 27,  2, 98, 62, 41, 51, 74,\n       81, 36, 54, 68, 90, 97, 24, 29, 94, 70, 64, 85, 59, 22, 58, 96, 83,\n       16, 57,  7, 65, 11, 15, 48, 12, 23, 42, 43, 67, 82, 93,  3, 32, 95,\n       66, 72, 77, 34, 39, 10, 55, 38, 40, 50, 63, 76,  6, 49, 88])",
                "idx": "array([ 6,  9, 10, 13, 14, 17, 21, 28, 31, 35, 39, 41, 44, 52, 57, 61, 64,\n       67, 70, 75, 82, 85, 90, 92, 97])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1,\n       0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1,\n       1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 1, 2, 0, 2, 3, 6, 2, 4, 3, 2, 2, 6, 5, 4, 1, 3, 2, 3, 7, 3,\n       4, 2, 5, 3])",
                "res": "array([3, 1, 2, 0, 2, 3, 6, 2, 4, 3, 2, 2, 6, 5, 4, 1, 3, 2, 3, 7, 3, 4,\n       2, 5, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    1\nc    2\nd    0\ne    2\nf    3\ng    6\nh    2\ni    4\nj    3\nk    2\nl    2\nm    6\nn    5\no    4\np    1\nq    3\nr    2\ns    3\nt    7\nu    3\nv    4\nx    2\ny    5\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d51160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d51e80>",
                "self.obj": "0     85.0\n1     16.0\n2     74.0\n3      2.0\n4     43.0\n      ... \n95    49.0\n96    94.0\n97    54.0\n98    74.0\n99    41.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  9,  9, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22,\n       23, 23, 24, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 31, 32, 33, 34,\n       34, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 45, 46, 47,\n       48, 49, 50, 51, 51, 52, 52, 53, 53, 54, 55, 55, 56, 57, 58, 58, 59,\n       60, 61, 62, 63, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71, 72])",
                "_": "array([85., 16., 74.,  2., 43., 84., 53., 58., 73., 28., 83., 14., 76.,\n       51., 86., 72., 52., 13.,  7., 12., 17., 34., 92., 35., 39.,  4.,\n       88.,  8., 49., 36., 80., 60., 69., 47., 65., 11., 75., 71., 66.,\n       31., 24., 99.,  9., 46., 19., 62., 57.,  3., 95., 56., 37., 33.,\n       61., 18., 59., 94., 32., 10., 91., 89., 54., 41.])",
                "val": "array of shape 100",
                "codes": "array([ 1,  3,  3, 10, 13, 25, 30, 38, 48, 21,  4, 12, 15,  0,  2, -1, -1,\n       19, -1,  8, -1, 52, 50, 14, 56, 12,  9, 16, 53, -1, 27, -1, 43, 40,\n       39, 44, 27, 22, -1, 15, 43, 61, 27, 51,  8, 58, -1, -1, 51,  7,  2,\n        2, 52, 31, 37, 47, 57, 60, 39, 26, 49, 21, 20,  6, -1, 22, -1, 17,\n       42, 55, -1, 11, 41,  7, 10, -1, -1, 34, 33, 59, 18, 46,  5, 32, 54,\n       23, 28, 24, -1,  0, 29,  6,  9, 45, 28, 36, 52, 55, 35,  5])",
                "sorter": "array([ 1,  3, 77, 86, 18, 35, 40, 52, 69, 30,  4, 17, 20,  0,  5, 84,  9,\n       25, 26, 92, 28, 87, 71, 19, 89, 78, 14, 21, 80, 47, 53, 45, 73, 56,\n       75, 61, 44, 31, 46, 33, 60, 99, 37, 79, 13, 91,  8, 27, 74, 62,  2,\n       98, 81, 41, 51, 68, 90, 97, 54, 36, 70, 94, 29, 24, 85, 59, 64, 22,\n       58, 96, 83, 16, 57, 11, 15,  7, 65, 48, 43, 93, 23, 67, 12, 42, 82,\n       32, 95, 34, 66, 72, 39, 10, 55, 63, 38, 50, 76, 88, 49,  6])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26,\n       28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 44, 46, 47, 48, 49,\n       50, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70,\n       71, 73, 75, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 90, 91, 93, 94,\n       95, 96, 97, 98, 99])",
                "inc": "array([1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1,\n       1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,\n       1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n       0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([8, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 0,\n       1, 1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 0, 1, 0, 1,\n       1, 2, 1, 1, 1, 2, 2, 2, 0, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 1, 0, 2, 2, 0, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 1, 1, 1, 1])",
                "ri": "array of shape 73",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-24    1\n     2015-08-25    1\n     2015-09-01    1\nb    2015-08-31    1\nc    2015-08-27    1\n                  ..\ny    2015-08-29    1\n     2015-09-01    1\nz    2015-08-25    1\n     2015-08-28    1\n     2015-08-30    1\nName: julie, Length: 73, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d08e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d088e0>",
                "self.obj": "0      32\n1       3\n2       0\n3      16\n4      47\n       ..\n995    42\n996    23\n997    24\n998     2\n999    90\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([32,  3,  0, 16, 47, 64, 90, 30,  4, 98, 92, 88, 96, 36,  7, 86, 37,\n       70, 77, 97, 40, 73, 22, 35, 24,  9,  6, 17, 15, 89, 74, 59, 62, 68,\n       34, 25, 69, 31, 80, 87, 66, 23, 84, 78, 83, 52, 54, 76, 33, 58, 55,\n       11, 99, 29, 49,  8, 61, 39, 28, 91, 43, 42, 48, 93, 19, 12, 56, 51,\n       18, 57, 94, 26, 79, 72, 67, 45, 27, 75, 82, 21, 20,  5, 13, 46, 60,\n       14,  2,  1, 71, 44, 95, 63, 65, 50, 38, 10, 81, 41, 85, 53])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  40,  85, 125, 159, 200, 240, 277, 309, 345, 390, 424, 461,\n       501, 533, 569, 616, 652, 688, 734, 775, 815, 851, 891, 932, 967])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([33, 34, 31, 29, 28, 30, 32, 30, 29, 35, 27, 31, 34, 30, 29, 40, 36,\n       32, 41, 36, 30, 29, 35, 36, 30, 30])",
                "res": "array([33, 34, 31, 29, 28, 30, 32, 30, 29, 35, 27, 31, 34, 30, 29, 40, 36,\n       32, 41, 36, 30, 29, 35, 36, 30, 30])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    33\nb    34\nc    31\nd    29\ne    28\nf    30\ng    32\nh    30\ni    29\nj    35\nk    27\nl    31\nm    34\nn    30\no    29\np    40\nq    36\nr    32\ns    41\nt    36\nu    30\nv    29\nw    35\nx    36\ny    30\nz    30\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d085e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d08130>",
                "self.obj": "0      32\n1       3\n2       0\n3      16\n4      47\n       ..\n995    42\n996    23\n997    24\n998     2\n999    90\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array([32,  3,  0, 16, 47, 64, 90, 30,  4, 98, 92, 88, 96, 36,  7, 86, 37,\n       70, 77, 97, 40, 73, 22, 35, 24,  9,  6, 17, 15, 89, 74, 59, 62, 68,\n       34, 25, 69, 31, 80, 87, 66, 23, 84, 78, 83, 52, 54, 76, 33, 58, 55,\n       11, 99, 29, 49,  8, 61, 39, 28, 91, 43, 42, 48, 93, 19, 12, 56, 51,\n       18, 57, 94, 26, 79, 72, 67, 45, 27, 75, 82, 21, 20,  5, 13, 46, 60,\n       14,  2,  1, 71, 44, 95, 63, 65, 50, 38, 10, 81, 41, 85, 53])",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 250",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 250",
                "res": "array of shape 250",
                "ri": "array of shape 250",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    4\n     2015-08-25    4\n     2015-08-26    3\n     2015-08-27    7\n                  ..\nz    2015-08-27    6\n     2015-08-28    2\n     2015-08-29    4\n     2015-08-30    2\n     2015-08-31    4\nName: julie, Length: 250, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09e50>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c099d0>",
                "self.obj": "0      32.0\n1       3.0\n2       0.0\n3      16.0\n4      47.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     2.0\n999    90.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  96, 139, 178, 209, 246, 280, 316, 344, 378, 421, 455, 489,\n       528, 559, 594, 638, 672, 705, 747, 786, 822, 858, 897, 935, 968])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([41, 25, 28, 25, 25, 25, 26, 27, 26, 25, 27, 25, 27, 24, 22, 23, 29,\n       30, 26, 31, 27, 23, 25, 31, 32, 25, 25])",
                "res": "array([25, 28, 25, 25, 25, 26, 27, 26, 25, 27, 25, 27, 24, 22, 23, 29, 30,\n       26, 31, 27, 23, 25, 31, 32, 25, 25])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    25\nb    28\nc    25\nd    25\ne    25\nf    26\ng    27\nh    26\ni    25\nj    27\nk    25\nl    27\nm    24\nn    22\no    23\np    29\nq    30\nr    26\ns    31\nt    27\nu    23\nv    25\nw    31\nx    32\ny    25\nz    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da08b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0160>",
                "self.obj": "0      32.0\n1       3.0\n2       0.0\n3      16.0\n4      47.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     2.0\n999    90.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 249",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 250",
                "res": "array of shape 249",
                "ri": "array of shape 249",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    1\n     2015-08-26    3\n     2015-08-27    5\n                  ..\nz    2015-08-27    5\n     2015-08-28    2\n     2015-08-29    3\n     2015-08-30    1\n     2015-08-31    2\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84160>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d846a0>",
                "self.obj": "0      32.0\n1       3.0\n2       0.0\n3      16.0\n4      47.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     2.0\n999    90.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  96, 139, 178, 209, 246, 280, 316, 344, 378, 421, 455, 489,\n       528, 559, 594, 638, 672, 705, 747, 786, 822, 858, 897, 935, 968])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([41, 25, 28, 25, 25, 25, 26, 27, 26, 25, 27, 25, 27, 24, 22, 23, 29,\n       30, 26, 31, 27, 23, 25, 31, 32, 25, 25])",
                "res": "array([25, 28, 25, 25, 25, 26, 27, 26, 25, 27, 25, 27, 24, 22, 23, 29, 30,\n       26, 31, 27, 23, 25, 31, 32, 25, 25])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    25\nb    28\nc    25\nd    25\ne    25\nf    26\ng    27\nh    26\ni    25\nj    27\nk    25\nl    27\nm    24\nn    22\no    23\np    29\nq    30\nr    26\ns    31\nt    27\nu    23\nv    25\nw    31\nx    32\ny    25\nz    25\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84190>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84430>",
                "self.obj": "0      32.0\n1       3.0\n2       0.0\n3      16.0\n4      47.0\n       ... \n995     NaN\n996     NaN\n997     NaN\n998     2.0\n999    90.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 100",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 249",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 250",
                "res": "array of shape 249",
                "ri": "array of shape 249",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    1\n     2015-08-26    3\n     2015-08-27    5\n                  ..\nz    2015-08-27    5\n     2015-08-28    2\n     2015-08-29    3\n     2015-08-30    1\n     2015-08-31    2\nName: julie, Length: 249, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da04f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0640>",
                "self.obj": "0       34\n1       97\n2       52\n3       62\n4       12\n        ..\n9995    63\n9996    56\n9997    89\n9998    67\n9999     2\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([34, 97, 52, 62, 12, 77, 89, 82,  8, 74, 38, 49, 37, 30, 16,  2, 45,\n       50, 32, 13, 68, 90, 54, 20, 98, 99, 87, 48, 59, 21, 28, 85, 66, 33,\n        3, 19, 79, 47, 76,  5, 75, 18, 44, 94, 83,  4, 29, 80, 22, 40, 43,\n        7, 56, 88, 93, 41, 95, 72, 84, 51, 65, 26, 24,  1, 14, 78, 53, 15,\n       73, 46, 23,  0, 96, 71, 27, 55,  6, 64, 86, 67, 70, 35, 31,  9, 36,\n       61, 69, 39, 25, 10, 91, 81, 42, 58, 60, 17, 63, 57, 11, 92])",
                "val": "array([34, 97, 52, ..., 89, 67,  2])",
                "codes": "array([ 0,  0,  0, ..., 97, 98, 99])",
                "sorter": "array([ 584,  767, 8828, ..., 7982, 5856, 4444])",
                "idx": "array([   0,  323,  707, 1091, 1523, 1928, 2276, 2658, 3052, 3442, 3844,\n       4206, 4596, 4978, 5393, 5763, 6147, 6512, 6919, 7296, 7663, 8084,\n       8489, 8886, 9259, 9625])",
                "inc": "array([1, 0, 0, ..., 0, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([ 97,  96,  97,  97,  99,  97,  97, 100,  93,  98,  99,  97,  97,\n       100,  99,  97,  97, 100,  98,  98,  97, 100,  99,  98,  97,  97])",
                "res": "array([ 97,  96,  97,  97,  99,  97,  97, 100,  93,  98,  99,  97,  97,\n       100,  99,  97,  97, 100,  98,  98,  97, 100,  99,  98,  97,  97])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na     97\nb     96\nc     97\nd     97\ne     99\nf     97\ng     97\nh    100\ni     93\nj     98\nk     99\nl     97\nm     97\nn    100\no     99\np     97\nq     97\nr    100\ns     98\nt     98\nu     97\nv    100\nw     99\nx     98\ny     97\nz     97\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a8e0>",
                "self.obj": "0       34\n1       97\n2       52\n3       62\n4       12\n        ..\n9995    63\n9996    56\n9997    89\n9998    67\n9999     2\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([34, 97, 52, 62, 12, 77, 89, 82,  8, 74, 38, 49, 37, 30, 16,  2, 45,\n       50, 32, 13, 68, 90, 54, 20, 98, 99, 87, 48, 59, 21, 28, 85, 66, 33,\n        3, 19, 79, 47, 76,  5, 75, 18, 44, 94, 83,  4, 29, 80, 22, 40, 43,\n        7, 56, 88, 93, 41, 95, 72, 84, 51, 65, 26, 24,  1, 14, 78, 53, 15,\n       73, 46, 23,  0, 96, 71, 27, 55,  6, 64, 86, 67, 70, 35, 31,  9, 36,\n       61, 69, 39, 25, 10, 91, 81, 42, 58, 60, 17, 63, 57, 11, 92])",
                "val": "array([34, 97, 52, ..., 89, 67,  2])",
                "codes": "array([ 5,  5,  9, ..., 94, 98, 99])",
                "sorter": "array([6717, 7231, 8717, ..., 9191, 5856, 4444])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    31\n     2015-08-24    24\n     2015-08-25    33\n     2015-08-26    25\n     2015-08-27    26\n                   ..\nz    2015-08-28    26\n     2015-08-29    34\n     2015-08-30    30\n     2015-08-31    29\n     2015-09-01    34\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d687c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d68df0>",
                "self.obj": "0       34.0\n1       97.0\n2       52.0\n3       62.0\n4       12.0\n        ... \n9995    63.0\n9996    56.0\n9997    89.0\n9998    67.0\n9999     2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([34., 97., 52., ..., 89., 67.,  2.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 3004, 3602, 7941])",
                "idx": "array([ 589,  890, 1255, 1608, 2009, 2393, 2724, 3084, 3455, 3823, 4204,\n       4541, 4914, 5273, 5663, 6003, 6368, 6705, 7090, 7443, 7795, 8200,\n       8580, 8954, 9298, 9639])",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100,  96,  94,  95,  94,  99,  95,  96,  94,  92,  97,  98,  96,\n        94,  98,  95,  90,  93,  99,  95,  97,  94,  98,  96,  96,  95,\n        95])",
                "res": "array([96, 94, 95, 94, 99, 95, 96, 94, 92, 97, 98, 96, 94, 98, 95, 90, 93,\n       99, 95, 97, 94, 98, 96, 96, 95, 95])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    96\nb    94\nc    95\nd    94\ne    99\nf    95\ng    96\nh    94\ni    92\nj    97\nk    98\nl    96\nm    94\nn    98\no    95\np    90\nq    93\nr    99\ns    95\nt    97\nu    94\nv    98\nw    96\nx    96\ny    95\nz    95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d68790>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d68190>",
                "self.obj": "0       34.0\n1       97.0\n2       52.0\n3       62.0\n4       12.0\n        ... \n9995    63.0\n9996    56.0\n9997    89.0\n9998    67.0\n9999     2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([34., 97., 52., ..., 89., 67.,  2.])",
                "codes": "array([-1, -1, -1, ..., 95, 96, 98])",
                "sorter": "array([ 103,  256,  273, ..., 5856, 9191, 4444])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    26\n     2015-08-24    21\n     2015-08-25    23\n     2015-08-26    20\n     2015-08-27    21\n                   ..\nz    2015-08-28    20\n     2015-08-29    28\n     2015-08-30    25\n     2015-08-31    23\n     2015-09-01    29\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84220>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d841f0>",
                "self.obj": "0       34.0\n1       97.0\n2       52.0\n3       62.0\n4       12.0\n        ... \n9995    63.0\n9996    56.0\n9997    89.0\n9998    67.0\n9999     2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([34., 97., 52., ..., 89., 67.,  2.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([ 103,  256,  273, ..., 3004, 3602, 7941])",
                "idx": "array([ 589,  890, 1255, 1608, 2009, 2393, 2724, 3084, 3455, 3823, 4204,\n       4541, 4914, 5273, 5663, 6003, 6368, 6705, 7090, 7443, 7795, 8200,\n       8580, 8954, 9298, 9639])",
                "inc": "array([0, 0, 0, ..., 1, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100,  96,  94,  95,  94,  99,  95,  96,  94,  92,  97,  98,  96,\n        94,  98,  95,  90,  93,  99,  95,  97,  94,  98,  96,  96,  95,\n        95])",
                "res": "array([96, 94, 95, 94, 99, 95, 96, 94, 92, 97, 98, 96, 94, 98, 95, 90, 93,\n       99, 95, 97, 94, 98, 96, 96, 95, 95])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    96\nb    94\nc    95\nd    94\ne    99\nf    95\ng    96\nh    94\ni    92\nj    97\nk    98\nl    96\nm    94\nn    98\no    95\np    90\nq    93\nr    99\ns    95\nt    97\nu    94\nv    98\nw    96\nx    96\ny    95\nz    95\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09c10>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09fd0>",
                "self.obj": "0       34.0\n1       97.0\n2       52.0\n3       62.0\n4       12.0\n        ... \n9995    63.0\n9996    56.0\n9997    89.0\n9998    67.0\n9999     2.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([34., 97., 52., ..., 89., 67.,  2.])",
                "codes": "array([-1, -1, -1, ..., 95, 96, 98])",
                "sorter": "array([ 103,  256,  273, ..., 5856, 9191, 4444])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    26\n     2015-08-24    21\n     2015-08-25    23\n     2015-08-26    20\n     2015-08-27    21\n                   ..\nz    2015-08-28    20\n     2015-08-29    28\n     2015-08-30    25\n     2015-08-31    23\n     2015-09-01    29\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d68940>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d68910>",
                "self.obj": "0        55\n1        95\n2        45\n3        31\n4        31\n         ..\n99995    29\n99996    62\n99997    89\n99998    19\n99999    37\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array([55, 95, 45, 31, 42, 69, 92,  6, 83, 47, 65, 12, 51, 10, 74, 96, 16,\n       21,  2, 40, 46, 57, 52, 49, 63, 38, 44, 13, 39, 60, 43, 84, 62, 22,\n       24, 90, 29, 86, 37, 59, 19, 61, 28,  3, 81, 48, 97, 58, 75, 72,  9,\n       36, 17, 11, 94,  0, 54, 70, 99, 25, 82,  7, 73, 53, 85,  5, 27, 68,\n       71, 35,  1, 50, 98,  4, 88, 76, 23,  8, 56, 80, 87, 66, 78, 26, 30,\n       18, 20, 79, 41, 89, 67, 64, 32, 15, 33, 91, 93, 34, 77, 14])",
                "val": "array([55, 95, 45, ..., 89, 19, 37])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([  717,  2379, 15923, ..., 96619, 97517, 97598])",
                "idx": "array([    0,  3929,  7701, 11498, 15396, 19208, 22948, 26803, 30697,\n       34565, 38427, 42298, 46109, 49988, 53868, 57675, 61567, 65435,\n       69315, 73202, 77005, 80853, 84774, 88524, 92336, 96156])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d68310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d68760>",
                "self.obj": "0        55\n1        95\n2        45\n3        31\n4        31\n         ..\n99995    29\n99996    62\n99997    89\n99998    19\n99999    37\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array([55, 95, 45, 31, 42, 69, 92,  6, 83, 47, 65, 12, 51, 10, 74, 96, 16,\n       21,  2, 40, 46, 57, 52, 49, 63, 38, 44, 13, 39, 60, 43, 84, 62, 22,\n       24, 90, 29, 86, 37, 59, 19, 61, 28,  3, 81, 48, 97, 58, 75, 72,  9,\n       36, 17, 11, 94,  0, 54, 70, 99, 25, 82,  7, 73, 53, 85,  5, 27, 68,\n       71, 35,  1, 50, 98,  4, 88, 76, 23,  8, 56, 80, 87, 66, 78, 26, 30,\n       18, 20, 79, 41, 89, 67, 64, 32, 15, 33, 91, 93, 34, 77, 14])",
                "val": "array([55, 95, 45, ..., 89, 19, 37])",
                "codes": "array([ 0,  0,  0, ..., 99, 99, 99])",
                "sorter": "array([23198, 40934, 57627, ..., 49556, 87076, 96619])",
                "idx": "array of shape 260",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23     97\n     2015-08-24     97\n     2015-08-25     98\n     2015-08-26     99\n     2015-08-27    100\n                  ... \nz    2015-08-28     97\n     2015-08-29     97\n     2015-08-30     97\n     2015-08-31     98\n     2015-09-01     95\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84550>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84a60>",
                "self.obj": "0        55.0\n1        95.0\n2        45.0\n3        31.0\n4        31.0\n         ... \n99995    29.0\n99996    62.0\n99997    89.0\n99998    19.0\n99999    37.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([55., 95., 45., ..., 89., 19., 37.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 87774, 94569, 96619])",
                "idx": "array([ 5883,  9584, 13128, 16688, 20358, 23963, 27485, 31109, 34767,\n       38408, 42061, 45705, 49296, 52932, 56594, 60163, 63821, 67475,\n       71127, 74788, 78369, 81964, 85646, 89190, 92778, 96381])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84370>",
                "self.obj": "0        55.0\n1        95.0\n2        45.0\n3        31.0\n4        31.0\n         ... \n99995    29.0\n99996    62.0\n99997    89.0\n99998    19.0\n99999    37.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([55., 95., 45., ..., 89., 19., 37.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 37699, 87076, 96619])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    93\n     2015-08-24    95\n     2015-08-25    97\n     2015-08-26    99\n     2015-08-27    93\n                   ..\nz    2015-08-28    94\n     2015-08-29    96\n     2015-08-30    93\n     2015-08-31    92\n     2015-09-01    92\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6ac40>",
                "self.obj": "0        55.0\n1        95.0\n2        45.0\n3        31.0\n4        31.0\n         ... \n99995    29.0\n99996    62.0\n99997    89.0\n99998    19.0\n99999    37.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 100",
                "val": "array([55., 95., 45., ..., 89., 19., 37.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 87774, 94569, 96619])",
                "idx": "array([ 5883,  9584, 13128, 16688, 20358, 23963, 27485, 31109, 34767,\n       38408, 42061, 45705, 49296, 52932, 56594, 60163, 63821, 67475,\n       71127, 74788, 78369, 81964, 85646, 89190, 92778, 96381])",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100])",
                "res": "array([100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,\n       100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    100\nb    100\nc    100\nd    100\ne    100\nf    100\ng    100\nh    100\ni    100\nj    100\nk    100\nl    100\nm    100\nn    100\no    100\np    100\nq    100\nr    100\ns    100\nt    100\nu    100\nv    100\nw    100\nx    100\ny    100\nz    100\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09280>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09ca0>",
                "self.obj": "0        55.0\n1        95.0\n2        45.0\n3        31.0\n4        31.0\n         ... \n99995    29.0\n99996    62.0\n99997    89.0\n99998    19.0\n99999    37.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 100",
                "val": "array([55., 95., 45., ..., 89., 19., 37.])",
                "codes": "array([-1, -1, -1, ..., 99, 99, 99])",
                "sorter": "array([  103,   256,   273, ..., 37699, 87076, 96619])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 0, 0, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    93\n     2015-08-24    95\n     2015-08-25    97\n     2015-08-26    99\n     2015-08-27    93\n                   ..\nz    2015-08-28    94\n     2015-08-29    96\n     2015-08-30    93\n     2015-08-31    92\n     2015-09-01    92\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d84910>",
                "self.obj": "0     592\n1     482\n2     405\n3     413\n4     484\n     ... \n95    295\n96    562\n97    722\n98    180\n99     22\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  3,  3,  4,  4,  4,\n        5,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,  8,  8,  9,  9,  9,  9,\n        9, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14,\n       14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17, 17, 18, 18,\n       18, 18, 18, 18, 18, 18, 18, 19, 20, 20, 20, 20, 20, 20, 21, 21, 22,\n       22, 22, 23, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25])",
                "_": "array of shape 97",
                "val": "array of shape 100",
                "codes": "array([46, 50, 76, 87, 38, 40, 53, 16, 64, 70, 88, 93, 31, 66,  3,  9, 23,\n       44, 17, 33, 78, 91, 96, 30, 85, 94, 18, 54, 67, 81, 21, 42, 62, 68,\n       80, 59, 84, 11, 22, 72,  8, 19, 28, 65, 83,  2,  5, 13, 34, 77, 45,\n       47, 58, 89,  4, 29, 49, 12, 14, 36, 39, 56, 75, 90, 20, 48,  6,  7,\n       21, 32, 52, 61, 71, 79, 82, 27, 15, 24, 25, 51, 57, 73, 10, 35, 63,\n       74, 92,  1, 13, 37, 41, 54, 69, 43, 86, 95,  0, 26, 55, 60])",
                "sorter": "array([47, 51, 77, 89, 39, 41, 54, 16, 65, 71, 90, 95, 31, 67,  3,  9, 23,\n       45, 17, 33, 79, 93, 99, 30, 87, 96, 18, 83, 68, 82, 21, 43, 63, 69,\n       81, 60, 86, 11, 22, 73,  8, 19, 28, 66, 85,  2,  5, 98, 34, 78, 46,\n       48, 59, 91,  4, 29, 50, 12, 14, 37, 40, 57, 76, 92, 20, 49,  6,  7,\n       35, 32, 53, 62, 72, 80, 84, 27, 15, 24, 25, 52, 58, 74, 10, 36, 64,\n       75, 94,  1, 13, 38, 42, 55, 70, 44, 88, 97,  0, 26, 56, 61])",
                "idx": "array([ 0,  4,  7, 12, 14, 17, 18, 23, 26, 30, 35, 37, 40, 45, 50, 54, 57,\n       64, 66, 75, 76, 82, 84, 87, 93, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([4, 3, 5, 2, 3, 1, 5, 3, 4, 5, 2, 3, 5, 5, 4, 3, 7, 2, 9, 1, 6, 2,\n       3, 6, 3, 4])",
                "res": "array([4, 3, 5, 2, 3, 1, 5, 3, 4, 5, 2, 3, 5, 5, 4, 3, 7, 2, 9, 1, 6, 2,\n       3, 6, 3, 4])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    4\nb    3\nc    5\nd    2\ne    3\nf    1\ng    5\nh    3\ni    4\nj    5\nk    2\nl    3\nm    5\nn    5\no    4\np    3\nq    7\nr    2\ns    9\nt    1\nu    6\nv    2\nw    3\nx    6\ny    3\nz    4\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84d00>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d841c0>",
                "self.obj": "0     592\n1     482\n2     405\n3     413\n4     484\n     ... \n95    295\n96    562\n97    722\n98    180\n99     22\nName: julie, Length: 100, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 14, 15,\n       16, 17, 18, 19, 20, 21, 22, 22, 23, 24, 25, 26, 26, 27, 27, 28, 29,\n       30, 31, 32, 33, 34, 34, 35, 36, 36, 37, 38, 39, 39, 40, 41, 42, 43,\n       44, 45, 46, 47, 48, 49, 50, 50, 51, 51, 52, 53, 54, 55, 56, 57, 58,\n       59, 60, 60, 61, 62, 62, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71,\n       72, 73, 74, 75, 75, 76, 76, 77, 78, 79, 79, 80, 81, 82, 83])",
                "_": "array of shape 97",
                "val": "array of shape 100",
                "codes": "array([87, 46, 50, 76, 40, 53, 38, 93, 16, 88, 64, 70, 31, 66,  3, 23,  9,\n       44, 96, 78, 33, 17, 91, 85, 94, 30, 67, 81, 18, 54, 42, 62, 21, 80,\n       68, 84, 59, 11, 22, 72, 19,  8, 28, 65, 83, 13, 77,  5,  2, 34, 89,\n       45, 58, 47,  4, 29, 49, 75, 90, 12, 14, 36, 39, 56, 20, 48,  7, 21,\n       32, 71, 82, 61,  6, 52, 79, 27, 25, 73, 57, 15, 24, 51, 35, 10, 74,\n       92, 63, 41,  1, 69, 13, 54, 37, 43, 86, 95, 60,  0, 55, 26])",
                "sorter": "array([89, 47, 51, 77, 41, 54, 39, 95, 16, 90, 65, 71, 31, 67,  3, 23,  9,\n       45, 99, 79, 33, 17, 93, 87, 96, 30, 68, 82, 18, 83, 43, 63, 21, 81,\n       69, 86, 60, 11, 22, 73, 19,  8, 28, 66, 85, 98, 78,  5,  2, 34, 91,\n       46, 59, 48,  4, 29, 50, 76, 92, 12, 14, 37, 40, 57, 20, 49,  7, 35,\n       32, 72, 84, 62,  6, 53, 80, 27, 25, 74, 58, 15, 24, 52, 36, 10, 75,\n       94, 64, 42,  1, 70, 13, 55, 38, 44, 88, 97, 61,  0, 56, 26])",
                "idx": "array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 16, 17,\n       18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37,\n       38, 40, 41, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\n       59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 75, 76, 77, 78, 79,\n       80, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1])",
                "res": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1,\n       1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1,\n       1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 1, 1, 1])",
                "ri": "array of shape 84",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    1\n     2015-08-27    1\n     2015-08-30    1\n     2015-08-31    1\nb    2015-08-24    1\n                  ..\ny    2015-08-31    2\nz    2015-08-23    1\n     2015-08-30    1\n     2015-08-31    1\n     2015-09-01    1\nName: julie, Length: 84, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b1f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b1c0>",
                "self.obj": "0     592.0\n1     482.0\n2     405.0\n3     413.0\n4     484.0\n      ...  \n95    295.0\n96    562.0\n97    722.0\n98    180.0\n99     22.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  4,  4,  4,  5,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,\n        8,  9,  9,  9,  9, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13,\n       13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17,\n       17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 20, 20, 20, 20, 21, 21,\n       22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25])",
                "_": "array of shape 83",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 18, 42, 56, 70, -1, 41, 64, 73, 32, 34, 44, -1, 13, 58, 74,\n       79, 25, 54, -1,  3, 20, -1, 14, 27, 66, 77, 82, 24, 71, 80, -1, 55,\n       69, 18, 36, 53, 68, 50,  8, 19, 60, -1, -1, -1, -1, 16,  2,  5, 10,\n       28, 65, -1, 38, 49, 75,  4, 23, 40,  9, 11, 30, 33, 47, 63, 76, 17,\n       39, -1, -1,  6, 26, 43, 52, 59, 67, -1, 12, 21, 22, 48, 61,  7, 29,\n       -1, 62, 78, 10, 31, 35, 45, 57, 37, 72, 81, -1,  0, 46, 51])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 47, 51, 77, 89, 39, 41, 54, 65, 16, 71, 90,\n       95, 31, 67,  9,  3, 23, 45, 17, 33, 79, 93, 99, 30, 87, 96, 83, 68,\n       82, 21, 43, 63, 81, 60, 11, 22, 73,  8, 28, 66, 85, 19,  2,  5, 98,\n       34, 78, 46, 48, 59, 91,  4, 29, 50, 12, 14, 37, 40, 57, 76, 92, 20,\n       49,  7, 84,  6, 32, 53, 62, 72, 80, 27, 15, 24, 25, 58, 74, 10, 36,\n       64, 75, 94, 13, 38, 42, 55, 70, 44, 88, 97, 26,  0, 56, 61])",
                "idx": "array([ 6, 10, 13, 18, 20, 23, 24, 29, 32, 35, 39, 40, 43, 48, 53, 57, 60,\n       67, 69, 77, 78, 83, 85, 88, 93, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 3, 4, 2, 2, 0, 5, 3, 2, 4, 1, 3, 1, 5, 3, 3, 7, 2, 6, 0, 5,\n       2, 2, 5, 3, 3])",
                "res": "array([3, 3, 4, 2, 2, 0, 5, 3, 2, 4, 1, 3, 1, 5, 3, 3, 7, 2, 6, 0, 5, 2,\n       2, 5, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    3\nc    4\nd    2\ne    2\nf    0\ng    5\nh    3\ni    2\nj    4\nk    1\nl    3\nm    1\nn    5\no    3\np    3\nq    7\nr    2\ns    6\nt    0\nu    5\nv    2\nw    2\nx    5\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7b490>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7bf70>",
                "self.obj": "0     592.0\n1     482.0\n2     405.0\n3     413.0\n4     484.0\n      ...  \n95    295.0\n96    562.0\n97    722.0\n98    180.0\n99     22.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23,\n       24, 25, 26, 26, 27, 28, 29, 30, 31, 31, 32, 33, 33, 34, 35, 36, 36,\n       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 47, 48, 48, 49, 50, 51,\n       52, 53, 54, 55, 55, 56, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 71, 72, 73, 74, 74, 75, 76, 77, 78])",
                "_": "array of shape 83",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 18, 33, 42, 56, 64, 70, 73, -1, 41, 34, 44, 32, 79, 13,\n       74, -1, 58, 25, 54, 20, -1, -1, 82, 66, 27, 14, 77, 71, 80, 24, 55,\n       69, -1, 36, 53, 18, 68, 50,  8, 19, 60, 16, -1, -1, -1, -1, 10, 65,\n        5,  2, 28, 75, -1, 49, 38,  4, 23, 40, 63, 76,  9, 11, 30, 47, 17,\n       39, -1, 26, -1, 59, 52,  6, 43, 67, -1, 22, 61, 48, 12, 21, 29,  7,\n       62, 78, -1, 35, 57, 10, 45, 31, 37, 72, 81, 51,  0, 46, -1])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 89, 47, 51, 41, 54, 39, 95, 16,\n       90, 65, 71, 31, 67, 23,  9, 45, 99, 79, 33, 17, 93, 87, 96, 30, 68,\n       82, 83, 43, 63, 21, 81, 60, 11, 22, 73, 19,  8, 28, 66, 85, 98, 78,\n        5,  2, 34, 91, 46, 59, 48,  4, 29, 50, 76, 92, 12, 14, 37, 57, 20,\n       49,  7, 32, 84, 72, 62,  6, 53, 80, 27, 25, 74, 58, 15, 24, 36, 10,\n       75, 94, 64, 42, 70, 13, 55, 38, 44, 88, 97, 61,  0, 56, 26])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45,\n       47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66,\n       67, 68, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\n       87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0])",
                "res": "array([1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0])",
                "ri": "array of shape 79",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    1\n     2015-08-27    0\n     2015-08-30    1\nb    2015-08-24    1\n     2015-08-27    1\n                  ..\ny    2015-08-31    2\nz    2015-08-23    1\n     2015-08-30    1\n     2015-08-31    1\n     2015-09-01    0\nName: julie, Length: 79, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d84cd0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0d00>",
                "self.obj": "0     592.0\n1     482.0\n2     405.0\n3     413.0\n4     484.0\n      ...  \n95    295.0\n96    562.0\n97    722.0\n98    180.0\n99     22.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,\n        2,  3,  3,  4,  4,  4,  5,  6,  6,  6,  6,  6,  7,  7,  7,  8,  8,\n        8,  9,  9,  9,  9, 10, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13,\n       13, 13, 14, 14, 14, 14, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 17,\n       17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 20, 20, 20, 20, 20, 21, 21,\n       22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25])",
                "_": "array of shape 83",
                "val": "array of shape 100",
                "codes": "array([ 1, 15, 18, 42, 56, 70, -1, 41, 64, 73, 32, 34, 44, -1, 13, 58, 74,\n       79, 25, 54, -1,  3, 20, -1, 14, 27, 66, 77, 82, 24, 71, 80, -1, 55,\n       69, 18, 36, 53, 68, 50,  8, 19, 60, -1, -1, -1, -1, 16,  2,  5, 10,\n       28, 65, -1, 38, 49, 75,  4, 23, 40,  9, 11, 30, 33, 47, 63, 76, 17,\n       39, -1, -1,  6, 26, 43, 52, 59, 67, -1, 12, 21, 22, 48, 61,  7, 29,\n       -1, 62, 78, 10, 31, 35, 45, 57, 37, 72, 81, -1,  0, 46, 51])",
                "sorter": "array([ 1, 18, 35, 52, 69, 86, 47, 51, 77, 89, 39, 41, 54, 65, 16, 71, 90,\n       95, 31, 67,  9,  3, 23, 45, 17, 33, 79, 93, 99, 30, 87, 96, 83, 68,\n       82, 21, 43, 63, 81, 60, 11, 22, 73,  8, 28, 66, 85, 19,  2,  5, 98,\n       34, 78, 46, 48, 59, 91,  4, 29, 50, 12, 14, 37, 40, 57, 76, 92, 20,\n       49,  7, 84,  6, 32, 53, 62, 72, 80, 27, 15, 24, 25, 58, 74, 10, 36,\n       64, 75, 94, 13, 38, 42, 55, 70, 44, 88, 97, 26,  0, 56, 61])",
                "idx": "array([ 6, 10, 13, 18, 20, 23, 24, 29, 32, 35, 39, 40, 43, 48, 53, 57, 60,\n       67, 69, 77, 78, 83, 85, 88, 93, 96])",
                "inc": "array([1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1,\n       1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1])",
                "mask": "array of shape 100",
                "out": "array([6, 3, 3, 4, 2, 2, 0, 5, 3, 2, 4, 1, 3, 1, 5, 3, 3, 7, 2, 6, 0, 5,\n       2, 2, 5, 3, 3])",
                "res": "array([3, 3, 4, 2, 2, 0, 5, 3, 2, 4, 1, 3, 1, 5, 3, 3, 7, 2, 6, 0, 5, 2,\n       2, 5, 3, 3])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    3\nb    3\nc    4\nd    2\ne    2\nf    0\ng    5\nh    3\ni    2\nj    4\nk    1\nl    3\nm    1\nn    5\no    3\np    3\nq    7\nr    2\ns    6\nt    0\nu    5\nv    2\nw    2\nx    5\ny    3\nz    3\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118da02e0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118da0fd0>",
                "self.obj": "0     592.0\n1     482.0\n2     405.0\n3     413.0\n4     484.0\n      ...  \n95    295.0\n96    562.0\n97    722.0\n98    180.0\n99     22.0\nName: julie, Length: 100, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, -1, -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,\n        8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 21, 22, 23,\n       24, 25, 26, 26, 27, 28, 29, 30, 31, 31, 32, 33, 33, 34, 35, 36, 36,\n       37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 47, 48, 48, 49, 50, 51,\n       52, 53, 54, 55, 55, 56, 57, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65,\n       66, 67, 68, 69, 70, 71, 71, 72, 73, 74, 74, 75, 76, 77, 78])",
                "_": "array of shape 83",
                "val": "array of shape 100",
                "codes": "array([ 1,  3, 15, 18, 33, 42, 56, 64, 70, 73, -1, 41, 34, 44, 32, 79, 13,\n       74, -1, 58, 25, 54, 20, -1, -1, 82, 66, 27, 14, 77, 71, 80, 24, 55,\n       69, -1, 36, 53, 18, 68, 50,  8, 19, 60, 16, -1, -1, -1, -1, 10, 65,\n        5,  2, 28, 75, -1, 49, 38,  4, 23, 40, 63, 76,  9, 11, 30, 47, 17,\n       39, -1, 26, -1, 59, 52,  6, 43, 67, -1, 22, 61, 48, 12, 21, 29,  7,\n       62, 78, -1, 35, 57, 10, 45, 31, 37, 72, 81, 51,  0, 46, -1])",
                "sorter": "array([ 1,  3, 18, 35, 40, 52, 69, 77, 86, 89, 47, 51, 41, 54, 39, 95, 16,\n       90, 65, 71, 31, 67, 23,  9, 45, 99, 79, 33, 17, 93, 87, 96, 30, 68,\n       82, 83, 43, 63, 21, 81, 60, 11, 22, 73, 19,  8, 28, 66, 85, 98, 78,\n        5,  2, 34, 91, 46, 59, 48,  4, 29, 50, 76, 92, 12, 14, 37, 57, 20,\n       49,  7, 32, 84, 72, 62,  6, 53, 80, 27, 25, 74, 58, 15, 24, 36, 10,\n       75, 94, 64, 42, 70, 13, 55, 38, 44, 88, 97, 61,  0, 56, 26])",
                "idx": "array([ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n       26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45,\n       47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 65, 66,\n       67, 68, 69, 70, 71, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86,\n       87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99])",
                "inc": "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0])",
                "mask": "array of shape 100",
                "out": "array([9, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,\n       2, 1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1,\n       1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1,\n       1, 1, 1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0])",
                "res": "array([1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 2,\n       1, 1, 1, 0, 2, 1, 1, 1, 1, 2, 1, 0, 0, 0, 2, 1, 1, 1, 1, 0, 1, 1,\n       1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 1, 1, 1, 3, 0, 1, 1, 1, 1, 1, 1, 1,\n       1, 1, 0, 1, 1, 2, 1, 1, 2, 1, 1, 1, 0])",
                "ri": "array of shape 79",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-26    1\n     2015-08-27    0\n     2015-08-30    1\nb    2015-08-24    1\n     2015-08-27    1\n                  ..\ny    2015-08-31    2\nz    2015-08-23    1\n     2015-08-30    1\n     2015-08-31    1\n     2015-09-01    0\nName: julie, Length: 79, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x120d7bc40>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x120d7b760>",
                "self.obj": "0      401\n1      515\n2      144\n3      134\n4      262\n      ... \n995    411\n996    786\n997    627\n998     47\n999    662\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 622",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([  0,  31,  70, 108, 144, 191, 239, 279, 318, 356, 397, 431, 462,\n       498, 544, 589, 634, 682, 720, 757, 800, 829, 856, 895, 941, 972])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([31, 39, 38, 36, 47, 47, 39, 38, 37, 41, 33, 31, 34, 45, 43, 41, 48,\n       36, 36, 41, 29, 26, 39, 46, 31, 27])",
                "res": "array([31, 39, 38, 36, 47, 47, 39, 38, 37, 41, 33, 31, 34, 45, 43, 41, 48,\n       36, 36, 41, 29, 26, 39, 46, 31, 27])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    31\nb    39\nc    38\nd    36\ne    47\nf    47\ng    39\nh    38\ni    37\nj    41\nk    33\nl    31\nm    34\nn    45\no    43\np    41\nq    48\nr    36\ns    36\nt    41\nu    29\nv    26\nw    39\nx    46\ny    31\nz    27\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40a60>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40280>",
                "self.obj": "0      401\n1      515\n2      144\n3      134\n4      262\n      ... \n995    411\n996    786\n997    627\n998     47\n999    662\nName: julie, Length: 1000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 622",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 258",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 258",
                "res": "array of shape 258",
                "ri": "array of shape 258",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    3\n     2015-08-24    3\n     2015-08-25    4\n     2015-08-26    4\n     2015-08-27    2\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    5\n     2015-09-01    4\nName: julie, Length: 258, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118c09dc0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118c09fd0>",
                "self.obj": "0      401.0\n1      515.0\n2      144.0\n3      134.0\n4      262.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     47.0\n999    662.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 560",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  86, 122, 156, 192, 238, 285, 323, 361, 396, 434, 465, 495,\n       529, 570, 614, 656, 697, 732, 768, 808, 837, 863, 898, 944, 974])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([50, 23, 30, 29, 31, 43, 38, 33, 34, 29, 30, 23, 22, 28, 30, 36, 34,\n       35, 29, 28, 29, 28, 20, 27, 38, 28, 22])",
                "res": "array([23, 30, 29, 31, 43, 38, 33, 34, 29, 30, 23, 22, 28, 30, 36, 34, 35,\n       29, 28, 29, 28, 20, 27, 38, 28, 22])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    23\nb    30\nc    29\nd    31\ne    43\nf    38\ng    33\nh    34\ni    29\nj    30\nk    23\nl    22\nm    28\nn    30\no    36\np    34\nq    35\nr    29\ns    28\nt    29\nu    28\nv    20\nw    27\nx    38\ny    28\nz    22\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a0a0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a310>",
                "self.obj": "0      401.0\n1      515.0\n2      144.0\n3      134.0\n4      262.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     47.0\n999    662.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 560",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 256",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 257",
                "res": "array of shape 256",
                "ri": "array of shape 256",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    2\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d405b0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40070>",
                "self.obj": "0      401.0\n1      515.0\n2      144.0\n3      134.0\n4      262.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     47.0\n999    662.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 560",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array([ 59,  86, 122, 156, 192, 238, 285, 323, 361, 396, 434, 465, 495,\n       529, 570, 614, 656, 697, 732, 768, 808, 837, 863, 898, 944, 974])",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array([50, 23, 30, 29, 31, 43, 38, 33, 34, 29, 30, 23, 22, 28, 30, 36, 34,\n       35, 29, 28, 29, 28, 20, 27, 38, 28, 22])",
                "res": "array([23, 30, 29, 31, 43, 38, 33, 34, 29, 30, 23, 22, 28, 30, 36, 34, 35,\n       29, 28, 29, 28, 20, 27, 38, 28, 22])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    23\nb    30\nc    29\nd    31\ne    43\nf    38\ng    33\nh    34\ni    29\nj    30\nk    23\nl    22\nm    28\nn    30\no    36\np    34\nq    35\nr    29\ns    28\nt    29\nu    28\nv    20\nw    27\nx    38\ny    28\nz    22\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40070>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d402e0>",
                "self.obj": "0      401.0\n1      515.0\n2      144.0\n3      134.0\n4      262.0\n       ...  \n995      NaN\n996      NaN\n997      NaN\n998     47.0\n999    662.0\nName: julie, Length: 1000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array of shape 1000",
                "_": "array of shape 560",
                "val": "array of shape 1000",
                "codes": "array of shape 1000",
                "sorter": "array of shape 1000",
                "idx": "array of shape 256",
                "inc": "array of shape 1000",
                "mask": "array of shape 1000",
                "out": "array of shape 257",
                "res": "array of shape 256",
                "ri": "array of shape 256",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    2\n     2015-08-24    3\n     2015-08-25    2\n     2015-08-26    3\n     2015-08-27    2\n                  ..\nz    2015-08-28    1\n     2015-08-29    2\n     2015-08-30    2\n     2015-08-31    4\n     2015-09-01    3\nName: julie, Length: 256, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a100>",
                "self.obj": "0       828\n1       551\n2        72\n3       572\n4       582\n       ... \n9995    937\n9996     57\n9997     86\n9998    943\n9999    753\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([828, 551,  72, ...,  86, 943, 753])",
                "codes": "array([  1,   3,   4, ..., 989, 991, 993])",
                "sorter": "array([7488, 2573,  676, ..., 6679, 9088, 5379])",
                "idx": "array([   0,  387,  806, 1198, 1588, 1960, 2317, 2683, 3059, 3458, 3830,\n       4204, 4589, 4960, 5322, 5729, 6131, 6512, 6919, 7288, 7671, 8069,\n       8506, 8877, 9244, 9617])",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([311, 346, 327, 325, 310, 308, 300, 316, 326, 310, 316, 327, 317,\n       305, 328, 334, 317, 334, 315, 323, 322, 354, 311, 308, 315, 317])",
                "res": "array([311, 346, 327, 325, 310, 308, 300, 316, 326, 310, 316, 327, 317,\n       305, 328, 334, 317, 334, 315, 323, 322, 354, 311, 308, 315, 317])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    311\nb    346\nc    327\nd    325\ne    310\nf    308\ng    300\nh    316\ni    326\nj    310\nk    316\nl    327\nm    317\nn    305\no    328\np    334\nq    317\nr    334\ns    315\nt    323\nu    322\nv    354\nw    311\nx    308\ny    315\nz    317\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a310>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a400>",
                "self.obj": "0       828\n1       551\n2        72\n3       572\n4       582\n       ... \n9995    937\n9996     57\n9997     86\n9998    943\n9999    753\nName: julie, Length: 10000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([828, 551,  72, ...,  86, 943, 753])",
                "codes": "array([  3,   7,   8, ..., 901, 902, 960])",
                "sorter": "array([2573, 4192, 2226, ..., 5777, 7130, 6183])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    48\n     2015-08-24    34\n     2015-08-25    38\n     2015-08-26    38\n     2015-08-27    36\n                   ..\nz    2015-08-28    37\n     2015-08-29    37\n     2015-08-30    34\n     2015-08-31    44\n     2015-09-01    35\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d401c0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40970>",
                "self.obj": "0       828.0\n1       551.0\n2        72.0\n3       572.0\n4       582.0\n        ...  \n9995    937.0\n9996     57.0\n9997     86.0\n9998    943.0\n9999    753.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([828., 551.,  72., ...,  86., 943., 753.])",
                "codes": "array([ -1,  -1,  -1, ..., 990, 993, 994])",
                "sorter": "array([ 103,  256,  273, ..., 5379, 8208, 7745])",
                "idx": "array([ 589,  950, 1342, 1703, 2079, 2428, 2766, 3119, 3464, 3840, 4193,\n       4546, 4913, 5257, 5590, 5978, 6357, 6717, 7102, 7447, 7808, 8179,\n       8584, 8932, 9283, 9633])",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([394, 253, 288, 266, 275, 254, 259, 250, 254, 268, 264, 265, 279,\n       254, 253, 284, 278, 264, 277, 248, 272, 265, 281, 251, 251, 247,\n       272])",
                "res": "array([253, 288, 266, 275, 254, 259, 250, 254, 268, 264, 265, 279, 254,\n       253, 284, 278, 264, 277, 248, 272, 265, 281, 251, 251, 247, 272])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    253\nb    288\nc    266\nd    275\ne    254\nf    259\ng    250\nh    254\ni    268\nj    264\nk    265\nl    279\nm    254\nn    253\no    284\np    278\nq    264\nr    277\ns    248\nt    272\nu    265\nv    281\nw    251\nx    251\ny    247\nz    272\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40d30>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d400a0>",
                "self.obj": "0       828.0\n1       551.0\n2        72.0\n3       572.0\n4       582.0\n        ...  \n9995    937.0\n9996     57.0\n9997     86.0\n9998    943.0\n9999    753.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([828., 551.,  72., ...,  86., 943., 753.])",
                "codes": "array([ -1,  -1,  -1, ..., 979, 993, 994])",
                "sorter": "array([ 103,  256,  273, ..., 5682, 8208, 7745])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    37\n     2015-08-24    27\n     2015-08-25    27\n     2015-08-26    23\n     2015-08-27    29\n                   ..\nz    2015-08-28    29\n     2015-08-29    33\n     2015-08-30    27\n     2015-08-31    34\n     2015-09-01    28\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d7ab20>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d7a190>",
                "self.obj": "0       828.0\n1       551.0\n2        72.0\n3       572.0\n4       582.0\n        ...  \n9995    937.0\n9996     57.0\n9997     86.0\n9998    943.0\n9999    753.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([828., 551.,  72., ...,  86., 943., 753.])",
                "codes": "array([ -1,  -1,  -1, ..., 990, 993, 994])",
                "sorter": "array([ 103,  256,  273, ..., 5379, 8208, 7745])",
                "idx": "array([ 589,  950, 1342, 1703, 2079, 2428, 2766, 3119, 3464, 3840, 4193,\n       4546, 4913, 5257, 5590, 5978, 6357, 6717, 7102, 7447, 7808, 8179,\n       8584, 8932, 9283, 9633])",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([394, 253, 288, 266, 275, 254, 259, 250, 254, 268, 264, 265, 279,\n       254, 253, 284, 278, 264, 277, 248, 272, 265, 281, 251, 251, 247,\n       272])",
                "res": "array([253, 288, 266, 275, 254, 259, 250, 254, 268, 264, 265, 279, 254,\n       253, 284, 278, 264, 277, 248, 272, 265, 281, 251, 251, 247, 272])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    253\nb    288\nc    266\nd    275\ne    254\nf    259\ng    250\nh    254\ni    268\nj    264\nk    265\nl    279\nm    254\nn    253\no    284\np    278\nq    264\nr    277\ns    248\nt    272\nu    265\nv    281\nw    251\nx    251\ny    247\nz    272\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d7a430>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d7a9d0>",
                "self.obj": "0       828.0\n1       551.0\n2        72.0\n3       572.0\n4       582.0\n        ...  \n9995    937.0\n9996     57.0\n9997     86.0\n9998    943.0\n9999    753.0\nName: julie, Length: 10000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([828., 551.,  72., ...,  86., 943., 753.])",
                "codes": "array([ -1,  -1,  -1, ..., 979, 993, 994])",
                "sorter": "array([ 103,  256,  273, ..., 5682, 8208, 7745])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    37\n     2015-08-24    27\n     2015-08-25    27\n     2015-08-26    23\n     2015-08-27    29\n                   ..\nz    2015-08-28    29\n     2015-08-29    33\n     2015-08-30    27\n     2015-08-31    34\n     2015-09-01    28\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d40be0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d40eb0>",
                "self.obj": "0        951\n1        955\n2         14\n3        302\n4        735\n        ... \n99995    592\n99996    366\n99997    933\n99998    773\n99999    681\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ 0,  0,  0, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([951, 955,  14, ..., 933, 773, 681])",
                "codes": "array([  0,   0,   0, ..., 999, 999, 999])",
                "sorter": "array([73726, 75410, 87502, ..., 35316, 43844, 74261])",
                "idx": "array([    0,  3949,  7711, 11532, 15326, 19256, 23090, 26964, 30797,\n       34650, 38455, 42322, 46295, 50100, 53931, 57882, 61688, 65528,\n       69344, 73112, 76956, 80781, 84635, 88489, 92403, 96245])",
                "inc": "array([1, 0, 0, ..., 0, 0, 0])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array([984, 973, 984, 980, 969, 974, 976, 977, 976, 980, 979, 979, 971,\n       981, 977, 973, 985, 977, 986, 983, 983, 980, 986, 979, 980, 985])",
                "res": "array([984, 973, 984, 980, 969, 974, 976, 977, 976, 980, 979, 979, 971,\n       981, 977, 973, 985, 977, 986, 983, 983, 980, 986, 979, 980, 985])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    984\nb    973\nc    984\nd    980\ne    969\nf    974\ng    976\nh    977\ni    976\nj    980\nk    979\nl    979\nm    971\nn    981\no    977\np    973\nq    985\nr    977\ns    986\nt    983\nu    983\nv    980\nw    986\nx    979\ny    980\nz    985\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d404f0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d407f0>",
                "self.obj": "0        951\n1        955\n2         14\n3        302\n4        735\n        ... \n99995    592\n99996    366\n99997    933\n99998    773\n99999    681\nName: julie, Length: 100000, dtype: int64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([  0,   0,   0, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([951, 955,  14, ..., 933, 773, 681])",
                "codes": "array([  4,   9,  10, ..., 990, 991, 995])",
                "sorter": "array([65656, 47542, 32512, ..., 70314, 55648, 66961])",
                "idx": "array of shape 260",
                "inc": "array([1, 1, 1, ..., 1, 1, 1])",
                "mask": "array([False, False, False, ..., False, False, False])",
                "out": "array of shape 260",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    335\n     2015-08-24    334\n     2015-08-25    325\n     2015-08-26    308\n     2015-08-27    308\n                  ... \nz    2015-08-28    314\n     2015-08-29    312\n     2015-08-30    332\n     2015-08-31    333\n     2015-09-01    330\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a3d0>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a760>",
                "self.obj": "0        951.0\n1        955.0\n2         14.0\n3        302.0\n4        735.0\n         ...  \n99995    592.0\n99996    366.0\n99997    933.0\n99998    773.0\n99999    681.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([951., 955.,  14., ..., 933., 773., 681.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 35316, 15903, 40462])",
                "idx": "array([ 5883,  9589, 13114, 16728, 20291, 24002, 27624, 31271, 34868,\n       38508, 42084, 45720, 49461, 53037, 56630, 60384, 63969, 67585,\n       71197, 74748, 78360, 81959, 85588, 89195, 92881, 96469])",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([994, 954, 951, 950, 946, 952, 944, 954, 952, 953, 946, 949, 957,\n       945, 957, 947, 947, 958, 948, 968, 955, 948, 949, 960, 961, 952,\n       952])",
                "res": "array([954, 951, 950, 946, 952, 944, 954, 952, 953, 946, 949, 957, 945,\n       957, 947, 947, 958, 948, 968, 955, 948, 949, 960, 961, 952, 952])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    954\nb    951\nc    950\nd    946\ne    952\nf    944\ng    954\nh    952\ni    953\nj    946\nk    949\nl    957\nm    945\nn    957\no    947\np    947\nq    958\nr    948\ns    968\nt    955\nu    948\nv    949\nw    960\nx    961\ny    952\nz    952\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d6a340>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d6a550>",
                "self.obj": "0        951.0\n1        955.0\n2         14.0\n3        302.0\n4        735.0\n         ...  \n99995    592.0\n99996    366.0\n99997    933.0\n99998    773.0\n99999    681.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([951., 955.,  14., ..., 933., 773., 681.])",
                "codes": "array([ -1,  -1,  -1, ..., 983, 984, 991])",
                "sorter": "array([  103,   256,   273, ..., 70314, 55648, 66961])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    271\n     2015-08-24    274\n     2015-08-25    266\n     2015-08-26    252\n     2015-08-27    242\n                  ... \nz    2015-08-28    239\n     2015-08-29    259\n     2015-08-30    257\n     2015-08-31    279\n     2015-09-01    263\nName: julie, Length: 260, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d7a520>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d7a100>",
                "self.obj": "0        951.0\n1        955.0\n2         14.0\n3        302.0\n4        735.0\n         ...  \n99995    592.0\n99996    366.0\n99997    933.0\n99998    773.0\n99999    681.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([-1, -1, -1, ..., 25, 25, 25])",
                "_": "array of shape 1000",
                "val": "array([951., 955.,  14., ..., 933., 773., 681.])",
                "codes": "array([ -1,  -1,  -1, ..., 998, 999, 999])",
                "sorter": "array([  103,   256,   273, ..., 35316, 15903, 40462])",
                "idx": "array([ 5883,  9589, 13114, 16728, 20291, 24002, 27624, 31271, 34868,\n       38508, 42084, 45720, 49461, 53037, 56630, 60384, 63969, 67585,\n       71197, 74748, 78360, 81959, 85588, 89195, 92881, 96469])",
                "inc": "array([0, 0, 0, ..., 0, 1, 0])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array([994, 954, 951, 950, 946, 952, 944, 954, 952, 953, 946, 949, 957,\n       945, 957, 947, 947, 958, 948, 968, 955, 948, 949, 960, 961, 952,\n       952])",
                "res": "array([954, 951, 950, 946, 952, 944, 954, 952, 953, 946, 949, 957, 945,\n       957, 947, 947, 958, 948, 968, 955, 948, 949, 960, 961, 952, 952])",
                "ri": "Index(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n       'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'],\n      dtype='object', name='jim')",
                "out.dtype": "dtype('int64')",
                "result": "jim\na    954\nb    951\nc    950\nd    946\ne    952\nf    944\ng    954\nh    952\ni    953\nj    946\nk    949\nl    957\nm    945\nn    957\no    947\np    947\nq    958\nr    948\ns    968\nt    955\nu    948\nv    949\nw    960\nx    961\ny    952\nz    952\nName: julie, dtype: int64"
            }
        ],
        [
            {
                "self.grouper": "<pandas.core.groupby.ops.BaseGrouper object at 0x118d7a100>",
                "self": "<pandas.core.groupby.generic.SeriesGroupBy object at 0x118d7a0a0>",
                "self.obj": "0        951.0\n1        955.0\n2         14.0\n3        302.0\n4        735.0\n         ...  \n99995    592.0\n99996    366.0\n99997    933.0\n99998    773.0\n99999    681.0\nName: julie, Length: 100000, dtype: float64",
                "dropna": "True",
                "self._selection_name": "'julie'"
            },
            {
                "ids": "array([ -1,  -1,  -1, ..., 259, 259, 259])",
                "_": "array of shape 1000",
                "val": "array([951., 955.,  14., ..., 933., 773., 681.])",
                "codes": "array([ -1,  -1,  -1, ..., 983, 984, 991])",
                "sorter": "array([  103,   256,   273, ..., 70314, 55648, 66961])",
                "idx": "array of shape 260",
                "inc": "array([0, 0, 0, ..., 1, 1, 1])",
                "mask": "array([ True,  True,  True, ..., False, False, False])",
                "out": "array of shape 261",
                "res": "array of shape 260",
                "ri": "array of shape 260",
                "out.dtype": "dtype('int64')",
                "result": "jim  joe       \na    2015-08-23    271\n     2015-08-24    274\n     2015-08-25    266\n     2015-08-26    252\n     2015-08-27    242\n                  ... \nz    2015-08-28    239\n     2015-08-29    259\n     2015-08-30    257\n     2015-08-31    279\n     2015-09-01    263\nName: julie, Length: 260, dtype: int64"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "Index",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ],
        [
            {
                "self.grouper": "BaseGrouper",
                "self": "SeriesGroupBy",
                "self.obj": "Series",
                "dropna": "bool",
                "self._selection_name": "str"
            },
            {
                "ids": "ndarray",
                "_": "ndarray",
                "val": "ndarray",
                "codes": "ndarray",
                "sorter": "ndarray",
                "idx": "ndarray",
                "inc": "ndarray",
                "mask": "ndarray",
                "out": "ndarray",
                "res": "ndarray",
                "ri": "MultiIndex",
                "out.dtype": "dtype",
                "result": "Series"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}