{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 0,
                "5": 1,
                "6": 0,
                "7": 0
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True):\n\n    \"\"\"\n    replace the `to_replace` value with `value`. It is possible to create new blocks here, which makes this just a call to putmask. `regex` is not used here. It is used in ObjectBlocks. It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n    \n    # If we cannot replace with our dtype, convert to ObjectBlock and retry\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n    \n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not to_replace:\n            # Avoid costly checks since we can infer that there is nothing to replace in this block\n            if inplace:\n                return [self]\n            return [self.copy()]\n    \n        if len(to_replace) == 1:\n            # checks have reduced this back to the scalar case and we can avoid a costly object cast\n            return self.replace(to_replace[0], value, inplace=inplace, regex=regex, convert=convert)\n    \n        # TypeError or ValueError occurred within error handling causes infinite loop. Cast and retry only if not objectblock\n        if is_object_dtype(self):\n            raise AssertionError\n    \n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n    \n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        # The only non-DatetimeLike class that also has a non-trivial try_coerce_args is ObjectBlock, but that overrides replace,\n        # so does not get here.\n        to_replace = lib.maybe_convert_objects(to_replace, lib.strip_timestamp_timezone(values),\n                                              convert_numeric=False, convert_datetime=False, convert_timedelta=False)\n    \n    \n    mask = missing.mask_missing(values, to_replace)\n    \n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n    \n    try:\n        blocks = self.putmask(mask, value, inplace=inplace)\n    except (TypeError, ValueError):\n        # TypeError or ValueError occurred within error handling causes infinite loop. Cast and retry only if not objectblock\n        if is_object_dtype(self):\n            raise\n    \n        assert not self._can_hold_element(value), value\n    \n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=original_to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n        )\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks"
        }
    ]
}