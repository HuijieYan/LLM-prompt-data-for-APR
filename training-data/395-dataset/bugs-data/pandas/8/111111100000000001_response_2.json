{
    "pandas": [
        {
            "bugID": 8,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 0,
                "1.4.2": 0,
                "2.1.1": 0,
                "2.1.2": 0,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 1,
                "4": 0,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 668,
            "file_name": "pandas/core/internals/blocks.py",
            "replace_code": "def replace(self, to_replace, value, inplace: bool=False, regex: bool=False, convert: bool=True):\n\n    \"\"\"\n    replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n    \n    # Handle edge cases to prevent recursive calls\n    if not isinstance(to_replace, list):\n        to_replace = [to_replace]\n    \n    blocks = []\n    for x in to_replace:\n        if self._can_hold_element(x):\n            mask = self.values == x\n            if mask.any():\n                block = self.putmask(mask, value, inplace=inplace)\n                if convert:\n                    block = block.convert(numeric=False, copy=not inplace)\n                blocks.extend(block)\n        else:\n            if inplace:\n                blocks.append(self)\n            else:\n                blocks.append(self.copy())\n    \n    return blocks"
        }
    ]
}