{
    "pandas": [
        {
            "bugID": 163,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 1,
                "6": 0,
                "7": 1
            },
            "start_line": 226,
            "file_name": "/pandas/core/window.py",
            "replace_code": "def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n    import numpy as np\n    from typing import Optional\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = getattr(self._selected_obj, \"values\", self._selected_obj)\n    \n    values = values.copy()  # Ensure values is not readonly\n    if values.dtype.type is np.float32:  # Check if dtype is float32\n        values = values.astype(np.float64)  # Convert to float64\n    elif values.dtype.type is np.int32:  # Check if dtype is int32\n        values = values.astype(np.float64)  # Convert to float64\n    elif values.dtype.type is np.int64:  # Check if dtype is int64\n        raise NotImplementedError(\n            \"ops for {action} for this \"\n            \"dtype {dtype} are not \"\n            \"implemented\".format(action=self._window_type, dtype=values.dtype)\n        )\n    else:  # Convert to float64 if not inf, nan, int32 or int64\n        try:\n            values = values.astype(np.float64)\n        except (ValueError, TypeError):\n            raise TypeError(\"cannot handle this type -> {0}\".format(values.dtype))\n    \n    # Always convert inf to nan\n    values[np.isinf(values)] = np.nan\n    \n    return values"
        }
    ]
}