{
    "pandas:121": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/core/internals/blocks.py": {
            "buggy_functions": [
                {
                    "function_name": "_replace_coerce",
                    "function_code": "def _replace_coerce(\n    self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        block = super()._replace_coerce(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n            mask=mask,\n        )\n        if convert:\n            block = [b.convert(numeric=False, copy=True) for b in block]\n        return block\n    return self\n",
                    "decorators": [],
                    "docstring": "Replace value corresponding to the given boolean array with another\nvalue.\n\nParameters\n----------\nto_replace : object or pattern\n    Scalar to replace or regular expression to match.\nvalue : object\n    Replacement object.\ninplace : bool, default False\n    Perform inplace modification.\nregex : bool, default False\n    If true, perform regular expression substitution.\nconvert : bool, default True\n    If true, try to coerce any object types to better types.\nmask : array-like of bool, optional\n    True indicate corresponding element is ignored.\n\nReturns\n-------\nA new block if there is anything to replace or the original block.",
                    "start_line": 2790,
                    "variables": {
                        "mask.any": [
                            2816
                        ],
                        "mask": [
                            2816,
                            2823
                        ],
                        "block": [
                            2817,
                            2826,
                            2827
                        ],
                        "_replace_coerce": [
                            2817
                        ],
                        "super": [
                            2817
                        ],
                        "to_replace": [
                            2818
                        ],
                        "value": [
                            2819
                        ],
                        "inplace": [
                            2820
                        ],
                        "regex": [
                            2821
                        ],
                        "convert": [
                            2825,
                            2822
                        ],
                        "b.convert": [
                            2826
                        ],
                        "b": [
                            2826
                        ],
                        "self": [
                            2828
                        ]
                    },
                    "filtered_variables": {
                        "mask.any": [
                            2816
                        ],
                        "mask": [
                            2816,
                            2823
                        ],
                        "block": [
                            2817,
                            2826,
                            2827
                        ],
                        "_replace_coerce": [
                            2817
                        ],
                        "to_replace": [
                            2818
                        ],
                        "value": [
                            2819
                        ],
                        "inplace": [
                            2820
                        ],
                        "regex": [
                            2821
                        ],
                        "convert": [
                            2825,
                            2822
                        ],
                        "b.convert": [
                            2826
                        ],
                        "b": [
                            2826
                        ],
                        "self": [
                            2828
                        ]
                    },
                    "diff_line_number": 2827,
                    "class_data": {
                        "signature": "class ObjectBlock(Block)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, values, placement=None, ndim=2):\n    if issubclass(values.dtype.type, str):\n        values = np.array(values, dtype=object)\n    super().__init__(values, ndim=ndim, placement=placement)",
                            "@property\ndef is_bool(self):\n    \"\"\" we can be a bool if we have only bool values but are of type\n    object\n    \"\"\"\n    return lib.is_bool_array(self.values.ravel())",
                            "def convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False):\n    \"\"\" attempt to coerce any object types to better types return a copy of\n    the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n    can return multiple blocks!\n    \"\"\"\n\n    def f(mask, val, idx):\n        shape = val.shape\n        values = soft_convert_objects(val.ravel(), datetime=datetime, numeric=numeric, timedelta=timedelta, coerce=coerce, copy=copy)\n        if isinstance(values, np.ndarray):\n            values = values.reshape(shape)\n        values = _block_shape(values, ndim=self.ndim)\n        return values\n    if self.ndim == 2:\n        blocks = self.split_and_operate(None, f, False)\n    else:\n        values = f(None, self.values.ravel(), None)\n        blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n    return blocks",
                            "def _maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']:\n    if downcast is not None:\n        return blocks\n    return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])",
                            "def _can_hold_element(self, element: Any) -> bool:\n    return True",
                            "def should_store(self, value):\n    return not (issubclass(value.dtype.type, (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_)) or is_extension_array_dtype(value))",
                            "def replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True):\n    to_rep_is_list = is_list_like(to_replace)\n    value_is_list = is_list_like(value)\n    both_lists = to_rep_is_list and value_is_list\n    either_list = to_rep_is_list or value_is_list\n    result_blocks = []\n    blocks = [self]\n    if not either_list and is_re(to_replace):\n        return self._replace_single(to_replace, value, inplace=inplace, filter=filter, regex=True, convert=convert)\n    elif not (either_list or regex):\n        return super().replace(to_replace, value, inplace=inplace, filter=filter, regex=regex, convert=convert)\n    elif both_lists:\n        for to_rep, v in zip(to_replace, value):\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(to_rep, v, inplace=inplace, filter=filter, regex=regex, convert=convert)\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n    elif to_rep_is_list and regex:\n        for to_rep in to_replace:\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(to_rep, value, inplace=inplace, filter=filter, regex=regex, convert=convert)\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n    return self._replace_single(to_replace, value, inplace=inplace, filter=filter, convert=convert, regex=regex)",
                            "def _replace_single(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True, mask=None):\n    \"\"\"\n    Replace elements by the given value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    filter : list, optional\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    a new block, the result after replacing\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    to_rep_re = regex and is_re_compilable(to_replace)\n    regex_re = is_re_compilable(regex)\n    if to_rep_re and regex_re:\n        raise AssertionError('only one of to_replace and regex can be regex compilable')\n    if regex_re:\n        to_replace = regex\n    regex = regex_re or to_rep_re\n    if is_re(to_replace):\n        pattern = to_replace.pattern\n    else:\n        pattern = to_replace\n    if regex and pattern:\n        rx = re.compile(to_replace)\n    else:\n        return super().replace(to_replace, value, inplace=inplace, filter=filter, regex=regex)\n    new_values = self.values if inplace else self.values.copy()\n    if isna(value) or not isinstance(value, str):\n\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return value if rx.search(s) is not None else s\n            else:\n                return s\n    else:\n\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return rx.sub(value, s)\n            else:\n                return s\n    f = np.vectorize(re_replacer, otypes=[self.dtype])\n    if filter is None:\n        filt = slice(None)\n    else:\n        filt = self.mgr_locs.isin(filter).nonzero()[0]\n    if mask is None:\n        new_values[filt] = f(new_values[filt])\n    else:\n        new_values[filt][mask] = f(new_values[filt][mask])\n    block = self.make_block(new_values)\n    if convert:\n        block = block.convert(numeric=False)\n    return block",
                            "def _replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        block = super()._replace_coerce(to_replace=to_replace, value=value, inplace=inplace, regex=regex, convert=convert, mask=mask)\n        if convert:\n            block = [b.convert(numeric=False, copy=True) for b in block]\n        return block\n    return self",
                            "def f(mask, val, idx):\n    shape = val.shape\n    values = soft_convert_objects(val.ravel(), datetime=datetime, numeric=numeric, timedelta=timedelta, coerce=coerce, copy=copy)\n    if isinstance(values, np.ndarray):\n        values = values.reshape(shape)\n    values = _block_shape(values, ndim=self.ndim)\n    return values",
                            "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return value if rx.search(s) is not None else s\n    else:\n        return s",
                            "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return rx.sub(value, s)\n    else:\n        return s"
                        ],
                        "constructor_variables": [
                            "values"
                        ],
                        "class_level_variables": [
                            "__slots__",
                            "is_object",
                            "_can_hold_na"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, values, placement=None, ndim=2)",
                            "is_bool(self)",
                            "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                            "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                            "_can_hold_element(self, element: Any) -> bool",
                            "should_store(self, value)",
                            "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                            "_replace_single(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True, mask=None)",
                            "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                            "f(mask, val, idx)",
                            "re_replacer(s)",
                            "re_replacer(s)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e814df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e814df0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e814e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e814e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e80b350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e80b350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e80b7b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e80b7b0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e898e40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e898e40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e898f80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e898f80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x10fa0d760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x10fa0d760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x10fa0d530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x10fa0d530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e9ebf30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e9ebf30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e9ebdf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x11e9ebdf0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e45d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e45d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e4670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e4670>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e40d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e40d0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e4760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e4760>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118ce5030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118ce5030>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e44e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1190e44e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x119119120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x119119120>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1191191c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1191191c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118ce8440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118ce8440>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[ True]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ],
                        [
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118ce84e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            },
                            {
                                "mask.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x118ce84e0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "mask": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "block": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "to_replace": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "value": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b.convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.convert": {
                                    "variable_value": "<bound method ObjectBlock.convert of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def get_block_type(values, dtype=None):\n    \"\"\"\n    Find the appropriate Block subclass to use for the given values and dtype.\n\n    Parameters\n    ----------\n    values : ndarray-like\n    dtype : numpy or pandas dtype\n\n    Returns\n    -------\n    cls : class, subclass of Block\n    \"\"\"\n    dtype = dtype or values.dtype\n    vtype = dtype.type\n\n    if is_sparse(dtype):\n        # Need this first(ish) so that Sparse[datetime] is sparse\n        cls = ExtensionBlock\n    elif is_categorical(values):\n        cls = CategoricalBlock\n    elif issubclass(vtype, np.datetime64):\n        assert not is_datetime64tz_dtype(values)\n        cls = DatetimeBlock\n    elif is_datetime64tz_dtype(values):\n        cls = DatetimeTZBlock\n    elif is_interval_dtype(dtype) or is_period_dtype(dtype):\n        cls = ObjectValuesExtensionBlock\n    elif is_extension_array_dtype(values):\n        cls = ExtensionBlock\n    elif issubclass(vtype, np.floating):\n        cls = FloatBlock\n    elif issubclass(vtype, np.timedelta64):\n        assert issubclass(vtype, np.integer)\n        cls = TimeDeltaBlock\n    elif issubclass(vtype, np.complexfloating):\n        cls = ComplexBlock\n    elif issubclass(vtype, np.integer):\n        cls = IntBlock\n    elif dtype == np.bool_:\n        cls = BoolBlock\n    else:\n        cls = ObjectBlock\n    return cls",
                "def make_block(values, placement, klass=None, ndim=None, dtype=None, fastpath=None):\n    # Ensure that we don't allow PandasArray / PandasDtype in internals.\n    # For now, blocks should be backed by ndarrays when possible.\n    if isinstance(values, ABCPandasArray):\n        values = values.to_numpy()\n        if ndim and ndim > 1:\n            values = np.atleast_2d(values)\n\n    if isinstance(dtype, PandasDtype):\n        dtype = dtype.numpy_dtype\n\n    if fastpath is not None:\n        # GH#19265 pyarrow is passing this\n        warnings.warn(\n            \"fastpath argument is deprecated, will be removed in a future release.\",\n            FutureWarning,\n        )\n    if klass is None:\n        dtype = dtype or values.dtype\n        klass = get_block_type(values, dtype)\n\n    elif klass is DatetimeTZBlock and not is_datetime64tz_dtype(values):\n        # TODO: This is no longer hit internally; does it need to be retained\n        #  for e.g. pyarrow?\n        values = DatetimeArray._simple_new(values, dtype=dtype)\n\n    return klass(values, ndim=ndim, placement=placement)",
                "def _extend_blocks(result, blocks=None):\n    \"\"\" return a new extended blocks, givin the result \"\"\"\n    from pandas.core.internals import BlockManager\n\n    if blocks is None:\n        blocks = []\n    if isinstance(result, list):\n        for r in result:\n            if isinstance(r, list):\n                blocks.extend(r)\n            else:\n                blocks.append(r)\n    elif isinstance(result, BlockManager):\n        blocks.extend(result.blocks)\n    else:\n        blocks.append(result)\n    return blocks",
                "def _block_shape(values, ndim=1, shape=None):\n    \"\"\" guarantee the shape of the values to be at least 1 d \"\"\"\n    if values.ndim < ndim:\n        if shape is None:\n            shape = values.shape\n        if not is_extension_array_dtype(values):\n            # TODO: https://github.com/pandas-dev/pandas/issues/23023\n            # block.shape is incorrect for \"2D\" ExtensionArrays\n            # We can't, and don't need to, reshape.\n            values = values.reshape(tuple((1,) + shape))\n    return values",
                "def _merge_blocks(blocks, dtype=None, _can_consolidate=True):\n\n    if len(blocks) == 1:\n        return blocks[0]\n\n    if _can_consolidate:\n\n        if dtype is None:\n            if len({b.dtype for b in blocks}) != 1:\n                raise AssertionError(\"_merge_blocks are invalid!\")\n            dtype = blocks[0].dtype\n\n        # FIXME: optimization potential in case all mgrs contain slices and\n        # combination of those slices is a slice, too.\n        new_mgr_locs = np.concatenate([b.mgr_locs.as_array for b in blocks])\n        new_values = np.vstack([b.values for b in blocks])\n\n        argsort = np.argsort(new_mgr_locs)\n        new_values = new_values[argsort]\n        new_mgr_locs = new_mgr_locs[argsort]\n\n        return make_block(new_values, placement=new_mgr_locs)\n\n    # no merge\n    return blocks",
                "def _safe_reshape(arr, new_shape):\n    \"\"\"\n    If possible, reshape `arr` to have shape `new_shape`,\n    with a couple of exceptions (see gh-13012):\n\n    1) If `arr` is a ExtensionArray or Index, `arr` will be\n       returned as is.\n    2) If `arr` is a Series, the `_values` attribute will\n       be reshaped and returned.\n\n    Parameters\n    ----------\n    arr : array-like, object to be reshaped\n    new_shape : int or tuple of ints, the new shape\n    \"\"\"\n    if isinstance(arr, ABCSeries):\n        arr = arr._values\n    if not isinstance(arr, ABCExtensionArray):\n        arr = arr.reshape(new_shape)\n    return arr",
                "def _putmask_smart(v, mask, n):\n    \"\"\"\n    Return a new ndarray, try to preserve dtype if possible.\n\n    Parameters\n    ----------\n    v : `values`, updated in-place (array like)\n    mask : np.ndarray\n        Applies to both sides (array like).\n    n : `new values` either scalar or an array like aligned with `values`\n\n    Returns\n    -------\n    values : ndarray with updated values\n        this *may* be a copy of the original\n\n    See Also\n    --------\n    ndarray.putmask\n    \"\"\"\n\n    # we cannot use np.asarray() here as we cannot have conversions\n    # that numpy does when numeric are mixed with strings\n\n    # n should be the length of the mask or a scalar here\n    if not is_list_like(n):\n        n = np.repeat(n, len(mask))\n\n    # see if we are only masking values that if putted\n    # will work in the current dtype\n    try:\n        nn = n[mask]\n    except TypeError:\n        # TypeError: only integer scalar arrays can be converted to a scalar index\n        pass\n    else:\n        # make sure that we have a nullable type\n        # if we have nulls\n        if not _isna_compat(v, nn[0]):\n            pass\n        elif not (is_float_dtype(nn.dtype) or is_integer_dtype(nn.dtype)):\n            # only compare integers/floats\n            pass\n        elif not (is_float_dtype(v.dtype) or is_integer_dtype(v.dtype)):\n            # only compare integers/floats\n            pass\n        else:\n\n            # we ignore ComplexWarning here\n            with warnings.catch_warnings(record=True):\n                warnings.simplefilter(\"ignore\", np.ComplexWarning)\n                nn_at = nn.astype(v.dtype)\n\n            comp = nn == nn_at\n            if is_list_like(comp) and comp.all():\n                nv = v.copy()\n                nv[mask] = nn_at\n                return nv\n\n    n = np.asarray(n)\n\n    def _putmask_preserve(nv, n):\n        try:\n            nv[mask] = n[mask]\n        except (IndexError, ValueError):\n            nv[mask] = n\n        return nv\n\n    # preserves dtype if possible\n    if v.dtype.kind == n.dtype.kind:\n        return _putmask_preserve(v, n)\n\n    # change the dtype if needed\n    dtype, _ = maybe_promote(n.dtype)\n\n    if is_extension_array_dtype(v.dtype) and is_object_dtype(dtype):\n        v = v._internal_get_values(dtype)\n    else:\n        v = v.astype(dtype)\n\n    return _putmask_preserve(v, n)",
                "def __init__(self, values, placement, ndim=None):\n    self.ndim = self._check_ndim(values, ndim)\n    self.mgr_locs = placement\n    self.values = values\n\n    if self._validate_ndim and self.ndim and len(self.mgr_locs) != len(self.values):\n        raise ValueError(\n            \"Wrong number of items passed {val}, placement implies \"\n            \"{mgr}\".format(val=len(self.values), mgr=len(self.mgr_locs))\n        )",
                "def _check_ndim(self, values, ndim):\n    \"\"\"\n    ndim inference and validation.\n\n    Infers ndim from 'values' if not provided to __init__.\n    Validates that values.ndim and ndim are consistent if and only if\n    the class variable '_validate_ndim' is True.\n\n    Parameters\n    ----------\n    values : array-like\n    ndim : int or None\n\n    Returns\n    -------\n    ndim : int\n\n    Raises\n    ------\n    ValueError : the number of dimensions do not match\n    \"\"\"\n    if ndim is None:\n        ndim = values.ndim\n\n    if self._validate_ndim and values.ndim != ndim:\n        msg = \"Wrong number of dimensions. values.ndim != ndim [{} != {}]\"\n        raise ValueError(msg.format(values.ndim, ndim))\n\n    return ndim",
                "@property\ndef _holder(self):\n    \"\"\"The array-like that can hold the underlying values.\n\n    None for 'Block', overridden by subclasses that don't\n    use an ndarray.\n    \"\"\"\n    return None",
                "@property\ndef _consolidate_key(self):\n    return (self._can_consolidate, self.dtype.name)",
                "@property\ndef _is_single_block(self):\n    return self.ndim == 1",
                "@property\ndef is_view(self):\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    return self.values.base is not None",
                "@property\ndef is_datelike(self):\n    \"\"\" return True if I am a non-datelike \"\"\"\n    return self.is_datetime or self.is_timedelta",
                "def is_categorical_astype(self, dtype):\n    \"\"\"\n    validate that we have a astypeable to categorical,\n    returns a boolean if we are a categorical\n    \"\"\"\n    if dtype is Categorical or dtype is CategoricalDtype:\n        # this is a pd.Categorical, but is not\n        # a valid type for astypeing\n        raise TypeError(\"invalid type {0} for astype\".format(dtype))\n\n    elif is_categorical_dtype(dtype):\n        return True\n\n    return False",
                "def external_values(self, dtype=None):\n    \"\"\" return an outside world format, currently just the ndarray \"\"\"\n    return self.values",
                "def internal_values(self, dtype=None):\n    \"\"\" return an internal format, currently just the ndarray\n    this should be the pure internal API format\n    \"\"\"\n    return self.values",
                "def get_values(self, dtype=None):\n    \"\"\"\n    return an internal format, currently just the ndarray\n    this is often overridden to handle to_dense like operations\n    \"\"\"\n    if is_object_dtype(dtype):\n        return self.values.astype(object)\n    return self.values",
                "def get_block_values(self, dtype=None):\n    \"\"\"\n    This is used in the JSON C code\n    \"\"\"\n    return self.get_values(dtype=dtype)",
                "def to_dense(self):\n    return self.values.view()",
                "@property\ndef fill_value(self):\n    return np.nan",
                "@property\ndef mgr_locs(self):\n    return self._mgr_locs",
                "@mgr_locs.setter\ndef mgr_locs(self, new_mgr_locs):\n    if not isinstance(new_mgr_locs, libinternals.BlockPlacement):\n        new_mgr_locs = libinternals.BlockPlacement(new_mgr_locs)\n\n    self._mgr_locs = new_mgr_locs",
                "@property\ndef array_dtype(self):\n    \"\"\" the dtype to return if I want to construct this block as an\n    array\n    \"\"\"\n    return self.dtype",
                "def make_block(self, values, placement=None):\n    \"\"\"\n    Create a new block, with type inference propagate any values that are\n    not specified\n    \"\"\"\n    if placement is None:\n        placement = self.mgr_locs\n\n    return make_block(values, placement=placement, ndim=self.ndim)",
                "def make_block_same_class(self, values, placement=None, ndim=None, dtype=None):\n    \"\"\" Wrap given values in a block of same type as self. \"\"\"\n    if dtype is not None:\n        # issue 19431 fastparquet is passing this\n        warnings.warn(\n            \"dtype argument is deprecated, will be removed in a future release.\",\n            FutureWarning,\n        )\n    if placement is None:\n        placement = self.mgr_locs\n    if ndim is None:\n        ndim = self.ndim\n    return make_block(\n        values, placement=placement, ndim=ndim, klass=self.__class__, dtype=dtype\n    )",
                "def __repr__(self) -> str:\n    # don't want to print out all of the items here\n    name = pprint_thing(self.__class__.__name__)\n    if self._is_single_block:\n\n        result = \"{name}: {len} dtype: {dtype}\".format(\n            name=name, len=len(self), dtype=self.dtype\n        )\n\n    else:\n\n        shape = \" x \".join(pprint_thing(s) for s in self.shape)\n        result = \"{name}: {index}, {shape}, dtype: {dtype}\".format(\n            name=name,\n            index=pprint_thing(self.mgr_locs.indexer),\n            shape=shape,\n            dtype=self.dtype,\n        )\n\n    return result",
                "def __len__(self) -> int:\n    return len(self.values)",
                "def __getstate__(self):\n    return self.mgr_locs.indexer, self.values",
                "def __setstate__(self, state):\n    self.mgr_locs = libinternals.BlockPlacement(state[0])\n    self.values = state[1]\n    self.ndim = self.values.ndim",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n    return self.values[slicer]",
                "def getitem_block(self, slicer, new_mgr_locs=None):\n    \"\"\"\n    Perform __getitem__-like, return result as block.\n\n    As of now, only supports slices that preserve dimensionality.\n    \"\"\"\n    if new_mgr_locs is None:\n        if isinstance(slicer, tuple):\n            axis0_slicer = slicer[0]\n        else:\n            axis0_slicer = slicer\n        new_mgr_locs = self.mgr_locs[axis0_slicer]\n\n    new_values = self._slice(slicer)\n\n    if self._validate_ndim and new_values.ndim != self.ndim:\n        raise ValueError(\"Only same dim slicing is allowed\")\n\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                "@property\ndef shape(self):\n    return self.values.shape",
                "@property\ndef dtype(self):\n    return self.values.dtype",
                "@property\ndef ftype(self):\n    if getattr(self.values, \"_pandas_ftype\", False):\n        dtype = self.dtype.subtype\n    else:\n        dtype = self.dtype\n    return \"{dtype}:{ftype}\".format(dtype=dtype, ftype=self._ftype)",
                "def merge(self, other):\n    return _merge_blocks([self, other])",
                "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n    \"\"\"\n    values = self._concatenator(\n        [blk.values for blk in to_concat], axis=self.ndim - 1\n    )\n    return self.make_block_same_class(\n        values, placement=placement or slice(0, len(values), 1)\n    )",
                "def iget(self, i):\n    return self.values[i]",
                "def set(self, locs, values):\n    \"\"\"\n    Modify Block in-place with new item value\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.values[locs] = values",
                "def delete(self, loc):\n    \"\"\"\n    Delete given loc(-s) from block in-place.\n    \"\"\"\n    self.values = np.delete(self.values, loc, 0)\n    self.mgr_locs = self.mgr_locs.delete(loc)",
                "def apply(self, func, **kwargs):\n    \"\"\" apply the function to my values; return a block if we are not\n    one\n    \"\"\"\n    with np.errstate(all=\"ignore\"):\n        result = func(self.values, **kwargs)\n    if not isinstance(result, Block):\n        result = self.make_block(values=_block_shape(result, ndim=self.ndim))\n\n    return result",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    \"\"\" fillna on the block with the value. If we fail, then convert to\n    ObjectBlock and try again\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    mask = isna(self.values)\n    if limit is not None:\n        limit = libalgos._validate_limit(None, limit=limit)\n        mask[mask.cumsum(self.ndim - 1) > limit] = False\n\n    if not self._can_hold_na:\n        if inplace:\n            return self\n        else:\n            return self.copy()\n\n    if self._can_hold_element(value):\n        # equivalent: _try_coerce_args(value) would not raise\n        blocks = self.putmask(mask, value, inplace=inplace)\n        return self._maybe_downcast(blocks, downcast)\n\n    # we can't process the value, but nothing to do\n    if not mask.any():\n        return self if inplace else self.copy()\n\n    # operate column-by-column\n    def f(mask, val, idx):\n        block = self.coerce_to_target_dtype(value)\n\n        # slice out our block\n        if idx is not None:\n            # i.e. self.ndim == 2\n            block = block.getitem_block(slice(idx, idx + 1))\n        return block.fillna(value, limit=limit, inplace=inplace, downcast=None)\n\n    return self.split_and_operate(None, f, inplace)",
                "def split_and_operate(self, mask, f, inplace: bool):\n    \"\"\"\n    split the block per-column, and apply the callable f\n    per-column, return a new block for each. Handle\n    masking which will not change a block unless needed.\n\n    Parameters\n    ----------\n    mask : 2-d boolean mask\n    f : callable accepting (1d-mask, 1d values, indexer)\n    inplace : boolean\n\n    Returns\n    -------\n    list of blocks\n    \"\"\"\n\n    if mask is None:\n        mask = np.broadcast_to(True, shape=self.shape)\n\n    new_values = self.values\n\n    def make_a_block(nv, ref_loc):\n        if isinstance(nv, list):\n            assert len(nv) == 1, nv\n            assert isinstance(nv[0], Block)\n            block = nv[0]\n        else:\n            # Put back the dimension that was taken from it and make\n            # a block out of the result.\n            nv = _block_shape(nv, ndim=self.ndim)\n            block = self.make_block(values=nv, placement=ref_loc)\n        return block\n\n    # ndim == 1\n    if self.ndim == 1:\n        if mask.any():\n            nv = f(mask, new_values, None)\n        else:\n            nv = new_values if inplace else new_values.copy()\n        block = make_a_block(nv, self.mgr_locs)\n        return [block]\n\n    # ndim > 1\n    new_blocks = []\n    for i, ref_loc in enumerate(self.mgr_locs):\n        m = mask[i]\n        v = new_values[i]\n\n        # need a new block\n        if m.any():\n            nv = f(m, v, i)\n        else:\n            nv = v if inplace else v.copy()\n\n        block = make_a_block(nv, [ref_loc])\n        new_blocks.append(block)\n\n    return new_blocks",
                "def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n    # no need to downcast our float\n    # unless indicated\n    if downcast is None and (\n        self.is_float or self.is_timedelta or self.is_datetime\n    ):\n        return blocks\n\n    return _extend_blocks([b.downcast(downcast) for b in blocks])",
                "def downcast(self, dtypes=None):\n    \"\"\" try to downcast each item to the dict of dtypes if present \"\"\"\n\n    # turn it off completely\n    if dtypes is False:\n        return self\n\n    values = self.values\n\n    # single block handling\n    if self._is_single_block:\n\n        # try to cast all non-floats here\n        if dtypes is None:\n            dtypes = \"infer\"\n\n        nv = maybe_downcast_to_dtype(values, dtypes)\n        return self.make_block(nv)\n\n    # ndim > 1\n    if dtypes is None:\n        return self\n\n    if not (dtypes == \"infer\" or isinstance(dtypes, dict)):\n        raise ValueError(\n            \"downcast must have a dictionary or 'infer' as its argument\"\n        )\n    elif dtypes != \"infer\":\n        raise AssertionError(\"dtypes as dict is not supported yet\")\n\n    # operate column-by-column\n    # this is expensive as it splits the blocks items-by-item\n    def f(mask, val, idx):\n        val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n        return val\n\n    return self.split_and_operate(None, f, False)",
                "def astype(self, dtype, copy=False, errors=\"raise\", **kwargs):\n    return self._astype(dtype, copy=copy, errors=errors, **kwargs)",
                "def _astype(self, dtype, copy=False, errors=\"raise\", **kwargs):\n    \"\"\"Coerce to the new type\n\n    Parameters\n    ----------\n    dtype : str, dtype convertible\n    copy : boolean, default False\n        copy if indicated\n    errors : str, {'raise', 'ignore'}, default 'ignore'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    errors_legal_values = (\"raise\", \"ignore\")\n\n    if errors not in errors_legal_values:\n        invalid_arg = (\n            \"Expected value of kwarg 'errors' to be one of {}. \"\n            \"Supplied value is '{}'\".format(list(errors_legal_values), errors)\n        )\n        raise ValueError(invalid_arg)\n\n    if inspect.isclass(dtype) and issubclass(dtype, ExtensionDtype):\n        msg = (\n            \"Expected an instance of {}, but got the class instead. \"\n            \"Try instantiating 'dtype'.\".format(dtype.__name__)\n        )\n        raise TypeError(msg)\n\n    # may need to convert to categorical\n    if self.is_categorical_astype(dtype):\n\n        if is_categorical_dtype(self.values):\n            # GH 10696/18593: update an existing categorical efficiently\n            return self.make_block(self.values.astype(dtype, copy=copy))\n\n        return self.make_block(Categorical(self.values, dtype=dtype))\n\n    dtype = pandas_dtype(dtype)\n\n    # astype processing\n    if is_dtype_equal(self.dtype, dtype):\n        if copy:\n            return self.copy()\n        return self\n\n    # force the copy here\n    if self.is_extension:\n        # TODO: Should we try/except this astype?\n        values = self.values.astype(dtype)\n    else:\n        if issubclass(dtype.type, str):\n\n            # use native type formatting for datetime/tz/timedelta\n            if self.is_datelike:\n                values = self.to_native_types()\n\n            # astype formatting\n            else:\n                values = self.get_values()\n\n        else:\n            values = self.get_values(dtype=dtype)\n\n        # _astype_nansafe works fine with 1-d only\n        vals1d = values.ravel()\n        try:\n            values = astype_nansafe(vals1d, dtype, copy=True)\n        except (ValueError, TypeError):\n            # e.g. astype_nansafe can fail on object-dtype of strings\n            #  trying to convert to float\n            if errors == \"raise\":\n                raise\n            newb = self.copy() if copy else self\n            return newb\n\n    # TODO(extension)\n    # should we make this attribute?\n    if isinstance(values, np.ndarray):\n        values = values.reshape(self.shape)\n\n    newb = make_block(values, placement=self.mgr_locs, ndim=self.ndim)\n\n    if newb.is_numeric and self.is_numeric:\n        if newb.shape != self.shape:\n            raise TypeError(\n                \"cannot set astype for copy = [{copy}] for dtype \"\n                \"({dtype} [{shape}]) to different shape \"\n                \"({newb_dtype} [{newb_shape}])\".format(\n                    copy=copy,\n                    dtype=self.dtype.name,\n                    shape=self.shape,\n                    newb_dtype=newb.dtype.name,\n                    newb_shape=newb.shape,\n                )\n            )\n    return newb",
                "def convert(\n    self,\n    copy: bool = True,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n):\n    \"\"\" attempt to coerce any object types to better types return a copy\n    of the block (if copy = True) by definition we are not an ObjectBlock\n    here!\n    \"\"\"\n\n    return self.copy() if copy else self",
                "def _can_hold_element(self, element: Any) -> bool:\n    \"\"\" require the same dtype as ourselves \"\"\"\n    dtype = self.values.dtype.type\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, dtype)\n    return isinstance(element, dtype)",
                "def to_native_types(self, slicer=None, na_rep=\"nan\", quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n    values = self.get_values()\n\n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n\n    if not self.is_object and not quoting:\n        itemsize = writers.word_len(na_rep)\n        values = values.astype(\"<U{size}\".format(size=itemsize))\n    else:\n        values = np.array(values, dtype=\"object\")\n\n    values[mask] = na_rep\n    return values",
                "def copy(self, deep=True):\n    \"\"\" copy constructor \"\"\"\n    values = self.values\n    if deep:\n        values = values.copy()\n    return self.make_block_same_class(values, ndim=self.ndim)",
                "def replace(\n    self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n):\n    \"\"\"replace the to_replace value with value, possible to create new\n    blocks here this is just a call to putmask. regex is not used here.\n    It is used in ObjectBlocks.  It is here for API compatibility.\n    \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    original_to_replace = to_replace\n\n    # If we cannot replace with own dtype, convert to ObjectBlock and\n    # retry\n    if not self._can_hold_element(to_replace):\n        if not isinstance(to_replace, list):\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        to_replace = [x for x in to_replace if self._can_hold_element(x)]\n        if not len(to_replace):\n            # GH#28084 avoid costly checks since we can infer\n            #  that there is nothing to replace in this block\n            if inplace:\n                return [self]\n            return [self.copy()]\n\n        if len(to_replace) == 1:\n            # _can_hold_element checks have reduced this back to the\n            #  scalar case and we can avoid a costly object cast\n            return self.replace(\n                to_replace[0],\n                value,\n                inplace=inplace,\n                filter=filter,\n                regex=regex,\n                convert=convert,\n            )\n\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise AssertionError\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            filter=filter,\n            regex=regex,\n            convert=convert,\n        )\n\n    values = self.values\n    if lib.is_scalar(to_replace) and isinstance(values, np.ndarray):\n        # The only non-DatetimeLike class that also has a non-trivial\n        #  try_coerce_args is ObjectBlock, but that overrides replace,\n        #  so does not get here.\n        to_replace = convert_scalar(values, to_replace)\n\n    mask = missing.mask_missing(values, to_replace)\n    if filter is not None:\n        filtered_out = ~self.mgr_locs.isin(filter)\n        mask[filtered_out.nonzero()[0]] = False\n\n    if not mask.any():\n        if inplace:\n            return [self]\n        return [self.copy()]\n\n    try:\n        blocks = self.putmask(mask, value, inplace=inplace)\n        # Note: it is _not_ the case that self._can_hold_element(value)\n        #  is always true at this point.  In particular, that can fail\n        #  for:\n        #   \"2u\" with bool-dtype, float-dtype\n        #   0.5 with int64-dtype\n        #   np.nan with int64-dtype\n    except (TypeError, ValueError):\n        # GH 22083, TypeError or ValueError occurred within error handling\n        # causes infinite loop. Cast and retry only if not objectblock.\n        if is_object_dtype(self):\n            raise\n\n        assert not self._can_hold_element(value), value\n\n        # try again with a compatible block\n        block = self.astype(object)\n        return block.replace(\n            to_replace=original_to_replace,\n            value=value,\n            inplace=inplace,\n            filter=filter,\n            regex=regex,\n            convert=convert,\n        )\n    if convert:\n        blocks = [b.convert(numeric=False, copy=not inplace) for b in blocks]\n    return blocks",
                "def _replace_single(self, *args, **kwargs):\n    \"\"\" no-op on a non-ObjectBlock \"\"\"\n    return self if kwargs[\"inplace\"] else self.copy()",
                "def setitem(self, indexer, value):\n    \"\"\"\n    Set the value inplace, returning a a maybe different typed block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    transpose = self.ndim == 2\n\n    # coerce None values, if appropriate\n    if value is None:\n        if self.is_numeric:\n            value = np.nan\n\n    # coerce if block dtype can store value\n    values = self.values\n    if self._can_hold_element(value):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(value):\n            value = convert_scalar(values, value)\n\n    else:\n        # current dtype cannot store value, coerce to common dtype\n        find_dtype = False\n\n        if hasattr(value, \"dtype\"):\n            dtype = value.dtype\n            find_dtype = True\n\n        elif lib.is_scalar(value) and not isna(value):\n            dtype, _ = infer_dtype_from_scalar(value, pandas_dtype=True)\n            find_dtype = True\n\n        if find_dtype:\n            dtype = find_common_type([values.dtype, dtype])\n            if not is_dtype_equal(self.dtype, dtype):\n                b = self.astype(dtype)\n                return b.setitem(indexer, value)\n\n    # value must be storeable at this moment\n    if is_extension_array_dtype(getattr(value, \"dtype\", None)):\n        # We need to be careful not to allow through strings that\n        #  can be parsed to EADtypes\n        arr_value = value\n    else:\n        arr_value = np.array(value)\n\n    # cast the values to a type that can hold nan (if necessary)\n    if not self._can_hold_element(value):\n        dtype, _ = maybe_promote(arr_value.dtype)\n        values = values.astype(dtype)\n\n    if transpose:\n        values = values.T\n\n    # length checking\n    check_setitem_lengths(indexer, value, values)\n\n    if is_empty_indexer(indexer, arr_value):\n        # GH#8669 empty indexers\n        pass\n\n    elif is_scalar_indexer(indexer, arr_value):\n        # setting a single element for each dim and with a rhs that could\n        #  be e.g. a list; see GH#6043\n        values[indexer] = value\n\n    # if we are an exact match (ex-broadcasting),\n    # then use the resultant dtype\n    elif (\n        len(arr_value.shape)\n        and arr_value.shape[0] == values.shape[0]\n        and arr_value.size == values.size\n    ):\n        values[indexer] = value\n        try:\n            values = values.astype(arr_value.dtype)\n        except ValueError:\n            pass\n\n    # set\n    else:\n        values[indexer] = value\n\n    if transpose:\n        values = values.T\n    block = self.make_block(values)\n    return block",
                "def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n    \"\"\" putmask the data to the block; it is possible that we may create a\n    new dtype of block\n\n    return the resulting block(s)\n\n    Parameters\n    ----------\n    mask  : the condition to respect\n    new : a ndarray/object\n    align : boolean, perform alignment on other/cond, default is True\n    inplace : perform inplace modification, default is False\n    axis : int\n    transpose : boolean\n        Set to True if self is stored with axes reversed\n\n    Returns\n    -------\n    a list of new blocks, the result of the putmask\n    \"\"\"\n\n    new_values = self.values if inplace else self.values.copy()\n\n    new = getattr(new, \"values\", new)\n    mask = getattr(mask, \"values\", mask)\n\n    # if we are passed a scalar None, convert it here\n    if not is_list_like(new) and isna(new) and not self.is_object:\n        # FIXME: make sure we have compatible NA\n        new = self.fill_value\n\n    if self._can_hold_element(new):\n        # We only get here for non-Extension Blocks, so _try_coerce_args\n        #  is only relevant for DatetimeBlock and TimedeltaBlock\n        if lib.is_scalar(new):\n            new = convert_scalar(new_values, new)\n\n        if transpose:\n            new_values = new_values.T\n\n        # If the default repeat behavior in np.putmask would go in the\n        # wrong direction, then explicitly repeat and reshape new instead\n        if getattr(new, \"ndim\", 0) >= 1:\n            if self.ndim - 1 == new.ndim and axis == 1:\n                new = np.repeat(new, new_values.shape[-1]).reshape(self.shape)\n            new = new.astype(new_values.dtype)\n\n        # we require exact matches between the len of the\n        # values we are setting (or is compat). np.putmask\n        # doesn't check this and will simply truncate / pad\n        # the output, but we want sane error messages\n        #\n        # TODO: this prob needs some better checking\n        # for 2D cases\n        if (\n            is_list_like(new)\n            and np.any(mask[mask])\n            and getattr(new, \"ndim\", 1) == 1\n        ):\n\n            if not (\n                mask.shape[-1] == len(new)\n                or mask[mask].shape[-1] == len(new)\n                or len(new) == 1\n            ):\n                raise ValueError(\"cannot assign mismatch length to masked array\")\n\n        np.putmask(new_values, mask, new)\n\n    # maybe upcast me\n    elif mask.any():\n        if transpose:\n            mask = mask.T\n            if isinstance(new, np.ndarray):\n                new = new.T\n            axis = new_values.ndim - axis - 1\n\n        # Pseudo-broadcast\n        if getattr(new, \"ndim\", 0) >= 1:\n            if self.ndim - 1 == new.ndim:\n                new_shape = list(new.shape)\n                new_shape.insert(axis, 1)\n                new = new.reshape(tuple(new_shape))\n\n        # operate column-by-column\n        def f(mask, val, idx):\n\n            if idx is None:\n                # ndim==1 case.\n                n = new\n            else:\n\n                if isinstance(new, np.ndarray):\n                    n = np.squeeze(new[idx % new.shape[0]])\n                else:\n                    n = np.array(new)\n\n                # type of the new block\n                dtype, _ = maybe_promote(n.dtype)\n\n                # we need to explicitly astype here to make a copy\n                n = n.astype(dtype)\n\n            nv = _putmask_smart(val, mask, n)\n            return nv\n\n        new_blocks = self.split_and_operate(mask, f, inplace)\n        return new_blocks\n\n    if inplace:\n        return [self]\n\n    if transpose:\n        new_values = new_values.T\n\n    return [self.make_block(new_values)]",
                "def coerce_to_target_dtype(self, other):\n    \"\"\"\n    coerce the current block to a dtype compat for other\n    we will return a block, possibly object, and not raise\n\n    we can also safely try to coerce to the same dtype\n    and will receive the same block\n    \"\"\"\n\n    # if we cannot then coerce to object\n    dtype, _ = infer_dtype_from(other, pandas_dtype=True)\n\n    if is_dtype_equal(self.dtype, dtype):\n        return self\n\n    if self.is_bool or is_object_dtype(dtype) or is_bool_dtype(dtype):\n        # we don't upcast to bool\n        return self.astype(object)\n\n    elif (self.is_float or self.is_complex) and (\n        is_integer_dtype(dtype) or is_float_dtype(dtype)\n    ):\n        # don't coerce float/complex to int\n        return self\n\n    elif (\n        self.is_datetime\n        or is_datetime64_dtype(dtype)\n        or is_datetime64tz_dtype(dtype)\n    ):\n\n        # not a datetime\n        if not (\n            (is_datetime64_dtype(dtype) or is_datetime64tz_dtype(dtype))\n            and self.is_datetime\n        ):\n            return self.astype(object)\n\n        # don't upcast timezone with different timezone or no timezone\n        mytz = getattr(self.dtype, \"tz\", None)\n        othertz = getattr(dtype, \"tz\", None)\n\n        if not tz_compare(mytz, othertz):\n            return self.astype(object)\n\n        raise AssertionError(\n            \"possible recursion in \"\n            \"coerce_to_target_dtype: {} {}\".format(self, other)\n        )\n\n    elif self.is_timedelta or is_timedelta64_dtype(dtype):\n\n        # not a timedelta\n        if not (is_timedelta64_dtype(dtype) and self.is_timedelta):\n            return self.astype(object)\n\n        raise AssertionError(\n            \"possible recursion in \"\n            \"coerce_to_target_dtype: {} {}\".format(self, other)\n        )\n\n    try:\n        return self.astype(dtype)\n    except (ValueError, TypeError, OverflowError):\n        return self.astype(object)",
                "def interpolate(\n    self,\n    method=\"pad\",\n    axis=0,\n    index=None,\n    values=None,\n    inplace=False,\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    fill_value=None,\n    coerce=False,\n    downcast=None,\n    **kwargs,\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    def check_int_bool(self, inplace):\n        # Only FloatBlocks will contain NaNs.\n        # timedelta subclasses IntBlock\n        if (self.is_bool or self.is_integer) and not self.is_timedelta:\n            if inplace:\n                return self\n            else:\n                return self.copy()\n\n    # a fill na type method\n    try:\n        m = missing.clean_fill_method(method)\n    except ValueError:\n        m = None\n\n    if m is not None:\n        r = check_int_bool(self, inplace)\n        if r is not None:\n            return r\n        return self._interpolate_with_fill(\n            method=m,\n            axis=axis,\n            inplace=inplace,\n            limit=limit,\n            fill_value=fill_value,\n            coerce=coerce,\n            downcast=downcast,\n        )\n    # validate the interp method\n    m = missing.clean_interp_method(method, **kwargs)\n\n    r = check_int_bool(self, inplace)\n    if r is not None:\n        return r\n    return self._interpolate(\n        method=m,\n        index=index,\n        values=values,\n        axis=axis,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        fill_value=fill_value,\n        inplace=inplace,\n        downcast=downcast,\n        **kwargs,\n    )",
                "def _interpolate_with_fill(\n    self,\n    method=\"pad\",\n    axis=0,\n    inplace=False,\n    limit=None,\n    fill_value=None,\n    coerce=False,\n    downcast=None,\n):\n    \"\"\" fillna but using the interpolate machinery \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # if we are coercing, then don't force the conversion\n    # if the block can't hold the type\n    if coerce:\n        if not self._can_hold_na:\n            if inplace:\n                return [self]\n            else:\n                return [self.copy()]\n\n    values = self.values if inplace else self.values.copy()\n\n    # We only get here for non-ExtensionBlock\n    fill_value = convert_scalar(self.values, fill_value)\n\n    values = missing.interpolate_2d(\n        values,\n        method=method,\n        axis=axis,\n        limit=limit,\n        fill_value=fill_value,\n        dtype=self.dtype,\n    )\n\n    blocks = [self.make_block_same_class(values, ndim=self.ndim)]\n    return self._maybe_downcast(blocks, downcast)",
                "def _interpolate(\n    self,\n    method=None,\n    index=None,\n    values=None,\n    fill_value=None,\n    axis=0,\n    limit=None,\n    limit_direction=\"forward\",\n    limit_area=None,\n    inplace=False,\n    downcast=None,\n    **kwargs,\n):\n    \"\"\" interpolate using scipy wrappers \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    data = self.values if inplace else self.values.copy()\n\n    # only deal with floats\n    if not self.is_float:\n        if not self.is_integer:\n            return self\n        data = data.astype(np.float64)\n\n    if fill_value is None:\n        fill_value = self.fill_value\n\n    if method in (\"krogh\", \"piecewise_polynomial\", \"pchip\"):\n        if not index.is_monotonic:\n            raise ValueError(\n                \"{0} interpolation requires that the \"\n                \"index be monotonic.\".format(method)\n            )\n    # process 1-d slices in the axis direction\n\n    def func(x):\n\n        # process a 1-d slice, returning it\n        # should the axis argument be handled below in apply_along_axis?\n        # i.e. not an arg to missing.interpolate_1d\n        return missing.interpolate_1d(\n            index,\n            x,\n            method=method,\n            limit=limit,\n            limit_direction=limit_direction,\n            limit_area=limit_area,\n            fill_value=fill_value,\n            bounds_error=False,\n            **kwargs,\n        )\n\n    # interp each column independently\n    interp_values = np.apply_along_axis(func, axis, data)\n\n    blocks = [self.make_block_same_class(interp_values)]\n    return self._maybe_downcast(blocks, downcast)",
                "def take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None):\n    \"\"\"\n    Take values according to indexer and return them as a block.bb\n\n    \"\"\"\n\n    # algos.take_nd dispatches for DatetimeTZBlock, CategoricalBlock\n    # so need to preserve types\n    # sparse is treated like an ndarray, but needs .get_values() shaping\n\n    values = self.values\n\n    if fill_tuple is None:\n        fill_value = self.fill_value\n        allow_fill = False\n    else:\n        fill_value = fill_tuple[0]\n        allow_fill = True\n\n    new_values = algos.take_nd(\n        values, indexer, axis=axis, allow_fill=allow_fill, fill_value=fill_value\n    )\n\n    # Called from three places in managers, all of which satisfy\n    #  this assertion\n    assert not (axis == 0 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n\n    if not is_dtype_equal(new_values.dtype, self.dtype):\n        return self.make_block(new_values, new_mgr_locs)\n    else:\n        return self.make_block_same_class(new_values, new_mgr_locs)",
                "def diff(self, n: int, axis: int = 1) -> List[\"Block\"]:\n    \"\"\" return block for the diff of the values \"\"\"\n    new_values = algos.diff(self.values, n, axis=axis)\n    return [self.make_block(values=new_values)]",
                "def shift(self, periods, axis=0, fill_value=None):\n    \"\"\" shift the block by periods, possibly upcast \"\"\"\n\n    # convert integer to float if necessary. need to do a lot more than\n    # that, handle boolean etc also\n    new_values, fill_value = maybe_upcast(self.values, fill_value)\n\n    # make sure array sent to np.roll is c_contiguous\n    f_ordered = new_values.flags.f_contiguous\n    if f_ordered:\n        new_values = new_values.T\n        axis = new_values.ndim - axis - 1\n\n    if np.prod(new_values.shape):\n        new_values = np.roll(new_values, ensure_platform_int(periods), axis=axis)\n\n    axis_indexer = [slice(None)] * self.ndim\n    if periods > 0:\n        axis_indexer[axis] = slice(None, periods)\n    else:\n        axis_indexer[axis] = slice(periods, None)\n    new_values[tuple(axis_indexer)] = fill_value\n\n    # restore original order\n    if f_ordered:\n        new_values = new_values.T\n\n    return [self.make_block(new_values)]",
                "def where(\n    self,\n    other,\n    cond,\n    align=True,\n    errors=\"raise\",\n    try_cast: bool = False,\n    axis: int = 0,\n) -> List[\"Block\"]:\n    \"\"\"\n    evaluate the block; return result block(s) from the result\n\n    Parameters\n    ----------\n    other : a ndarray/object\n    cond  : the condition to respect\n    align : boolean, perform alignment on other/cond\n    errors : str, {'raise', 'ignore'}, default 'raise'\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object\n    axis : int\n\n    Returns\n    -------\n    a new block(s), the result of the func\n    \"\"\"\n    import pandas.core.computation.expressions as expressions\n\n    assert errors in [\"raise\", \"ignore\"]\n    transpose = self.ndim == 2\n\n    values = self.values\n    orig_other = other\n    if transpose:\n        values = values.T\n\n    other = getattr(other, \"_values\", getattr(other, \"values\", other))\n    cond = getattr(cond, \"values\", cond)\n\n    # If the default broadcasting would go in the wrong direction, then\n    # explicitly reshape other instead\n    if getattr(other, \"ndim\", 0) >= 1:\n        if values.ndim - 1 == other.ndim and axis == 1:\n            other = other.reshape(tuple(other.shape + (1,)))\n        elif transpose and values.ndim == self.ndim - 1:\n            cond = cond.T\n\n    if not hasattr(cond, \"shape\"):\n        raise ValueError(\"where must have a condition that is ndarray like\")\n\n    # our where function\n    def func(cond, values, other):\n\n        if not (\n            (self.is_integer or self.is_bool)\n            and lib.is_float(other)\n            and np.isnan(other)\n        ):\n            # np.where will cast integer array to floats in this case\n            if not self._can_hold_element(other):\n                raise TypeError\n            if lib.is_scalar(other) and isinstance(values, np.ndarray):\n                other = convert_scalar(values, other)\n\n        fastres = expressions.where(cond, values, other)\n        return fastres\n\n    if cond.ravel().all():\n        result = values\n    else:\n        # see if we can operate on the entire block, or need item-by-item\n        # or if we are a single block (ndim == 1)\n        try:\n            result = func(cond, values, other)\n        except TypeError:\n\n            # we cannot coerce, return a compat dtype\n            # we are explicitly ignoring errors\n            block = self.coerce_to_target_dtype(other)\n            blocks = block.where(\n                orig_other,\n                cond,\n                align=align,\n                errors=errors,\n                try_cast=try_cast,\n                axis=axis,\n            )\n            return self._maybe_downcast(blocks, \"infer\")\n\n    if self._can_hold_na or self.ndim == 1:\n\n        if transpose:\n            result = result.T\n\n        return [self.make_block(result)]\n\n    # might need to separate out blocks\n    axis = cond.ndim - 1\n    cond = cond.swapaxes(axis, 0)\n    mask = np.array([cond[i].all() for i in range(cond.shape[0])], dtype=bool)\n\n    result_blocks = []\n    for m in [mask, ~mask]:\n        if m.any():\n            taken = result.take(m.nonzero()[0], axis=axis)\n            r = maybe_downcast_numeric(taken, self.dtype)\n            nb = self.make_block(r.T, placement=self.mgr_locs[m])\n            result_blocks.append(nb)\n\n    return result_blocks",
                "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return array_equivalent(self.values, other.values)",
                "def _unstack(self, unstacker_func, new_columns, n_rows, fill_value):\n    \"\"\"Return a list of unstacked blocks of self\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        Partially applied unstacker.\n    new_columns : Index\n        All columns of the unstacked BlockManager.\n    n_rows : int\n        Only used in ExtensionBlock._unstack\n    fill_value : int\n        Only used in ExtensionBlock._unstack\n\n    Returns\n    -------\n    blocks : list of Block\n        New blocks of unstacked values.\n    mask : array_like of bool\n        The mask of columns of `blocks` we should keep.\n    \"\"\"\n    unstacker = unstacker_func(self.values.T)\n    new_items = unstacker.get_new_columns()\n    new_placement = new_columns.get_indexer(new_items)\n    new_values, mask = unstacker.get_new_values()\n\n    mask = mask.any(0)\n    new_values = new_values.T[mask]\n    new_placement = new_placement[mask]\n\n    blocks = [make_block(new_values, placement=new_placement)]\n    return blocks, mask",
                "def quantile(self, qs, interpolation=\"linear\", axis=0):\n    \"\"\"\n    compute the quantiles of the\n\n    Parameters\n    ----------\n    qs: a scalar or list of the quantiles to be computed\n    interpolation: type of interpolation, default 'linear'\n    axis: axis to compute, default 0\n\n    Returns\n    -------\n    Block\n    \"\"\"\n    # We should always have ndim == 2 becase Series dispatches to DataFrame\n    assert self.ndim == 2\n\n    values = self.get_values()\n\n    is_empty = values.shape[axis] == 0\n    orig_scalar = not is_list_like(qs)\n    if orig_scalar:\n        # make list-like, unpack later\n        qs = [qs]\n\n    if is_empty:\n        # create the array of na_values\n        # 2d len(values) * len(qs)\n        result = np.repeat(\n            np.array([self.fill_value] * len(qs)), len(values)\n        ).reshape(len(values), len(qs))\n    else:\n        # asarray needed for Sparse, see GH#24600\n        mask = np.asarray(isna(values))\n        result = nanpercentile(\n            values,\n            np.array(qs) * 100,\n            axis=axis,\n            na_value=self.fill_value,\n            mask=mask,\n            ndim=values.ndim,\n            interpolation=interpolation,\n        )\n\n        result = np.array(result, copy=False)\n        result = result.T\n\n    if orig_scalar and not lib.is_scalar(result):\n        # result could be scalar in case with is_empty and self.ndim == 1\n        assert result.shape[-1] == 1, result.shape\n        result = result[..., 0]\n        result = lib.item_from_zerodim(result)\n\n    ndim = np.ndim(result)\n    return make_block(result, placement=np.arange(len(result)), ndim=ndim)",
                "def _replace_coerce(\n    self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n\n    if mask.any():\n        if not regex:\n            self = self.coerce_to_target_dtype(value)\n            return self.putmask(mask, value, inplace=inplace)\n        else:\n            return self._replace_single(\n                to_replace,\n                value,\n                inplace=inplace,\n                regex=regex,\n                convert=convert,\n                mask=mask,\n            )\n    return self",
                "def __init__(self, values, placement, ndim=None):\n    \"\"\"Initialize a non-consolidatable block.\n\n    'ndim' may be inferred from 'placement'.\n\n    This will call continue to call __init__ for the other base\n    classes mixed in with this Mixin.\n    \"\"\"\n    # Placement must be converted to BlockPlacement so that we can check\n    # its length\n    if not isinstance(placement, libinternals.BlockPlacement):\n        placement = libinternals.BlockPlacement(placement)\n\n    # Maybe infer ndim from placement\n    if ndim is None:\n        if len(placement) != 1:\n            ndim = 1\n        else:\n            ndim = 2\n    super().__init__(values, placement, ndim=ndim)",
                "@property\ndef shape(self):\n    if self.ndim == 1:\n        return ((len(self.values)),)\n    return (len(self.mgr_locs), len(self.values))",
                "def iget(self, col):\n\n    if self.ndim == 2 and isinstance(col, tuple):\n        col, loc = col\n        if not com.is_null_slice(col) and col != 0:\n            raise IndexError(\"{0} only contains one item\".format(self))\n        elif isinstance(col, slice):\n            if col != slice(None):\n                raise NotImplementedError(col)\n            return self.values[[loc]]\n        return self.values[loc]\n    else:\n        if col != 0:\n            raise IndexError(\"{0} only contains one item\".format(self))\n        return self.values",
                "def should_store(self, value):\n    return isinstance(value, self._holder)",
                "def set(self, locs, values, check=False):\n    assert locs.tolist() == [0]\n    self.values = values",
                "def putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False):\n    \"\"\"\n    putmask the data to the block; we must be a single block and not\n    generate other blocks\n\n    return the resulting block\n\n    Parameters\n    ----------\n    mask  : the condition to respect\n    new : a ndarray/object\n    align : boolean, perform alignment on other/cond, default is True\n    inplace : perform inplace modification, default is False\n\n    Returns\n    -------\n    a new block, the result of the putmask\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # use block's copy logic.\n    # .values may be an Index which does shallow copy by default\n    new_values = self.values if inplace else self.copy().values\n\n    if isinstance(new, np.ndarray) and len(new) == len(mask):\n        new = new[mask]\n\n    mask = _safe_reshape(mask, new_values.shape)\n\n    new_values[mask] = new\n    return [self.make_block(values=new_values)]",
                "def _get_unstack_items(self, unstacker, new_columns):\n    \"\"\"\n    Get the placement, values, and mask for a Block unstack.\n\n    This is shared between ObjectBlock and ExtensionBlock. They\n    differ in that ObjectBlock passes the values, while ExtensionBlock\n    passes the dummy ndarray of positions to be used by a take\n    later.\n\n    Parameters\n    ----------\n    unstacker : pandas.core.reshape.reshape._Unstacker\n    new_columns : Index\n        All columns of the unstacked BlockManager.\n\n    Returns\n    -------\n    new_placement : ndarray[int]\n        The placement of the new columns in `new_columns`.\n    new_values : Union[ndarray, ExtensionArray]\n        The first return value from _Unstacker.get_new_values.\n    mask : ndarray[bool]\n        The second return value from _Unstacker.get_new_values.\n    \"\"\"\n    # shared with ExtensionBlock\n    new_items = unstacker.get_new_columns()\n    new_placement = new_columns.get_indexer(new_items)\n    new_values, mask = unstacker.get_new_values()\n\n    mask = mask.any(0)\n    return new_placement, new_values, mask",
                "def __init__(self, values, placement, ndim=None):\n    values = self._maybe_coerce_values(values)\n    super().__init__(values, placement, ndim)",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Unbox to an extension array.\n\n    This will unbox an ExtensionArray stored in an Index or Series.\n    ExtensionArrays pass through. No dtype coercion is done.\n\n    Parameters\n    ----------\n    values : Index, Series, ExtensionArray\n\n    Returns\n    -------\n    ExtensionArray\n    \"\"\"\n    return extract_array(values)",
                "@property\ndef _holder(self):\n    # For extension blocks, the holder is values-dependent.\n    return type(self.values)",
                "@property\ndef fill_value(self):\n    # Used in reindex_indexer\n    return self.values.dtype.na_value",
                "@property\ndef _can_hold_na(self):\n    # The default ExtensionArray._can_hold_na is True\n    return self._holder._can_hold_na",
                "@property\ndef is_view(self):\n    \"\"\"Extension arrays are never treated as views.\"\"\"\n    return False",
                "@property\ndef is_numeric(self):\n    return self.values.dtype._is_numeric",
                "def setitem(self, indexer, value):\n    \"\"\"Set the value inplace, returning a same-typed block.\n\n    This differs from Block.setitem by not allowing setitem to change\n    the dtype of the Block.\n\n    Parameters\n    ----------\n    indexer : tuple, list-like, array-like, slice\n        The subset of self.values to set\n    value : object\n        The value being set\n\n    Returns\n    -------\n    Block\n\n    Notes\n    -----\n    `indexer` is a direct slice/positional indexer. `value` must\n    be a compatible shape.\n    \"\"\"\n    if isinstance(indexer, tuple):\n        # we are always 1-D\n        indexer = indexer[0]\n\n    check_setitem_lengths(indexer, value, self.values)\n    self.values[indexer] = value\n    return self",
                "def get_values(self, dtype=None):\n    # ExtensionArrays must be iterable, so this works.\n    values = np.asarray(self.values)\n    if values.ndim == self.ndim - 1:\n        values = values.reshape((1,) + values.shape)\n    return values",
                "def to_dense(self):\n    return np.asarray(self.values)",
                "def to_native_types(self, slicer=None, na_rep=\"nan\", quoting=None, **kwargs):\n    \"\"\"override to use ExtensionArray astype for the conversion\"\"\"\n    values = self.values\n    if slicer is not None:\n        values = values[slicer]\n    mask = isna(values)\n\n    try:\n        values = values.astype(str)\n        values[mask] = na_rep\n    except Exception:\n        # eg SparseArray does not support setitem, needs to be converted to ndarray\n        return super().to_native_types(slicer, na_rep, quoting, **kwargs)\n\n    # we are expected to return a 2-d ndarray\n    return values.reshape(1, len(values))",
                "def take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None):\n    \"\"\"\n    Take values according to indexer and return them as a block.\n    \"\"\"\n    if fill_tuple is None:\n        fill_value = None\n    else:\n        fill_value = fill_tuple[0]\n\n    # axis doesn't matter; we are really a single-dim object\n    # but are passed the axis depending on the calling routing\n    # if its REALLY axis 0, then this will be a reindex and not a take\n    new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)\n\n    # Called from three places in managers, all of which satisfy\n    #  this assertion\n    assert not (self.ndim == 1 and new_mgr_locs is None)\n    if new_mgr_locs is None:\n        new_mgr_locs = self.mgr_locs\n\n    return self.make_block_same_class(new_values, new_mgr_locs)",
                "def _can_hold_element(self, element: Any) -> bool:\n    # XXX: We may need to think about pushing this onto the array.\n    # We're doing the same as CategoricalBlock here.\n    return True",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n\n    # slice the category\n    # return same dims as we currently have\n\n    if isinstance(slicer, tuple) and len(slicer) == 2:\n        if not com.is_null_slice(slicer[0]):\n            raise AssertionError(\"invalid slicing for a 1-ndim categorical\")\n        slicer = slicer[1]\n\n    return self.values[slicer]",
                "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n    \"\"\"\n    values = self._holder._concat_same_type([blk.values for blk in to_concat])\n    placement = placement or slice(0, len(values), 1)\n    return self.make_block_same_class(values, ndim=self.ndim, placement=placement)",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    values = self.values if inplace else self.values.copy()\n    values = values.fillna(value=value, limit=limit)\n    return [\n        self.make_block_same_class(\n            values=values, placement=self.mgr_locs, ndim=self.ndim\n        )\n    ]",
                "def interpolate(\n    self, method=\"pad\", axis=0, inplace=False, limit=None, fill_value=None, **kwargs\n):\n\n    values = self.values if inplace else self.values.copy()\n    return self.make_block_same_class(\n        values=values.fillna(value=fill_value, method=method, limit=limit),\n        placement=self.mgr_locs,\n    )",
                "def shift(\n    self,\n    periods: int,\n    axis: libinternals.BlockPlacement = 0,\n    fill_value: Any = None,\n) -> List[\"ExtensionBlock\"]:\n    \"\"\"\n    Shift the block by `periods`.\n\n    Dispatches to underlying ExtensionArray and re-boxes in an\n    ExtensionBlock.\n    \"\"\"\n    return [\n        self.make_block_same_class(\n            self.values.shift(periods=periods, fill_value=fill_value),\n            placement=self.mgr_locs,\n            ndim=self.ndim,\n        )\n    ]",
                "def where(\n    self,\n    other,\n    cond,\n    align=True,\n    errors=\"raise\",\n    try_cast: bool = False,\n    axis: int = 0,\n) -> List[\"Block\"]:\n    if isinstance(other, ABCDataFrame):\n        # ExtensionArrays are 1-D, so if we get here then\n        # `other` should be a DataFrame with a single column.\n        assert other.shape[1] == 1\n        other = other.iloc[:, 0]\n\n    other = extract_array(other, extract_numpy=True)\n\n    if isinstance(cond, ABCDataFrame):\n        assert cond.shape[1] == 1\n        cond = cond.iloc[:, 0]\n\n    cond = extract_array(cond, extract_numpy=True)\n\n    if lib.is_scalar(other) and isna(other):\n        # The default `other` for Series / Frame is np.nan\n        # we want to replace that with the correct NA value\n        # for the type\n        other = self.dtype.na_value\n\n    if is_sparse(self.values):\n        # TODO(SparseArray.__setitem__): remove this if condition\n        # We need to re-infer the type of the data after doing the\n        # where, for cases where the subtypes don't match\n        dtype = None\n    else:\n        dtype = self.dtype\n\n    result = self.values.copy()\n    icond = ~cond\n    if lib.is_scalar(other):\n        set_other = other\n    else:\n        set_other = other[icond]\n    try:\n        result[icond] = set_other\n    except (NotImplementedError, TypeError):\n        # NotImplementedError for class not implementing `__setitem__`\n        # TypeError for SparseArray, which implements just to raise\n        # a TypeError\n        result = self._holder._from_sequence(\n            np.where(cond, self.values, other), dtype=dtype\n        )\n\n    return [self.make_block_same_class(result, placement=self.mgr_locs)]",
                "@property\ndef _ftype(self):\n    return getattr(self.values, \"_pandas_ftype\", Block._ftype)",
                "def _unstack(self, unstacker_func, new_columns, n_rows, fill_value):\n    # ExtensionArray-safe unstack.\n    # We override ObjectBlock._unstack, which unstacks directly on the\n    # values of the array. For EA-backed blocks, this would require\n    # converting to a 2-D ndarray of objects.\n    # Instead, we unstack an ndarray of integer positions, followed by\n    # a `take` on the actual values.\n    dummy_arr = np.arange(n_rows)\n    dummy_unstacker = functools.partial(unstacker_func, fill_value=-1)\n    unstacker = dummy_unstacker(dummy_arr)\n\n    new_placement, new_values, mask = self._get_unstack_items(\n        unstacker, new_columns\n    )\n\n    blocks = [\n        self.make_block_same_class(\n            self.values.take(indices, allow_fill=True, fill_value=fill_value),\n            [place],\n        )\n        for indices, place in zip(new_values.T, new_placement)\n    ]\n    return blocks, mask",
                "def external_values(self, dtype=None):\n    return self.values.astype(object)",
                "def equals(self, other) -> bool:\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    left, right = self.values, other.values\n    return ((left == right) | (np.isnan(left) & np.isnan(right))).all()",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, (np.floating, np.integer)) and not issubclass(\n            tipo.type, (np.datetime64, np.timedelta64)\n        )\n    return isinstance(\n        element, (float, int, np.floating, np.int_)\n    ) and not isinstance(\n        element,\n        (bool, np.bool_, datetime, timedelta, np.datetime64, np.timedelta64),\n    )",
                "def to_native_types(\n    self,\n    slicer=None,\n    na_rep=\"\",\n    float_format=None,\n    decimal=\".\",\n    quoting=None,\n    **kwargs,\n):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    if slicer is not None:\n        values = values[:, slicer]\n\n    # see gh-13418: no special formatting is desired at the\n    # output (important for appropriate 'quoting' behaviour),\n    # so do not pass it through the FloatArrayFormatter\n    if float_format is None and decimal == \".\":\n        mask = isna(values)\n\n        if not quoting:\n            values = values.astype(str)\n        else:\n            values = np.array(values, dtype=\"object\")\n\n        values[mask] = na_rep\n        return values\n\n    from pandas.io.formats.format import FloatArrayFormatter\n\n    formatter = FloatArrayFormatter(\n        values,\n        na_rep=na_rep,\n        float_format=float_format,\n        decimal=decimal,\n        quoting=quoting,\n        fixed_width=False,\n    )\n    return formatter.get_result_as_array()",
                "def should_store(self, value):\n    # when inserting a column should not coerce integers to floats\n    # unnecessarily\n    return issubclass(value.dtype.type, np.floating) and value.dtype == self.dtype",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, (np.floating, np.integer, np.complexfloating))\n    return isinstance(\n        element, (float, int, complex, np.float_, np.int_)\n    ) and not isinstance(element, (bool, np.bool_))",
                "def should_store(self, value):\n    return issubclass(value.dtype.type, np.complexfloating)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return (\n            issubclass(tipo.type, np.integer)\n            and not issubclass(tipo.type, (np.datetime64, np.timedelta64))\n            and self.dtype.itemsize >= tipo.itemsize\n        )\n    return is_integer(element)",
                "def should_store(self, value):\n    return is_integer_dtype(value) and value.dtype == self.dtype",
                "@property\ndef _holder(self):\n    return DatetimeArray",
                "@property\ndef fill_value(self):\n    return np.datetime64(\"NaT\", \"ns\")",
                "def get_values(self, dtype=None):\n    \"\"\"\n    return object dtype as boxed values, such as Timestamps/Timedelta\n    \"\"\"\n    if is_object_dtype(dtype):\n        values = self.values.ravel()\n        result = self._holder(values).astype(object)\n        return result.reshape(self.values.shape)\n    return self.values",
                "def __init__(self, values, placement, ndim=None):\n    values = self._maybe_coerce_values(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _can_hold_na(self):\n    return True",
                "def _maybe_coerce_values(self, values):\n    \"\"\"\n    Input validation for values passed to __init__. Ensure that\n    we have datetime64ns, coercing if necessary.\n\n    Parameters\n    ----------\n    values : array-like\n        Must be convertible to datetime64\n\n    Returns\n    -------\n    values : ndarray[datetime64ns]\n\n    Overridden by DatetimeTZBlock.\n    \"\"\"\n    if values.dtype != _NS_DTYPE:\n        values = conversion.ensure_datetime64ns(values)\n\n    if isinstance(values, DatetimeArray):\n        values = values._data\n\n    assert isinstance(values, np.ndarray), type(values)\n    return values",
                "def _astype(self, dtype, **kwargs):\n    \"\"\"\n    these automatically copy, so copy=True has no effect\n    raise on an except if raise == True\n    \"\"\"\n    dtype = pandas_dtype(dtype)\n\n    # if we are passed a datetime64[ns, tz]\n    if is_datetime64tz_dtype(dtype):\n        values = self.values\n        if getattr(values, \"tz\", None) is None:\n            values = DatetimeArray(values).tz_localize(\"UTC\")\n        values = values.tz_convert(dtype.tz)\n        return self.make_block(values)\n\n    # delegate\n    return super()._astype(dtype=dtype, **kwargs)",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        if self.is_datetimetz:\n            # require exact match, since non-nano does not exist\n            return is_dtype_equal(tipo, self.dtype) or is_valid_nat_for_dtype(\n                element, self.dtype\n            )\n\n        # GH#27419 if we get a non-nano datetime64 object\n        return is_datetime64_dtype(tipo)\n    elif element is NaT:\n        return True\n    elif isinstance(element, datetime):\n        if self.is_datetimetz:\n            return tz_compare(element.tzinfo, self.dtype.tz)\n        return element.tzinfo is None\n\n    return is_valid_nat_for_dtype(element, self.dtype)",
                "def to_native_types(\n    self, slicer=None, na_rep=None, date_format=None, quoting=None, **kwargs\n):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    i8values = self.values.view(\"i8\")\n\n    if slicer is not None:\n        values = values[..., slicer]\n        i8values = i8values[..., slicer]\n\n    from pandas.io.formats.format import _get_format_datetime64_from_values\n\n    fmt = _get_format_datetime64_from_values(values, date_format)\n\n    result = tslib.format_array_from_datetime(\n        i8values.ravel(),\n        tz=getattr(self.values, \"tz\", None),\n        format=fmt,\n        na_rep=na_rep,\n    ).reshape(i8values.shape)\n    return np.atleast_2d(result)",
                "def should_store(self, value):\n    return (\n        issubclass(value.dtype.type, np.datetime64)\n        and not is_datetime64tz_dtype(value)\n        and not is_extension_array_dtype(value)\n    )",
                "def set(self, locs, values):\n    \"\"\"\n    Modify Block in-place with new item value\n\n    Returns\n    -------\n    None\n    \"\"\"\n    values = conversion.ensure_datetime64ns(values, copy=False)\n\n    self.values[locs] = values",
                "def external_values(self):\n    return np.asarray(self.values.astype(\"datetime64[ns]\", copy=False))",
                "@property\ndef _holder(self):\n    return DatetimeArray",
                "def _maybe_coerce_values(self, values):\n    \"\"\"Input validation for values passed to __init__. Ensure that\n    we have datetime64TZ, coercing if necessary.\n\n    Parameters\n    ----------\n    values : array-like\n        Must be convertible to datetime64\n\n    Returns\n    -------\n    values : DatetimeArray\n    \"\"\"\n    if not isinstance(values, self._holder):\n        values = self._holder(values)\n\n    if values.tz is None:\n        raise ValueError(\"cannot create a DatetimeTZBlock without a tz\")\n\n    return values",
                "@property\ndef is_view(self):\n    \"\"\" return a boolean if I am possibly a view \"\"\"\n    # check the ndarray values of the DatetimeIndex values\n    return self.values._data.base is not None",
                "def get_values(self, dtype=None):\n    \"\"\"\n    Returns an ndarray of values.\n\n    Parameters\n    ----------\n    dtype : np.dtype\n        Only `object`-like dtypes are respected here (not sure\n        why).\n\n    Returns\n    -------\n    values : ndarray\n        When ``dtype=object``, then and object-dtype ndarray of\n        boxed values is returned. Otherwise, an M8[ns] ndarray\n        is returned.\n\n        DatetimeArray is always 1-d. ``get_values`` will reshape\n        the return value to be the same dimensionality as the\n        block.\n    \"\"\"\n    values = self.values\n    if is_object_dtype(dtype):\n        values = values.astype(object)\n\n    values = np.asarray(values)\n\n    if self.ndim == 2:\n        # Ensure that our shape is correct for DataFrame.\n        # ExtensionArrays are always 1-D, even in a DataFrame when\n        # the analogous NumPy-backed column would be a 2-D ndarray.\n        values = values.reshape(1, -1)\n    return values",
                "def to_dense(self):\n    # we request M8[ns] dtype here, even though it discards tzinfo,\n    # as lots of code (e.g. anything using values_from_object)\n    # expects that behavior.\n    return np.asarray(self.values, dtype=_NS_DTYPE)",
                "def _slice(self, slicer):\n    \"\"\" return a slice of my values \"\"\"\n    if isinstance(slicer, tuple):\n        col, loc = slicer\n        if not com.is_null_slice(col) and col != 0:\n            raise IndexError(\"{0} only contains one item\".format(self))\n        return self.values[loc]\n    return self.values[slicer]",
                "def diff(self, n: int, axis: int = 0) -> List[\"Block\"]:\n    \"\"\"\n    1st discrete difference.\n\n    Parameters\n    ----------\n    n : int\n        Number of periods to diff.\n    axis : int, default 0\n        Axis to diff upon.\n\n    Returns\n    -------\n    A list with a new TimeDeltaBlock.\n\n    Notes\n    -----\n    The arguments here are mimicking shift so they are called correctly\n    by apply.\n    \"\"\"\n    if axis == 0:\n        # Cannot currently calculate diff across multiple blocks since this\n        # function is invoked via apply\n        raise NotImplementedError\n    new_values = (self.values - self.shift(n, axis=axis)[0].values).asi8\n\n    # Reshape the new_values like how algos.diff does for timedelta data\n    new_values = new_values.reshape(1, len(new_values))\n    new_values = new_values.astype(\"timedelta64[ns]\")\n    return [TimeDeltaBlock(new_values, placement=self.mgr_locs.indexer)]",
                "def concat_same_type(self, to_concat, placement=None):\n    # need to handle concat([tz1, tz2]) here, since DatetimeArray\n    # only handles cases where all the tzs are the same.\n    # Instead of placing the condition here, it could also go into the\n    # is_uniform_join_units check, but I'm not sure what is better.\n    if len({x.dtype for x in to_concat}) > 1:\n        values = concat_datetime([x.values for x in to_concat])\n        placement = placement or slice(0, len(values), 1)\n\n        if self.ndim > 1:\n            values = np.atleast_2d(values)\n        return ObjectBlock(values, ndim=self.ndim, placement=placement)\n    return super().concat_same_type(to_concat, placement)",
                "def fillna(self, value, limit=None, inplace=False, downcast=None):\n    # We support filling a DatetimeTZ with a `value` whose timezone\n    # is different by coercing to object.\n    if self._can_hold_element(value):\n        return super().fillna(value, limit, inplace, downcast)\n\n    # different timezones, or a non-tz\n    return self.astype(object).fillna(\n        value, limit=limit, inplace=inplace, downcast=downcast\n    )",
                "def setitem(self, indexer, value):\n    # https://github.com/pandas-dev/pandas/issues/24020\n    # Need a dedicated setitem until #24020 (type promotion in setitem\n    # for extension arrays) is designed and implemented.\n    if self._can_hold_element(value) or (\n        isinstance(indexer, np.ndarray) and indexer.size == 0\n    ):\n        return super().setitem(indexer, value)\n\n    obj_vals = self.values.astype(object)\n    newb = make_block(\n        obj_vals, placement=self.mgr_locs, klass=ObjectBlock, ndim=self.ndim\n    )\n    return newb.setitem(indexer, value)",
                "def equals(self, other) -> bool:\n    # override for significant performance improvement\n    if self.dtype != other.dtype or self.shape != other.shape:\n        return False\n    return (self.values.view(\"i8\") == other.values.view(\"i8\")).all()",
                "def quantile(self, qs, interpolation=\"linear\", axis=0):\n    naive = self.values.view(\"M8[ns]\")\n\n    # kludge for 2D block with 1D values\n    naive = naive.reshape(self.shape)\n\n    blk = self.make_block(naive)\n    res_blk = blk.quantile(qs, interpolation=interpolation, axis=axis)\n\n    # ravel is kludge for 2D block with 1D values, assumes column-like\n    aware = self._holder(res_blk.values.ravel(), dtype=self.dtype)\n    return self.make_block_same_class(aware, ndim=res_blk.ndim)",
                "def __init__(self, values, placement, ndim=None):\n    if values.dtype != _TD_DTYPE:\n        values = conversion.ensure_timedelta64ns(values)\n    if isinstance(values, TimedeltaArray):\n        values = values._data\n    assert isinstance(values, np.ndarray), type(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _holder(self):\n    return TimedeltaArray",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, np.timedelta64)\n    elif element is NaT:\n        return True\n    elif isinstance(element, (timedelta, np.timedelta64)):\n        return True\n    return is_valid_nat_for_dtype(element, self.dtype)",
                "def fillna(self, value, **kwargs):\n\n    # allow filling with integers to be\n    # interpreted as nanoseconds\n    if is_integer(value):\n        # Deprecation GH#24694, GH#19233\n        warnings.warn(\n            \"Passing integers to fillna is deprecated, will \"\n            \"raise a TypeError in a future version.  To retain \"\n            \"the old behavior, pass pd.Timedelta(seconds=n) \"\n            \"instead.\",\n            FutureWarning,\n            stacklevel=6,\n        )\n        value = Timedelta(value, unit=\"s\")\n    return super().fillna(value, **kwargs)",
                "def should_store(self, value):\n    return issubclass(\n        value.dtype.type, np.timedelta64\n    ) and not is_extension_array_dtype(value)",
                "def to_native_types(self, slicer=None, na_rep=None, quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    if slicer is not None:\n        values = values[:, slicer]\n    mask = isna(values)\n\n    rvalues = np.empty(values.shape, dtype=object)\n    if na_rep is None:\n        na_rep = \"NaT\"\n    rvalues[mask] = na_rep\n    imask = (~mask).ravel()\n\n    # FIXME:\n    # should use the formats.format.Timedelta64Formatter here\n    # to figure what format to pass to the Timedelta\n    # e.g. to not show the decimals say\n    rvalues.flat[imask] = np.array(\n        [Timedelta(val)._repr_base(format=\"all\") for val in values.ravel()[imask]],\n        dtype=object,\n    )\n    return rvalues",
                "def external_values(self, dtype=None):\n    return np.asarray(self.values.astype(\"timedelta64[ns]\", copy=False))",
                "def _can_hold_element(self, element: Any) -> bool:\n    tipo = maybe_infer_dtype_type(element)\n    if tipo is not None:\n        return issubclass(tipo.type, np.bool_)\n    return isinstance(element, (bool, np.bool_))",
                "def should_store(self, value):\n    return issubclass(value.dtype.type, np.bool_) and not is_extension_array_dtype(\n        value\n    )",
                "def replace(\n    self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    to_replace_values = np.atleast_1d(to_replace)\n    if not np.can_cast(to_replace_values, bool):\n        return self\n    return super().replace(\n        to_replace,\n        value,\n        inplace=inplace,\n        filter=filter,\n        regex=regex,\n        convert=convert,\n    )",
                "def __init__(self, values, placement=None, ndim=2):\n    if issubclass(values.dtype.type, str):\n        values = np.array(values, dtype=object)\n\n    super().__init__(values, ndim=ndim, placement=placement)",
                "@property\ndef is_bool(self):\n    \"\"\" we can be a bool if we have only bool values but are of type\n    object\n    \"\"\"\n    return lib.is_bool_array(self.values.ravel())",
                "def convert(\n    self,\n    copy: bool = True,\n    datetime: bool = True,\n    numeric: bool = True,\n    timedelta: bool = True,\n    coerce: bool = False,\n):\n    \"\"\" attempt to coerce any object types to better types return a copy of\n    the block (if copy = True) by definition we ARE an ObjectBlock!!!!!\n\n    can return multiple blocks!\n    \"\"\"\n\n    # operate column-by-column\n    def f(mask, val, idx):\n        shape = val.shape\n        values = soft_convert_objects(\n            val.ravel(),\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n            copy=copy,\n        )\n        if isinstance(values, np.ndarray):\n            # TODO: allow EA once reshape is supported\n            values = values.reshape(shape)\n\n        values = _block_shape(values, ndim=self.ndim)\n        return values\n\n    if self.ndim == 2:\n        blocks = self.split_and_operate(None, f, False)\n    else:\n        values = f(None, self.values.ravel(), None)\n        blocks = [make_block(values, ndim=self.ndim, placement=self.mgr_locs)]\n\n    return blocks",
                "def _maybe_downcast(self, blocks: List[\"Block\"], downcast=None) -> List[\"Block\"]:\n\n    if downcast is not None:\n        return blocks\n\n    # split and convert the blocks\n    return _extend_blocks([b.convert(datetime=True, numeric=False) for b in blocks])",
                "def _can_hold_element(self, element: Any) -> bool:\n    return True",
                "def should_store(self, value):\n    return not (\n        issubclass(\n            value.dtype.type,\n            (np.integer, np.floating, np.complexfloating, np.datetime64, np.bool_),\n        )\n        or is_extension_array_dtype(value)\n    )",
                "def replace(\n    self, to_replace, value, inplace=False, filter=None, regex=False, convert=True\n):\n    to_rep_is_list = is_list_like(to_replace)\n    value_is_list = is_list_like(value)\n    both_lists = to_rep_is_list and value_is_list\n    either_list = to_rep_is_list or value_is_list\n\n    result_blocks = []\n    blocks = [self]\n\n    if not either_list and is_re(to_replace):\n        return self._replace_single(\n            to_replace,\n            value,\n            inplace=inplace,\n            filter=filter,\n            regex=True,\n            convert=convert,\n        )\n    elif not (either_list or regex):\n        return super().replace(\n            to_replace,\n            value,\n            inplace=inplace,\n            filter=filter,\n            regex=regex,\n            convert=convert,\n        )\n    elif both_lists:\n        for to_rep, v in zip(to_replace, value):\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(\n                    to_rep,\n                    v,\n                    inplace=inplace,\n                    filter=filter,\n                    regex=regex,\n                    convert=convert,\n                )\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n\n    elif to_rep_is_list and regex:\n        for to_rep in to_replace:\n            result_blocks = []\n            for b in blocks:\n                result = b._replace_single(\n                    to_rep,\n                    value,\n                    inplace=inplace,\n                    filter=filter,\n                    regex=regex,\n                    convert=convert,\n                )\n                result_blocks = _extend_blocks(result, result_blocks)\n            blocks = result_blocks\n        return result_blocks\n\n    return self._replace_single(\n        to_replace,\n        value,\n        inplace=inplace,\n        filter=filter,\n        convert=convert,\n        regex=regex,\n    )",
                "def _replace_single(\n    self,\n    to_replace,\n    value,\n    inplace=False,\n    filter=None,\n    regex=False,\n    convert=True,\n    mask=None,\n):\n    \"\"\"\n    Replace elements by the given value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    filter : list, optional\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    a new block, the result after replacing\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # to_replace is regex compilable\n    to_rep_re = regex and is_re_compilable(to_replace)\n\n    # regex is regex compilable\n    regex_re = is_re_compilable(regex)\n\n    # only one will survive\n    if to_rep_re and regex_re:\n        raise AssertionError(\n            \"only one of to_replace and regex can be regex compilable\"\n        )\n\n    # if regex was passed as something that can be a regex (rather than a\n    # boolean)\n    if regex_re:\n        to_replace = regex\n\n    regex = regex_re or to_rep_re\n\n    # try to get the pattern attribute (compiled re) or it's a string\n    if is_re(to_replace):\n        pattern = to_replace.pattern\n    else:\n        pattern = to_replace\n\n    # if the pattern is not empty and to_replace is either a string or a\n    # regex\n    if regex and pattern:\n        rx = re.compile(to_replace)\n    else:\n        # if the thing to replace is not a string or compiled regex call\n        # the superclass method -> to_replace is some kind of object\n        return super().replace(\n            to_replace, value, inplace=inplace, filter=filter, regex=regex\n        )\n\n    new_values = self.values if inplace else self.values.copy()\n\n    # deal with replacing values with objects (strings) that match but\n    # whose replacement is not a string (numeric, nan, object)\n    if isna(value) or not isinstance(value, str):\n\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return value if rx.search(s) is not None else s\n            else:\n                return s\n\n    else:\n        # value is guaranteed to be a string here, s can be either a string\n        # or null if it's null it gets returned\n        def re_replacer(s):\n            if is_re(rx) and isinstance(s, str):\n                return rx.sub(value, s)\n            else:\n                return s\n\n    f = np.vectorize(re_replacer, otypes=[self.dtype])\n\n    if filter is None:\n        filt = slice(None)\n    else:\n        filt = self.mgr_locs.isin(filter).nonzero()[0]\n\n    if mask is None:\n        new_values[filt] = f(new_values[filt])\n    else:\n        new_values[filt][mask] = f(new_values[filt][mask])\n\n    # convert\n    block = self.make_block(new_values)\n    if convert:\n        block = block.convert(numeric=False)\n    return block",
                "def _replace_coerce(\n    self, to_replace, value, inplace=True, regex=False, convert=False, mask=None\n):\n    \"\"\"\n    Replace value corresponding to the given boolean array with another\n    value.\n\n    Parameters\n    ----------\n    to_replace : object or pattern\n        Scalar to replace or regular expression to match.\n    value : object\n        Replacement object.\n    inplace : bool, default False\n        Perform inplace modification.\n    regex : bool, default False\n        If true, perform regular expression substitution.\n    convert : bool, default True\n        If true, try to coerce any object types to better types.\n    mask : array-like of bool, optional\n        True indicate corresponding element is ignored.\n\n    Returns\n    -------\n    A new block if there is anything to replace or the original block.\n    \"\"\"\n    if mask.any():\n        block = super()._replace_coerce(\n            to_replace=to_replace,\n            value=value,\n            inplace=inplace,\n            regex=regex,\n            convert=convert,\n            mask=mask,\n        )\n        if convert:\n            block = [b.convert(numeric=False, copy=True) for b in block]\n        return block\n    return self",
                "def __init__(self, values, placement, ndim=None):\n    # coerce to categorical if we can\n    values = extract_array(values)\n    assert isinstance(values, Categorical), type(values)\n    super().__init__(values, placement=placement, ndim=ndim)",
                "@property\ndef _holder(self):\n    return Categorical",
                "@property\ndef array_dtype(self):\n    \"\"\" the dtype to return if I want to construct this block as an\n    array\n    \"\"\"\n    return np.object_",
                "def to_dense(self):\n    # Categorical.get_values returns a DatetimeIndex for datetime\n    # categories, so we can't simply use `np.asarray(self.values)` like\n    # other types.\n    return self.values._internal_get_values()",
                "def to_native_types(self, slicer=None, na_rep=\"\", quoting=None, **kwargs):\n    \"\"\" convert to our native types format, slicing if desired \"\"\"\n\n    values = self.values\n    if slicer is not None:\n        # Categorical is always one dimension\n        values = values[slicer]\n    mask = isna(values)\n    values = np.array(values, dtype=\"object\")\n    values[mask] = na_rep\n\n    # we are expected to return a 2-d ndarray\n    return values.reshape(1, len(values))",
                "def concat_same_type(self, to_concat, placement=None):\n    \"\"\"\n    Concatenate list of single blocks of the same type.\n\n    Note that this CategoricalBlock._concat_same_type *may* not\n    return a CategoricalBlock. When the categories in `to_concat`\n    differ, this will return an object ndarray.\n\n    If / when we decide we don't like that behavior:\n\n    1. Change Categorical._concat_same_type to use union_categoricals\n    2. Delete this method.\n    \"\"\"\n    values = self._concatenator(\n        [blk.values for blk in to_concat], axis=self.ndim - 1\n    )\n    # not using self.make_block_same_class as values can be object dtype\n    return make_block(\n        values, placement=placement or slice(0, len(values), 1), ndim=self.ndim\n    )",
                "def where(\n    self,\n    other,\n    cond,\n    align=True,\n    errors=\"raise\",\n    try_cast: bool = False,\n    axis: int = 0,\n) -> List[\"Block\"]:\n    # TODO(CategoricalBlock.where):\n    # This can all be deleted in favor of ExtensionBlock.where once\n    # we enforce the deprecation.\n    object_msg = (\n        \"Implicitly converting categorical to object-dtype ndarray. \"\n        \"One or more of the values in 'other' are not present in this \"\n        \"categorical's categories. A future version of pandas will raise \"\n        \"a ValueError when 'other' contains different categories.\\n\\n\"\n        \"To preserve the current behavior, add the new categories to \"\n        \"the categorical before calling 'where', or convert the \"\n        \"categorical to a different dtype.\"\n    )\n    try:\n        # Attempt to do preserve categorical dtype.\n        result = super().where(other, cond, align, errors, try_cast, axis)\n    except (TypeError, ValueError):\n        warnings.warn(object_msg, FutureWarning, stacklevel=6)\n        result = self.astype(object).where(\n            other, cond, align=align, errors=errors, try_cast=try_cast, axis=axis\n        )\n    return result",
                "def replace(\n    self,\n    to_replace,\n    value,\n    inplace: bool = False,\n    filter=None,\n    regex: bool = False,\n    convert: bool = True,\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    result = self if inplace else self.copy()\n    if filter is None:  # replace was called on a series\n        result.values.replace(to_replace, value, inplace=True)\n        if convert:\n            return result.convert(numeric=False, copy=not inplace)\n        else:\n            return result\n    else:  # replace was called on a DataFrame\n        if not isna(value):\n            result.values.add_categories(value, inplace=True)\n        return super(CategoricalBlock, result).replace(\n            to_replace, value, inplace, filter, regex, convert\n        )",
                "def _putmask_preserve(nv, n):\n    try:\n        nv[mask] = n[mask]\n    except (IndexError, ValueError):\n        nv[mask] = n\n    return nv",
                "def f(mask, val, idx):\n    block = self.coerce_to_target_dtype(value)\n\n    # slice out our block\n    if idx is not None:\n        # i.e. self.ndim == 2\n        block = block.getitem_block(slice(idx, idx + 1))\n    return block.fillna(value, limit=limit, inplace=inplace, downcast=None)",
                "def make_a_block(nv, ref_loc):\n    if isinstance(nv, list):\n        assert len(nv) == 1, nv\n        assert isinstance(nv[0], Block)\n        block = nv[0]\n    else:\n        # Put back the dimension that was taken from it and make\n        # a block out of the result.\n        nv = _block_shape(nv, ndim=self.ndim)\n        block = self.make_block(values=nv, placement=ref_loc)\n    return block",
                "def f(mask, val, idx):\n    val = maybe_downcast_to_dtype(val, dtype=\"infer\")\n    return val",
                "def check_int_bool(self, inplace):\n    # Only FloatBlocks will contain NaNs.\n    # timedelta subclasses IntBlock\n    if (self.is_bool or self.is_integer) and not self.is_timedelta:\n        if inplace:\n            return self\n        else:\n            return self.copy()",
                "def func(x):\n\n    # process a 1-d slice, returning it\n    # should the axis argument be handled below in apply_along_axis?\n    # i.e. not an arg to missing.interpolate_1d\n    return missing.interpolate_1d(\n        index,\n        x,\n        method=method,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        fill_value=fill_value,\n        bounds_error=False,\n        **kwargs,\n    )",
                "def func(cond, values, other):\n\n    if not (\n        (self.is_integer or self.is_bool)\n        and lib.is_float(other)\n        and np.isnan(other)\n    ):\n        # np.where will cast integer array to floats in this case\n        if not self._can_hold_element(other):\n            raise TypeError\n        if lib.is_scalar(other) and isinstance(values, np.ndarray):\n            other = convert_scalar(values, other)\n\n    fastres = expressions.where(cond, values, other)\n    return fastres",
                "def f(mask, val, idx):\n    shape = val.shape\n    values = soft_convert_objects(\n        val.ravel(),\n        datetime=datetime,\n        numeric=numeric,\n        timedelta=timedelta,\n        coerce=coerce,\n        copy=copy,\n    )\n    if isinstance(values, np.ndarray):\n        # TODO: allow EA once reshape is supported\n        values = values.reshape(shape)\n\n    values = _block_shape(values, ndim=self.ndim)\n    return values",
                "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return value if rx.search(s) is not None else s\n    else:\n        return s",
                "def re_replacer(s):\n    if is_re(rx) and isinstance(s, str):\n        return rx.sub(value, s)\n    else:\n        return s",
                "def f(mask, val, idx):\n\n    if idx is None:\n        # ndim==1 case.\n        n = new\n    else:\n\n        if isinstance(new, np.ndarray):\n            n = np.squeeze(new[idx % new.shape[0]])\n        else:\n            n = np.array(new)\n\n        # type of the new block\n        dtype, _ = maybe_promote(n.dtype)\n\n        # we need to explicitly astype here to make a copy\n        n = n.astype(dtype)\n\n    nv = _putmask_smart(val, mask, n)\n    return nv"
            ],
            "inscope_function_signatures": [
                "get_block_type(values, dtype=None)",
                "make_block(values, placement, klass=None, ndim=None, dtype=None, fastpath=None)",
                "_extend_blocks(result, blocks=None)",
                "_block_shape(values, ndim=1, shape=None)",
                "_merge_blocks(blocks, dtype=None, _can_consolidate=True)",
                "_safe_reshape(arr, new_shape)",
                "_putmask_smart(v, mask, n)",
                "__init__(self, values, placement, ndim=None)",
                "_check_ndim(self, values, ndim)",
                "_holder(self)",
                "_consolidate_key(self)",
                "_is_single_block(self)",
                "is_view(self)",
                "is_datelike(self)",
                "is_categorical_astype(self, dtype)",
                "external_values(self, dtype=None)",
                "internal_values(self, dtype=None)",
                "get_values(self, dtype=None)",
                "get_block_values(self, dtype=None)",
                "to_dense(self)",
                "fill_value(self)",
                "mgr_locs(self)",
                "mgr_locs(self, new_mgr_locs)",
                "array_dtype(self)",
                "make_block(self, values, placement=None)",
                "make_block_same_class(self, values, placement=None, ndim=None, dtype=None)",
                "__repr__(self) -> str",
                "__len__(self) -> int",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "_slice(self, slicer)",
                "getitem_block(self, slicer, new_mgr_locs=None)",
                "shape(self)",
                "dtype(self)",
                "ftype(self)",
                "merge(self, other)",
                "concat_same_type(self, to_concat, placement=None)",
                "iget(self, i)",
                "set(self, locs, values)",
                "delete(self, loc)",
                "apply(self, func, **kwargs)",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "split_and_operate(self, mask, f, inplace: bool)",
                "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                "downcast(self, dtypes=None)",
                "astype(self, dtype, copy=False, errors='raise', **kwargs)",
                "_astype(self, dtype, copy=False, errors='raise', **kwargs)",
                "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs)",
                "copy(self, deep=True)",
                "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                "_replace_single(self, *args, **kwargs)",
                "setitem(self, indexer, value)",
                "putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
                "coerce_to_target_dtype(self, other)",
                "interpolate(self, method='pad', axis=0, index=None, values=None, inplace=False, limit=None, limit_direction='forward', limit_area=None, fill_value=None, coerce=False, downcast=None, **kwargs)",
                "_interpolate_with_fill(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, coerce=False, downcast=None)",
                "_interpolate(self, method=None, index=None, values=None, fill_value=None, axis=0, limit=None, limit_direction='forward', limit_area=None, inplace=False, downcast=None, **kwargs)",
                "take_nd(self, indexer, axis, new_mgr_locs=None, fill_tuple=None)",
                "diff(self, n: int, axis: int=1) -> List['Block']",
                "shift(self, periods, axis=0, fill_value=None)",
                "where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "equals(self, other) -> bool",
                "_unstack(self, unstacker_func, new_columns, n_rows, fill_value)",
                "quantile(self, qs, interpolation='linear', axis=0)",
                "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                "__init__(self, values, placement, ndim=None)",
                "shape(self)",
                "iget(self, col)",
                "should_store(self, value)",
                "set(self, locs, values, check=False)",
                "putmask(self, mask, new, align=True, inplace=False, axis=0, transpose=False)",
                "_get_unstack_items(self, unstacker, new_columns)",
                "__init__(self, values, placement, ndim=None)",
                "_maybe_coerce_values(self, values)",
                "_holder(self)",
                "fill_value(self)",
                "_can_hold_na(self)",
                "is_view(self)",
                "is_numeric(self)",
                "setitem(self, indexer, value)",
                "get_values(self, dtype=None)",
                "to_dense(self)",
                "to_native_types(self, slicer=None, na_rep='nan', quoting=None, **kwargs)",
                "take_nd(self, indexer, axis=0, new_mgr_locs=None, fill_tuple=None)",
                "_can_hold_element(self, element: Any) -> bool",
                "_slice(self, slicer)",
                "concat_same_type(self, to_concat, placement=None)",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "interpolate(self, method='pad', axis=0, inplace=False, limit=None, fill_value=None, **kwargs)",
                "shift(self, periods: int, axis: libinternals.BlockPlacement=0, fill_value: Any=None) -> List['ExtensionBlock']",
                "where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "_ftype(self)",
                "_unstack(self, unstacker_func, new_columns, n_rows, fill_value)",
                "external_values(self, dtype=None)",
                "equals(self, other) -> bool",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, slicer=None, na_rep='', float_format=None, decimal='.', quoting=None, **kwargs)",
                "should_store(self, value)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "_holder(self)",
                "fill_value(self)",
                "get_values(self, dtype=None)",
                "__init__(self, values, placement, ndim=None)",
                "_can_hold_na(self)",
                "_maybe_coerce_values(self, values)",
                "_astype(self, dtype, **kwargs)",
                "_can_hold_element(self, element: Any) -> bool",
                "to_native_types(self, slicer=None, na_rep=None, date_format=None, quoting=None, **kwargs)",
                "should_store(self, value)",
                "set(self, locs, values)",
                "external_values(self)",
                "_holder(self)",
                "_maybe_coerce_values(self, values)",
                "is_view(self)",
                "get_values(self, dtype=None)",
                "to_dense(self)",
                "_slice(self, slicer)",
                "diff(self, n: int, axis: int=0) -> List['Block']",
                "concat_same_type(self, to_concat, placement=None)",
                "fillna(self, value, limit=None, inplace=False, downcast=None)",
                "setitem(self, indexer, value)",
                "equals(self, other) -> bool",
                "quantile(self, qs, interpolation='linear', axis=0)",
                "__init__(self, values, placement, ndim=None)",
                "_holder(self)",
                "_can_hold_element(self, element: Any) -> bool",
                "fillna(self, value, **kwargs)",
                "should_store(self, value)",
                "to_native_types(self, slicer=None, na_rep=None, quoting=None, **kwargs)",
                "external_values(self, dtype=None)",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                "__init__(self, values, placement=None, ndim=2)",
                "is_bool(self)",
                "convert(self, copy: bool=True, datetime: bool=True, numeric: bool=True, timedelta: bool=True, coerce: bool=False)",
                "_maybe_downcast(self, blocks: List['Block'], downcast=None) -> List['Block']",
                "_can_hold_element(self, element: Any) -> bool",
                "should_store(self, value)",
                "replace(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True)",
                "_replace_single(self, to_replace, value, inplace=False, filter=None, regex=False, convert=True, mask=None)",
                "_replace_coerce(self, to_replace, value, inplace=True, regex=False, convert=False, mask=None)",
                "__init__(self, values, placement, ndim=None)",
                "_holder(self)",
                "array_dtype(self)",
                "to_dense(self)",
                "to_native_types(self, slicer=None, na_rep='', quoting=None, **kwargs)",
                "concat_same_type(self, to_concat, placement=None)",
                "where(self, other, cond, align=True, errors='raise', try_cast: bool=False, axis: int=0) -> List['Block']",
                "replace(self, to_replace, value, inplace: bool=False, filter=None, regex: bool=False, convert: bool=True)",
                "_putmask_preserve(nv, n)",
                "f(mask, val, idx)",
                "make_a_block(nv, ref_loc)",
                "f(mask, val, idx)",
                "check_int_bool(self, inplace)",
                "func(x)",
                "func(cond, values, other)",
                "f(mask, val, idx)",
                "re_replacer(s)",
                "re_replacer(s)",
                "f(mask, val, idx)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    84
                ],
                "__slots__": [
                    2241,
                    1986,
                    2500,
                    2117,
                    2533,
                    1996,
                    2060,
                    2076,
                    92,
                    2832,
                    2421,
                    1980
                ],
                "is_numeric": [
                    2424,
                    93,
                    1981
                ],
                "is_float": [
                    1997,
                    94
                ],
                "is_integer": [
                    2088,
                    2077,
                    2453,
                    95
                ],
                "is_complex": [
                    96,
                    2061
                ],
                "is_datetime": [
                    97,
                    2118
                ],
                "is_datetimetz": [
                    2242,
                    98
                ],
                "is_timedelta": [
                    99,
                    2422
                ],
                "is_bool": [
                    100,
                    2501
                ],
                "is_object": [
                    101,
                    2534
                ],
                "is_categorical": [
                    2833,
                    102,
                    2975
                ],
                "is_extension": [
                    2243,
                    1692,
                    103
                ],
                "_can_hold_na": [
                    2502,
                    2535,
                    104,
                    2835,
                    2078,
                    2423,
                    1982
                ],
                "_can_consolidate": [
                    105,
                    1562,
                    3071
                ],
                "_verify_integrity": [
                    2834,
                    106,
                    1563
                ],
                "_validate_ndim": [
                    107,
                    1564
                ],
                "_ftype": [
                    108
                ],
                "_concatenator": [
                    2836,
                    109
                ],
                "staticmethod": [
                    2836,
                    109
                ],
                "np.concatenate": [
                    3080,
                    109
                ],
                "np": [
                    2056,
                    3080,
                    3081,
                    3083,
                    2575,
                    2066,
                    2068,
                    2069,
                    2072,
                    2084,
                    2085,
                    2605,
                    2103,
                    3141,
                    3165,
                    2150,
                    3174,
                    1640,
                    618,
                    109,
                    673,
                    2213,
                    2217,
                    1207,
                    2235,
                    2247,
                    2772,
                    1238,
                    224,
                    742,
                    1771,
                    1777,
                    2305,
                    2318,
                    1295,
                    1296,
                    2853,
                    817,
                    2869,
                    2370,
                    851,
                    2390,
                    1367,
                    1372,
                    373,
                    2425,
                    380,
                    2432,
                    1410,
                    2442,
                    1933,
                    2445,
                    1949,
                    2977,
                    2468,
                    2986,
                    939,
                    2988,
                    2989,
                    2479,
                    2991,
                    2993,
                    2995,
                    951,
                    2489,
                    443,
                    2496,
                    3008,
                    962,
                    968,
                    1992,
                    2507,
                    2508,
                    2511,
                    1488,
                    1489,
                    2002,
                    2003,
                    1493,
                    2006,
                    2519,
                    2520,
                    1496,
                    2009,
                    987,
                    988,
                    990,
                    1504,
                    1513,
                    1514,
                    2539,
                    2036
                ],
                "self.ndim": [
                    2307,
                    265,
                    396,
                    1298,
                    2579,
                    1812,
                    2582,
                    2586,
                    1181,
                    167,
                    938,
                    300,
                    684,
                    812,
                    1842,
                    1589,
                    1849,
                    1595,
                    1340,
                    321,
                    2369,
                    1475,
                    2371,
                    455,
                    2889,
                    1355,
                    460,
                    2893,
                    974,
                    1879,
                    2396,
                    350,
                    1772,
                    621,
                    112,
                    116,
                    1400,
                    252,
                    383
                ],
                "self": [
                    2056,
                    2086,
                    2091,
                    2110,
                    2111,
                    2112,
                    2113,
                    2121,
                    112,
                    113,
                    114,
                    2162,
                    116,
                    2166,
                    119,
                    2174,
                    2176,
                    2177,
                    2185,
                    2186,
                    2189,
                    146,
                    2196,
                    2197,
                    2209,
                    163,
                    167,
                    172,
                    177,
                    2232,
                    2235,
                    196,
                    202,
                    210,
                    211,
                    217,
                    2266,
                    2267,
                    220,
                    228,
                    2278,
                    235,
                    242,
                    250,
                    252,
                    2301,
                    2307,
                    263,
                    265,
                    267,
                    2318,
                    272,
                    273,
                    276,
                    2325,
                    2326,
                    2327,
                    281,
                    284,
                    286,
                    292,
                    295,
                    298,
                    299,
                    300,
                    304,
                    2353,
                    2358,
                    317,
                    319,
                    321,
                    2369,
                    2371,
                    324,
                    328,
                    2377,
                    332,
                    2381,
                    336,
                    337,
                    339,
                    340,
                    2389,
                    343,
                    2394,
                    2396,
                    349,
                    350,
                    352,
                    2402,
                    2404,
                    357,
                    2407,
                    2410,
                    2412,
                    367,
                    2416,
                    2417,
                    373,
                    374,
                    381,
                    383,
                    393,
                    396,
                    398,
                    2447,
                    400,
                    402,
                    404,
                    406,
                    407,
                    411,
                    415,
                    423,
                    2474,
                    443,
                    445,
                    2496,
                    455,
                    456,
                    460,
                    465,
                    470,
                    2521,
                    490,
                    2548,
                    501,
                    503,
                    506,
                    513,
                    517,
                    2579,
                    532,
                    2582,
                    535,
                    2583,
                    2585,
                    2586,
                    570,
                    2619,
                    572,
                    574,
                    2622,
                    576,
                    581,
                    583,
                    584,
                    587,
                    589,
                    594,
                    595,
                    599,
                    602,
                    613,
                    619,
                    621,
                    623,
                    624,
                    2671,
                    630,
                    631,
                    651,
                    655,
                    663,
                    669,
                    681,
                    684,
                    699,
                    702,
                    703,
                    2751,
                    705,
                    710,
                    711,
                    716,
                    2772,
                    727,
                    2777,
                    731,
                    2785,
                    741,
                    750,
                    755,
                    756,
                    759,
                    769,
                    772,
                    775,
                    2828,
                    790,
                    2859,
                    812,
                    816,
                    2864,
                    820,
                    821,
                    2888,
                    841,
                    842,
                    2889,
                    2893,
                    854,
                    2922,
                    2937,
                    892,
                    916,
                    922,
                    924,
                    926,
                    938,
                    939,
                    974,
                    1001,
                    1005,
                    1010,
                    1024,
                    1025,
                    1027,
                    1029,
                    1031,
                    1035,
                    1038,
                    1046,
                    1048,
                    1051,
                    1055,
                    1059,
                    1062,
                    1065,
                    1066,
                    1070,
                    1074,
                    1076,
                    1099,
                    1101,
                    1103,
                    1112,
                    1115,
                    1127,
                    1130,
                    1161,
                    1163,
                    1165,
                    1167,
                    1170,
                    1178,
                    1181,
                    1182,
                    1201,
                    1204,
                    1205,
                    1206,
                    1210,
                    1240,
                    1241,
                    1253,
                    1256,
                    1270,
                    1272,
                    1273,
                    1275,
                    1279,
                    1280,
                    1287,
                    1298,
                    1309,
                    1340,
                    1342,
                    1355,
                    1365,
                    1370,
                    1389,
                    1398,
                    1400,
                    1405,
                    1416,
                    1417,
                    1423,
                    1425,
                    1448,
                    1475,
                    1477,
                    1489,
                    1498,
                    1545,
                    1546,
                    1548,
                    1556,
                    1589,
                    1590,
                    1591,
                    1595,
                    1598,
                    1602,
                    1603,
                    1606,
                    1607,
                    1610,
                    1614,
                    1638,
                    1646,
                    1695,
                    1718,
                    1723,
                    1728,
                    1737,
                    1765,
                    1766,
                    1767,
                    1771,
                    1772,
                    1777,
                    1781,
                    1808,
                    1812,
                    1814,
                    1816,
                    1834,
                    1840,
                    1842,
                    1845,
                    1848,
                    1849,
                    1857,
                    1858,
                    1860,
                    1876,
                    1877,
                    1878,
                    1879,
                    1910,
                    1912,
                    1918,
                    1920,
                    1932,
                    1933,
                    1936,
                    1940,
                    1953,
                    1958,
                    1959,
                    1976,
                    1989,
                    1991,
                    2023
                ],
                "self._check_ndim": [
                    112
                ],
                "values": [
                    512,
                    2567,
                    2575,
                    2577,
                    2039,
                    2579,
                    2580,
                    2585,
                    2586,
                    1585,
                    3063,
                    2110,
                    2111,
                    2121,
                    2122,
                    589,
                    1614,
                    595,
                    599,
                    602,
                    605,
                    607,
                    2144,
                    2145,
                    2147,
                    2148,
                    1638,
                    2150,
                    2151,
                    618,
                    619,
                    621,
                    1133,
                    112,
                    114,
                    2162,
                    2163,
                    2164,
                    2165,
                    2166,
                    2873,
                    1167,
                    144,
                    146,
                    148,
                    1172,
                    1173,
                    663,
                    2196,
                    2200,
                    666,
                    667,
                    1181,
                    2205,
                    671,
                    1695,
                    673,
                    1696,
                    675,
                    676,
                    681,
                    683,
                    684,
                    1713,
                    2230,
                    2232,
                    2266,
                    2267,
                    2269,
                    2272,
                    741,
                    742,
                    1253,
                    746,
                    1771,
                    748,
                    1772,
                    1773,
                    1263,
                    1774,
                    1781,
                    1783,
                    1784,
                    1787,
                    252,
                    1788,
                    2301,
                    2303,
                    2305,
                    1794,
                    2311,
                    2312,
                    267,
                    2840,
                    2841,
                    2842,
                    1840,
                    1841,
                    1842,
                    2353,
                    820,
                    1845,
                    1846,
                    2864,
                    2867,
                    825,
                    1849,
                    2868,
                    2869,
                    2870,
                    1342,
                    2366,
                    2367,
                    1345,
                    1857,
                    1859,
                    2370,
                    2371,
                    840,
                    1353,
                    2888,
                    1355,
                    2893,
                    856,
                    859,
                    1372,
                    349,
                    862,
                    1373,
                    1375,
                    353,
                    1379,
                    871,
                    1384,
                    877,
                    878,
                    367,
                    880,
                    882,
                    888,
                    891,
                    892,
                    2428,
                    2429,
                    2430,
                    2431,
                    2432,
                    2433,
                    2969,
                    2975,
                    2978,
                    2980,
                    2984,
                    2474,
                    2476,
                    2477,
                    2479,
                    2490,
                    3005,
                    3006,
                    3008,
                    1477,
                    1479,
                    3020,
                    3021,
                    3023,
                    1489,
                    1490,
                    3026,
                    3028,
                    1493,
                    1495,
                    1500,
                    2023,
                    2025,
                    2538,
                    2539,
                    2541,
                    2031,
                    3055,
                    3057,
                    2034,
                    3058,
                    2036,
                    2038,
                    503,
                    3062,
                    2044
                ],
                "ndim": [
                    2433,
                    264,
                    265,
                    267,
                    143,
                    144,
                    146,
                    148,
                    150,
                    2842,
                    1696,
                    1580,
                    1582,
                    1584,
                    1585,
                    3007,
                    2122,
                    3028,
                    1513,
                    1514,
                    2541,
                    3055,
                    112
                ],
                "self.mgr_locs": [
                    263,
                    1417,
                    1936,
                    1814,
                    2586,
                    284,
                    295,
                    298,
                    2358,
                    1591,
                    1849,
                    317,
                    1860,
                    465,
                    470,
                    1878,
                    2777,
                    2396,
                    621,
                    750,
                    113,
                    116,
                    374,
                    119,
                    1270,
                    250
                ],
                "placement": [
                    2433,
                    262,
                    263,
                    267,
                    2842,
                    1696,
                    1576,
                    1577,
                    1581,
                    1585,
                    1841,
                    1842,
                    2367,
                    2371,
                    2372,
                    2122,
                    2893,
                    3028,
                    353,
                    2541,
                    113,
                    249,
                    250,
                    252
                ],
                "self.values": [
                    2585,
                    1590,
                    1591,
                    572,
                    574,
                    2110,
                    576,
                    2113,
                    1602,
                    1603,
                    2112,
                    1607,
                    589,
                    1614,
                    1638,
                    114,
                    2162,
                    116,
                    119,
                    655,
                    1167,
                    1170,
                    2196,
                    2197,
                    2209,
                    681,
                    172,
                    1201,
                    1718,
                    2232,
                    1723,
                    2235,
                    2751,
                    196,
                    1737,
                    202,
                    210,
                    211,
                    220,
                    741,
                    1253,
                    1765,
                    1766,
                    2278,
                    1771,
                    1777,
                    1781,
                    2301,
                    1279,
                    1287,
                    2318,
                    1808,
                    2326,
                    2327,
                    292,
                    295,
                    1834,
                    299,
                    300,
                    2859,
                    304,
                    2353,
                    2864,
                    820,
                    1845,
                    1342,
                    1857,
                    328,
                    332,
                    336,
                    1877,
                    2394,
                    2404,
                    357,
                    2407,
                    367,
                    373,
                    1912,
                    381,
                    1920,
                    393,
                    1933,
                    1425,
                    916,
                    1940,
                    1959,
                    1448,
                    2474,
                    1976,
                    445,
                    2496,
                    1991,
                    2023,
                    2548,
                    503
                ],
                "self._validate_ndim": [
                    321,
                    146,
                    116
                ],
                "len": [
                    1794,
                    3074,
                    276,
                    292,
                    1829,
                    1581,
                    1841,
                    2356,
                    1590,
                    1591,
                    2873,
                    956,
                    957,
                    958,
                    2365,
                    2367,
                    449,
                    706,
                    3141,
                    713,
                    2893,
                    1489,
                    1490,
                    353,
                    1640,
                    1514,
                    876,
                    116,
                    119,
                    3068
                ],
                "ValueError": [
                    608,
                    960,
                    322,
                    520,
                    2920,
                    3179,
                    1359,
                    560,
                    883,
                    148,
                    117,
                    1075,
                    1108,
                    1214,
                    2270,
                    766
                ],
                "format": [
                    1215,
                    1058,
                    1606,
                    557,
                    1069,
                    626,
                    275,
                    340,
                    564,
                    118,
                    2325,
                    282,
                    187,
                    1598,
                    671
                ],
                "values.ndim": [
                    1353,
                    1355,
                    1772,
                    3055,
                    144,
                    146,
                    148,
                    1500
                ],
                "msg": [
                    563,
                    147,
                    148,
                    567
                ],
                "msg.format": [
                    148
                ],
                "property": [
                    2435,
                    1938,
                    152,
                    2844,
                    2848,
                    161,
                    165,
                    169,
                    174,
                    2097,
                    1587,
                    1715,
                    2101,
                    1720,
                    1725,
                    1730,
                    326,
                    1735,
                    2249,
                    330,
                    2124,
                    334,
                    222,
                    226,
                    2274,
                    237,
                    2543
                ],
                "self._can_consolidate": [
                    163
                ],
                "self.dtype.name": [
                    163,
                    630
                ],
                "self.dtype": [
                    1024,
                    2176,
                    2177,
                    1416,
                    2056,
                    2186,
                    2189,
                    1423,
                    2447,
                    276,
                    1178,
                    1051,
                    286,
                    163,
                    2086,
                    2091,
                    581,
                    1989,
                    841,
                    337,
                    339,
                    2772,
                    2402,
                    2416,
                    242,
                    630,
                    1910,
                    1272,
                    1918
                ],
                "self.values.base": [
                    172
                ],
                "self.is_datetime": [
                    177,
                    490,
                    1038,
                    1046
                ],
                "self.is_timedelta": [
                    1062,
                    1065,
                    490,
                    1099,
                    177
                ],
                "dtype": [
                    256,
                    1024,
                    3073,
                    1027,
                    3076,
                    1032,
                    267,
                    1933,
                    655,
                    1039,
                    1040,
                    658,
                    659,
                    1045,
                    535,
                    2969,
                    2970,
                    1052,
                    2972,
                    1062,
                    2982,
                    1065,
                    562,
                    1074,
                    1918,
                    565,
                    2995,
                    184,
                    570,
                    187,
                    189,
                    574,
                    2109,
                    576,
                    832,
                    578,
                    2302,
                    836,
                    581,
                    3010,
                    3011,
                    840,
                    841,
                    842,
                    3193,
                    3020,
                    589,
                    3021,
                    591,
                    209,
                    337,
                    339,
                    340,
                    3026,
                    855,
                    856,
                    217,
                    602,
                    607,
                    993,
                    996,
                    2158,
                    2161,
                    3188,
                    2165,
                    3190,
                    3191,
                    2169,
                    1916,
                    1022
                ],
                "Categorical": [
                    184,
                    2841,
                    576,
                    2846
                ],
                "CategoricalDtype": [
                    184
                ],
                "TypeError": [
                    608,
                    1928,
                    1385,
                    2920,
                    3147,
                    625,
                    1371,
                    1075,
                    567,
                    187,
                    766
                ],
                "is_categorical_dtype": [
                    572,
                    189
                ],
                "is_object_dtype": [
                    769,
                    1027,
                    209,
                    3190,
                    727,
                    2109,
                    2302
                ],
                "self.values.astype": [
                    2496,
                    589,
                    210,
                    1976,
                    2394,
                    2235,
                    574
                ],
                "object": [
                    2303,
                    1029,
                    775,
                    1066,
                    2539,
                    2922,
                    2381,
                    2479,
                    210,
                    1076,
                    2491,
                    1976,
                    1048,
                    2394,
                    731,
                    2111,
                    1055
                ],
                "self.get_values": [
                    1477,
                    599,
                    663,
                    217,
                    602
                ],
                "self.values.view": [
                    2404,
                    220,
                    2197,
                    2407
                ],
                "np.nan": [
                    224,
                    817
                ],
                "self._mgr_locs": [
                    235,
                    228
                ],
                "isinstance": [
                    2432,
                    519,
                    2184,
                    2445,
                    2575,
                    2322,
                    659,
                    2067,
                    2069,
                    2841,
                    3108,
                    1829,
                    3110,
                    1576,
                    313,
                    1595,
                    700,
                    3005,
                    1599,
                    448,
                    450,
                    2430,
                    2755,
                    3010,
                    2758,
                    968,
                    1610,
                    2508,
                    2767,
                    2005,
                    2390,
                    2007,
                    2266,
                    987,
                    1372,
                    3040,
                    1761,
                    3042,
                    2147,
                    1892,
                    742,
                    2150,
                    232,
                    1640,
                    618,
                    3046,
                    1900,
                    382
                ],
                "new_mgr_locs": [
                    3080,
                    3083,
                    3085,
                    3087,
                    1812,
                    1813,
                    1814,
                    1816,
                    312,
                    317,
                    324,
                    232,
                    233,
                    235,
                    1268,
                    1269,
                    1270,
                    1273,
                    1275
                ],
                "libinternals.BlockPlacement": [
                    232,
                    233,
                    298,
                    1576,
                    1577,
                    1866
                ],
                "libinternals": [
                    232,
                    233,
                    298,
                    1576,
                    1577,
                    1866
                ],
                "mgr_locs.setter": [
                    230
                ],
                "mgr_locs": [
                    230
                ],
                "make_block": [
                    266,
                    1514,
                    2892,
                    621,
                    3087,
                    1457,
                    2586,
                    2395,
                    252
                ],
                "warnings.warn": [
                    2921,
                    258,
                    3015,
                    2455
                ],
                "warnings": [
                    258,
                    3015,
                    2921,
                    2455,
                    3164,
                    3165
                ],
                "FutureWarning": [
                    2921,
                    2460,
                    260,
                    3017
                ],
                "self.__class__": [
                    272,
                    267
                ],
                "name": [
                    272,
                    283,
                    276
                ],
                "pprint_thing": [
                    272,
                    281,
                    284
                ],
                "self.__class__.__name__": [
                    272
                ],
                "self._is_single_block": [
                    273,
                    506
                ],
                "result": [
                    1920,
                    385,
                    2946,
                    2947,
                    1415,
                    1927,
                    1932,
                    1936,
                    275,
                    282,
                    2207,
                    289,
                    2213,
                    2111,
                    2112,
                    2939,
                    3041,
                    2941,
                    1488,
                    2643,
                    1494,
                    2943,
                    2651,
                    3046,
                    1504,
                    1505,
                    3040,
                    1379,
                    1507,
                    1509,
                    1510,
                    1511,
                    1384,
                    1513,
                    1514,
                    2659,
                    2667,
                    2919,
                    2922,
                    2925,
                    3047,
                    3049,
                    381,
                    2937,
                    1403,
                    1405,
                    382,
                    383
                ],
                "shape": [
                    2566,
                    957,
                    3056,
                    2577,
                    3057,
                    3062,
                    281,
                    285
                ],
                "join": [
                    281
                ],
                "s": [
                    2758,
                    2759,
                    2761,
                    2767,
                    2768,
                    2770,
                    281
                ],
                "self.shape": [
                    2402,
                    1989,
                    2410,
                    619,
                    939,
                    1423,
                    624,
                    631,
                    281,
                    443
                ],
                "self.mgr_locs.indexer": [
                    284,
                    2358,
                    295
                ],
                "str": [
                    2755,
                    2758,
                    2538,
                    270,
                    591,
                    2767,
                    2034,
                    1787
                ],
                "int": [
                    1890,
                    291,
                    1318,
                    1865,
                    2068,
                    2006,
                    2903,
                    2329,
                    1277
                ],
                "state": [
                    298,
                    299
                ],
                "self.values.ndim": [
                    300
                ],
                "slicer": [
                    2322,
                    2323,
                    2199,
                    2200,
                    2201,
                    665,
                    666,
                    2327,
                    1829,
                    1830,
                    1832,
                    1834,
                    2475,
                    2476,
                    304,
                    2865,
                    2867,
                    313,
                    314,
                    316,
                    319,
                    2024,
                    2025,
                    1782,
                    1783,
                    1791
                ],
                "tuple": [
                    1761,
                    1829,
                    1354,
                    977,
                    2322,
                    3062,
                    1303,
                    313,
                    1595
                ],
                "axis0_slicer": [
                    314,
                    316,
                    317
                ],
                "new_values": [
                    1280,
                    1287,
                    3081,
                    1290,
                    1675,
                    1292,
                    1293,
                    1678,
                    1295,
                    1296,
                    1808,
                    3084,
                    3087,
                    916,
                    1303,
                    1816,
                    1307,
                    1309,
                    1953,
                    930,
                    933,
                    1962,
                    939,
                    940,
                    1451,
                    1454,
                    1457,
                    2353,
                    2356,
                    2357,
                    2358,
                    445,
                    319,
                    2751,
                    321,
                    962,
                    324,
                    970,
                    462,
                    464,
                    472,
                    2780,
                    2782,
                    2785,
                    1638,
                    1643,
                    1645,
                    1262,
                    1646,
                    1008,
                    1010,
                    1272,
                    1273,
                    1275,
                    1279
                ],
                "self._slice": [
                    319
                ],
                "new_values.ndim": [
                    321,
                    970,
                    1293
                ],
                "self.make_block_same_class": [
                    352,
                    1858,
                    324,
                    1958,
                    684,
                    1936,
                    1816,
                    1842,
                    1848,
                    1876,
                    2417,
                    1240,
                    1275,
                    1181
                ],
                "self.values.shape": [
                    328,
                    2112
                ],
                "self.values.dtype": [
                    1737,
                    1723,
                    332,
                    655
                ],
                "getattr": [
                    2209,
                    1347,
                    1348,
                    1352,
                    937,
                    973,
                    846,
                    336,
                    2163,
                    1940,
                    918,
                    919,
                    952,
                    1051,
                    1052
                ],
                "self.dtype.subtype": [
                    337
                ],
                "self._ftype": [
                    340
                ],
                "_merge_blocks": [
                    343
                ],
                "other": [
                    1922,
                    1923,
                    1925,
                    1933,
                    1423,
                    1425,
                    1059,
                    1070,
                    1343,
                    1347,
                    1989,
                    1991,
                    1352,
                    1353,
                    1354,
                    1366,
                    343,
                    1367,
                    1370,
                    1372,
                    1373,
                    1375,
                    2402,
                    1892,
                    2404,
                    1895,
                    1384,
                    1896,
                    1898,
                    2919,
                    2923,
                    1389,
                    1906,
                    1910,
                    1022
                ],
                "self._concatenator": [
                    2888,
                    349
                ],
                "blk.values": [
                    1840,
                    2889,
                    350
                ],
                "blk": [
                    2889,
                    2412,
                    2413,
                    1840,
                    350
                ],
                "to_concat": [
                    350,
                    2372,
                    2889,
                    1840,
                    2365,
                    2366
                ],
                "slice": [
                    1600,
                    353,
                    420,
                    2367,
                    2893,
                    1841,
                    1298,
                    1300,
                    1302,
                    2775,
                    1599
                ],
                "i": [
                    1410,
                    357,
                    470,
                    471,
                    472,
                    476
                ],
                "locs": [
                    2232,
                    1613,
                    367
                ],
                "np.delete": [
                    373
                ],
                "loc": [
                    1602,
                    1603,
                    2323,
                    373,
                    374,
                    2326,
                    1596
                ],
                "self.mgr_locs.delete": [
                    374
                ],
                "np.errstate": [
                    380
                ],
                "func": [
                    1384,
                    381,
                    1238
                ],
                "kwargs": [
                    2464,
                    1125,
                    1234,
                    1141,
                    790,
                    535,
                    2169,
                    381,
                    1791
                ],
                "Block": [
                    450,
                    2116,
                    2532,
                    1681,
                    1940,
                    1979,
                    382
                ],
                "self.make_block": [
                    576,
                    513,
                    1280,
                    2785,
                    456,
                    1417,
                    2412,
                    1646,
                    1010,
                    1405,
                    2166,
                    1273,
                    892,
                    1309,
                    574,
                    383
                ],
                "_block_shape": [
                    455,
                    2579,
                    383
                ],
                "inplace": [
                    1156,
                    2820,
                    2948,
                    391,
                    1162,
                    779,
                    1546,
                    399,
                    1167,
                    785,
                    1551,
                    916,
                    406,
                    2713,
                    411,
                    421,
                    423,
                    1200,
                    1201,
                    1845,
                    694,
                    2748,
                    701,
                    2751,
                    1857,
                    2625,
                    709,
                    1094,
                    2378,
                    2634,
                    1100,
                    2382,
                    719,
                    464,
                    2518,
                    2646,
                    1112,
                    2525,
                    478,
                    735,
                    1118,
                    1634,
                    1638,
                    1127,
                    2662,
                    1001,
                    1004,
                    754,
                    1139,
                    2674,
                    759,
                    2936,
                    2937,
                    2941
                ],
                "validate_bool_kwarg": [
                    1634,
                    1156,
                    1094,
                    391,
                    1200,
                    694,
                    2518,
                    2936,
                    2713
                ],
                "mask": [
                    2816,
                    1410,
                    1413,
                    1543,
                    2823,
                    393,
                    1546,
                    1675,
                    396,
                    1677,
                    1678,
                    1554,
                    406,
                    919,
                    410,
                    667,
                    1953,
                    675,
                    1451,
                    1964,
                    1453,
                    1454,
                    1455,
                    2477,
                    1458,
                    2482,
                    2483,
                    2868,
                    2870,
                    951,
                    442,
                    443,
                    956,
                    957,
                    962,
                    965,
                    3141,
                    967,
                    3146,
                    461,
                    462,
                    1493,
                    471,
                    1499,
                    2779,
                    2782,
                    3171,
                    998,
                    1640,
                    1001,
                    1641,
                    1643,
                    748,
                    1645,
                    3178,
                    751,
                    2031,
                    753,
                    3180,
                    2038,
                    759,
                    1784,
                    1788
                ],
                "isna": [
                    2945,
                    835,
                    2755,
                    393,
                    2477,
                    2031,
                    1906,
                    2868,
                    1493,
                    1784,
                    922,
                    667
                ],
                "limit": [
                    1859,
                    421,
                    394,
                    395,
                    396,
                    1229,
                    2378,
                    1135,
                    2382,
                    1846,
                    1176,
                    1119
                ],
                "libalgos._validate_limit": [
                    395
                ],
                "libalgos": [
                    395
                ],
                "mask.cumsum": [
                    396
                ],
                "self._can_hold_na": [
                    1400,
                    1161,
                    398
                ],
                "self.copy": [
                    613,
                    1638,
                    583,
                    711,
                    651,
                    1165,
                    1103,
                    402,
                    756,
                    790,
                    2937,
                    411,
                    703
                ],
                "self._can_hold_element": [
                    705,
                    772,
                    2377,
                    404,
                    821,
                    854,
                    2389,
                    1370,
                    699,
                    926
                ],
                "value": [
                    2945,
                    2946,
                    2819,
                    772,
                    2948,
                    2056,
                    1545,
                    778,
                    1546,
                    1550,
                    404,
                    2453,
                    406,
                    2072,
                    415,
                    2463,
                    2464,
                    2468,
                    421,
                    2469,
                    2217,
                    2218,
                    2091,
                    2219,
                    2604,
                    815,
                    2607,
                    817,
                    821,
                    1846,
                    2614,
                    824,
                    825,
                    2748,
                    831,
                    832,
                    2624,
                    835,
                    836,
                    2755,
                    2759,
                    2377,
                    1610,
                    843,
                    2378,
                    2633,
                    718,
                    846,
                    2382,
                    849,
                    2511,
                    851,
                    2512,
                    2389,
                    854,
                    2640,
                    2392,
                    2768,
                    2524,
                    734,
                    862,
                    2398,
                    1765,
                    1766,
                    871,
                    2661,
                    880,
                    2673,
                    759,
                    888,
                    2939
                ],
                "blocks": [
                    3074,
                    3076,
                    3080,
                    3081,
                    785,
                    786,
                    3090,
                    406,
                    407,
                    2583,
                    2586,
                    2588,
                    1181,
                    1182,
                    2593,
                    2596,
                    1957,
                    1964,
                    1457,
                    1458,
                    2619,
                    2642,
                    1240,
                    1241,
                    2652,
                    3038,
                    3039,
                    2658,
                    3043,
                    3045,
                    3047,
                    3049,
                    3050,
                    492,
                    2668,
                    494,
                    1390,
                    1398,
                    759,
                    3068,
                    3069
                ],
                "self.putmask": [
                    1546,
                    406,
                    759
                ],
                "self._maybe_downcast": [
                    1241,
                    1398,
                    1182,
                    407
                ],
                "downcast": [
                    2592,
                    1122,
                    489,
                    2378,
                    494,
                    2382,
                    1140,
                    407,
                    1241,
                    1182
                ],
                "mask.any": [
                    2816,
                    965,
                    1543,
                    461,
                    1453,
                    1677,
                    753,
                    410
                ],
                "block": [
                    2817,
                    775,
                    776,
                    2826,
                    2827,
                    415,
                    420,
                    421,
                    451,
                    456,
                    457,
                    465,
                    466,
                    731,
                    732,
                    480,
                    481,
                    2785,
                    2787,
                    2788,
                    1389,
                    1390,
                    892,
                    893
                ],
                "self.coerce_to_target_dtype": [
                    1545,
                    1389,
                    415
                ],
                "idx": [
                    418,
                    988,
                    420,
                    982
                ],
                "block.getitem_block": [
                    420
                ],
                "block.fillna": [
                    421
                ],
                "self.split_and_operate": [
                    1001,
                    532,
                    2583,
                    423
                ],
                "f": [
                    2780,
                    423,
                    1001,
                    462,
                    532,
                    2772,
                    2583,
                    2585,
                    476,
                    2782
                ],
                "bool": [
                    640,
                    641,
                    642,
                    643,
                    644,
                    1410,
                    2439,
                    653,
                    1422,
                    2063,
                    2069,
                    1818,
                    2080,
                    1317,
                    2598,
                    425,
                    2555,
                    1988,
                    2504,
                    2508,
                    1999,
                    2902,
                    2520,
                    2009,
                    2400,
                    1889,
                    2931,
                    2933,
                    2934,
                    2552,
                    2553,
                    2554,
                    2171,
                    2556
                ],
                "np.broadcast_to": [
                    443
                ],
                "nv": [
                    512,
                    513,
                    448,
                    449,
                    450,
                    451,
                    455,
                    456,
                    462,
                    464,
                    465,
                    476,
                    478,
                    480,
                    3170,
                    3171,
                    3172,
                    998,
                    999,
                    3178,
                    3180,
                    3181
                ],
                "list": [
                    448,
                    3040,
                    3042,
                    558,
                    975,
                    700
                ],
                "ref_loc": [
                    456,
                    480,
                    470
                ],
                "new_values.copy": [
                    464
                ],
                "make_a_block": [
                    480,
                    465
                ],
                "new_blocks": [
                    481,
                    483,
                    1001,
                    1002,
                    469
                ],
                "enumerate": [
                    470
                ],
                "m": [
                    1125,
                    1413,
                    1414,
                    1415,
                    1417,
                    1131,
                    1116,
                    1107,
                    1109,
                    1111,
                    471,
                    475,
                    476
                ],
                "v": [
                    3193,
                    3170,
                    2640,
                    3153,
                    3184,
                    3185,
                    3191,
                    2645,
                    3158,
                    3190,
                    472,
                    3166,
                    3195,
                    476,
                    478
                ],
                "m.any": [
                    475,
                    1414
                ],
                "v.copy": [
                    3170,
                    478
                ],
                "new_blocks.append": [
                    481
                ],
                "List": [
                    1891,
                    485,
                    1319,
                    1868,
                    2904,
                    2329,
                    1277,
                    2590
                ],
                "self.is_float": [
                    490,
                    1204,
                    1031
                ],
                "_extend_blocks": [
                    2667,
                    2651,
                    2596,
                    494
                ],
                "b.downcast": [
                    494
                ],
                "b": [
                    2658,
                    2659,
                    2596,
                    3074,
                    3080,
                    3081,
                    842,
                    843,
                    2826,
                    494,
                    785,
                    2642,
                    2643
                ],
                "dtypes": [
                    512,
                    516,
                    519,
                    523,
                    500,
                    509,
                    510
                ],
                "maybe_downcast_to_dtype": [
                    512,
                    529
                ],
                "dict": [
                    519
                ],
                "AssertionError": [
                    1057,
                    2723,
                    3075,
                    1831,
                    524,
                    1068,
                    728
                ],
                "val": [
                    998,
                    2566,
                    2568,
                    529,
                    530,
                    2490
                ],
                "self._astype": [
                    535
                ],
                "copy": [
                    613,
                    582,
                    651,
                    2573,
                    629,
                    535,
                    574
                ],
                "errors": [
                    611,
                    2919,
                    555,
                    2923,
                    558,
                    1394,
                    535,
                    1339
                ],
                "errors_legal_values": [
                    553,
                    555,
                    558
                ],
                "invalid_arg": [
                    560,
                    556
                ],
                "inspect.isclass": [
                    562
                ],
                "inspect": [
                    562
                ],
                "issubclass": [
                    2056,
                    2442,
                    658,
                    2066,
                    2072,
                    2977,
                    2467,
                    2084,
                    2085,
                    2217,
                    2986,
                    2603,
                    2988,
                    2989,
                    2991,
                    2993,
                    562,
                    2507,
                    591,
                    2511,
                    2002,
                    2538
                ],
                "ExtensionDtype": [
                    562
                ],
                "dtype.__name__": [
                    565
                ],
                "self.is_categorical_astype": [
                    570
                ],
                "pandas_dtype": [
                    578,
                    2158
                ],
                "is_dtype_equal": [
                    1024,
                    2176,
                    581,
                    841,
                    1272
                ],
                "self.is_extension": [
                    587
                ],
                "dtype.type": [
                    2970,
                    591
                ],
                "self.is_datelike": [
                    594
                ],
                "self.to_native_types": [
                    595
                ],
                "vals1d": [
                    605,
                    607
                ],
                "values.ravel": [
                    2490,
                    605
                ],
                "astype_nansafe": [
                    607
                ],
                "newb": [
                    613,
                    614,
                    621,
                    623,
                    624,
                    632,
                    633,
                    2395,
                    636,
                    2398
                ],
                "np.ndarray": [
                    2432,
                    742,
                    2150,
                    968,
                    1640,
                    618,
                    2575,
                    2390,
                    987,
                    1372
                ],
                "values.reshape": [
                    1794,
                    2311,
                    619,
                    1773,
                    2577,
                    3062,
                    2873
                ],
                "newb.is_numeric": [
                    623
                ],
                "self.is_numeric": [
                    816,
                    623
                ],
                "newb.shape": [
                    624,
                    633
                ],
                "newb.dtype.name": [
                    632
                ],
                "newb.dtype": [
                    632
                ],
                "Any": [
                    2080,
                    2598,
                    2439,
                    2504,
                    1867,
                    653,
                    2063,
                    1999,
                    1818,
                    2171
                ],
                "self.values.dtype.type": [
                    655
                ],
                "tipo": [
                    2176,
                    2181,
                    2440,
                    2441,
                    2442,
                    656,
                    657,
                    658,
                    2064,
                    2065,
                    2066,
                    2081,
                    2082,
                    2084,
                    2085,
                    2086,
                    2505,
                    2506,
                    2507,
                    2000,
                    2001,
                    2002,
                    2003,
                    2172,
                    2173
                ],
                "maybe_infer_dtype_type": [
                    2081,
                    2440,
                    2505,
                    656,
                    2064,
                    2000,
                    2172
                ],
                "element": [
                    2177,
                    2182,
                    2184,
                    2440,
                    2186,
                    2187,
                    2443,
                    2189,
                    2445,
                    2447,
                    656,
                    2064,
                    659,
                    2068,
                    2069,
                    2081,
                    2088,
                    2505,
                    2508,
                    2000,
                    2006,
                    2008,
                    2172
                ],
                "tipo.type": [
                    2084,
                    2085,
                    2442,
                    2507,
                    2066,
                    2002,
                    658,
                    2003
                ],
                "self.is_object": [
                    922,
                    669
                ],
                "quoting": [
                    2048,
                    2033,
                    669,
                    1791
                ],
                "itemsize": [
                    670,
                    671
                ],
                "writers.word_len": [
                    670
                ],
                "writers": [
                    670
                ],
                "na_rep": [
                    675,
                    2211,
                    2480,
                    2481,
                    2482,
                    2038,
                    2870,
                    1788,
                    2045,
                    670,
                    1791
                ],
                "values.astype": [
                    2303,
                    882,
                    2034,
                    856,
                    1787,
                    671
                ],
                "np.array": [
                    1504,
                    673,
                    1410,
                    2539,
                    1489,
                    851,
                    2036,
                    2869,
                    1496,
                    2489,
                    990
                ],
                "deep": [
                    682
                ],
                "values.copy": [
                    683
                ],
                "original_to_replace": [
                    777,
                    695
                ],
                "to_replace": [
                    2818,
                    2948,
                    1549,
                    2716,
                    2730,
                    2735,
                    2736,
                    2738,
                    2613,
                    695,
                    2743,
                    699,
                    700,
                    2621,
                    2748,
                    2623,
                    705,
                    706,
                    2632,
                    713,
                    717,
                    2640,
                    2519,
                    2523,
                    733,
                    2656,
                    742,
                    746,
                    748,
                    2672,
                    2939
                ],
                "x": [
                    705,
                    1227,
                    2365,
                    2366
                ],
                "self.replace": [
                    716
                ],
                "filter": [
                    736,
                    2626,
                    2948,
                    2663,
                    2635,
                    780,
                    749,
                    750,
                    720,
                    2675,
                    2774,
                    2647,
                    2777,
                    2938,
                    2748,
                    2526
                ],
                "regex": [
                    2948,
                    2821,
                    1544,
                    781,
                    1552,
                    2716,
                    2719,
                    2730,
                    2732,
                    2742,
                    2748,
                    2630,
                    2636,
                    721,
                    2648,
                    2655,
                    2527,
                    737,
                    2664,
                    2677
                ],
                "convert": [
                    2528,
                    738,
                    2786,
                    2628,
                    2948,
                    2822,
                    2665,
                    2825,
                    2637,
                    782,
                    784,
                    1553,
                    722,
                    2676,
                    2649,
                    2940
                ],
                "self.astype": [
                    1029,
                    775,
                    842,
                    1066,
                    2922,
                    2381,
                    1074,
                    1076,
                    1048,
                    731,
                    1055
                ],
                "block.replace": [
                    776,
                    732
                ],
                "lib.is_scalar": [
                    929,
                    1922,
                    835,
                    1507,
                    742,
                    1906,
                    824,
                    1372
                ],
                "lib": [
                    929,
                    1922,
                    835,
                    1507,
                    742,
                    1511,
                    1906,
                    2548,
                    1366,
                    824,
                    1372
                ],
                "convert_scalar": [
                    930,
                    746,
                    1170,
                    825,
                    1373
                ],
                "missing.mask_missing": [
                    748
                ],
                "missing": [
                    1125,
                    1225,
                    748,
                    1107,
                    1172
                ],
                "filtered_out": [
                    750,
                    751
                ],
                "self.mgr_locs.isin": [
                    2777,
                    750
                ],
                "filtered_out.nonzero": [
                    751
                ],
                "b.convert": [
                    785,
                    2826,
                    2596
                ],
                "transpose": [
                    1344,
                    932,
                    966,
                    1355,
                    812,
                    1402,
                    1007,
                    858,
                    1340,
                    890
                ],
                "find_dtype": [
                    833,
                    837,
                    829,
                    839
                ],
                "hasattr": [
                    1358,
                    831
                ],
                "value.dtype": [
                    832,
                    2468,
                    2056,
                    2217,
                    2091,
                    2604,
                    2511,
                    2072
                ],
                "_": [
                    993,
                    836,
                    3188,
                    855,
                    1022
                ],
                "infer_dtype_from_scalar": [
                    836
                ],
                "find_common_type": [
                    840
                ],
                "values.dtype": [
                    2144,
                    840,
                    2538,
                    3020,
                    2969,
                    2428
                ],
                "b.setitem": [
                    843
                ],
                "indexer": [
                    864,
                    1761,
                    2398,
                    1763,
                    868,
                    1765,
                    1766,
                    871,
                    2392,
                    843,
                    1263,
                    880,
                    1808,
                    2390,
                    888,
                    862
                ],
                "is_extension_array_dtype": [
                    2469,
                    2984,
                    2219,
                    846,
                    2607,
                    2511,
                    3058,
                    3190
                ],
                "arr_value": [
                    864,
                    868,
                    876,
                    877,
                    878,
                    849,
                    882,
                    851,
                    855
                ],
                "maybe_promote": [
                    993,
                    3188,
                    855
                ],
                "arr_value.dtype": [
                    882,
                    855
                ],
                "values.T": [
                    891,
                    1345,
                    859
                ],
                "check_setitem_lengths": [
                    1765,
                    862
                ],
                "is_empty_indexer": [
                    864
                ],
                "is_scalar_indexer": [
                    868
                ],
                "arr_value.shape": [
                    876,
                    877
                ],
                "values.shape": [
                    1479,
                    1773,
                    877,
                    2479,
                    3057
                ],
                "arr_value.size": [
                    878
                ],
                "values.size": [
                    878
                ],
                "self.values.copy": [
                    1920,
                    1857,
                    1167,
                    1201,
                    916,
                    1845,
                    2751
                ],
                "new": [
                    918,
                    922,
                    924,
                    926,
                    929,
                    930,
                    937,
                    938,
                    939,
                    940,
                    950,
                    952,
                    956,
                    957,
                    958,
                    962,
                    968,
                    969,
                    973,
                    974,
                    975,
                    977,
                    984,
                    987,
                    988,
                    990,
                    1640,
                    1641,
                    1645
                ],
                "is_list_like": [
                    3169,
                    3140,
                    1480,
                    2613,
                    2614,
                    950,
                    922
                ],
                "self.fill_value": [
                    1256,
                    1489,
                    1498,
                    1210,
                    924
                ],
                "new_values.T": [
                    933,
                    1962,
                    1292,
                    1454,
                    1008,
                    1307
                ],
                "new.ndim": [
                    938,
                    974
                ],
                "axis": [
                    1408,
                    1409,
                    1415,
                    1293,
                    1296,
                    1300,
                    1302,
                    1175,
                    938,
                    2349,
                    2353,
                    1479,
                    1353,
                    970,
                    976,
                    1238,
                    1497,
                    1117,
                    2919,
                    2923,
                    2413,
                    1134,
                    1263,
                    1268,
                    1396,
                    1279
                ],
                "reshape": [
                    1488,
                    939,
                    2207
                ],
                "np.repeat": [
                    1488,
                    939,
                    3141
                ],
                "new_values.shape": [
                    1643,
                    939,
                    1295
                ],
                "new.astype": [
                    940
                ],
                "new_values.dtype": [
                    1272,
                    940
                ],
                "np.any": [
                    951
                ],
                "mask.shape": [
                    956
                ],
                "np.putmask": [
                    962
                ],
                "mask.T": [
                    967
                ],
                "new.T": [
                    969
                ],
                "new_shape": [
                    976,
                    977,
                    3111,
                    975
                ],
                "new.shape": [
                    988,
                    975
                ],
                "new_shape.insert": [
                    976
                ],
                "new.reshape": [
                    977
                ],
                "n": [
                    993,
                    996,
                    3140,
                    998,
                    3141,
                    3174,
                    3146,
                    3178,
                    3180,
                    3184,
                    2353,
                    3185,
                    3188,
                    984,
                    3195,
                    988,
                    990,
                    1279
                ],
                "np.squeeze": [
                    988
                ],
                "n.dtype": [
                    3184,
                    993,
                    3188
                ],
                "n.astype": [
                    996
                ],
                "_putmask_smart": [
                    998
                ],
                "infer_dtype_from": [
                    1022
                ],
                "self.is_bool": [
                    1099,
                    1027,
                    1365
                ],
                "is_bool_dtype": [
                    1027
                ],
                "self.is_complex": [
                    1031
                ],
                "is_integer_dtype": [
                    1032,
                    3155,
                    2091,
                    3158
                ],
                "is_float_dtype": [
                    1032,
                    3155,
                    3158
                ],
                "is_datetime64_dtype": [
                    1045,
                    2181,
                    1039
                ],
                "is_datetime64tz_dtype": [
                    2978,
                    2980,
                    2218,
                    3023,
                    1040,
                    2161,
                    1045
                ],
                "mytz": [
                    1051,
                    1054
                ],
                "othertz": [
                    1052,
                    1054
                ],
                "tz_compare": [
                    2186,
                    1054
                ],
                "is_timedelta64_dtype": [
                    1065,
                    1062
                ],
                "OverflowError": [
                    1075
                ],
                "self.is_integer": [
                    1099,
                    1365,
                    1205
                ],
                "missing.clean_fill_method": [
                    1107
                ],
                "method": [
                    1216,
                    1859,
                    1125,
                    1228,
                    1107,
                    1174,
                    1212
                ],
                "r": [
                    3041,
                    3042,
                    3043,
                    3045,
                    1127,
                    1128,
                    1129,
                    1416,
                    1417,
                    1112,
                    1113,
                    1114
                ],
                "check_int_bool": [
                    1112,
                    1127
                ],
                "self._interpolate_with_fill": [
                    1115
                ],
                "fill_value": [
                    1287,
                    1801,
                    1803,
                    1808,
                    1170,
                    1303,
                    1177,
                    1959,
                    1209,
                    1210,
                    1859,
                    2247,
                    1232,
                    1877,
                    1120,
                    1256,
                    1259,
                    1263,
                    1138,
                    2425
                ],
                "coerce": [
                    1160,
                    1121,
                    2572
                ],
                "missing.clean_interp_method": [
                    1125
                ],
                "self._interpolate": [
                    1130
                ],
                "index": [
                    1226,
                    1132,
                    1213
                ],
                "limit_direction": [
                    1136,
                    1230
                ],
                "limit_area": [
                    1137,
                    1231
                ],
                "missing.interpolate_2d": [
                    1172
                ],
                "data": [
                    1201,
                    1238,
                    1207
                ],
                "data.astype": [
                    1207
                ],
                "np.float64": [
                    1207
                ],
                "index.is_monotonic": [
                    1213
                ],
                "missing.interpolate_1d": [
                    1225
                ],
                "interp_values": [
                    1240,
                    1238
                ],
                "np.apply_along_axis": [
                    1238
                ],
                "fill_tuple": [
                    1800,
                    1803,
                    1259,
                    1255
                ],
                "allow_fill": [
                    1257,
                    1260,
                    1263
                ],
                "algos.take_nd": [
                    1262
                ],
                "algos": [
                    1262,
                    1279
                ],
                "algos.diff": [
                    1279
                ],
                "maybe_upcast": [
                    1287
                ],
                "f_ordered": [
                    1306,
                    1290,
                    1291
                ],
                "new_values.flags.f_contiguous": [
                    1290
                ],
                "new_values.flags": [
                    1290
                ],
                "np.prod": [
                    1295
                ],
                "np.roll": [
                    1296
                ],
                "ensure_platform_int": [
                    1296
                ],
                "periods": [
                    1296,
                    1299,
                    1300,
                    1877,
                    1302
                ],
                "axis_indexer": [
                    1298,
                    1300,
                    1302,
                    1303
                ],
                "orig_other": [
                    1391,
                    1343
                ],
                "cond": [
                    1408,
                    1409,
                    1378,
                    1410,
                    1348,
                    1921,
                    2919,
                    1384,
                    2923,
                    1356,
                    1900,
                    1358,
                    1901,
                    1392,
                    1902,
                    1904,
                    1933,
                    1375
                ],
                "other.ndim": [
                    1353
                ],
                "other.reshape": [
                    1354
                ],
                "other.shape": [
                    2402,
                    1989,
                    1895,
                    1354,
                    1423
                ],
                "cond.T": [
                    1356
                ],
                "lib.is_float": [
                    1366
                ],
                "np.isnan": [
                    1992,
                    1367
                ],
                "fastres": [
                    1376,
                    1375
                ],
                "expressions.where": [
                    1375
                ],
                "expressions": [
                    1375
                ],
                "all": [
                    1992,
                    1378,
                    2404,
                    1410
                ],
                "cond.ravel": [
                    1378
                ],
                "block.where": [
                    1390
                ],
                "align": [
                    1393,
                    2923,
                    2919
                ],
                "try_cast": [
                    2923,
                    1395,
                    2919
                ],
                "result.T": [
                    1505,
                    1403
                ],
                "cond.ndim": [
                    1408
                ],
                "cond.swapaxes": [
                    1409
                ],
                "range": [
                    1410
                ],
                "cond.shape": [
                    1410,
                    1901
                ],
                "result_blocks": [
                    2657,
                    1412,
                    1418,
                    2667,
                    1420,
                    2668,
                    2669,
                    2641,
                    2618,
                    2651,
                    2652,
                    2653
                ],
                "taken": [
                    1416,
                    1415
                ],
                "result.take": [
                    1415
                ],
                "m.nonzero": [
                    1415
                ],
                "maybe_downcast_numeric": [
                    1416
                ],
                "nb": [
                    1417,
                    1418
                ],
                "r.T": [
                    1417
                ],
                "result_blocks.append": [
                    1418
                ],
                "other.dtype": [
                    2402,
                    1989,
                    1423
                ],
                "array_equivalent": [
                    1425
                ],
                "other.values": [
                    1425,
                    2404,
                    1991
                ],
                "unstacker": [
                    1954,
                    1448,
                    1449,
                    1673,
                    1451,
                    1675,
                    1951
                ],
                "unstacker_func": [
                    1448,
                    1950
                ],
                "self.values.T": [
                    1448
                ],
                "new_items": [
                    1449,
                    1450,
                    1673,
                    1674
                ],
                "unstacker.get_new_columns": [
                    1449,
                    1673
                ],
                "new_placement": [
                    1953,
                    1450,
                    1674,
                    1962,
                    1678,
                    1455,
                    1457
                ],
                "new_columns.get_indexer": [
                    1450,
                    1674
                ],
                "new_columns": [
                    1954,
                    1450,
                    1674
                ],
                "unstacker.get_new_values": [
                    1451,
                    1675
                ],
                "is_empty": [
                    1485,
                    1479
                ],
                "orig_scalar": [
                    1480,
                    1481,
                    1507
                ],
                "qs": [
                    1480,
                    1483,
                    2413,
                    1489,
                    1490,
                    1496
                ],
                "np.asarray": [
                    2496,
                    2305,
                    3174,
                    1771,
                    2318,
                    1777,
                    1493,
                    2235
                ],
                "nanpercentile": [
                    1494
                ],
                "interpolation": [
                    2413,
                    1501
                ],
                "result.shape": [
                    1509
                ],
                "lib.item_from_zerodim": [
                    1511
                ],
                "np.ndim": [
                    1513
                ],
                "np.arange": [
                    1514,
                    1949
                ],
                "self._replace_single": [
                    1548,
                    2622,
                    2671
                ],
                "__init__": [
                    1696,
                    2433,
                    2122,
                    2541,
                    1585,
                    2842
                ],
                "super": [
                    1696,
                    2433,
                    2464,
                    2817,
                    2372,
                    2947,
                    2631,
                    2919,
                    2122,
                    2378,
                    2842,
                    2541,
                    1585,
                    2392,
                    2169,
                    2522,
                    2747,
                    1791
                ],
                "col": [
                    1600,
                    1601,
                    1605,
                    2323,
                    2324,
                    1595,
                    1596,
                    1597,
                    1599
                ],
                "com.is_null_slice": [
                    2324,
                    1597,
                    1830
                ],
                "com": [
                    2324,
                    1597,
                    1830
                ],
                "IndexError": [
                    1606,
                    3179,
                    2325,
                    1598
                ],
                "NotImplementedError": [
                    1928,
                    1601,
                    2352
                ],
                "self._holder": [
                    1728,
                    1610,
                    1932,
                    1840,
                    2416,
                    2266,
                    2267,
                    2111
                ],
                "locs.tolist": [
                    1613
                ],
                "_safe_reshape": [
                    1643
                ],
                "NonConsolidatableMixIn": [
                    1681
                ],
                "self._maybe_coerce_values": [
                    2121,
                    1695
                ],
                "extract_array": [
                    1904,
                    1713,
                    1898,
                    2840
                ],
                "type": [
                    2432,
                    2841,
                    2150,
                    1718
                ],
                "self.values.dtype.na_value": [
                    1723
                ],
                "self._holder._can_hold_na": [
                    1728
                ],
                "self.values.dtype._is_numeric": [
                    1737
                ],
                "Exception": [
                    1789
                ],
                "to_native_types": [
                    2246,
                    1791
                ],
                "self.values.take": [
                    1808,
                    1959
                ],
                "self._holder._concat_same_type": [
                    1840
                ],
                "values.fillna": [
                    1859,
                    1846
                ],
                "self.values.shift": [
                    1877
                ],
                "ABCDataFrame": [
                    1900,
                    1892
                ],
                "other.iloc": [
                    1896
                ],
                "cond.iloc": [
                    1902
                ],
                "self.dtype.na_value": [
                    1910
                ],
                "is_sparse": [
                    1912,
                    2972
                ],
                "icond": [
                    1921,
                    1925,
                    1927
                ],
                "set_other": [
                    1923,
                    1925,
                    1927
                ],
                "self._holder._from_sequence": [
                    1932
                ],
                "np.where": [
                    1933
                ],
                "Block._ftype": [
                    1940
                ],
                "dummy_arr": [
                    1949,
                    1951
                ],
                "n_rows": [
                    1949
                ],
                "dummy_unstacker": [
                    1950,
                    1951
                ],
                "functools.partial": [
                    1950
                ],
                "functools": [
                    1950
                ],
                "self._get_unstack_items": [
                    1953
                ],
                "indices": [
                    1962,
                    1959
                ],
                "place": [
                    1960,
                    1962
                ],
                "zip": [
                    2640,
                    1962
                ],
                "ExtensionBlock": [
                    2985,
                    2831,
                    1967,
                    2238,
                    2974
                ],
                "NumericBlock": [
                    1985,
                    2075,
                    2499
                ],
                "left": [
                    1992,
                    1991
                ],
                "right": [
                    1992,
                    1991
                ],
                "FloatOrComplexBlock": [
                    2059,
                    1995
                ],
                "np.floating": [
                    2056,
                    2986,
                    2605,
                    2002,
                    2066,
                    2006
                ],
                "np.integer": [
                    2084,
                    2605,
                    2989,
                    2993,
                    2002,
                    2066
                ],
                "np.datetime64": [
                    2977,
                    2085,
                    2247,
                    2217,
                    2605,
                    2003,
                    2103,
                    2009
                ],
                "np.timedelta64": [
                    2468,
                    2085,
                    2442,
                    2988,
                    2445,
                    2003,
                    2425,
                    2009
                ],
                "float": [
                    2068,
                    2006
                ],
                "np.int_": [
                    2068,
                    2006
                ],
                "np.bool_": [
                    2507,
                    2508,
                    2605,
                    2511,
                    2995,
                    2069,
                    2009
                ],
                "datetime": [
                    2184,
                    2009,
                    2569
                ],
                "timedelta": [
                    2009,
                    2571,
                    2445
                ],
                "float_format": [
                    2046,
                    2030
                ],
                "decimal": [
                    2030,
                    2047
                ],
                "formatter": [
                    2051,
                    2043
                ],
                "FloatArrayFormatter": [
                    2043
                ],
                "formatter.get_result_as_array": [
                    2051
                ],
                "value.dtype.type": [
                    2468,
                    2056,
                    2217,
                    2604,
                    2511,
                    2072
                ],
                "np.complexfloating": [
                    2072,
                    2066,
                    2605,
                    2991
                ],
                "complex": [
                    2068
                ],
                "np.float_": [
                    2068
                ],
                "self.dtype.itemsize": [
                    2086
                ],
                "tipo.itemsize": [
                    2086
                ],
                "DatetimeArray": [
                    2147,
                    2251,
                    3026,
                    2099,
                    2164
                ],
                "self.values.ravel": [
                    2585,
                    2548,
                    2110
                ],
                "astype": [
                    2111
                ],
                "result.reshape": [
                    2112
                ],
                "DatetimeLikeBlockMixin": [
                    2420,
                    2116
                ],
                "_NS_DTYPE": [
                    2144,
                    2318
                ],
                "conversion.ensure_datetime64ns": [
                    2145,
                    2230
                ],
                "conversion": [
                    2145,
                    2429,
                    2230
                ],
                "values._data": [
                    2148,
                    2431
                ],
                "tz_localize": [
                    2164
                ],
                "values.tz_convert": [
                    2165
                ],
                "dtype.tz": [
                    2165
                ],
                "_astype": [
                    2169
                ],
                "self.is_datetimetz": [
                    2185,
                    2174
                ],
                "is_valid_nat_for_dtype": [
                    2176,
                    2189,
                    2447
                ],
                "NaT": [
                    2443,
                    2182
                ],
                "element.tzinfo": [
                    2186,
                    2187
                ],
                "self.dtype.tz": [
                    2186
                ],
                "i8values": [
                    2208,
                    2201,
                    2212,
                    2197
                ],
                "fmt": [
                    2210,
                    2205
                ],
                "_get_format_datetime64_from_values": [
                    2205
                ],
                "date_format": [
                    2205
                ],
                "tslib.format_array_from_datetime": [
                    2207
                ],
                "tslib": [
                    2207
                ],
                "i8values.ravel": [
                    2208
                ],
                "i8values.shape": [
                    2212
                ],
                "np.atleast_2d": [
                    3008,
                    2370,
                    2213
                ],
                "DatetimeBlock": [
                    2979,
                    2246,
                    2245,
                    2238
                ],
                "_can_hold_element": [
                    2245
                ],
                "DatetimeBlock._can_hold_element": [
                    2245
                ],
                "DatetimeBlock.to_native_types": [
                    2246
                ],
                "values.tz": [
                    2269
                ],
                "self.values._data.base": [
                    2278
                ],
                "self.values._data": [
                    2278
                ],
                "asi8": [
                    2353
                ],
                "self.shift": [
                    2353
                ],
                "new_values.reshape": [
                    2356
                ],
                "new_values.astype": [
                    2357
                ],
                "TimeDeltaBlock": [
                    2990,
                    2358
                ],
                "x.dtype": [
                    2365
                ],
                "concat_datetime": [
                    2366
                ],
                "x.values": [
                    2366
                ],
                "ObjectBlock": [
                    2371,
                    2396,
                    2998
                ],
                "concat_same_type": [
                    2372
                ],
                "fillna": [
                    2464,
                    2378,
                    2381
                ],
                "indexer.size": [
                    2390
                ],
                "setitem": [
                    2392
                ],
                "obj_vals": [
                    2394,
                    2396
                ],
                "newb.setitem": [
                    2398
                ],
                "other.values.view": [
                    2404
                ],
                "naive": [
                    2410,
                    2412,
                    2407
                ],
                "naive.reshape": [
                    2410
                ],
                "res_blk": [
                    2416,
                    2417,
                    2413
                ],
                "blk.quantile": [
                    2413
                ],
                "aware": [
                    2416,
                    2417
                ],
                "res_blk.values.ravel": [
                    2416
                ],
                "res_blk.values": [
                    2416
                ],
                "res_blk.ndim": [
                    2417
                ],
                "IntBlock": [
                    2994,
                    2420
                ],
                "_TD_DTYPE": [
                    2428
                ],
                "conversion.ensure_timedelta64ns": [
                    2429
                ],
                "TimedeltaArray": [
                    2437,
                    2430
                ],
                "Timedelta": [
                    2490,
                    2463
                ],
                "rvalues": [
                    2489,
                    2482,
                    2493,
                    2479
                ],
                "np.empty": [
                    2479
                ],
                "imask": [
                    2489,
                    2490,
                    2483
                ],
                "ravel": [
                    2483
                ],
                "rvalues.flat": [
                    2489
                ],
                "_repr_base": [
                    2490
                ],
                "to_replace_values": [
                    2520,
                    2519
                ],
                "np.atleast_1d": [
                    2519
                ],
                "np.can_cast": [
                    2520
                ],
                "replace": [
                    2522,
                    2747,
                    2947,
                    2631
                ],
                "values.dtype.type": [
                    2538
                ],
                "lib.is_bool_array": [
                    2548
                ],
                "val.shape": [
                    2566
                ],
                "soft_convert_objects": [
                    2567
                ],
                "val.ravel": [
                    2568
                ],
                "numeric": [
                    2570
                ],
                "to_rep_is_list": [
                    2616,
                    2613,
                    2655,
                    2615
                ],
                "value_is_list": [
                    2616,
                    2614,
                    2615
                ],
                "both_lists": [
                    2639,
                    2615
                ],
                "either_list": [
                    2616,
                    2621,
                    2630
                ],
                "is_re": [
                    2767,
                    2621,
                    2758,
                    2735
                ],
                "to_rep": [
                    2640,
                    2660,
                    2644,
                    2656
                ],
                "b._replace_single": [
                    2659,
                    2643
                ],
                "to_rep_re": [
                    2722,
                    2716,
                    2732
                ],
                "is_re_compilable": [
                    2716,
                    2719
                ],
                "regex_re": [
                    2729,
                    2722,
                    2732,
                    2719
                ],
                "pattern": [
                    2736,
                    2738,
                    2742
                ],
                "to_replace.pattern": [
                    2736
                ],
                "rx": [
                    2758,
                    2759,
                    2767,
                    2768,
                    2743
                ],
                "re.compile": [
                    2743
                ],
                "re": [
                    2743
                ],
                "rx.search": [
                    2759
                ],
                "rx.sub": [
                    2768
                ],
                "np.vectorize": [
                    2772
                ],
                "re_replacer": [
                    2772
                ],
                "filt": [
                    2777,
                    2780,
                    2782,
                    2775
                ],
                "nonzero": [
                    2777
                ],
                "block.convert": [
                    2787
                ],
                "_replace_coerce": [
                    2817
                ],
                "concat_categorical": [
                    2836
                ],
                "np.object_": [
                    2853
                ],
                "self.values._internal_get_values": [
                    2859
                ],
                "object_msg": [
                    2921,
                    2908
                ],
                "where": [
                    2922,
                    2919
                ],
                "result.values.replace": [
                    2939
                ],
                "result.values": [
                    2946,
                    2939
                ],
                "result.convert": [
                    2941
                ],
                "result.values.add_categories": [
                    2946
                ],
                "CategoricalBlock": [
                    2976,
                    2947
                ],
                "vtype": [
                    2977,
                    2986,
                    2988,
                    2989,
                    2991,
                    2993,
                    2970
                ],
                "cls": [
                    2976,
                    2979,
                    2981,
                    2983,
                    2985,
                    2987,
                    2990,
                    2992,
                    2994,
                    2996,
                    2998,
                    2999,
                    2974
                ],
                "DatetimeTZBlock": [
                    2981,
                    3023
                ],
                "is_interval_dtype": [
                    2982
                ],
                "is_period_dtype": [
                    2982
                ],
                "ObjectValuesExtensionBlock": [
                    2983
                ],
                "FloatBlock": [
                    2987
                ],
                "ComplexBlock": [
                    2992
                ],
                "BoolBlock": [
                    2996
                ],
                "ABCPandasArray": [
                    3005
                ],
                "values.to_numpy": [
                    3006
                ],
                "PandasDtype": [
                    3010
                ],
                "dtype.numpy_dtype": [
                    3011
                ],
                "fastpath": [
                    3013
                ],
                "klass": [
                    3019,
                    3028,
                    3021,
                    3023
                ],
                "get_block_type": [
                    3021
                ],
                "DatetimeArray._simple_new": [
                    3026
                ],
                "blocks.extend": [
                    3043,
                    3047
                ],
                "blocks.append": [
                    3049,
                    3045
                ],
                "BlockManager": [
                    3046
                ],
                "result.blocks": [
                    3047
                ],
                "b.dtype": [
                    3074
                ],
                "b.mgr_locs.as_array": [
                    3080
                ],
                "b.mgr_locs": [
                    3080
                ],
                "np.vstack": [
                    3081
                ],
                "b.values": [
                    3081
                ],
                "argsort": [
                    3083,
                    3084,
                    3085
                ],
                "np.argsort": [
                    3083
                ],
                "arr": [
                    3108,
                    3109,
                    3110,
                    3111,
                    3112
                ],
                "ABCSeries": [
                    3108
                ],
                "arr._values": [
                    3109
                ],
                "ABCExtensionArray": [
                    3110
                ],
                "arr.reshape": [
                    3111
                ],
                "nn": [
                    3168,
                    3146,
                    3153,
                    3155,
                    3166
                ],
                "_isna_compat": [
                    3153
                ],
                "nn.dtype": [
                    3155
                ],
                "v.dtype": [
                    3184,
                    3166,
                    3190,
                    3158
                ],
                "warnings.catch_warnings": [
                    3164
                ],
                "warnings.simplefilter": [
                    3165
                ],
                "np.ComplexWarning": [
                    3165
                ],
                "nn_at": [
                    3168,
                    3171,
                    3166
                ],
                "nn.astype": [
                    3166
                ],
                "comp": [
                    3168,
                    3169
                ],
                "comp.all": [
                    3169
                ],
                "v.dtype.kind": [
                    3184
                ],
                "n.dtype.kind": [
                    3184
                ],
                "_putmask_preserve": [
                    3185,
                    3195
                ],
                "v._internal_get_values": [
                    3191
                ],
                "v.astype": [
                    3193
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    84
                ],
                "__slots__": [
                    2241,
                    1986,
                    2500,
                    2117,
                    2533,
                    1996,
                    2060,
                    2076,
                    92,
                    2832,
                    2421,
                    1980
                ],
                "is_numeric": [
                    2424,
                    93,
                    1981
                ],
                "is_float": [
                    1997,
                    94
                ],
                "is_integer": [
                    2088,
                    2077,
                    2453,
                    95
                ],
                "is_complex": [
                    96,
                    2061
                ],
                "is_datetime": [
                    97,
                    2118
                ],
                "is_datetimetz": [
                    2242,
                    98
                ],
                "is_timedelta": [
                    99,
                    2422
                ],
                "is_bool": [
                    100,
                    2501
                ],
                "is_object": [
                    101,
                    2534
                ],
                "is_categorical": [
                    2833,
                    102,
                    2975
                ],
                "is_extension": [
                    2243,
                    1692,
                    103
                ],
                "_can_hold_na": [
                    2502,
                    2535,
                    104,
                    2835,
                    2078,
                    2423,
                    1982
                ],
                "_can_consolidate": [
                    105,
                    1562,
                    3071
                ],
                "_verify_integrity": [
                    2834,
                    106,
                    1563
                ],
                "_validate_ndim": [
                    107,
                    1564
                ],
                "_ftype": [
                    108
                ],
                "_concatenator": [
                    2836,
                    109
                ],
                "np.concatenate": [
                    3080,
                    109
                ],
                "np": [
                    2056,
                    3080,
                    3081,
                    3083,
                    2575,
                    2066,
                    2068,
                    2069,
                    2072,
                    2084,
                    2085,
                    2605,
                    2103,
                    3141,
                    3165,
                    2150,
                    3174,
                    1640,
                    618,
                    109,
                    673,
                    2213,
                    2217,
                    1207,
                    2235,
                    2247,
                    2772,
                    1238,
                    224,
                    742,
                    1771,
                    1777,
                    2305,
                    2318,
                    1295,
                    1296,
                    2853,
                    817,
                    2869,
                    2370,
                    851,
                    2390,
                    1367,
                    1372,
                    373,
                    2425,
                    380,
                    2432,
                    1410,
                    2442,
                    1933,
                    2445,
                    1949,
                    2977,
                    2468,
                    2986,
                    939,
                    2988,
                    2989,
                    2479,
                    2991,
                    2993,
                    2995,
                    951,
                    2489,
                    443,
                    2496,
                    3008,
                    962,
                    968,
                    1992,
                    2507,
                    2508,
                    2511,
                    1488,
                    1489,
                    2002,
                    2003,
                    1493,
                    2006,
                    2519,
                    2520,
                    1496,
                    2009,
                    987,
                    988,
                    990,
                    1504,
                    1513,
                    1514,
                    2539,
                    2036
                ],
                "self.ndim": [
                    2307,
                    265,
                    396,
                    1298,
                    2579,
                    1812,
                    2582,
                    2586,
                    1181,
                    167,
                    938,
                    300,
                    684,
                    812,
                    1842,
                    1589,
                    1849,
                    1595,
                    1340,
                    321,
                    2369,
                    1475,
                    2371,
                    455,
                    2889,
                    1355,
                    460,
                    2893,
                    974,
                    1879,
                    2396,
                    350,
                    1772,
                    621,
                    112,
                    116,
                    1400,
                    252,
                    383
                ],
                "self": [
                    2056,
                    2086,
                    2091,
                    2110,
                    2111,
                    2112,
                    2113,
                    2121,
                    112,
                    113,
                    114,
                    2162,
                    116,
                    2166,
                    119,
                    2174,
                    2176,
                    2177,
                    2185,
                    2186,
                    2189,
                    146,
                    2196,
                    2197,
                    2209,
                    163,
                    167,
                    172,
                    177,
                    2232,
                    2235,
                    196,
                    202,
                    210,
                    211,
                    217,
                    2266,
                    2267,
                    220,
                    228,
                    2278,
                    235,
                    242,
                    250,
                    252,
                    2301,
                    2307,
                    263,
                    265,
                    267,
                    2318,
                    272,
                    273,
                    276,
                    2325,
                    2326,
                    2327,
                    281,
                    284,
                    286,
                    292,
                    295,
                    298,
                    299,
                    300,
                    304,
                    2353,
                    2358,
                    317,
                    319,
                    321,
                    2369,
                    2371,
                    324,
                    328,
                    2377,
                    332,
                    2381,
                    336,
                    337,
                    339,
                    340,
                    2389,
                    343,
                    2394,
                    2396,
                    349,
                    350,
                    352,
                    2402,
                    2404,
                    357,
                    2407,
                    2410,
                    2412,
                    367,
                    2416,
                    2417,
                    373,
                    374,
                    381,
                    383,
                    393,
                    396,
                    398,
                    2447,
                    400,
                    402,
                    404,
                    406,
                    407,
                    411,
                    415,
                    423,
                    2474,
                    443,
                    445,
                    2496,
                    455,
                    456,
                    460,
                    465,
                    470,
                    2521,
                    490,
                    2548,
                    501,
                    503,
                    506,
                    513,
                    517,
                    2579,
                    532,
                    2582,
                    535,
                    2583,
                    2585,
                    2586,
                    570,
                    2619,
                    572,
                    574,
                    2622,
                    576,
                    581,
                    583,
                    584,
                    587,
                    589,
                    594,
                    595,
                    599,
                    602,
                    613,
                    619,
                    621,
                    623,
                    624,
                    2671,
                    630,
                    631,
                    651,
                    655,
                    663,
                    669,
                    681,
                    684,
                    699,
                    702,
                    703,
                    2751,
                    705,
                    710,
                    711,
                    716,
                    2772,
                    727,
                    2777,
                    731,
                    2785,
                    741,
                    750,
                    755,
                    756,
                    759,
                    769,
                    772,
                    775,
                    2828,
                    790,
                    2859,
                    812,
                    816,
                    2864,
                    820,
                    821,
                    2888,
                    841,
                    842,
                    2889,
                    2893,
                    854,
                    2922,
                    2937,
                    892,
                    916,
                    922,
                    924,
                    926,
                    938,
                    939,
                    974,
                    1001,
                    1005,
                    1010,
                    1024,
                    1025,
                    1027,
                    1029,
                    1031,
                    1035,
                    1038,
                    1046,
                    1048,
                    1051,
                    1055,
                    1059,
                    1062,
                    1065,
                    1066,
                    1070,
                    1074,
                    1076,
                    1099,
                    1101,
                    1103,
                    1112,
                    1115,
                    1127,
                    1130,
                    1161,
                    1163,
                    1165,
                    1167,
                    1170,
                    1178,
                    1181,
                    1182,
                    1201,
                    1204,
                    1205,
                    1206,
                    1210,
                    1240,
                    1241,
                    1253,
                    1256,
                    1270,
                    1272,
                    1273,
                    1275,
                    1279,
                    1280,
                    1287,
                    1298,
                    1309,
                    1340,
                    1342,
                    1355,
                    1365,
                    1370,
                    1389,
                    1398,
                    1400,
                    1405,
                    1416,
                    1417,
                    1423,
                    1425,
                    1448,
                    1475,
                    1477,
                    1489,
                    1498,
                    1545,
                    1546,
                    1548,
                    1556,
                    1589,
                    1590,
                    1591,
                    1595,
                    1598,
                    1602,
                    1603,
                    1606,
                    1607,
                    1610,
                    1614,
                    1638,
                    1646,
                    1695,
                    1718,
                    1723,
                    1728,
                    1737,
                    1765,
                    1766,
                    1767,
                    1771,
                    1772,
                    1777,
                    1781,
                    1808,
                    1812,
                    1814,
                    1816,
                    1834,
                    1840,
                    1842,
                    1845,
                    1848,
                    1849,
                    1857,
                    1858,
                    1860,
                    1876,
                    1877,
                    1878,
                    1879,
                    1910,
                    1912,
                    1918,
                    1920,
                    1932,
                    1933,
                    1936,
                    1940,
                    1953,
                    1958,
                    1959,
                    1976,
                    1989,
                    1991,
                    2023
                ],
                "self._check_ndim": [
                    112
                ],
                "values": [
                    512,
                    2567,
                    2575,
                    2577,
                    2039,
                    2579,
                    2580,
                    2585,
                    2586,
                    1585,
                    3063,
                    2110,
                    2111,
                    2121,
                    2122,
                    589,
                    1614,
                    595,
                    599,
                    602,
                    605,
                    607,
                    2144,
                    2145,
                    2147,
                    2148,
                    1638,
                    2150,
                    2151,
                    618,
                    619,
                    621,
                    1133,
                    112,
                    114,
                    2162,
                    2163,
                    2164,
                    2165,
                    2166,
                    2873,
                    1167,
                    144,
                    146,
                    148,
                    1172,
                    1173,
                    663,
                    2196,
                    2200,
                    666,
                    667,
                    1181,
                    2205,
                    671,
                    1695,
                    673,
                    1696,
                    675,
                    676,
                    681,
                    683,
                    684,
                    1713,
                    2230,
                    2232,
                    2266,
                    2267,
                    2269,
                    2272,
                    741,
                    742,
                    1253,
                    746,
                    1771,
                    748,
                    1772,
                    1773,
                    1263,
                    1774,
                    1781,
                    1783,
                    1784,
                    1787,
                    252,
                    1788,
                    2301,
                    2303,
                    2305,
                    1794,
                    2311,
                    2312,
                    267,
                    2840,
                    2841,
                    2842,
                    1840,
                    1841,
                    1842,
                    2353,
                    820,
                    1845,
                    1846,
                    2864,
                    2867,
                    825,
                    1849,
                    2868,
                    2869,
                    2870,
                    1342,
                    2366,
                    2367,
                    1345,
                    1857,
                    1859,
                    2370,
                    2371,
                    840,
                    1353,
                    2888,
                    1355,
                    2893,
                    856,
                    859,
                    1372,
                    349,
                    862,
                    1373,
                    1375,
                    353,
                    1379,
                    871,
                    1384,
                    877,
                    878,
                    367,
                    880,
                    882,
                    888,
                    891,
                    892,
                    2428,
                    2429,
                    2430,
                    2431,
                    2432,
                    2433,
                    2969,
                    2975,
                    2978,
                    2980,
                    2984,
                    2474,
                    2476,
                    2477,
                    2479,
                    2490,
                    3005,
                    3006,
                    3008,
                    1477,
                    1479,
                    3020,
                    3021,
                    3023,
                    1489,
                    1490,
                    3026,
                    3028,
                    1493,
                    1495,
                    1500,
                    2023,
                    2025,
                    2538,
                    2539,
                    2541,
                    2031,
                    3055,
                    3057,
                    2034,
                    3058,
                    2036,
                    2038,
                    503,
                    3062,
                    2044
                ],
                "ndim": [
                    2433,
                    264,
                    265,
                    267,
                    143,
                    144,
                    146,
                    148,
                    150,
                    2842,
                    1696,
                    1580,
                    1582,
                    1584,
                    1585,
                    3007,
                    2122,
                    3028,
                    1513,
                    1514,
                    2541,
                    3055,
                    112
                ],
                "self.mgr_locs": [
                    263,
                    1417,
                    1936,
                    1814,
                    2586,
                    284,
                    295,
                    298,
                    2358,
                    1591,
                    1849,
                    317,
                    1860,
                    465,
                    470,
                    1878,
                    2777,
                    2396,
                    621,
                    750,
                    113,
                    116,
                    374,
                    119,
                    1270,
                    250
                ],
                "placement": [
                    2433,
                    262,
                    263,
                    267,
                    2842,
                    1696,
                    1576,
                    1577,
                    1581,
                    1585,
                    1841,
                    1842,
                    2367,
                    2371,
                    2372,
                    2122,
                    2893,
                    3028,
                    353,
                    2541,
                    113,
                    249,
                    250,
                    252
                ],
                "self.values": [
                    2585,
                    1590,
                    1591,
                    572,
                    574,
                    2110,
                    576,
                    2113,
                    1602,
                    1603,
                    2112,
                    1607,
                    589,
                    1614,
                    1638,
                    114,
                    2162,
                    116,
                    119,
                    655,
                    1167,
                    1170,
                    2196,
                    2197,
                    2209,
                    681,
                    172,
                    1201,
                    1718,
                    2232,
                    1723,
                    2235,
                    2751,
                    196,
                    1737,
                    202,
                    210,
                    211,
                    220,
                    741,
                    1253,
                    1765,
                    1766,
                    2278,
                    1771,
                    1777,
                    1781,
                    2301,
                    1279,
                    1287,
                    2318,
                    1808,
                    2326,
                    2327,
                    292,
                    295,
                    1834,
                    299,
                    300,
                    2859,
                    304,
                    2353,
                    2864,
                    820,
                    1845,
                    1342,
                    1857,
                    328,
                    332,
                    336,
                    1877,
                    2394,
                    2404,
                    357,
                    2407,
                    367,
                    373,
                    1912,
                    381,
                    1920,
                    393,
                    1933,
                    1425,
                    916,
                    1940,
                    1959,
                    1448,
                    2474,
                    1976,
                    445,
                    2496,
                    1991,
                    2023,
                    2548,
                    503
                ],
                "self._validate_ndim": [
                    321,
                    146,
                    116
                ],
                "values.ndim": [
                    1353,
                    1355,
                    1772,
                    3055,
                    144,
                    146,
                    148,
                    1500
                ],
                "msg": [
                    563,
                    147,
                    148,
                    567
                ],
                "msg.format": [
                    148
                ],
                "self._can_consolidate": [
                    163
                ],
                "self.dtype.name": [
                    163,
                    630
                ],
                "self.dtype": [
                    1024,
                    2176,
                    2177,
                    1416,
                    2056,
                    2186,
                    2189,
                    1423,
                    2447,
                    276,
                    1178,
                    1051,
                    286,
                    163,
                    2086,
                    2091,
                    581,
                    1989,
                    841,
                    337,
                    339,
                    2772,
                    2402,
                    2416,
                    242,
                    630,
                    1910,
                    1272,
                    1918
                ],
                "self.values.base": [
                    172
                ],
                "self.is_datetime": [
                    177,
                    490,
                    1038,
                    1046
                ],
                "self.is_timedelta": [
                    1062,
                    1065,
                    490,
                    1099,
                    177
                ],
                "dtype": [
                    256,
                    1024,
                    3073,
                    1027,
                    3076,
                    1032,
                    267,
                    1933,
                    655,
                    1039,
                    1040,
                    658,
                    659,
                    1045,
                    535,
                    2969,
                    2970,
                    1052,
                    2972,
                    1062,
                    2982,
                    1065,
                    562,
                    1074,
                    1918,
                    565,
                    2995,
                    184,
                    570,
                    187,
                    189,
                    574,
                    2109,
                    576,
                    832,
                    578,
                    2302,
                    836,
                    581,
                    3010,
                    3011,
                    840,
                    841,
                    842,
                    3193,
                    3020,
                    589,
                    3021,
                    591,
                    209,
                    337,
                    339,
                    340,
                    3026,
                    855,
                    856,
                    217,
                    602,
                    607,
                    993,
                    996,
                    2158,
                    2161,
                    3188,
                    2165,
                    3190,
                    3191,
                    2169,
                    1916,
                    1022
                ],
                "Categorical": [
                    184,
                    2841,
                    576,
                    2846
                ],
                "CategoricalDtype": [
                    184
                ],
                "is_categorical_dtype": [
                    572,
                    189
                ],
                "is_object_dtype": [
                    769,
                    1027,
                    209,
                    3190,
                    727,
                    2109,
                    2302
                ],
                "self.values.astype": [
                    2496,
                    589,
                    210,
                    1976,
                    2394,
                    2235,
                    574
                ],
                "self.get_values": [
                    1477,
                    599,
                    663,
                    217,
                    602
                ],
                "self.values.view": [
                    2404,
                    220,
                    2197,
                    2407
                ],
                "np.nan": [
                    224,
                    817
                ],
                "self._mgr_locs": [
                    235,
                    228
                ],
                "new_mgr_locs": [
                    3080,
                    3083,
                    3085,
                    3087,
                    1812,
                    1813,
                    1814,
                    1816,
                    312,
                    317,
                    324,
                    232,
                    233,
                    235,
                    1268,
                    1269,
                    1270,
                    1273,
                    1275
                ],
                "libinternals.BlockPlacement": [
                    232,
                    233,
                    298,
                    1576,
                    1577,
                    1866
                ],
                "libinternals": [
                    232,
                    233,
                    298,
                    1576,
                    1577,
                    1866
                ],
                "mgr_locs.setter": [
                    230
                ],
                "mgr_locs": [
                    230
                ],
                "make_block": [
                    266,
                    1514,
                    2892,
                    621,
                    3087,
                    1457,
                    2586,
                    2395,
                    252
                ],
                "warnings.warn": [
                    2921,
                    258,
                    3015,
                    2455
                ],
                "warnings": [
                    258,
                    3015,
                    2921,
                    2455,
                    3164,
                    3165
                ],
                "self.__class__": [
                    272,
                    267
                ],
                "name": [
                    272,
                    283,
                    276
                ],
                "pprint_thing": [
                    272,
                    281,
                    284
                ],
                "self.__class__.__name__": [
                    272
                ],
                "self._is_single_block": [
                    273,
                    506
                ],
                "result": [
                    1920,
                    385,
                    2946,
                    2947,
                    1415,
                    1927,
                    1932,
                    1936,
                    275,
                    282,
                    2207,
                    289,
                    2213,
                    2111,
                    2112,
                    2939,
                    3041,
                    2941,
                    1488,
                    2643,
                    1494,
                    2943,
                    2651,
                    3046,
                    1504,
                    1505,
                    3040,
                    1379,
                    1507,
                    1509,
                    1510,
                    1511,
                    1384,
                    1513,
                    1514,
                    2659,
                    2667,
                    2919,
                    2922,
                    2925,
                    3047,
                    3049,
                    381,
                    2937,
                    1403,
                    1405,
                    382,
                    383
                ],
                "shape": [
                    2566,
                    957,
                    3056,
                    2577,
                    3057,
                    3062,
                    281,
                    285
                ],
                "join": [
                    281
                ],
                "s": [
                    2758,
                    2759,
                    2761,
                    2767,
                    2768,
                    2770,
                    281
                ],
                "self.shape": [
                    2402,
                    1989,
                    2410,
                    619,
                    939,
                    1423,
                    624,
                    631,
                    281,
                    443
                ],
                "self.mgr_locs.indexer": [
                    284,
                    2358,
                    295
                ],
                "state": [
                    298,
                    299
                ],
                "self.values.ndim": [
                    300
                ],
                "slicer": [
                    2322,
                    2323,
                    2199,
                    2200,
                    2201,
                    665,
                    666,
                    2327,
                    1829,
                    1830,
                    1832,
                    1834,
                    2475,
                    2476,
                    304,
                    2865,
                    2867,
                    313,
                    314,
                    316,
                    319,
                    2024,
                    2025,
                    1782,
                    1783,
                    1791
                ],
                "axis0_slicer": [
                    314,
                    316,
                    317
                ],
                "new_values": [
                    1280,
                    1287,
                    3081,
                    1290,
                    1675,
                    1292,
                    1293,
                    1678,
                    1295,
                    1296,
                    1808,
                    3084,
                    3087,
                    916,
                    1303,
                    1816,
                    1307,
                    1309,
                    1953,
                    930,
                    933,
                    1962,
                    939,
                    940,
                    1451,
                    1454,
                    1457,
                    2353,
                    2356,
                    2357,
                    2358,
                    445,
                    319,
                    2751,
                    321,
                    962,
                    324,
                    970,
                    462,
                    464,
                    472,
                    2780,
                    2782,
                    2785,
                    1638,
                    1643,
                    1645,
                    1262,
                    1646,
                    1008,
                    1010,
                    1272,
                    1273,
                    1275,
                    1279
                ],
                "self._slice": [
                    319
                ],
                "new_values.ndim": [
                    321,
                    970,
                    1293
                ],
                "self.make_block_same_class": [
                    352,
                    1858,
                    324,
                    1958,
                    684,
                    1936,
                    1816,
                    1842,
                    1848,
                    1876,
                    2417,
                    1240,
                    1275,
                    1181
                ],
                "self.values.shape": [
                    328,
                    2112
                ],
                "self.values.dtype": [
                    1737,
                    1723,
                    332,
                    655
                ],
                "self.dtype.subtype": [
                    337
                ],
                "self._ftype": [
                    340
                ],
                "_merge_blocks": [
                    343
                ],
                "other": [
                    1922,
                    1923,
                    1925,
                    1933,
                    1423,
                    1425,
                    1059,
                    1070,
                    1343,
                    1347,
                    1989,
                    1991,
                    1352,
                    1353,
                    1354,
                    1366,
                    343,
                    1367,
                    1370,
                    1372,
                    1373,
                    1375,
                    2402,
                    1892,
                    2404,
                    1895,
                    1384,
                    1896,
                    1898,
                    2919,
                    2923,
                    1389,
                    1906,
                    1910,
                    1022
                ],
                "self._concatenator": [
                    2888,
                    349
                ],
                "blk.values": [
                    1840,
                    2889,
                    350
                ],
                "blk": [
                    2889,
                    2412,
                    2413,
                    1840,
                    350
                ],
                "to_concat": [
                    350,
                    2372,
                    2889,
                    1840,
                    2365,
                    2366
                ],
                "i": [
                    1410,
                    357,
                    470,
                    471,
                    472,
                    476
                ],
                "locs": [
                    2232,
                    1613,
                    367
                ],
                "np.delete": [
                    373
                ],
                "loc": [
                    1602,
                    1603,
                    2323,
                    373,
                    374,
                    2326,
                    1596
                ],
                "self.mgr_locs.delete": [
                    374
                ],
                "np.errstate": [
                    380
                ],
                "func": [
                    1384,
                    381,
                    1238
                ],
                "kwargs": [
                    2464,
                    1125,
                    1234,
                    1141,
                    790,
                    535,
                    2169,
                    381,
                    1791
                ],
                "Block": [
                    450,
                    2116,
                    2532,
                    1681,
                    1940,
                    1979,
                    382
                ],
                "self.make_block": [
                    576,
                    513,
                    1280,
                    2785,
                    456,
                    1417,
                    2412,
                    1646,
                    1010,
                    1405,
                    2166,
                    1273,
                    892,
                    1309,
                    574,
                    383
                ],
                "_block_shape": [
                    455,
                    2579,
                    383
                ],
                "inplace": [
                    1156,
                    2820,
                    2948,
                    391,
                    1162,
                    779,
                    1546,
                    399,
                    1167,
                    785,
                    1551,
                    916,
                    406,
                    2713,
                    411,
                    421,
                    423,
                    1200,
                    1201,
                    1845,
                    694,
                    2748,
                    701,
                    2751,
                    1857,
                    2625,
                    709,
                    1094,
                    2378,
                    2634,
                    1100,
                    2382,
                    719,
                    464,
                    2518,
                    2646,
                    1112,
                    2525,
                    478,
                    735,
                    1118,
                    1634,
                    1638,
                    1127,
                    2662,
                    1001,
                    1004,
                    754,
                    1139,
                    2674,
                    759,
                    2936,
                    2937,
                    2941
                ],
                "validate_bool_kwarg": [
                    1634,
                    1156,
                    1094,
                    391,
                    1200,
                    694,
                    2518,
                    2936,
                    2713
                ],
                "mask": [
                    2816,
                    1410,
                    1413,
                    1543,
                    2823,
                    393,
                    1546,
                    1675,
                    396,
                    1677,
                    1678,
                    1554,
                    406,
                    919,
                    410,
                    667,
                    1953,
                    675,
                    1451,
                    1964,
                    1453,
                    1454,
                    1455,
                    2477,
                    1458,
                    2482,
                    2483,
                    2868,
                    2870,
                    951,
                    442,
                    443,
                    956,
                    957,
                    962,
                    965,
                    3141,
                    967,
                    3146,
                    461,
                    462,
                    1493,
                    471,
                    1499,
                    2779,
                    2782,
                    3171,
                    998,
                    1640,
                    1001,
                    1641,
                    1643,
                    748,
                    1645,
                    3178,
                    751,
                    2031,
                    753,
                    3180,
                    2038,
                    759,
                    1784,
                    1788
                ],
                "isna": [
                    2945,
                    835,
                    2755,
                    393,
                    2477,
                    2031,
                    1906,
                    2868,
                    1493,
                    1784,
                    922,
                    667
                ],
                "limit": [
                    1859,
                    421,
                    394,
                    395,
                    396,
                    1229,
                    2378,
                    1135,
                    2382,
                    1846,
                    1176,
                    1119
                ],
                "libalgos._validate_limit": [
                    395
                ],
                "libalgos": [
                    395
                ],
                "mask.cumsum": [
                    396
                ],
                "self._can_hold_na": [
                    1400,
                    1161,
                    398
                ],
                "self.copy": [
                    613,
                    1638,
                    583,
                    711,
                    651,
                    1165,
                    1103,
                    402,
                    756,
                    790,
                    2937,
                    411,
                    703
                ],
                "self._can_hold_element": [
                    705,
                    772,
                    2377,
                    404,
                    821,
                    854,
                    2389,
                    1370,
                    699,
                    926
                ],
                "value": [
                    2945,
                    2946,
                    2819,
                    772,
                    2948,
                    2056,
                    1545,
                    778,
                    1546,
                    1550,
                    404,
                    2453,
                    406,
                    2072,
                    415,
                    2463,
                    2464,
                    2468,
                    421,
                    2469,
                    2217,
                    2218,
                    2091,
                    2219,
                    2604,
                    815,
                    2607,
                    817,
                    821,
                    1846,
                    2614,
                    824,
                    825,
                    2748,
                    831,
                    832,
                    2624,
                    835,
                    836,
                    2755,
                    2759,
                    2377,
                    1610,
                    843,
                    2378,
                    2633,
                    718,
                    846,
                    2382,
                    849,
                    2511,
                    851,
                    2512,
                    2389,
                    854,
                    2640,
                    2392,
                    2768,
                    2524,
                    734,
                    862,
                    2398,
                    1765,
                    1766,
                    871,
                    2661,
                    880,
                    2673,
                    759,
                    888,
                    2939
                ],
                "blocks": [
                    3074,
                    3076,
                    3080,
                    3081,
                    785,
                    786,
                    3090,
                    406,
                    407,
                    2583,
                    2586,
                    2588,
                    1181,
                    1182,
                    2593,
                    2596,
                    1957,
                    1964,
                    1457,
                    1458,
                    2619,
                    2642,
                    1240,
                    1241,
                    2652,
                    3038,
                    3039,
                    2658,
                    3043,
                    3045,
                    3047,
                    3049,
                    3050,
                    492,
                    2668,
                    494,
                    1390,
                    1398,
                    759,
                    3068,
                    3069
                ],
                "self.putmask": [
                    1546,
                    406,
                    759
                ],
                "self._maybe_downcast": [
                    1241,
                    1398,
                    1182,
                    407
                ],
                "downcast": [
                    2592,
                    1122,
                    489,
                    2378,
                    494,
                    2382,
                    1140,
                    407,
                    1241,
                    1182
                ],
                "mask.any": [
                    2816,
                    965,
                    1543,
                    461,
                    1453,
                    1677,
                    753,
                    410
                ],
                "block": [
                    2817,
                    775,
                    776,
                    2826,
                    2827,
                    415,
                    420,
                    421,
                    451,
                    456,
                    457,
                    465,
                    466,
                    731,
                    732,
                    480,
                    481,
                    2785,
                    2787,
                    2788,
                    1389,
                    1390,
                    892,
                    893
                ],
                "self.coerce_to_target_dtype": [
                    1545,
                    1389,
                    415
                ],
                "idx": [
                    418,
                    988,
                    420,
                    982
                ],
                "block.getitem_block": [
                    420
                ],
                "block.fillna": [
                    421
                ],
                "self.split_and_operate": [
                    1001,
                    532,
                    2583,
                    423
                ],
                "f": [
                    2780,
                    423,
                    1001,
                    462,
                    532,
                    2772,
                    2583,
                    2585,
                    476,
                    2782
                ],
                "np.broadcast_to": [
                    443
                ],
                "nv": [
                    512,
                    513,
                    448,
                    449,
                    450,
                    451,
                    455,
                    456,
                    462,
                    464,
                    465,
                    476,
                    478,
                    480,
                    3170,
                    3171,
                    3172,
                    998,
                    999,
                    3178,
                    3180,
                    3181
                ],
                "ref_loc": [
                    456,
                    480,
                    470
                ],
                "new_values.copy": [
                    464
                ],
                "make_a_block": [
                    480,
                    465
                ],
                "new_blocks": [
                    481,
                    483,
                    1001,
                    1002,
                    469
                ],
                "m": [
                    1125,
                    1413,
                    1414,
                    1415,
                    1417,
                    1131,
                    1116,
                    1107,
                    1109,
                    1111,
                    471,
                    475,
                    476
                ],
                "v": [
                    3193,
                    3170,
                    2640,
                    3153,
                    3184,
                    3185,
                    3191,
                    2645,
                    3158,
                    3190,
                    472,
                    3166,
                    3195,
                    476,
                    478
                ],
                "m.any": [
                    475,
                    1414
                ],
                "v.copy": [
                    3170,
                    478
                ],
                "new_blocks.append": [
                    481
                ],
                "List": [
                    1891,
                    485,
                    1319,
                    1868,
                    2904,
                    2329,
                    1277,
                    2590
                ],
                "self.is_float": [
                    490,
                    1204,
                    1031
                ],
                "_extend_blocks": [
                    2667,
                    2651,
                    2596,
                    494
                ],
                "b.downcast": [
                    494
                ],
                "b": [
                    2658,
                    2659,
                    2596,
                    3074,
                    3080,
                    3081,
                    842,
                    843,
                    2826,
                    494,
                    785,
                    2642,
                    2643
                ],
                "dtypes": [
                    512,
                    516,
                    519,
                    523,
                    500,
                    509,
                    510
                ],
                "maybe_downcast_to_dtype": [
                    512,
                    529
                ],
                "val": [
                    998,
                    2566,
                    2568,
                    529,
                    530,
                    2490
                ],
                "self._astype": [
                    535
                ],
                "copy": [
                    613,
                    582,
                    651,
                    2573,
                    629,
                    535,
                    574
                ],
                "errors": [
                    611,
                    2919,
                    555,
                    2923,
                    558,
                    1394,
                    535,
                    1339
                ],
                "errors_legal_values": [
                    553,
                    555,
                    558
                ],
                "invalid_arg": [
                    560,
                    556
                ],
                "inspect.isclass": [
                    562
                ],
                "inspect": [
                    562
                ],
                "ExtensionDtype": [
                    562
                ],
                "dtype.__name__": [
                    565
                ],
                "self.is_categorical_astype": [
                    570
                ],
                "pandas_dtype": [
                    578,
                    2158
                ],
                "is_dtype_equal": [
                    1024,
                    2176,
                    581,
                    841,
                    1272
                ],
                "self.is_extension": [
                    587
                ],
                "dtype.type": [
                    2970,
                    591
                ],
                "self.is_datelike": [
                    594
                ],
                "self.to_native_types": [
                    595
                ],
                "vals1d": [
                    605,
                    607
                ],
                "values.ravel": [
                    2490,
                    605
                ],
                "astype_nansafe": [
                    607
                ],
                "newb": [
                    613,
                    614,
                    621,
                    623,
                    624,
                    632,
                    633,
                    2395,
                    636,
                    2398
                ],
                "np.ndarray": [
                    2432,
                    742,
                    2150,
                    968,
                    1640,
                    618,
                    2575,
                    2390,
                    987,
                    1372
                ],
                "values.reshape": [
                    1794,
                    2311,
                    619,
                    1773,
                    2577,
                    3062,
                    2873
                ],
                "newb.is_numeric": [
                    623
                ],
                "self.is_numeric": [
                    816,
                    623
                ],
                "newb.shape": [
                    624,
                    633
                ],
                "newb.dtype.name": [
                    632
                ],
                "newb.dtype": [
                    632
                ],
                "Any": [
                    2080,
                    2598,
                    2439,
                    2504,
                    1867,
                    653,
                    2063,
                    1999,
                    1818,
                    2171
                ],
                "self.values.dtype.type": [
                    655
                ],
                "tipo": [
                    2176,
                    2181,
                    2440,
                    2441,
                    2442,
                    656,
                    657,
                    658,
                    2064,
                    2065,
                    2066,
                    2081,
                    2082,
                    2084,
                    2085,
                    2086,
                    2505,
                    2506,
                    2507,
                    2000,
                    2001,
                    2002,
                    2003,
                    2172,
                    2173
                ],
                "maybe_infer_dtype_type": [
                    2081,
                    2440,
                    2505,
                    656,
                    2064,
                    2000,
                    2172
                ],
                "element": [
                    2177,
                    2182,
                    2184,
                    2440,
                    2186,
                    2187,
                    2443,
                    2189,
                    2445,
                    2447,
                    656,
                    2064,
                    659,
                    2068,
                    2069,
                    2081,
                    2088,
                    2505,
                    2508,
                    2000,
                    2006,
                    2008,
                    2172
                ],
                "tipo.type": [
                    2084,
                    2085,
                    2442,
                    2507,
                    2066,
                    2002,
                    658,
                    2003
                ],
                "self.is_object": [
                    922,
                    669
                ],
                "quoting": [
                    2048,
                    2033,
                    669,
                    1791
                ],
                "itemsize": [
                    670,
                    671
                ],
                "writers.word_len": [
                    670
                ],
                "writers": [
                    670
                ],
                "na_rep": [
                    675,
                    2211,
                    2480,
                    2481,
                    2482,
                    2038,
                    2870,
                    1788,
                    2045,
                    670,
                    1791
                ],
                "values.astype": [
                    2303,
                    882,
                    2034,
                    856,
                    1787,
                    671
                ],
                "np.array": [
                    1504,
                    673,
                    1410,
                    2539,
                    1489,
                    851,
                    2036,
                    2869,
                    1496,
                    2489,
                    990
                ],
                "deep": [
                    682
                ],
                "values.copy": [
                    683
                ],
                "original_to_replace": [
                    777,
                    695
                ],
                "to_replace": [
                    2818,
                    2948,
                    1549,
                    2716,
                    2730,
                    2735,
                    2736,
                    2738,
                    2613,
                    695,
                    2743,
                    699,
                    700,
                    2621,
                    2748,
                    2623,
                    705,
                    706,
                    2632,
                    713,
                    717,
                    2640,
                    2519,
                    2523,
                    733,
                    2656,
                    742,
                    746,
                    748,
                    2672,
                    2939
                ],
                "x": [
                    705,
                    1227,
                    2365,
                    2366
                ],
                "self.replace": [
                    716
                ],
                "regex": [
                    2948,
                    2821,
                    1544,
                    781,
                    1552,
                    2716,
                    2719,
                    2730,
                    2732,
                    2742,
                    2748,
                    2630,
                    2636,
                    721,
                    2648,
                    2655,
                    2527,
                    737,
                    2664,
                    2677
                ],
                "convert": [
                    2528,
                    738,
                    2786,
                    2628,
                    2948,
                    2822,
                    2665,
                    2825,
                    2637,
                    782,
                    784,
                    1553,
                    722,
                    2676,
                    2649,
                    2940
                ],
                "self.astype": [
                    1029,
                    775,
                    842,
                    1066,
                    2922,
                    2381,
                    1074,
                    1076,
                    1048,
                    731,
                    1055
                ],
                "block.replace": [
                    776,
                    732
                ],
                "lib.is_scalar": [
                    929,
                    1922,
                    835,
                    1507,
                    742,
                    1906,
                    824,
                    1372
                ],
                "lib": [
                    929,
                    1922,
                    835,
                    1507,
                    742,
                    1511,
                    1906,
                    2548,
                    1366,
                    824,
                    1372
                ],
                "convert_scalar": [
                    930,
                    746,
                    1170,
                    825,
                    1373
                ],
                "missing.mask_missing": [
                    748
                ],
                "missing": [
                    1125,
                    1225,
                    748,
                    1107,
                    1172
                ],
                "filtered_out": [
                    750,
                    751
                ],
                "self.mgr_locs.isin": [
                    2777,
                    750
                ],
                "filtered_out.nonzero": [
                    751
                ],
                "b.convert": [
                    785,
                    2826,
                    2596
                ],
                "transpose": [
                    1344,
                    932,
                    966,
                    1355,
                    812,
                    1402,
                    1007,
                    858,
                    1340,
                    890
                ],
                "find_dtype": [
                    833,
                    837,
                    829,
                    839
                ],
                "value.dtype": [
                    832,
                    2468,
                    2056,
                    2217,
                    2091,
                    2604,
                    2511,
                    2072
                ],
                "_": [
                    993,
                    836,
                    3188,
                    855,
                    1022
                ],
                "infer_dtype_from_scalar": [
                    836
                ],
                "find_common_type": [
                    840
                ],
                "values.dtype": [
                    2144,
                    840,
                    2538,
                    3020,
                    2969,
                    2428
                ],
                "b.setitem": [
                    843
                ],
                "indexer": [
                    864,
                    1761,
                    2398,
                    1763,
                    868,
                    1765,
                    1766,
                    871,
                    2392,
                    843,
                    1263,
                    880,
                    1808,
                    2390,
                    888,
                    862
                ],
                "is_extension_array_dtype": [
                    2469,
                    2984,
                    2219,
                    846,
                    2607,
                    2511,
                    3058,
                    3190
                ],
                "arr_value": [
                    864,
                    868,
                    876,
                    877,
                    878,
                    849,
                    882,
                    851,
                    855
                ],
                "maybe_promote": [
                    993,
                    3188,
                    855
                ],
                "arr_value.dtype": [
                    882,
                    855
                ],
                "values.T": [
                    891,
                    1345,
                    859
                ],
                "check_setitem_lengths": [
                    1765,
                    862
                ],
                "is_empty_indexer": [
                    864
                ],
                "is_scalar_indexer": [
                    868
                ],
                "arr_value.shape": [
                    876,
                    877
                ],
                "values.shape": [
                    1479,
                    1773,
                    877,
                    2479,
                    3057
                ],
                "arr_value.size": [
                    878
                ],
                "values.size": [
                    878
                ],
                "self.values.copy": [
                    1920,
                    1857,
                    1167,
                    1201,
                    916,
                    1845,
                    2751
                ],
                "new": [
                    918,
                    922,
                    924,
                    926,
                    929,
                    930,
                    937,
                    938,
                    939,
                    940,
                    950,
                    952,
                    956,
                    957,
                    958,
                    962,
                    968,
                    969,
                    973,
                    974,
                    975,
                    977,
                    984,
                    987,
                    988,
                    990,
                    1640,
                    1641,
                    1645
                ],
                "is_list_like": [
                    3169,
                    3140,
                    1480,
                    2613,
                    2614,
                    950,
                    922
                ],
                "self.fill_value": [
                    1256,
                    1489,
                    1498,
                    1210,
                    924
                ],
                "new_values.T": [
                    933,
                    1962,
                    1292,
                    1454,
                    1008,
                    1307
                ],
                "new.ndim": [
                    938,
                    974
                ],
                "axis": [
                    1408,
                    1409,
                    1415,
                    1293,
                    1296,
                    1300,
                    1302,
                    1175,
                    938,
                    2349,
                    2353,
                    1479,
                    1353,
                    970,
                    976,
                    1238,
                    1497,
                    1117,
                    2919,
                    2923,
                    2413,
                    1134,
                    1263,
                    1268,
                    1396,
                    1279
                ],
                "reshape": [
                    1488,
                    939,
                    2207
                ],
                "np.repeat": [
                    1488,
                    939,
                    3141
                ],
                "new_values.shape": [
                    1643,
                    939,
                    1295
                ],
                "new.astype": [
                    940
                ],
                "new_values.dtype": [
                    1272,
                    940
                ],
                "np.any": [
                    951
                ],
                "mask.shape": [
                    956
                ],
                "np.putmask": [
                    962
                ],
                "mask.T": [
                    967
                ],
                "new.T": [
                    969
                ],
                "new_shape": [
                    976,
                    977,
                    3111,
                    975
                ],
                "new.shape": [
                    988,
                    975
                ],
                "new_shape.insert": [
                    976
                ],
                "new.reshape": [
                    977
                ],
                "n": [
                    993,
                    996,
                    3140,
                    998,
                    3141,
                    3174,
                    3146,
                    3178,
                    3180,
                    3184,
                    2353,
                    3185,
                    3188,
                    984,
                    3195,
                    988,
                    990,
                    1279
                ],
                "np.squeeze": [
                    988
                ],
                "n.dtype": [
                    3184,
                    993,
                    3188
                ],
                "n.astype": [
                    996
                ],
                "_putmask_smart": [
                    998
                ],
                "infer_dtype_from": [
                    1022
                ],
                "self.is_bool": [
                    1099,
                    1027,
                    1365
                ],
                "is_bool_dtype": [
                    1027
                ],
                "self.is_complex": [
                    1031
                ],
                "is_integer_dtype": [
                    1032,
                    3155,
                    2091,
                    3158
                ],
                "is_float_dtype": [
                    1032,
                    3155,
                    3158
                ],
                "is_datetime64_dtype": [
                    1045,
                    2181,
                    1039
                ],
                "is_datetime64tz_dtype": [
                    2978,
                    2980,
                    2218,
                    3023,
                    1040,
                    2161,
                    1045
                ],
                "mytz": [
                    1051,
                    1054
                ],
                "othertz": [
                    1052,
                    1054
                ],
                "tz_compare": [
                    2186,
                    1054
                ],
                "is_timedelta64_dtype": [
                    1065,
                    1062
                ],
                "self.is_integer": [
                    1099,
                    1365,
                    1205
                ],
                "missing.clean_fill_method": [
                    1107
                ],
                "method": [
                    1216,
                    1859,
                    1125,
                    1228,
                    1107,
                    1174,
                    1212
                ],
                "r": [
                    3041,
                    3042,
                    3043,
                    3045,
                    1127,
                    1128,
                    1129,
                    1416,
                    1417,
                    1112,
                    1113,
                    1114
                ],
                "check_int_bool": [
                    1112,
                    1127
                ],
                "self._interpolate_with_fill": [
                    1115
                ],
                "fill_value": [
                    1287,
                    1801,
                    1803,
                    1808,
                    1170,
                    1303,
                    1177,
                    1959,
                    1209,
                    1210,
                    1859,
                    2247,
                    1232,
                    1877,
                    1120,
                    1256,
                    1259,
                    1263,
                    1138,
                    2425
                ],
                "coerce": [
                    1160,
                    1121,
                    2572
                ],
                "missing.clean_interp_method": [
                    1125
                ],
                "self._interpolate": [
                    1130
                ],
                "index": [
                    1226,
                    1132,
                    1213
                ],
                "limit_direction": [
                    1136,
                    1230
                ],
                "limit_area": [
                    1137,
                    1231
                ],
                "missing.interpolate_2d": [
                    1172
                ],
                "data": [
                    1201,
                    1238,
                    1207
                ],
                "data.astype": [
                    1207
                ],
                "np.float64": [
                    1207
                ],
                "index.is_monotonic": [
                    1213
                ],
                "missing.interpolate_1d": [
                    1225
                ],
                "interp_values": [
                    1240,
                    1238
                ],
                "np.apply_along_axis": [
                    1238
                ],
                "fill_tuple": [
                    1800,
                    1803,
                    1259,
                    1255
                ],
                "allow_fill": [
                    1257,
                    1260,
                    1263
                ],
                "algos.take_nd": [
                    1262
                ],
                "algos": [
                    1262,
                    1279
                ],
                "algos.diff": [
                    1279
                ],
                "maybe_upcast": [
                    1287
                ],
                "f_ordered": [
                    1306,
                    1290,
                    1291
                ],
                "new_values.flags.f_contiguous": [
                    1290
                ],
                "new_values.flags": [
                    1290
                ],
                "np.prod": [
                    1295
                ],
                "np.roll": [
                    1296
                ],
                "ensure_platform_int": [
                    1296
                ],
                "periods": [
                    1296,
                    1299,
                    1300,
                    1877,
                    1302
                ],
                "axis_indexer": [
                    1298,
                    1300,
                    1302,
                    1303
                ],
                "orig_other": [
                    1391,
                    1343
                ],
                "cond": [
                    1408,
                    1409,
                    1378,
                    1410,
                    1348,
                    1921,
                    2919,
                    1384,
                    2923,
                    1356,
                    1900,
                    1358,
                    1901,
                    1392,
                    1902,
                    1904,
                    1933,
                    1375
                ],
                "other.ndim": [
                    1353
                ],
                "other.reshape": [
                    1354
                ],
                "other.shape": [
                    2402,
                    1989,
                    1895,
                    1354,
                    1423
                ],
                "cond.T": [
                    1356
                ],
                "lib.is_float": [
                    1366
                ],
                "np.isnan": [
                    1992,
                    1367
                ],
                "fastres": [
                    1376,
                    1375
                ],
                "expressions.where": [
                    1375
                ],
                "expressions": [
                    1375
                ],
                "cond.ravel": [
                    1378
                ],
                "block.where": [
                    1390
                ],
                "align": [
                    1393,
                    2923,
                    2919
                ],
                "try_cast": [
                    2923,
                    1395,
                    2919
                ],
                "result.T": [
                    1505,
                    1403
                ],
                "cond.ndim": [
                    1408
                ],
                "cond.swapaxes": [
                    1409
                ],
                "cond.shape": [
                    1410,
                    1901
                ],
                "result_blocks": [
                    2657,
                    1412,
                    1418,
                    2667,
                    1420,
                    2668,
                    2669,
                    2641,
                    2618,
                    2651,
                    2652,
                    2653
                ],
                "taken": [
                    1416,
                    1415
                ],
                "result.take": [
                    1415
                ],
                "m.nonzero": [
                    1415
                ],
                "maybe_downcast_numeric": [
                    1416
                ],
                "nb": [
                    1417,
                    1418
                ],
                "r.T": [
                    1417
                ],
                "result_blocks.append": [
                    1418
                ],
                "other.dtype": [
                    2402,
                    1989,
                    1423
                ],
                "array_equivalent": [
                    1425
                ],
                "other.values": [
                    1425,
                    2404,
                    1991
                ],
                "unstacker": [
                    1954,
                    1448,
                    1449,
                    1673,
                    1451,
                    1675,
                    1951
                ],
                "unstacker_func": [
                    1448,
                    1950
                ],
                "self.values.T": [
                    1448
                ],
                "new_items": [
                    1449,
                    1450,
                    1673,
                    1674
                ],
                "unstacker.get_new_columns": [
                    1449,
                    1673
                ],
                "new_placement": [
                    1953,
                    1450,
                    1674,
                    1962,
                    1678,
                    1455,
                    1457
                ],
                "new_columns.get_indexer": [
                    1450,
                    1674
                ],
                "new_columns": [
                    1954,
                    1450,
                    1674
                ],
                "unstacker.get_new_values": [
                    1451,
                    1675
                ],
                "is_empty": [
                    1485,
                    1479
                ],
                "orig_scalar": [
                    1480,
                    1481,
                    1507
                ],
                "qs": [
                    1480,
                    1483,
                    2413,
                    1489,
                    1490,
                    1496
                ],
                "np.asarray": [
                    2496,
                    2305,
                    3174,
                    1771,
                    2318,
                    1777,
                    1493,
                    2235
                ],
                "nanpercentile": [
                    1494
                ],
                "interpolation": [
                    2413,
                    1501
                ],
                "result.shape": [
                    1509
                ],
                "lib.item_from_zerodim": [
                    1511
                ],
                "np.ndim": [
                    1513
                ],
                "np.arange": [
                    1514,
                    1949
                ],
                "self._replace_single": [
                    1548,
                    2622,
                    2671
                ],
                "__init__": [
                    1696,
                    2433,
                    2122,
                    2541,
                    1585,
                    2842
                ],
                "col": [
                    1600,
                    1601,
                    1605,
                    2323,
                    2324,
                    1595,
                    1596,
                    1597,
                    1599
                ],
                "com.is_null_slice": [
                    2324,
                    1597,
                    1830
                ],
                "com": [
                    2324,
                    1597,
                    1830
                ],
                "self._holder": [
                    1728,
                    1610,
                    1932,
                    1840,
                    2416,
                    2266,
                    2267,
                    2111
                ],
                "locs.tolist": [
                    1613
                ],
                "_safe_reshape": [
                    1643
                ],
                "NonConsolidatableMixIn": [
                    1681
                ],
                "self._maybe_coerce_values": [
                    2121,
                    1695
                ],
                "extract_array": [
                    1904,
                    1713,
                    1898,
                    2840
                ],
                "self.values.dtype.na_value": [
                    1723
                ],
                "self._holder._can_hold_na": [
                    1728
                ],
                "self.values.dtype._is_numeric": [
                    1737
                ],
                "to_native_types": [
                    2246,
                    1791
                ],
                "self.values.take": [
                    1808,
                    1959
                ],
                "self._holder._concat_same_type": [
                    1840
                ],
                "values.fillna": [
                    1859,
                    1846
                ],
                "self.values.shift": [
                    1877
                ],
                "ABCDataFrame": [
                    1900,
                    1892
                ],
                "other.iloc": [
                    1896
                ],
                "cond.iloc": [
                    1902
                ],
                "self.dtype.na_value": [
                    1910
                ],
                "is_sparse": [
                    1912,
                    2972
                ],
                "icond": [
                    1921,
                    1925,
                    1927
                ],
                "set_other": [
                    1923,
                    1925,
                    1927
                ],
                "self._holder._from_sequence": [
                    1932
                ],
                "np.where": [
                    1933
                ],
                "Block._ftype": [
                    1940
                ],
                "dummy_arr": [
                    1949,
                    1951
                ],
                "n_rows": [
                    1949
                ],
                "dummy_unstacker": [
                    1950,
                    1951
                ],
                "functools.partial": [
                    1950
                ],
                "functools": [
                    1950
                ],
                "self._get_unstack_items": [
                    1953
                ],
                "indices": [
                    1962,
                    1959
                ],
                "place": [
                    1960,
                    1962
                ],
                "ExtensionBlock": [
                    2985,
                    2831,
                    1967,
                    2238,
                    2974
                ],
                "NumericBlock": [
                    1985,
                    2075,
                    2499
                ],
                "left": [
                    1992,
                    1991
                ],
                "right": [
                    1992,
                    1991
                ],
                "FloatOrComplexBlock": [
                    2059,
                    1995
                ],
                "np.floating": [
                    2056,
                    2986,
                    2605,
                    2002,
                    2066,
                    2006
                ],
                "np.integer": [
                    2084,
                    2605,
                    2989,
                    2993,
                    2002,
                    2066
                ],
                "np.datetime64": [
                    2977,
                    2085,
                    2247,
                    2217,
                    2605,
                    2003,
                    2103,
                    2009
                ],
                "np.timedelta64": [
                    2468,
                    2085,
                    2442,
                    2988,
                    2445,
                    2003,
                    2425,
                    2009
                ],
                "np.int_": [
                    2068,
                    2006
                ],
                "np.bool_": [
                    2507,
                    2508,
                    2605,
                    2511,
                    2995,
                    2069,
                    2009
                ],
                "datetime": [
                    2184,
                    2009,
                    2569
                ],
                "timedelta": [
                    2009,
                    2571,
                    2445
                ],
                "float_format": [
                    2046,
                    2030
                ],
                "decimal": [
                    2030,
                    2047
                ],
                "formatter": [
                    2051,
                    2043
                ],
                "FloatArrayFormatter": [
                    2043
                ],
                "formatter.get_result_as_array": [
                    2051
                ],
                "value.dtype.type": [
                    2468,
                    2056,
                    2217,
                    2604,
                    2511,
                    2072
                ],
                "np.complexfloating": [
                    2072,
                    2066,
                    2605,
                    2991
                ],
                "np.float_": [
                    2068
                ],
                "self.dtype.itemsize": [
                    2086
                ],
                "tipo.itemsize": [
                    2086
                ],
                "DatetimeArray": [
                    2147,
                    2251,
                    3026,
                    2099,
                    2164
                ],
                "self.values.ravel": [
                    2585,
                    2548,
                    2110
                ],
                "astype": [
                    2111
                ],
                "result.reshape": [
                    2112
                ],
                "DatetimeLikeBlockMixin": [
                    2420,
                    2116
                ],
                "_NS_DTYPE": [
                    2144,
                    2318
                ],
                "conversion.ensure_datetime64ns": [
                    2145,
                    2230
                ],
                "conversion": [
                    2145,
                    2429,
                    2230
                ],
                "values._data": [
                    2148,
                    2431
                ],
                "tz_localize": [
                    2164
                ],
                "values.tz_convert": [
                    2165
                ],
                "dtype.tz": [
                    2165
                ],
                "_astype": [
                    2169
                ],
                "self.is_datetimetz": [
                    2185,
                    2174
                ],
                "is_valid_nat_for_dtype": [
                    2176,
                    2189,
                    2447
                ],
                "NaT": [
                    2443,
                    2182
                ],
                "element.tzinfo": [
                    2186,
                    2187
                ],
                "self.dtype.tz": [
                    2186
                ],
                "i8values": [
                    2208,
                    2201,
                    2212,
                    2197
                ],
                "fmt": [
                    2210,
                    2205
                ],
                "_get_format_datetime64_from_values": [
                    2205
                ],
                "date_format": [
                    2205
                ],
                "tslib.format_array_from_datetime": [
                    2207
                ],
                "tslib": [
                    2207
                ],
                "i8values.ravel": [
                    2208
                ],
                "i8values.shape": [
                    2212
                ],
                "np.atleast_2d": [
                    3008,
                    2370,
                    2213
                ],
                "DatetimeBlock": [
                    2979,
                    2246,
                    2245,
                    2238
                ],
                "_can_hold_element": [
                    2245
                ],
                "DatetimeBlock._can_hold_element": [
                    2245
                ],
                "DatetimeBlock.to_native_types": [
                    2246
                ],
                "values.tz": [
                    2269
                ],
                "self.values._data.base": [
                    2278
                ],
                "self.values._data": [
                    2278
                ],
                "asi8": [
                    2353
                ],
                "self.shift": [
                    2353
                ],
                "new_values.reshape": [
                    2356
                ],
                "new_values.astype": [
                    2357
                ],
                "TimeDeltaBlock": [
                    2990,
                    2358
                ],
                "x.dtype": [
                    2365
                ],
                "concat_datetime": [
                    2366
                ],
                "x.values": [
                    2366
                ],
                "ObjectBlock": [
                    2371,
                    2396,
                    2998
                ],
                "concat_same_type": [
                    2372
                ],
                "fillna": [
                    2464,
                    2378,
                    2381
                ],
                "indexer.size": [
                    2390
                ],
                "setitem": [
                    2392
                ],
                "obj_vals": [
                    2394,
                    2396
                ],
                "newb.setitem": [
                    2398
                ],
                "other.values.view": [
                    2404
                ],
                "naive": [
                    2410,
                    2412,
                    2407
                ],
                "naive.reshape": [
                    2410
                ],
                "res_blk": [
                    2416,
                    2417,
                    2413
                ],
                "blk.quantile": [
                    2413
                ],
                "aware": [
                    2416,
                    2417
                ],
                "res_blk.values.ravel": [
                    2416
                ],
                "res_blk.values": [
                    2416
                ],
                "res_blk.ndim": [
                    2417
                ],
                "IntBlock": [
                    2994,
                    2420
                ],
                "_TD_DTYPE": [
                    2428
                ],
                "conversion.ensure_timedelta64ns": [
                    2429
                ],
                "TimedeltaArray": [
                    2437,
                    2430
                ],
                "Timedelta": [
                    2490,
                    2463
                ],
                "rvalues": [
                    2489,
                    2482,
                    2493,
                    2479
                ],
                "np.empty": [
                    2479
                ],
                "imask": [
                    2489,
                    2490,
                    2483
                ],
                "ravel": [
                    2483
                ],
                "rvalues.flat": [
                    2489
                ],
                "_repr_base": [
                    2490
                ],
                "to_replace_values": [
                    2520,
                    2519
                ],
                "np.atleast_1d": [
                    2519
                ],
                "np.can_cast": [
                    2520
                ],
                "replace": [
                    2522,
                    2747,
                    2947,
                    2631
                ],
                "values.dtype.type": [
                    2538
                ],
                "lib.is_bool_array": [
                    2548
                ],
                "val.shape": [
                    2566
                ],
                "soft_convert_objects": [
                    2567
                ],
                "val.ravel": [
                    2568
                ],
                "numeric": [
                    2570
                ],
                "to_rep_is_list": [
                    2616,
                    2613,
                    2655,
                    2615
                ],
                "value_is_list": [
                    2616,
                    2614,
                    2615
                ],
                "both_lists": [
                    2639,
                    2615
                ],
                "either_list": [
                    2616,
                    2621,
                    2630
                ],
                "is_re": [
                    2767,
                    2621,
                    2758,
                    2735
                ],
                "to_rep": [
                    2640,
                    2660,
                    2644,
                    2656
                ],
                "b._replace_single": [
                    2659,
                    2643
                ],
                "to_rep_re": [
                    2722,
                    2716,
                    2732
                ],
                "is_re_compilable": [
                    2716,
                    2719
                ],
                "regex_re": [
                    2729,
                    2722,
                    2732,
                    2719
                ],
                "pattern": [
                    2736,
                    2738,
                    2742
                ],
                "to_replace.pattern": [
                    2736
                ],
                "rx": [
                    2758,
                    2759,
                    2767,
                    2768,
                    2743
                ],
                "re.compile": [
                    2743
                ],
                "re": [
                    2743
                ],
                "rx.search": [
                    2759
                ],
                "rx.sub": [
                    2768
                ],
                "np.vectorize": [
                    2772
                ],
                "re_replacer": [
                    2772
                ],
                "filt": [
                    2777,
                    2780,
                    2782,
                    2775
                ],
                "nonzero": [
                    2777
                ],
                "block.convert": [
                    2787
                ],
                "_replace_coerce": [
                    2817
                ],
                "concat_categorical": [
                    2836
                ],
                "np.object_": [
                    2853
                ],
                "self.values._internal_get_values": [
                    2859
                ],
                "object_msg": [
                    2921,
                    2908
                ],
                "where": [
                    2922,
                    2919
                ],
                "result.values.replace": [
                    2939
                ],
                "result.values": [
                    2946,
                    2939
                ],
                "result.convert": [
                    2941
                ],
                "result.values.add_categories": [
                    2946
                ],
                "CategoricalBlock": [
                    2976,
                    2947
                ],
                "vtype": [
                    2977,
                    2986,
                    2988,
                    2989,
                    2991,
                    2993,
                    2970
                ],
                "cls": [
                    2976,
                    2979,
                    2981,
                    2983,
                    2985,
                    2987,
                    2990,
                    2992,
                    2994,
                    2996,
                    2998,
                    2999,
                    2974
                ],
                "DatetimeTZBlock": [
                    2981,
                    3023
                ],
                "is_interval_dtype": [
                    2982
                ],
                "is_period_dtype": [
                    2982
                ],
                "ObjectValuesExtensionBlock": [
                    2983
                ],
                "FloatBlock": [
                    2987
                ],
                "ComplexBlock": [
                    2992
                ],
                "BoolBlock": [
                    2996
                ],
                "ABCPandasArray": [
                    3005
                ],
                "values.to_numpy": [
                    3006
                ],
                "PandasDtype": [
                    3010
                ],
                "dtype.numpy_dtype": [
                    3011
                ],
                "fastpath": [
                    3013
                ],
                "klass": [
                    3019,
                    3028,
                    3021,
                    3023
                ],
                "get_block_type": [
                    3021
                ],
                "DatetimeArray._simple_new": [
                    3026
                ],
                "blocks.extend": [
                    3043,
                    3047
                ],
                "blocks.append": [
                    3049,
                    3045
                ],
                "BlockManager": [
                    3046
                ],
                "result.blocks": [
                    3047
                ],
                "b.dtype": [
                    3074
                ],
                "b.mgr_locs.as_array": [
                    3080
                ],
                "b.mgr_locs": [
                    3080
                ],
                "np.vstack": [
                    3081
                ],
                "b.values": [
                    3081
                ],
                "argsort": [
                    3083,
                    3084,
                    3085
                ],
                "np.argsort": [
                    3083
                ],
                "arr": [
                    3108,
                    3109,
                    3110,
                    3111,
                    3112
                ],
                "ABCSeries": [
                    3108
                ],
                "arr._values": [
                    3109
                ],
                "ABCExtensionArray": [
                    3110
                ],
                "arr.reshape": [
                    3111
                ],
                "nn": [
                    3168,
                    3146,
                    3153,
                    3155,
                    3166
                ],
                "_isna_compat": [
                    3153
                ],
                "nn.dtype": [
                    3155
                ],
                "v.dtype": [
                    3184,
                    3166,
                    3190,
                    3158
                ],
                "warnings.catch_warnings": [
                    3164
                ],
                "warnings.simplefilter": [
                    3165
                ],
                "np.ComplexWarning": [
                    3165
                ],
                "nn_at": [
                    3168,
                    3171,
                    3166
                ],
                "nn.astype": [
                    3166
                ],
                "comp": [
                    3168,
                    3169
                ],
                "comp.all": [
                    3169
                ],
                "v.dtype.kind": [
                    3184
                ],
                "n.dtype.kind": [
                    3184
                ],
                "_putmask_preserve": [
                    3185,
                    3195
                ],
                "v._internal_get_values": [
                    3191
                ],
                "v.astype": [
                    3193
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/core/internals/managers.py": {
            "buggy_functions": [
                {
                    "function_name": "replace_list",
                    "function_code": "def replace_list(self, src_list, dest_list, inplace=False, regex=False):\n    \"\"\" do a list replace \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # figure out our mask a-priori to avoid repeated replacements\n    values = self.as_array()\n\n    def comp(s, regex=False):\n        \"\"\"\n        Generate a bool array by perform an equality check, or perform\n        an element-wise regular expression matching\n        \"\"\"\n        if isna(s):\n            return isna(values)\n        if isinstance(s, (Timedelta, Timestamp)) and getattr(s, \"tz\", None) is None:\n\n            return _compare_or_regex_search(\n                maybe_convert_objects(values), s.asm8, regex\n            )\n        return _compare_or_regex_search(values, s, regex)\n\n    masks = [comp(s, regex) for i, s in enumerate(src_list)]\n\n    result_blocks = []\n    src_len = len(src_list) - 1\n    for blk in self.blocks:\n\n        # its possible to get multiple result blocks here\n        # replace ALWAYS will return a list\n        rb = [blk if inplace else blk.copy()]\n        for i, (s, d) in enumerate(zip(src_list, dest_list)):\n            # TODO: assert/validate that `d` is always a scalar?\n            new_rb = []\n            for b in rb:\n                m = masks[i][b.mgr_locs.indexer]\n                convert = i == src_len\n                result = b._replace_coerce(\n                    mask=m,\n                    to_replace=s,\n                    value=d,\n                    inplace=inplace,\n                    convert=convert,\n                    regex=regex,\n                )\n                if m.any():\n                    new_rb = _extend_blocks(result, new_rb)\n                else:\n                    new_rb.append(b)\n            rb = new_rb\n        result_blocks.extend(rb)\n\n    bm = self.__class__(result_blocks, self.axes)\n    bm._consolidate_inplace()\n    return bm\n",
                    "decorators": [],
                    "docstring": "do a list replace ",
                    "start_line": 587,
                    "variables": {
                        "inplace": [
                            617,
                            628,
                            590
                        ],
                        "validate_bool_kwarg": [
                            590
                        ],
                        "values": [
                            601,
                            593,
                            605,
                            607
                        ],
                        "self.as_array": [
                            593
                        ],
                        "self": [
                            593,
                            613,
                            639
                        ],
                        "isna": [
                            600,
                            601
                        ],
                        "s": [
                            609,
                            618,
                            626,
                            600,
                            602,
                            605,
                            607
                        ],
                        "isinstance": [
                            602
                        ],
                        "Timedelta": [
                            602
                        ],
                        "Timestamp": [
                            602
                        ],
                        "getattr": [
                            602
                        ],
                        "_compare_or_regex_search": [
                            604,
                            607
                        ],
                        "maybe_convert_objects": [
                            605
                        ],
                        "s.asm8": [
                            605
                        ],
                        "regex": [
                            609,
                            605,
                            630,
                            607
                        ],
                        "masks": [
                            609,
                            622
                        ],
                        "comp": [
                            609
                        ],
                        "i": [
                            609,
                            618,
                            622,
                            623
                        ],
                        "enumerate": [
                            609,
                            618
                        ],
                        "src_list": [
                            609,
                            618,
                            612
                        ],
                        "result_blocks": [
                            611,
                            637,
                            639
                        ],
                        "src_len": [
                            612,
                            623
                        ],
                        "len": [
                            612
                        ],
                        "blk": [
                            617,
                            613
                        ],
                        "self.blocks": [
                            613
                        ],
                        "rb": [
                            617,
                            637,
                            636,
                            621
                        ],
                        "blk.copy": [
                            617
                        ],
                        "d": [
                            618,
                            627
                        ],
                        "zip": [
                            618
                        ],
                        "dest_list": [
                            618
                        ],
                        "new_rb": [
                            636,
                            633,
                            635,
                            620
                        ],
                        "b": [
                            624,
                            635,
                            621,
                            622
                        ],
                        "m": [
                            632,
                            625,
                            622
                        ],
                        "b.mgr_locs.indexer": [
                            622
                        ],
                        "b.mgr_locs": [
                            622
                        ],
                        "convert": [
                            629,
                            623
                        ],
                        "result": [
                            624,
                            633
                        ],
                        "b._replace_coerce": [
                            624
                        ],
                        "m.any": [
                            632
                        ],
                        "_extend_blocks": [
                            633
                        ],
                        "new_rb.append": [
                            635
                        ],
                        "result_blocks.extend": [
                            637
                        ],
                        "bm": [
                            640,
                            641,
                            639
                        ],
                        "self.__class__": [
                            639
                        ],
                        "self.axes": [
                            639
                        ],
                        "bm._consolidate_inplace": [
                            640
                        ]
                    },
                    "filtered_variables": {
                        "inplace": [
                            617,
                            628,
                            590
                        ],
                        "validate_bool_kwarg": [
                            590
                        ],
                        "values": [
                            601,
                            593,
                            605,
                            607
                        ],
                        "self.as_array": [
                            593
                        ],
                        "self": [
                            593,
                            613,
                            639
                        ],
                        "isna": [
                            600,
                            601
                        ],
                        "s": [
                            609,
                            618,
                            626,
                            600,
                            602,
                            605,
                            607
                        ],
                        "Timedelta": [
                            602
                        ],
                        "Timestamp": [
                            602
                        ],
                        "_compare_or_regex_search": [
                            604,
                            607
                        ],
                        "maybe_convert_objects": [
                            605
                        ],
                        "s.asm8": [
                            605
                        ],
                        "regex": [
                            609,
                            605,
                            630,
                            607
                        ],
                        "masks": [
                            609,
                            622
                        ],
                        "comp": [
                            609
                        ],
                        "i": [
                            609,
                            618,
                            622,
                            623
                        ],
                        "src_list": [
                            609,
                            618,
                            612
                        ],
                        "result_blocks": [
                            611,
                            637,
                            639
                        ],
                        "src_len": [
                            612,
                            623
                        ],
                        "blk": [
                            617,
                            613
                        ],
                        "self.blocks": [
                            613
                        ],
                        "rb": [
                            617,
                            637,
                            636,
                            621
                        ],
                        "blk.copy": [
                            617
                        ],
                        "d": [
                            618,
                            627
                        ],
                        "dest_list": [
                            618
                        ],
                        "new_rb": [
                            636,
                            633,
                            635,
                            620
                        ],
                        "b": [
                            624,
                            635,
                            621,
                            622
                        ],
                        "m": [
                            632,
                            625,
                            622
                        ],
                        "b.mgr_locs.indexer": [
                            622
                        ],
                        "b.mgr_locs": [
                            622
                        ],
                        "convert": [
                            629,
                            623
                        ],
                        "result": [
                            624,
                            633
                        ],
                        "b._replace_coerce": [
                            624
                        ],
                        "m.any": [
                            632
                        ],
                        "_extend_blocks": [
                            633
                        ],
                        "new_rb.append": [
                            635
                        ],
                        "result_blocks.extend": [
                            637
                        ],
                        "bm": [
                            640,
                            641,
                            639
                        ],
                        "self.__class__": [
                            639
                        ],
                        "self.axes": [
                            639
                        ],
                        "bm._consolidate_inplace": [
                            640
                        ]
                    },
                    "diff_line_number": 632,
                    "class_data": {
                        "signature": "class BlockManager(PandasObject)",
                        "docstring": "Core internal data structure to implement DataFrame, Series, etc.\n\nManage a bunch of labeled 2D mixed-type ndarrays. Essentially it's a\nlightweight blocked set of labeled data to be manipulated by the DataFrame\npublic API class\n\nAttributes\n----------\nshape\nndim\naxes\nvalues\nitems\n\nMethods\n-------\nset_axis(axis, new_labels)\ncopy(deep=True)\n\nget_dtype_counts\nget_ftype_counts\nget_dtypes\nget_ftypes\n\napply(func, axes, block_filter_fn)\n\nget_bool_data\nget_numeric_data\n\nget_slice(slice_like, axis)\nget(label)\niget(loc)\n\ntake(indexer, axis)\nreindex_axis(new_labels, axis)\nreindex_indexer(new_labels, indexer, axis)\n\ndelete(label)\ninsert(loc, label, value)\nset(label, value)\n\nParameters\n----------\n\n\nNotes\n-----\nThis is *not* a public API class",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True):\n    self.axes = [ensure_index(ax) for ax in axes]\n    self.blocks = tuple(blocks)\n    for block in blocks:\n        if self.ndim != block.ndim:\n            raise AssertionError('Number of Block dimensions ({block}) must equal number of axes ({self})'.format(block=block.ndim, self=self.ndim))\n    if do_integrity_check:\n        self._verify_integrity()\n    self._consolidate_check()\n    self._rebuild_blknos_and_blklocs()",
                            "def make_empty(self, axes=None):\n    \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n    if axes is None:\n        axes = [ensure_index([])] + [ensure_index(a) for a in self.axes[1:]]\n    if self.ndim == 1:\n        blocks = np.array([], dtype=self.array_dtype)\n    else:\n        blocks = []\n    return self.__class__(blocks, axes)",
                            "def __nonzero__(self):\n    return True",
                            "@property\ndef shape(self):\n    return tuple((len(ax) for ax in self.axes))",
                            "@property\ndef ndim(self) -> int:\n    return len(self.axes)",
                            "def set_axis(self, axis, new_labels):\n    new_labels = ensure_index(new_labels)\n    old_len = len(self.axes[axis])\n    new_len = len(new_labels)\n    if new_len != old_len:\n        raise ValueError('Length mismatch: Expected axis has {old} elements, new values have {new} elements'.format(old=old_len, new=new_len))\n    self.axes[axis] = new_labels",
                            "def rename_axis(self, mapper, axis, copy=True, level=None):\n    \"\"\"\n    Rename one of axes.\n\n    Parameters\n    ----------\n    mapper : unary callable\n    axis : int\n    copy : boolean, default True\n    level : int, default None\n    \"\"\"\n    obj = self.copy(deep=copy)\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n    return obj",
                            "@property\ndef _is_single_block(self):\n    if self.ndim == 1:\n        return True\n    if len(self.blocks) != 1:\n        return False\n    blk = self.blocks[0]\n    return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(0, len(self), 1)",
                            "def _rebuild_blknos_and_blklocs(self):\n    \"\"\"\n    Update mgr._blknos / mgr._blklocs.\n    \"\"\"\n    new_blknos = np.empty(self.shape[0], dtype=np.int64)\n    new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n    new_blknos.fill(-1)\n    new_blklocs.fill(-1)\n    for blkno, blk in enumerate(self.blocks):\n        rl = blk.mgr_locs\n        new_blknos[rl.indexer] = blkno\n        new_blklocs[rl.indexer] = np.arange(len(rl))\n    if (new_blknos == -1).any():\n        raise AssertionError('Gaps in blk ref_locs')\n    self._blknos = new_blknos\n    self._blklocs = new_blklocs",
                            "@property\ndef items(self):\n    return self.axes[0]",
                            "def _get_counts(self, f):\n    \"\"\" return a dict of the counts of the function in BlockManager \"\"\"\n    self._consolidate_inplace()\n    counts = dict()\n    for b in self.blocks:\n        v = f(b)\n        counts[v] = counts.get(v, 0) + b.shape[0]\n    return counts",
                            "def get_dtype_counts(self):\n    return self._get_counts(lambda b: b.dtype.name)",
                            "def get_ftype_counts(self):\n    return self._get_counts(lambda b: b.ftype)",
                            "def get_dtypes(self):\n    dtypes = np.array([blk.dtype for blk in self.blocks])\n    return algos.take_1d(dtypes, self._blknos, allow_fill=False)",
                            "def get_ftypes(self):\n    ftypes = np.array([blk.ftype for blk in self.blocks])\n    return algos.take_1d(ftypes, self._blknos, allow_fill=False)",
                            "def __getstate__(self):\n    block_values = [b.values for b in self.blocks]\n    block_items = [self.items[b.mgr_locs.indexer] for b in self.blocks]\n    axes_array = list(self.axes)\n    extra_state = {'0.14.1': {'axes': axes_array, 'blocks': [dict(values=b.values, mgr_locs=b.mgr_locs.indexer) for b in self.blocks]}}\n    return (axes_array, block_values, block_items, extra_state)",
                            "def __setstate__(self, state):\n\n    def unpickle_block(values, mgr_locs):\n        return make_block(values, placement=mgr_locs)\n    if isinstance(state, tuple) and len(state) >= 4 and ('0.14.1' in state[3]):\n        state = state[3]['0.14.1']\n        self.axes = [ensure_index(ax) for ax in state['axes']]\n        self.blocks = tuple((unpickle_block(b['values'], b['mgr_locs']) for b in state['blocks']))\n    else:\n        ax_arrays, bvalues, bitems = state[:3]\n        self.axes = [ensure_index(ax) for ax in ax_arrays]\n        if len(bitems) == 1 and self.axes[0].equals(bitems[0]):\n            all_mgr_locs = [slice(0, len(bitems[0]))]\n        else:\n            all_mgr_locs = [self.axes[0].get_indexer(blk_items) for blk_items in bitems]\n        self.blocks = tuple((unpickle_block(values, mgr_locs) for values, mgr_locs in zip(bvalues, all_mgr_locs)))\n    self._post_setstate()",
                            "def _post_setstate(self):\n    self._is_consolidated = False\n    self._known_consolidated = False\n    self._rebuild_blknos_and_blklocs()",
                            "def __len__(self) -> int:\n    return len(self.items)",
                            "def __repr__(self) -> str:\n    output = pprint_thing(self.__class__.__name__)\n    for i, ax in enumerate(self.axes):\n        if i == 0:\n            output += '\\nItems: {ax}'.format(ax=ax)\n        else:\n            output += '\\nAxis {i}: {ax}'.format(i=i, ax=ax)\n    for block in self.blocks:\n        output += '\\n{block}'.format(block=pprint_thing(block))\n    return output",
                            "def _verify_integrity(self):\n    mgr_shape = self.shape\n    tot_items = sum((len(x.mgr_locs) for x in self.blocks))\n    for block in self.blocks:\n        if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n            construction_error(tot_items, block.shape[1:], self.axes)\n    if len(self.items) != tot_items:\n        raise AssertionError('Number of manager items must equal union of block items\\n# manager items: {0}, # tot_items: {1}'.format(len(self.items), tot_items))",
                            "def apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs):\n    \"\"\"\n    iterate over the blocks, collect and create a new block manager\n\n    Parameters\n    ----------\n    f : the callable or function name to operate on at the block level\n    axes : optional (if not supplied, use self.axes)\n    filter : list, if supplied, only call the block if the filter is in\n             the block\n    do_integrity_check : boolean, default False. Do the block manager\n        integrity check\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n\n    Returns\n    -------\n    Block Manager (new object)\n\n    \"\"\"\n    result_blocks = []\n    if filter is not None:\n        filter_locs = set(self.items.get_indexer_for(filter))\n        if len(filter_locs) == len(self.items):\n            filter = None\n        else:\n            kwargs['filter'] = filter_locs\n    if consolidate:\n        self._consolidate_inplace()\n    if f == 'where':\n        align_copy = True\n        if kwargs.get('align', True):\n            align_keys = ['other', 'cond']\n        else:\n            align_keys = ['cond']\n    elif f == 'putmask':\n        align_copy = False\n        if kwargs.get('align', True):\n            align_keys = ['new', 'mask']\n        else:\n            align_keys = ['mask']\n    elif f == 'fillna':\n        align_copy = False\n        align_keys = ['value']\n    else:\n        align_keys = []\n    aligned_args = {k: kwargs[k] for k in align_keys if not isinstance(kwargs[k], ABCExtensionArray) and hasattr(kwargs[k], 'values')}\n    for b in self.blocks:\n        if filter is not None:\n            if not b.mgr_locs.isin(filter_locs).any():\n                result_blocks.append(b)\n                continue\n        if aligned_args:\n            b_items = self.items[b.mgr_locs.indexer]\n            for k, obj in aligned_args.items():\n                axis = obj._info_axis_number\n                kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n        applied = getattr(b, f)(**kwargs)\n        result_blocks = _extend_blocks(applied, result_blocks)\n    if len(result_blocks) == 0:\n        return self.make_empty(axes or self.axes)\n    bm = self.__class__(result_blocks, axes or self.axes, do_integrity_check=do_integrity_check)\n    bm._consolidate_inplace()\n    return bm",
                            "def quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None):\n    \"\"\"\n    Iterate over blocks applying quantile reduction.\n    This routine is intended for reduction type operations and\n    will do inference on the generated blocks.\n\n    Parameters\n    ----------\n    axis: reduction axis, default 0\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n    transposed: boolean, default False\n        we are holding transposed data\n    interpolation : type of interpolation, default 'linear'\n    qs : a scalar or list of the quantiles to be computed\n    numeric_only : ignored\n\n    Returns\n    -------\n    Block Manager (new object)\n    \"\"\"\n    assert self.ndim >= 2\n    if consolidate:\n        self._consolidate_inplace()\n\n    def get_axe(block, qs, axes):\n        from pandas import Float64Index\n        if is_list_like(qs):\n            ax = Float64Index(qs)\n        else:\n            ax = axes[0]\n        return ax\n    axes, blocks = ([], [])\n    for b in self.blocks:\n        block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n        axe = get_axe(b, qs, axes=self.axes)\n        axes.append(axe)\n        blocks.append(block)\n    ndim = {b.ndim for b in blocks}\n    assert 0 not in ndim, ndim\n    if 2 in ndim:\n        new_axes = list(self.axes)\n        if len(blocks) > 1:\n            new_axes[1] = axes[0]\n            for b, sb in zip(blocks, self.blocks):\n                b.mgr_locs = sb.mgr_locs\n        else:\n            new_axes[axis] = Index(np.concatenate([ax.values for ax in axes]))\n        if transposed:\n            new_axes = new_axes[::-1]\n            blocks = [b.make_block(b.values.T, placement=np.arange(b.shape[1])) for b in blocks]\n        return self.__class__(blocks, new_axes)\n    values = concat_compat([b.values for b in blocks])\n    if len(self.blocks) > 1:\n        indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n        i = 0\n        for b in self.blocks:\n            for j in b.mgr_locs:\n                indexer[j] = i\n                i = i + 1\n        values = values.take(indexer)\n    return SingleBlockManager([make_block(values, ndim=1, placement=np.arange(len(values)))], axes[0])",
                            "def isna(self, func, **kwargs):\n    return self.apply('apply', func=func, **kwargs)",
                            "def where(self, **kwargs):\n    return self.apply('where', **kwargs)",
                            "def setitem(self, **kwargs):\n    return self.apply('setitem', **kwargs)",
                            "def putmask(self, **kwargs):\n    return self.apply('putmask', **kwargs)",
                            "def diff(self, **kwargs):\n    return self.apply('diff', **kwargs)",
                            "def interpolate(self, **kwargs):\n    return self.apply('interpolate', **kwargs)",
                            "def shift(self, **kwargs):\n    return self.apply('shift', **kwargs)",
                            "def fillna(self, **kwargs):\n    return self.apply('fillna', **kwargs)",
                            "def downcast(self, **kwargs):\n    return self.apply('downcast', **kwargs)",
                            "def astype(self, dtype, **kwargs):\n    return self.apply('astype', dtype=dtype, **kwargs)",
                            "def convert(self, **kwargs):\n    return self.apply('convert', **kwargs)",
                            "def replace(self, value, **kwargs):\n    assert np.ndim(value) == 0, value\n    return self.apply('replace', value=value, **kwargs)",
                            "def replace_list(self, src_list, dest_list, inplace=False, regex=False):\n    \"\"\" do a list replace \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    values = self.as_array()\n\n    def comp(s, regex=False):\n        \"\"\"\n        Generate a bool array by perform an equality check, or perform\n        an element-wise regular expression matching\n        \"\"\"\n        if isna(s):\n            return isna(values)\n        if isinstance(s, (Timedelta, Timestamp)) and getattr(s, 'tz', None) is None:\n            return _compare_or_regex_search(maybe_convert_objects(values), s.asm8, regex)\n        return _compare_or_regex_search(values, s, regex)\n    masks = [comp(s, regex) for i, s in enumerate(src_list)]\n    result_blocks = []\n    src_len = len(src_list) - 1\n    for blk in self.blocks:\n        rb = [blk if inplace else blk.copy()]\n        for i, (s, d) in enumerate(zip(src_list, dest_list)):\n            new_rb = []\n            for b in rb:\n                m = masks[i][b.mgr_locs.indexer]\n                convert = i == src_len\n                result = b._replace_coerce(mask=m, to_replace=s, value=d, inplace=inplace, convert=convert, regex=regex)\n                if m.any():\n                    new_rb = _extend_blocks(result, new_rb)\n                else:\n                    new_rb.append(b)\n            rb = new_rb\n        result_blocks.extend(rb)\n    bm = self.__class__(result_blocks, self.axes)\n    bm._consolidate_inplace()\n    return bm",
                            "def is_consolidated(self):\n    \"\"\"\n    Return True if more than one block with the same dtype\n    \"\"\"\n    if not self._known_consolidated:\n        self._consolidate_check()\n    return self._is_consolidated",
                            "def _consolidate_check(self):\n    ftypes = [blk.ftype for blk in self.blocks]\n    self._is_consolidated = len(ftypes) == len(set(ftypes))\n    self._known_consolidated = True",
                            "@property\ndef is_mixed_type(self):\n    self._consolidate_inplace()\n    return len(self.blocks) > 1",
                            "@property\ndef is_numeric_mixed_type(self):\n    self._consolidate_inplace()\n    return all((block.is_numeric for block in self.blocks))",
                            "@property\ndef is_datelike_mixed_type(self):\n    self._consolidate_inplace()\n    return any((block.is_datelike for block in self.blocks))",
                            "@property\ndef any_extension_types(self):\n    \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n    return any((block.is_extension for block in self.blocks))",
                            "@property\ndef is_view(self):\n    \"\"\" return a boolean if we are a single block and are a view \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].is_view\n    return False",
                            "def get_bool_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_bool], copy)",
                            "def get_numeric_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_numeric], copy)",
                            "def combine(self, blocks, copy=True):\n    \"\"\" return a new manager with the blocks \"\"\"\n    if len(blocks) == 0:\n        return self.make_empty()\n    indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n    inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n    new_blocks = []\n    for b in blocks:\n        b = b.copy(deep=copy)\n        b.mgr_locs = algos.take_1d(inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False)\n        new_blocks.append(b)\n    axes = list(self.axes)\n    axes[0] = self.items.take(indexer)\n    return self.__class__(new_blocks, axes, do_integrity_check=False)",
                            "def get_slice(self, slobj, axis=0):\n    if axis >= self.ndim:\n        raise IndexError('Requested axis not found in manager')\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(slobj)\n    else:\n        slicer = [slice(None)] * (axis + 1)\n        slicer[axis] = slobj\n        slicer = tuple(slicer)\n        new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axes[axis][slobj]\n    bm = self.__class__(new_blocks, new_axes, do_integrity_check=False)\n    bm._consolidate_inplace()\n    return bm",
                            "def __contains__(self, item):\n    return item in self.items",
                            "@property\ndef nblocks(self):\n    return len(self.blocks)",
                            "def copy(self, deep=True):\n    \"\"\"\n    Make deep or shallow copy of BlockManager\n\n    Parameters\n    ----------\n    deep : boolean o rstring, default True\n        If False, return shallow copy (do not copy data)\n        If 'all', copy data and a deep copy of the index\n\n    Returns\n    -------\n    copy : BlockManager\n    \"\"\"\n    if deep:\n        if deep == 'all':\n            copy = lambda ax: ax.copy(deep=True)\n        else:\n            copy = lambda ax: ax.view()\n        new_axes = [copy(ax) for ax in self.axes]\n    else:\n        new_axes = list(self.axes)\n    return self.apply('copy', axes=new_axes, deep=deep, do_integrity_check=False)",
                            "def as_array(self, transpose=False, items=None):\n    \"\"\"Convert the blockmanager data into an numpy array.\n\n    Parameters\n    ----------\n    transpose : boolean, default False\n        If True, transpose the return array\n    items : list of strings or None\n        Names of block items that will be included in the returned\n        array. ``None`` means that all block items will be used\n\n    Returns\n    -------\n    arr : ndarray\n    \"\"\"\n    if len(self.blocks) == 0:\n        arr = np.empty(self.shape, dtype=float)\n        return arr.transpose() if transpose else arr\n    if items is not None:\n        mgr = self.reindex_axis(items, axis=0)\n    else:\n        mgr = self\n    if self._is_single_block and mgr.blocks[0].is_datetimetz:\n        arr = mgr.blocks[0].get_values(dtype=object)\n    elif self._is_single_block or not self.is_mixed_type:\n        arr = np.asarray(mgr.blocks[0].get_values())\n    else:\n        arr = mgr._interleave()\n    return arr.transpose() if transpose else arr",
                            "def _interleave(self):\n    \"\"\"\n    Return ndarray from blocks with specified item order\n    Items must be contained in the blocks\n    \"\"\"\n    dtype = _interleaved_dtype(self.blocks)\n    if is_sparse(dtype):\n        dtype = dtype.subtype\n    elif is_extension_array_dtype(dtype):\n        dtype = 'object'\n    result = np.empty(self.shape, dtype=dtype)\n    itemmask = np.zeros(self.shape[0])\n    for blk in self.blocks:\n        rl = blk.mgr_locs\n        result[rl.indexer] = blk.get_values(dtype)\n        itemmask[rl.indexer] = 1\n    if not itemmask.all():\n        raise AssertionError('Some items were not contained in blocks')\n    return result",
                            "def to_dict(self, copy=True):\n    \"\"\"\n    Return a dict of str(dtype) -> BlockManager\n\n    Parameters\n    ----------\n    copy : boolean, default True\n\n    Returns\n    -------\n    values : a dict of dtype -> BlockManager\n\n    Notes\n    -----\n    This consolidates based on str(dtype)\n    \"\"\"\n    self._consolidate_inplace()\n    bd = {}\n    for b in self.blocks:\n        bd.setdefault(str(b.dtype), []).append(b)\n    return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
                            "def fast_xs(self, loc):\n    \"\"\"\n    get a cross sectional for a given location in the\n    items ; handle dups\n\n    return the result, is *could* be a view in the case of a\n    single block\n    \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].iget((slice(None), loc))\n    items = self.items\n    if not items.is_unique:\n        result = self._interleave()\n        if self.ndim == 2:\n            result = result.T\n        return result[loc]\n    dtype = _interleaved_dtype(self.blocks)\n    n = len(items)\n    if is_extension_array_dtype(dtype):\n        result = np.empty(n, dtype=object)\n    else:\n        result = np.empty(n, dtype=dtype)\n    for blk in self.blocks:\n        for i, rl in enumerate(blk.mgr_locs):\n            result[rl] = blk.iget((i, loc))\n    if is_extension_array_dtype(dtype):\n        result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n    return result",
                            "def consolidate(self):\n    \"\"\"\n    Join together blocks having same dtype\n\n    Returns\n    -------\n    y : BlockManager\n    \"\"\"\n    if self.is_consolidated():\n        return self\n    bm = self.__class__(self.blocks, self.axes)\n    bm._is_consolidated = False\n    bm._consolidate_inplace()\n    return bm",
                            "def _consolidate_inplace(self):\n    if not self.is_consolidated():\n        self.blocks = tuple(_consolidate(self.blocks))\n        self._is_consolidated = True\n        self._known_consolidated = True\n        self._rebuild_blknos_and_blklocs()",
                            "def get(self, item):\n    \"\"\"\n    Return values for selected item (ndarray or BlockManager).\n    \"\"\"\n    if self.items.is_unique:\n        if not isna(item):\n            loc = self.items.get_loc(item)\n        else:\n            indexer = np.arange(len(self.items))[isna(self.items)]\n            if not is_scalar(indexer):\n                if len(indexer) == 1:\n                    loc = indexer.item()\n                else:\n                    raise ValueError('cannot label index with a null key')\n        return self.iget(loc)\n    else:\n        if isna(item):\n            raise TypeError('cannot label index with a null key')\n        indexer = self.items.get_indexer_for([item])\n        return self.reindex_indexer(new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True)",
                            "def iget(self, i):\n    \"\"\"\n    Return the data as a SingleBlockManager if possible\n\n    Otherwise return as a ndarray\n    \"\"\"\n    block = self.blocks[self._blknos[i]]\n    values = block.iget(self._blklocs[i])\n    return SingleBlockManager([block.make_block_same_class(values, placement=slice(0, len(values)), ndim=1)], self.axes[1])",
                            "def delete(self, item):\n    \"\"\"\n    Delete selected item (items if non-unique) in-place.\n    \"\"\"\n    indexer = self.items.get_loc(item)\n    is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n    is_deleted[indexer] = True\n    ref_loc_offset = -is_deleted.cumsum()\n    is_blk_deleted = [False] * len(self.blocks)\n    if isinstance(indexer, int):\n        affected_start = indexer\n    else:\n        affected_start = is_deleted.nonzero()[0][0]\n    for blkno, _ in _fast_count_smallints(self._blknos[affected_start:]):\n        blk = self.blocks[blkno]\n        bml = blk.mgr_locs\n        blk_del = is_deleted[bml.indexer].nonzero()[0]\n        if len(blk_del) == len(bml):\n            is_blk_deleted[blkno] = True\n            continue\n        elif len(blk_del) != 0:\n            blk.delete(blk_del)\n            bml = blk.mgr_locs\n        blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n    self.axes[0] = self.items[~is_deleted]\n    self.blocks = tuple((b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]))\n    self._shape = None\n    self._rebuild_blknos_and_blklocs()",
                            "def set(self, item, value):\n    \"\"\"\n    Set new item in-place. Does not consolidate. Adds new Block if not\n    contained in the current set of items\n    \"\"\"\n    value_is_extension_type = is_extension_array_dtype(value)\n    if value_is_extension_type:\n\n        def value_getitem(placement):\n            return value\n    else:\n        if value.ndim == self.ndim - 1:\n            value = _safe_reshape(value, (1,) + value.shape)\n\n            def value_getitem(placement):\n                return value\n        else:\n\n            def value_getitem(placement):\n                return value[placement.indexer]\n        if value.shape[1:] != self.shape[1:]:\n            raise AssertionError('Shape of new values must be compatible with manager shape')\n    try:\n        loc = self.items.get_loc(item)\n    except KeyError:\n        self.insert(len(self.items), item, value)\n        return\n    if isinstance(loc, int):\n        loc = [loc]\n    blknos = self._blknos[loc]\n    blklocs = self._blklocs[loc].copy()\n    unfit_mgr_locs = []\n    unfit_val_locs = []\n    removed_blknos = []\n    for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n        blk = self.blocks[blkno]\n        blk_locs = blklocs[val_locs.indexer]\n        if blk.should_store(value):\n            blk.set(blk_locs, value_getitem(val_locs))\n        else:\n            unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n            unfit_val_locs.append(val_locs)\n            if len(val_locs) == len(blk.mgr_locs):\n                removed_blknos.append(blkno)\n            else:\n                self._blklocs[blk.mgr_locs.indexer] = -1\n                blk.delete(blk_locs)\n                self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n    if len(removed_blknos):\n        is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n        is_deleted[removed_blknos] = True\n        new_blknos = np.empty(self.nblocks, dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n        self._blknos = algos.take_1d(new_blknos, self._blknos, axis=0, allow_fill=False)\n        self.blocks = tuple((blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)))\n    if unfit_val_locs:\n        unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n        unfit_count = len(unfit_mgr_locs)\n        new_blocks = []\n        if value_is_extension_type:\n            new_blocks.extend((make_block(values=value.copy(), ndim=self.ndim, placement=slice(mgr_loc, mgr_loc + 1)) for mgr_loc in unfit_mgr_locs))\n            self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = 0\n        else:\n            unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n            new_blocks.append(make_block(values=value_getitem(unfit_val_items), ndim=self.ndim, placement=unfit_mgr_locs))\n            self._blknos[unfit_mgr_locs] = len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n        self.blocks += tuple(new_blocks)\n        self._known_consolidated = False",
                            "def insert(self, loc: int, item, value, allow_duplicates: bool=False):\n    \"\"\"\n    Insert item at selected position.\n\n    Parameters\n    ----------\n    loc : int\n    item : hashable\n    value : array_like\n    allow_duplicates: bool\n        If False, trying to insert non-unique item will raise\n\n    \"\"\"\n    if not allow_duplicates and item in self.items:\n        raise ValueError('cannot insert {}, already exists'.format(item))\n    if not isinstance(loc, int):\n        raise TypeError('loc must be int')\n    new_axis = self.items.insert(loc, item)\n    block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n    for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n        blk = self.blocks[blkno]\n        if count == len(blk.mgr_locs):\n            blk.mgr_locs = blk.mgr_locs.add(1)\n        else:\n            new_mgr_locs = blk.mgr_locs.as_array.copy()\n            new_mgr_locs[new_mgr_locs >= loc] += 1\n            blk.mgr_locs = new_mgr_locs\n    if loc == self._blklocs.shape[0]:\n        self._blklocs = np.append(self._blklocs, 0)\n        self._blknos = np.append(self._blknos, len(self.blocks))\n    else:\n        self._blklocs = np.insert(self._blklocs, loc, 0)\n        self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n    self.axes[0] = new_axis\n    self.blocks += (block,)\n    self._shape = None\n    self._known_consolidated = False\n    if len(self.blocks) > 100:\n        self._consolidate_inplace()",
                            "def reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True):\n    \"\"\"\n    Conform block manager to new index.\n    \"\"\"\n    new_index = ensure_index(new_index)\n    new_index, indexer = self.axes[axis].reindex(new_index, method=method, limit=limit)\n    return self.reindex_indexer(new_index, indexer, axis=axis, fill_value=fill_value, copy=copy)",
                            "def reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True):\n    \"\"\"\n    Parameters\n    ----------\n    new_axis : Index\n    indexer : ndarray of int64 or None\n    axis : int\n    fill_value : object\n    allow_dups : bool\n\n    pandas-indexer with -1's only.\n    \"\"\"\n    if indexer is None:\n        if new_axis is self.axes[axis] and (not copy):\n            return self\n        result = self.copy(deep=copy)\n        result.axes = list(self.axes)\n        result.axes[axis] = new_axis\n        return result\n    self._consolidate_inplace()\n    if not allow_dups:\n        self.axes[axis]._can_reindex(indexer)\n    if axis >= self.ndim:\n        raise IndexError('Requested axis not found in manager')\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n    else:\n        new_blocks = [blk.take_nd(indexer, axis=axis, fill_tuple=(fill_value if fill_value is not None else blk.fill_value,)) for blk in self.blocks]\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axis\n    return self.__class__(new_blocks, new_axes)",
                            "def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n    \"\"\"\n    Slice/take blocks along axis=0.\n\n    Overloaded for SingleBlock\n\n    Returns\n    -------\n    new_blocks : list of Block\n    \"\"\"\n    allow_fill = fill_tuple is not None\n    sl_type, slobj, sllen = _preprocess_slice_or_indexer(slice_or_indexer, self.shape[0], allow_fill=allow_fill)\n    if self._is_single_block:\n        blk = self.blocks[0]\n        if sl_type in ('slice', 'mask'):\n            return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n        elif not allow_fill or self.ndim == 1:\n            if allow_fill and fill_tuple[0] is None:\n                _, fill_value = maybe_promote(blk.dtype)\n                fill_tuple = (fill_value,)\n            return [blk.take_nd(slobj, axis=0, new_mgr_locs=slice(0, sllen), fill_tuple=fill_tuple)]\n    if sl_type in ('slice', 'mask'):\n        blknos = self._blknos[slobj]\n        blklocs = self._blklocs[slobj]\n    else:\n        blknos = algos.take_1d(self._blknos, slobj, fill_value=-1, allow_fill=allow_fill)\n        blklocs = algos.take_1d(self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill)\n    blocks = []\n    for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n        if blkno == -1:\n            fill_value = fill_tuple[0]\n            blocks.append(self._make_na_block(placement=mgr_locs, fill_value=fill_value))\n        else:\n            blk = self.blocks[blkno]\n            if not blk._can_consolidate:\n                for mgr_loc in mgr_locs:\n                    newblk = blk.copy(deep=True)\n                    newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                    blocks.append(newblk)\n            else:\n                blocks.append(blk.take_nd(blklocs[mgr_locs.indexer], axis=0, new_mgr_locs=mgr_locs, fill_tuple=None))\n    return blocks",
                            "def _make_na_block(self, placement, fill_value=None):\n    if fill_value is None:\n        fill_value = np.nan\n    block_shape = list(self.shape)\n    block_shape[0] = len(placement)\n    dtype, fill_value = infer_dtype_from_scalar(fill_value)\n    block_values = np.empty(block_shape, dtype=dtype)\n    block_values.fill(fill_value)\n    return make_block(block_values, placement=placement)",
                            "def take(self, indexer, axis=1, verify=True, convert=True):\n    \"\"\"\n    Take items along any axis.\n    \"\"\"\n    self._consolidate_inplace()\n    indexer = np.arange(indexer.start, indexer.stop, indexer.step, dtype='int64') if isinstance(indexer, slice) else np.asanyarray(indexer, dtype='int64')\n    n = self.shape[axis]\n    if convert:\n        indexer = maybe_convert_indices(indexer, n)\n    if verify:\n        if ((indexer == -1) | (indexer >= n)).any():\n            raise Exception('Indices must be nonzero and less than the axis length')\n    new_labels = self.axes[axis].take(indexer)\n    return self.reindex_indexer(new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True)",
                            "def equals(self, other):\n    self_axes, other_axes = (self.axes, other.axes)\n    if len(self_axes) != len(other_axes):\n        return False\n    if not all((ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes))):\n        return False\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    if len(self.blocks) != len(other.blocks):\n        return False\n\n    def canonicalize(block):\n        return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all((block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)))",
                            "def unstack(self, unstacker_func, fill_value):\n    \"\"\"Return a blockmanager with all blocks unstacked.\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        A (partially-applied) ``pd.core.reshape._Unstacker`` class.\n    fill_value : Any\n        fill_value for newly introduced missing values.\n\n    Returns\n    -------\n    unstacked : BlockManager\n    \"\"\"\n    n_rows = self.shape[-1]\n    dummy = unstacker_func(np.empty((0, 0)), value_columns=self.items)\n    new_columns = dummy.get_new_columns()\n    new_index = dummy.get_new_index()\n    new_blocks = []\n    columns_mask = []\n    for blk in self.blocks:\n        blocks, mask = blk._unstack(partial(unstacker_func, value_columns=self.items[blk.mgr_locs.indexer]), new_columns, n_rows, fill_value)\n        new_blocks.extend(blocks)\n        columns_mask.extend(mask)\n    new_columns = new_columns[columns_mask]\n    bm = BlockManager(new_blocks, [new_columns, new_index])\n    return bm",
                            "def unpickle_block(values, mgr_locs):\n    return make_block(values, placement=mgr_locs)",
                            "def get_axe(block, qs, axes):\n    from pandas import Float64Index\n    if is_list_like(qs):\n        ax = Float64Index(qs)\n    else:\n        ax = axes[0]\n    return ax",
                            "def comp(s, regex=False):\n    \"\"\"\n    Generate a bool array by perform an equality check, or perform\n    an element-wise regular expression matching\n    \"\"\"\n    if isna(s):\n        return isna(values)\n    if isinstance(s, (Timedelta, Timestamp)) and getattr(s, 'tz', None) is None:\n        return _compare_or_regex_search(maybe_convert_objects(values), s.asm8, regex)\n    return _compare_or_regex_search(values, s, regex)",
                            "def canonicalize(block):\n    return (block.mgr_locs.as_array.tolist(), block.dtype.name)",
                            "def value_getitem(placement):\n    return value",
                            "def value_getitem(placement):\n    return value",
                            "def value_getitem(placement):\n    return value[placement.indexer]"
                        ],
                        "constructor_variables": [
                            "axes",
                            "blocks"
                        ],
                        "class_level_variables": [
                            "__slots__",
                            "__bool__"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
                            "make_empty(self, axes=None)",
                            "__nonzero__(self)",
                            "shape(self)",
                            "ndim(self) -> int",
                            "set_axis(self, axis, new_labels)",
                            "rename_axis(self, mapper, axis, copy=True, level=None)",
                            "_is_single_block(self)",
                            "_rebuild_blknos_and_blklocs(self)",
                            "items(self)",
                            "_get_counts(self, f)",
                            "get_dtype_counts(self)",
                            "get_ftype_counts(self)",
                            "get_dtypes(self)",
                            "get_ftypes(self)",
                            "__getstate__(self)",
                            "__setstate__(self, state)",
                            "_post_setstate(self)",
                            "__len__(self) -> int",
                            "__repr__(self) -> str",
                            "_verify_integrity(self)",
                            "apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
                            "quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None)",
                            "isna(self, func, **kwargs)",
                            "where(self, **kwargs)",
                            "setitem(self, **kwargs)",
                            "putmask(self, **kwargs)",
                            "diff(self, **kwargs)",
                            "interpolate(self, **kwargs)",
                            "shift(self, **kwargs)",
                            "fillna(self, **kwargs)",
                            "downcast(self, **kwargs)",
                            "astype(self, dtype, **kwargs)",
                            "convert(self, **kwargs)",
                            "replace(self, value, **kwargs)",
                            "replace_list(self, src_list, dest_list, inplace=False, regex=False)",
                            "is_consolidated(self)",
                            "_consolidate_check(self)",
                            "is_mixed_type(self)",
                            "is_numeric_mixed_type(self)",
                            "is_datelike_mixed_type(self)",
                            "any_extension_types(self)",
                            "is_view(self)",
                            "get_bool_data(self, copy=False)",
                            "get_numeric_data(self, copy=False)",
                            "combine(self, blocks, copy=True)",
                            "get_slice(self, slobj, axis=0)",
                            "__contains__(self, item)",
                            "nblocks(self)",
                            "copy(self, deep=True)",
                            "as_array(self, transpose=False, items=None)",
                            "_interleave(self)",
                            "to_dict(self, copy=True)",
                            "fast_xs(self, loc)",
                            "consolidate(self)",
                            "_consolidate_inplace(self)",
                            "get(self, item)",
                            "iget(self, i)",
                            "delete(self, item)",
                            "set(self, item, value)",
                            "insert(self, loc: int, item, value, allow_duplicates: bool=False)",
                            "reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True)",
                            "reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True)",
                            "_slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
                            "_make_na_block(self, placement, fill_value=None)",
                            "take(self, indexer, axis=1, verify=True, convert=True)",
                            "equals(self, other)",
                            "unstack(self, unstacker_func, fill_value)",
                            "unpickle_block(values, mgr_locs)",
                            "get_axe(block, qs, axes)",
                            "comp(s, regex=False)",
                            "canonicalize(block)",
                            "value_getitem(placement)",
                            "value_getitem(placement)",
                            "value_getitem(placement)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x1179cd820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x1179cd820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x1179cd820>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x1179ae710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x117930540>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1178d2480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x11798f790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x11798f790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x11798f790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x117996530>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x117ba4140>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x117ba4200>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a2eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a2eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a2eaf0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x117a4a350>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x117af3040>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x117af3080>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a42310>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a42310>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a42310>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x117996da0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x1179933c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x11fbad480>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a43e50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a43e50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x117a43e50>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x108c12b70>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x117ba4880>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x1179b68c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x112a83220>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114ee3790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114ee3790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114ee3790>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[DatetimeBlock: slice(0, 1, 1), 1 x 1, dtype: datetime64[ns]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[DatetimeBlock: slice(0, 1, 1), 1 x 1, dtype: datetime64[ns]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "Timestamp('2017-08-27 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(Timestamp('2017-08-27 00:00:00'), Timestamp('2017-08-27 00:00:00'))",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[DatetimeBlock: slice(0, 1, 1), 1 x 1, dtype: datetime64[ns]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[[DatetimeBlock: slice(0, 1, 1), 1 x 1, dtype: datetime64[ns]]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x114ec0620>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x114e42500>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x114de43c0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nDatetimeBlock: slice(0, 1, 1), 1 x 1, dtype: datetime64[ns]",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nDatetimeBlock: slice(0, 1, 1), 1 x 1, dtype: datetime64[ns]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114efa670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114efa670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114efa670>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1",
                                    "variable_type": "int8",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x114f0bf30>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x114efdf40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x114e36680>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nIntBlock: slice(0, 1, 1), 1 x 1, dtype: int64",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nIntBlock: slice(0, 1, 1), 1 x 1, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114f25160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114f25160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114f25160>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1",
                                    "variable_type": "int16",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1, 1)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[[IntBlock: slice(0, 1, 1), 1 x 1, dtype: int64]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x114f0b3a0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x114ec6bc0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x114ef8d80>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nIntBlock: slice(0, 1, 1), 1 x 1, dtype: int64",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nIntBlock: slice(0, 1, 1), 1 x 1, dtype: int64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114f314c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114f314c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114f314c0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1.0",
                                    "variable_type": "float32",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x114f28710>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x114ec4d00>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x114edfe40>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nFloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nFloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'a'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114efab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114efab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "comp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "src_len": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "blk.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "convert": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b._replace_coerce": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "inplace": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "validate_bool_kwarg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": "array([['a']], dtype=object)",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.as_array": {
                                    "variable_value": "<bound method BlockManager.as_array of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s": {
                                    "variable_value": "'b'",
                                    "variable_type": "str",
                                    "variable_shape": "1"
                                },
                                "Timedelta": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_compare_or_regex_search": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "maybe_convert_objects": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "s.asm8": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "regex": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "masks": {
                                    "variable_value": "[array([[ True]]), array([[False]])]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "comp": {
                                    "variable_value": "<function BlockManager.replace_list.<locals>.comp at 0x114efab80>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                },
                                "i": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "src_list": {
                                    "variable_value": "('a', 'b')",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "result_blocks": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "src_len": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "blk": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "self.blocks": {
                                    "variable_value": "(ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object,)",
                                    "variable_type": "tuple",
                                    "variable_shape": "1"
                                },
                                "rb": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "blk.copy": {
                                    "variable_value": "<bound method Block.copy of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": "1.0",
                                    "variable_type": "float64",
                                    "variable_shape": "()"
                                },
                                "dest_list": {
                                    "variable_value": "(1.0, 1.0)",
                                    "variable_type": "tuple",
                                    "variable_shape": "2"
                                },
                                "new_rb": {
                                    "variable_value": "[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b": {
                                    "variable_value": "ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object",
                                    "variable_type": "ObjectBlock",
                                    "variable_shape": "1"
                                },
                                "m": {
                                    "variable_value": "array([[False]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "b.mgr_locs.indexer": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "b.mgr_locs": {
                                    "variable_value": "BlockPlacement(slice(0, 1, 1))",
                                    "variable_type": "BlockPlacement",
                                    "variable_shape": "1"
                                },
                                "convert": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": "[[FloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64]]",
                                    "variable_type": "list",
                                    "variable_shape": "1"
                                },
                                "b._replace_coerce": {
                                    "variable_value": "<bound method ObjectBlock._replace_coerce of ObjectBlock: slice(0, 1, 1), 1 x 1, dtype: object>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "m.any": {
                                    "variable_value": "<built-in method any of numpy.ndarray object at 0x114f48e90>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "_extend_blocks": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "new_rb.append": {
                                    "variable_value": "<built-in method append of list object at 0x114ef8ec0>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "result_blocks.extend": {
                                    "variable_value": "<built-in method extend of list object at 0x114edf800>",
                                    "variable_type": "builtin_function_or_method",
                                    "variable_shape": null
                                },
                                "bm": {
                                    "variable_value": "BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nFloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64",
                                    "variable_type": "BlockManager",
                                    "variable_shape": "1"
                                },
                                "self.__class__": {
                                    "variable_value": "<class 'pandas.core.internals.managers.BlockManager'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x10ff602c0>"
                                },
                                "self.axes": {
                                    "variable_value": "[RangeIndex(start=0, stop=1, step=1), RangeIndex(start=0, stop=1, step=1)]",
                                    "variable_type": "list",
                                    "variable_shape": "2"
                                },
                                "bm._consolidate_inplace": {
                                    "variable_value": "<bound method BlockManager._consolidate_inplace of BlockManager\nItems: RangeIndex(start=0, stop=1, step=1)\nAxis 1: RangeIndex(start=0, stop=1, step=1)\nFloatBlock: slice(0, 1, 1), 1 x 1, dtype: float64>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def create_block_manager_from_blocks(blocks, axes):\n    try:\n        if len(blocks) == 1 and not isinstance(blocks[0], Block):\n            # if blocks[0] is of length 0, return empty blocks\n            if not len(blocks[0]):\n                blocks = []\n            else:\n                # It's OK if a single block is passed as values, its placement\n                # is basically \"all items\", but if there're many, don't bother\n                # converting, it's an error anyway.\n                blocks = [\n                    make_block(values=blocks[0], placement=slice(0, len(axes[0])))\n                ]\n\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n\n    except ValueError as e:\n        blocks = [getattr(b, \"values\", b) for b in blocks]\n        tot_items = sum(b.shape[0] for b in blocks)\n        construction_error(tot_items, blocks[0].shape[1:], axes, e)",
                "def create_block_manager_from_arrays(arrays, names, axes):\n\n    try:\n        blocks = form_blocks(arrays, names, axes)\n        mgr = BlockManager(blocks, axes)\n        mgr._consolidate_inplace()\n        return mgr\n    except ValueError as e:\n        construction_error(len(arrays), arrays[0].shape, axes, e)",
                "def construction_error(tot_items, block_shape, axes, e=None):\n    \"\"\" raise a helpful message about our construction \"\"\"\n    passed = tuple(map(int, [tot_items] + list(block_shape)))\n    # Correcting the user facing error message during dataframe construction\n    if len(passed) <= 2:\n        passed = passed[::-1]\n\n    implied = tuple(len(ax) for ax in axes)\n    # Correcting the user facing error message during dataframe construction\n    if len(implied) <= 2:\n        implied = implied[::-1]\n\n    if passed == implied and e is not None:\n        raise e\n    if block_shape[0] == 0:\n        raise ValueError(\"Empty data passed with indices specified.\")\n    raise ValueError(\n        \"Shape of passed values is {0}, indices imply {1}\".format(passed, implied)\n    )",
                "def form_blocks(arrays, names, axes):\n    # put \"leftover\" items in float bucket, where else?\n    # generalize?\n    items_dict = defaultdict(list)\n    extra_locs = []\n\n    names_idx = ensure_index(names)\n    if names_idx.equals(axes[0]):\n        names_indexer = np.arange(len(names_idx))\n    else:\n        assert names_idx.intersection(axes[0]).is_unique\n        names_indexer = names_idx.get_indexer_for(axes[0])\n\n    for i, name_idx in enumerate(names_indexer):\n        if name_idx == -1:\n            extra_locs.append(i)\n            continue\n\n        k = names[name_idx]\n        v = arrays[name_idx]\n\n        block_type = get_block_type(v)\n        items_dict[block_type.__name__].append((i, k, v))\n\n    blocks = []\n    if len(items_dict[\"FloatBlock\"]):\n        float_blocks = _multi_blockify(items_dict[\"FloatBlock\"])\n        blocks.extend(float_blocks)\n\n    if len(items_dict[\"ComplexBlock\"]):\n        complex_blocks = _multi_blockify(items_dict[\"ComplexBlock\"])\n        blocks.extend(complex_blocks)\n\n    if len(items_dict[\"TimeDeltaBlock\"]):\n        timedelta_blocks = _multi_blockify(items_dict[\"TimeDeltaBlock\"])\n        blocks.extend(timedelta_blocks)\n\n    if len(items_dict[\"IntBlock\"]):\n        int_blocks = _multi_blockify(items_dict[\"IntBlock\"])\n        blocks.extend(int_blocks)\n\n    if len(items_dict[\"DatetimeBlock\"]):\n        datetime_blocks = _simple_blockify(items_dict[\"DatetimeBlock\"], _NS_DTYPE)\n        blocks.extend(datetime_blocks)\n\n    if len(items_dict[\"DatetimeTZBlock\"]):\n        dttz_blocks = [\n            make_block(array, klass=DatetimeTZBlock, placement=[i])\n            for i, _, array in items_dict[\"DatetimeTZBlock\"]\n        ]\n        blocks.extend(dttz_blocks)\n\n    if len(items_dict[\"BoolBlock\"]):\n        bool_blocks = _simple_blockify(items_dict[\"BoolBlock\"], np.bool_)\n        blocks.extend(bool_blocks)\n\n    if len(items_dict[\"ObjectBlock\"]) > 0:\n        object_blocks = _simple_blockify(items_dict[\"ObjectBlock\"], np.object_)\n        blocks.extend(object_blocks)\n\n    if len(items_dict[\"CategoricalBlock\"]) > 0:\n        cat_blocks = [\n            make_block(array, klass=CategoricalBlock, placement=[i])\n            for i, _, array in items_dict[\"CategoricalBlock\"]\n        ]\n        blocks.extend(cat_blocks)\n\n    if len(items_dict[\"ExtensionBlock\"]):\n\n        external_blocks = [\n            make_block(array, klass=ExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(items_dict[\"ObjectValuesExtensionBlock\"]):\n        external_blocks = [\n            make_block(array, klass=ObjectValuesExtensionBlock, placement=[i])\n            for i, _, array in items_dict[\"ObjectValuesExtensionBlock\"]\n        ]\n\n        blocks.extend(external_blocks)\n\n    if len(extra_locs):\n        shape = (len(extra_locs),) + tuple(len(x) for x in axes[1:])\n\n        # empty items -> dtype object\n        block_values = np.empty(shape, dtype=object)\n        block_values.fill(np.nan)\n\n        na_block = make_block(block_values, placement=extra_locs)\n        blocks.append(na_block)\n\n    return blocks",
                "def _simple_blockify(tuples, dtype):\n    \"\"\" return a single array of a block that has a single dtype; if dtype is\n    not None, coerce to this dtype\n    \"\"\"\n    values, placement = _stack_arrays(tuples, dtype)\n\n    # TODO: CHECK DTYPE?\n    if dtype is not None and values.dtype != dtype:  # pragma: no cover\n        values = values.astype(dtype)\n\n    block = make_block(values, placement=placement)\n    return [block]",
                "def _multi_blockify(tuples, dtype=None):\n    \"\"\" return an array of blocks that potentially have different dtypes \"\"\"\n\n    # group by dtype\n    grouper = itertools.groupby(tuples, lambda x: x[2].dtype)\n\n    new_blocks = []\n    for dtype, tup_block in grouper:\n\n        values, placement = _stack_arrays(list(tup_block), dtype)\n\n        block = make_block(values, placement=placement)\n        new_blocks.append(block)\n\n    return new_blocks",
                "def _stack_arrays(tuples, dtype):\n\n    # fml\n    def _asarray_compat(x):\n        if isinstance(x, ABCSeries):\n            return x._values\n        else:\n            return np.asarray(x)\n\n    def _shape_compat(x):\n        if isinstance(x, ABCSeries):\n            return (len(x),)\n        else:\n            return x.shape\n\n    placement, names, arrays = zip(*tuples)\n\n    first = arrays[0]\n    shape = (len(arrays),) + _shape_compat(first)\n\n    stacked = np.empty(shape, dtype=dtype)\n    for i, arr in enumerate(arrays):\n        stacked[i] = _asarray_compat(arr)\n\n    return stacked, placement",
                "def _interleaved_dtype(\n    blocks: List[Block],\n) -> Optional[Union[np.dtype, ExtensionDtype]]:\n    \"\"\"Find the common dtype for `blocks`.\n\n    Parameters\n    ----------\n    blocks : List[Block]\n\n    Returns\n    -------\n    dtype : Optional[Union[np.dtype, ExtensionDtype]]\n        None is returned when `blocks` is empty.\n    \"\"\"\n    if not len(blocks):\n        return None\n\n    return find_common_type([b.dtype for b in blocks])",
                "def _consolidate(blocks):\n    \"\"\"\n    Merge blocks having same dtype, exclude non-consolidating blocks\n    \"\"\"\n\n    # sort by _can_consolidate, dtype\n    gkey = lambda x: x._consolidate_key\n    grouper = itertools.groupby(sorted(blocks, key=gkey), gkey)\n\n    new_blocks = []\n    for (_can_consolidate, dtype), group_blocks in grouper:\n        merged_blocks = _merge_blocks(\n            list(group_blocks), dtype=dtype, _can_consolidate=_can_consolidate\n        )\n        new_blocks = _extend_blocks(merged_blocks, new_blocks)\n    return new_blocks",
                "def _compare_or_regex_search(a, b, regex=False):\n    \"\"\"\n    Compare two array_like inputs of the same shape or two scalar values\n\n    Calls operator.eq or re.search, depending on regex argument. If regex is\n    True, perform an element-wise regex matching.\n\n    Parameters\n    ----------\n    a : array_like or scalar\n    b : array_like or scalar\n    regex : bool, default False\n\n    Returns\n    -------\n    mask : array_like of bool\n    \"\"\"\n    if not regex:\n        op = lambda x: operator.eq(x, b)\n    else:\n        op = np.vectorize(\n            lambda x: bool(re.search(b, x)) if isinstance(x, str) else False\n        )\n\n    is_a_array = isinstance(a, np.ndarray)\n    is_b_array = isinstance(b, np.ndarray)\n\n    result = op(a)\n\n    if is_scalar(result) and (is_a_array or is_b_array):\n        type_names = [type(a).__name__, type(b).__name__]\n\n        if is_a_array:\n            type_names[0] = \"ndarray(dtype={dtype})\".format(dtype=a.dtype)\n\n        if is_b_array:\n            type_names[1] = \"ndarray(dtype={dtype})\".format(dtype=b.dtype)\n\n        raise TypeError(\n            \"Cannot compare types {a!r} and {b!r}\".format(\n                a=type_names[0], b=type_names[1]\n            )\n        )\n    return result",
                "def _transform_index(index, func, level=None):\n    \"\"\"\n    Apply function to all values found in index.\n\n    This includes transforming multiindex entries separately.\n    Only apply function to one level of the MultiIndex if level is specified.\n\n    \"\"\"\n    if isinstance(index, MultiIndex):\n        if level is not None:\n            items = [\n                tuple(func(y) if i == level else y for i, y in enumerate(x))\n                for x in index\n            ]\n        else:\n            items = [tuple(func(y) for y in x) for x in index]\n        return MultiIndex.from_tuples(items, names=index.names)\n    else:\n        items = [func(x) for x in index]\n        return Index(items, name=index.name, tupleize_cols=False)",
                "def _fast_count_smallints(arr):\n    \"\"\"Faster version of set(arr) for sequences of small numbers.\"\"\"\n    counts = np.bincount(arr.astype(np.int_))\n    nz = counts.nonzero()[0]\n    return np.c_[nz, counts[nz]]",
                "def _preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill):\n    if isinstance(slice_or_indexer, slice):\n        return (\n            \"slice\",\n            slice_or_indexer,\n            libinternals.slice_len(slice_or_indexer, length),\n        )\n    elif (\n        isinstance(slice_or_indexer, np.ndarray) and slice_or_indexer.dtype == np.bool_\n    ):\n        return \"mask\", slice_or_indexer, slice_or_indexer.sum()\n    else:\n        indexer = np.asanyarray(slice_or_indexer, dtype=np.int64)\n        if not allow_fill:\n            indexer = maybe_convert_indices(indexer, length)\n        return \"fancy\", indexer, len(indexer)",
                "def concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy):\n    \"\"\"\n    Concatenate block managers into one.\n\n    Parameters\n    ----------\n    mgrs_indexers : list of (BlockManager, {axis: indexer,...}) tuples\n    axes : list of Index\n    concat_axis : int\n    copy : bool\n\n    \"\"\"\n    concat_plans = [\n        get_mgr_concatenation_plan(mgr, indexers) for mgr, indexers in mgrs_indexers\n    ]\n    concat_plan = combine_concat_plans(concat_plans, concat_axis)\n    blocks = []\n\n    for placement, join_units in concat_plan:\n\n        if len(join_units) == 1 and not join_units[0].indexers:\n            b = join_units[0].block\n            values = b.values\n            if copy:\n                values = values.copy()\n            else:\n                values = values.view()\n            b = b.make_block_same_class(values, placement=placement)\n        elif is_uniform_join_units(join_units):\n            b = join_units[0].block.concat_same_type(\n                [ju.block for ju in join_units], placement=placement\n            )\n        else:\n            b = make_block(\n                concatenate_join_units(join_units, concat_axis, copy=copy),\n                placement=placement,\n            )\n        blocks.append(b)\n\n    return BlockManager(blocks, axes)",
                "def __init__(\n    self,\n    blocks: Sequence[Block],\n    axes: Sequence[Index],\n    do_integrity_check: bool = True,\n):\n    self.axes = [ensure_index(ax) for ax in axes]\n    self.blocks = tuple(blocks)  # type: Tuple[Block, ...]\n\n    for block in blocks:\n        if self.ndim != block.ndim:\n            raise AssertionError(\n                \"Number of Block dimensions ({block}) must equal \"\n                \"number of axes ({self})\".format(block=block.ndim, self=self.ndim)\n            )\n\n    if do_integrity_check:\n        self._verify_integrity()\n\n    self._consolidate_check()\n\n    self._rebuild_blknos_and_blklocs()",
                "def make_empty(self, axes=None):\n    \"\"\" return an empty BlockManager with the items axis of len 0 \"\"\"\n    if axes is None:\n        axes = [ensure_index([])] + [ensure_index(a) for a in self.axes[1:]]\n\n    # preserve dtype if possible\n    if self.ndim == 1:\n        blocks = np.array([], dtype=self.array_dtype)\n    else:\n        blocks = []\n    return self.__class__(blocks, axes)",
                "def __nonzero__(self):\n    return True",
                "@property\ndef shape(self):\n    return tuple(len(ax) for ax in self.axes)",
                "@property\ndef ndim(self) -> int:\n    return len(self.axes)",
                "def set_axis(self, axis, new_labels):\n    new_labels = ensure_index(new_labels)\n    old_len = len(self.axes[axis])\n    new_len = len(new_labels)\n\n    if new_len != old_len:\n        raise ValueError(\n            \"Length mismatch: Expected axis has {old} elements, new \"\n            \"values have {new} elements\".format(old=old_len, new=new_len)\n        )\n\n    self.axes[axis] = new_labels",
                "def rename_axis(self, mapper, axis, copy=True, level=None):\n    \"\"\"\n    Rename one of axes.\n\n    Parameters\n    ----------\n    mapper : unary callable\n    axis : int\n    copy : boolean, default True\n    level : int, default None\n    \"\"\"\n    obj = self.copy(deep=copy)\n    obj.set_axis(axis, _transform_index(self.axes[axis], mapper, level))\n    return obj",
                "@property\ndef _is_single_block(self):\n    if self.ndim == 1:\n        return True\n\n    if len(self.blocks) != 1:\n        return False\n\n    blk = self.blocks[0]\n    return blk.mgr_locs.is_slice_like and blk.mgr_locs.as_slice == slice(\n        0, len(self), 1\n    )",
                "def _rebuild_blknos_and_blklocs(self):\n    \"\"\"\n    Update mgr._blknos / mgr._blklocs.\n    \"\"\"\n    new_blknos = np.empty(self.shape[0], dtype=np.int64)\n    new_blklocs = np.empty(self.shape[0], dtype=np.int64)\n    new_blknos.fill(-1)\n    new_blklocs.fill(-1)\n\n    for blkno, blk in enumerate(self.blocks):\n        rl = blk.mgr_locs\n        new_blknos[rl.indexer] = blkno\n        new_blklocs[rl.indexer] = np.arange(len(rl))\n\n    if (new_blknos == -1).any():\n        raise AssertionError(\"Gaps in blk ref_locs\")\n\n    self._blknos = new_blknos\n    self._blklocs = new_blklocs",
                "@property\ndef items(self):\n    return self.axes[0]",
                "def _get_counts(self, f):\n    \"\"\" return a dict of the counts of the function in BlockManager \"\"\"\n    self._consolidate_inplace()\n    counts = dict()\n    for b in self.blocks:\n        v = f(b)\n        counts[v] = counts.get(v, 0) + b.shape[0]\n    return counts",
                "def get_dtype_counts(self):\n    return self._get_counts(lambda b: b.dtype.name)",
                "def get_ftype_counts(self):\n    return self._get_counts(lambda b: b.ftype)",
                "def get_dtypes(self):\n    dtypes = np.array([blk.dtype for blk in self.blocks])\n    return algos.take_1d(dtypes, self._blknos, allow_fill=False)",
                "def get_ftypes(self):\n    ftypes = np.array([blk.ftype for blk in self.blocks])\n    return algos.take_1d(ftypes, self._blknos, allow_fill=False)",
                "def __getstate__(self):\n    block_values = [b.values for b in self.blocks]\n    block_items = [self.items[b.mgr_locs.indexer] for b in self.blocks]\n    axes_array = list(self.axes)\n\n    extra_state = {\n        \"0.14.1\": {\n            \"axes\": axes_array,\n            \"blocks\": [\n                dict(values=b.values, mgr_locs=b.mgr_locs.indexer)\n                for b in self.blocks\n            ],\n        }\n    }\n\n    # First three elements of the state are to maintain forward\n    # compatibility with 0.13.1.\n    return axes_array, block_values, block_items, extra_state",
                "def __setstate__(self, state):\n    def unpickle_block(values, mgr_locs):\n        return make_block(values, placement=mgr_locs)\n\n    if isinstance(state, tuple) and len(state) >= 4 and \"0.14.1\" in state[3]:\n        state = state[3][\"0.14.1\"]\n        self.axes = [ensure_index(ax) for ax in state[\"axes\"]]\n        self.blocks = tuple(\n            unpickle_block(b[\"values\"], b[\"mgr_locs\"]) for b in state[\"blocks\"]\n        )\n    else:\n        # discard anything after 3rd, support beta pickling format for a\n        # little while longer\n        ax_arrays, bvalues, bitems = state[:3]\n\n        self.axes = [ensure_index(ax) for ax in ax_arrays]\n\n        if len(bitems) == 1 and self.axes[0].equals(bitems[0]):\n            # This is a workaround for pre-0.14.1 pickles that didn't\n            # support unpickling multi-block frames/panels with non-unique\n            # columns/items, because given a manager with items [\"a\", \"b\",\n            # \"a\"] there's no way of knowing which block's \"a\" is where.\n            #\n            # Single-block case can be supported under the assumption that\n            # block items corresponded to manager items 1-to-1.\n            all_mgr_locs = [slice(0, len(bitems[0]))]\n        else:\n            all_mgr_locs = [\n                self.axes[0].get_indexer(blk_items) for blk_items in bitems\n            ]\n\n        self.blocks = tuple(\n            unpickle_block(values, mgr_locs)\n            for values, mgr_locs in zip(bvalues, all_mgr_locs)\n        )\n\n    self._post_setstate()",
                "def _post_setstate(self):\n    self._is_consolidated = False\n    self._known_consolidated = False\n    self._rebuild_blknos_and_blklocs()",
                "def __len__(self) -> int:\n    return len(self.items)",
                "def __repr__(self) -> str:\n    output = pprint_thing(self.__class__.__name__)\n    for i, ax in enumerate(self.axes):\n        if i == 0:\n            output += \"\\nItems: {ax}\".format(ax=ax)\n        else:\n            output += \"\\nAxis {i}: {ax}\".format(i=i, ax=ax)\n\n    for block in self.blocks:\n        output += \"\\n{block}\".format(block=pprint_thing(block))\n    return output",
                "def _verify_integrity(self):\n    mgr_shape = self.shape\n    tot_items = sum(len(x.mgr_locs) for x in self.blocks)\n    for block in self.blocks:\n        if block._verify_integrity and block.shape[1:] != mgr_shape[1:]:\n            construction_error(tot_items, block.shape[1:], self.axes)\n    if len(self.items) != tot_items:\n        raise AssertionError(\n            \"Number of manager items must equal union of \"\n            \"block items\\n# manager items: {0}, # \"\n            \"tot_items: {1}\".format(len(self.items), tot_items)\n        )",
                "def apply(\n    self,\n    f,\n    axes=None,\n    filter=None,\n    do_integrity_check=False,\n    consolidate=True,\n    **kwargs,\n):\n    \"\"\"\n    iterate over the blocks, collect and create a new block manager\n\n    Parameters\n    ----------\n    f : the callable or function name to operate on at the block level\n    axes : optional (if not supplied, use self.axes)\n    filter : list, if supplied, only call the block if the filter is in\n             the block\n    do_integrity_check : boolean, default False. Do the block manager\n        integrity check\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n\n    Returns\n    -------\n    Block Manager (new object)\n\n    \"\"\"\n\n    result_blocks = []\n\n    # filter kwarg is used in replace-* family of methods\n    if filter is not None:\n        filter_locs = set(self.items.get_indexer_for(filter))\n        if len(filter_locs) == len(self.items):\n            # All items are included, as if there were no filtering\n            filter = None\n        else:\n            kwargs[\"filter\"] = filter_locs\n\n    if consolidate:\n        self._consolidate_inplace()\n\n    if f == \"where\":\n        align_copy = True\n        if kwargs.get(\"align\", True):\n            align_keys = [\"other\", \"cond\"]\n        else:\n            align_keys = [\"cond\"]\n    elif f == \"putmask\":\n        align_copy = False\n        if kwargs.get(\"align\", True):\n            align_keys = [\"new\", \"mask\"]\n        else:\n            align_keys = [\"mask\"]\n    elif f == \"fillna\":\n        # fillna internally does putmask, maybe it's better to do this\n        # at mgr, not block level?\n        align_copy = False\n        align_keys = [\"value\"]\n    else:\n        align_keys = []\n\n    # TODO(EA): may interfere with ExtensionBlock.setitem for blocks\n    # with a .values attribute.\n    aligned_args = {\n        k: kwargs[k]\n        for k in align_keys\n        if not isinstance(kwargs[k], ABCExtensionArray)\n        and hasattr(kwargs[k], \"values\")\n    }\n\n    for b in self.blocks:\n        if filter is not None:\n            if not b.mgr_locs.isin(filter_locs).any():\n                result_blocks.append(b)\n                continue\n\n        if aligned_args:\n            b_items = self.items[b.mgr_locs.indexer]\n\n            for k, obj in aligned_args.items():\n                axis = obj._info_axis_number\n                kwargs[k] = obj.reindex(b_items, axis=axis, copy=align_copy)\n\n        applied = getattr(b, f)(**kwargs)\n        result_blocks = _extend_blocks(applied, result_blocks)\n\n    if len(result_blocks) == 0:\n        return self.make_empty(axes or self.axes)\n    bm = self.__class__(\n        result_blocks, axes or self.axes, do_integrity_check=do_integrity_check\n    )\n    bm._consolidate_inplace()\n    return bm",
                "def quantile(\n    self,\n    axis=0,\n    consolidate=True,\n    transposed=False,\n    interpolation=\"linear\",\n    qs=None,\n    numeric_only=None,\n):\n    \"\"\"\n    Iterate over blocks applying quantile reduction.\n    This routine is intended for reduction type operations and\n    will do inference on the generated blocks.\n\n    Parameters\n    ----------\n    axis: reduction axis, default 0\n    consolidate: boolean, default True. Join together blocks having same\n        dtype\n    transposed: boolean, default False\n        we are holding transposed data\n    interpolation : type of interpolation, default 'linear'\n    qs : a scalar or list of the quantiles to be computed\n    numeric_only : ignored\n\n    Returns\n    -------\n    Block Manager (new object)\n    \"\"\"\n\n    # Series dispatches to DataFrame for quantile, which allows us to\n    #  simplify some of the code here and in the blocks\n    assert self.ndim >= 2\n\n    if consolidate:\n        self._consolidate_inplace()\n\n    def get_axe(block, qs, axes):\n        # Because Series dispatches to DataFrame, we will always have\n        #  block.ndim == 2\n        from pandas import Float64Index\n\n        if is_list_like(qs):\n            ax = Float64Index(qs)\n        else:\n            ax = axes[0]\n        return ax\n\n    axes, blocks = [], []\n    for b in self.blocks:\n        block = b.quantile(axis=axis, qs=qs, interpolation=interpolation)\n\n        axe = get_axe(b, qs, axes=self.axes)\n\n        axes.append(axe)\n        blocks.append(block)\n\n    # note that some DatetimeTZ, Categorical are always ndim==1\n    ndim = {b.ndim for b in blocks}\n    assert 0 not in ndim, ndim\n\n    if 2 in ndim:\n\n        new_axes = list(self.axes)\n\n        # multiple blocks that are reduced\n        if len(blocks) > 1:\n            new_axes[1] = axes[0]\n\n            # reset the placement to the original\n            for b, sb in zip(blocks, self.blocks):\n                b.mgr_locs = sb.mgr_locs\n\n        else:\n            new_axes[axis] = Index(np.concatenate([ax.values for ax in axes]))\n\n        if transposed:\n            new_axes = new_axes[::-1]\n            blocks = [\n                b.make_block(b.values.T, placement=np.arange(b.shape[1]))\n                for b in blocks\n            ]\n\n        return self.__class__(blocks, new_axes)\n\n    # single block, i.e. ndim == {1}\n    values = concat_compat([b.values for b in blocks])\n\n    # compute the orderings of our original data\n    if len(self.blocks) > 1:\n\n        indexer = np.empty(len(self.axes[0]), dtype=np.intp)\n        i = 0\n        for b in self.blocks:\n            for j in b.mgr_locs:\n                indexer[j] = i\n                i = i + 1\n\n        values = values.take(indexer)\n\n    return SingleBlockManager(\n        [make_block(values, ndim=1, placement=np.arange(len(values)))], axes[0]\n    )",
                "def isna(self, func, **kwargs):\n    return self.apply(\"apply\", func=func, **kwargs)",
                "def where(self, **kwargs):\n    return self.apply(\"where\", **kwargs)",
                "def setitem(self, **kwargs):\n    return self.apply(\"setitem\", **kwargs)",
                "def putmask(self, **kwargs):\n    return self.apply(\"putmask\", **kwargs)",
                "def diff(self, **kwargs):\n    return self.apply(\"diff\", **kwargs)",
                "def interpolate(self, **kwargs):\n    return self.apply(\"interpolate\", **kwargs)",
                "def shift(self, **kwargs):\n    return self.apply(\"shift\", **kwargs)",
                "def fillna(self, **kwargs):\n    return self.apply(\"fillna\", **kwargs)",
                "def downcast(self, **kwargs):\n    return self.apply(\"downcast\", **kwargs)",
                "def astype(self, dtype, **kwargs):\n    return self.apply(\"astype\", dtype=dtype, **kwargs)",
                "def convert(self, **kwargs):\n    return self.apply(\"convert\", **kwargs)",
                "def replace(self, value, **kwargs):\n    assert np.ndim(value) == 0, value\n    return self.apply(\"replace\", value=value, **kwargs)",
                "def replace_list(self, src_list, dest_list, inplace=False, regex=False):\n    \"\"\" do a list replace \"\"\"\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # figure out our mask a-priori to avoid repeated replacements\n    values = self.as_array()\n\n    def comp(s, regex=False):\n        \"\"\"\n        Generate a bool array by perform an equality check, or perform\n        an element-wise regular expression matching\n        \"\"\"\n        if isna(s):\n            return isna(values)\n        if isinstance(s, (Timedelta, Timestamp)) and getattr(s, \"tz\", None) is None:\n\n            return _compare_or_regex_search(\n                maybe_convert_objects(values), s.asm8, regex\n            )\n        return _compare_or_regex_search(values, s, regex)\n\n    masks = [comp(s, regex) for i, s in enumerate(src_list)]\n\n    result_blocks = []\n    src_len = len(src_list) - 1\n    for blk in self.blocks:\n\n        # its possible to get multiple result blocks here\n        # replace ALWAYS will return a list\n        rb = [blk if inplace else blk.copy()]\n        for i, (s, d) in enumerate(zip(src_list, dest_list)):\n            # TODO: assert/validate that `d` is always a scalar?\n            new_rb = []\n            for b in rb:\n                m = masks[i][b.mgr_locs.indexer]\n                convert = i == src_len\n                result = b._replace_coerce(\n                    mask=m,\n                    to_replace=s,\n                    value=d,\n                    inplace=inplace,\n                    convert=convert,\n                    regex=regex,\n                )\n                if m.any():\n                    new_rb = _extend_blocks(result, new_rb)\n                else:\n                    new_rb.append(b)\n            rb = new_rb\n        result_blocks.extend(rb)\n\n    bm = self.__class__(result_blocks, self.axes)\n    bm._consolidate_inplace()\n    return bm",
                "def is_consolidated(self):\n    \"\"\"\n    Return True if more than one block with the same dtype\n    \"\"\"\n    if not self._known_consolidated:\n        self._consolidate_check()\n    return self._is_consolidated",
                "def _consolidate_check(self):\n    ftypes = [blk.ftype for blk in self.blocks]\n    self._is_consolidated = len(ftypes) == len(set(ftypes))\n    self._known_consolidated = True",
                "@property\ndef is_mixed_type(self):\n    # Warning, consolidation needs to get checked upstairs\n    self._consolidate_inplace()\n    return len(self.blocks) > 1",
                "@property\ndef is_numeric_mixed_type(self):\n    # Warning, consolidation needs to get checked upstairs\n    self._consolidate_inplace()\n    return all(block.is_numeric for block in self.blocks)",
                "@property\ndef is_datelike_mixed_type(self):\n    # Warning, consolidation needs to get checked upstairs\n    self._consolidate_inplace()\n    return any(block.is_datelike for block in self.blocks)",
                "@property\ndef any_extension_types(self):\n    \"\"\"Whether any of the blocks in this manager are extension blocks\"\"\"\n    return any(block.is_extension for block in self.blocks)",
                "@property\ndef is_view(self):\n    \"\"\" return a boolean if we are a single block and are a view \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].is_view\n\n    # It is technically possible to figure out which blocks are views\n    # e.g. [ b.values.base is not None for b in self.blocks ]\n    # but then we have the case of possibly some blocks being a view\n    # and some blocks not. setting in theory is possible on the non-view\n    # blocks w/o causing a SettingWithCopy raise/warn. But this is a bit\n    # complicated\n\n    return False",
                "def get_bool_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_bool], copy)",
                "def get_numeric_data(self, copy=False):\n    \"\"\"\n    Parameters\n    ----------\n    copy : boolean, default False\n        Whether to copy the blocks\n    \"\"\"\n    self._consolidate_inplace()\n    return self.combine([b for b in self.blocks if b.is_numeric], copy)",
                "def combine(self, blocks, copy=True):\n    \"\"\" return a new manager with the blocks \"\"\"\n    if len(blocks) == 0:\n        return self.make_empty()\n\n    # FIXME: optimization potential\n    indexer = np.sort(np.concatenate([b.mgr_locs.as_array for b in blocks]))\n    inv_indexer = lib.get_reverse_indexer(indexer, self.shape[0])\n\n    new_blocks = []\n    for b in blocks:\n        b = b.copy(deep=copy)\n        b.mgr_locs = algos.take_1d(\n            inv_indexer, b.mgr_locs.as_array, axis=0, allow_fill=False\n        )\n        new_blocks.append(b)\n\n    axes = list(self.axes)\n    axes[0] = self.items.take(indexer)\n\n    return self.__class__(new_blocks, axes, do_integrity_check=False)",
                "def get_slice(self, slobj, axis=0):\n    if axis >= self.ndim:\n        raise IndexError(\"Requested axis not found in manager\")\n\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(slobj)\n    else:\n        slicer = [slice(None)] * (axis + 1)\n        slicer[axis] = slobj\n        slicer = tuple(slicer)\n        new_blocks = [blk.getitem_block(slicer) for blk in self.blocks]\n\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axes[axis][slobj]\n\n    bm = self.__class__(new_blocks, new_axes, do_integrity_check=False)\n    bm._consolidate_inplace()\n    return bm",
                "def __contains__(self, item):\n    return item in self.items",
                "@property\ndef nblocks(self):\n    return len(self.blocks)",
                "def copy(self, deep=True):\n    \"\"\"\n    Make deep or shallow copy of BlockManager\n\n    Parameters\n    ----------\n    deep : boolean o rstring, default True\n        If False, return shallow copy (do not copy data)\n        If 'all', copy data and a deep copy of the index\n\n    Returns\n    -------\n    copy : BlockManager\n    \"\"\"\n    # this preserves the notion of view copying of axes\n    if deep:\n        if deep == \"all\":\n            copy = lambda ax: ax.copy(deep=True)\n        else:\n            copy = lambda ax: ax.view()\n        new_axes = [copy(ax) for ax in self.axes]\n    else:\n        new_axes = list(self.axes)\n    return self.apply(\"copy\", axes=new_axes, deep=deep, do_integrity_check=False)",
                "def as_array(self, transpose=False, items=None):\n    \"\"\"Convert the blockmanager data into an numpy array.\n\n    Parameters\n    ----------\n    transpose : boolean, default False\n        If True, transpose the return array\n    items : list of strings or None\n        Names of block items that will be included in the returned\n        array. ``None`` means that all block items will be used\n\n    Returns\n    -------\n    arr : ndarray\n    \"\"\"\n    if len(self.blocks) == 0:\n        arr = np.empty(self.shape, dtype=float)\n        return arr.transpose() if transpose else arr\n\n    if items is not None:\n        mgr = self.reindex_axis(items, axis=0)\n    else:\n        mgr = self\n\n    if self._is_single_block and mgr.blocks[0].is_datetimetz:\n        # TODO(Block.get_values): Make DatetimeTZBlock.get_values\n        # always be object dtype. Some callers seem to want the\n        # DatetimeArray (previously DTI)\n        arr = mgr.blocks[0].get_values(dtype=object)\n    elif self._is_single_block or not self.is_mixed_type:\n        arr = np.asarray(mgr.blocks[0].get_values())\n    else:\n        arr = mgr._interleave()\n\n    return arr.transpose() if transpose else arr",
                "def _interleave(self):\n    \"\"\"\n    Return ndarray from blocks with specified item order\n    Items must be contained in the blocks\n    \"\"\"\n    dtype = _interleaved_dtype(self.blocks)\n\n    # TODO: https://github.com/pandas-dev/pandas/issues/22791\n    # Give EAs some input on what happens here. Sparse needs this.\n    if is_sparse(dtype):\n        dtype = dtype.subtype\n    elif is_extension_array_dtype(dtype):\n        dtype = \"object\"\n\n    result = np.empty(self.shape, dtype=dtype)\n\n    itemmask = np.zeros(self.shape[0])\n\n    for blk in self.blocks:\n        rl = blk.mgr_locs\n        result[rl.indexer] = blk.get_values(dtype)\n        itemmask[rl.indexer] = 1\n\n    if not itemmask.all():\n        raise AssertionError(\"Some items were not contained in blocks\")\n\n    return result",
                "def to_dict(self, copy=True):\n    \"\"\"\n    Return a dict of str(dtype) -> BlockManager\n\n    Parameters\n    ----------\n    copy : boolean, default True\n\n    Returns\n    -------\n    values : a dict of dtype -> BlockManager\n\n    Notes\n    -----\n    This consolidates based on str(dtype)\n    \"\"\"\n    self._consolidate_inplace()\n\n    bd = {}\n    for b in self.blocks:\n        bd.setdefault(str(b.dtype), []).append(b)\n\n    return {dtype: self.combine(blocks, copy=copy) for dtype, blocks in bd.items()}",
                "def fast_xs(self, loc):\n    \"\"\"\n    get a cross sectional for a given location in the\n    items ; handle dups\n\n    return the result, is *could* be a view in the case of a\n    single block\n    \"\"\"\n    if len(self.blocks) == 1:\n        return self.blocks[0].iget((slice(None), loc))\n\n    items = self.items\n\n    # non-unique (GH4726)\n    if not items.is_unique:\n        result = self._interleave()\n        if self.ndim == 2:\n            result = result.T\n        return result[loc]\n\n    # unique\n    dtype = _interleaved_dtype(self.blocks)\n\n    n = len(items)\n    if is_extension_array_dtype(dtype):\n        # we'll eventually construct an ExtensionArray.\n        result = np.empty(n, dtype=object)\n    else:\n        result = np.empty(n, dtype=dtype)\n\n    for blk in self.blocks:\n        # Such assignment may incorrectly coerce NaT to None\n        # result[blk.mgr_locs] = blk._slice((slice(None), loc))\n        for i, rl in enumerate(blk.mgr_locs):\n            result[rl] = blk.iget((i, loc))\n\n    if is_extension_array_dtype(dtype):\n        result = dtype.construct_array_type()._from_sequence(result, dtype=dtype)\n\n    return result",
                "def consolidate(self):\n    \"\"\"\n    Join together blocks having same dtype\n\n    Returns\n    -------\n    y : BlockManager\n    \"\"\"\n    if self.is_consolidated():\n        return self\n\n    bm = self.__class__(self.blocks, self.axes)\n    bm._is_consolidated = False\n    bm._consolidate_inplace()\n    return bm",
                "def _consolidate_inplace(self):\n    if not self.is_consolidated():\n        self.blocks = tuple(_consolidate(self.blocks))\n        self._is_consolidated = True\n        self._known_consolidated = True\n        self._rebuild_blknos_and_blklocs()",
                "def get(self, item):\n    \"\"\"\n    Return values for selected item (ndarray or BlockManager).\n    \"\"\"\n    if self.items.is_unique:\n\n        if not isna(item):\n            loc = self.items.get_loc(item)\n        else:\n            indexer = np.arange(len(self.items))[isna(self.items)]\n\n            # allow a single nan location indexer\n            if not is_scalar(indexer):\n                if len(indexer) == 1:\n                    loc = indexer.item()\n                else:\n                    raise ValueError(\"cannot label index with a null key\")\n\n        return self.iget(loc)\n    else:\n\n        if isna(item):\n            raise TypeError(\"cannot label index with a null key\")\n\n        indexer = self.items.get_indexer_for([item])\n        return self.reindex_indexer(\n            new_axis=self.items[indexer], indexer=indexer, axis=0, allow_dups=True\n        )",
                "def iget(self, i):\n    \"\"\"\n    Return the data as a SingleBlockManager if possible\n\n    Otherwise return as a ndarray\n    \"\"\"\n    block = self.blocks[self._blknos[i]]\n    values = block.iget(self._blklocs[i])\n\n    # shortcut for select a single-dim from a 2-dim BM\n    return SingleBlockManager(\n        [\n            block.make_block_same_class(\n                values, placement=slice(0, len(values)), ndim=1\n            )\n        ],\n        self.axes[1],\n    )",
                "def delete(self, item):\n    \"\"\"\n    Delete selected item (items if non-unique) in-place.\n    \"\"\"\n    indexer = self.items.get_loc(item)\n\n    is_deleted = np.zeros(self.shape[0], dtype=np.bool_)\n    is_deleted[indexer] = True\n    ref_loc_offset = -is_deleted.cumsum()\n\n    is_blk_deleted = [False] * len(self.blocks)\n\n    if isinstance(indexer, int):\n        affected_start = indexer\n    else:\n        affected_start = is_deleted.nonzero()[0][0]\n\n    for blkno, _ in _fast_count_smallints(self._blknos[affected_start:]):\n        blk = self.blocks[blkno]\n        bml = blk.mgr_locs\n        blk_del = is_deleted[bml.indexer].nonzero()[0]\n\n        if len(blk_del) == len(bml):\n            is_blk_deleted[blkno] = True\n            continue\n        elif len(blk_del) != 0:\n            blk.delete(blk_del)\n            bml = blk.mgr_locs\n\n        blk.mgr_locs = bml.add(ref_loc_offset[bml.indexer])\n\n    # FIXME: use Index.delete as soon as it uses fastpath=True\n    self.axes[0] = self.items[~is_deleted]\n    self.blocks = tuple(\n        b for blkno, b in enumerate(self.blocks) if not is_blk_deleted[blkno]\n    )\n    self._shape = None\n    self._rebuild_blknos_and_blklocs()",
                "def set(self, item, value):\n    \"\"\"\n    Set new item in-place. Does not consolidate. Adds new Block if not\n    contained in the current set of items\n    \"\"\"\n    # FIXME: refactor, clearly separate broadcasting & zip-like assignment\n    #        can prob also fix the various if tests for sparse/categorical\n\n    value_is_extension_type = is_extension_array_dtype(value)\n\n    # categorical/sparse/datetimetz\n    if value_is_extension_type:\n\n        def value_getitem(placement):\n            return value\n\n    else:\n        if value.ndim == self.ndim - 1:\n            value = _safe_reshape(value, (1,) + value.shape)\n\n            def value_getitem(placement):\n                return value\n\n        else:\n\n            def value_getitem(placement):\n                return value[placement.indexer]\n\n        if value.shape[1:] != self.shape[1:]:\n            raise AssertionError(\n                \"Shape of new values must be compatible with manager shape\"\n            )\n\n    try:\n        loc = self.items.get_loc(item)\n    except KeyError:\n        # This item wasn't present, just insert at end\n        self.insert(len(self.items), item, value)\n        return\n\n    if isinstance(loc, int):\n        loc = [loc]\n\n    blknos = self._blknos[loc]\n    blklocs = self._blklocs[loc].copy()\n\n    unfit_mgr_locs = []\n    unfit_val_locs = []\n    removed_blknos = []\n    for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):\n        blk = self.blocks[blkno]\n        blk_locs = blklocs[val_locs.indexer]\n        if blk.should_store(value):\n            blk.set(blk_locs, value_getitem(val_locs))\n        else:\n            unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])\n            unfit_val_locs.append(val_locs)\n\n            # If all block items are unfit, schedule the block for removal.\n            if len(val_locs) == len(blk.mgr_locs):\n                removed_blknos.append(blkno)\n            else:\n                self._blklocs[blk.mgr_locs.indexer] = -1\n                blk.delete(blk_locs)\n                self._blklocs[blk.mgr_locs.indexer] = np.arange(len(blk))\n\n    if len(removed_blknos):\n        # Remove blocks & update blknos accordingly\n        is_deleted = np.zeros(self.nblocks, dtype=np.bool_)\n        is_deleted[removed_blknos] = True\n\n        new_blknos = np.empty(self.nblocks, dtype=np.int64)\n        new_blknos.fill(-1)\n        new_blknos[~is_deleted] = np.arange(self.nblocks - len(removed_blknos))\n        self._blknos = algos.take_1d(\n            new_blknos, self._blknos, axis=0, allow_fill=False\n        )\n        self.blocks = tuple(\n            blk for i, blk in enumerate(self.blocks) if i not in set(removed_blknos)\n        )\n\n    if unfit_val_locs:\n        unfit_mgr_locs = np.concatenate(unfit_mgr_locs)\n        unfit_count = len(unfit_mgr_locs)\n\n        new_blocks = []\n        if value_is_extension_type:\n            # This code (ab-)uses the fact that sparse blocks contain only\n            # one item.\n            new_blocks.extend(\n                make_block(\n                    values=value.copy(),\n                    ndim=self.ndim,\n                    placement=slice(mgr_loc, mgr_loc + 1),\n                )\n                for mgr_loc in unfit_mgr_locs\n            )\n\n            self._blknos[unfit_mgr_locs] = np.arange(unfit_count) + len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = 0\n\n        else:\n            # unfit_val_locs contains BlockPlacement objects\n            unfit_val_items = unfit_val_locs[0].append(unfit_val_locs[1:])\n\n            new_blocks.append(\n                make_block(\n                    values=value_getitem(unfit_val_items),\n                    ndim=self.ndim,\n                    placement=unfit_mgr_locs,\n                )\n            )\n\n            self._blknos[unfit_mgr_locs] = len(self.blocks)\n            self._blklocs[unfit_mgr_locs] = np.arange(unfit_count)\n\n        self.blocks += tuple(new_blocks)\n\n        # Newly created block's dtype may already be present.\n        self._known_consolidated = False",
                "def insert(self, loc: int, item, value, allow_duplicates: bool = False):\n    \"\"\"\n    Insert item at selected position.\n\n    Parameters\n    ----------\n    loc : int\n    item : hashable\n    value : array_like\n    allow_duplicates: bool\n        If False, trying to insert non-unique item will raise\n\n    \"\"\"\n    if not allow_duplicates and item in self.items:\n        # Should this be a different kind of error??\n        raise ValueError(\"cannot insert {}, already exists\".format(item))\n\n    if not isinstance(loc, int):\n        raise TypeError(\"loc must be int\")\n\n    # insert to the axis; this could possibly raise a TypeError\n    new_axis = self.items.insert(loc, item)\n\n    block = make_block(values=value, ndim=self.ndim, placement=slice(loc, loc + 1))\n\n    for blkno, count in _fast_count_smallints(self._blknos[loc:]):\n        blk = self.blocks[blkno]\n        if count == len(blk.mgr_locs):\n            blk.mgr_locs = blk.mgr_locs.add(1)\n        else:\n            new_mgr_locs = blk.mgr_locs.as_array.copy()\n            new_mgr_locs[new_mgr_locs >= loc] += 1\n            blk.mgr_locs = new_mgr_locs\n\n    if loc == self._blklocs.shape[0]:\n        # np.append is a lot faster, let's use it if we can.\n        self._blklocs = np.append(self._blklocs, 0)\n        self._blknos = np.append(self._blknos, len(self.blocks))\n    else:\n        self._blklocs = np.insert(self._blklocs, loc, 0)\n        self._blknos = np.insert(self._blknos, loc, len(self.blocks))\n\n    self.axes[0] = new_axis\n    self.blocks += (block,)\n    self._shape = None\n\n    self._known_consolidated = False\n\n    if len(self.blocks) > 100:\n        self._consolidate_inplace()",
                "def reindex_axis(\n    self, new_index, axis, method=None, limit=None, fill_value=None, copy=True\n):\n    \"\"\"\n    Conform block manager to new index.\n    \"\"\"\n    new_index = ensure_index(new_index)\n    new_index, indexer = self.axes[axis].reindex(\n        new_index, method=method, limit=limit\n    )\n\n    return self.reindex_indexer(\n        new_index, indexer, axis=axis, fill_value=fill_value, copy=copy\n    )",
                "def reindex_indexer(\n    self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True\n):\n    \"\"\"\n    Parameters\n    ----------\n    new_axis : Index\n    indexer : ndarray of int64 or None\n    axis : int\n    fill_value : object\n    allow_dups : bool\n\n    pandas-indexer with -1's only.\n    \"\"\"\n    if indexer is None:\n        if new_axis is self.axes[axis] and not copy:\n            return self\n\n        result = self.copy(deep=copy)\n        result.axes = list(self.axes)\n        result.axes[axis] = new_axis\n        return result\n\n    self._consolidate_inplace()\n\n    # some axes don't allow reindexing with dups\n    if not allow_dups:\n        self.axes[axis]._can_reindex(indexer)\n\n    if axis >= self.ndim:\n        raise IndexError(\"Requested axis not found in manager\")\n\n    if axis == 0:\n        new_blocks = self._slice_take_blocks_ax0(indexer, fill_tuple=(fill_value,))\n    else:\n        new_blocks = [\n            blk.take_nd(\n                indexer,\n                axis=axis,\n                fill_tuple=(\n                    fill_value if fill_value is not None else blk.fill_value,\n                ),\n            )\n            for blk in self.blocks\n        ]\n\n    new_axes = list(self.axes)\n    new_axes[axis] = new_axis\n    return self.__class__(new_blocks, new_axes)",
                "def _slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None):\n    \"\"\"\n    Slice/take blocks along axis=0.\n\n    Overloaded for SingleBlock\n\n    Returns\n    -------\n    new_blocks : list of Block\n    \"\"\"\n\n    allow_fill = fill_tuple is not None\n\n    sl_type, slobj, sllen = _preprocess_slice_or_indexer(\n        slice_or_indexer, self.shape[0], allow_fill=allow_fill\n    )\n\n    if self._is_single_block:\n        blk = self.blocks[0]\n\n        if sl_type in (\"slice\", \"mask\"):\n            return [blk.getitem_block(slobj, new_mgr_locs=slice(0, sllen))]\n        elif not allow_fill or self.ndim == 1:\n            if allow_fill and fill_tuple[0] is None:\n                _, fill_value = maybe_promote(blk.dtype)\n                fill_tuple = (fill_value,)\n\n            return [\n                blk.take_nd(\n                    slobj,\n                    axis=0,\n                    new_mgr_locs=slice(0, sllen),\n                    fill_tuple=fill_tuple,\n                )\n            ]\n\n    if sl_type in (\"slice\", \"mask\"):\n        blknos = self._blknos[slobj]\n        blklocs = self._blklocs[slobj]\n    else:\n        blknos = algos.take_1d(\n            self._blknos, slobj, fill_value=-1, allow_fill=allow_fill\n        )\n        blklocs = algos.take_1d(\n            self._blklocs, slobj, fill_value=-1, allow_fill=allow_fill\n        )\n\n    # When filling blknos, make sure blknos is updated before appending to\n    # blocks list, that way new blkno is exactly len(blocks).\n    #\n    # FIXME: mgr_groupby_blknos must return mgr_locs in ascending order,\n    # pytables serialization will break otherwise.\n    blocks = []\n    for blkno, mgr_locs in libinternals.get_blkno_placements(blknos, group=True):\n        if blkno == -1:\n            # If we've got here, fill_tuple was not None.\n            fill_value = fill_tuple[0]\n\n            blocks.append(\n                self._make_na_block(placement=mgr_locs, fill_value=fill_value)\n            )\n        else:\n            blk = self.blocks[blkno]\n\n            # Otherwise, slicing along items axis is necessary.\n            if not blk._can_consolidate:\n                # A non-consolidatable block, it's easy, because there's\n                # only one item and each mgr loc is a copy of that single\n                # item.\n                for mgr_loc in mgr_locs:\n                    newblk = blk.copy(deep=True)\n                    newblk.mgr_locs = slice(mgr_loc, mgr_loc + 1)\n                    blocks.append(newblk)\n\n            else:\n                blocks.append(\n                    blk.take_nd(\n                        blklocs[mgr_locs.indexer],\n                        axis=0,\n                        new_mgr_locs=mgr_locs,\n                        fill_tuple=None,\n                    )\n                )\n\n    return blocks",
                "def _make_na_block(self, placement, fill_value=None):\n    # TODO: infer dtypes other than float64 from fill_value\n\n    if fill_value is None:\n        fill_value = np.nan\n    block_shape = list(self.shape)\n    block_shape[0] = len(placement)\n\n    dtype, fill_value = infer_dtype_from_scalar(fill_value)\n    block_values = np.empty(block_shape, dtype=dtype)\n    block_values.fill(fill_value)\n    return make_block(block_values, placement=placement)",
                "def take(self, indexer, axis=1, verify=True, convert=True):\n    \"\"\"\n    Take items along any axis.\n    \"\"\"\n    self._consolidate_inplace()\n    indexer = (\n        np.arange(indexer.start, indexer.stop, indexer.step, dtype=\"int64\")\n        if isinstance(indexer, slice)\n        else np.asanyarray(indexer, dtype=\"int64\")\n    )\n\n    n = self.shape[axis]\n    if convert:\n        indexer = maybe_convert_indices(indexer, n)\n\n    if verify:\n        if ((indexer == -1) | (indexer >= n)).any():\n            raise Exception(\"Indices must be nonzero and less than the axis length\")\n\n    new_labels = self.axes[axis].take(indexer)\n    return self.reindex_indexer(\n        new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True\n    )",
                "def equals(self, other):\n    self_axes, other_axes = self.axes, other.axes\n    if len(self_axes) != len(other_axes):\n        return False\n    if not all(ax1.equals(ax2) for ax1, ax2 in zip(self_axes, other_axes)):\n        return False\n    self._consolidate_inplace()\n    other._consolidate_inplace()\n    if len(self.blocks) != len(other.blocks):\n        return False\n\n    # canonicalize block order, using a tuple combining the mgr_locs\n    # then type name because there might be unconsolidated\n    # blocks (say, Categorical) which can only be distinguished by\n    # the iteration order\n    def canonicalize(block):\n        return (block.mgr_locs.as_array.tolist(), block.dtype.name)\n\n    self_blocks = sorted(self.blocks, key=canonicalize)\n    other_blocks = sorted(other.blocks, key=canonicalize)\n    return all(\n        block.equals(oblock) for block, oblock in zip(self_blocks, other_blocks)\n    )",
                "def unstack(self, unstacker_func, fill_value):\n    \"\"\"Return a blockmanager with all blocks unstacked.\n\n    Parameters\n    ----------\n    unstacker_func : callable\n        A (partially-applied) ``pd.core.reshape._Unstacker`` class.\n    fill_value : Any\n        fill_value for newly introduced missing values.\n\n    Returns\n    -------\n    unstacked : BlockManager\n    \"\"\"\n    n_rows = self.shape[-1]\n    dummy = unstacker_func(np.empty((0, 0)), value_columns=self.items)\n    new_columns = dummy.get_new_columns()\n    new_index = dummy.get_new_index()\n    new_blocks = []\n    columns_mask = []\n\n    for blk in self.blocks:\n        blocks, mask = blk._unstack(\n            partial(unstacker_func, value_columns=self.items[blk.mgr_locs.indexer]),\n            new_columns,\n            n_rows,\n            fill_value,\n        )\n\n        new_blocks.extend(blocks)\n        columns_mask.extend(mask)\n\n    new_columns = new_columns[columns_mask]\n\n    bm = BlockManager(new_blocks, [new_columns, new_index])\n    return bm",
                "def __init__(\n    self,\n    block: Block,\n    axis: Union[Index, List[Index]],\n    do_integrity_check: bool = False,\n    fastpath: bool = False,\n):\n    if isinstance(axis, list):\n        if len(axis) != 1:\n            raise ValueError(\n                \"cannot create SingleBlockManager with more than 1 axis\"\n            )\n        axis = axis[0]\n\n    # passed from constructor, single block, single axis\n    if fastpath:\n        self.axes = [axis]\n        if isinstance(block, list):\n\n            # empty block\n            if len(block) == 0:\n                block = [np.array([])]\n            elif len(block) != 1:\n                raise ValueError(\n                    \"Cannot create SingleBlockManager with more than 1 block\"\n                )\n            block = block[0]\n    else:\n        self.axes = [ensure_index(axis)]\n\n        # create the block here\n        if isinstance(block, list):\n\n            # provide consolidation to the interleaved_dtype\n            if len(block) > 1:\n                dtype = _interleaved_dtype(block)\n                block = [b.astype(dtype) for b in block]\n                block = _consolidate(block)\n\n            if len(block) != 1:\n                raise ValueError(\n                    \"Cannot create SingleBlockManager with more than 1 block\"\n                )\n            block = block[0]\n\n    if not isinstance(block, Block):\n        block = make_block(block, placement=slice(0, len(axis)), ndim=1)\n\n    self.blocks = tuple([block])",
                "def _post_setstate(self):\n    pass",
                "@property\ndef _block(self):\n    return self.blocks[0]",
                "@property\ndef _values(self):\n    return self._block.values",
                "@property\ndef _blknos(self):\n    \"\"\" compat with BlockManager \"\"\"\n    return None",
                "@property\ndef _blklocs(self):\n    \"\"\" compat with BlockManager \"\"\"\n    return None",
                "def get_slice(self, slobj, axis=0):\n    if axis >= self.ndim:\n        raise IndexError(\"Requested axis not found in manager\")\n\n    return self.__class__(\n        self._block._slice(slobj), self.index[slobj], fastpath=True\n    )",
                "@property\ndef index(self):\n    return self.axes[0]",
                "def convert(self, **kwargs):\n    \"\"\" convert the whole block as one \"\"\"\n    return self.apply(\"convert\", **kwargs)",
                "@property\ndef dtype(self):\n    return self._block.dtype",
                "@property\ndef array_dtype(self):\n    return self._block.array_dtype",
                "@property\ndef ftype(self):\n    return self._block.ftype",
                "def get_dtype_counts(self):\n    return {self.dtype.name: 1}",
                "def get_ftype_counts(self):\n    return {self.ftype: 1}",
                "def get_dtypes(self):\n    return np.array([self._block.dtype])",
                "def get_ftypes(self):\n    return np.array([self._block.ftype])",
                "def external_values(self):\n    return self._block.external_values()",
                "def internal_values(self):\n    return self._block.internal_values()",
                "def get_values(self):\n    \"\"\" return a dense type view \"\"\"\n    return np.array(self._block.to_dense(), copy=False)",
                "@property\ndef _can_hold_na(self):\n    return self._block._can_hold_na",
                "def is_consolidated(self):\n    return True",
                "def _consolidate_check(self):\n    pass",
                "def _consolidate_inplace(self):\n    pass",
                "def delete(self, item):\n    \"\"\"\n    Delete single item from SingleBlockManager.\n\n    Ensures that self.blocks doesn't become empty.\n    \"\"\"\n    loc = self.items.get_loc(item)\n    self._block.delete(loc)\n    self.axes[0] = self.axes[0].delete(loc)",
                "def fast_xs(self, loc):\n    \"\"\"\n    fast path for getting a cross-section\n    return a view of the data\n    \"\"\"\n    return self._block.values[loc]",
                "def concat(self, to_concat, new_axis):\n    \"\"\"\n    Concatenate a list of SingleBlockManagers into a single\n    SingleBlockManager.\n\n    Used for pd.concat of Series objects with axis=0.\n\n    Parameters\n    ----------\n    to_concat : list of SingleBlockManagers\n    new_axis : Index of the result\n\n    Returns\n    -------\n    SingleBlockManager\n\n    \"\"\"\n    non_empties = [x for x in to_concat if len(x) > 0]\n\n    # check if all series are of the same block type:\n    if len(non_empties) > 0:\n        blocks = [obj.blocks[0] for obj in non_empties]\n        if len({b.dtype for b in blocks}) == 1:\n            new_block = blocks[0].concat_same_type(blocks)\n        else:\n            values = [x.values for x in blocks]\n            values = concat_compat(values)\n            new_block = make_block(values, placement=slice(0, len(values), 1))\n    else:\n        values = [x._block.values for x in to_concat]\n        values = concat_compat(values)\n        new_block = make_block(values, placement=slice(0, len(values), 1))\n\n    mgr = SingleBlockManager(new_block, new_axis)\n    return mgr",
                "def _asarray_compat(x):\n    if isinstance(x, ABCSeries):\n        return x._values\n    else:\n        return np.asarray(x)",
                "def _shape_compat(x):\n    if isinstance(x, ABCSeries):\n        return (len(x),)\n    else:\n        return x.shape",
                "def unpickle_block(values, mgr_locs):\n    return make_block(values, placement=mgr_locs)",
                "def get_axe(block, qs, axes):\n    # Because Series dispatches to DataFrame, we will always have\n    #  block.ndim == 2\n    from pandas import Float64Index\n\n    if is_list_like(qs):\n        ax = Float64Index(qs)\n    else:\n        ax = axes[0]\n    return ax",
                "def comp(s, regex=False):\n    \"\"\"\n    Generate a bool array by perform an equality check, or perform\n    an element-wise regular expression matching\n    \"\"\"\n    if isna(s):\n        return isna(values)\n    if isinstance(s, (Timedelta, Timestamp)) and getattr(s, \"tz\", None) is None:\n\n        return _compare_or_regex_search(\n            maybe_convert_objects(values), s.asm8, regex\n        )\n    return _compare_or_regex_search(values, s, regex)",
                "def canonicalize(block):\n    return (block.mgr_locs.as_array.tolist(), block.dtype.name)",
                "def value_getitem(placement):\n    return value",
                "def value_getitem(placement):\n    return value",
                "def value_getitem(placement):\n    return value[placement.indexer]"
            ],
            "inscope_function_signatures": [
                "create_block_manager_from_blocks(blocks, axes)",
                "create_block_manager_from_arrays(arrays, names, axes)",
                "construction_error(tot_items, block_shape, axes, e=None)",
                "form_blocks(arrays, names, axes)",
                "_simple_blockify(tuples, dtype)",
                "_multi_blockify(tuples, dtype=None)",
                "_stack_arrays(tuples, dtype)",
                "_interleaved_dtype(blocks: List[Block]) -> Optional[Union[np.dtype, ExtensionDtype]]",
                "_consolidate(blocks)",
                "_compare_or_regex_search(a, b, regex=False)",
                "_transform_index(index, func, level=None)",
                "_fast_count_smallints(arr)",
                "_preprocess_slice_or_indexer(slice_or_indexer, length, allow_fill)",
                "concatenate_block_managers(mgrs_indexers, axes, concat_axis, copy)",
                "__init__(self, blocks: Sequence[Block], axes: Sequence[Index], do_integrity_check: bool=True)",
                "make_empty(self, axes=None)",
                "__nonzero__(self)",
                "shape(self)",
                "ndim(self) -> int",
                "set_axis(self, axis, new_labels)",
                "rename_axis(self, mapper, axis, copy=True, level=None)",
                "_is_single_block(self)",
                "_rebuild_blknos_and_blklocs(self)",
                "items(self)",
                "_get_counts(self, f)",
                "get_dtype_counts(self)",
                "get_ftype_counts(self)",
                "get_dtypes(self)",
                "get_ftypes(self)",
                "__getstate__(self)",
                "__setstate__(self, state)",
                "_post_setstate(self)",
                "__len__(self) -> int",
                "__repr__(self) -> str",
                "_verify_integrity(self)",
                "apply(self, f, axes=None, filter=None, do_integrity_check=False, consolidate=True, **kwargs)",
                "quantile(self, axis=0, consolidate=True, transposed=False, interpolation='linear', qs=None, numeric_only=None)",
                "isna(self, func, **kwargs)",
                "where(self, **kwargs)",
                "setitem(self, **kwargs)",
                "putmask(self, **kwargs)",
                "diff(self, **kwargs)",
                "interpolate(self, **kwargs)",
                "shift(self, **kwargs)",
                "fillna(self, **kwargs)",
                "downcast(self, **kwargs)",
                "astype(self, dtype, **kwargs)",
                "convert(self, **kwargs)",
                "replace(self, value, **kwargs)",
                "replace_list(self, src_list, dest_list, inplace=False, regex=False)",
                "is_consolidated(self)",
                "_consolidate_check(self)",
                "is_mixed_type(self)",
                "is_numeric_mixed_type(self)",
                "is_datelike_mixed_type(self)",
                "any_extension_types(self)",
                "is_view(self)",
                "get_bool_data(self, copy=False)",
                "get_numeric_data(self, copy=False)",
                "combine(self, blocks, copy=True)",
                "get_slice(self, slobj, axis=0)",
                "__contains__(self, item)",
                "nblocks(self)",
                "copy(self, deep=True)",
                "as_array(self, transpose=False, items=None)",
                "_interleave(self)",
                "to_dict(self, copy=True)",
                "fast_xs(self, loc)",
                "consolidate(self)",
                "_consolidate_inplace(self)",
                "get(self, item)",
                "iget(self, i)",
                "delete(self, item)",
                "set(self, item, value)",
                "insert(self, loc: int, item, value, allow_duplicates: bool=False)",
                "reindex_axis(self, new_index, axis, method=None, limit=None, fill_value=None, copy=True)",
                "reindex_indexer(self, new_axis, indexer, axis, fill_value=None, allow_dups=False, copy=True)",
                "_slice_take_blocks_ax0(self, slice_or_indexer, fill_tuple=None)",
                "_make_na_block(self, placement, fill_value=None)",
                "take(self, indexer, axis=1, verify=True, convert=True)",
                "equals(self, other)",
                "unstack(self, unstacker_func, fill_value)",
                "__init__(self, block: Block, axis: Union[Index, List[Index]], do_integrity_check: bool=False, fastpath: bool=False)",
                "_post_setstate(self)",
                "_block(self)",
                "_values(self)",
                "_blknos(self)",
                "_blklocs(self)",
                "get_slice(self, slobj, axis=0)",
                "index(self)",
                "convert(self, **kwargs)",
                "dtype(self)",
                "array_dtype(self)",
                "ftype(self)",
                "get_dtype_counts(self)",
                "get_ftype_counts(self)",
                "get_dtypes(self)",
                "get_ftypes(self)",
                "external_values(self)",
                "internal_values(self)",
                "get_values(self)",
                "_can_hold_na(self)",
                "is_consolidated(self)",
                "_consolidate_check(self)",
                "_consolidate_inplace(self)",
                "delete(self, item)",
                "fast_xs(self, loc)",
                "concat(self, to_concat, new_axis)",
                "_asarray_compat(x)",
                "_shape_compat(x)",
                "unpickle_block(values, mgr_locs)",
                "get_axe(block, qs, axes)",
                "comp(s, regex=False)",
                "canonicalize(block)",
                "value_getitem(placement)",
                "value_getitem(placement)",
                "value_getitem(placement)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    60
                ],
                "__slots__": [
                    112,
                    1454
                ],
                "Sequence": [
                    125,
                    126
                ],
                "Block": [
                    1863,
                    1458,
                    1650,
                    125,
                    1501
                ],
                "Index": [
                    520,
                    1459,
                    1965,
                    126
                ],
                "bool": [
                    1921,
                    1460,
                    1461,
                    1147,
                    127
                ],
                "self.axes": [
                    129,
                    1537,
                    263,
                    782,
                    784,
                    149,
                    537,
                    285,
                    927,
                    1189,
                    166,
                    294,
                    296,
                    170,
                    174,
                    307,
                    1205,
                    439,
                    183,
                    441,
                    1598,
                    1472,
                    197,
                    327,
                    1228,
                    1484,
                    1232,
                    342,
                    984,
                    1240,
                    731,
                    1381,
                    235,
                    748,
                    1259,
                    1387,
                    498,
                    1019,
                    509,
                    639
                ],
                "self": [
                    1024,
                    1537,
                    516,
                    1541,
                    1545,
                    1549,
                    529,
                    1021,
                    1043,
                    1553,
                    1556,
                    535,
                    1531,
                    537,
                    1559,
                    539,
                    1532,
                    1562,
                    1054,
                    1565,
                    1568,
                    1571,
                    1060,
                    551,
                    1063,
                    1575,
                    554,
                    1579,
                    557,
                    1069,
                    1070,
                    560,
                    563,
                    1076,
                    566,
                    569,
                    572,
                    1596,
                    1597,
                    575,
                    1088,
                    1598,
                    578,
                    1090,
                    581,
                    1094,
                    1605,
                    585,
                    1097,
                    1099,
                    1100,
                    1101,
                    1103,
                    1104,
                    593,
                    1118,
                    1124,
                    613,
                    1125,
                    1134,
                    1139,
                    1140,
                    1142,
                    1145,
                    639,
                    129,
                    130,
                    133,
                    647,
                    136,
                    648,
                    649,
                    1160,
                    140,
                    652,
                    142,
                    653,
                    144,
                    654,
                    1168,
                    659,
                    660,
                    149,
                    1170,
                    1172,
                    152,
                    153,
                    665,
                    666,
                    156,
                    1173,
                    1181,
                    671,
                    672,
                    1183,
                    1184,
                    1186,
                    1187,
                    677,
                    166,
                    1189,
                    1190,
                    1191,
                    170,
                    682,
                    683,
                    1193,
                    174,
                    1195,
                    1196,
                    1205,
                    183,
                    1209,
                    701,
                    702,
                    196,
                    197,
                    711,
                    712,
                    202,
                    1228,
                    205,
                    717,
                    1229,
                    208,
                    721,
                    210,
                    1231,
                    1232,
                    1236,
                    1240,
                    217,
                    218,
                    731,
                    732,
                    1242,
                    222,
                    734,
                    1246,
                    737,
                    741,
                    230,
                    231,
                    1256,
                    746,
                    235,
                    748,
                    1259,
                    1261,
                    239,
                    751,
                    241,
                    756,
                    247,
                    760,
                    250,
                    253,
                    254,
                    1277,
                    1280,
                    257,
                    258,
                    1281,
                    261,
                    262,
                    263,
                    1285,
                    270,
                    782,
                    784,
                    785,
                    1300,
                    1301,
                    1304,
                    1307,
                    285,
                    286,
                    802,
                    803,
                    294,
                    807,
                    296,
                    809,
                    1322,
                    811,
                    1325,
                    816,
                    307,
                    310,
                    315,
                    828,
                    318,
                    319,
                    320,
                    323,
                    837,
                    326,
                    327,
                    839,
                    841,
                    1354,
                    333,
                    338,
                    339,
                    340,
                    342,
                    343,
                    1366,
                    347,
                    1373,
                    867,
                    1381,
                    870,
                    1382,
                    873,
                    1387,
                    1392,
                    1394,
                    883,
                    884,
                    886,
                    890,
                    891,
                    1404,
                    383,
                    384,
                    896,
                    391,
                    905,
                    1424,
                    1425,
                    1431,
                    1433,
                    924,
                    925,
                    927,
                    933,
                    422,
                    934,
                    935,
                    936,
                    937,
                    429,
                    943,
                    946,
                    948,
                    439,
                    440,
                    441,
                    957,
                    1472,
                    963,
                    964,
                    965,
                    1484,
                    974,
                    975,
                    984,
                    478,
                    991,
                    1504,
                    481,
                    993,
                    997,
                    1511,
                    1515,
                    1004,
                    1005,
                    495,
                    498,
                    1528,
                    1019,
                    1020,
                    509,
                    1023
                ],
                "ensure_index": [
                    129,
                    294,
                    1484,
                    173,
                    1713,
                    1204,
                    149,
                    285
                ],
                "ax": [
                    129,
                    294,
                    166,
                    327,
                    329,
                    489,
                    331,
                    491,
                    492,
                    520,
                    779,
                    781,
                    782,
                    1690,
                    285
                ],
                "axes": [
                    1792,
                    129,
                    513,
                    1669,
                    520,
                    1675,
                    1676,
                    1680,
                    148,
                    149,
                    1690,
                    156,
                    547,
                    1714,
                    1717,
                    1718,
                    439,
                    441,
                    731,
                    732,
                    734,
                    491,
                    494,
                    2032,
                    500,
                    1659,
                    1662
                ],
                "self.blocks": [
                    896,
                    257,
                    130,
                    1281,
                    516,
                    261,
                    262,
                    905,
                    652,
                    270,
                    1021,
                    660,
                    1173,
                    535,
                    1404,
                    1431,
                    666,
                    539,
                    286,
                    927,
                    672,
                    1184,
                    802,
                    1187,
                    677,
                    422,
                    934,
                    1190,
                    682,
                    683,
                    1195,
                    1325,
                    1076,
                    310,
                    828,
                    702,
                    712,
                    841,
                    205,
                    333,
                    974,
                    208,
                    1103,
                    1104,
                    339,
                    340,
                    222,
                    1504,
                    1124,
                    613,
                    870,
                    997,
                    1256,
                    1511,
                    746,
                    1005,
                    495,
                    241,
                    1394,
                    883,
                    884,
                    1139,
                    1142,
                    760,
                    1020,
                    253
                ],
                "tuple": [
                    1504,
                    1792,
                    130,
                    1957,
                    166,
                    934,
                    745,
                    1961,
                    1103,
                    1685,
                    310,
                    1142,
                    1690,
                    283,
                    1020,
                    286
                ],
                "blocks": [
                    512,
                    130,
                    1667,
                    132,
                    516,
                    1668,
                    1669,
                    1799,
                    1801,
                    1675,
                    524,
                    1676,
                    526,
                    529,
                    532,
                    1432,
                    153,
                    155,
                    156,
                    1439,
                    1315,
                    1321,
                    1335,
                    1338,
                    1347,
                    1731,
                    1734,
                    1738,
                    716,
                    1742,
                    720,
                    1746,
                    724,
                    1876,
                    1750,
                    1879,
                    2009,
                    1628,
                    1629,
                    1630,
                    1757,
                    1632,
                    1761,
                    1889,
                    1765,
                    873,
                    1772,
                    494,
                    2030,
                    2032,
                    1650,
                    1652,
                    501,
                    1653,
                    1781,
                    504,
                    1658,
                    1659,
                    1789,
                    1662
                ],
                "block": [
                    132,
                    133,
                    136,
                    1170,
                    1814,
                    1815,
                    666,
                    672,
                    677,
                    1190,
                    1829,
                    1830,
                    1473,
                    1476,
                    1477,
                    1478,
                    1482,
                    333,
                    334,
                    974,
                    975,
                    1487,
                    1490,
                    1491,
                    340,
                    341,
                    342,
                    980,
                    1492,
                    1493,
                    1495,
                    1499,
                    1501,
                    1502,
                    2014,
                    1504,
                    2022,
                    496,
                    501,
                    1402,
                    1407
                ],
                "self.ndim": [
                    737,
                    133,
                    1285,
                    136,
                    1528,
                    202,
                    1134,
                    1170,
                    1043,
                    152,
                    1118,
                    1242,
                    891,
                    478
                ],
                "block.ndim": [
                    136,
                    133
                ],
                "AssertionError": [
                    228,
                    134,
                    847,
                    344,
                    1055
                ],
                "format": [
                    1700,
                    135,
                    329,
                    1162,
                    331,
                    1933,
                    334,
                    1936,
                    179,
                    1939,
                    345
                ],
                "do_integrity_check": [
                    441,
                    139
                ],
                "self._verify_integrity": [
                    140
                ],
                "self._consolidate_check": [
                    648,
                    142
                ],
                "self._rebuild_blknos_and_blklocs": [
                    144,
                    937,
                    320,
                    1024
                ],
                "a": [
                    1924,
                    1927,
                    1930,
                    1933,
                    149
                ],
                "np.array": [
                    257,
                    1565,
                    1477,
                    1575,
                    153,
                    1562,
                    253
                ],
                "np": [
                    1920,
                    257,
                    1795,
                    1796,
                    901,
                    1924,
                    903,
                    520,
                    1925,
                    525,
                    1425,
                    537,
                    153,
                    1562,
                    1565,
                    1183,
                    1184,
                    1186,
                    547,
                    803,
                    1187,
                    1575,
                    817,
                    1842,
                    1715,
                    948,
                    1970,
                    1972,
                    1855,
                    1983,
                    1090,
                    1987,
                    837,
                    1094,
                    839,
                    584,
                    1097,
                    1353,
                    1099,
                    1477,
                    1864,
                    1358,
                    720,
                    1108,
                    1368,
                    217,
                    218,
                    1370,
                    1760,
                    225,
                    993,
                    1124,
                    1764,
                    1140,
                    253
                ],
                "self.array_dtype": [
                    153
                ],
                "self.__class__": [
                    326,
                    1261,
                    751,
                    529,
                    440,
                    927,
                    1531,
                    156,
                    734,
                    639
                ],
                "__bool__": [
                    162
                ],
                "__nonzero__": [
                    162
                ],
                "len": [
                    512,
                    535,
                    537,
                    547,
                    1063,
                    1085,
                    1090,
                    1092,
                    1099,
                    1109,
                    1624,
                    1627,
                    1629,
                    1634,
                    612,
                    1124,
                    1638,
                    1650,
                    1139,
                    1652,
                    1659,
                    653,
                    1680,
                    660,
                    1174,
                    1687,
                    1690,
                    1692,
                    1184,
                    1187,
                    166,
                    170,
                    682,
                    1195,
                    174,
                    175,
                    1715,
                    1732,
                    1736,
                    716,
                    205,
                    1740,
                    1744,
                    210,
                    1748,
                    1752,
                    1759,
                    225,
                    1763,
                    1767,
                    1774,
                    1783,
                    760,
                    1791,
                    1792,
                    283,
                    802,
                    296,
                    304,
                    1846,
                    1853,
                    323,
                    1355,
                    339,
                    1876,
                    343,
                    347,
                    1388,
                    1394,
                    883,
                    384,
                    898,
                    948,
                    438,
                    952,
                    1464,
                    1476,
                    1478,
                    1990,
                    1490,
                    981,
                    1495,
                    2013,
                    1502,
                    997,
                    1009,
                    1012
                ],
                "property": [
                    1543,
                    1547,
                    1551,
                    656,
                    662,
                    668,
                    674,
                    164,
                    679,
                    168,
                    1577,
                    200,
                    1509,
                    233,
                    1513,
                    1517,
                    1522,
                    758,
                    1535
                ],
                "int": [
                    322,
                    999,
                    169,
                    1066,
                    1164,
                    1685,
                    1147
                ],
                "new_labels": [
                    1381,
                    1383,
                    173,
                    175,
                    183
                ],
                "old_len": [
                    177,
                    180,
                    174
                ],
                "axis": [
                    520,
                    174,
                    432,
                    433,
                    1205,
                    183,
                    1463,
                    1464,
                    1210,
                    1468,
                    1472,
                    197,
                    1228,
                    1484,
                    1233,
                    1240,
                    1242,
                    1245,
                    1373,
                    1502,
                    737,
                    1251,
                    740,
                    1381,
                    743,
                    744,
                    1383,
                    1260,
                    749,
                    496,
                    1528
                ],
                "new_len": [
                    177,
                    180,
                    175
                ],
                "ValueError": [
                    1666,
                    1698,
                    1699,
                    1479,
                    1162,
                    1679,
                    178,
                    1496,
                    1465,
                    955
                ],
                "obj": [
                    196,
                    197,
                    198,
                    431,
                    432,
                    433,
                    1628
                ],
                "self.copy": [
                    196,
                    1231
                ],
                "copy": [
                    2016,
                    196,
                    712,
                    873,
                    779,
                    1228,
                    781,
                    782,
                    1070,
                    1231,
                    2027,
                    725,
                    1210,
                    702
                ],
                "obj.set_axis": [
                    197
                ],
                "_transform_index": [
                    197
                ],
                "mapper": [
                    197
                ],
                "level": [
                    1955,
                    197,
                    1957
                ],
                "blk": [
                    257,
                    1281,
                    1284,
                    1287,
                    905,
                    1291,
                    652,
                    908,
                    909,
                    1173,
                    1174,
                    1175,
                    1431,
                    1177,
                    1432,
                    1179,
                    1433,
                    1325,
                    1328,
                    1076,
                    1333,
                    1078,
                    1079,
                    1081,
                    1339,
                    1085,
                    1088,
                    1089,
                    1090,
                    841,
                    842,
                    843,
                    208,
                    209,
                    1104,
                    222,
                    223,
                    1249,
                    613,
                    1253,
                    1256,
                    617,
                    746,
                    1005,
                    1006,
                    1013,
                    1014,
                    1016,
                    253
                ],
                "blk.mgr_locs.is_slice_like": [
                    209
                ],
                "blk.mgr_locs": [
                    1088,
                    1090,
                    1177,
                    842,
                    1433,
                    908,
                    1006,
                    209,
                    1014,
                    1174,
                    1016,
                    1081,
                    1175,
                    1179,
                    1085,
                    223
                ],
                "blk.mgr_locs.as_slice": [
                    209
                ],
                "slice": [
                    1634,
                    1284,
                    1638,
                    743,
                    1294,
                    304,
                    209,
                    1170,
                    884,
                    981,
                    1334,
                    1976,
                    1369,
                    1659,
                    1502,
                    1119
                ],
                "new_blknos": [
                    224,
                    227,
                    230,
                    1097,
                    1098,
                    1099,
                    1101,
                    217,
                    219
                ],
                "np.empty": [
                    803,
                    1795,
                    837,
                    901,
                    903,
                    1097,
                    537,
                    1358,
                    1425,
                    217,
                    218,
                    1855
                ],
                "self.shape": [
                    993,
                    803,
                    837,
                    839,
                    1354,
                    1424,
                    721,
                    338,
                    217,
                    218,
                    1373,
                    1277,
                    1054
                ],
                "np.int64": [
                    1097,
                    217,
                    218,
                    1987
                ],
                "new_blklocs": [
                    225,
                    218,
                    220,
                    231
                ],
                "new_blknos.fill": [
                    1098,
                    219
                ],
                "new_blklocs.fill": [
                    220
                ],
                "blkno": [
                    224,
                    1316,
                    1317,
                    1004,
                    1005,
                    1325,
                    1010,
                    1075,
                    1076,
                    1172,
                    1173,
                    1086,
                    1021,
                    222
                ],
                "enumerate": [
                    1856,
                    609,
                    1957,
                    327,
                    618,
                    908,
                    1104,
                    1720,
                    1021,
                    222
                ],
                "rl": [
                    224,
                    225,
                    842,
                    843,
                    844,
                    908,
                    909,
                    223
                ],
                "rl.indexer": [
                    224,
                    225,
                    843,
                    844
                ],
                "np.arange": [
                    225,
                    1090,
                    547,
                    1124,
                    1099,
                    525,
                    1715,
                    948,
                    1140,
                    1368
                ],
                "any": [
                    672,
                    1378,
                    227,
                    677,
                    424
                ],
                "self._blknos": [
                    1184,
                    258,
                    1187,
                    1124,
                    230,
                    1004,
                    1069,
                    974,
                    1100,
                    1101,
                    1139,
                    1172,
                    1300,
                    1304,
                    254
                ],
                "self._blklocs": [
                    1088,
                    1090,
                    1186,
                    1125,
                    231,
                    1070,
                    975,
                    1140,
                    1301,
                    1307,
                    1181,
                    1183
                ],
                "self._consolidate_inplace": [
                    481,
                    867,
                    391,
                    711,
                    1196,
                    239,
                    1392,
                    659,
                    1236,
                    1366,
                    665,
                    701,
                    671
                ],
                "counts": [
                    240,
                    1970,
                    243,
                    244,
                    1971,
                    1972
                ],
                "dict": [
                    240,
                    269
                ],
                "b": [
                    1921,
                    1667,
                    516,
                    261,
                    262,
                    517,
                    1668,
                    1925,
                    1930,
                    269,
                    270,
                    525,
                    526,
                    1936,
                    532,
                    539,
                    540,
                    287,
                    422,
                    424,
                    425,
                    429,
                    435,
                    702,
                    712,
                    720,
                    724,
                    725,
                    726,
                    727,
                    1492,
                    729,
                    1879,
                    1629,
                    2014,
                    2015,
                    2020,
                    870,
                    871,
                    2022,
                    2026,
                    621,
                    622,
                    495,
                    496,
                    241,
                    242,
                    243,
                    498,
                    624,
                    2030,
                    247,
                    504,
                    250,
                    635,
                    1021,
                    1918
                ],
                "v": [
                    1728,
                    1729,
                    242,
                    243,
                    1726
                ],
                "f": [
                    393,
                    399,
                    242,
                    435,
                    405
                ],
                "counts.get": [
                    243
                ],
                "b.shape": [
                    243,
                    1668,
                    525
                ],
                "self._get_counts": [
                    250,
                    247
                ],
                "b.dtype.name": [
                    247
                ],
                "b.dtype": [
                    871,
                    1936,
                    1879,
                    247,
                    1629
                ],
                "b.ftype": [
                    250
                ],
                "dtypes": [
                    253,
                    254
                ],
                "blk.dtype": [
                    253,
                    1287
                ],
                "algos.take_1d": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "algos": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "ftypes": [
                    257,
                    258,
                    652,
                    653
                ],
                "blk.ftype": [
                    257,
                    652
                ],
                "block_values": [
                    1795,
                    1796,
                    261,
                    1798,
                    1358,
                    1359,
                    1360,
                    277
                ],
                "b.values": [
                    261,
                    269,
                    525,
                    532,
                    2015
                ],
                "block_items": [
                    277,
                    262
                ],
                "self.items": [
                    384,
                    262,
                    1160,
                    1168,
                    1425,
                    1433,
                    1060,
                    1063,
                    429,
                    943,
                    946,
                    948,
                    1596,
                    323,
                    963,
                    965,
                    343,
                    347,
                    732,
                    991,
                    756,
                    886,
                    1019,
                    383
                ],
                "b.mgr_locs.indexer": [
                    622,
                    269,
                    262,
                    429
                ],
                "b.mgr_locs": [
                    517,
                    262,
                    424,
                    269,
                    429,
                    622,
                    720,
                    726,
                    727,
                    540
                ],
                "axes_array": [
                    267,
                    277,
                    263
                ],
                "list": [
                    1473,
                    1827,
                    1894,
                    263,
                    1354,
                    1259,
                    748,
                    1710,
                    1487,
                    784,
                    1232,
                    1685,
                    1463,
                    731,
                    509
                ],
                "extra_state": [
                    265,
                    277
                ],
                "make_block": [
                    1634,
                    547,
                    1829,
                    1638,
                    1798,
                    1769,
                    2026,
                    1132,
                    1360,
                    1777,
                    1170,
                    1785,
                    1814,
                    281,
                    1754,
                    1659,
                    1116,
                    1502
                ],
                "values": [
                    1808,
                    1811,
                    532,
                    1812,
                    1814,
                    281,
                    544,
                    547,
                    1827,
                    1829,
                    311,
                    312,
                    975,
                    593,
                    981,
                    601,
                    605,
                    607,
                    1632,
                    1633,
                    1634,
                    2015,
                    1636,
                    1637,
                    1638,
                    2017,
                    2019,
                    2020
                ],
                "mgr_locs": [
                    1316,
                    1322,
                    1332,
                    311,
                    312,
                    281,
                    1340,
                    1342
                ],
                "isinstance": [
                    1921,
                    1924,
                    1925,
                    1164,
                    283,
                    418,
                    1954,
                    1066,
                    1839,
                    1845,
                    1463,
                    1976,
                    1983,
                    1473,
                    1487,
                    1369,
                    602,
                    1501,
                    999,
                    1650
                ],
                "state": [
                    292,
                    283,
                    284,
                    285,
                    287
                ],
                "unpickle_block": [
                    311,
                    287
                ],
                "ax_arrays": [
                    292,
                    294
                ],
                "bvalues": [
                    312,
                    292
                ],
                "bitems": [
                    296,
                    304,
                    307,
                    292
                ],
                "equals": [
                    296
                ],
                "all_mgr_locs": [
                    304,
                    306,
                    312
                ],
                "get_indexer": [
                    307
                ],
                "blk_items": [
                    307
                ],
                "zip": [
                    516,
                    618,
                    1390,
                    312,
                    1850,
                    1407
                ],
                "self._post_setstate": [
                    315
                ],
                "self._is_consolidated": [
                    649,
                    653,
                    318,
                    935
                ],
                "self._known_consolidated": [
                    647,
                    936,
                    1193,
                    654,
                    1145,
                    319
                ],
                "output": [
                    326,
                    329,
                    331,
                    334,
                    335
                ],
                "pprint_thing": [
                    334,
                    326
                ],
                "self.__class__.__name__": [
                    326
                ],
                "i": [
                    908,
                    909,
                    538,
                    541,
                    542,
                    1957,
                    1720,
                    1722,
                    1856,
                    1729,
                    1857,
                    327,
                    328,
                    331,
                    974,
                    975,
                    1104,
                    1754,
                    1755,
                    609,
                    1769,
                    618,
                    1770,
                    622,
                    623,
                    1777,
                    1778,
                    1785,
                    1786
                ],
                "str": [
                    1921,
                    325,
                    871
                ],
                "mgr_shape": [
                    338,
                    341
                ],
                "tot_items": [
                    1668,
                    1669,
                    339,
                    1685,
                    342,
                    343,
                    347
                ],
                "sum": [
                    339,
                    1668
                ],
                "x.mgr_locs": [
                    339
                ],
                "x": [
                    1792,
                    1921,
                    1822,
                    1957,
                    1958,
                    1961,
                    1964,
                    1839,
                    1840,
                    1842,
                    1845,
                    1846,
                    1848,
                    339,
                    1624,
                    1632,
                    1888,
                    1636,
                    1918
                ],
                "block._verify_integrity": [
                    341
                ],
                "block.shape": [
                    341,
                    342
                ],
                "construction_error": [
                    1680,
                    1669,
                    342
                ],
                "result_blocks": [
                    611,
                    425,
                    436,
                    438,
                    441,
                    379,
                    637,
                    639
                ],
                "filter": [
                    423,
                    386,
                    382,
                    383
                ],
                "filter_locs": [
                    384,
                    388,
                    424,
                    383
                ],
                "set": [
                    1104,
                    653,
                    383
                ],
                "self.items.get_indexer_for": [
                    963,
                    383
                ],
                "kwargs": [
                    388,
                    1541,
                    395,
                    401,
                    416,
                    418,
                    419,
                    551,
                    554,
                    557,
                    560,
                    433,
                    435,
                    563,
                    566,
                    569,
                    572,
                    575,
                    578,
                    581,
                    585
                ],
                "consolidate": [
                    480,
                    390
                ],
                "align_copy": [
                    400,
                    433,
                    394,
                    408
                ],
                "kwargs.get": [
                    401,
                    395
                ],
                "align_keys": [
                    417,
                    396,
                    398,
                    402,
                    404,
                    409,
                    411
                ],
                "aligned_args": [
                    431,
                    428,
                    415
                ],
                "k": [
                    416,
                    417,
                    418,
                    419,
                    1729,
                    431,
                    433,
                    1725
                ],
                "ABCExtensionArray": [
                    418
                ],
                "hasattr": [
                    419
                ],
                "b.mgr_locs.isin": [
                    424
                ],
                "result_blocks.append": [
                    425
                ],
                "b_items": [
                    433,
                    429
                ],
                "aligned_args.items": [
                    431
                ],
                "obj._info_axis_number": [
                    432
                ],
                "obj.reindex": [
                    433
                ],
                "applied": [
                    435,
                    436
                ],
                "getattr": [
                    602,
                    435,
                    1667
                ],
                "_extend_blocks": [
                    1896,
                    633,
                    436
                ],
                "self.make_empty": [
                    717,
                    439
                ],
                "bm": [
                    640,
                    641,
                    928,
                    929,
                    930,
                    1444,
                    1445,
                    751,
                    752,
                    753,
                    440,
                    927,
                    443,
                    444,
                    639
                ],
                "bm._consolidate_inplace": [
                    640,
                    752,
                    443,
                    929
                ],
                "is_list_like": [
                    488
                ],
                "qs": [
                    488,
                    489,
                    498,
                    496
                ],
                "Float64Index": [
                    489
                ],
                "b.quantile": [
                    496
                ],
                "interpolation": [
                    496
                ],
                "axe": [
                    498,
                    500
                ],
                "get_axe": [
                    498
                ],
                "axes.append": [
                    500
                ],
                "blocks.append": [
                    1799,
                    1321,
                    2030,
                    501,
                    1335,
                    1338
                ],
                "ndim": [
                    504,
                    505,
                    507,
                    1451
                ],
                "b.ndim": [
                    504
                ],
                "new_axes": [
                    513,
                    520,
                    523,
                    748,
                    749,
                    782,
                    751,
                    784,
                    529,
                    785,
                    1259,
                    1260,
                    1261,
                    509
                ],
                "sb": [
                    516,
                    517
                ],
                "sb.mgr_locs": [
                    517
                ],
                "np.concatenate": [
                    520,
                    1108,
                    720
                ],
                "ax.values": [
                    520
                ],
                "transposed": [
                    522
                ],
                "b.make_block": [
                    525
                ],
                "b.values.T": [
                    525
                ],
                "concat_compat": [
                    1633,
                    532,
                    1637
                ],
                "indexer": [
                    537,
                    541,
                    544,
                    948,
                    1205,
                    951,
                    952,
                    953,
                    1210,
                    963,
                    1987,
                    965,
                    1989,
                    1990,
                    1227,
                    720,
                    721,
                    1367,
                    1240,
                    1369,
                    1368,
                    1370,
                    732,
                    1246,
                    991,
                    1375,
                    994,
                    1250,
                    1378,
                    1381,
                    999,
                    1000,
                    1383
                ],
                "np.intp": [
                    537
                ],
                "j": [
                    540,
                    541
                ],
                "values.take": [
                    544
                ],
                "SingleBlockManager": [
                    1640,
                    978,
                    546
                ],
                "self.apply": [
                    578,
                    581,
                    1541,
                    551,
                    585,
                    554,
                    557,
                    560,
                    785,
                    563,
                    566,
                    569,
                    572,
                    575
                ],
                "func": [
                    1961,
                    1964,
                    1957,
                    551
                ],
                "dtype": [
                    896,
                    899,
                    903,
                    911,
                    912,
                    1808,
                    1811,
                    1812,
                    1822,
                    1825,
                    1827,
                    828,
                    1855,
                    832,
                    833,
                    578,
                    834,
                    835,
                    837,
                    843,
                    1357,
                    1358,
                    1491,
                    1492,
                    1892,
                    1894,
                    873
                ],
                "np.ndim": [
                    584
                ],
                "value": [
                    1063,
                    584,
                    585,
                    1034,
                    1040,
                    1170,
                    1043,
                    1044,
                    1078,
                    1047,
                    1052,
                    1117,
                    1054
                ],
                "inplace": [
                    617,
                    628,
                    590
                ],
                "validate_bool_kwarg": [
                    590
                ],
                "self.as_array": [
                    593
                ],
                "isna": [
                    960,
                    945,
                    948,
                    600,
                    601
                ],
                "s": [
                    609,
                    618,
                    626,
                    600,
                    602,
                    605,
                    607
                ],
                "Timedelta": [
                    602
                ],
                "Timestamp": [
                    602
                ],
                "_compare_or_regex_search": [
                    604,
                    607
                ],
                "maybe_convert_objects": [
                    605
                ],
                "s.asm8": [
                    605
                ],
                "regex": [
                    609,
                    605,
                    630,
                    1917,
                    607
                ],
                "masks": [
                    609,
                    622
                ],
                "comp": [
                    609
                ],
                "src_list": [
                    609,
                    618,
                    612
                ],
                "src_len": [
                    612,
                    623
                ],
                "rb": [
                    617,
                    637,
                    636,
                    621
                ],
                "blk.copy": [
                    617,
                    1333
                ],
                "d": [
                    618,
                    627
                ],
                "dest_list": [
                    618
                ],
                "new_rb": [
                    636,
                    633,
                    635,
                    620
                ],
                "m": [
                    632,
                    625,
                    622
                ],
                "convert": [
                    629,
                    1374,
                    623
                ],
                "result": [
                    901,
                    903,
                    1927,
                    1929,
                    909,
                    912,
                    914,
                    1943,
                    837,
                    843,
                    1231,
                    1232,
                    849,
                    1233,
                    1234,
                    624,
                    633,
                    890,
                    892,
                    893
                ],
                "b._replace_coerce": [
                    624
                ],
                "m.any": [
                    632
                ],
                "new_rb.append": [
                    635
                ],
                "result_blocks.extend": [
                    637
                ],
                "all": [
                    666,
                    1406,
                    1390
                ],
                "block.is_numeric": [
                    666
                ],
                "block.is_datelike": [
                    672
                ],
                "block.is_extension": [
                    677
                ],
                "is_view": [
                    683
                ],
                "self.combine": [
                    712,
                    873,
                    702
                ],
                "b.is_bool": [
                    702
                ],
                "b.is_numeric": [
                    712
                ],
                "np.sort": [
                    720
                ],
                "b.mgr_locs.as_array": [
                    720,
                    727
                ],
                "inv_indexer": [
                    721,
                    727
                ],
                "lib.get_reverse_indexer": [
                    721
                ],
                "lib": [
                    721
                ],
                "new_blocks": [
                    1428,
                    1439,
                    1824,
                    1444,
                    1830,
                    1832,
                    723,
                    1111,
                    729,
                    1115,
                    1246,
                    734,
                    1248,
                    1891,
                    741,
                    1896,
                    1897,
                    746,
                    1131,
                    1261,
                    751,
                    1142
                ],
                "b.copy": [
                    725
                ],
                "new_blocks.append": [
                    729,
                    1131,
                    1830
                ],
                "self.items.take": [
                    732
                ],
                "IndexError": [
                    1529,
                    738,
                    1243
                ],
                "self._slice_take_blocks_ax0": [
                    741,
                    1246
                ],
                "slobj": [
                    1284,
                    741,
                    744,
                    1292,
                    749,
                    1532,
                    1300,
                    1301,
                    1304,
                    1307,
                    1276
                ],
                "slicer": [
                    744,
                    745,
                    746,
                    743
                ],
                "blk.getitem_block": [
                    746,
                    1284
                ],
                "item": [
                    960,
                    963,
                    1060,
                    1063,
                    1160,
                    1162,
                    1168,
                    945,
                    946,
                    756,
                    1596,
                    991
                ],
                "deep": [
                    777,
                    778,
                    785
                ],
                "ax.copy": [
                    779
                ],
                "ax.view": [
                    781
                ],
                "arr": [
                    1856,
                    1857,
                    803,
                    804,
                    815,
                    817,
                    1970,
                    819,
                    821
                ],
                "float": [
                    803
                ],
                "transpose": [
                    804,
                    821
                ],
                "arr.transpose": [
                    804,
                    821
                ],
                "items": [
                    898,
                    1956,
                    806,
                    807,
                    1961,
                    1962,
                    1964,
                    1965,
                    886,
                    889
                ],
                "mgr": [
                    1664,
                    807,
                    1640,
                    809,
                    1641,
                    811,
                    1676,
                    1677,
                    1678,
                    815,
                    817,
                    819,
                    2006,
                    1662,
                    1663
                ],
                "self.reindex_axis": [
                    807
                ],
                "self._is_single_block": [
                    816,
                    1280,
                    811
                ],
                "is_datetimetz": [
                    811
                ],
                "mgr.blocks": [
                    817,
                    811,
                    815
                ],
                "get_values": [
                    817,
                    815
                ],
                "object": [
                    1795,
                    901,
                    815
                ],
                "self.is_mixed_type": [
                    816
                ],
                "np.asarray": [
                    817,
                    1842
                ],
                "mgr._interleave": [
                    819
                ],
                "_interleaved_dtype": [
                    896,
                    1491,
                    828
                ],
                "is_sparse": [
                    832
                ],
                "dtype.subtype": [
                    833
                ],
                "is_extension_array_dtype": [
                    1034,
                    834,
                    899,
                    911
                ],
                "itemmask": [
                    844,
                    846,
                    839
                ],
                "np.zeros": [
                    993,
                    1094,
                    839
                ],
                "blk.get_values": [
                    843
                ],
                "itemmask.all": [
                    846
                ],
                "bd": [
                    873,
                    869,
                    871
                ],
                "append": [
                    1129,
                    1729,
                    871
                ],
                "bd.setdefault": [
                    871
                ],
                "bd.items": [
                    873
                ],
                "iget": [
                    884
                ],
                "loc": [
                    1164,
                    909,
                    1168,
                    1170,
                    1172,
                    1178,
                    1181,
                    1186,
                    1187,
                    1060,
                    1066,
                    1067,
                    1069,
                    1070,
                    946,
                    953,
                    1596,
                    957,
                    1597,
                    1598,
                    1605,
                    884,
                    893
                ],
                "items.is_unique": [
                    889
                ],
                "self._interleave": [
                    890
                ],
                "result.T": [
                    892
                ],
                "n": [
                    898,
                    1378,
                    901,
                    903,
                    1373,
                    1375
                ],
                "blk.iget": [
                    909
                ],
                "_from_sequence": [
                    912
                ],
                "dtype.construct_array_type": [
                    912
                ],
                "self.is_consolidated": [
                    924,
                    933
                ],
                "bm._is_consolidated": [
                    928
                ],
                "_consolidate": [
                    1493,
                    934
                ],
                "self.items.is_unique": [
                    943
                ],
                "self.items.get_loc": [
                    946,
                    1060,
                    1596,
                    991
                ],
                "is_scalar": [
                    1929,
                    951
                ],
                "indexer.item": [
                    953
                ],
                "self.iget": [
                    957
                ],
                "TypeError": [
                    961,
                    1938,
                    1165
                ],
                "self.reindex_indexer": [
                    1209,
                    964,
                    1382
                ],
                "block.iget": [
                    975
                ],
                "block.make_block_same_class": [
                    980
                ],
                "is_deleted": [
                    993,
                    994,
                    995,
                    1094,
                    1095,
                    1002,
                    1099,
                    1007,
                    1019
                ],
                "np.bool_": [
                    1760,
                    993,
                    1094,
                    1983
                ],
                "ref_loc_offset": [
                    1016,
                    995
                ],
                "is_deleted.cumsum": [
                    995
                ],
                "is_blk_deleted": [
                    1021,
                    1010,
                    997
                ],
                "affected_start": [
                    1000,
                    1002,
                    1004
                ],
                "is_deleted.nonzero": [
                    1002
                ],
                "_": [
                    1287,
                    1770,
                    1004,
                    1778,
                    1786,
                    1755
                ],
                "_fast_count_smallints": [
                    1172,
                    1004
                ],
                "bml": [
                    1006,
                    1007,
                    1009,
                    1014,
                    1016
                ],
                "blk_del": [
                    1009,
                    1012,
                    1013,
                    1007
                ],
                "nonzero": [
                    1007
                ],
                "bml.indexer": [
                    1016,
                    1007
                ],
                "blk.delete": [
                    1089,
                    1013
                ],
                "bml.add": [
                    1016
                ],
                "self._shape": [
                    1191,
                    1023
                ],
                "value_is_extension_type": [
                    1112,
                    1034,
                    1037
                ],
                "value.ndim": [
                    1043
                ],
                "_safe_reshape": [
                    1044
                ],
                "value.shape": [
                    1044,
                    1054
                ],
                "placement.indexer": [
                    1052
                ],
                "placement": [
                    1827,
                    1859,
                    1829,
                    2020,
                    2023,
                    1355,
                    2028,
                    1360,
                    1808,
                    1814,
                    1850,
                    2011,
                    1052
                ],
                "KeyError": [
                    1061
                ],
                "self.insert": [
                    1063
                ],
                "blknos": [
                    1316,
                    1069,
                    1075,
                    1300,
                    1303
                ],
                "blklocs": [
                    1070,
                    1301,
                    1077,
                    1306,
                    1340
                ],
                "unfit_mgr_locs": [
                    1121,
                    1124,
                    1125,
                    1135,
                    1072,
                    1139,
                    1108,
                    1109,
                    1140,
                    1081
                ],
                "unfit_val_locs": [
                    1073,
                    1082,
                    1107,
                    1129
                ],
                "removed_blknos": [
                    1092,
                    1095,
                    1099,
                    1104,
                    1074,
                    1086
                ],
                "val_locs": [
                    1075,
                    1077,
                    1079,
                    1082,
                    1085
                ],
                "libinternals.get_blkno_placements": [
                    1075,
                    1316
                ],
                "libinternals": [
                    1980,
                    1075,
                    1316
                ],
                "blk_locs": [
                    1089,
                    1081,
                    1077,
                    1079
                ],
                "val_locs.indexer": [
                    1077
                ],
                "blk.should_store": [
                    1078
                ],
                "blk.set": [
                    1079
                ],
                "value_getitem": [
                    1133,
                    1079
                ],
                "unfit_mgr_locs.append": [
                    1081
                ],
                "blk.mgr_locs.as_array": [
                    1081,
                    1177
                ],
                "unfit_val_locs.append": [
                    1082
                ],
                "removed_blknos.append": [
                    1086
                ],
                "blk.mgr_locs.indexer": [
                    1088,
                    1433,
                    1090
                ],
                "self.nblocks": [
                    1097,
                    1099,
                    1094
                ],
                "unfit_count": [
                    1140,
                    1124,
                    1109
                ],
                "new_blocks.extend": [
                    1115,
                    1439
                ],
                "value.copy": [
                    1117
                ],
                "mgr_loc": [
                    1121,
                    1332,
                    1334,
                    1119
                ],
                "unfit_val_items": [
                    1129,
                    1133
                ],
                "allow_duplicates": [
                    1160
                ],
                "new_axis": [
                    1189,
                    1640,
                    1228,
                    1260,
                    1168,
                    1233
                ],
                "self.items.insert": [
                    1168
                ],
                "count": [
                    1172,
                    1174
                ],
                "blk.mgr_locs.add": [
                    1175
                ],
                "new_mgr_locs": [
                    1177,
                    1178,
                    1179
                ],
                "blk.mgr_locs.as_array.copy": [
                    1177
                ],
                "self._blklocs.shape": [
                    1181
                ],
                "np.append": [
                    1184,
                    1183
                ],
                "np.insert": [
                    1186,
                    1187
                ],
                "new_index": [
                    1444,
                    1427,
                    1204,
                    1205,
                    1206,
                    1210
                ],
                "reindex": [
                    1205
                ],
                "method": [
                    1206
                ],
                "limit": [
                    1206
                ],
                "fill_value": [
                    1253,
                    1287,
                    1288,
                    1319,
                    1322,
                    1352,
                    1353,
                    1357,
                    1359,
                    1210,
                    1436,
                    1246
                ],
                "result.axes": [
                    1232,
                    1233
                ],
                "allow_dups": [
                    1239
                ],
                "_can_reindex": [
                    1240
                ],
                "blk.take_nd": [
                    1249,
                    1291,
                    1339
                ],
                "blk.fill_value": [
                    1253
                ],
                "allow_fill": [
                    1988,
                    1285,
                    1286,
                    1304,
                    1274,
                    1307,
                    1277
                ],
                "fill_tuple": [
                    1286,
                    1319,
                    1288,
                    1295,
                    1274
                ],
                "sl_type": [
                    1299,
                    1283,
                    1276
                ],
                "sllen": [
                    1276,
                    1284,
                    1294
                ],
                "_preprocess_slice_or_indexer": [
                    1276
                ],
                "slice_or_indexer": [
                    1985,
                    1987,
                    1976,
                    1979,
                    1980,
                    1277,
                    1983
                ],
                "maybe_promote": [
                    1287
                ],
                "self._make_na_block": [
                    1322
                ],
                "blk._can_consolidate": [
                    1328
                ],
                "newblk": [
                    1333,
                    1334,
                    1335
                ],
                "newblk.mgr_locs": [
                    1334
                ],
                "mgr_locs.indexer": [
                    1340
                ],
                "np.nan": [
                    1353,
                    1796
                ],
                "block_shape": [
                    1697,
                    1354,
                    1355,
                    1358,
                    1685
                ],
                "infer_dtype_from_scalar": [
                    1357
                ],
                "block_values.fill": [
                    1796,
                    1359
                ],
                "indexer.start": [
                    1368
                ],
                "indexer.stop": [
                    1368
                ],
                "indexer.step": [
                    1368
                ],
                "np.asanyarray": [
                    1370,
                    1987
                ],
                "maybe_convert_indices": [
                    1989,
                    1375
                ],
                "verify": [
                    1377
                ],
                "Exception": [
                    1379
                ],
                "take": [
                    1381
                ],
                "self_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other.axes": [
                    1387
                ],
                "other": [
                    1393,
                    1394,
                    1387,
                    1405
                ],
                "ax1.equals": [
                    1390
                ],
                "ax1": [
                    1390
                ],
                "ax2": [
                    1390
                ],
                "other._consolidate_inplace": [
                    1393
                ],
                "other.blocks": [
                    1394,
                    1405
                ],
                "block.mgr_locs.as_array.tolist": [
                    1402
                ],
                "block.mgr_locs.as_array": [
                    1402
                ],
                "block.mgr_locs": [
                    1402
                ],
                "block.dtype.name": [
                    1402
                ],
                "block.dtype": [
                    1402
                ],
                "self_blocks": [
                    1404,
                    1407
                ],
                "sorted": [
                    1889,
                    1404,
                    1405
                ],
                "canonicalize": [
                    1404,
                    1405
                ],
                "other_blocks": [
                    1405,
                    1407
                ],
                "block.equals": [
                    1407
                ],
                "oblock": [
                    1407
                ],
                "n_rows": [
                    1424,
                    1435
                ],
                "dummy": [
                    1425,
                    1426,
                    1427
                ],
                "unstacker_func": [
                    1425,
                    1433
                ],
                "new_columns": [
                    1442,
                    1426,
                    1444,
                    1434
                ],
                "dummy.get_new_columns": [
                    1426
                ],
                "dummy.get_new_index": [
                    1427
                ],
                "columns_mask": [
                    1440,
                    1442,
                    1429
                ],
                "mask": [
                    1432,
                    1440
                ],
                "blk._unstack": [
                    1432
                ],
                "partial": [
                    1433
                ],
                "columns_mask.extend": [
                    1440
                ],
                "BlockManager": [
                    1444,
                    1448,
                    1676,
                    2032,
                    1662
                ],
                "_is_consolidated": [
                    1452
                ],
                "_known_consolidated": [
                    1453
                ],
                "Union": [
                    1864,
                    1459
                ],
                "List": [
                    1459,
                    1863
                ],
                "fastpath": [
                    1471
                ],
                "b.astype": [
                    1492
                ],
                "self._block.values": [
                    1515,
                    1605
                ],
                "self._block": [
                    1568,
                    1571,
                    1597,
                    1605,
                    1575,
                    1545,
                    1515,
                    1579,
                    1549,
                    1553,
                    1562,
                    1532,
                    1565
                ],
                "self._block._slice": [
                    1532
                ],
                "self.index": [
                    1532
                ],
                "self._block.dtype": [
                    1545,
                    1562
                ],
                "self._block.array_dtype": [
                    1549
                ],
                "self._block.ftype": [
                    1553,
                    1565
                ],
                "self.dtype.name": [
                    1556
                ],
                "self.dtype": [
                    1556
                ],
                "self.ftype": [
                    1559
                ],
                "self._block.external_values": [
                    1568
                ],
                "self._block.internal_values": [
                    1571
                ],
                "self._block.to_dense": [
                    1575
                ],
                "self._block._can_hold_na": [
                    1579
                ],
                "self._block.delete": [
                    1597
                ],
                "delete": [
                    1598
                ],
                "non_empties": [
                    1624,
                    1627,
                    1628
                ],
                "to_concat": [
                    1624,
                    1636
                ],
                "obj.blocks": [
                    1628
                ],
                "new_block": [
                    1640,
                    1634,
                    1638,
                    1630
                ],
                "concat_same_type": [
                    1630
                ],
                "x.values": [
                    1632
                ],
                "x._block.values": [
                    1636
                ],
                "x._block": [
                    1636
                ],
                "mgr._consolidate_inplace": [
                    1677,
                    1663
                ],
                "shape": [
                    1792,
                    1795,
                    1669,
                    1680,
                    1853,
                    1855
                ],
                "e": [
                    1680,
                    1669,
                    1696,
                    1695
                ],
                "form_blocks": [
                    1675
                ],
                "arrays": [
                    1856,
                    1675,
                    1680,
                    1850,
                    1852,
                    1853,
                    1726
                ],
                "names": [
                    1713,
                    1850,
                    1675,
                    1725
                ],
                "passed": [
                    1700,
                    1685,
                    1687,
                    1688,
                    1695
                ],
                "map": [
                    1685
                ],
                "implied": [
                    1700,
                    1690,
                    1692,
                    1693,
                    1695
                ],
                "items_dict": [
                    1710,
                    1729,
                    1732,
                    1733,
                    1736,
                    1737,
                    1740,
                    1741,
                    1744,
                    1745,
                    1748,
                    1749,
                    1752,
                    1755,
                    1759,
                    1760,
                    1763,
                    1764,
                    1767,
                    1770,
                    1774,
                    1778,
                    1783,
                    1786
                ],
                "defaultdict": [
                    1710
                ],
                "extra_locs": [
                    1792,
                    1798,
                    1711,
                    1722,
                    1791
                ],
                "names_idx": [
                    1713,
                    1714,
                    1715,
                    1717,
                    1718
                ],
                "names_idx.equals": [
                    1714
                ],
                "names_indexer": [
                    1720,
                    1715,
                    1718
                ],
                "is_unique": [
                    1717
                ],
                "names_idx.intersection": [
                    1717
                ],
                "names_idx.get_indexer_for": [
                    1718
                ],
                "name_idx": [
                    1720,
                    1721,
                    1725,
                    1726
                ],
                "extra_locs.append": [
                    1722
                ],
                "block_type": [
                    1728,
                    1729
                ],
                "get_block_type": [
                    1728
                ],
                "block_type.__name__": [
                    1729
                ],
                "float_blocks": [
                    1733,
                    1734
                ],
                "_multi_blockify": [
                    1741,
                    1737,
                    1745,
                    1733
                ],
                "blocks.extend": [
                    1761,
                    1765,
                    1734,
                    1789,
                    1738,
                    1772,
                    1742,
                    1746,
                    1781,
                    1750,
                    1757
                ],
                "complex_blocks": [
                    1737,
                    1738
                ],
                "timedelta_blocks": [
                    1741,
                    1742
                ],
                "int_blocks": [
                    1745,
                    1746
                ],
                "datetime_blocks": [
                    1749,
                    1750
                ],
                "_simple_blockify": [
                    1760,
                    1764,
                    1749
                ],
                "_NS_DTYPE": [
                    1749
                ],
                "dttz_blocks": [
                    1753,
                    1757
                ],
                "array": [
                    1786,
                    1769,
                    1770,
                    1777,
                    1778,
                    1785,
                    1754,
                    1755
                ],
                "DatetimeTZBlock": [
                    1754
                ],
                "bool_blocks": [
                    1760,
                    1761
                ],
                "object_blocks": [
                    1764,
                    1765
                ],
                "np.object_": [
                    1764
                ],
                "cat_blocks": [
                    1768,
                    1772
                ],
                "CategoricalBlock": [
                    1769
                ],
                "external_blocks": [
                    1776,
                    1789,
                    1784,
                    1781
                ],
                "ExtensionBlock": [
                    1777
                ],
                "ObjectValuesExtensionBlock": [
                    1785
                ],
                "na_block": [
                    1798,
                    1799
                ],
                "_stack_arrays": [
                    1808,
                    1827
                ],
                "tuples": [
                    1808,
                    1850,
                    1822
                ],
                "values.dtype": [
                    1811
                ],
                "values.astype": [
                    1812
                ],
                "grouper": [
                    1825,
                    1892,
                    1822,
                    1889
                ],
                "itertools.groupby": [
                    1889,
                    1822
                ],
                "itertools": [
                    1889,
                    1822
                ],
                "tup_block": [
                    1825,
                    1827
                ],
                "ABCSeries": [
                    1845,
                    1839
                ],
                "x._values": [
                    1840
                ],
                "x.shape": [
                    1848
                ],
                "first": [
                    1852,
                    1853
                ],
                "_shape_compat": [
                    1853
                ],
                "stacked": [
                    1857,
                    1859,
                    1855
                ],
                "_asarray_compat": [
                    1857
                ],
                "find_common_type": [
                    1879
                ],
                "Optional": [
                    1864
                ],
                "np.dtype": [
                    1864
                ],
                "ExtensionDtype": [
                    1864
                ],
                "gkey": [
                    1888,
                    1889
                ],
                "x._consolidate_key": [
                    1888
                ],
                "_can_consolidate": [
                    1892,
                    1894
                ],
                "group_blocks": [
                    1892,
                    1894
                ],
                "merged_blocks": [
                    1896,
                    1893
                ],
                "_merge_blocks": [
                    1893
                ],
                "op": [
                    1920,
                    1918,
                    1927
                ],
                "operator.eq": [
                    1918
                ],
                "operator": [
                    1918
                ],
                "np.vectorize": [
                    1920
                ],
                "re.search": [
                    1921
                ],
                "re": [
                    1921
                ],
                "is_a_array": [
                    1929,
                    1924,
                    1932
                ],
                "np.ndarray": [
                    1924,
                    1925,
                    1983
                ],
                "is_b_array": [
                    1929,
                    1925,
                    1935
                ],
                "type_names": [
                    1936,
                    1930,
                    1940,
                    1933
                ],
                "__name__": [
                    1930
                ],
                "type": [
                    1930
                ],
                "a.dtype": [
                    1933
                ],
                "index": [
                    1954,
                    1958,
                    1961,
                    1962,
                    1964,
                    1965
                ],
                "MultiIndex": [
                    1962,
                    1954
                ],
                "y": [
                    1961,
                    1957
                ],
                "MultiIndex.from_tuples": [
                    1962
                ],
                "index.names": [
                    1962
                ],
                "index.name": [
                    1965
                ],
                "np.bincount": [
                    1970
                ],
                "arr.astype": [
                    1970
                ],
                "np.int_": [
                    1970
                ],
                "nz": [
                    1971,
                    1972
                ],
                "counts.nonzero": [
                    1971
                ],
                "np.c_": [
                    1972
                ],
                "libinternals.slice_len": [
                    1980
                ],
                "length": [
                    1980,
                    1989
                ],
                "slice_or_indexer.dtype": [
                    1983
                ],
                "slice_or_indexer.sum": [
                    1985
                ],
                "concat_plans": [
                    2008,
                    2005
                ],
                "get_mgr_concatenation_plan": [
                    2006
                ],
                "indexers": [
                    2013,
                    2006
                ],
                "mgrs_indexers": [
                    2006
                ],
                "concat_plan": [
                    2008,
                    2011
                ],
                "combine_concat_plans": [
                    2008
                ],
                "concat_axis": [
                    2008,
                    2027
                ],
                "join_units": [
                    2021,
                    2022,
                    2023,
                    2027,
                    2011,
                    2013,
                    2014
                ],
                "values.copy": [
                    2017
                ],
                "values.view": [
                    2019
                ],
                "b.make_block_same_class": [
                    2020
                ],
                "is_uniform_join_units": [
                    2021
                ],
                "block.concat_same_type": [
                    2022
                ],
                "ju.block": [
                    2023
                ],
                "ju": [
                    2023
                ],
                "concatenate_join_units": [
                    2027
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    60
                ],
                "__slots__": [
                    112,
                    1454
                ],
                "Sequence": [
                    125,
                    126
                ],
                "Block": [
                    1863,
                    1458,
                    1650,
                    125,
                    1501
                ],
                "Index": [
                    520,
                    1459,
                    1965,
                    126
                ],
                "self.axes": [
                    129,
                    1537,
                    263,
                    782,
                    784,
                    149,
                    537,
                    285,
                    927,
                    1189,
                    166,
                    294,
                    296,
                    170,
                    174,
                    307,
                    1205,
                    439,
                    183,
                    441,
                    1598,
                    1472,
                    197,
                    327,
                    1228,
                    1484,
                    1232,
                    342,
                    984,
                    1240,
                    731,
                    1381,
                    235,
                    748,
                    1259,
                    1387,
                    498,
                    1019,
                    509,
                    639
                ],
                "self": [
                    1024,
                    1537,
                    516,
                    1541,
                    1545,
                    1549,
                    529,
                    1021,
                    1043,
                    1553,
                    1556,
                    535,
                    1531,
                    537,
                    1559,
                    539,
                    1532,
                    1562,
                    1054,
                    1565,
                    1568,
                    1571,
                    1060,
                    551,
                    1063,
                    1575,
                    554,
                    1579,
                    557,
                    1069,
                    1070,
                    560,
                    563,
                    1076,
                    566,
                    569,
                    572,
                    1596,
                    1597,
                    575,
                    1088,
                    1598,
                    578,
                    1090,
                    581,
                    1094,
                    1605,
                    585,
                    1097,
                    1099,
                    1100,
                    1101,
                    1103,
                    1104,
                    593,
                    1118,
                    1124,
                    613,
                    1125,
                    1134,
                    1139,
                    1140,
                    1142,
                    1145,
                    639,
                    129,
                    130,
                    133,
                    647,
                    136,
                    648,
                    649,
                    1160,
                    140,
                    652,
                    142,
                    653,
                    144,
                    654,
                    1168,
                    659,
                    660,
                    149,
                    1170,
                    1172,
                    152,
                    153,
                    665,
                    666,
                    156,
                    1173,
                    1181,
                    671,
                    672,
                    1183,
                    1184,
                    1186,
                    1187,
                    677,
                    166,
                    1189,
                    1190,
                    1191,
                    170,
                    682,
                    683,
                    1193,
                    174,
                    1195,
                    1196,
                    1205,
                    183,
                    1209,
                    701,
                    702,
                    196,
                    197,
                    711,
                    712,
                    202,
                    1228,
                    205,
                    717,
                    1229,
                    208,
                    721,
                    210,
                    1231,
                    1232,
                    1236,
                    1240,
                    217,
                    218,
                    731,
                    732,
                    1242,
                    222,
                    734,
                    1246,
                    737,
                    741,
                    230,
                    231,
                    1256,
                    746,
                    235,
                    748,
                    1259,
                    1261,
                    239,
                    751,
                    241,
                    756,
                    247,
                    760,
                    250,
                    253,
                    254,
                    1277,
                    1280,
                    257,
                    258,
                    1281,
                    261,
                    262,
                    263,
                    1285,
                    270,
                    782,
                    784,
                    785,
                    1300,
                    1301,
                    1304,
                    1307,
                    285,
                    286,
                    802,
                    803,
                    294,
                    807,
                    296,
                    809,
                    1322,
                    811,
                    1325,
                    816,
                    307,
                    310,
                    315,
                    828,
                    318,
                    319,
                    320,
                    323,
                    837,
                    326,
                    327,
                    839,
                    841,
                    1354,
                    333,
                    338,
                    339,
                    340,
                    342,
                    343,
                    1366,
                    347,
                    1373,
                    867,
                    1381,
                    870,
                    1382,
                    873,
                    1387,
                    1392,
                    1394,
                    883,
                    884,
                    886,
                    890,
                    891,
                    1404,
                    383,
                    384,
                    896,
                    391,
                    905,
                    1424,
                    1425,
                    1431,
                    1433,
                    924,
                    925,
                    927,
                    933,
                    422,
                    934,
                    935,
                    936,
                    937,
                    429,
                    943,
                    946,
                    948,
                    439,
                    440,
                    441,
                    957,
                    1472,
                    963,
                    964,
                    965,
                    1484,
                    974,
                    975,
                    984,
                    478,
                    991,
                    1504,
                    481,
                    993,
                    997,
                    1511,
                    1515,
                    1004,
                    1005,
                    495,
                    498,
                    1528,
                    1019,
                    1020,
                    509,
                    1023
                ],
                "ensure_index": [
                    129,
                    294,
                    1484,
                    173,
                    1713,
                    1204,
                    149,
                    285
                ],
                "ax": [
                    129,
                    294,
                    166,
                    327,
                    329,
                    489,
                    331,
                    491,
                    492,
                    520,
                    779,
                    781,
                    782,
                    1690,
                    285
                ],
                "axes": [
                    1792,
                    129,
                    513,
                    1669,
                    520,
                    1675,
                    1676,
                    1680,
                    148,
                    149,
                    1690,
                    156,
                    547,
                    1714,
                    1717,
                    1718,
                    439,
                    441,
                    731,
                    732,
                    734,
                    491,
                    494,
                    2032,
                    500,
                    1659,
                    1662
                ],
                "self.blocks": [
                    896,
                    257,
                    130,
                    1281,
                    516,
                    261,
                    262,
                    905,
                    652,
                    270,
                    1021,
                    660,
                    1173,
                    535,
                    1404,
                    1431,
                    666,
                    539,
                    286,
                    927,
                    672,
                    1184,
                    802,
                    1187,
                    677,
                    422,
                    934,
                    1190,
                    682,
                    683,
                    1195,
                    1325,
                    1076,
                    310,
                    828,
                    702,
                    712,
                    841,
                    205,
                    333,
                    974,
                    208,
                    1103,
                    1104,
                    339,
                    340,
                    222,
                    1504,
                    1124,
                    613,
                    870,
                    997,
                    1256,
                    1511,
                    746,
                    1005,
                    495,
                    241,
                    1394,
                    883,
                    884,
                    1139,
                    1142,
                    760,
                    1020,
                    253
                ],
                "blocks": [
                    512,
                    130,
                    1667,
                    132,
                    516,
                    1668,
                    1669,
                    1799,
                    1801,
                    1675,
                    524,
                    1676,
                    526,
                    529,
                    532,
                    1432,
                    153,
                    155,
                    156,
                    1439,
                    1315,
                    1321,
                    1335,
                    1338,
                    1347,
                    1731,
                    1734,
                    1738,
                    716,
                    1742,
                    720,
                    1746,
                    724,
                    1876,
                    1750,
                    1879,
                    2009,
                    1628,
                    1629,
                    1630,
                    1757,
                    1632,
                    1761,
                    1889,
                    1765,
                    873,
                    1772,
                    494,
                    2030,
                    2032,
                    1650,
                    1652,
                    501,
                    1653,
                    1781,
                    504,
                    1658,
                    1659,
                    1789,
                    1662
                ],
                "block": [
                    132,
                    133,
                    136,
                    1170,
                    1814,
                    1815,
                    666,
                    672,
                    677,
                    1190,
                    1829,
                    1830,
                    1473,
                    1476,
                    1477,
                    1478,
                    1482,
                    333,
                    334,
                    974,
                    975,
                    1487,
                    1490,
                    1491,
                    340,
                    341,
                    342,
                    980,
                    1492,
                    1493,
                    1495,
                    1499,
                    1501,
                    1502,
                    2014,
                    1504,
                    2022,
                    496,
                    501,
                    1402,
                    1407
                ],
                "self.ndim": [
                    737,
                    133,
                    1285,
                    136,
                    1528,
                    202,
                    1134,
                    1170,
                    1043,
                    152,
                    1118,
                    1242,
                    891,
                    478
                ],
                "block.ndim": [
                    136,
                    133
                ],
                "do_integrity_check": [
                    441,
                    139
                ],
                "self._verify_integrity": [
                    140
                ],
                "self._consolidate_check": [
                    648,
                    142
                ],
                "self._rebuild_blknos_and_blklocs": [
                    144,
                    937,
                    320,
                    1024
                ],
                "a": [
                    1924,
                    1927,
                    1930,
                    1933,
                    149
                ],
                "np.array": [
                    257,
                    1565,
                    1477,
                    1575,
                    153,
                    1562,
                    253
                ],
                "np": [
                    1920,
                    257,
                    1795,
                    1796,
                    901,
                    1924,
                    903,
                    520,
                    1925,
                    525,
                    1425,
                    537,
                    153,
                    1562,
                    1565,
                    1183,
                    1184,
                    1186,
                    547,
                    803,
                    1187,
                    1575,
                    817,
                    1842,
                    1715,
                    948,
                    1970,
                    1972,
                    1855,
                    1983,
                    1090,
                    1987,
                    837,
                    1094,
                    839,
                    584,
                    1097,
                    1353,
                    1099,
                    1477,
                    1864,
                    1358,
                    720,
                    1108,
                    1368,
                    217,
                    218,
                    1370,
                    1760,
                    225,
                    993,
                    1124,
                    1764,
                    1140,
                    253
                ],
                "self.array_dtype": [
                    153
                ],
                "self.__class__": [
                    326,
                    1261,
                    751,
                    529,
                    440,
                    927,
                    1531,
                    156,
                    734,
                    639
                ],
                "__bool__": [
                    162
                ],
                "__nonzero__": [
                    162
                ],
                "new_labels": [
                    1381,
                    1383,
                    173,
                    175,
                    183
                ],
                "old_len": [
                    177,
                    180,
                    174
                ],
                "axis": [
                    520,
                    174,
                    432,
                    433,
                    1205,
                    183,
                    1463,
                    1464,
                    1210,
                    1468,
                    1472,
                    197,
                    1228,
                    1484,
                    1233,
                    1240,
                    1242,
                    1245,
                    1373,
                    1502,
                    737,
                    1251,
                    740,
                    1381,
                    743,
                    744,
                    1383,
                    1260,
                    749,
                    496,
                    1528
                ],
                "new_len": [
                    177,
                    180,
                    175
                ],
                "obj": [
                    196,
                    197,
                    198,
                    431,
                    432,
                    433,
                    1628
                ],
                "self.copy": [
                    196,
                    1231
                ],
                "copy": [
                    2016,
                    196,
                    712,
                    873,
                    779,
                    1228,
                    781,
                    782,
                    1070,
                    1231,
                    2027,
                    725,
                    1210,
                    702
                ],
                "obj.set_axis": [
                    197
                ],
                "_transform_index": [
                    197
                ],
                "mapper": [
                    197
                ],
                "level": [
                    1955,
                    197,
                    1957
                ],
                "blk": [
                    257,
                    1281,
                    1284,
                    1287,
                    905,
                    1291,
                    652,
                    908,
                    909,
                    1173,
                    1174,
                    1175,
                    1431,
                    1177,
                    1432,
                    1179,
                    1433,
                    1325,
                    1328,
                    1076,
                    1333,
                    1078,
                    1079,
                    1081,
                    1339,
                    1085,
                    1088,
                    1089,
                    1090,
                    841,
                    842,
                    843,
                    208,
                    209,
                    1104,
                    222,
                    223,
                    1249,
                    613,
                    1253,
                    1256,
                    617,
                    746,
                    1005,
                    1006,
                    1013,
                    1014,
                    1016,
                    253
                ],
                "blk.mgr_locs.is_slice_like": [
                    209
                ],
                "blk.mgr_locs": [
                    1088,
                    1090,
                    1177,
                    842,
                    1433,
                    908,
                    1006,
                    209,
                    1014,
                    1174,
                    1016,
                    1081,
                    1175,
                    1179,
                    1085,
                    223
                ],
                "blk.mgr_locs.as_slice": [
                    209
                ],
                "new_blknos": [
                    224,
                    227,
                    230,
                    1097,
                    1098,
                    1099,
                    1101,
                    217,
                    219
                ],
                "np.empty": [
                    803,
                    1795,
                    837,
                    901,
                    903,
                    1097,
                    537,
                    1358,
                    1425,
                    217,
                    218,
                    1855
                ],
                "self.shape": [
                    993,
                    803,
                    837,
                    839,
                    1354,
                    1424,
                    721,
                    338,
                    217,
                    218,
                    1373,
                    1277,
                    1054
                ],
                "np.int64": [
                    1097,
                    217,
                    218,
                    1987
                ],
                "new_blklocs": [
                    225,
                    218,
                    220,
                    231
                ],
                "new_blknos.fill": [
                    1098,
                    219
                ],
                "new_blklocs.fill": [
                    220
                ],
                "blkno": [
                    224,
                    1316,
                    1317,
                    1004,
                    1005,
                    1325,
                    1010,
                    1075,
                    1076,
                    1172,
                    1173,
                    1086,
                    1021,
                    222
                ],
                "rl": [
                    224,
                    225,
                    842,
                    843,
                    844,
                    908,
                    909,
                    223
                ],
                "rl.indexer": [
                    224,
                    225,
                    843,
                    844
                ],
                "np.arange": [
                    225,
                    1090,
                    547,
                    1124,
                    1099,
                    525,
                    1715,
                    948,
                    1140,
                    1368
                ],
                "self._blknos": [
                    1184,
                    258,
                    1187,
                    1124,
                    230,
                    1004,
                    1069,
                    974,
                    1100,
                    1101,
                    1139,
                    1172,
                    1300,
                    1304,
                    254
                ],
                "self._blklocs": [
                    1088,
                    1090,
                    1186,
                    1125,
                    231,
                    1070,
                    975,
                    1140,
                    1301,
                    1307,
                    1181,
                    1183
                ],
                "self._consolidate_inplace": [
                    481,
                    867,
                    391,
                    711,
                    1196,
                    239,
                    1392,
                    659,
                    1236,
                    1366,
                    665,
                    701,
                    671
                ],
                "counts": [
                    240,
                    1970,
                    243,
                    244,
                    1971,
                    1972
                ],
                "b": [
                    1921,
                    1667,
                    516,
                    261,
                    262,
                    517,
                    1668,
                    1925,
                    1930,
                    269,
                    270,
                    525,
                    526,
                    1936,
                    532,
                    539,
                    540,
                    287,
                    422,
                    424,
                    425,
                    429,
                    435,
                    702,
                    712,
                    720,
                    724,
                    725,
                    726,
                    727,
                    1492,
                    729,
                    1879,
                    1629,
                    2014,
                    2015,
                    2020,
                    870,
                    871,
                    2022,
                    2026,
                    621,
                    622,
                    495,
                    496,
                    241,
                    242,
                    243,
                    498,
                    624,
                    2030,
                    247,
                    504,
                    250,
                    635,
                    1021,
                    1918
                ],
                "v": [
                    1728,
                    1729,
                    242,
                    243,
                    1726
                ],
                "f": [
                    393,
                    399,
                    242,
                    435,
                    405
                ],
                "counts.get": [
                    243
                ],
                "b.shape": [
                    243,
                    1668,
                    525
                ],
                "self._get_counts": [
                    250,
                    247
                ],
                "b.dtype.name": [
                    247
                ],
                "b.dtype": [
                    871,
                    1936,
                    1879,
                    247,
                    1629
                ],
                "b.ftype": [
                    250
                ],
                "dtypes": [
                    253,
                    254
                ],
                "blk.dtype": [
                    253,
                    1287
                ],
                "algos.take_1d": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "algos": [
                    258,
                    1100,
                    726,
                    1303,
                    1306,
                    254
                ],
                "ftypes": [
                    257,
                    258,
                    652,
                    653
                ],
                "blk.ftype": [
                    257,
                    652
                ],
                "block_values": [
                    1795,
                    1796,
                    261,
                    1798,
                    1358,
                    1359,
                    1360,
                    277
                ],
                "b.values": [
                    261,
                    269,
                    525,
                    532,
                    2015
                ],
                "block_items": [
                    277,
                    262
                ],
                "self.items": [
                    384,
                    262,
                    1160,
                    1168,
                    1425,
                    1433,
                    1060,
                    1063,
                    429,
                    943,
                    946,
                    948,
                    1596,
                    323,
                    963,
                    965,
                    343,
                    347,
                    732,
                    991,
                    756,
                    886,
                    1019,
                    383
                ],
                "b.mgr_locs.indexer": [
                    622,
                    269,
                    262,
                    429
                ],
                "b.mgr_locs": [
                    517,
                    262,
                    424,
                    269,
                    429,
                    622,
                    720,
                    726,
                    727,
                    540
                ],
                "axes_array": [
                    267,
                    277,
                    263
                ],
                "extra_state": [
                    265,
                    277
                ],
                "make_block": [
                    1634,
                    547,
                    1829,
                    1638,
                    1798,
                    1769,
                    2026,
                    1132,
                    1360,
                    1777,
                    1170,
                    1785,
                    1814,
                    281,
                    1754,
                    1659,
                    1116,
                    1502
                ],
                "values": [
                    1808,
                    1811,
                    532,
                    1812,
                    1814,
                    281,
                    544,
                    547,
                    1827,
                    1829,
                    311,
                    312,
                    975,
                    593,
                    981,
                    601,
                    605,
                    607,
                    1632,
                    1633,
                    1634,
                    2015,
                    1636,
                    1637,
                    1638,
                    2017,
                    2019,
                    2020
                ],
                "mgr_locs": [
                    1316,
                    1322,
                    1332,
                    311,
                    312,
                    281,
                    1340,
                    1342
                ],
                "state": [
                    292,
                    283,
                    284,
                    285,
                    287
                ],
                "unpickle_block": [
                    311,
                    287
                ],
                "ax_arrays": [
                    292,
                    294
                ],
                "bvalues": [
                    312,
                    292
                ],
                "bitems": [
                    296,
                    304,
                    307,
                    292
                ],
                "equals": [
                    296
                ],
                "all_mgr_locs": [
                    304,
                    306,
                    312
                ],
                "get_indexer": [
                    307
                ],
                "blk_items": [
                    307
                ],
                "self._post_setstate": [
                    315
                ],
                "self._is_consolidated": [
                    649,
                    653,
                    318,
                    935
                ],
                "self._known_consolidated": [
                    647,
                    936,
                    1193,
                    654,
                    1145,
                    319
                ],
                "output": [
                    326,
                    329,
                    331,
                    334,
                    335
                ],
                "pprint_thing": [
                    334,
                    326
                ],
                "self.__class__.__name__": [
                    326
                ],
                "i": [
                    908,
                    909,
                    538,
                    541,
                    542,
                    1957,
                    1720,
                    1722,
                    1856,
                    1729,
                    1857,
                    327,
                    328,
                    331,
                    974,
                    975,
                    1104,
                    1754,
                    1755,
                    609,
                    1769,
                    618,
                    1770,
                    622,
                    623,
                    1777,
                    1778,
                    1785,
                    1786
                ],
                "mgr_shape": [
                    338,
                    341
                ],
                "tot_items": [
                    1668,
                    1669,
                    339,
                    1685,
                    342,
                    343,
                    347
                ],
                "x.mgr_locs": [
                    339
                ],
                "x": [
                    1792,
                    1921,
                    1822,
                    1957,
                    1958,
                    1961,
                    1964,
                    1839,
                    1840,
                    1842,
                    1845,
                    1846,
                    1848,
                    339,
                    1624,
                    1632,
                    1888,
                    1636,
                    1918
                ],
                "block._verify_integrity": [
                    341
                ],
                "block.shape": [
                    341,
                    342
                ],
                "construction_error": [
                    1680,
                    1669,
                    342
                ],
                "result_blocks": [
                    611,
                    425,
                    436,
                    438,
                    441,
                    379,
                    637,
                    639
                ],
                "filter_locs": [
                    384,
                    388,
                    424,
                    383
                ],
                "self.items.get_indexer_for": [
                    963,
                    383
                ],
                "kwargs": [
                    388,
                    1541,
                    395,
                    401,
                    416,
                    418,
                    419,
                    551,
                    554,
                    557,
                    560,
                    433,
                    435,
                    563,
                    566,
                    569,
                    572,
                    575,
                    578,
                    581,
                    585
                ],
                "consolidate": [
                    480,
                    390
                ],
                "align_copy": [
                    400,
                    433,
                    394,
                    408
                ],
                "kwargs.get": [
                    401,
                    395
                ],
                "align_keys": [
                    417,
                    396,
                    398,
                    402,
                    404,
                    409,
                    411
                ],
                "aligned_args": [
                    431,
                    428,
                    415
                ],
                "k": [
                    416,
                    417,
                    418,
                    419,
                    1729,
                    431,
                    433,
                    1725
                ],
                "ABCExtensionArray": [
                    418
                ],
                "b.mgr_locs.isin": [
                    424
                ],
                "result_blocks.append": [
                    425
                ],
                "b_items": [
                    433,
                    429
                ],
                "aligned_args.items": [
                    431
                ],
                "obj._info_axis_number": [
                    432
                ],
                "obj.reindex": [
                    433
                ],
                "applied": [
                    435,
                    436
                ],
                "_extend_blocks": [
                    1896,
                    633,
                    436
                ],
                "self.make_empty": [
                    717,
                    439
                ],
                "bm": [
                    640,
                    641,
                    928,
                    929,
                    930,
                    1444,
                    1445,
                    751,
                    752,
                    753,
                    440,
                    927,
                    443,
                    444,
                    639
                ],
                "bm._consolidate_inplace": [
                    640,
                    752,
                    443,
                    929
                ],
                "is_list_like": [
                    488
                ],
                "qs": [
                    488,
                    489,
                    498,
                    496
                ],
                "Float64Index": [
                    489
                ],
                "b.quantile": [
                    496
                ],
                "interpolation": [
                    496
                ],
                "axe": [
                    498,
                    500
                ],
                "get_axe": [
                    498
                ],
                "axes.append": [
                    500
                ],
                "blocks.append": [
                    1799,
                    1321,
                    2030,
                    501,
                    1335,
                    1338
                ],
                "ndim": [
                    504,
                    505,
                    507,
                    1451
                ],
                "b.ndim": [
                    504
                ],
                "new_axes": [
                    513,
                    520,
                    523,
                    748,
                    749,
                    782,
                    751,
                    784,
                    529,
                    785,
                    1259,
                    1260,
                    1261,
                    509
                ],
                "sb": [
                    516,
                    517
                ],
                "sb.mgr_locs": [
                    517
                ],
                "np.concatenate": [
                    520,
                    1108,
                    720
                ],
                "ax.values": [
                    520
                ],
                "transposed": [
                    522
                ],
                "b.make_block": [
                    525
                ],
                "b.values.T": [
                    525
                ],
                "concat_compat": [
                    1633,
                    532,
                    1637
                ],
                "indexer": [
                    537,
                    541,
                    544,
                    948,
                    1205,
                    951,
                    952,
                    953,
                    1210,
                    963,
                    1987,
                    965,
                    1989,
                    1990,
                    1227,
                    720,
                    721,
                    1367,
                    1240,
                    1369,
                    1368,
                    1370,
                    732,
                    1246,
                    991,
                    1375,
                    994,
                    1250,
                    1378,
                    1381,
                    999,
                    1000,
                    1383
                ],
                "np.intp": [
                    537
                ],
                "j": [
                    540,
                    541
                ],
                "values.take": [
                    544
                ],
                "SingleBlockManager": [
                    1640,
                    978,
                    546
                ],
                "self.apply": [
                    578,
                    581,
                    1541,
                    551,
                    585,
                    554,
                    557,
                    560,
                    785,
                    563,
                    566,
                    569,
                    572,
                    575
                ],
                "func": [
                    1961,
                    1964,
                    1957,
                    551
                ],
                "dtype": [
                    896,
                    899,
                    903,
                    911,
                    912,
                    1808,
                    1811,
                    1812,
                    1822,
                    1825,
                    1827,
                    828,
                    1855,
                    832,
                    833,
                    578,
                    834,
                    835,
                    837,
                    843,
                    1357,
                    1358,
                    1491,
                    1492,
                    1892,
                    1894,
                    873
                ],
                "np.ndim": [
                    584
                ],
                "value": [
                    1063,
                    584,
                    585,
                    1034,
                    1040,
                    1170,
                    1043,
                    1044,
                    1078,
                    1047,
                    1052,
                    1117,
                    1054
                ],
                "inplace": [
                    617,
                    628,
                    590
                ],
                "validate_bool_kwarg": [
                    590
                ],
                "self.as_array": [
                    593
                ],
                "isna": [
                    960,
                    945,
                    948,
                    600,
                    601
                ],
                "s": [
                    609,
                    618,
                    626,
                    600,
                    602,
                    605,
                    607
                ],
                "Timedelta": [
                    602
                ],
                "Timestamp": [
                    602
                ],
                "_compare_or_regex_search": [
                    604,
                    607
                ],
                "maybe_convert_objects": [
                    605
                ],
                "s.asm8": [
                    605
                ],
                "regex": [
                    609,
                    605,
                    630,
                    1917,
                    607
                ],
                "masks": [
                    609,
                    622
                ],
                "comp": [
                    609
                ],
                "src_list": [
                    609,
                    618,
                    612
                ],
                "src_len": [
                    612,
                    623
                ],
                "rb": [
                    617,
                    637,
                    636,
                    621
                ],
                "blk.copy": [
                    617,
                    1333
                ],
                "d": [
                    618,
                    627
                ],
                "dest_list": [
                    618
                ],
                "new_rb": [
                    636,
                    633,
                    635,
                    620
                ],
                "m": [
                    632,
                    625,
                    622
                ],
                "convert": [
                    629,
                    1374,
                    623
                ],
                "result": [
                    901,
                    903,
                    1927,
                    1929,
                    909,
                    912,
                    914,
                    1943,
                    837,
                    843,
                    1231,
                    1232,
                    849,
                    1233,
                    1234,
                    624,
                    633,
                    890,
                    892,
                    893
                ],
                "b._replace_coerce": [
                    624
                ],
                "m.any": [
                    632
                ],
                "new_rb.append": [
                    635
                ],
                "result_blocks.extend": [
                    637
                ],
                "block.is_numeric": [
                    666
                ],
                "block.is_datelike": [
                    672
                ],
                "block.is_extension": [
                    677
                ],
                "is_view": [
                    683
                ],
                "self.combine": [
                    712,
                    873,
                    702
                ],
                "b.is_bool": [
                    702
                ],
                "b.is_numeric": [
                    712
                ],
                "np.sort": [
                    720
                ],
                "b.mgr_locs.as_array": [
                    720,
                    727
                ],
                "inv_indexer": [
                    721,
                    727
                ],
                "lib.get_reverse_indexer": [
                    721
                ],
                "lib": [
                    721
                ],
                "new_blocks": [
                    1428,
                    1439,
                    1824,
                    1444,
                    1830,
                    1832,
                    723,
                    1111,
                    729,
                    1115,
                    1246,
                    734,
                    1248,
                    1891,
                    741,
                    1896,
                    1897,
                    746,
                    1131,
                    1261,
                    751,
                    1142
                ],
                "b.copy": [
                    725
                ],
                "new_blocks.append": [
                    729,
                    1131,
                    1830
                ],
                "self.items.take": [
                    732
                ],
                "self._slice_take_blocks_ax0": [
                    741,
                    1246
                ],
                "slobj": [
                    1284,
                    741,
                    744,
                    1292,
                    749,
                    1532,
                    1300,
                    1301,
                    1304,
                    1307,
                    1276
                ],
                "slicer": [
                    744,
                    745,
                    746,
                    743
                ],
                "blk.getitem_block": [
                    746,
                    1284
                ],
                "item": [
                    960,
                    963,
                    1060,
                    1063,
                    1160,
                    1162,
                    1168,
                    945,
                    946,
                    756,
                    1596,
                    991
                ],
                "deep": [
                    777,
                    778,
                    785
                ],
                "ax.copy": [
                    779
                ],
                "ax.view": [
                    781
                ],
                "arr": [
                    1856,
                    1857,
                    803,
                    804,
                    815,
                    817,
                    1970,
                    819,
                    821
                ],
                "transpose": [
                    804,
                    821
                ],
                "arr.transpose": [
                    804,
                    821
                ],
                "items": [
                    898,
                    1956,
                    806,
                    807,
                    1961,
                    1962,
                    1964,
                    1965,
                    886,
                    889
                ],
                "mgr": [
                    1664,
                    807,
                    1640,
                    809,
                    1641,
                    811,
                    1676,
                    1677,
                    1678,
                    815,
                    817,
                    819,
                    2006,
                    1662,
                    1663
                ],
                "self.reindex_axis": [
                    807
                ],
                "self._is_single_block": [
                    816,
                    1280,
                    811
                ],
                "is_datetimetz": [
                    811
                ],
                "mgr.blocks": [
                    817,
                    811,
                    815
                ],
                "get_values": [
                    817,
                    815
                ],
                "self.is_mixed_type": [
                    816
                ],
                "np.asarray": [
                    817,
                    1842
                ],
                "mgr._interleave": [
                    819
                ],
                "_interleaved_dtype": [
                    896,
                    1491,
                    828
                ],
                "is_sparse": [
                    832
                ],
                "dtype.subtype": [
                    833
                ],
                "is_extension_array_dtype": [
                    1034,
                    834,
                    899,
                    911
                ],
                "itemmask": [
                    844,
                    846,
                    839
                ],
                "np.zeros": [
                    993,
                    1094,
                    839
                ],
                "blk.get_values": [
                    843
                ],
                "itemmask.all": [
                    846
                ],
                "bd": [
                    873,
                    869,
                    871
                ],
                "append": [
                    1129,
                    1729,
                    871
                ],
                "bd.setdefault": [
                    871
                ],
                "bd.items": [
                    873
                ],
                "iget": [
                    884
                ],
                "loc": [
                    1164,
                    909,
                    1168,
                    1170,
                    1172,
                    1178,
                    1181,
                    1186,
                    1187,
                    1060,
                    1066,
                    1067,
                    1069,
                    1070,
                    946,
                    953,
                    1596,
                    957,
                    1597,
                    1598,
                    1605,
                    884,
                    893
                ],
                "items.is_unique": [
                    889
                ],
                "self._interleave": [
                    890
                ],
                "result.T": [
                    892
                ],
                "n": [
                    898,
                    1378,
                    901,
                    903,
                    1373,
                    1375
                ],
                "blk.iget": [
                    909
                ],
                "_from_sequence": [
                    912
                ],
                "dtype.construct_array_type": [
                    912
                ],
                "self.is_consolidated": [
                    924,
                    933
                ],
                "bm._is_consolidated": [
                    928
                ],
                "_consolidate": [
                    1493,
                    934
                ],
                "self.items.is_unique": [
                    943
                ],
                "self.items.get_loc": [
                    946,
                    1060,
                    1596,
                    991
                ],
                "is_scalar": [
                    1929,
                    951
                ],
                "indexer.item": [
                    953
                ],
                "self.iget": [
                    957
                ],
                "self.reindex_indexer": [
                    1209,
                    964,
                    1382
                ],
                "block.iget": [
                    975
                ],
                "block.make_block_same_class": [
                    980
                ],
                "is_deleted": [
                    993,
                    994,
                    995,
                    1094,
                    1095,
                    1002,
                    1099,
                    1007,
                    1019
                ],
                "np.bool_": [
                    1760,
                    993,
                    1094,
                    1983
                ],
                "ref_loc_offset": [
                    1016,
                    995
                ],
                "is_deleted.cumsum": [
                    995
                ],
                "is_blk_deleted": [
                    1021,
                    1010,
                    997
                ],
                "affected_start": [
                    1000,
                    1002,
                    1004
                ],
                "is_deleted.nonzero": [
                    1002
                ],
                "_": [
                    1287,
                    1770,
                    1004,
                    1778,
                    1786,
                    1755
                ],
                "_fast_count_smallints": [
                    1172,
                    1004
                ],
                "bml": [
                    1006,
                    1007,
                    1009,
                    1014,
                    1016
                ],
                "blk_del": [
                    1009,
                    1012,
                    1013,
                    1007
                ],
                "nonzero": [
                    1007
                ],
                "bml.indexer": [
                    1016,
                    1007
                ],
                "blk.delete": [
                    1089,
                    1013
                ],
                "bml.add": [
                    1016
                ],
                "self._shape": [
                    1191,
                    1023
                ],
                "value_is_extension_type": [
                    1112,
                    1034,
                    1037
                ],
                "value.ndim": [
                    1043
                ],
                "_safe_reshape": [
                    1044
                ],
                "value.shape": [
                    1044,
                    1054
                ],
                "placement.indexer": [
                    1052
                ],
                "placement": [
                    1827,
                    1859,
                    1829,
                    2020,
                    2023,
                    1355,
                    2028,
                    1360,
                    1808,
                    1814,
                    1850,
                    2011,
                    1052
                ],
                "self.insert": [
                    1063
                ],
                "blknos": [
                    1316,
                    1069,
                    1075,
                    1300,
                    1303
                ],
                "blklocs": [
                    1070,
                    1301,
                    1077,
                    1306,
                    1340
                ],
                "unfit_mgr_locs": [
                    1121,
                    1124,
                    1125,
                    1135,
                    1072,
                    1139,
                    1108,
                    1109,
                    1140,
                    1081
                ],
                "unfit_val_locs": [
                    1073,
                    1082,
                    1107,
                    1129
                ],
                "removed_blknos": [
                    1092,
                    1095,
                    1099,
                    1104,
                    1074,
                    1086
                ],
                "val_locs": [
                    1075,
                    1077,
                    1079,
                    1082,
                    1085
                ],
                "libinternals.get_blkno_placements": [
                    1075,
                    1316
                ],
                "libinternals": [
                    1980,
                    1075,
                    1316
                ],
                "blk_locs": [
                    1089,
                    1081,
                    1077,
                    1079
                ],
                "val_locs.indexer": [
                    1077
                ],
                "blk.should_store": [
                    1078
                ],
                "blk.set": [
                    1079
                ],
                "value_getitem": [
                    1133,
                    1079
                ],
                "unfit_mgr_locs.append": [
                    1081
                ],
                "blk.mgr_locs.as_array": [
                    1081,
                    1177
                ],
                "unfit_val_locs.append": [
                    1082
                ],
                "removed_blknos.append": [
                    1086
                ],
                "blk.mgr_locs.indexer": [
                    1088,
                    1433,
                    1090
                ],
                "self.nblocks": [
                    1097,
                    1099,
                    1094
                ],
                "unfit_count": [
                    1140,
                    1124,
                    1109
                ],
                "new_blocks.extend": [
                    1115,
                    1439
                ],
                "value.copy": [
                    1117
                ],
                "mgr_loc": [
                    1121,
                    1332,
                    1334,
                    1119
                ],
                "unfit_val_items": [
                    1129,
                    1133
                ],
                "allow_duplicates": [
                    1160
                ],
                "new_axis": [
                    1189,
                    1640,
                    1228,
                    1260,
                    1168,
                    1233
                ],
                "self.items.insert": [
                    1168
                ],
                "count": [
                    1172,
                    1174
                ],
                "blk.mgr_locs.add": [
                    1175
                ],
                "new_mgr_locs": [
                    1177,
                    1178,
                    1179
                ],
                "blk.mgr_locs.as_array.copy": [
                    1177
                ],
                "self._blklocs.shape": [
                    1181
                ],
                "np.append": [
                    1184,
                    1183
                ],
                "np.insert": [
                    1186,
                    1187
                ],
                "new_index": [
                    1444,
                    1427,
                    1204,
                    1205,
                    1206,
                    1210
                ],
                "reindex": [
                    1205
                ],
                "method": [
                    1206
                ],
                "limit": [
                    1206
                ],
                "fill_value": [
                    1253,
                    1287,
                    1288,
                    1319,
                    1322,
                    1352,
                    1353,
                    1357,
                    1359,
                    1210,
                    1436,
                    1246
                ],
                "result.axes": [
                    1232,
                    1233
                ],
                "allow_dups": [
                    1239
                ],
                "_can_reindex": [
                    1240
                ],
                "blk.take_nd": [
                    1249,
                    1291,
                    1339
                ],
                "blk.fill_value": [
                    1253
                ],
                "allow_fill": [
                    1988,
                    1285,
                    1286,
                    1304,
                    1274,
                    1307,
                    1277
                ],
                "fill_tuple": [
                    1286,
                    1319,
                    1288,
                    1295,
                    1274
                ],
                "sl_type": [
                    1299,
                    1283,
                    1276
                ],
                "sllen": [
                    1276,
                    1284,
                    1294
                ],
                "_preprocess_slice_or_indexer": [
                    1276
                ],
                "slice_or_indexer": [
                    1985,
                    1987,
                    1976,
                    1979,
                    1980,
                    1277,
                    1983
                ],
                "maybe_promote": [
                    1287
                ],
                "self._make_na_block": [
                    1322
                ],
                "blk._can_consolidate": [
                    1328
                ],
                "newblk": [
                    1333,
                    1334,
                    1335
                ],
                "newblk.mgr_locs": [
                    1334
                ],
                "mgr_locs.indexer": [
                    1340
                ],
                "np.nan": [
                    1353,
                    1796
                ],
                "block_shape": [
                    1697,
                    1354,
                    1355,
                    1358,
                    1685
                ],
                "infer_dtype_from_scalar": [
                    1357
                ],
                "block_values.fill": [
                    1796,
                    1359
                ],
                "indexer.start": [
                    1368
                ],
                "indexer.stop": [
                    1368
                ],
                "indexer.step": [
                    1368
                ],
                "np.asanyarray": [
                    1370,
                    1987
                ],
                "maybe_convert_indices": [
                    1989,
                    1375
                ],
                "verify": [
                    1377
                ],
                "take": [
                    1381
                ],
                "self_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other_axes": [
                    1387,
                    1388,
                    1390
                ],
                "other.axes": [
                    1387
                ],
                "other": [
                    1393,
                    1394,
                    1387,
                    1405
                ],
                "ax1.equals": [
                    1390
                ],
                "ax1": [
                    1390
                ],
                "ax2": [
                    1390
                ],
                "other._consolidate_inplace": [
                    1393
                ],
                "other.blocks": [
                    1394,
                    1405
                ],
                "block.mgr_locs.as_array.tolist": [
                    1402
                ],
                "block.mgr_locs.as_array": [
                    1402
                ],
                "block.mgr_locs": [
                    1402
                ],
                "block.dtype.name": [
                    1402
                ],
                "block.dtype": [
                    1402
                ],
                "self_blocks": [
                    1404,
                    1407
                ],
                "canonicalize": [
                    1404,
                    1405
                ],
                "other_blocks": [
                    1405,
                    1407
                ],
                "block.equals": [
                    1407
                ],
                "oblock": [
                    1407
                ],
                "n_rows": [
                    1424,
                    1435
                ],
                "dummy": [
                    1425,
                    1426,
                    1427
                ],
                "unstacker_func": [
                    1425,
                    1433
                ],
                "new_columns": [
                    1442,
                    1426,
                    1444,
                    1434
                ],
                "dummy.get_new_columns": [
                    1426
                ],
                "dummy.get_new_index": [
                    1427
                ],
                "columns_mask": [
                    1440,
                    1442,
                    1429
                ],
                "mask": [
                    1432,
                    1440
                ],
                "blk._unstack": [
                    1432
                ],
                "partial": [
                    1433
                ],
                "columns_mask.extend": [
                    1440
                ],
                "BlockManager": [
                    1444,
                    1448,
                    1676,
                    2032,
                    1662
                ],
                "_is_consolidated": [
                    1452
                ],
                "_known_consolidated": [
                    1453
                ],
                "Union": [
                    1864,
                    1459
                ],
                "List": [
                    1459,
                    1863
                ],
                "fastpath": [
                    1471
                ],
                "b.astype": [
                    1492
                ],
                "self._block.values": [
                    1515,
                    1605
                ],
                "self._block": [
                    1568,
                    1571,
                    1597,
                    1605,
                    1575,
                    1545,
                    1515,
                    1579,
                    1549,
                    1553,
                    1562,
                    1532,
                    1565
                ],
                "self._block._slice": [
                    1532
                ],
                "self.index": [
                    1532
                ],
                "self._block.dtype": [
                    1545,
                    1562
                ],
                "self._block.array_dtype": [
                    1549
                ],
                "self._block.ftype": [
                    1553,
                    1565
                ],
                "self.dtype.name": [
                    1556
                ],
                "self.dtype": [
                    1556
                ],
                "self.ftype": [
                    1559
                ],
                "self._block.external_values": [
                    1568
                ],
                "self._block.internal_values": [
                    1571
                ],
                "self._block.to_dense": [
                    1575
                ],
                "self._block._can_hold_na": [
                    1579
                ],
                "self._block.delete": [
                    1597
                ],
                "delete": [
                    1598
                ],
                "non_empties": [
                    1624,
                    1627,
                    1628
                ],
                "to_concat": [
                    1624,
                    1636
                ],
                "obj.blocks": [
                    1628
                ],
                "new_block": [
                    1640,
                    1634,
                    1638,
                    1630
                ],
                "concat_same_type": [
                    1630
                ],
                "x.values": [
                    1632
                ],
                "x._block.values": [
                    1636
                ],
                "x._block": [
                    1636
                ],
                "mgr._consolidate_inplace": [
                    1677,
                    1663
                ],
                "shape": [
                    1792,
                    1795,
                    1669,
                    1680,
                    1853,
                    1855
                ],
                "e": [
                    1680,
                    1669,
                    1696,
                    1695
                ],
                "form_blocks": [
                    1675
                ],
                "arrays": [
                    1856,
                    1675,
                    1680,
                    1850,
                    1852,
                    1853,
                    1726
                ],
                "names": [
                    1713,
                    1850,
                    1675,
                    1725
                ],
                "passed": [
                    1700,
                    1685,
                    1687,
                    1688,
                    1695
                ],
                "implied": [
                    1700,
                    1690,
                    1692,
                    1693,
                    1695
                ],
                "items_dict": [
                    1710,
                    1729,
                    1732,
                    1733,
                    1736,
                    1737,
                    1740,
                    1741,
                    1744,
                    1745,
                    1748,
                    1749,
                    1752,
                    1755,
                    1759,
                    1760,
                    1763,
                    1764,
                    1767,
                    1770,
                    1774,
                    1778,
                    1783,
                    1786
                ],
                "defaultdict": [
                    1710
                ],
                "extra_locs": [
                    1792,
                    1798,
                    1711,
                    1722,
                    1791
                ],
                "names_idx": [
                    1713,
                    1714,
                    1715,
                    1717,
                    1718
                ],
                "names_idx.equals": [
                    1714
                ],
                "names_indexer": [
                    1720,
                    1715,
                    1718
                ],
                "is_unique": [
                    1717
                ],
                "names_idx.intersection": [
                    1717
                ],
                "names_idx.get_indexer_for": [
                    1718
                ],
                "name_idx": [
                    1720,
                    1721,
                    1725,
                    1726
                ],
                "extra_locs.append": [
                    1722
                ],
                "block_type": [
                    1728,
                    1729
                ],
                "get_block_type": [
                    1728
                ],
                "block_type.__name__": [
                    1729
                ],
                "float_blocks": [
                    1733,
                    1734
                ],
                "_multi_blockify": [
                    1741,
                    1737,
                    1745,
                    1733
                ],
                "blocks.extend": [
                    1761,
                    1765,
                    1734,
                    1789,
                    1738,
                    1772,
                    1742,
                    1746,
                    1781,
                    1750,
                    1757
                ],
                "complex_blocks": [
                    1737,
                    1738
                ],
                "timedelta_blocks": [
                    1741,
                    1742
                ],
                "int_blocks": [
                    1745,
                    1746
                ],
                "datetime_blocks": [
                    1749,
                    1750
                ],
                "_simple_blockify": [
                    1760,
                    1764,
                    1749
                ],
                "_NS_DTYPE": [
                    1749
                ],
                "dttz_blocks": [
                    1753,
                    1757
                ],
                "array": [
                    1786,
                    1769,
                    1770,
                    1777,
                    1778,
                    1785,
                    1754,
                    1755
                ],
                "DatetimeTZBlock": [
                    1754
                ],
                "bool_blocks": [
                    1760,
                    1761
                ],
                "object_blocks": [
                    1764,
                    1765
                ],
                "np.object_": [
                    1764
                ],
                "cat_blocks": [
                    1768,
                    1772
                ],
                "CategoricalBlock": [
                    1769
                ],
                "external_blocks": [
                    1776,
                    1789,
                    1784,
                    1781
                ],
                "ExtensionBlock": [
                    1777
                ],
                "ObjectValuesExtensionBlock": [
                    1785
                ],
                "na_block": [
                    1798,
                    1799
                ],
                "_stack_arrays": [
                    1808,
                    1827
                ],
                "tuples": [
                    1808,
                    1850,
                    1822
                ],
                "values.dtype": [
                    1811
                ],
                "values.astype": [
                    1812
                ],
                "grouper": [
                    1825,
                    1892,
                    1822,
                    1889
                ],
                "itertools.groupby": [
                    1889,
                    1822
                ],
                "itertools": [
                    1889,
                    1822
                ],
                "tup_block": [
                    1825,
                    1827
                ],
                "ABCSeries": [
                    1845,
                    1839
                ],
                "x._values": [
                    1840
                ],
                "x.shape": [
                    1848
                ],
                "first": [
                    1852,
                    1853
                ],
                "_shape_compat": [
                    1853
                ],
                "stacked": [
                    1857,
                    1859,
                    1855
                ],
                "_asarray_compat": [
                    1857
                ],
                "find_common_type": [
                    1879
                ],
                "Optional": [
                    1864
                ],
                "np.dtype": [
                    1864
                ],
                "ExtensionDtype": [
                    1864
                ],
                "gkey": [
                    1888,
                    1889
                ],
                "x._consolidate_key": [
                    1888
                ],
                "_can_consolidate": [
                    1892,
                    1894
                ],
                "group_blocks": [
                    1892,
                    1894
                ],
                "merged_blocks": [
                    1896,
                    1893
                ],
                "_merge_blocks": [
                    1893
                ],
                "op": [
                    1920,
                    1918,
                    1927
                ],
                "operator.eq": [
                    1918
                ],
                "operator": [
                    1918
                ],
                "np.vectorize": [
                    1920
                ],
                "re.search": [
                    1921
                ],
                "re": [
                    1921
                ],
                "is_a_array": [
                    1929,
                    1924,
                    1932
                ],
                "np.ndarray": [
                    1924,
                    1925,
                    1983
                ],
                "is_b_array": [
                    1929,
                    1925,
                    1935
                ],
                "type_names": [
                    1936,
                    1930,
                    1940,
                    1933
                ],
                "a.dtype": [
                    1933
                ],
                "index": [
                    1954,
                    1958,
                    1961,
                    1962,
                    1964,
                    1965
                ],
                "MultiIndex": [
                    1962,
                    1954
                ],
                "y": [
                    1961,
                    1957
                ],
                "MultiIndex.from_tuples": [
                    1962
                ],
                "index.names": [
                    1962
                ],
                "index.name": [
                    1965
                ],
                "np.bincount": [
                    1970
                ],
                "arr.astype": [
                    1970
                ],
                "np.int_": [
                    1970
                ],
                "nz": [
                    1971,
                    1972
                ],
                "counts.nonzero": [
                    1971
                ],
                "np.c_": [
                    1972
                ],
                "libinternals.slice_len": [
                    1980
                ],
                "length": [
                    1980,
                    1989
                ],
                "slice_or_indexer.dtype": [
                    1983
                ],
                "slice_or_indexer.sum": [
                    1985
                ],
                "concat_plans": [
                    2008,
                    2005
                ],
                "get_mgr_concatenation_plan": [
                    2006
                ],
                "indexers": [
                    2013,
                    2006
                ],
                "mgrs_indexers": [
                    2006
                ],
                "concat_plan": [
                    2008,
                    2011
                ],
                "combine_concat_plans": [
                    2008
                ],
                "concat_axis": [
                    2008,
                    2027
                ],
                "join_units": [
                    2021,
                    2022,
                    2023,
                    2027,
                    2011,
                    2013,
                    2014
                ],
                "values.copy": [
                    2017
                ],
                "values.view": [
                    2019
                ],
                "b.make_block_same_class": [
                    2020
                ],
                "is_uniform_join_units": [
                    2021
                ],
                "block.concat_same_type": [
                    2022
                ],
                "ju.block": [
                    2023
                ],
                "ju": [
                    2023
                ],
                "concatenate_join_units": [
                    2027
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/tests/frame/test_replace.py",
                "test_function": "test_replace_replacer_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] are different  Attribute \"dtype\" are different [left]:  object [right]: datetime64[ns]",
                "full_test_error": "self = <pandas.tests.frame.test_replace.TestDataFrameReplace object at 0x11b2f5e80>\nreplacer = Timestamp('2017-08-27 00:00:00')\n\n    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: datetime64[ns]\n\npandas/tests/frame/test_replace.py:1358: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('replacer', [pd.Timestamp('20170827'), np.int8(1), np.int16(1), np.float32(1), np.float64(1)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/tests/frame/test_replace.py",
                "test_function": "test_replace_replacer_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] are different  Attribute \"dtype\" are different [left]:  object [right]: int64",
                "full_test_error": "self = <pandas.tests.frame.test_replace.TestDataFrameReplace object at 0x11b32a1c0>\nreplacer = 1\n\n    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: int64\n\npandas/tests/frame/test_replace.py:1358: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('replacer', [pd.Timestamp('20170827'), np.int8(1), np.int16(1), np.float32(1), np.float64(1)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/tests/frame/test_replace.py",
                "test_function": "test_replace_replacer_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] are different  Attribute \"dtype\" are different [left]:  object [right]: int64",
                "full_test_error": "self = <pandas.tests.frame.test_replace.TestDataFrameReplace object at 0x11b597610>\nreplacer = 1\n\n    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: int64\n\npandas/tests/frame/test_replace.py:1358: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('replacer', [pd.Timestamp('20170827'), np.int8(1), np.int16(1), np.float32(1), np.float64(1)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/tests/frame/test_replace.py",
                "test_function": "test_replace_replacer_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] are different  Attribute \"dtype\" are different [left]:  object [right]: float64",
                "full_test_error": "self = <pandas.tests.frame.test_replace.TestDataFrameReplace object at 0x11b3609d0>\nreplacer = 1.0\n\n    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: float64\n\npandas/tests/frame/test_replace.py:1358: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('replacer', [pd.Timestamp('20170827'), np.int8(1), np.int16(1), np.float32(1), np.float64(1)])"
                ]
            },
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_121/pandas/tests/frame/test_replace.py",
                "test_function": "test_replace_replacer_dtype",
                "test_function_code": "    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n        tm.assert_frame_equal(result, expected)",
                "test_error": "AssertionError: Attributes of DataFrame.iloc[:, 0] are different  Attribute \"dtype\" are different [left]:  object [right]: float64",
                "full_test_error": "self = <pandas.tests.frame.test_replace.TestDataFrameReplace object at 0x11b48e5b0>\nreplacer = 1.0\n\n    @pytest.mark.parametrize(\n        \"replacer\",\n        [\n            pd.Timestamp(\"20170827\"),\n            np.int8(1),\n            np.int16(1),\n            np.float32(1),\n            np.float64(1),\n        ],\n    )\n    def test_replace_replacer_dtype(self, replacer):\n        # GH26632\n        df = pd.DataFrame([\"a\"])\n        result = df.replace({\"a\": replacer, \"b\": replacer})\n        expected = pd.DataFrame([replacer])\n>       tm.assert_frame_equal(result, expected)\nE       AssertionError: Attributes of DataFrame.iloc[:, 0] are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  object\nE       [right]: float64\n\npandas/tests/frame/test_replace.py:1358: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": [
                    "pytest.mark.parametrize('replacer', [pd.Timestamp('20170827'), np.int8(1), np.int16(1), np.float32(1), np.float64(1)])"
                ]
            }
        ]
    }
}