{
    "pandas:92": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_92/pandas/core/generic.py": {
            "buggy_functions": [
                {
                    "function_name": "asof",
                    "function_code": "def asof(self, where, subset=None):\n    \"\"\"\n    Return the last row(s) without any NaNs before `where`.\n\n    The last row (for each element in `where`, if list) without any\n    NaN is taken.\n    In case of a :class:`~pandas.DataFrame`, the last row without NaN\n    considering only the subset of columns (if not `None`)\n\n    If there is no good value, NaN is returned for a Series or\n    a Series of NaN values for a DataFrame\n\n    Parameters\n    ----------\n    where : date or array-like of dates\n        Date(s) before which the last row(s) are returned.\n    subset : str or array-like of str, default `None`\n        For DataFrame, if not `None`, only use these columns to\n        check for NaNs.\n\n    Returns\n    -------\n    scalar, Series, or DataFrame\n\n        The return can be:\n\n        * scalar : when `self` is a Series and `where` is a scalar\n        * Series: when `self` is a Series and `where` is an array-like,\n          or when `self` is a DataFrame and `where` is a scalar\n        * DataFrame : when `self` is a DataFrame and `where` is an\n          array-like\n\n        Return scalar, Series, or DataFrame.\n\n    See Also\n    --------\n    merge_asof : Perform an asof merge. Similar to left join.\n\n    Notes\n    -----\n    Dates are assumed to be sorted. Raises if this is not the case.\n\n    Examples\n    --------\n    A Series and a scalar `where`.\n\n    >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n    >>> s\n    10    1.0\n    20    2.0\n    30    NaN\n    40    4.0\n    dtype: float64\n\n    >>> s.asof(20)\n    2.0\n\n    For a sequence `where`, a Series is returned. The first value is\n    NaN, because the first element of `where` is before the first\n    index value.\n\n    >>> s.asof([5, 20])\n    5     NaN\n    20    2.0\n    dtype: float64\n\n    Missing values are not considered. The following is ``2.0``, not\n    NaN, even though NaN is at the index location for ``30``.\n\n    >>> s.asof(30)\n    2.0\n\n    Take all columns into consideration\n\n    >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n    ...                    'b': [None, None, None, None, 500]},\n    ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n    ...                                           '2018-02-27 09:02:00',\n    ...                                           '2018-02-27 09:03:00',\n    ...                                           '2018-02-27 09:04:00',\n    ...                                           '2018-02-27 09:05:00']))\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']))\n                          a   b\n    2018-02-27 09:03:30 NaN NaN\n    2018-02-27 09:04:30 NaN NaN\n\n    Take a single column into consideration\n\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']),\n    ...         subset=['a'])\n                             a   b\n    2018-02-27 09:03:30   30.0 NaN\n    2018-02-27 09:04:30   40.0 NaN\n    \"\"\"\n    if isinstance(where, str):\n        where = Timestamp(where)\n\n    if not self.index.is_monotonic:\n        raise ValueError(\"asof requires a sorted index\")\n\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if subset is not None:\n            raise ValueError(\"subset is not valid for Series\")\n    else:\n        if subset is None:\n            subset = self.columns\n        if not is_list_like(subset):\n            subset = [subset]\n\n    is_list = is_list_like(where)\n    if not is_list:\n        start = self.index[0]\n        if isinstance(self.index, PeriodIndex):\n            where = Period(where, freq=self.index.freq).ordinal\n            start = start.ordinal\n\n        if where < start:\n            if not is_series:\n                from pandas import Series\n\n                return Series(index=self.columns, name=where, dtype=np.float64)\n            return np.nan\n\n        # It's always much faster to use a *while* loop here for\n        # Series than pre-computing all the NAs. However a\n        # *while* loop is extremely expensive for DataFrame\n        # so we later pre-compute all the NAs and use the same\n        # code path whether *where* is a scalar or list.\n        # See PR: https://github.com/pandas-dev/pandas/pull/14476\n        if is_series:\n            loc = self.index.searchsorted(where, side=\"right\")\n            if loc > 0:\n                loc -= 1\n\n            values = self._values\n            while loc > 0 and isna(values[loc]):\n                loc -= 1\n            return values[loc]\n\n    if not isinstance(where, Index):\n        where = Index(where) if is_list else Index([where])\n\n    nulls = self.isna() if is_series else self[subset].isna().any(1)\n    if nulls.all():\n        if is_series:\n            return self._constructor(np.nan, index=where, name=self.name)\n        elif is_list:\n            from pandas import DataFrame\n\n            return DataFrame(np.nan, index=where, columns=self.columns)\n        else:\n            from pandas import Series\n\n            return Series(np.nan, index=self.columns, name=where[0])\n\n    locs = self.index.asof_locs(where, ~(nulls.values))\n\n    # mask the missing\n    missing = locs == -1\n    d = self.take(locs)\n    data = d.copy()\n    data.index = where\n    data.loc[missing] = np.nan\n    return data if is_list else data.iloc[-1]\n",
                    "decorators": [],
                    "docstring": "Return the last row(s) without any NaNs before `where`.\n\nThe last row (for each element in `where`, if list) without any\nNaN is taken.\nIn case of a :class:`~pandas.DataFrame`, the last row without NaN\nconsidering only the subset of columns (if not `None`)\n\nIf there is no good value, NaN is returned for a Series or\na Series of NaN values for a DataFrame\n\nParameters\n----------\nwhere : date or array-like of dates\n    Date(s) before which the last row(s) are returned.\nsubset : str or array-like of str, default `None`\n    For DataFrame, if not `None`, only use these columns to\n    check for NaNs.\n\nReturns\n-------\nscalar, Series, or DataFrame\n\n    The return can be:\n\n    * scalar : when `self` is a Series and `where` is a scalar\n    * Series: when `self` is a Series and `where` is an array-like,\n      or when `self` is a DataFrame and `where` is a scalar\n    * DataFrame : when `self` is a DataFrame and `where` is an\n      array-like\n\n    Return scalar, Series, or DataFrame.\n\nSee Also\n--------\nmerge_asof : Perform an asof merge. Similar to left join.\n\nNotes\n-----\nDates are assumed to be sorted. Raises if this is not the case.\n\nExamples\n--------\nA Series and a scalar `where`.\n\n>>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n>>> s\n10    1.0\n20    2.0\n30    NaN\n40    4.0\ndtype: float64\n\n>>> s.asof(20)\n2.0\n\nFor a sequence `where`, a Series is returned. The first value is\nNaN, because the first element of `where` is before the first\nindex value.\n\n>>> s.asof([5, 20])\n5     NaN\n20    2.0\ndtype: float64\n\nMissing values are not considered. The following is ``2.0``, not\nNaN, even though NaN is at the index location for ``30``.\n\n>>> s.asof(30)\n2.0\n\nTake all columns into consideration\n\n>>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n...                    'b': [None, None, None, None, 500]},\n...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n...                                           '2018-02-27 09:02:00',\n...                                           '2018-02-27 09:03:00',\n...                                           '2018-02-27 09:04:00',\n...                                           '2018-02-27 09:05:00']))\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']))\n                      a   b\n2018-02-27 09:03:30 NaN NaN\n2018-02-27 09:04:30 NaN NaN\n\nTake a single column into consideration\n\n>>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n...                           '2018-02-27 09:04:30']),\n...         subset=['a'])\n                         a   b\n2018-02-27 09:03:30   30.0 NaN\n2018-02-27 09:04:30   40.0 NaN",
                    "start_line": 6859,
                    "variables": {
                        "isinstance": [
                            7001,
                            6961,
                            6955,
                            6974
                        ],
                        "where": [
                            6978,
                            7011,
                            6982,
                            7015,
                            7017,
                            6955,
                            6956,
                            7023,
                            6992,
                            7007,
                            7001,
                            7002,
                            6971,
                            6975
                        ],
                        "str": [
                            6955
                        ],
                        "Timestamp": [
                            6956
                        ],
                        "self.index.is_monotonic": [
                            6958
                        ],
                        "self.index": [
                            7017,
                            6958,
                            6992,
                            6973,
                            6974,
                            6975
                        ],
                        "self": [
                            7011,
                            6982,
                            7015,
                            7017,
                            7021,
                            6958,
                            6992,
                            6961,
                            6996,
                            7007,
                            6967,
                            7004,
                            6973,
                            6974,
                            6975
                        ],
                        "ValueError": [
                            6964,
                            6959
                        ],
                        "is_series": [
                            6979,
                            6991,
                            6961,
                            6962,
                            7004,
                            7006
                        ],
                        "ABCSeries": [
                            6961
                        ],
                        "subset": [
                            6963,
                            6966,
                            6967,
                            6968,
                            6969,
                            7004
                        ],
                        "self.columns": [
                            7015,
                            7011,
                            6982,
                            6967
                        ],
                        "is_list_like": [
                            6968,
                            6971
                        ],
                        "is_list": [
                            7008,
                            7025,
                            7002,
                            6971,
                            6972
                        ],
                        "start": [
                            6976,
                            6978,
                            6973
                        ],
                        "PeriodIndex": [
                            6974
                        ],
                        "ordinal": [
                            6975
                        ],
                        "Period": [
                            6975
                        ],
                        "self.index.freq": [
                            6975
                        ],
                        "start.ordinal": [
                            6976
                        ],
                        "Series": [
                            6982,
                            7015
                        ],
                        "np.float64": [
                            6982
                        ],
                        "np": [
                            7011,
                            6982,
                            7015,
                            6983,
                            7024,
                            7007
                        ],
                        "np.nan": [
                            7011,
                            7015,
                            6983,
                            7024,
                            7007
                        ],
                        "loc": [
                            6992,
                            6993,
                            6994,
                            6997,
                            6998,
                            6999
                        ],
                        "self.index.searchsorted": [
                            6992
                        ],
                        "values": [
                            6996,
                            6997,
                            6999
                        ],
                        "self._values": [
                            6996
                        ],
                        "isna": [
                            7004,
                            6997
                        ],
                        "Index": [
                            7001,
                            7002
                        ],
                        "nulls": [
                            7017,
                            7004,
                            7005
                        ],
                        "self.isna": [
                            7004
                        ],
                        "any": [
                            7004
                        ],
                        "nulls.all": [
                            7005
                        ],
                        "self._constructor": [
                            7007
                        ],
                        "self.name": [
                            7007
                        ],
                        "DataFrame": [
                            7011
                        ],
                        "locs": [
                            7017,
                            7020,
                            7021
                        ],
                        "self.index.asof_locs": [
                            7017
                        ],
                        "nulls.values": [
                            7017
                        ],
                        "missing": [
                            7024,
                            7020
                        ],
                        "d": [
                            7021,
                            7022
                        ],
                        "self.take": [
                            7021
                        ],
                        "data": [
                            7024,
                            7025,
                            7022,
                            7023
                        ],
                        "d.copy": [
                            7022
                        ],
                        "data.index": [
                            7023
                        ],
                        "data.loc": [
                            7024
                        ],
                        "data.iloc": [
                            7025
                        ]
                    },
                    "filtered_variables": {
                        "where": [
                            6978,
                            7011,
                            6982,
                            7015,
                            7017,
                            6955,
                            6956,
                            7023,
                            6992,
                            7007,
                            7001,
                            7002,
                            6971,
                            6975
                        ],
                        "Timestamp": [
                            6956
                        ],
                        "self.index.is_monotonic": [
                            6958
                        ],
                        "self.index": [
                            7017,
                            6958,
                            6992,
                            6973,
                            6974,
                            6975
                        ],
                        "self": [
                            7011,
                            6982,
                            7015,
                            7017,
                            7021,
                            6958,
                            6992,
                            6961,
                            6996,
                            7007,
                            6967,
                            7004,
                            6973,
                            6974,
                            6975
                        ],
                        "is_series": [
                            6979,
                            6991,
                            6961,
                            6962,
                            7004,
                            7006
                        ],
                        "ABCSeries": [
                            6961
                        ],
                        "subset": [
                            6963,
                            6966,
                            6967,
                            6968,
                            6969,
                            7004
                        ],
                        "self.columns": [
                            7015,
                            7011,
                            6982,
                            6967
                        ],
                        "is_list_like": [
                            6968,
                            6971
                        ],
                        "is_list": [
                            7008,
                            7025,
                            7002,
                            6971,
                            6972
                        ],
                        "start": [
                            6976,
                            6978,
                            6973
                        ],
                        "PeriodIndex": [
                            6974
                        ],
                        "ordinal": [
                            6975
                        ],
                        "Period": [
                            6975
                        ],
                        "self.index.freq": [
                            6975
                        ],
                        "start.ordinal": [
                            6976
                        ],
                        "Series": [
                            6982,
                            7015
                        ],
                        "np.float64": [
                            6982
                        ],
                        "np": [
                            7011,
                            6982,
                            7015,
                            6983,
                            7024,
                            7007
                        ],
                        "np.nan": [
                            7011,
                            7015,
                            6983,
                            7024,
                            7007
                        ],
                        "loc": [
                            6992,
                            6993,
                            6994,
                            6997,
                            6998,
                            6999
                        ],
                        "self.index.searchsorted": [
                            6992
                        ],
                        "values": [
                            6996,
                            6997,
                            6999
                        ],
                        "self._values": [
                            6996
                        ],
                        "isna": [
                            7004,
                            6997
                        ],
                        "Index": [
                            7001,
                            7002
                        ],
                        "nulls": [
                            7017,
                            7004,
                            7005
                        ],
                        "self.isna": [
                            7004
                        ],
                        "nulls.all": [
                            7005
                        ],
                        "self._constructor": [
                            7007
                        ],
                        "self.name": [
                            7007
                        ],
                        "DataFrame": [
                            7011
                        ],
                        "locs": [
                            7017,
                            7020,
                            7021
                        ],
                        "self.index.asof_locs": [
                            7017
                        ],
                        "nulls.values": [
                            7017
                        ],
                        "missing": [
                            7024,
                            7020
                        ],
                        "d": [
                            7021,
                            7022
                        ],
                        "self.take": [
                            7021
                        ],
                        "data": [
                            7024,
                            7025,
                            7022,
                            7023
                        ],
                        "d.copy": [
                            7022
                        ],
                        "data.index": [
                            7023
                        ],
                        "data.loc": [
                            7024
                        ],
                        "data.iloc": [
                            7025
                        ]
                    },
                    "diff_line_number": 6975,
                    "class_data": {
                        "signature": "class NDFrame(PandasObject, SelectionMixin, indexing.IndexingMixin)",
                        "docstring": "N-dimensional analogue of DataFrame. Store multi-dimensional in a\nsize-mutable, labeled data structure\n\nParameters\n----------\ndata : BlockManager\naxes : list\ncopy : bool, default False",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False):\n    if not fastpath:\n        if dtype is not None:\n            data = data.astype(dtype)\n        elif copy:\n            data = data.copy()\n        if axes is not None:\n            for i, ax in enumerate(axes):\n                data = data.reindex_axis(ax, axis=i)\n    object.__setattr__(self, '_is_copy', None)\n    object.__setattr__(self, '_data', data)\n    object.__setattr__(self, '_item_cache', {})\n    if attrs is None:\n        attrs = {}\n    else:\n        attrs = dict(attrs)\n    object.__setattr__(self, '_attrs', attrs)",
                            "def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n    \"\"\" passed a manager and a axes dict \"\"\"\n    for a, axe in axes.items():\n        if axe is not None:\n            mgr = mgr.reindex_axis(axe, axis=self._get_block_manager_axis(a), copy=False)\n    if copy:\n        mgr = mgr.copy()\n    if dtype is not None:\n        if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n            mgr = mgr.astype(dtype=dtype)\n    return mgr",
                            "@property\ndef attrs(self) -> Dict[Optional[Hashable], Any]:\n    \"\"\"\n    Dictionary of global attributes on this object.\n    \"\"\"\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
                            "@attrs.setter\ndef attrs(self, value: Mapping[Optional[Hashable], Any]) -> None:\n    self._attrs = dict(value)",
                            "def _validate_dtype(self, dtype):\n    \"\"\" validate the passed dtype \"\"\"\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n        if dtype.kind == 'V':\n            raise NotImplementedError(f'compound dtypes are not implemented in the {type(self).__name__} constructor')\n    return dtype",
                            "@property\ndef _constructor(self: FrameOrSeries) -> Type[FrameOrSeries]:\n    \"\"\"Used when a manipulation result has the same dimensions as the\n    original.\n    \"\"\"\n    raise AbstractMethodError(self)",
                            "@property\ndef _constructor_sliced(self):\n    \"\"\"Used when a manipulation result has one lower dimension(s) as the\n    original, such as DataFrame single columns slicing.\n    \"\"\"\n    raise AbstractMethodError(self)",
                            "@property\ndef _constructor_expanddim(self):\n    \"\"\"Used when a manipulation result has one higher dimension as the\n    original, such as Series.to_frame()\n    \"\"\"\n    raise NotImplementedError",
                            "@classmethod\ndef _setup_axes(cls, axes: List[str], docs: Dict[str, str]) -> None:\n    \"\"\"\n    Provide axes setup for the major PandasObjects.\n\n    Parameters\n    ----------\n    axes : the names of the axes in order (lowest to highest)\n    docs : docstrings for the axis properties\n    \"\"\"\n    info_axis = len(axes) - 1\n    axes_are_reversed = len(axes) > 1\n    cls._AXIS_ORDERS = axes\n    cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n    cls._AXIS_LEN = len(axes)\n    cls._AXIS_NAMES = dict(enumerate(axes))\n    cls._AXIS_REVERSED = axes_are_reversed\n    cls._info_axis_number = info_axis\n    cls._info_axis_name = axes[info_axis]\n\n    def set_axis(a, i):\n        setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n        cls._internal_names_set.add(a)\n    if axes_are_reversed:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, 1 - i)\n    else:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, i)",
                            "def _construct_axes_dict(self, axes=None, **kwargs):\n    \"\"\"Return an axes dictionary for myself.\"\"\"\n    d = {a: self._get_axis(a) for a in axes or self._AXIS_ORDERS}\n    d.update(kwargs)\n    return d",
                            "@staticmethod\ndef _construct_axes_dict_from(self, axes, **kwargs):\n    \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n    d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n    d.update(kwargs)\n    return d",
                            "def _construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None):\n    \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n    If require_all, raise if all axis arguments are not supplied\n    return a tuple of (axes, kwargs).\n\n    sentinel specifies the default parameter when an axis is not\n    supplied; useful to distinguish when a user explicitly passes None\n    in scenarios where None has special meaning.\n    \"\"\"\n    args = list(args)\n    for a in self._AXIS_ORDERS:\n        if a not in kwargs:\n            try:\n                kwargs[a] = args.pop(0)\n            except IndexError:\n                if require_all:\n                    raise TypeError('not enough/duplicate arguments specified!')\n    axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n    return (axes, kwargs)",
                            "@classmethod\ndef _from_axes(cls: Type[FrameOrSeries], data, axes, **kwargs) -> FrameOrSeries:\n    if isinstance(data, BlockManager):\n        return cls(data, **kwargs)\n    else:\n        if cls._AXIS_REVERSED:\n            axes = axes[::-1]\n        d = cls._construct_axes_dict_from(cls, axes, copy=False)\n        d.update(kwargs)\n        return cls(data, **d)",
                            "@classmethod\ndef _get_axis_number(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if is_integer(axis):\n        if axis in cls._AXIS_NAMES:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NUMBERS[axis]\n        except KeyError:\n            pass\n    raise ValueError(f'No axis named {axis} for object type {cls}')",
                            "@classmethod\ndef _get_axis_name(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if isinstance(axis, str):\n        if axis in cls._AXIS_NUMBERS:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NAMES[axis]\n        except KeyError:\n            pass\n    raise ValueError(f'No axis named {axis} for object type {cls}')",
                            "def _get_axis(self, axis):\n    name = self._get_axis_name(axis)\n    return getattr(self, name)",
                            "@classmethod\ndef _get_block_manager_axis(cls, axis):\n    \"\"\"Map the axis to the block_manager axis.\"\"\"\n    axis = cls._get_axis_number(axis)\n    if cls._AXIS_REVERSED:\n        m = cls._AXIS_LEN - 1\n        return m - axis\n    return axis",
                            "def _get_axis_resolvers(self, axis: str) -> Dict[str, ABCSeries]:\n    axis_index = getattr(self, axis)\n    d = dict()\n    prefix = axis[0]\n    for i, name in enumerate(axis_index.names):\n        if name is not None:\n            key = level = name\n        else:\n            key = f'{prefix}level_{i}'\n            level = i\n        level_values = axis_index.get_level_values(level)\n        s = level_values.to_series()\n        s.index = axis_index\n        d[key] = s\n    if isinstance(axis_index, MultiIndex):\n        dindex = axis_index\n    else:\n        dindex = axis_index.to_series()\n    d[axis] = dindex\n    return d",
                            "def _get_index_resolvers(self) -> Dict[str, ABCSeries]:\n    from pandas.core.computation.parsing import clean_column_name\n    d: Dict[str, ABCSeries] = {}\n    for axis_name in self._AXIS_ORDERS:\n        d.update(self._get_axis_resolvers(axis_name))\n    return {clean_column_name(k): v for k, v in d.items() if not isinstance(k, int)}",
                            "def _get_cleaned_column_resolvers(self) -> Dict[str, ABCSeries]:\n    \"\"\"\n    Return the special character free column resolvers of a dataframe.\n\n    Column names with special characters are 'cleaned up' so that they can\n    be referred to by backtick quoting.\n    Used in :meth:`DataFrame.eval`.\n    \"\"\"\n    from pandas.core.computation.parsing import clean_column_name\n    if isinstance(self, ABCSeries):\n        return {clean_column_name(self.name): self}\n    return {clean_column_name(k): v for k, v in self.items() if not isinstance(k, int)}",
                            "@property\ndef _info_axis(self):\n    return getattr(self, self._info_axis_name)",
                            "@property\ndef _stat_axis(self):\n    return getattr(self, self._stat_axis_name)",
                            "@property\ndef shape(self) -> Tuple[int, ...]:\n    \"\"\"\n    Return a tuple of axis dimensions\n    \"\"\"\n    return tuple((len(self._get_axis(a)) for a in self._AXIS_ORDERS))",
                            "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return index label(s) of the internal NDFrame\n    \"\"\"\n    return [self._get_axis(a) for a in self._AXIS_ORDERS]",
                            "@property\ndef ndim(self) -> int:\n    \"\"\"\n    Return an int representing the number of axes / array dimensions.\n\n    Return 1 if Series. Otherwise return 2 if DataFrame.\n\n    See Also\n    --------\n    ndarray.ndim : Number of array dimensions.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.ndim\n    1\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.ndim\n    2\n    \"\"\"\n    return self._data.ndim",
                            "@property\ndef size(self):\n    \"\"\"\n    Return an int representing the number of elements in this object.\n\n    Return the number of rows if Series. Otherwise return the number of\n    rows times number of columns if DataFrame.\n\n    See Also\n    --------\n    ndarray.size : Number of elements in the array.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.size\n    3\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.size\n    4\n    \"\"\"\n    return np.prod(self.shape)",
                            "@property\ndef _selected_obj(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                            "@property\ndef _obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                            "def set_axis(self, labels, axis=0, inplace=False):\n    \"\"\"\n    Assign desired index to given axis.\n\n    Indexes for column or row labels can be changed by assigning\n    a list-like or Index.\n\n    .. versionchanged:: 0.21.0\n\n       The signature is now `labels` and `axis`, consistent with\n       the rest of pandas API. Previously, the `axis` and `labels`\n       arguments were respectively the first and second positional\n       arguments.\n\n    Parameters\n    ----------\n    labels : list-like, Index\n        The values for the new index.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to update. The value 0 identifies the rows, and 1\n        identifies the columns.\n\n    inplace : bool, default False\n        Whether to return a new %(klass)s instance.\n\n    Returns\n    -------\n    renamed : %(klass)s or None\n        An object of same type as caller if inplace=False, None otherwise.\n\n    See Also\n    --------\n    DataFrame.rename_axis : Alter the name of the index or columns.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n\n    >>> s.set_axis(['a', 'b', 'c'], axis=0)\n    a    1\n    b    2\n    c    3\n    dtype: int64\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n    Change the row labels.\n\n    >>> df.set_axis(['a', 'b', 'c'], axis='index')\n       A  B\n    a  1  4\n    b  2  5\n    c  3  6\n\n    Change the column labels.\n\n    >>> df.set_axis(['I', 'II'], axis='columns')\n       I  II\n    0  1   4\n    1  2   5\n    2  3   6\n\n    Now, update the labels inplace.\n\n    >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n    >>> df\n       i  ii\n    0  1   4\n    1  2   5\n    2  3   6\n    \"\"\"\n    if inplace:\n        setattr(self, self._get_axis_name(axis), labels)\n    else:\n        obj = self.copy()\n        obj.set_axis(labels, axis=axis, inplace=True)\n        return obj",
                            "def _set_axis(self, axis, labels) -> None:\n    self._data.set_axis(axis, labels)\n    self._clear_item_cache()",
                            "def swapaxes(self: FrameOrSeries, axis1, axis2, copy=True) -> FrameOrSeries:\n    \"\"\"\n    Interchange axes and swap values axes appropriately.\n\n    Returns\n    -------\n    y : same as input\n    \"\"\"\n    i = self._get_axis_number(axis1)\n    j = self._get_axis_number(axis2)\n    if i == j:\n        if copy:\n            return self.copy()\n        return self\n    mapping = {i: j, j: i}\n    new_axes = (self._get_axis(mapping.get(k, k)) for k in range(self._AXIS_LEN))\n    new_values = self.values.swapaxes(i, j)\n    if copy:\n        new_values = new_values.copy()\n    return self._constructor(new_values, *new_axes).__finalize__(self)",
                            "def droplevel(self: FrameOrSeries, level, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Return DataFrame with requested index / column level(s) removed.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    level : int, str, or list-like\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or positional indexes\n        of levels.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with requested index / column level(s) removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     [1, 2, 3, 4],\n    ...     [5, 6, 7, 8],\n    ...     [9, 10, 11, 12]\n    ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n    >>> df.columns = pd.MultiIndex.from_tuples([\n    ...    ('c', 'e'), ('d', 'f')\n    ... ], names=['level_1', 'level_2'])\n\n    >>> df\n    level_1   c   d\n    level_2   e   f\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n\n    >>> df.droplevel('a')\n    level_1   c   d\n    level_2   e   f\n    b\n    2        3   4\n    6        7   8\n    10      11  12\n\n    >>> df.droplevel('level2', axis=1)\n    level_1   c   d\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n    \"\"\"\n    labels = self._get_axis(axis)\n    new_labels = labels.droplevel(level)\n    result = self.set_axis(new_labels, axis=axis, inplace=False)\n    return result",
                            "def pop(self: FrameOrSeries, item) -> FrameOrSeries:\n    \"\"\"\n    Return item and drop from frame. Raise KeyError if not found.\n\n    Parameters\n    ----------\n    item : str\n        Label of column to be popped.\n\n    Returns\n    -------\n    Series\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=('name', 'class', 'max_speed'))\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    >>> df.pop('class')\n    0      bird\n    1      bird\n    2    mammal\n    3    mammal\n    Name: class, dtype: object\n\n    >>> df\n         name  max_speed\n    0  falcon      389.0\n    1  parrot       24.0\n    2    lion       80.5\n    3  monkey        NaN\n    \"\"\"\n    result = self[item]\n    del self[item]\n    try:\n        result._reset_cacher()\n    except AttributeError:\n        pass\n    return result",
                            "def squeeze(self, axis=None):\n    \"\"\"\n    Squeeze 1 dimensional axis objects into scalars.\n\n    Series or DataFrames with a single element are squeezed to a scalar.\n    DataFrames with a single column or a single row are squeezed to a\n    Series. Otherwise the object is unchanged.\n\n    This method is most useful when you don't know if your\n    object is a Series or DataFrame, but you do know it has just a single\n    column. In that case you can safely call `squeeze` to ensure you have a\n    Series.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns', None}, default None\n        A specific axis to squeeze. By default, all length-1 axes are\n        squeezed.\n\n    Returns\n    -------\n    DataFrame, Series, or scalar\n        The projection after squeezing `axis` or all the axes.\n\n    See Also\n    --------\n    Series.iloc : Integer-location based indexing for selecting scalars.\n    DataFrame.iloc : Integer-location based indexing for selecting Series.\n    Series.to_frame : Inverse of DataFrame.squeeze for a\n        single-column DataFrame.\n\n    Examples\n    --------\n    >>> primes = pd.Series([2, 3, 5, 7])\n\n    Slicing might produce a Series with a single value:\n\n    >>> even_primes = primes[primes % 2 == 0]\n    >>> even_primes\n    0    2\n    dtype: int64\n\n    >>> even_primes.squeeze()\n    2\n\n    Squeezing objects with more than one value in every axis does nothing:\n\n    >>> odd_primes = primes[primes % 2 == 1]\n    >>> odd_primes\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    >>> odd_primes.squeeze()\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    Squeezing is even more effective when used with DataFrames.\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n    >>> df\n       a  b\n    0  1  2\n    1  3  4\n\n    Slicing a single column will produce a DataFrame with the columns\n    having only one value:\n\n    >>> df_a = df[['a']]\n    >>> df_a\n       a\n    0  1\n    1  3\n\n    So the columns can be squeezed down, resulting in a Series:\n\n    >>> df_a.squeeze('columns')\n    0    1\n    1    3\n    Name: a, dtype: int64\n\n    Slicing a single row from a single column will produce a single\n    scalar DataFrame:\n\n    >>> df_0a = df.loc[df.index < 1, ['a']]\n    >>> df_0a\n       a\n    0  1\n\n    Squeezing the rows produces a single scalar Series:\n\n    >>> df_0a.squeeze('rows')\n    a    1\n    Name: 0, dtype: int64\n\n    Squeezing all axes will project directly into a scalar:\n\n    >>> df_0a.squeeze()\n    1\n    \"\"\"\n    axis = self._AXIS_NAMES if axis is None else (self._get_axis_number(axis),)\n    return self.iloc[tuple((0 if i in axis and len(a) == 1 else slice(None) for i, a in enumerate(self.axes)))]",
                            "def swaplevel(self: FrameOrSeries, i=-2, j=-1, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis\n\n    Parameters\n    ----------\n    i, j : int, str (can be mixed)\n        Level of index to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    swapped : same type as caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    result = self.copy()\n    labels = result._data.axes[axis]\n    result._data.set_axis(axis, labels.swaplevel(i, j))\n    return result",
                            "def rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes input function or functions. Function / dict values must be\n    unique (1-to-1). Labels not contained in a dict / Series will be left\n    as-is. Extra labels listed don't throw an error. Alternatively, change\n    ``Series.name`` with a scalar value (Series only).\n\n    Parameters\n    ----------\n    %(axes)s : scalar, list-like, dict-like or function, optional\n        Scalar or list-like will alter the ``Series.name`` attribute,\n        and raise on DataFrame.\n        dict-like or functions are transformations to apply to\n        that axis' values\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new %(klass)s. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    renamed : %(klass)s (new object)\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    NDFrame.rename_axis\n\n    Examples\n    --------\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n    >>> s.rename(\"my_name\") # scalar, changes Series.name\n    0    1\n    1    2\n    2    3\n    Name: my_name, dtype: int64\n    >>> s.rename(lambda x: x ** 2)  # function, changes labels\n    0    1\n    1    2\n    4    3\n    dtype: int64\n    >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n    0    1\n    3    2\n    5    3\n    dtype: int64\n\n    Since ``DataFrame`` doesn't have a ``.name`` attribute,\n    only mapping-type arguments are allowed.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(2)\n    Traceback (most recent call last):\n    ...\n    TypeError: 'int' object is not callable\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n       a  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n\n    See the :ref:`user guide <basics.rename>` for more.\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    copy = kwargs.pop('copy', True)\n    inplace = kwargs.pop('inplace', False)\n    level = kwargs.pop('level', None)\n    axis = kwargs.pop('axis', None)\n    errors = kwargs.pop('errors', 'ignore')\n    if axis is not None:\n        self._get_axis_number(axis)\n    if kwargs:\n        raise TypeError(f'rename() got an unexpected keyword argument \"{list(kwargs.keys())[0]}\"')\n    if com.count_not_none(*axes.values()) == 0:\n        raise TypeError('must pass an index to rename')\n    self._consolidate_inplace()\n    result = self if inplace else self.copy(deep=copy)\n    for axis in range(self._AXIS_LEN):\n        v = axes.get(self._AXIS_NAMES[axis])\n        if v is None:\n            continue\n        f = com.get_rename_function(v)\n        baxis = self._get_block_manager_axis(axis)\n        if level is not None:\n            level = self.axes[axis]._get_level_number(level)\n        if not callable(v):\n            indexer = self.axes[axis].get_indexer_for(v)\n            if errors == 'raise' and len(indexer[indexer == -1]):\n                missing_labels = [label for index, label in enumerate(v) if indexer[index] == -1]\n                raise KeyError(f'{missing_labels} not found in axis')\n        result._data = result._data.rename_axis(f, axis=baxis, copy=copy, level=level)\n        result._clear_item_cache()\n    if inplace:\n        self._update_inplace(result._data)\n    else:\n        return result.__finalize__(self)",
                            "@rewrite_axis_style_signature('mapper', [('copy', True), ('inplace', False)])\ndef rename_axis(self, mapper=lib.no_default, **kwargs):\n    \"\"\"\n    Set the name of the axis for the index or columns.\n\n    Parameters\n    ----------\n    mapper : scalar, list-like, optional\n        Value to set the axis name attribute.\n    index, columns : scalar, list-like, dict-like or function, optional\n        A scalar, list-like, dict-like or functions transformations to\n        apply to that axis' values.\n\n        Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index``\n        and/or ``columns``.\n\n        .. versionchanged:: 0.24.0\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to rename.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Series\n        or DataFrame.\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or None if `inplace` is True.\n\n    See Also\n    --------\n    Series.rename : Alter Series index labels or name.\n    DataFrame.rename : Alter DataFrame index labels or name.\n    Index.rename : Set new names on index.\n\n    Notes\n    -----\n    ``DataFrame.rename_axis`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    The first calling convention will only modify the names of\n    the index and/or the names of the Index object that is the columns.\n    In this case, the parameter ``copy`` is ignored.\n\n    The second calling convention will modify the names of the\n    the corresponding index if mapper is a list or a scalar.\n    However, if mapper is dict-like or a function, it will use the\n    deprecated behavior of modifying the axis *labels*.\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n    >>> s\n    0       dog\n    1       cat\n    2    monkey\n    dtype: object\n    >>> s.rename_axis(\"animal\")\n    animal\n    0    dog\n    1    cat\n    2    monkey\n    dtype: object\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n    ...                    \"num_arms\": [0, 0, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs  num_arms\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"animal\")\n    >>> df\n            num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n    >>> df\n    limbs   num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n\n    **MultiIndex**\n\n    >>> df.index = pd.MultiIndex.from_product([['mammal'],\n    ...                                        ['dog', 'cat', 'monkey']],\n    ...                                       names=['type', 'name'])\n    >>> df\n    limbs          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(index={'type': 'class'})\n    limbs          num_legs  num_arms\n    class  name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(columns=str.upper)\n    LIMBS          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments((), kwargs, sentinel=lib.no_default)\n    copy = kwargs.pop('copy', True)\n    inplace = kwargs.pop('inplace', False)\n    axis = kwargs.pop('axis', 0)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if kwargs:\n        raise TypeError(f'rename_axis() got an unexpected keyword argument \"{list(kwargs.keys())[0]}\"')\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if mapper is not lib.no_default:\n        non_mapper = is_scalar(mapper) or (is_list_like(mapper) and (not is_dict_like(mapper)))\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            raise ValueError('Use `.rename` to alter labels with a mapper.')\n    else:\n        result = self if inplace else self.copy(deep=copy)\n        for axis in range(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is lib.no_default:\n                continue\n            non_mapper = is_scalar(v) or (is_list_like(v) and (not is_dict_like(v)))\n            if non_mapper:\n                newnames = v\n            else:\n                f = com.get_rename_function(v)\n                curnames = self._get_axis(axis).names\n                newnames = [f(name) for name in curnames]\n            result._set_axis_name(newnames, axis=axis, inplace=True)\n        if not inplace:\n            return result",
                            "def _set_axis_name(self, name, axis=0, inplace=False):\n    \"\"\"\n    Set the name(s) of the axis.\n\n    Parameters\n    ----------\n    name : str or list of str\n        Name(s) to set.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to set the label. The value 0 or 'index' specifies index,\n        and the value 1 or 'columns' specifies columns.\n    inplace : bool, default False\n        If `True`, do operation inplace and return None.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or `None` if `inplace` is `True`.\n\n    See Also\n    --------\n    DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n    Series.rename : Alter the index labels or set the index name\n        of :class:`Series`.\n    Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs\n    dog            4\n    cat            4\n    monkey         2\n    >>> df._set_axis_name(\"animal\")\n            num_legs\n    animal\n    dog            4\n    cat            4\n    monkey         2\n    >>> df.index = pd.MultiIndex.from_product(\n    ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n    >>> df._set_axis_name([\"type\", \"name\"])\n                   legs\n    type   name\n    mammal dog        4\n           cat        4\n           monkey     2\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    idx = self._get_axis(axis).set_names(name)\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    renamed = self if inplace else self.copy()\n    renamed.set_axis(idx, axis=axis, inplace=True)\n    if not inplace:\n        return renamed",
                            "def _indexed_same(self, other) -> bool:\n    return all((self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS))",
                            "def equals(self, other):\n    \"\"\"\n    Test whether two objects contain the same elements.\n\n    This function allows two Series or DataFrames to be compared against\n    each other to see if they have the same shape and elements. NaNs in\n    the same location are considered equal. The column headers do not\n    need to have the same type, but the elements within the columns must\n    be the same dtype.\n\n    Parameters\n    ----------\n    other : Series or DataFrame\n        The other Series or DataFrame to be compared with the first.\n\n    Returns\n    -------\n    bool\n        True if all elements are the same in both objects, False\n        otherwise.\n\n    See Also\n    --------\n    Series.eq : Compare two Series objects of the same length\n        and return a Series where each element is True if the element\n        in each Series is equal, False otherwise.\n    DataFrame.eq : Compare two DataFrame objects of the same shape and\n        return a DataFrame where each element is True if the respective\n        element in each DataFrame is equal, False otherwise.\n    testing.assert_series_equal : Raises an AssertionError if left and\n        right are not equal. Provides an easy interface to ignore\n        inequality in dtypes, indexes and precision among others.\n    testing.assert_frame_equal : Like assert_series_equal, but targets\n        DataFrames.\n    numpy.array_equal : Return True if two arrays have the same shape\n        and elements, False otherwise.\n\n    Notes\n    -----\n    This function requires that the elements have the same dtype as their\n    respective elements in the other Series or DataFrame. However, the\n    column labels do not need to have the same type, as long as they are\n    still considered equal.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({1: [10], 2: [20]})\n    >>> df\n        1   2\n    0  10  20\n\n    DataFrames df and exactly_equal have the same types and values for\n    their elements and column labels, which will return True.\n\n    >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n    >>> exactly_equal\n        1   2\n    0  10  20\n    >>> df.equals(exactly_equal)\n    True\n\n    DataFrames df and different_column_type have the same element\n    types and values, but have different types for the column labels,\n    which will still return True.\n\n    >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n    >>> different_column_type\n       1.0  2.0\n    0   10   20\n    >>> df.equals(different_column_type)\n    True\n\n    DataFrames df and different_data_type have different types for the\n    same values for their elements, and will return False even though\n    their column labels are the same values and types.\n\n    >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n    >>> different_data_type\n          1     2\n    0  10.0  20.0\n    >>> df.equals(different_data_type)\n    False\n    \"\"\"\n    if not isinstance(other, self._constructor):\n        return False\n    return self._data.equals(other._data)",
                            "def __neg__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values):\n        arr = operator.inv(values)\n    elif is_numeric_dtype(values) or is_timedelta64_dtype(values) or is_object_dtype(values):\n        arr = operator.neg(values)\n    else:\n        raise TypeError(f'Unary negative expects numeric dtype, not {values.dtype}')\n    return self.__array_wrap__(arr)",
                            "def __pos__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values) or is_period_arraylike(values):\n        arr = values\n    elif is_numeric_dtype(values) or is_timedelta64_dtype(values) or is_object_dtype(values):\n        arr = operator.pos(values)\n    else:\n        raise TypeError(f'Unary plus expects numeric dtype, not {values.dtype}')\n    return self.__array_wrap__(arr)",
                            "def __invert__(self):\n    if not self.size:\n        return self\n    arr = operator.inv(com.values_from_object(self))\n    return self.__array_wrap__(arr)",
                            "def __nonzero__(self):\n    raise ValueError(f'The truth value of a {type(self).__name__} is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().')",
                            "def bool(self):\n    \"\"\"\n    Return the bool of a single element PandasObject.\n\n    This must be a boolean scalar value, either True or False.  Raise a\n    ValueError if the PandasObject does not have exactly 1 element, or that\n    element is not boolean\n\n    Returns\n    -------\n    bool\n        Same single boolean value converted to bool type.\n    \"\"\"\n    v = self.squeeze()\n    if isinstance(v, (bool, np.bool_)):\n        return bool(v)\n    elif is_scalar(v):\n        raise ValueError(f'bool cannot act on a non-boolean single element {type(self).__name__}')\n    self.__nonzero__()",
                            "def __abs__(self: FrameOrSeries) -> FrameOrSeries:\n    return self.abs()",
                            "def __round__(self: FrameOrSeries, decimals: int=0) -> FrameOrSeries:\n    return self.round(decimals)",
                            "def _is_level_reference(self, key, axis=0):\n    \"\"\"\n    Test whether a key is a level reference for a given axis.\n\n    To be considered a level reference, `key` must be a string that:\n      - (axis=0): Matches the name of an index level and does NOT match\n        a column label.\n      - (axis=1): Matches the name of a column level and does NOT match\n        an index label.\n\n    Parameters\n    ----------\n    key : str\n        Potential level name for the given axis\n    axis : int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_level : bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    return key is not None and is_hashable(key) and (key in self.axes[axis].names) and (not self._is_label_reference(key, axis=axis))",
                            "def _is_label_reference(self, key, axis=0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label reference for a given axis.\n\n    To be considered a label reference, `key` must be a string that:\n      - (axis=0): Matches a column label\n      - (axis=1): Matches an index label\n\n    Parameters\n    ----------\n    key: str\n        Potential label name\n    axis: int, default 0\n        Axis perpendicular to the axis that labels are associated with\n        (0 means search for column labels, 1 means search for index labels)\n\n    Returns\n    -------\n    is_label: bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n    return key is not None and is_hashable(key) and any((key in self.axes[ax] for ax in other_axes))",
                            "def _is_label_or_level_reference(self, key: str, axis: int=0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label or level reference for a given axis.\n\n    To be considered either a label or a level reference, `key` must be a\n    string that:\n      - (axis=0): Matches a column label or an index level\n      - (axis=1): Matches an index label or a column level\n\n    Parameters\n    ----------\n    key: str\n        Potential label or level name\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_label_or_level: bool\n    \"\"\"\n    return self._is_level_reference(key, axis=axis) or self._is_label_reference(key, axis=axis)",
                            "def _check_label_or_level_ambiguity(self, key, axis: int=0) -> None:\n    \"\"\"\n    Check whether `key` is ambiguous.\n\n    By ambiguous, we mean that it matches both a level of the input\n    `axis` and a label of the other axis.\n\n    Parameters\n    ----------\n    key: str or object\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns).\n\n    Raises\n    ------\n    ValueError: `key` is ambiguous\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n    if key is not None and is_hashable(key) and (key in self.axes[axis].names) and any((key in self.axes[ax] for ax in other_axes)):\n        level_article, level_type = ('an', 'index') if axis == 0 else ('a', 'column')\n        label_article, label_type = ('a', 'column') if axis == 0 else ('an', 'index')\n        msg = f\"'{key}' is both {level_article} {level_type} level and {label_article} {label_type} label, which is ambiguous.\"\n        raise ValueError(msg)",
                            "def _get_label_or_level_values(self, key: str, axis: int=0) -> np.ndarray:\n    \"\"\"\n    Return a 1-D array of values associated with `key`, a label or level\n    from the given `axis`.\n\n    Retrieval logic:\n      - (axis=0): Return column values if `key` matches a column label.\n        Otherwise return index level values if `key` matches an index\n        level.\n      - (axis=1): Return row values if `key` matches an index label.\n        Otherwise return column level values if 'key' matches a column\n        level\n\n    Parameters\n    ----------\n    key: str\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    values: np.ndarray\n\n    Raises\n    ------\n    KeyError\n        if `key` matches neither a label nor a level\n    ValueError\n        if `key` matches multiple labels\n    FutureWarning\n        if `key` is ambiguous. This will become an ambiguity error in a\n        future version\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n    if self._is_label_reference(key, axis=axis):\n        self._check_label_or_level_ambiguity(key, axis=axis)\n        values = self.xs(key, axis=other_axes[0])._values\n    elif self._is_level_reference(key, axis=axis):\n        values = self.axes[axis].get_level_values(key)._values\n    else:\n        raise KeyError(key)\n    if values.ndim > 1:\n        if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n            multi_message = '\\nFor a multi-index, the label must be a tuple with elements corresponding to each level.'\n        else:\n            multi_message = ''\n        label_axis_name = 'column' if axis == 0 else 'index'\n        raise ValueError(f\"The {label_axis_name} label '{key}' is not unique.{multi_message}\")\n    return values",
                            "def _drop_labels_or_levels(self, keys, axis: int=0):\n    \"\"\"\n    Drop labels and/or levels for the given `axis`.\n\n    For each key in `keys`:\n      - (axis=0): If key matches a column label then drop the column.\n        Otherwise if key matches an index level then drop the level.\n      - (axis=1): If key matches an index label then drop the row.\n        Otherwise if key matches a column level then drop the level.\n\n    Parameters\n    ----------\n    keys: str or list of str\n        labels or levels to drop\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    dropped: DataFrame\n\n    Raises\n    ------\n    ValueError\n        if any `keys` match neither a label nor a level\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    keys = com.maybe_make_list(keys)\n    invalid_keys = [k for k in keys if not self._is_label_or_level_reference(k, axis=axis)]\n    if invalid_keys:\n        raise ValueError(f'The following keys are not valid labels or levels for axis {axis}: {invalid_keys}')\n    levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n    labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n    dropped = self.copy()\n    if axis == 0:\n        if levels_to_drop:\n            dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=1, inplace=True)\n    else:\n        if levels_to_drop:\n            if isinstance(dropped.columns, MultiIndex):\n                dropped.columns = dropped.columns.droplevel(levels_to_drop)\n            else:\n                dropped.columns = RangeIndex(dropped.columns.size)\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=0, inplace=True)\n    return dropped",
                            "def __hash__(self):\n    raise TypeError(f'{repr(type(self).__name__)} objects are mutable, thus they cannot be hashed')",
                            "def __iter__(self):\n    \"\"\"\n    Iterate over info axis.\n\n    Returns\n    -------\n    iterator\n        Info axis as iterator.\n    \"\"\"\n    return iter(self._info_axis)",
                            "def keys(self):\n    \"\"\"\n    Get the 'info axis' (see Indexing for more).\n\n    This is index for Series, columns for DataFrame.\n\n    Returns\n    -------\n    Index\n        Info axis.\n    \"\"\"\n    return self._info_axis",
                            "def items(self):\n    \"\"\"Iterate over (label, values) on info axis\n\n    This is index for Series and columns for DataFrame.\n\n    Returns\n    -------\n    Generator\n    \"\"\"\n    for h in self._info_axis:\n        yield (h, self[h])",
                            "@Appender(items.__doc__)\ndef iteritems(self):\n    return self.items()",
                            "def __len__(self) -> int:\n    \"\"\"Returns length of info axis\"\"\"\n    return len(self._info_axis)",
                            "def __contains__(self, key) -> bool_t:\n    \"\"\"True if the key is in the info axis\"\"\"\n    return key in self._info_axis",
                            "@property\ndef empty(self) -> bool_t:\n    \"\"\"\n    Indicator whether DataFrame is empty.\n\n    True if DataFrame is entirely empty (no items), meaning any of the\n    axes are of length 0.\n\n    Returns\n    -------\n    bool\n        If DataFrame is empty, return True, if not return False.\n\n    See Also\n    --------\n    Series.dropna\n    DataFrame.dropna\n\n    Notes\n    -----\n    If DataFrame contains only NaNs, it is still not considered empty. See\n    the example below.\n\n    Examples\n    --------\n    An example of an actual empty DataFrame. Notice the index is empty:\n\n    >>> df_empty = pd.DataFrame({'A' : []})\n    >>> df_empty\n    Empty DataFrame\n    Columns: [A]\n    Index: []\n    >>> df_empty.empty\n    True\n\n    If we only have NaNs in our DataFrame, it is not considered empty! We\n    will need to drop the NaNs to make the DataFrame empty:\n\n    >>> df = pd.DataFrame({'A' : [np.nan]})\n    >>> df\n        A\n    0 NaN\n    >>> df.empty\n    False\n    >>> df.dropna().empty\n    True\n    \"\"\"\n    return any((len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS))",
                            "def __array__(self, dtype=None):\n    return com.values_from_object(self)",
                            "def __array_wrap__(self, result, context=None):\n    result = lib.item_from_zerodim(result)\n    if is_scalar(result):\n        return result\n    d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n    return self._constructor(result, **d).__finalize__(self)",
                            "def __getstate__(self) -> Dict[str, Any]:\n    meta = {k: getattr(self, k, None) for k in self._metadata}\n    return dict(_data=self._data, _typ=self._typ, _metadata=self._metadata, attrs=self.attrs, **meta)",
                            "def __setstate__(self, state):\n    if isinstance(state, BlockManager):\n        self._data = state\n    elif isinstance(state, dict):\n        typ = state.get('_typ')\n        if typ is not None:\n            attrs = state.get('_attrs', {})\n            object.__setattr__(self, '_attrs', attrs)\n            meta = set(self._internal_names + self._metadata)\n            for k in list(meta):\n                if k in state:\n                    v = state[k]\n                    object.__setattr__(self, k, v)\n            for k, v in state.items():\n                if k not in meta:\n                    object.__setattr__(self, k, v)\n        else:\n            self._unpickle_series_compat(state)\n    elif len(state) == 2:\n        self._unpickle_series_compat(state)\n    self._item_cache = {}",
                            "def __repr__(self) -> str:\n    prepr = f\"[{','.join(map(pprint_thing, self))}]\"\n    return f'{type(self).__name__}({prepr})'",
                            "def _repr_latex_(self):\n    \"\"\"\n    Returns a LaTeX representation for a particular object.\n    Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n    \"\"\"\n    if config.get_option('display.latex.repr'):\n        return self.to_latex()\n    else:\n        return None",
                            "def _repr_data_resource_(self):\n    \"\"\"\n    Not a real Jupyter special repr method, but we use the same\n    naming convention.\n    \"\"\"\n    if config.get_option('display.html.table_schema'):\n        data = self.head(config.get_option('display.max_rows'))\n        payload = json.loads(data.to_json(orient='table'), object_pairs_hook=collections.OrderedDict)\n        return payload",
                            "@Appender(_shared_docs['to_excel'] % dict(klass='object'))\ndef to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None) -> None:\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n    from pandas.io.formats.excel import ExcelFormatter\n    formatter = ExcelFormatter(df, na_rep=na_rep, cols=columns, header=header, float_format=float_format, index=index, index_label=index_label, merge_cells=merge_cells, inf_rep=inf_rep)\n    formatter.write(excel_writer, sheet_name=sheet_name, startrow=startrow, startcol=startcol, freeze_panes=freeze_panes, engine=engine)",
                            "def to_json(self, path_or_buf: Optional[FilePathOrBuffer]=None, orient: Optional[str]=None, date_format: Optional[str]=None, double_precision: int=10, force_ascii: bool_t=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool_t=False, compression: Optional[str]='infer', index: bool_t=True, indent: Optional[int]=None) -> Optional[str]:\n    \"\"\"\n    Convert the object to a JSON string.\n\n    Note NaN's and None will be converted to null and datetime objects\n    will be converted to UNIX timestamps.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, optional\n        File path or object. If not specified, the result is returned as\n        a string.\n    orient : str\n        Indication of expected JSON string format.\n\n        * Series:\n\n            - default is 'index'\n            - allowed values are: {'split','records','index','table'}.\n\n        * DataFrame:\n\n            - default is 'columns'\n            - allowed values are: {'split', 'records', 'index', 'columns',\n              'values', 'table'}.\n\n        * The format of the JSON string:\n\n            - 'split' : dict like {'index' -> [index], 'columns' -> [columns],\n              'data' -> [values]}\n            - 'records' : list like [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n            - 'columns' : dict like {column -> {index -> value}}\n            - 'values' : just the values array\n            - 'table' : dict like {'schema': {schema}, 'data': {data}}\n\n            Describing the data, where data component is like ``orient='records'``.\n\n        .. versionchanged:: 0.20.0\n\n    date_format : {None, 'epoch', 'iso'}\n        Type of date conversion. 'epoch' = epoch milliseconds,\n        'iso' = ISO8601. The default depends on the `orient`. For\n        ``orient='table'``, the default is 'iso'. For all other orients,\n        the default is 'epoch'.\n    double_precision : int, default 10\n        The number of decimal places to use when encoding\n        floating point values.\n    force_ascii : bool, default True\n        Force encoded string to be ASCII.\n    date_unit : str, default 'ms' (milliseconds)\n        The time unit to encode to, governs timestamp and ISO8601\n        precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n        microsecond, and nanosecond respectively.\n    default_handler : callable, default None\n        Handler to call if object cannot otherwise be converted to a\n        suitable format for JSON. Should receive a single argument which is\n        the object to convert and return a serialisable object.\n    lines : bool, default False\n        If 'orient' is 'records' write out line delimited json format. Will\n        throw ValueError if incorrect 'orient' since others are not list\n        like.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n        A string representing the compression to use in the output file,\n        only used when the first argument is a filename. By default, the\n        compression is inferred from the filename.\n\n        .. versionadded:: 0.21.0\n        .. versionchanged:: 0.24.0\n           'infer' option added and set to default\n    index : bool, default True\n        Whether to include the index values in the JSON string. Not\n        including the index (``index=False``) is only supported when\n        orient is 'split' or 'table'.\n\n        .. versionadded:: 0.23.0\n\n    indent : int, optional\n       Length of whitespace used to indent each record.\n\n       .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting json format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_json\n\n    Notes\n    -----\n    The behavior of ``indent=0`` varies from the stdlib, which does not\n    indent the output but does insert newlines. Currently, ``indent=0``\n    and the default ``indent=None`` are equivalent in pandas, though this\n    may change in a future release.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n    ...                   index=['row 1', 'row 2'],\n    ...                   columns=['col 1', 'col 2'])\n    >>> df.to_json(orient='split')\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n    Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n    Note that index labels are not preserved with this encoding.\n\n    >>> df.to_json(orient='records')\n    '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n    Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n    >>> df.to_json(orient='index')\n    '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n    >>> df.to_json(orient='columns')\n    '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n    >>> df.to_json(orient='values')\n    '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n    Encoding with Table Schema\n\n    >>> df.to_json(orient='table')\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n    \"\"\"\n    from pandas.io import json\n    if date_format is None and orient == 'table':\n        date_format = 'iso'\n    elif date_format is None:\n        date_format = 'epoch'\n    config.is_nonnegative_int(indent)\n    indent = indent or 0\n    return json.to_json(path_or_buf=path_or_buf, obj=self, orient=orient, date_format=date_format, double_precision=double_precision, force_ascii=force_ascii, date_unit=date_unit, default_handler=default_handler, lines=lines, compression=compression, index=index, indent=indent)",
                            "def to_hdf(self, path_or_buf, key: str, mode: str='a', complevel: Optional[int]=None, complib: Optional[str]=None, append: bool_t=False, format: Optional[str]=None, index: bool_t=True, min_itemsize: Optional[Union[int, Dict[str, int]]]=None, nan_rep=None, dropna: Optional[bool_t]=None, data_columns: Optional[List[str]]=None, errors: str='strict', encoding: str='UTF-8') -> None:\n    \"\"\"\n    Write the contained data to an HDF5 file using HDFStore.\n\n    Hierarchical Data Format (HDF) is self-describing, allowing an\n    application to interpret the structure and contents of a file with\n    no outside information. One HDF file can hold a mix of related objects\n    which can be accessed as a group or as individual objects.\n\n    In order to add another DataFrame or Series to an existing HDF file\n    please use append mode and a different a key.\n\n    For more information see the :ref:`user guide <io.hdf5>`.\n\n    Parameters\n    ----------\n    path_or_buf : str or pandas.HDFStore\n        File path or HDFStore object.\n    key : str\n        Identifier for the group in the store.\n    mode : {'a', 'w', 'r+'}, default 'a'\n        Mode to open file:\n\n        - 'w': write, a new file is created (an existing file with\n          the same name would be deleted).\n        - 'a': append, an existing file is opened for reading and\n          writing, and if the file does not exist it is created.\n        - 'r+': similar to 'a', but the file must already exist.\n    complevel : {0-9}, optional\n        Specifies a compression level for data.\n        A value of 0 disables compression.\n    complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n        Specifies the compression library to be used.\n        As of v0.20.2 these additional compressors for Blosc are supported\n        (default if no compressor specified: 'blosc:blosclz'):\n        {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n        'blosc:zlib', 'blosc:zstd'}.\n        Specifying a compression library which is not available issues\n        a ValueError.\n    append : bool, default False\n        For Table formats, append the input data to the existing.\n    format : {'fixed', 'table', None}, default 'fixed'\n        Possible values:\n\n        - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n          nor searchable.\n        - 'table': Table format. Write as a PyTables Table structure\n          which may perform worse but allow more flexible operations\n          like searching / selecting subsets of the data.\n        - If None, pd.get_option('io.hdf.default_format') is checked,\n          followed by fallback to \"fixed\"\n    errors : str, default 'strict'\n        Specifies how encoding and decoding errors are to be handled.\n        See the errors argument for :func:`open` for a full list\n        of options.\n    encoding : str, default \"UTF-8\"\n    min_itemsize : dict or int, optional\n        Map column names to minimum string sizes for columns.\n    nan_rep : Any, optional\n        How to represent null values as str.\n        Not allowed with append=True.\n    data_columns : list of columns or True, optional\n        List of columns to create as indexed data columns for on-disk\n        queries, or True to use all columns. By default only the axes\n        of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n        Applicable only to format='table'.\n\n    See Also\n    --------\n    DataFrame.read_hdf : Read from HDF file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_feather : Write out feather-format for DataFrames.\n    DataFrame.to_csv : Write out to a csv file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n    ...                   index=['a', 'b', 'c'])\n    >>> df.to_hdf('data.h5', key='df', mode='w')\n\n    We can add another object to the same file:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.to_hdf('data.h5', key='s')\n\n    Reading from HDF file:\n\n    >>> pd.read_hdf('data.h5', 'df')\n    A  B\n    a  1  4\n    b  2  5\n    c  3  6\n    >>> pd.read_hdf('data.h5', 's')\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    Deleting file with data:\n\n    >>> import os\n    >>> os.remove('data.h5')\n    \"\"\"\n    from pandas.io import pytables\n    pytables.to_hdf(path_or_buf, key, self, mode=mode, complevel=complevel, complib=complib, append=append, format=format, index=index, min_itemsize=min_itemsize, nan_rep=nan_rep, dropna=dropna, data_columns=data_columns, errors=errors, encoding=encoding)",
                            "def to_sql(self, name: str, con, schema=None, if_exists: str='fail', index: bool_t=True, index_label=None, chunksize=None, dtype=None, method=None) -> None:\n    \"\"\"\n    Write records stored in a DataFrame to a SQL database.\n\n    Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n    newly created, appended to, or overwritten.\n\n    Parameters\n    ----------\n    name : str\n        Name of SQL table.\n    con : sqlalchemy.engine.Engine or sqlite3.Connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library. Legacy support is provided for sqlite3.Connection objects. The user\n        is responsible for engine disposal and connection closure for the SQLAlchemy\n        connectable See `here                 <https://docs.sqlalchemy.org/en/13/core/connections.html>`_\n\n    schema : str, optional\n        Specify the schema (if database flavor supports this). If None, use\n        default schema.\n    if_exists : {'fail', 'replace', 'append'}, default 'fail'\n        How to behave if the table already exists.\n\n        * fail: Raise a ValueError.\n        * replace: Drop the table before inserting new values.\n        * append: Insert new values to the existing table.\n\n    index : bool, default True\n        Write DataFrame index as a column. Uses `index_label` as the column\n        name in the table.\n    index_label : str or sequence, default None\n        Column label for index column(s). If None is given (default) and\n        `index` is True, then the index names are used.\n        A sequence should be given if the DataFrame uses MultiIndex.\n    chunksize : int, optional\n        Specify the number of rows in each batch to be written at a time.\n        By default, all rows will be written at once.\n    dtype : dict or scalar, optional\n        Specifying the datatype for columns. If a dictionary is used, the\n        keys should be the column names and the values should be the\n        SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n        scalar is provided, it will be applied to all columns.\n    method : {None, 'multi', callable}, optional\n        Controls the SQL insertion clause used:\n\n        * None : Uses standard SQL ``INSERT`` clause (one per row).\n        * 'multi': Pass multiple values in a single ``INSERT`` clause.\n        * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n        Details and a sample callable implementation can be found in the\n        section :ref:`insert method <io.sql.method>`.\n\n        .. versionadded:: 0.24.0\n\n    Raises\n    ------\n    ValueError\n        When the table already exists and `if_exists` is 'fail' (the\n        default).\n\n    See Also\n    --------\n    read_sql : Read a DataFrame from a table.\n\n    Notes\n    -----\n    Timezone aware datetime columns will be written as\n    ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n    database. Otherwise, the datetimes will be stored as timezone unaware\n    timestamps local to the original timezone.\n\n    .. versionadded:: 0.24.0\n\n    References\n    ----------\n    .. [1] http://docs.sqlalchemy.org\n    .. [2] https://www.python.org/dev/peps/pep-0249/\n\n    Examples\n    --------\n\n    Create an in-memory SQLite database.\n\n    >>> from sqlalchemy import create_engine\n    >>> engine = create_engine('sqlite://', echo=False)\n\n    Create a table from scratch with 3 rows.\n\n    >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n    >>> df\n         name\n    0  User 1\n    1  User 2\n    2  User 3\n\n    >>> df.to_sql('users', con=engine)\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n    >>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n    >>> df1.to_sql('users', con=engine, if_exists='append')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n     (0, 'User 4'), (1, 'User 5')]\n\n    Overwrite the table with just ``df1``.\n\n    >>> df1.to_sql('users', con=engine, if_exists='replace',\n    ...            index_label='id')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 4'), (1, 'User 5')]\n\n    Specify the dtype (especially useful for integers with missing values).\n    Notice that while pandas is forced to store the data as floating point,\n    the database supports nullable integers. When fetching the data with\n    Python, we get back integer scalars.\n\n    >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n    >>> df\n         A\n    0  1.0\n    1  NaN\n    2  2.0\n\n    >>> from sqlalchemy.types import Integer\n    >>> df.to_sql('integers', con=engine, index=False,\n    ...           dtype={\"A\": Integer()})\n\n    >>> engine.execute(\"SELECT * FROM integers\").fetchall()\n    [(1,), (None,), (2,)]\n    \"\"\"\n    from pandas.io import sql\n    sql.to_sql(self, name, con, schema=schema, if_exists=if_exists, index=index, index_label=index_label, chunksize=chunksize, dtype=dtype, method=method)",
                            "def to_pickle(self, path, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL) -> None:\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    path : str\n        File path where the pickled object will be stored.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None},         default 'infer'\n        A string representing the compression to use in the output file. By\n        default, infers from the file extension in specified path.\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n        values are 0, 1, 2, 3, 4. A negative value for the protocol\n        parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html.\n        .. versionadded:: 0.21.0.\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> original_df.to_pickle(\"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    from pandas.io.pickle import to_pickle\n    to_pickle(self, path, compression=compression, protocol=protocol)",
                            "def to_clipboard(self, excel: bool_t=True, sep: Optional[str]=None, **kwargs) -> None:\n    \"\"\"\n    Copy object to the system clipboard.\n\n    Write a text representation of object to the system clipboard.\n    This can be pasted into Excel, for example.\n\n    Parameters\n    ----------\n    excel : bool, default True\n        Produce output in a csv format for easy pasting into excel.\n\n        - True, use the provided separator for csv pasting.\n        - False, write a string representation of the object to the clipboard.\n\n    sep : str, default ``'\\\\t'``\n        Field delimiter.\n    **kwargs\n        These parameters will be passed to DataFrame.to_csv.\n\n    See Also\n    --------\n    DataFrame.to_csv : Write a DataFrame to a comma-separated values\n        (csv) file.\n    read_clipboard : Read text from clipboard and pass to read_table.\n\n    Notes\n    -----\n    Requirements for your platform.\n\n      - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n      - Windows : none\n      - OS X : none\n\n    Examples\n    --------\n    Copy the contents of a DataFrame to the clipboard.\n\n    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n    >>> df.to_clipboard(sep=',')\n    ... # Wrote the following to the system clipboard:\n    ... # ,A,B,C\n    ... # 0,1,2,3\n    ... # 1,4,5,6\n\n    We can omit the the index by passing the keyword `index` and setting\n    it to false.\n\n    >>> df.to_clipboard(sep=',', index=False)\n    ... # Wrote the following to the system clipboard:\n    ... # A,B,C\n    ... # 1,2,3\n    ... # 4,5,6\n    \"\"\"\n    from pandas.io import clipboards\n    clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)",
                            "def to_xarray(self):\n    \"\"\"\n    Return an xarray object from the pandas object.\n\n    Returns\n    -------\n    xarray.DataArray or xarray.Dataset\n        Data in the pandas structure converted to Dataset if the object is\n        a DataFrame, or a DataArray if the object is a Series.\n\n    See Also\n    --------\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Notes\n    -----\n    See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n    ...                    ('parrot', 'bird', 24.0, 2),\n    ...                    ('lion', 'mammal', 80.5, 4),\n    ...                    ('monkey', 'mammal', np.nan, 4)],\n    ...                   columns=['name', 'class', 'max_speed',\n    ...                            'num_legs'])\n    >>> df\n         name   class  max_speed  num_legs\n    0  falcon    bird      389.0         2\n    1  parrot    bird       24.0         2\n    2    lion  mammal       80.5         4\n    3  monkey  mammal        NaN         4\n\n    >>> df.to_xarray()\n    <xarray.Dataset>\n    Dimensions:    (index: 4)\n    Coordinates:\n      * index      (index) int64 0 1 2 3\n    Data variables:\n        name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n        class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n        max_speed  (index) float64 389.0 24.0 80.5 nan\n        num_legs   (index) int64 2 2 4 4\n\n    >>> df['max_speed'].to_xarray()\n    <xarray.DataArray 'max_speed' (index: 4)>\n    array([389. ,  24. ,  80.5,   nan])\n    Coordinates:\n      * index    (index) int64 0 1 2 3\n\n    >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n    ...                         '2018-01-02', '2018-01-02'])\n    >>> df_multiindex = pd.DataFrame({'date': dates,\n    ...                               'animal': ['falcon', 'parrot',\n    ...                                          'falcon', 'parrot'],\n    ...                               'speed': [350, 18, 361, 15]})\n    >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n    >>> df_multiindex\n                       speed\n    date       animal\n    2018-01-01 falcon    350\n               parrot     18\n    2018-01-02 falcon    361\n               parrot     15\n\n    >>> df_multiindex.to_xarray()\n    <xarray.Dataset>\n    Dimensions:  (animal: 2, date: 2)\n    Coordinates:\n      * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n      * animal   (animal) object 'falcon' 'parrot'\n    Data variables:\n        speed    (date, animal) int64 350 18 361 15\n    \"\"\"\n    xarray = import_optional_dependency('xarray')\n    if self.ndim == 1:\n        return xarray.DataArray.from_series(self)\n    else:\n        return xarray.Dataset.from_dataframe(self)",
                            "@Substitution(returns=fmt.return_docstring)\ndef to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None):\n    \"\"\"\n    Render object to a LaTeX tabular, longtable, or nested table/tabular.\n\n    Requires ``\\\\usepackage{booktabs}``.  The output can be copy/pasted\n    into a main LaTeX document or read from an external file\n    with ``\\\\input{table.tex}``.\n\n    .. versionchanged:: 0.20.2\n       Added to Series.\n\n    .. versionchanged:: 1.0.0\n       Added caption and label arguments.\n\n    Parameters\n    ----------\n    buf : str, Path or StringIO-like, optional, default None\n        Buffer to write to. If None, the output is returned as a string.\n    columns : list of label, optional\n        The subset of columns to write. Writes all columns by default.\n    col_space : int, optional\n        The minimum width of each column.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given,\n        it is assumed to be aliases for the column names.\n    index : bool, default True\n        Write row names (index).\n    na_rep : str, default 'NaN'\n        Missing data representation.\n    formatters : list of functions or dict of {str: function}, optional\n        Formatter functions to apply to columns' elements by position or\n        name. The result of each function must be a unicode string.\n        List must be of length equal to the number of columns.\n    float_format : one-parameter function or str, optional, default None\n        Formatter for floating point numbers. For example\n        ``float_format=\"%%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n        both result in 0.1234 being formatted as 0.12.\n    sparsify : bool, optional\n        Set to False for a DataFrame with a hierarchical index to print\n        every multiindex key at each row. By default, the value will be\n        read from the config module.\n    index_names : bool, default True\n        Prints the names of the indexes.\n    bold_rows : bool, default False\n        Make the row labels bold in the output.\n    column_format : str, optional\n        The columns format as specified in `LaTeX table format\n        <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n        columns. By default, 'l' will be used for all columns except\n        columns of numbers, which default to 'r'.\n    longtable : bool, optional\n        By default, the value will be read from the pandas config\n        module. Use a longtable environment instead of tabular. Requires\n        adding a \\\\usepackage{longtable} to your LaTeX preamble.\n    escape : bool, optional\n        By default, the value will be read from the pandas config\n        module. When set to False prevents from escaping latex special\n        characters in column names.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    decimal : str, default '.'\n        Character recognized as decimal separator, e.g. ',' in Europe.\n    multicolumn : bool, default True\n        Use \\\\multicolumn to enhance MultiIndex columns.\n        The default will be read from the config module.\n    multicolumn_format : str, default 'l'\n        The alignment for multicolumns, similar to `column_format`\n        The default will be read from the config module.\n    multirow : bool, default False\n        Use \\\\multirow to enhance MultiIndex rows. Requires adding a\n        \\\\usepackage{multirow} to your LaTeX preamble. Will print\n        centered labels (instead of top-aligned) across the contained\n        rows, separating groups via clines. The default will be read\n        from the pandas config module.\n    caption : str, optional\n        The LaTeX caption to be placed inside ``\\\\caption{}`` in the output.\n\n        .. versionadded:: 1.0.0\n\n    label : str, optional\n        The LaTeX label to be placed inside ``\\\\label{}`` in the output.\n        This is used with ``\\\\ref{}`` in the main ``.tex`` file.\n\n        .. versionadded:: 1.0.0\n    %(returns)s\n    See Also\n    --------\n    DataFrame.to_string : Render a DataFrame to a console-friendly\n        tabular output.\n    DataFrame.to_html : Render a DataFrame as an HTML table.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> print(df.to_latex(index=False))  # doctest: +NORMALIZE_WHITESPACE\n    \\\\begin{tabular}{lll}\n     \\\\toprule\n           name &    mask &    weapon \\\\\\\\\n     \\\\midrule\n        Raphael &     red &       sai \\\\\\\\\n      Donatello &  purple &  bo staff \\\\\\\\\n    \\\\bottomrule\n    \\\\end{tabular}\n    \"\"\"\n    if self.ndim == 1:\n        self = self.to_frame()\n    if longtable is None:\n        longtable = config.get_option('display.latex.longtable')\n    if escape is None:\n        escape = config.get_option('display.latex.escape')\n    if multicolumn is None:\n        multicolumn = config.get_option('display.latex.multicolumn')\n    if multicolumn_format is None:\n        multicolumn_format = config.get_option('display.latex.multicolumn_format')\n    if multirow is None:\n        multirow = config.get_option('display.latex.multirow')\n    formatter = DataFrameFormatter(self, columns=columns, col_space=col_space, na_rep=na_rep, header=header, index=index, formatters=formatters, float_format=float_format, bold_rows=bold_rows, sparsify=sparsify, index_names=index_names, escape=escape, decimal=decimal)\n    return formatter.to_latex(buf=buf, column_format=column_format, longtable=longtable, encoding=encoding, multicolumn=multicolumn, multicolumn_format=multicolumn_format, multirow=multirow, caption=caption, label=label)",
                            "def to_csv(self, path_or_buf: Optional[FilePathOrBuffer]=None, sep: str=',', na_rep: str='', float_format: Optional[str]=None, columns: Optional[Sequence[Optional[Hashable]]]=None, header: Union[bool_t, List[str]]=True, index: bool_t=True, index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]]=None, mode: str='w', encoding: Optional[str]=None, compression: Optional[Union[str, Mapping[str, str]]]='infer', quoting: Optional[int]=None, quotechar: str='\"', line_terminator: Optional[str]=None, chunksize: Optional[int]=None, date_format: Optional[str]=None, doublequote: bool_t=True, escapechar: Optional[str]=None, decimal: Optional[str]='.') -> Optional[str]:\n    \"\"\"\n    Write object to a comma-separated values (csv) file.\n\n    .. versionchanged:: 0.24.0\n        The order of arguments for Series was changed.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, default None\n        File path or object, if None is provided the result is returned as\n        a string.  If a file object is passed it should be opened with\n        `newline=''`, disabling universal newlines.\n\n        .. versionchanged:: 0.24.0\n\n           Was previously named \"path\" for Series.\n\n    sep : str, default ','\n        String of length 1. Field delimiter for the output file.\n    na_rep : str, default ''\n        Missing data representation.\n    float_format : str, default None\n        Format string for floating point numbers.\n    columns : sequence, optional\n        Columns to write.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names.\n\n        .. versionchanged:: 0.24.0\n\n           Previously defaulted to False for Series.\n\n    index : bool, default True\n        Write row names (index).\n    index_label : str or sequence, or False, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the object uses MultiIndex. If\n        False do not print fields for index names. Use index_label=False\n        for easier importing in R.\n    mode : str\n        Python write mode, default 'w'.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    compression : str or dict, default 'infer'\n        If str, represents compression mode. If dict, value at 'method' is\n        the compression mode. Compression mode may be any of the following\n        possible values: {'infer', 'gzip', 'bz2', 'zip', 'xz', None}. If\n        compression mode is 'infer' and `path_or_buf` is path-like, then\n        detect compression mode from the following extensions: '.gz',\n        '.bz2', '.zip' or '.xz'. (otherwise no compression). If dict given\n        and mode is 'zip' or inferred as 'zip', other entries passed as\n        additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other entries as additional compression options if\n           compression mode is 'zip'.\n\n    quoting : optional constant from csv module\n        Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n        then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n        will treat them as non-numeric.\n    quotechar : str, default '\\\\\"'\n        String of length 1. Character used to quote fields.\n    line_terminator : str, optional\n        The newline character or character sequence to use in the output\n        file. Defaults to `os.linesep`, which depends on the OS in which\n        this method is called ('\\\\n' for linux, '\\\\r\\\\n' for Windows, i.e.).\n\n        .. versionchanged:: 0.24.0\n    chunksize : int or None\n        Rows to write at a time.\n    date_format : str, default None\n        Format string for datetime objects.\n    doublequote : bool, default True\n        Control quoting of `quotechar` inside a field.\n    escapechar : str, default None\n        String of length 1. Character used to escape `sep` and `quotechar`\n        when appropriate.\n    decimal : str, default '.'\n        Character recognized as decimal separator. E.g. use ',' for\n        European data.\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting csv format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_csv : Load a CSV file into a DataFrame.\n    to_excel : Write DataFrame to an Excel file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> df.to_csv(index=False)\n    'name,mask,weapon\\\\nRaphael,red,sai\\\\nDonatello,purple,bo staff\\\\n'\n\n    # create 'out.zip' containing 'out.csv'\n    >>> compression_opts = dict(method='zip',\n    ...                         archive_name='out.csv')  # doctest: +SKIP\n\n    >>> df.to_csv('out.zip', index=False,\n    ...           compression=compression_opts)  # doctest: +SKIP\n    \"\"\"\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n    from pandas.io.formats.csvs import CSVFormatter\n    formatter = CSVFormatter(df, path_or_buf, line_terminator=line_terminator, sep=sep, encoding=encoding, compression=compression, quoting=quoting, na_rep=na_rep, float_format=float_format, cols=columns, header=header, index=index, index_label=index_label, mode=mode, chunksize=chunksize, quotechar=quotechar, date_format=date_format, doublequote=doublequote, escapechar=escapechar, decimal=decimal)\n    formatter.save()\n    if path_or_buf is None:\n        return formatter.path_or_buf.getvalue()\n    return None",
                            "@classmethod\ndef _create_indexer(cls, name: str, indexer) -> None:\n    \"\"\"Create an indexer like _name in the class.\n\n    Kept for compatibility with geopandas. To be removed in the future. See GH27258\n    \"\"\"\n    if getattr(cls, name, None) is None:\n        _indexer = functools.partial(indexer, name)\n        setattr(cls, name, property(_indexer, doc=indexer.__doc__))",
                            "def _set_as_cached(self, item, cacher) -> None:\n    \"\"\"Set the _cacher attribute on the calling object with a weakref to\n    cacher.\n    \"\"\"\n    self._cacher = (item, weakref.ref(cacher))",
                            "def _reset_cacher(self) -> None:\n    \"\"\"Reset the cacher.\"\"\"\n    if hasattr(self, '_cacher'):\n        del self._cacher",
                            "def _maybe_cache_changed(self, item, value) -> None:\n    \"\"\"The object has called back to us saying maybe it has changed.\n    \"\"\"\n    self._data.set(item, value)",
                            "@property\ndef _is_cached(self) -> bool_t:\n    \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n    return getattr(self, '_cacher', None) is not None",
                            "def _get_cacher(self):\n    \"\"\"return my cacher or None\"\"\"\n    cacher = getattr(self, '_cacher', None)\n    if cacher is not None:\n        cacher = cacher[1]()\n    return cacher",
                            "def _maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True) -> None:\n    \"\"\"\n    See if we need to update our parent cacher if clear, then clear our\n    cache.\n\n    Parameters\n    ----------\n    clear : bool, default False\n        Clear the item cache.\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n    cacher = getattr(self, '_cacher', None)\n    if cacher is not None:\n        ref = cacher[1]()\n        if ref is None:\n            del self._cacher\n        else:\n            try:\n                ref._maybe_cache_changed(cacher[0], self)\n            except AssertionError:\n                pass\n    if verify_is_copy:\n        self._check_setitem_copy(stacklevel=5, t='referant')\n    if clear:\n        self._clear_item_cache()",
                            "def _clear_item_cache(self) -> None:\n    self._item_cache.clear()",
                            "def take(self: FrameOrSeries, indices, axis=0, is_copy: Optional[bool_t]=None, **kwargs) -> FrameOrSeries:\n    \"\"\"\n    Return the elements in the given *positional* indices along an axis.\n\n    This means that we are not indexing according to actual values in\n    the index attribute of the object. We are indexing according to the\n    actual position of the element in the object.\n\n    Parameters\n    ----------\n    indices : array-like\n        An array of ints indicating which positions to take.\n    axis : {0 or 'index', 1 or 'columns', None}, default 0\n        The axis on which to select elements. ``0`` means that we are\n        selecting rows, ``1`` means that we are selecting columns.\n    is_copy : bool, default True\n        Whether to return a copy of the original object or not.\n\n        .. deprecated:: 1.0.0\n    **kwargs\n        For compatibility with :meth:`numpy.take`. Has no effect on the\n        output.\n\n    Returns\n    -------\n    taken : same type as caller\n        An array-like containing the elements taken from the object.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by labels.\n    DataFrame.iloc : Select a subset of a DataFrame by positions.\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=['name', 'class', 'max_speed'],\n    ...                   index=[0, 2, 3, 1])\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    2  parrot    bird       24.0\n    3    lion  mammal       80.5\n    1  monkey  mammal        NaN\n\n    Take elements at positions 0 and 3 along the axis 0 (default).\n\n    Note how the actual indices selected (0 and 1) do not correspond to\n    our selected indices 0 and 3. That's because we are selecting the 0th\n    and 3rd rows, not rows whose indices equal 0 and 3.\n\n    >>> df.take([0, 3])\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  monkey  mammal        NaN\n\n    Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n    >>> df.take([1, 2], axis=1)\n        class  max_speed\n    0    bird      389.0\n    2    bird       24.0\n    3  mammal       80.5\n    1  mammal        NaN\n\n    We may take elements using negative integers for positive indices,\n    starting from the end of the object, just like with Python lists.\n\n    >>> df.take([-1, -2])\n         name   class  max_speed\n    1  monkey  mammal        NaN\n    3    lion  mammal       80.5\n    \"\"\"\n    if is_copy is not None:\n        warnings.warn('is_copy is deprecated and will be removed in a future version. take will always return a copy in the future.', FutureWarning, stacklevel=2)\n    else:\n        is_copy = True\n    nv.validate_take(tuple(), kwargs)\n    self._consolidate_inplace()\n    new_data = self._data.take(indices, axis=self._get_block_manager_axis(axis), verify=True)\n    result = self._constructor(new_data).__finalize__(self)\n    if is_copy:\n        if not result._get_axis(axis).equals(self._get_axis(axis)):\n            result._set_is_copy(self)\n    return result",
                            "def xs(self, key, axis=0, level=None, drop_level: bool_t=True):\n    \"\"\"\n    Return cross-section from the Series/DataFrame.\n\n    This method takes a `key` argument to select data at a particular\n    level of a MultiIndex.\n\n    Parameters\n    ----------\n    key : label or tuple of label\n        Label contained in the index, or partially in a MultiIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis to retrieve cross-section on.\n    level : object, defaults to first n levels (n=1 or len(key))\n        In case of a key partially contained in a MultiIndex, indicate\n        which levels are used. Levels can be referred by label or position.\n    drop_level : bool, default True\n        If False, returns object with same levels as self.\n\n    Returns\n    -------\n    Series or DataFrame\n        Cross-section from the original Series or DataFrame\n        corresponding to the selected index levels.\n\n    See Also\n    --------\n    DataFrame.loc : Access a group of rows and columns\n        by label(s) or a boolean array.\n    DataFrame.iloc : Purely integer-location based indexing\n        for selection by position.\n\n    Notes\n    -----\n    `xs` can not be used to set values.\n\n    MultiIndex Slicers is a generic way to get/set values on\n    any level or levels.\n    It is a superset of `xs` functionality, see\n    :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n    Examples\n    --------\n    >>> d = {'num_legs': [4, 4, 2, 2],\n    ...      'num_wings': [0, 0, 2, 2],\n    ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n    ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n    ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n    >>> df = pd.DataFrame(data=d)\n    >>> df = df.set_index(['class', 'animal', 'locomotion'])\n    >>> df\n                               num_legs  num_wings\n    class  animal  locomotion\n    mammal cat     walks              4          0\n           dog     walks              4          0\n           bat     flies              2          2\n    bird   penguin walks              2          2\n\n    Get values at specified index\n\n    >>> df.xs('mammal')\n                       num_legs  num_wings\n    animal locomotion\n    cat    walks              4          0\n    dog    walks              4          0\n    bat    flies              2          2\n\n    Get values at several indexes\n\n    >>> df.xs(('mammal', 'dog'))\n                num_legs  num_wings\n    locomotion\n    walks              4          0\n\n    Get values at specified index and level\n\n    >>> df.xs('cat', level=1)\n                       num_legs  num_wings\n    class  locomotion\n    mammal walks              4          0\n\n    Get values at several indexes and levels\n\n    >>> df.xs(('bird', 'walks'),\n    ...       level=[0, 'locomotion'])\n             num_legs  num_wings\n    animal\n    penguin         2          2\n\n    Get values at specified column and axis\n\n    >>> df.xs('num_wings', axis=1)\n    class   animal   locomotion\n    mammal  cat      walks         0\n            dog      walks         0\n            bat      flies         2\n    bird    penguin  walks         2\n    Name: num_wings, dtype: int64\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    if level is not None:\n        loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n        _indexer = [slice(None)] * self.ndim\n        _indexer[axis] = loc\n        indexer = tuple(_indexer)\n        result = self.iloc[indexer]\n        setattr(result, result._get_axis_name(axis), new_ax)\n        return result\n    if axis == 1:\n        return self[key]\n    self._consolidate_inplace()\n    index = self.index\n    if isinstance(index, MultiIndex):\n        loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n    else:\n        loc = self.index.get_loc(key)\n        if isinstance(loc, np.ndarray):\n            if loc.dtype == np.bool_:\n                inds, = loc.nonzero()\n                return self.take(inds, axis=axis)\n            else:\n                return self.take(loc, axis=axis)\n        if not is_scalar(loc):\n            new_index = self.index[loc]\n    if is_scalar(loc):\n        new_values = self._data.fast_xs(loc)\n        if not is_list_like(new_values) or self.ndim == 1:\n            return com.maybe_box_datetimelike(new_values)\n        result = self._constructor_sliced(new_values, index=self.columns, name=self.index[loc], dtype=new_values.dtype)\n    else:\n        result = self.iloc[loc]\n        result.index = new_index\n    result._set_is_copy(self, copy=not result._is_view)\n    return result",
                            "def __getitem__(self, item):\n    raise AbstractMethodError(self)",
                            "def _get_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n    cache = self._item_cache\n    res = cache.get(item)\n    if res is None:\n        values = self._data.get(item)\n        res = self._box_item_values(item, values)\n        cache[item] = res\n        res._set_as_cached(item, self)\n        res._is_copy = self._is_copy\n    return res",
                            "def _iget_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n    ax = self._info_axis\n    if ax.is_unique:\n        lower = self._get_item_cache(ax[item])\n    else:\n        lower = self.take(item, axis=self._info_axis_number)\n    return lower",
                            "def _box_item_values(self, key, values):\n    raise AbstractMethodError(self)",
                            "def _slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None) -> FrameOrSeries:\n    \"\"\"\n    Construct a slice of this container.\n\n    kind parameter is maintained for compatibility with Series slicing.\n    \"\"\"\n    axis = self._get_block_manager_axis(axis)\n    result = self._constructor(self._data.get_slice(slobj, axis=axis))\n    result = result.__finalize__(self)\n    is_copy = axis != 0 or result._is_view\n    result._set_is_copy(self, copy=is_copy)\n    return result",
                            "def _set_item(self, key, value) -> None:\n    self._data.set(key, value)\n    self._clear_item_cache()",
                            "def _set_is_copy(self, ref=None, copy: bool_t=True) -> None:\n    if not copy:\n        self._is_copy = None\n    elif ref is not None:\n        self._is_copy = weakref.ref(ref)\n    else:\n        self._is_copy = None",
                            "def _check_is_chained_assignment_possible(self) -> bool_t:\n    \"\"\"\n    Check if we are a view, have a cacher, and are of mixed type.\n    If so, then force a setitem_copy check.\n\n    Should be called just near setting a value\n\n    Will return a boolean if it we are a view and are cached, but a\n    single-dtype meaning that the cacher should be updated following\n    setting.\n    \"\"\"\n    if self._is_view and self._is_cached:\n        ref = self._get_cacher()\n        if ref is not None and ref._is_mixed_type:\n            self._check_setitem_copy(stacklevel=4, t='referant', force=True)\n        return True\n    elif self._is_copy:\n        self._check_setitem_copy(stacklevel=4, t='referant')\n    return False",
                            "def _check_setitem_copy(self, stacklevel=4, t='setting', force=False):\n    \"\"\"\n\n    Parameters\n    ----------\n    stacklevel : int, default 4\n       the level to show of the stack when the error is output\n    t : str, the type of setting error\n    force : bool, default False\n       If True, then force showing an error.\n\n    validate if we are doing a setitem on a chained copy.\n\n    If you call this function, be sure to set the stacklevel such that the\n    user will see the error *at the level of setting*\n\n    It is technically possible to figure out that we are setting on\n    a copy even WITH a multi-dtyped pandas object. In other words, some\n    blocks may be views while other are not. Currently _is_view will ALWAYS\n    return False for multi-blocks to avoid having to handle this case.\n\n    df = DataFrame(np.arange(0,9), columns=['count'])\n    df['group'] = 'b'\n\n    # This technically need not raise SettingWithCopy if both are view\n    # (which is not # generally guaranteed but is usually True.  However,\n    # this is in general not a good practice and we recommend using .loc.\n    df.iloc[0:5]['group'] = 'a'\n\n    \"\"\"\n    if not (force or self._is_copy):\n        return\n    value = config.get_option('mode.chained_assignment')\n    if value is None:\n        return\n    if self._is_copy is not None and (not isinstance(self._is_copy, str)):\n        r = self._is_copy()\n        if not gc.get_referents(r) or r.shape == self.shape:\n            self._is_copy = None\n            return\n    if isinstance(self._is_copy, str):\n        t = self._is_copy\n    elif t == 'referant':\n        t = '\\nA value is trying to be set on a copy of a slice from a DataFrame\\n\\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy'\n    else:\n        t = '\\nA value is trying to be set on a copy of a slice from a DataFrame.\\nTry using .loc[row_indexer,col_indexer] = value instead\\n\\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy'\n    if value == 'raise':\n        raise com.SettingWithCopyError(t)\n    elif value == 'warn':\n        warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
                            "def __delitem__(self, key) -> None:\n    \"\"\"\n    Delete item\n    \"\"\"\n    deleted = False\n    maybe_shortcut = False\n    if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n        try:\n            maybe_shortcut = key not in self.columns._engine\n        except TypeError:\n            pass\n    if maybe_shortcut:\n        if not isinstance(key, tuple):\n            key = (key,)\n        for col in self.columns:\n            if isinstance(col, tuple) and col[:len(key)] == key:\n                del self[col]\n                deleted = True\n    if not deleted:\n        self._data.delete(key)\n    try:\n        del self._item_cache[key]\n    except KeyError:\n        pass",
                            "def get(self, key, default=None):\n    \"\"\"\n    Get item from object for given key (ex: DataFrame column).\n\n    Returns default value if not found.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    value : same type as items contained in object\n    \"\"\"\n    try:\n        return self[key]\n    except (KeyError, ValueError, IndexError):\n        return default",
                            "@property\ndef _is_view(self):\n    \"\"\"Return boolean indicating if self is view of another array \"\"\"\n    return self._data.is_view",
                            "def reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None) -> FrameOrSeries:\n    \"\"\"\n    Return an object with matching indices as other object.\n\n    Conform the object to the same index on all axes. Optional\n    filling logic, placing NaN in locations having no value\n    in the previous index. A new object is produced unless the\n    new index is equivalent to the current one and copy=False.\n\n    Parameters\n    ----------\n    other : Object of the same data type\n        Its row and column indices are used to define the new indices\n        of this object.\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: propagate last valid observation forward to next\n          valid\n        * backfill / bfill: use next valid observation to fill gap\n        * nearest: use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    limit : int, default None\n        Maximum number of consecutive labels to fill for inexact matches.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as caller, but with changed indices on each axis.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex : Change to new indices or expand indices.\n\n    Notes\n    -----\n    Same as calling\n    ``.reindex(index=other.index, columns=other.columns,...)``.\n\n    Examples\n    --------\n    >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n    ...                     [31, 87.8, 'high'],\n    ...                     [22, 71.6, 'medium'],\n    ...                     [35, 95, 'medium']],\n    ...                    columns=['temp_celsius', 'temp_fahrenheit',\n    ...                             'windspeed'],\n    ...                    index=pd.date_range(start='2014-02-12',\n    ...                                        end='2014-02-15', freq='D'))\n\n    >>> df1\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          24.3             75.7      high\n    2014-02-13          31.0             87.8      high\n    2014-02-14          22.0             71.6    medium\n    2014-02-15          35.0             95.0    medium\n\n    >>> df2 = pd.DataFrame([[28, 'low'],\n    ...                     [30, 'low'],\n    ...                     [35.1, 'medium']],\n    ...                    columns=['temp_celsius', 'windspeed'],\n    ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n    ...                                            '2014-02-15']))\n\n    >>> df2\n                temp_celsius windspeed\n    2014-02-12          28.0       low\n    2014-02-13          30.0       low\n    2014-02-15          35.1    medium\n\n    >>> df2.reindex_like(df1)\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          28.0              NaN       low\n    2014-02-13          30.0              NaN       low\n    2014-02-14           NaN              NaN       NaN\n    2014-02-15          35.1              NaN    medium\n    \"\"\"\n    d = other._construct_axes_dict(axes=self._AXIS_ORDERS, method=method, copy=copy, limit=limit, tolerance=tolerance)\n    return self.reindex(**d)",
                            "def drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise'):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if labels is not None:\n        if index is not None or columns is not None:\n            raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n        axis_name = self._get_axis_name(axis)\n        axes = {axis_name: labels}\n    elif index is not None or columns is not None:\n        axes, _ = self._construct_axes_from_arguments((index, columns), {})\n    else:\n        raise ValueError(\"Need to specify at least one of 'labels', 'index' or 'columns'\")\n    obj = self\n    for axis, labels in axes.items():\n        if labels is not None:\n            obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n    if inplace:\n        self._update_inplace(obj)\n    else:\n        return obj",
                            "def _drop_axis(self: FrameOrSeries, labels, axis, level=None, errors: str='raise') -> FrameOrSeries:\n    \"\"\"\n    Drop labels from specified axis. Used in the ``drop`` method\n    internally.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n    axis : int or axis name\n    level : int or level name, default None\n        For MultiIndex\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    axis = self._get_axis(axis)\n    if axis.is_unique:\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError('axis must be a MultiIndex')\n            new_axis = axis.drop(labels, level=level, errors=errors)\n        else:\n            new_axis = axis.drop(labels, errors=errors)\n        result = self.reindex(**{axis_name: new_axis})\n    else:\n        labels = ensure_object(com.index_labels_to_array(labels))\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError('axis must be a MultiIndex')\n            indexer = ~axis.get_level_values(level).isin(labels)\n            if errors == 'raise' and indexer.all():\n                raise KeyError(f'{labels} not found in axis')\n        else:\n            indexer = ~axis.isin(labels)\n            labels_missing = (axis.get_indexer_for(labels) == -1).any()\n            if errors == 'raise' and labels_missing:\n                raise KeyError(f'{labels} not found in axis')\n        slicer = [slice(None)] * self.ndim\n        slicer[self._get_axis_number(axis_name)] = indexer\n        result = self.loc[tuple(slicer)]\n    return result",
                            "def _update_inplace(self, result, verify_is_copy: bool_t=True) -> None:\n    \"\"\"\n    Replace self internals with result.\n\n    Parameters\n    ----------\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n    self._reset_cache()\n    self._clear_item_cache()\n    self._data = getattr(result, '_data', result)\n    self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
                            "def add_prefix(self: FrameOrSeries, prefix: str) -> FrameOrSeries:\n    \"\"\"\n    Prefix labels with string `prefix`.\n\n    For Series, the row labels are prefixed.\n    For DataFrame, the column labels are prefixed.\n\n    Parameters\n    ----------\n    prefix : str\n        The string to add before each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_suffix: Suffix row labels with string `suffix`.\n    DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_prefix('item_')\n    item_0    1\n    item_1    2\n    item_2    3\n    item_3    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_prefix('col_')\n         col_A  col_B\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial('{prefix}{}'.format, prefix=prefix)\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                            "def add_suffix(self: FrameOrSeries, suffix: str) -> FrameOrSeries:\n    \"\"\"\n    Suffix labels with string `suffix`.\n\n    For Series, the row labels are suffixed.\n    For DataFrame, the column labels are suffixed.\n\n    Parameters\n    ----------\n    suffix : str\n        The string to add after each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_prefix: Prefix row labels with string `prefix`.\n    DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_suffix('_item')\n    0_item    1\n    1_item    2\n    2_item    3\n    3_item    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_suffix('_col')\n         A_col  B_col\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial('{}{suffix}'.format, suffix=suffix)\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                            "def sort_values(self, by=None, axis=0, ascending=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', ignore_index: bool_t=False):\n    \"\"\"\n    Sort by the values along either axis.\n\n    Parameters\n    ----------%(optional_by)s\n    axis : %(axes_single_arg)s, default 0\n         Axis to be sorted.\n    ascending : bool or list of bool, default True\n         Sort ascending vs. descending. Specify list for multiple sort\n         orders.  If this is a list of bools, must match the length of\n         the by.\n    inplace : bool, default False\n         If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n         Choice of sorting algorithm. See also ndarray.np.sort for more\n         information.  `mergesort` is the only stable algorithm. For\n         DataFrames, this option is only applied when sorting on a single\n         column or label.\n    na_position : {'first', 'last'}, default 'last'\n         Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n         end.\n    ignore_index : bool, default False\n         If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n         .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted values if inplace=False, None otherwise.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\n    ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n    ...     'col2': [2, 1, 9, 8, 7, 4],\n    ...     'col3': [0, 1, 9, 4, 2, 3],\n    ... })\n    >>> df\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n\n    Sort by col1\n\n    >>> df.sort_values(by=['col1'])\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort by multiple columns\n\n    >>> df.sort_values(by=['col1', 'col2'])\n        col1 col2 col3\n    1   A    1    1\n    0   A    2    0\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort Descending\n\n    >>> df.sort_values(by='col1', ascending=False)\n        col1 col2 col3\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    3   NaN  8    4\n\n    Putting NAs first\n\n    >>> df.sort_values(by='col1', ascending=False, na_position='first')\n        col1 col2 col3\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    \"\"\"\n    raise AbstractMethodError(self)",
                            "def sort_index(self, axis=0, level=None, ascending: bool_t=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool_t=True, ignore_index: bool_t=False):\n    \"\"\"\n    Sort object by labels (along an axis).\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to sort.  The value 0 identifies the rows,\n        and 1 identifies the columns.\n    level : int or level name or list of ints or list of level names\n        If not None, sort on values in specified index level(s).\n    ascending : bool, default True\n        Sort ascending vs. descending.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also ndarray.np.sort for more\n        information.  `mergesort` is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted index if inplace=False, None otherwise.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    labels = self._get_axis(axis)\n    if level is not None:\n        raise NotImplementedError('level is not implemented')\n    if inplace:\n        raise NotImplementedError('inplace is not implemented')\n    sort_index = labels.argsort()\n    if not ascending:\n        sort_index = sort_index[::-1]\n    new_axis = labels.take(sort_index)\n    return self.reindex(**{axis_name: new_axis})",
                            "def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n    \"\"\"\n    Conform %(klass)s to new index with optional filling logic.\n\n    Places NA/NaN in locations having no value in the previous index. A new object\n    is produced unless the new index is equivalent to the current one and\n    ``copy=False``.\n\n    Parameters\n    ----------\n    %(optional_labels)s\n    %(axes)s : array-like, optional\n        New labels / index to conform to, should be specified using\n        keywords. Preferably an Index object to avoid duplicating data.\n    %(optional_axis)s\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: Propagate last valid observation forward to next\n          valid.\n        * backfill / bfill: Use next valid observation to fill gap.\n        * nearest: Use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    level : int or name\n        Broadcast across a level, matching Index values on the\n        passed MultiIndex level.\n    fill_value : scalar, default np.NaN\n        Value to use for missing values. Defaults to NaN, but can be any\n        \"compatible\" value.\n    limit : int, default None\n        Maximum number of consecutive elements to forward or backward fill.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    %(klass)s with changed index.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n\n    ``DataFrame.reindex`` supports two calling conventions\n\n    * ``(index=index_labels, columns=column_labels, ...)``\n    * ``(labels, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Create a dataframe with some fictional data.\n\n    >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n    >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n    ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n    ...                   index=index)\n    >>> df\n               http_status  response_time\n    Firefox            200           0.04\n    Chrome             200           0.02\n    Safari             404           0.07\n    IE10               404           0.08\n    Konqueror          301           1.00\n\n    Create a new index and reindex the dataframe. By default\n    values in the new index that do not have corresponding\n    records in the dataframe are assigned ``NaN``.\n\n    >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n    ...              'Chrome']\n    >>> df.reindex(new_index)\n                   http_status  response_time\n    Safari               404.0           0.07\n    Iceweasel              NaN            NaN\n    Comodo Dragon          NaN            NaN\n    IE10                 404.0           0.08\n    Chrome               200.0           0.02\n\n    We can fill in the missing values by passing a value to\n    the keyword ``fill_value``. Because the index is not monotonically\n    increasing or decreasing, we cannot use arguments to the keyword\n    ``method`` to fill the ``NaN`` values.\n\n    >>> df.reindex(new_index, fill_value=0)\n                   http_status  response_time\n    Safari                 404           0.07\n    Iceweasel                0           0.00\n    Comodo Dragon            0           0.00\n    IE10                   404           0.08\n    Chrome                 200           0.02\n\n    >>> df.reindex(new_index, fill_value='missing')\n                  http_status response_time\n    Safari                404          0.07\n    Iceweasel         missing       missing\n    Comodo Dragon     missing       missing\n    IE10                  404          0.08\n    Chrome                200          0.02\n\n    We can also reindex the columns.\n\n    >>> df.reindex(columns=['http_status', 'user_agent'])\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    Or we can use \"axis-style\" keyword arguments\n\n    >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    To further illustrate the filling functionality in\n    ``reindex``, we will create a dataframe with a\n    monotonically increasing index (for example, a sequence\n    of dates).\n\n    >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n    >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n    ...                    index=date_index)\n    >>> df2\n                prices\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n\n    Suppose we decide to expand the dataframe to cover a wider\n    date range.\n\n    >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n    >>> df2.reindex(date_index2)\n                prices\n    2009-12-29     NaN\n    2009-12-30     NaN\n    2009-12-31     NaN\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    The index entries that did not have a value in the original data frame\n    (for example, '2009-12-29') are by default filled with ``NaN``.\n    If desired, we can fill in the missing values using one of several\n    options.\n\n    For example, to back-propagate the last valid value to fill the ``NaN``\n    values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n    >>> df2.reindex(date_index2, method='bfill')\n                prices\n    2009-12-29   100.0\n    2009-12-30   100.0\n    2009-12-31   100.0\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    Please note that the ``NaN`` value present in the original dataframe\n    (at index value 2010-01-03) will not be filled by any of the\n    value propagation schemes. This is because filling while reindexing\n    does not look at dataframe values, but only compares the original and\n    desired indexes. If you do want to fill in the ``NaN`` values present\n    in the original dataframe, use the ``fillna()`` method.\n\n    See the :ref:`user guide <basics.reindexing>` for more.\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    method = missing.clean_reindex_fill_method(kwargs.pop('method', None))\n    level = kwargs.pop('level', None)\n    copy = kwargs.pop('copy', True)\n    limit = kwargs.pop('limit', None)\n    tolerance = kwargs.pop('tolerance', None)\n    fill_value = kwargs.pop('fill_value', None)\n    kwargs.pop('axis', None)\n    if kwargs:\n        raise TypeError(f'reindex() got an unexpected keyword argument \"{list(kwargs.keys())[0]}\"')\n    self._consolidate_inplace()\n    if all((self._get_axis(axis).identical(ax) for axis, ax in axes.items() if ax is not None)):\n        if copy:\n            return self.copy()\n        return self\n    if self._needs_reindex_multi(axes, method, level):\n        return self._reindex_multi(axes, copy, fill_value)\n    return self._reindex_axes(axes, level, limit, tolerance, method, fill_value, copy).__finalize__(self)",
                            "def _reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy) -> FrameOrSeries:\n    \"\"\"Perform the reindex for all the axes.\"\"\"\n    obj = self\n    for a in self._AXIS_ORDERS:\n        labels = axes[a]\n        if labels is None:\n            continue\n        ax = self._get_axis(a)\n        new_index, indexer = ax.reindex(labels, level=level, limit=limit, tolerance=tolerance, method=method)\n        axis = self._get_axis_number(a)\n        obj = obj._reindex_with_indexers({axis: [new_index, indexer]}, fill_value=fill_value, copy=copy, allow_dups=False)\n    return obj",
                            "def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n    \"\"\"Check if we do need a multi reindex.\"\"\"\n    return com.count_not_none(*axes.values()) == self._AXIS_LEN and method is None and (level is None) and (not self._is_mixed_type)",
                            "def _reindex_multi(self, axes, copy, fill_value):\n    raise AbstractMethodError(self)",
                            "def _reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False) -> FrameOrSeries:\n    \"\"\"allow_dups indicates an internal call here \"\"\"\n    new_data = self._data\n    for axis in sorted(reindexers.keys()):\n        index, indexer = reindexers[axis]\n        baxis = self._get_block_manager_axis(axis)\n        if index is None:\n            continue\n        index = ensure_index(index)\n        if indexer is not None:\n            indexer = ensure_int64(indexer)\n        new_data = new_data.reindex_indexer(index, indexer, axis=baxis, fill_value=fill_value, allow_dups=allow_dups, copy=copy)\n    if copy and new_data is self._data:\n        new_data = new_data.copy()\n    return self._constructor(new_data).__finalize__(self)",
                            "def filter(self: FrameOrSeries, items=None, like: Optional[str]=None, regex: Optional[str]=None, axis=None) -> FrameOrSeries:\n    \"\"\"\n    Subset the dataframe rows or columns according to the specified index labels.\n\n    Note that this routine does not filter a dataframe on its\n    contents. The filter is applied to the labels of the index.\n\n    Parameters\n    ----------\n    items : list-like\n        Keep labels from axis which are in items.\n    like : str\n        Keep labels from axis for which \"like in label == True\".\n    regex : str (regular expression)\n        Keep labels from axis for which re.search(regex, label) == True.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        The axis to filter on, expressed either as an index (int)\n        or axis name (str). By default this is the info axis,\n        'index' for Series, 'columns' for DataFrame.\n\n    Returns\n    -------\n    same type as input object\n\n    See Also\n    --------\n    DataFrame.loc\n\n    Notes\n    -----\n    The ``items``, ``like``, and ``regex`` parameters are\n    enforced to be mutually exclusive.\n\n    ``axis`` defaults to the info axis that is used when indexing\n    with ``[]``.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n    ...                   index=['mouse', 'rabbit'],\n    ...                   columns=['one', 'two', 'three'])\n\n    >>> # select columns by name\n    >>> df.filter(items=['one', 'three'])\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select columns by regular expression\n    >>> df.filter(regex='e$', axis=1)\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select rows containing 'bbi'\n    >>> df.filter(like='bbi', axis=0)\n             one  two  three\n    rabbit    4    5      6\n    \"\"\"\n    nkw = com.count_not_none(items, like, regex)\n    if nkw > 1:\n        raise TypeError('Keyword arguments `items`, `like`, or `regex` are mutually exclusive')\n    if axis is None:\n        axis = self._info_axis_name\n    labels = self._get_axis(axis)\n    if items is not None:\n        name = self._get_axis_name(axis)\n        return self.reindex(**{name: [r for r in items if r in labels]})\n    elif like:\n\n        def f(x):\n            return like in ensure_str(x)\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    elif regex:\n\n        def f(x):\n            return matcher.search(ensure_str(x)) is not None\n        matcher = re.compile(regex)\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    else:\n        raise TypeError('Must pass either `items`, `like`, or `regex`')",
                            "def head(self: FrameOrSeries, n: int=5) -> FrameOrSeries:\n    \"\"\"\n    Return the first `n` rows.\n\n    This function returns the first `n` rows for the object based\n    on position. It is useful for quickly testing if your object\n    has the right type of data in it.\n\n    For negative values of `n`, this function returns all rows except\n    the last `n` rows, equivalent to ``df[:-n]``.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    same type as caller\n        The first `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.tail: Returns the last `n` rows.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the first 5 lines\n\n    >>> df.head()\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n\n    Viewing the first `n` lines (three in this case)\n\n    >>> df.head(3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n\n    For negative values of `n`\n\n    >>> df.head(-3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    \"\"\"\n    return self.iloc[:n]",
                            "def tail(self: FrameOrSeries, n: int=5) -> FrameOrSeries:\n    \"\"\"\n    Return the last `n` rows.\n\n    This function returns last `n` rows from the object based on\n    position. It is useful for quickly verifying data, for example,\n    after sorting or appending rows.\n\n    For negative values of `n`, this function returns all rows except\n    the first `n` rows, equivalent to ``df[n:]``.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    type of caller\n        The last `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.head : The first `n` rows of the caller object.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the last 5 lines\n\n    >>> df.tail()\n       animal\n    4  monkey\n    5  parrot\n    6   shark\n    7   whale\n    8   zebra\n\n    Viewing the last `n` lines (three in this case)\n\n    >>> df.tail(3)\n      animal\n    6  shark\n    7  whale\n    8  zebra\n\n    For negative values of `n`\n\n    >>> df.tail(-3)\n       animal\n    3    lion\n    4  monkey\n    5  parrot\n    6   shark\n    7   whale\n    8   zebra\n    \"\"\"\n    if n == 0:\n        return self.iloc[0:0]\n    return self.iloc[-n:]",
                            "def sample(self: FrameOrSeries, n=None, frac=None, replace=False, weights=None, random_state=None, axis=None) -> FrameOrSeries:\n    \"\"\"\n    Return a random sample of items from an axis of object.\n\n    You can use `random_state` for reproducibility.\n\n    Parameters\n    ----------\n    n : int, optional\n        Number of items from axis to return. Cannot be used with `frac`.\n        Default = 1 if `frac` = None.\n    frac : float, optional\n        Fraction of axis items to return. Cannot be used with `n`.\n    replace : bool, default False\n        Allow or disallow sampling of the same row more than once.\n    weights : str or ndarray-like, optional\n        Default 'None' results in equal probability weighting.\n        If passed a Series, will align with target object on index. Index\n        values in weights not found in sampled object will be ignored and\n        index values in sampled object not in weights will be assigned\n        weights of zero.\n        If called on a DataFrame, will accept the name of a column\n        when axis = 0.\n        Unless weights are a Series, weights must be same length as axis\n        being sampled.\n        If weights do not sum to 1, they will be normalized to sum to 1.\n        Missing values in the weights column will be treated as zero.\n        Infinite values not allowed.\n    random_state : int or numpy.random.RandomState, optional\n        Seed for the random number generator (if int), or numpy RandomState\n        object.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        Axis to sample. Accepts axis number or name. Default is stat axis\n        for given data type (0 for Series and DataFrames).\n\n    Returns\n    -------\n    Series or DataFrame\n        A new object of same type as caller containing `n` items randomly\n        sampled from the caller object.\n\n    See Also\n    --------\n    numpy.random.choice: Generates a random sample from a given 1-D numpy\n        array.\n\n    Notes\n    -----\n    If `frac` > 1, `replacement` should be set to `True`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n    ...                    'num_wings': [2, 0, 0, 0],\n    ...                    'num_specimen_seen': [10, 2, 1, 8]},\n    ...                   index=['falcon', 'dog', 'spider', 'fish'])\n    >>> df\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    dog            4          0                  2\n    spider         8          0                  1\n    fish           0          0                  8\n\n    Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n    Note that we use `random_state` to ensure the reproducibility of\n    the examples.\n\n    >>> df['num_legs'].sample(n=3, random_state=1)\n    fish      0\n    spider    8\n    falcon    2\n    Name: num_legs, dtype: int64\n\n    A random 50% sample of the ``DataFrame`` with replacement:\n\n    >>> df.sample(frac=0.5, replace=True, random_state=1)\n          num_legs  num_wings  num_specimen_seen\n    dog          4          0                  2\n    fish         0          0                  8\n\n    An upsample sample of the ``DataFrame`` with replacement:\n    Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n    >>> df.sample(frac=2, replace=True, random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    dog            4          0                  2\n    fish           0          0                  8\n    falcon         2          2                 10\n    falcon         2          2                 10\n    fish           0          0                  8\n    dog            4          0                  2\n    fish           0          0                  8\n    dog            4          0                  2\n\n    Using a DataFrame column as weights. Rows with larger value in the\n    `num_specimen_seen` column are more likely to be sampled.\n\n    >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    fish           0          0                  8\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    axis_length = self.shape[axis]\n    rs = com.random_state(random_state)\n    if weights is not None:\n        if isinstance(weights, ABCSeries):\n            weights = weights.reindex(self.axes[axis])\n        if isinstance(weights, str):\n            if isinstance(self, ABCDataFrame):\n                if axis == 0:\n                    try:\n                        weights = self[weights]\n                    except KeyError:\n                        raise KeyError('String passed to weights not a valid column')\n                else:\n                    raise ValueError('Strings can only be passed to weights when sampling from rows on a DataFrame')\n            else:\n                raise ValueError('Strings cannot be passed as weights when sampling from a Series.')\n        weights = pd.Series(weights, dtype='float64')\n        if len(weights) != axis_length:\n            raise ValueError('Weights and axis to be sampled must be of same length')\n        if (weights == np.inf).any() or (weights == -np.inf).any():\n            raise ValueError('weight vector may not include `inf` values')\n        if (weights < 0).any():\n            raise ValueError('weight vector many not include negative values')\n        weights = weights.fillna(0)\n        if weights.sum() != 1:\n            if weights.sum() != 0:\n                weights = weights / weights.sum()\n            else:\n                raise ValueError('Invalid weights: weights sum to zero')\n        weights = weights.values\n    if n is None and frac is None:\n        n = 1\n    elif frac is not None and frac > 1 and (not replace):\n        raise ValueError('Replace has to be set to `True` when upsampling the population `frac` > 1.')\n    elif n is not None and frac is None and (n % 1 != 0):\n        raise ValueError('Only integers accepted as `n` values')\n    elif n is None and frac is not None:\n        n = int(round(frac * axis_length))\n    elif n is not None and frac is not None:\n        raise ValueError('Please enter a value for `frac` OR `n`, not both')\n    if n < 0:\n        raise ValueError('A negative number of rows requested. Please provide positive value.')\n    locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n    return self.take(locs, axis=axis)",
                            "@Appender(_shared_docs['pipe'] % _shared_doc_kwargs)\ndef pipe(self, func, *args, **kwargs):\n    return com.pipe(self, func, *args, **kwargs)",
                            "def __finalize__(self: FrameOrSeries, other, method=None, **kwargs) -> FrameOrSeries:\n    \"\"\"\n    Propagate metadata from other to self.\n\n    Parameters\n    ----------\n    other : the object from which to get the attributes that we are going\n        to propagate\n    method : optional, a passed method name ; possibly to take different\n        types of propagation actions based on this\n\n    \"\"\"\n    if isinstance(other, NDFrame):\n        for name in other.attrs:\n            self.attrs[name] = other.attrs[name]\n        for name in self._metadata:\n            object.__setattr__(self, name, getattr(other, name, None))\n    return self",
                            "def __getattr__(self, name: str):\n    \"\"\"After regular attribute access, try looking up the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n    if name in self._internal_names_set or name in self._metadata or name in self._accessors:\n        return object.__getattribute__(self, name)\n    else:\n        if self._info_axis._can_hold_identifiers_and_holds_name(name):\n            return self[name]\n        return object.__getattribute__(self, name)",
                            "def __setattr__(self, name: str, value) -> None:\n    \"\"\"After regular attribute access, try setting the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n    try:\n        object.__getattribute__(self, name)\n        return object.__setattr__(self, name, value)\n    except AttributeError:\n        pass\n    if name in self._internal_names_set:\n        object.__setattr__(self, name, value)\n    elif name in self._metadata:\n        object.__setattr__(self, name, value)\n    else:\n        try:\n            existing = getattr(self, name)\n            if isinstance(existing, Index):\n                object.__setattr__(self, name, value)\n            elif name in self._info_axis:\n                self[name] = value\n            else:\n                object.__setattr__(self, name, value)\n        except (AttributeError, TypeError):\n            if isinstance(self, ABCDataFrame) and is_list_like(value):\n                warnings.warn(\"Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\", stacklevel=2)\n            object.__setattr__(self, name, value)",
                            "def _dir_additions(self):\n    \"\"\" add the string-like attributes from the info_axis.\n    If info_axis is a MultiIndex, it's first level values are used.\n    \"\"\"\n    additions = {c for c in self._info_axis.unique(level=0)[:100] if isinstance(c, str) and c.isidentifier()}\n    return super()._dir_additions().union(additions)",
                            "def _protect_consolidate(self, f):\n    \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n    cache\n    \"\"\"\n    blocks_before = len(self._data.blocks)\n    result = f()\n    if len(self._data.blocks) != blocks_before:\n        self._clear_item_cache()\n    return result",
                            "def _consolidate_inplace(self) -> None:\n    \"\"\"Consolidate data in place and return None\"\"\"\n\n    def f():\n        self._data = self._data.consolidate()\n    self._protect_consolidate(f)",
                            "def _consolidate(self, inplace: bool_t=False):\n    \"\"\"\n    Compute NDFrame with \"consolidated\" internals (data of each dtype\n    grouped together in a single ndarray).\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        If False return new object, otherwise modify existing object.\n\n    Returns\n    -------\n    consolidated : same type as caller\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if inplace:\n        self._consolidate_inplace()\n    else:\n        f = lambda: self._data.consolidate()\n        cons_data = self._protect_consolidate(f)\n        return self._constructor(cons_data).__finalize__(self)",
                            "@property\ndef _is_mixed_type(self):\n    f = lambda: self._data.is_mixed_type\n    return self._protect_consolidate(f)",
                            "@property\ndef _is_numeric_mixed_type(self):\n    f = lambda: self._data.is_numeric_mixed_type\n    return self._protect_consolidate(f)",
                            "@property\ndef _is_datelike_mixed_type(self):\n    f = lambda: self._data.is_datelike_mixed_type\n    return self._protect_consolidate(f)",
                            "def _check_inplace_setting(self, value) -> bool_t:\n    \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n    if self._is_mixed_type:\n        if not self._is_numeric_mixed_type:\n            if is_float(value) and np.isnan(value):\n                return True\n            raise TypeError('Cannot do inplace boolean setting on mixed-types with a non np.nan value')\n    return True",
                            "def _get_numeric_data(self):\n    return self._constructor(self._data.get_numeric_data()).__finalize__(self)",
                            "def _get_bool_data(self):\n    return self._constructor(self._data.get_bool_data()).__finalize__(self)",
                            "@property\ndef values(self) -> np.ndarray:\n    \"\"\"\n    Return a Numpy representation of the DataFrame.\n\n    .. warning::\n\n       We recommend using :meth:`DataFrame.to_numpy` instead.\n\n    Only the values in the DataFrame will be returned, the axes labels\n    will be removed.\n\n    Returns\n    -------\n    numpy.ndarray\n        The values of the DataFrame.\n\n    See Also\n    --------\n    DataFrame.to_numpy : Recommended alternative to this method.\n    DataFrame.index : Retrieve the index labels.\n    DataFrame.columns : Retrieving the column names.\n\n    Notes\n    -----\n    The dtype will be a lower-common-denominator dtype (implicit\n    upcasting); that is to say if the dtypes (even of numeric types)\n    are mixed, the one that accommodates all will be chosen. Use this\n    with care if you are not dealing with the blocks.\n\n    e.g. If the dtypes are float16 and float32, dtype will be upcast to\n    float32.  If dtypes are int32 and uint8, dtype will be upcast to\n    int32. By :func:`numpy.find_common_type` convention, mixing int64\n    and uint64 will result in a float64 dtype.\n\n    Examples\n    --------\n    A DataFrame where all columns are the same type (e.g., int64) results\n    in an array of the same type.\n\n    >>> df = pd.DataFrame({'age':    [ 3,  29],\n    ...                    'height': [94, 170],\n    ...                    'weight': [31, 115]})\n    >>> df\n       age  height  weight\n    0    3      94      31\n    1   29     170     115\n    >>> df.dtypes\n    age       int64\n    height    int64\n    weight    int64\n    dtype: object\n    >>> df.values\n    array([[  3,  94,  31],\n           [ 29, 170, 115]], dtype=int64)\n\n    A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n    results in an ndarray of the broadest type that accommodates these\n    mixed types (e.g., object).\n\n    >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n    ...                     ('lion',     80.5, 1),\n    ...                     ('monkey', np.nan, None)],\n    ...                   columns=('name', 'max_speed', 'rank'))\n    >>> df2.dtypes\n    name          object\n    max_speed    float64\n    rank          object\n    dtype: object\n    >>> df2.values\n    array([['parrot', 24.0, 'second'],\n           ['lion', 80.5, 1],\n           ['monkey', nan, None]], dtype=object)\n    \"\"\"\n    self._consolidate_inplace()\n    return self._data.as_array(transpose=self._AXIS_REVERSED)",
                            "@property\ndef _values(self) -> np.ndarray:\n    \"\"\"internal implementation\"\"\"\n    return self.values",
                            "@property\ndef _get_values(self) -> np.ndarray:\n    return self.values",
                            "def _internal_get_values(self) -> np.ndarray:\n    \"\"\"\n    Return an ndarray after converting sparse values to dense.\n\n    This is the same as ``.values`` for non-sparse data. For sparse\n    data contained in a `SparseArray`, the data are first\n    converted to a dense representation.\n\n    Returns\n    -------\n    numpy.ndarray\n        Numpy representation of DataFrame.\n\n    See Also\n    --------\n    values : Numpy representation of DataFrame.\n    SparseArray : Container for sparse data.\n    \"\"\"\n    return self.values",
                            "@property\ndef dtypes(self):\n    \"\"\"\n    Return the dtypes in the DataFrame.\n\n    This returns a Series with the data type of each column.\n    The result's index is the original DataFrame's columns. Columns\n    with mixed types are stored with the ``object`` dtype. See\n    :ref:`the User Guide <basics.dtypes>` for more.\n\n    Returns\n    -------\n    pandas.Series\n        The data type of each column.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'float': [1.0],\n    ...                    'int': [1],\n    ...                    'datetime': [pd.Timestamp('20180310')],\n    ...                    'string': ['foo']})\n    >>> df.dtypes\n    float              float64\n    int                  int64\n    datetime    datetime64[ns]\n    string              object\n    dtype: object\n    \"\"\"\n    from pandas import Series\n    return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
                            "def _to_dict_of_blocks(self, copy: bool_t=True):\n    \"\"\"\n    Return a dict of dtype -> Constructor Types that\n    each is a homogeneous dtype.\n\n    Internal ONLY\n    \"\"\"\n    return {k: self._constructor(v).__finalize__(self) for k, v in self._data.to_dict(copy=copy).items()}",
                            "def astype(self: FrameOrSeries, dtype, copy: bool_t=True, errors: str='raise') -> FrameOrSeries:\n    \"\"\"\n    Cast a pandas object to a specified dtype ``dtype``.\n\n    Parameters\n    ----------\n    dtype : data type, or dict of column name -> data type\n        Use a numpy.dtype or Python type to cast entire pandas object to\n        the same type. Alternatively, use {col: dtype, ...}, where col is a\n        column label and dtype is a numpy.dtype or Python type to cast one\n        or more of the DataFrame's columns to column-specific types.\n    copy : bool, default True\n        Return a copy when ``copy=True`` (be very careful setting\n        ``copy=False`` as changes to values then may propagate to other\n        pandas objects).\n    errors : {'raise', 'ignore'}, default 'raise'\n        Control raising of exceptions on invalid data for provided dtype.\n\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object.\n\n    Returns\n    -------\n    casted : same type as caller\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to a numeric type.\n    numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n    Examples\n    --------\n    Create a DataFrame:\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    Cast all columns to int32:\n\n    >>> df.astype('int32').dtypes\n    col1    int32\n    col2    int32\n    dtype: object\n\n    Cast col1 to int32 using a dictionary:\n\n    >>> df.astype({'col1': 'int32'}).dtypes\n    col1    int32\n    col2    int64\n    dtype: object\n\n    Create a series:\n\n    >>> ser = pd.Series([1, 2], dtype='int32')\n    >>> ser\n    0    1\n    1    2\n    dtype: int32\n    >>> ser.astype('int64')\n    0    1\n    1    2\n    dtype: int64\n\n    Convert to categorical type:\n\n    >>> ser.astype('category')\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [1, 2]\n\n    Convert to ordered categorical type with custom ordering:\n\n    >>> cat_dtype = pd.api.types.CategoricalDtype(\n    ...     categories=[2, 1], ordered=True)\n    >>> ser.astype(cat_dtype)\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [2 < 1]\n\n    Note that using ``copy=False`` and changing data on a new\n    pandas object may propagate changes:\n\n    >>> s1 = pd.Series([1, 2])\n    >>> s2 = s1.astype('int64', copy=False)\n    >>> s2[0] = 10\n    >>> s1  # note that s1[0] has changed too\n    0    10\n    1     2\n    dtype: int64\n    \"\"\"\n    if is_dict_like(dtype):\n        if self.ndim == 1:\n            if len(dtype) > 1 or self.name not in dtype:\n                raise KeyError('Only the Series name can be used for the key in Series dtype mappings.')\n            new_type = dtype[self.name]\n            return self.astype(new_type, copy, errors)\n        for col_name in dtype.keys():\n            if col_name not in self:\n                raise KeyError('Only a column name can be used for the key in a dtype mappings argument.')\n        results = []\n        for col_name, col in self.items():\n            if col_name in dtype:\n                results.append(col.astype(dtype=dtype[col_name], copy=copy, errors=errors))\n            else:\n                results.append(col.copy() if copy else col)\n    elif is_extension_array_dtype(dtype) and self.ndim > 1:\n        results = [self.iloc[:, i].astype(dtype, copy=copy) for i in range(len(self.columns))]\n    else:\n        new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n        return self._constructor(new_data).__finalize__(self)\n    result = pd.concat(results, axis=1, copy=False)\n    result.columns = self.columns\n    return result",
                            "def copy(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Make a copy of this object's indices and data.\n\n    When ``deep=True`` (default), a new object will be created with a\n    copy of the calling object's data and indices. Modifications to\n    the data or indices of the copy will not be reflected in the\n    original object (see notes below).\n\n    When ``deep=False``, a new object will be created without copying\n    the calling object's data or index (only references to the data\n    and index are copied). Any changes to the data of the original\n    will be reflected in the shallow copy (and vice versa).\n\n    Parameters\n    ----------\n    deep : bool, default True\n        Make a deep copy, including a copy of the data and the indices.\n        With ``deep=False`` neither the indices nor the data are copied.\n\n    Returns\n    -------\n    copy : Series or DataFrame\n        Object type matches caller.\n\n    Notes\n    -----\n    When ``deep=True``, data is copied but actual Python objects\n    will not be copied recursively, only the reference to the object.\n    This is in contrast to `copy.deepcopy` in the Standard Library,\n    which recursively copies object data (see examples below).\n\n    While ``Index`` objects are copied when ``deep=True``, the underlying\n    numpy array is not copied for performance reasons. Since ``Index`` is\n    immutable, the underlying data can be safely shared and a copy\n    is not needed.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> s\n    a    1\n    b    2\n    dtype: int64\n\n    >>> s_copy = s.copy()\n    >>> s_copy\n    a    1\n    b    2\n    dtype: int64\n\n    **Shallow copy versus default (deep) copy:**\n\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> deep = s.copy()\n    >>> shallow = s.copy(deep=False)\n\n    Shallow copy shares data and index with original.\n\n    >>> s is shallow\n    False\n    >>> s.values is shallow.values and s.index is shallow.index\n    True\n\n    Deep copy has own copy of data and index.\n\n    >>> s is deep\n    False\n    >>> s.values is deep.values or s.index is deep.index\n    False\n\n    Updates to the data shared by shallow copy and original is reflected\n    in both; deep copy remains unchanged.\n\n    >>> s[0] = 3\n    >>> shallow[1] = 4\n    >>> s\n    a    3\n    b    4\n    dtype: int64\n    >>> shallow\n    a    3\n    b    4\n    dtype: int64\n    >>> deep\n    a    1\n    b    2\n    dtype: int64\n\n    Note that when copying an object containing Python objects, a deep copy\n    will copy the data, but will not do so recursively. Updating a nested\n    data object will be reflected in the deep copy.\n\n    >>> s = pd.Series([[1, 2], [3, 4]])\n    >>> deep = s.copy()\n    >>> s[0][0] = 10\n    >>> s\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    >>> deep\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    \"\"\"\n    data = self._data.copy(deep=deep)\n    return self._constructor(data).__finalize__(self)",
                            "def __copy__(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries:\n    return self.copy(deep=deep)",
                            "def __deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries:\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                            "def _convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False, copy: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Attempt to infer better dtype for object columns\n\n    Parameters\n    ----------\n    datetime : bool, default False\n        If True, convert to date where possible.\n    numeric : bool, default False\n        If True, attempt to convert to numbers (including strings), with\n        unconvertible values becoming NaN.\n    timedelta : bool, default False\n        If True, convert to timedelta where possible.\n    coerce : bool, default False\n        If True, force conversion with unconvertible values converted to\n        nulls (NaN or NaT).\n    copy : bool, default True\n        If True, return a copy even if no copy is necessary (e.g. no\n        conversion was done). Note: This is meant for internal use, and\n        should not be confused with inplace.\n\n    Returns\n    -------\n    converted : same as input object\n    \"\"\"\n    validate_bool_kwarg(datetime, 'datetime')\n    validate_bool_kwarg(numeric, 'numeric')\n    validate_bool_kwarg(timedelta, 'timedelta')\n    validate_bool_kwarg(coerce, 'coerce')\n    validate_bool_kwarg(copy, 'copy')\n    return self._constructor(self._data.convert(datetime=datetime, numeric=numeric, timedelta=timedelta, coerce=coerce, copy=copy)).__finalize__(self)",
                            "def infer_objects(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\"\n    Attempt to infer better dtypes for object columns.\n\n    Attempts soft conversion of object-dtyped\n    columns, leaving non-object and unconvertible\n    columns unchanged. The inference rules are the\n    same as during normal Series/DataFrame construction.\n\n    .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    converted : same type as input object\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to numeric type.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n    >>> df = df.iloc[1:]\n    >>> df\n       A\n    1  1\n    2  2\n    3  3\n\n    >>> df.dtypes\n    A    object\n    dtype: object\n\n    >>> df.infer_objects().dtypes\n    A    int64\n    dtype: object\n    \"\"\"\n    return self._constructor(self._data.convert(datetime=True, numeric=False, timedelta=True, coerce=False, copy=True)).__finalize__(self)",
                            "def fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series, or DataFrame\n        Value to use to fill holes (e.g. 0), alternately a\n        dict/Series/DataFrame of values specifying which value to use for\n        each index (for a Series) or column (for a DataFrame).  Values not\n        in the dict/Series/DataFrame will not be filled. This value cannot\n        be a list.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use next valid observation to fill gap.\n    axis : %(axes_single_arg)s\n        Axis along which to fill missing values.\n    inplace : bool, default False\n        If True, fill in-place. Note: this will modify any\n        other views on this object (e.g., a no-copy slice for a column in a\n        DataFrame).\n    limit : int, default None\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled. Must be greater than 0 if not None.\n    downcast : dict, default is None\n        A dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n\n    See Also\n    --------\n    interpolate : Fill NaN values using interpolation.\n    reindex : Conform object to new index.\n    asfreq : Convert TimeSeries to specified frequency.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n    ...                    [3, 4, np.nan, 1],\n    ...                    [np.nan, np.nan, np.nan, 5],\n    ...                    [np.nan, 3, np.nan, 4]],\n    ...                   columns=list('ABCD'))\n    >>> df\n         A    B   C  D\n    0  NaN  2.0 NaN  0\n    1  3.0  4.0 NaN  1\n    2  NaN  NaN NaN  5\n    3  NaN  3.0 NaN  4\n\n    Replace all NaN elements with 0s.\n\n    >>> df.fillna(0)\n        A   B   C   D\n    0   0.0 2.0 0.0 0\n    1   3.0 4.0 0.0 1\n    2   0.0 0.0 0.0 5\n    3   0.0 3.0 0.0 4\n\n    We can also propagate non-null values forward or backward.\n\n    >>> df.fillna(method='ffill')\n        A   B   C   D\n    0   NaN 2.0 NaN 0\n    1   3.0 4.0 NaN 1\n    2   3.0 4.0 NaN 5\n    3   3.0 3.0 NaN 4\n\n    Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n    2, and 3 respectively.\n\n    >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n    >>> df.fillna(value=values)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 2.0 1\n    2   0.0 1.0 2.0 5\n    3   0.0 3.0 2.0 4\n\n    Only replace the first NaN element.\n\n    >>> df.fillna(value=values, limit=1)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 NaN 1\n    2   NaN 1.0 NaN 5\n    3   NaN 3.0 NaN 4\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    value, method = validate_fillna_kwargs(value, method)\n    self._consolidate_inplace()\n    if axis is None:\n        axis = 0\n    axis = self._get_axis_number(axis)\n    if value is None:\n        if self._is_mixed_type and axis == 1:\n            if inplace:\n                raise NotImplementedError()\n            result = self.T.fillna(method=method, limit=limit).T\n            result._data = result._data.downcast()\n            return result\n        new_data = self._data.interpolate(method=method, axis=axis, limit=limit, inplace=inplace, coerce=True, downcast=downcast)\n    else:\n        if len(self._get_axis(axis)) == 0:\n            return self\n        if self.ndim == 1:\n            if isinstance(value, (dict, ABCSeries)):\n                value = create_series_with_explicit_dtype(value, dtype_if_empty=object)\n            elif not is_list_like(value):\n                pass\n            else:\n                raise TypeError(f'\"value\" parameter must be a scalar, dict or Series, but you passed a \"{type(value).__name__}\"')\n            new_data = self._data.fillna(value=value, limit=limit, inplace=inplace, downcast=downcast)\n        elif isinstance(value, (dict, ABCSeries)):\n            if axis == 1:\n                raise NotImplementedError('Currently only can fill with dict/Series column by column')\n            result = self if inplace else self.copy()\n            for k, v in value.items():\n                if k not in result:\n                    continue\n                obj = result[k]\n                obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n            return result if not inplace else None\n        elif not is_list_like(value):\n            new_data = self._data.fillna(value=value, limit=limit, inplace=inplace, downcast=downcast)\n        elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n            new_data = self.where(self.notna(), value)\n        else:\n            raise ValueError(f'invalid fill value with a {type(value)}')\n    if inplace:\n        self._update_inplace(new_data)\n        return None\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "def ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(method='ffill', axis=axis, inplace=inplace, limit=limit, downcast=downcast)",
                            "def bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(method='bfill', axis=axis, inplace=inplace, limit=limit, downcast=downcast)",
                            "@Appender(_shared_docs['replace'] % _shared_doc_kwargs)\ndef replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad'):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    if not is_bool(regex) and to_replace is not None:\n        raise AssertionError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n    self._consolidate_inplace()\n    if value is None:\n        if not is_dict_like(to_replace) and (not is_dict_like(regex)):\n            to_replace = [to_replace]\n        if isinstance(to_replace, (tuple, list)):\n            if isinstance(self, ABCDataFrame):\n                return self.apply(_single_replace, args=(to_replace, method, inplace, limit))\n            return _single_replace(self, to_replace, method, inplace, limit)\n        if not is_dict_like(to_replace):\n            if not is_dict_like(regex):\n                raise TypeError('If \"to_replace\" and \"value\" are both None and \"to_replace\" is not a list, then regex must be a mapping')\n            to_replace = regex\n            regex = True\n        items = list(to_replace.items())\n        keys, values = zip(*items) if items else ([], [])\n        are_mappings = [is_dict_like(v) for v in values]\n        if any(are_mappings):\n            if not all(are_mappings):\n                raise TypeError('If a nested mapping is passed, all values of the top level mapping must be mappings')\n            to_rep_dict = {}\n            value_dict = {}\n            for k, v in items:\n                keys, values = list(zip(*v.items())) or ([], [])\n                to_rep_dict[k] = list(keys)\n                value_dict[k] = list(values)\n            to_replace, value = (to_rep_dict, value_dict)\n        else:\n            to_replace, value = (keys, values)\n        return self.replace(to_replace, value, inplace=inplace, limit=limit, regex=regex)\n    else:\n        if not self.size:\n            return self\n        new_data = self._data\n        if is_dict_like(to_replace):\n            if is_dict_like(value):\n                res = self if inplace else self.copy()\n                for c, src in to_replace.items():\n                    if c in value and c in self:\n                        res[c] = res[c].replace(to_replace=src, value=value[c], inplace=False, regex=regex)\n                return None if inplace else res\n            elif not is_list_like(value):\n                keys = [(k, src) for k, src in to_replace.items() if k in self]\n                keys_len = len(keys) - 1\n                for i, (k, src) in enumerate(keys):\n                    convert = i == keys_len\n                    new_data = new_data.replace(to_replace=src, value=value, filter=[k], inplace=inplace, regex=regex, convert=convert)\n            else:\n                raise TypeError('value argument must be scalar, dict, or Series')\n        elif is_list_like(to_replace):\n            if is_list_like(value):\n                if len(to_replace) != len(value):\n                    raise ValueError(f'Replacement lists must match in length. Expecting {len(to_replace)} got {len(value)} ')\n                new_data = self._data.replace_list(src_list=to_replace, dest_list=value, inplace=inplace, regex=regex)\n            else:\n                new_data = self._data.replace(to_replace=to_replace, value=value, inplace=inplace, regex=regex)\n        elif to_replace is None:\n            if not (is_re_compilable(regex) or is_list_like(regex) or is_dict_like(regex)):\n                raise TypeError(f\"'regex' must be a string or a compiled regular expression or a list or dict of strings or regular expressions, you passed a {repr(type(regex).__name__)}\")\n            return self.replace(regex, value, inplace=inplace, limit=limit, regex=True)\n        elif is_dict_like(value):\n            new_data = self._data\n            for k, v in value.items():\n                if k in self:\n                    new_data = new_data.replace(to_replace=to_replace, value=v, filter=[k], inplace=inplace, regex=regex)\n        elif not is_list_like(value):\n            new_data = self._data.replace(to_replace=to_replace, value=value, inplace=inplace, regex=regex)\n        else:\n            raise TypeError(f'Invalid \"to_replace\" type: {repr(type(to_replace).__name__)}')\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                            "@Appender(_shared_docs['interpolate'] % _shared_doc_kwargs)\ndef interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs):\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = self._get_axis_number(axis)\n    if axis == 0:\n        ax = self._info_axis_name\n        _maybe_transposed_self = self\n    elif axis == 1:\n        _maybe_transposed_self = self.T\n        ax = 1\n    ax = _maybe_transposed_self._get_axis_number(ax)\n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n    if isinstance(_maybe_transposed_self.index, MultiIndex) and method != 'linear':\n        raise ValueError('Only `method=linear` interpolation is supported on MultiIndexes.')\n    if _maybe_transposed_self._data.get_dtype_counts().get('object') == len(_maybe_transposed_self.T):\n        raise TypeError('Cannot interpolate with all object-dtype columns in the DataFrame. Try setting at least one column to a numeric dtype.')\n    if method == 'linear':\n        index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n    else:\n        index = _maybe_transposed_self._get_axis(alt_ax)\n        methods = {'index', 'values', 'nearest', 'time'}\n        is_numeric_or_datetime = is_numeric_dtype(index) or is_datetime64_any_dtype(index) or is_timedelta64_dtype(index)\n        if method not in methods and (not is_numeric_or_datetime):\n            raise ValueError(f'Index column must be numeric or datetime type when using {method} method other than linear. Try setting a numeric or datetime index column before interpolating.')\n    if isna(index).any():\n        raise NotImplementedError('Interpolation with NaNs in the index has not been implemented. Try filling those NaNs before interpolating.')\n    data = _maybe_transposed_self._data\n    new_data = data.interpolate(method=method, axis=ax, index=index, values=_maybe_transposed_self, limit=limit, limit_direction=limit_direction, limit_area=limit_area, inplace=inplace, downcast=downcast, **kwargs)\n    if inplace:\n        if axis == 1:\n            new_data = self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis == 1:\n            res = res.T\n        return res",
                            "def asof(self, where, subset=None):\n    \"\"\"\n    Return the last row(s) without any NaNs before `where`.\n\n    The last row (for each element in `where`, if list) without any\n    NaN is taken.\n    In case of a :class:`~pandas.DataFrame`, the last row without NaN\n    considering only the subset of columns (if not `None`)\n\n    If there is no good value, NaN is returned for a Series or\n    a Series of NaN values for a DataFrame\n\n    Parameters\n    ----------\n    where : date or array-like of dates\n        Date(s) before which the last row(s) are returned.\n    subset : str or array-like of str, default `None`\n        For DataFrame, if not `None`, only use these columns to\n        check for NaNs.\n\n    Returns\n    -------\n    scalar, Series, or DataFrame\n\n        The return can be:\n\n        * scalar : when `self` is a Series and `where` is a scalar\n        * Series: when `self` is a Series and `where` is an array-like,\n          or when `self` is a DataFrame and `where` is a scalar\n        * DataFrame : when `self` is a DataFrame and `where` is an\n          array-like\n\n        Return scalar, Series, or DataFrame.\n\n    See Also\n    --------\n    merge_asof : Perform an asof merge. Similar to left join.\n\n    Notes\n    -----\n    Dates are assumed to be sorted. Raises if this is not the case.\n\n    Examples\n    --------\n    A Series and a scalar `where`.\n\n    >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n    >>> s\n    10    1.0\n    20    2.0\n    30    NaN\n    40    4.0\n    dtype: float64\n\n    >>> s.asof(20)\n    2.0\n\n    For a sequence `where`, a Series is returned. The first value is\n    NaN, because the first element of `where` is before the first\n    index value.\n\n    >>> s.asof([5, 20])\n    5     NaN\n    20    2.0\n    dtype: float64\n\n    Missing values are not considered. The following is ``2.0``, not\n    NaN, even though NaN is at the index location for ``30``.\n\n    >>> s.asof(30)\n    2.0\n\n    Take all columns into consideration\n\n    >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n    ...                    'b': [None, None, None, None, 500]},\n    ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n    ...                                           '2018-02-27 09:02:00',\n    ...                                           '2018-02-27 09:03:00',\n    ...                                           '2018-02-27 09:04:00',\n    ...                                           '2018-02-27 09:05:00']))\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']))\n                          a   b\n    2018-02-27 09:03:30 NaN NaN\n    2018-02-27 09:04:30 NaN NaN\n\n    Take a single column into consideration\n\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']),\n    ...         subset=['a'])\n                             a   b\n    2018-02-27 09:03:30   30.0 NaN\n    2018-02-27 09:04:30   40.0 NaN\n    \"\"\"\n    if isinstance(where, str):\n        where = Timestamp(where)\n    if not self.index.is_monotonic:\n        raise ValueError('asof requires a sorted index')\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if subset is not None:\n            raise ValueError('subset is not valid for Series')\n    else:\n        if subset is None:\n            subset = self.columns\n        if not is_list_like(subset):\n            subset = [subset]\n    is_list = is_list_like(where)\n    if not is_list:\n        start = self.index[0]\n        if isinstance(self.index, PeriodIndex):\n            where = Period(where, freq=self.index.freq).ordinal\n            start = start.ordinal\n        if where < start:\n            if not is_series:\n                from pandas import Series\n                return Series(index=self.columns, name=where, dtype=np.float64)\n            return np.nan\n        if is_series:\n            loc = self.index.searchsorted(where, side='right')\n            if loc > 0:\n                loc -= 1\n            values = self._values\n            while loc > 0 and isna(values[loc]):\n                loc -= 1\n            return values[loc]\n    if not isinstance(where, Index):\n        where = Index(where) if is_list else Index([where])\n    nulls = self.isna() if is_series else self[subset].isna().any(1)\n    if nulls.all():\n        if is_series:\n            return self._constructor(np.nan, index=where, name=self.name)\n        elif is_list:\n            from pandas import DataFrame\n            return DataFrame(np.nan, index=where, columns=self.columns)\n        else:\n            from pandas import Series\n            return Series(np.nan, index=self.columns, name=where[0])\n    locs = self.index.asof_locs(where, ~nulls.values)\n    missing = locs == -1\n    d = self.take(locs)\n    data = d.copy()\n    data.index = where\n    data.loc[missing] = np.nan\n    return data if is_list else data.iloc[-1]",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isna(self: FrameOrSeries) -> FrameOrSeries:\n    return isna(self).__finalize__(self)",
                            "@Appender(_shared_docs['isna'] % _shared_doc_kwargs)\ndef isnull(self: FrameOrSeries) -> FrameOrSeries:\n    return isna(self).__finalize__(self)",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notna(self: FrameOrSeries) -> FrameOrSeries:\n    return notna(self).__finalize__(self)",
                            "@Appender(_shared_docs['notna'] % _shared_doc_kwargs)\ndef notnull(self: FrameOrSeries) -> FrameOrSeries:\n    return notna(self).__finalize__(self)",
                            "def _clip_with_scalar(self, lower, upper, inplace: bool_t=False):\n    if lower is not None and np.any(isna(lower)) or (upper is not None and np.any(isna(upper))):\n        raise ValueError('Cannot use an NA value as a clip threshold')\n    result = self\n    mask = isna(self.values)\n    with np.errstate(all='ignore'):\n        if upper is not None:\n            subset = self.to_numpy() <= upper\n            result = result.where(subset, upper, axis=None, inplace=False)\n        if lower is not None:\n            subset = self.to_numpy() >= lower\n            result = result.where(subset, lower, axis=None, inplace=False)\n    if np.any(mask):\n        result[mask] = np.nan\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                            "def _clip_with_one_bound(self, threshold, method, axis, inplace):\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if is_scalar(threshold) and is_number(threshold):\n        if method.__name__ == 'le':\n            return self._clip_with_scalar(None, threshold, inplace=inplace)\n        return self._clip_with_scalar(threshold, None, inplace=inplace)\n    subset = method(threshold, axis=axis) | isna(self)\n    if not isinstance(threshold, ABCSeries) and is_list_like(threshold):\n        if isinstance(self, ABCSeries):\n            threshold = self._constructor(threshold, index=self.index)\n        else:\n            threshold = _align_method_FRAME(self, threshold, axis)\n    return self.where(subset, threshold, axis=axis, inplace=inplace)",
                            "def clip(self: FrameOrSeries, lower=None, upper=None, axis=None, inplace: bool_t=False, *args, **kwargs) -> FrameOrSeries:\n    \"\"\"\n    Trim values at input threshold(s).\n\n    Assigns values outside boundary to boundary values. Thresholds\n    can be singular values or array like, and in the latter case\n    the clipping is performed element-wise in the specified axis.\n\n    Parameters\n    ----------\n    lower : float or array_like, default None\n        Minimum threshold value. All values below this\n        threshold will be set to it.\n    upper : float or array_like, default None\n        Maximum threshold value. All values above this\n        threshold will be set to it.\n    axis : int or str axis name, optional\n        Align object with lower and upper along the given axis.\n    inplace : bool, default False\n        Whether to perform the operation in place on the data.\n\n        .. versionadded:: 0.21.0\n    *args, **kwargs\n        Additional keywords have no effect but might be accepted\n        for compatibility with numpy.\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as calling object with the values outside the\n        clip boundaries replaced.\n\n    Examples\n    --------\n    >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n    >>> df = pd.DataFrame(data)\n    >>> df\n       col_0  col_1\n    0      9     -2\n    1     -3     -7\n    2      0      6\n    3     -1      8\n    4      5     -5\n\n    Clips per column using lower and upper thresholds:\n\n    >>> df.clip(-4, 6)\n       col_0  col_1\n    0      6     -2\n    1     -3     -4\n    2      0      6\n    3     -1      6\n    4      5     -4\n\n    Clips using specific lower and upper thresholds per column element:\n\n    >>> t = pd.Series([2, -4, -1, 6, 3])\n    >>> t\n    0    2\n    1   -4\n    2   -1\n    3    6\n    4    3\n    dtype: int64\n\n    >>> df.clip(t, t + 4, axis=0)\n       col_0  col_1\n    0      6      2\n    1     -3     -4\n    2      0      3\n    3      6      8\n    4      5      3\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    axis = nv.validate_clip_with_axis(axis, args, kwargs)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if not is_list_like(lower) and np.any(isna(lower)):\n        lower = None\n    if not is_list_like(upper) and np.any(isna(upper)):\n        upper = None\n    if lower is not None and upper is not None:\n        if is_scalar(lower) and is_scalar(upper):\n            lower, upper = (min(lower, upper), max(lower, upper))\n    if (lower is None or (is_scalar(lower) and is_number(lower))) and (upper is None or (is_scalar(upper) and is_number(upper))):\n        return self._clip_with_scalar(lower, upper, inplace=inplace)\n    result = self\n    if lower is not None:\n        result = result._clip_with_one_bound(lower, method=self.ge, axis=axis, inplace=inplace)\n    if upper is not None:\n        if inplace:\n            result = self\n        result = result._clip_with_one_bound(upper, method=self.le, axis=axis, inplace=inplace)\n    return result",
                            "def asfreq(self: FrameOrSeries, freq, method=None, how: Optional[str]=None, normalize: bool_t=False, fill_value=None) -> FrameOrSeries:\n    \"\"\"\n    Convert TimeSeries to specified frequency.\n\n    Optionally provide filling method to pad/backfill missing values.\n\n    Returns the original data conformed to a new index with the specified\n    frequency. ``resample`` is more appropriate if an operation, such as\n    summarization, is necessary to represent the data at the new frequency.\n\n    Parameters\n    ----------\n    freq : DateOffset or str\n    method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n        Method to use for filling holes in reindexed Series (note this\n        does not fill NaNs that already were present):\n\n        * 'pad' / 'ffill': propagate last valid observation forward to next\n          valid\n        * 'backfill' / 'bfill': use NEXT valid observation to fill.\n    how : {'start', 'end'}, default end\n        For PeriodIndex only (see PeriodIndex.asfreq).\n    normalize : bool, default False\n        Whether to reset output index to midnight.\n    fill_value : scalar, optional\n        Value to use for missing values, applied during upsampling (note\n        this does not fill NaNs that already were present).\n\n    Returns\n    -------\n    converted : same type as caller\n\n    See Also\n    --------\n    reindex\n\n    Notes\n    -----\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 4 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n    >>> df = pd.DataFrame({'s':series})\n    >>> df\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample the series into 30 second bins.\n\n    >>> df.asfreq(freq='30S')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    NaN\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``fill value``.\n\n    >>> df.asfreq(freq='30S', fill_value=9.0)\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    9.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    9.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    9.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``method``.\n\n    >>> df.asfreq(freq='30S', method='bfill')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    2.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    3.0\n    2000-01-01 00:03:00    3.0\n    \"\"\"\n    from pandas.core.resample import asfreq\n    return asfreq(self, freq, method=method, how=how, normalize=normalize, fill_value=fill_value)",
                            "def at_time(self: FrameOrSeries, time, asof: bool_t=False, axis=None) -> FrameOrSeries:\n    \"\"\"\n    Select values at particular time of day (e.g. 9:30AM).\n\n    Parameters\n    ----------\n    time : datetime.time or str\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    between_time : Select values between particular times of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_at_time : Get just the index locations for\n        values at particular time of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-09 12:00:00  2\n    2018-04-10 00:00:00  3\n    2018-04-10 12:00:00  4\n\n    >>> ts.at_time('12:00')\n                         A\n    2018-04-09 12:00:00  2\n    2018-04-10 12:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_at_time(time, asof=asof)\n    except AttributeError:\n        raise TypeError('Index must be DatetimeIndex')\n    return self.take(indexer, axis=axis)",
                            "def between_time(self: FrameOrSeries, start_time, end_time, include_start: bool_t=True, include_end: bool_t=True, axis=None) -> FrameOrSeries:\n    \"\"\"\n    Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n    By setting ``start_time`` to be later than ``end_time``,\n    you can get the times that are *not* between the two times.\n\n    Parameters\n    ----------\n    start_time : datetime.time or str\n    end_time : datetime.time or str\n    include_start : bool, default True\n    include_end : bool, default True\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    at_time : Select values at a particular time of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_between_time : Get just the index locations for\n        values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n    2018-04-12 01:00:00  4\n\n    >>> ts.between_time('0:15', '0:45')\n                         A\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n\n    You get the times that are *not* between two times by setting\n    ``start_time`` later than ``end_time``:\n\n    >>> ts.between_time('0:45', '0:15')\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-12 01:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_between_time(start_time, end_time, include_start=include_start, include_end=include_end)\n    except AttributeError:\n        raise TypeError('Index must be DatetimeIndex')\n    return self.take(indexer, axis=axis)",
                            "def resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: int=0, on=None, level=None):\n    \"\"\"\n    Resample time-series data.\n\n    Convenience method for frequency conversion and resampling of time\n    series. Object must have a datetime-like index (`DatetimeIndex`,\n    `PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\n    to the `on` or `level` keyword.\n\n    Parameters\n    ----------\n    rule : DateOffset, Timedelta or str\n        The offset string or object representing target conversion.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Which axis to use for up- or down-sampling. For `Series` this\n        will default to 0, i.e. along the rows. Must be\n        `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    label : {'right', 'left'}, default None\n        Which bin edge label to label bucket with. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    convention : {'start', 'end', 's', 'e'}, default 'start'\n        For `PeriodIndex` only, controls whether to use the start or\n        end of `rule`.\n    kind : {'timestamp', 'period'}, optional, default None\n        Pass 'timestamp' to convert the resulting index to a\n        `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n        By default the input representation is retained.\n    loffset : timedelta, default None\n        Adjust the resampled time labels.\n    base : int, default 0\n        For frequencies that evenly subdivide 1 day, the \"origin\" of the\n        aggregated intervals. For example, for '5min' frequency, base could\n        range from 0 through 4. Defaults to 0.\n    on : str, optional\n        For a DataFrame, column to use instead of index for resampling.\n        Column must be datetime-like.\n\n    level : str or int, optional\n        For a MultiIndex, level (name or number) to use for\n        resampling. `level` must be datetime-like.\n\n    Returns\n    -------\n    Resampler object\n\n    See Also\n    --------\n    groupby : Group by mapping, function, label, or list of labels.\n    Series.resample : Resample a Series.\n    DataFrame.resample: Resample a DataFrame.\n\n    Notes\n    -----\n    See the `user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\n    for more.\n\n    To learn more about the offset strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 9 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n    >>> series = pd.Series(range(9), index=index)\n    >>> series\n    2000-01-01 00:00:00    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:02:00    2\n    2000-01-01 00:03:00    3\n    2000-01-01 00:04:00    4\n    2000-01-01 00:05:00    5\n    2000-01-01 00:06:00    6\n    2000-01-01 00:07:00    7\n    2000-01-01 00:08:00    8\n    Freq: T, dtype: int64\n\n    Downsample the series into 3 minute bins and sum the values\n    of the timestamps falling into a bin.\n\n    >>> series.resample('3T').sum()\n    2000-01-01 00:00:00     3\n    2000-01-01 00:03:00    12\n    2000-01-01 00:06:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but label each\n    bin using the right edge instead of the left. Please note that the\n    value in the bucket used as the label is not included in the bucket,\n    which it labels. For example, in the original series the\n    bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n    value in the resampled bucket with the label ``2000-01-01 00:03:00``\n    does not include 3 (if it did, the summed value would be 6, not 3).\n    To include this value close the right side of the bin interval as\n    illustrated in the example below this one.\n\n    >>> series.resample('3T', label='right').sum()\n    2000-01-01 00:03:00     3\n    2000-01-01 00:06:00    12\n    2000-01-01 00:09:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> series.resample('3T', label='right', closed='right').sum()\n    2000-01-01 00:00:00     0\n    2000-01-01 00:03:00     6\n    2000-01-01 00:06:00    15\n    2000-01-01 00:09:00    15\n    Freq: 3T, dtype: int64\n\n    Upsample the series into 30 second bins.\n\n    >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n    2000-01-01 00:00:00   0.0\n    2000-01-01 00:00:30   NaN\n    2000-01-01 00:01:00   1.0\n    2000-01-01 00:01:30   NaN\n    2000-01-01 00:02:00   2.0\n    Freq: 30S, dtype: float64\n\n    Upsample the series into 30 second bins and fill the ``NaN``\n    values using the ``pad`` method.\n\n    >>> series.resample('30S').pad()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    1\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Upsample the series into 30 second bins and fill the\n    ``NaN`` values using the ``bfill`` method.\n\n    >>> series.resample('30S').bfill()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    1\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    2\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Pass a custom function via ``apply``\n\n    >>> def custom_resampler(array_like):\n    ...     return np.sum(array_like) + 5\n    ...\n    >>> series.resample('3T').apply(custom_resampler)\n    2000-01-01 00:00:00     8\n    2000-01-01 00:03:00    17\n    2000-01-01 00:06:00    26\n    Freq: 3T, dtype: int64\n\n    For a Series with a PeriodIndex, the keyword `convention` can be\n    used to control whether to use the start or end of `rule`.\n\n    Resample a year by quarter using 'start' `convention`. Values are\n    assigned to the first quarter of the period.\n\n    >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n    ...                                             freq='A',\n    ...                                             periods=2))\n    >>> s\n    2012    1\n    2013    2\n    Freq: A-DEC, dtype: int64\n    >>> s.resample('Q', convention='start').asfreq()\n    2012Q1    1.0\n    2012Q2    NaN\n    2012Q3    NaN\n    2012Q4    NaN\n    2013Q1    2.0\n    2013Q2    NaN\n    2013Q3    NaN\n    2013Q4    NaN\n    Freq: Q-DEC, dtype: float64\n\n    Resample quarters by month using 'end' `convention`. Values are\n    assigned to the last month of the period.\n\n    >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n    ...                                                   freq='Q',\n    ...                                                   periods=4))\n    >>> q\n    2018Q1    1\n    2018Q2    2\n    2018Q3    3\n    2018Q4    4\n    Freq: Q-DEC, dtype: int64\n    >>> q.resample('M', convention='end').asfreq()\n    2018-03    1.0\n    2018-04    NaN\n    2018-05    NaN\n    2018-06    2.0\n    2018-07    NaN\n    2018-08    NaN\n    2018-09    3.0\n    2018-10    NaN\n    2018-11    NaN\n    2018-12    4.0\n    Freq: M, dtype: float64\n\n    For DataFrame objects, the keyword `on` can be used to specify the\n    column instead of the index for resampling.\n\n    >>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df = pd.DataFrame(d)\n    >>> df['week_starting'] = pd.date_range('01/01/2018',\n    ...                                     periods=8,\n    ...                                     freq='W')\n    >>> df\n       price  volume week_starting\n    0     10      50    2018-01-07\n    1     11      60    2018-01-14\n    2      9      40    2018-01-21\n    3     13     100    2018-01-28\n    4     14      50    2018-02-04\n    5     18     100    2018-02-11\n    6     17      40    2018-02-18\n    7     19      50    2018-02-25\n    >>> df.resample('M', on='week_starting').mean()\n                   price  volume\n    week_starting\n    2018-01-31     10.75    62.5\n    2018-02-28     17.00    60.0\n\n    For a DataFrame with MultiIndex, the keyword `level` can be used to\n    specify on which level the resampling needs to take place.\n\n    >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n    >>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df2 = pd.DataFrame(d2,\n    ...                    index=pd.MultiIndex.from_product([days,\n    ...                                                     ['morning',\n    ...                                                      'afternoon']]\n    ...                                                     ))\n    >>> df2\n                          price  volume\n    2000-01-01 morning       10      50\n               afternoon     11      60\n    2000-01-02 morning        9      40\n               afternoon     13     100\n    2000-01-03 morning       14      50\n               afternoon     18     100\n    2000-01-04 morning       17      40\n               afternoon     19      50\n    >>> df2.resample('D', level=0).sum()\n                price  volume\n    2000-01-01     21     110\n    2000-01-02     22     140\n    2000-01-03     32     150\n    2000-01-04     36      90\n    \"\"\"\n    from pandas.core.resample import resample\n    axis = self._get_axis_number(axis)\n    return resample(self, freq=rule, label=label, closed=closed, axis=axis, kind=kind, loffset=loffset, convention=convention, base=base, key=on, level=level)",
                            "def first(self: FrameOrSeries, offset) -> FrameOrSeries:\n    \"\"\"\n    Method to subset initial periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    last : Select final periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the first 3 days:\n\n    >>> ts.first('3D')\n                A\n    2018-04-09  1\n    2018-04-11  2\n\n    Notice the data for 3 first calender days were returned, not the first\n    3 days observed in the dataset, and therefore data for 2018-04-13 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'first' only supports a DatetimeIndex index\")\n    if len(self.index) == 0:\n        return self\n    offset = to_offset(offset)\n    end_date = end = self.index[0] + offset\n    if not offset.is_anchored() and hasattr(offset, '_inc'):\n        if end_date in self.index:\n            end = self.index.searchsorted(end_date, side='left')\n            return self.iloc[:end]\n    return self.loc[:end]",
                            "def last(self: FrameOrSeries, offset) -> FrameOrSeries:\n    \"\"\"\n    Method to subset final periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    first : Select initial periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the last 3 days:\n\n    >>> ts.last('3D')\n                A\n    2018-04-13  3\n    2018-04-15  4\n\n    Notice the data for 3 last calender days were returned, not the last\n    3 observed days in the dataset, and therefore data for 2018-04-11 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'last' only supports a DatetimeIndex index\")\n    if len(self.index) == 0:\n        return self\n    offset = to_offset(offset)\n    start_date = self.index[-1] - offset\n    start = self.index.searchsorted(start_date, side='right')\n    return self.iloc[start:]",
                            "def rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False) -> FrameOrSeries:\n    \"\"\"\n    Compute numerical data ranks (1 through n) along axis.\n\n    By default, equal values are assigned a rank that is the average of the\n    ranks of those values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Index to direct ranking.\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        How to rank the group of records that have the same value (i.e. ties):\n\n        * average: average rank of the group\n        * min: lowest rank in the group\n        * max: highest rank in the group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups.\n\n    numeric_only : bool, optional\n        For DataFrame objects, rank only numeric columns if set to True.\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        How to rank NaN values:\n\n        * keep: assign NaN rank to NaN values\n        * top: assign smallest rank to NaN values if ascending\n        * bottom: assign highest rank to NaN values if ascending.\n\n    ascending : bool, default True\n        Whether or not the elements should be ranked in ascending order.\n    pct : bool, default False\n        Whether or not to display the returned rankings in percentile\n        form.\n\n    Returns\n    -------\n    same type as caller\n        Return a Series or DataFrame with data ranks as values.\n\n    See Also\n    --------\n    core.groupby.GroupBy.rank : Rank of values within each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n    ...                                    'spider', 'snake'],\n    ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n    >>> df\n        Animal  Number_legs\n    0      cat          4.0\n    1  penguin          2.0\n    2      dog          4.0\n    3   spider          8.0\n    4    snake          NaN\n\n    The following example shows how the method behaves with the above\n    parameters:\n\n    * default_rank: this is the default behaviour obtained without using\n      any parameter.\n    * max_rank: setting ``method = 'max'`` the records that have the\n      same values are ranked using the highest rank (e.g.: since 'cat'\n      and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n    * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n      with NaN values they are placed at the bottom of the ranking.\n    * pct_rank: when setting ``pct = True``, the ranking is expressed as\n      percentile rank.\n\n    >>> df['default_rank'] = df['Number_legs'].rank()\n    >>> df['max_rank'] = df['Number_legs'].rank(method='max')\n    >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n    >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n    >>> df\n        Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n    0      cat          4.0           2.5       3.0        2.5     0.625\n    1  penguin          2.0           1.0       1.0        1.0     0.250\n    2      dog          4.0           2.5       3.0        2.5     0.625\n    3   spider          8.0           4.0       4.0        4.0     1.000\n    4    snake          NaN           NaN       NaN        5.0       NaN\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    if na_option not in {'keep', 'top', 'bottom'}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n\n    def ranker(data):\n        ranks = algos.rank(data.values, axis=axis, method=method, ascending=ascending, na_option=na_option, pct=pct)\n        ranks = self._constructor(ranks, **data._construct_axes_dict())\n        return ranks.__finalize__(self)\n    if numeric_only is None:\n        try:\n            return ranker(self)\n        except TypeError:\n            numeric_only = True\n    if numeric_only:\n        data = self._get_numeric_data()\n    else:\n        data = self\n    return ranker(data)",
                            "@Appender(_shared_docs['align'] % _shared_doc_kwargs)\ndef align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None):\n    method = missing.clean_fill_method(method)\n    if broadcast_axis == 1 and self.ndim != other.ndim:\n        if isinstance(self, ABCSeries):\n            cons = self._constructor_expanddim\n            df = cons({c: self for c in other.columns}, **other._construct_axes_dict())\n            return df._align_frame(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n        elif isinstance(other, ABCSeries):\n            cons = other._constructor_expanddim\n            df = cons({c: other for c in self.columns}, **self._construct_axes_dict())\n            return self._align_frame(df, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if isinstance(other, ABCDataFrame):\n        return self._align_frame(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n    elif isinstance(other, ABCSeries):\n        return self._align_series(other, join=join, axis=axis, level=level, copy=copy, fill_value=fill_value, method=method, limit=limit, fill_axis=fill_axis)\n    else:\n        raise TypeError(f'unsupported type: {type(other)}')",
                            "def _align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0):\n    join_index, join_columns = (None, None)\n    ilidx, iridx = (None, None)\n    clidx, cridx = (None, None)\n    is_series = isinstance(self, ABCSeries)\n    if axis is None or axis == 0:\n        if not self.index.equals(other.index):\n            join_index, ilidx, iridx = self.index.join(other.index, how=join, level=level, return_indexers=True)\n    if axis is None or axis == 1:\n        if not is_series and (not self.columns.equals(other.columns)):\n            join_columns, clidx, cridx = self.columns.join(other.columns, how=join, level=level, return_indexers=True)\n    if is_series:\n        reindexers = {0: [join_index, ilidx]}\n    else:\n        reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n    left = self._reindex_with_indexers(reindexers, copy=copy, fill_value=fill_value, allow_dups=True)\n    right = other._reindex_with_indexers({0: [join_index, iridx], 1: [join_columns, cridx]}, copy=copy, fill_value=fill_value, allow_dups=True)\n    if method is not None:\n        left = self._ensure_type(left.fillna(method=method, axis=fill_axis, limit=limit))\n        right = self._ensure_type(right.fillna(method=method, axis=fill_axis, limit=limit))\n    if is_datetime64tz_dtype(left.index):\n        if left.index.tz != right.index.tz:\n            if join_index is not None:\n                left.index = join_index\n                right.index = join_index\n    return (left.__finalize__(self), right.__finalize__(other))",
                            "def _align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0):\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if axis:\n            raise ValueError('cannot align series to a series other than axis 0')\n        if self.index.equals(other.index):\n            join_index, lidx, ridx = (None, None, None)\n        else:\n            join_index, lidx, ridx = self.index.join(other.index, how=join, level=level, return_indexers=True)\n        left = self._reindex_indexer(join_index, lidx, copy)\n        right = other._reindex_indexer(join_index, ridx, copy)\n    else:\n        fdata = self._data\n        if axis == 0:\n            join_index = self.index\n            lidx, ridx = (None, None)\n            if not self.index.equals(other.index):\n                join_index, lidx, ridx = self.index.join(other.index, how=join, level=level, return_indexers=True)\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n        elif axis == 1:\n            join_index = self.columns\n            lidx, ridx = (None, None)\n            if not self.columns.equals(other.index):\n                join_index, lidx, ridx = self.columns.join(other.index, how=join, level=level, return_indexers=True)\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n        else:\n            raise ValueError('Must specify axis=0 or 1')\n        if copy and fdata is self._data:\n            fdata = fdata.copy()\n        left = self._constructor(fdata)\n        if ridx is None:\n            right = other\n        else:\n            right = other.reindex(join_index, level=level)\n    fill_na = notna(fill_value) or method is not None\n    if fill_na:\n        left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n        right = right.fillna(fill_value, method=method, limit=limit)\n    if is_series or (not is_series and axis == 0):\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n    return (left.__finalize__(self), right.__finalize__(other))",
                            "def _where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False):\n    \"\"\"\n    Equivalent to public method `where`, except that `other` is not\n    applied as a function even if callable. Used in __setitem__.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cond = com.apply_if_callable(cond, self)\n    if isinstance(cond, NDFrame):\n        cond, _ = cond.align(self, join='right', broadcast_axis=1)\n    else:\n        if not hasattr(cond, 'shape'):\n            cond = np.asanyarray(cond)\n        if cond.shape != self.shape:\n            raise ValueError('Array conditional must be same shape as self')\n        cond = self._constructor(cond, **self._construct_axes_dict())\n    fill_value = bool(inplace)\n    cond = cond.fillna(fill_value)\n    msg = 'Boolean array expected for the condition, not {dtype}'\n    if not isinstance(cond, ABCDataFrame):\n        if not is_bool_dtype(cond):\n            raise ValueError(msg.format(dtype=cond.dtype))\n    elif not cond.empty:\n        for dt in cond.dtypes:\n            if not is_bool_dtype(dt):\n                raise ValueError(msg.format(dtype=dt))\n    cond = -cond if inplace else cond\n    try_quick = True\n    if hasattr(other, 'align'):\n        if other.ndim <= self.ndim:\n            _, other = self.align(other, join='left', axis=axis, level=level, fill_value=np.nan)\n            if axis is None and (not all((other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)))):\n                raise InvalidIndexError\n        else:\n            raise NotImplementedError('cannot align with a higher dimensional NDFrame')\n    if isinstance(other, np.ndarray):\n        if other.shape != self.shape:\n            if self.ndim == 1:\n                icond = cond.values\n                if len(other) == 1:\n                    other = np.array(other[0])\n                elif len(cond[icond]) == len(other):\n                    if try_quick:\n                        new_other = com.values_from_object(self)\n                        new_other = new_other.copy()\n                        new_other[icond] = other\n                        other = new_other\n                else:\n                    raise ValueError('Length of replacements must equal series length')\n            else:\n                raise ValueError('other must be the same shape as self when an ndarray')\n        else:\n            other = self._constructor(other, **self._construct_axes_dict())\n    if axis is None:\n        axis = 0\n    if self.ndim == getattr(other, 'ndim', 0):\n        align = True\n    else:\n        align = self._get_axis_number(axis) == 1\n    block_axis = self._get_block_manager_axis(axis)\n    if inplace:\n        self._check_inplace_setting(other)\n        new_data = self._data.putmask(mask=cond, new=other, align=align, inplace=True, axis=block_axis, transpose=self._AXIS_REVERSED)\n        self._update_inplace(new_data)\n    else:\n        new_data = self._data.where(other=other, cond=cond, align=align, errors=errors, try_cast=try_cast, axis=block_axis)\n        return self._constructor(new_data).__finalize__(self)",
                            "@Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond='True', cond_rev='False', name='where', name_other='mask'))\ndef where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False):\n    other = com.apply_if_callable(other, self)\n    return self._where(cond, other, inplace, axis, level, errors=errors, try_cast=try_cast)",
                            "@Appender(_shared_docs['where'] % dict(_shared_doc_kwargs, cond='False', cond_rev='True', name='mask', name_other='where'))\ndef mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False):\n    inplace = validate_bool_kwarg(inplace, 'inplace')\n    cond = com.apply_if_callable(cond, self)\n    if not hasattr(cond, '__invert__'):\n        cond = np.array(cond)\n    return self.where(~cond, other=other, inplace=inplace, axis=axis, level=level, try_cast=try_cast, errors=errors)",
                            "@Appender(_shared_docs['shift'] % _shared_doc_kwargs)\ndef shift(self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None) -> FrameOrSeries:\n    if periods == 0:\n        return self.copy()\n    block_axis = self._get_block_manager_axis(axis)\n    if freq is None:\n        new_data = self._data.shift(periods=periods, axis=block_axis, fill_value=fill_value)\n    else:\n        return self.tshift(periods, freq)\n    return self._constructor(new_data).__finalize__(self)",
                            "def slice_shift(self: FrameOrSeries, periods: int=1, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Equivalent to `shift` without copying data.\n\n    The shifted data will not include the dropped periods and the\n    shifted axis will be smaller than the original.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n\n    Returns\n    -------\n    shifted : same type as caller\n\n    Notes\n    -----\n    While the `slice_shift` is faster than `shift`, you may pay for it\n    later during alignment.\n    \"\"\"\n    if periods == 0:\n        return self\n    if periods > 0:\n        vslicer = slice(None, -periods)\n        islicer = slice(periods, None)\n    else:\n        vslicer = slice(-periods, None)\n        islicer = slice(None, periods)\n    new_obj = self._slice(vslicer, axis=axis)\n    shifted_axis = self._get_axis(axis)[islicer]\n    new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n    return new_obj.__finalize__(self)",
                            "def tshift(self: FrameOrSeries, periods: int=1, freq=None, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Shift the time index, using the index's frequency if available.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n    freq : DateOffset, timedelta, or str, default None\n        Increment to use from the tseries module\n        or time rule expressed as a string (e.g. 'EOM').\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default 0\n        Corresponds to the axis that contains the Index.\n\n    Returns\n    -------\n    shifted : Series/DataFrame\n\n    Notes\n    -----\n    If freq is not specified then tries to use the freq or inferred_freq\n    attributes of the index. If neither of those attributes exist, a\n    ValueError is thrown\n    \"\"\"\n    index = self._get_axis(axis)\n    if freq is None:\n        freq = getattr(index, 'freq', None)\n    if freq is None:\n        freq = getattr(index, 'inferred_freq', None)\n    if freq is None:\n        msg = 'Freq was not given and was not set in the index'\n        raise ValueError(msg)\n    if periods == 0:\n        return self\n    if isinstance(freq, str):\n        freq = to_offset(freq)\n    block_axis = self._get_block_manager_axis(axis)\n    if isinstance(index, PeriodIndex):\n        orig_freq = to_offset(index.freq)\n        if freq == orig_freq:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods)\n        elif orig_freq is not None:\n            msg = f'Given freq {freq.rule_code} does not match PeriodIndex freq {orig_freq.rule_code}'\n            raise ValueError(msg)\n    else:\n        new_data = self._data.copy()\n        new_data.axes[block_axis] = index.shift(periods, freq)\n    return self._constructor(new_data).__finalize__(self)",
                            "def truncate(self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Truncate a Series or DataFrame before and after some index value.\n\n    This is a useful shorthand for boolean indexing based on index\n    values above or below certain thresholds.\n\n    Parameters\n    ----------\n    before : date, str, int\n        Truncate all rows before this index value.\n    after : date, str, int\n        Truncate all rows after this index value.\n    axis : {0 or 'index', 1 or 'columns'}, optional\n        Axis to truncate. Truncates the index (rows) by default.\n    copy : bool, default is True,\n        Return a copy of the truncated section.\n\n    Returns\n    -------\n    type of caller\n        The truncated Series or DataFrame.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by label.\n    DataFrame.iloc : Select a subset of a DataFrame by position.\n\n    Notes\n    -----\n    If the index being truncated contains only datetime values,\n    `before` and `after` may be specified as strings instead of\n    Timestamps.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n    ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n    ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n    ...                   index=[1, 2, 3, 4, 5])\n    >>> df\n       A  B  C\n    1  a  f  k\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n    5  e  j  o\n\n    >>> df.truncate(before=2, after=4)\n       A  B  C\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n\n    The columns of a DataFrame can be truncated.\n\n    >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n       A  B\n    1  a  f\n    2  b  g\n    3  c  h\n    4  d  i\n    5  e  j\n\n    For Series, only rows can be truncated.\n\n    >>> df['A'].truncate(before=2, after=4)\n    2    b\n    3    c\n    4    d\n    Name: A, dtype: object\n\n    The index values in ``truncate`` can be datetimes or string\n    dates.\n\n    >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n    >>> df = pd.DataFrame(index=dates, data={'A': 1})\n    >>> df.tail()\n                         A\n    2016-01-31 23:59:56  1\n    2016-01-31 23:59:57  1\n    2016-01-31 23:59:58  1\n    2016-01-31 23:59:59  1\n    2016-02-01 00:00:00  1\n\n    >>> df.truncate(before=pd.Timestamp('2016-01-05'),\n    ...             after=pd.Timestamp('2016-01-10')).tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Because the index is a DatetimeIndex containing only dates, we can\n    specify `before` and `after` as strings. They will be coerced to\n    Timestamps before truncation.\n\n    >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Note that ``truncate`` assumes a 0 value for any unspecified time\n    component (midnight). This differs from partial string slicing, which\n    returns any partially matching dates.\n\n    >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                         A\n    2016-01-10 23:59:55  1\n    2016-01-10 23:59:56  1\n    2016-01-10 23:59:57  1\n    2016-01-10 23:59:58  1\n    2016-01-10 23:59:59  1\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n    if not ax.is_monotonic_increasing and (not ax.is_monotonic_decreasing):\n        raise ValueError('truncate requires a sorted index')\n    if ax.is_all_dates:\n        from pandas.core.tools.datetimes import to_datetime\n        before = to_datetime(before)\n        after = to_datetime(after)\n    if before is not None and after is not None:\n        if before > after:\n            raise ValueError(f'Truncate: {after} must be after {before}')\n    slicer = [slice(None, None)] * self._AXIS_LEN\n    slicer[axis] = slice(before, after)\n    result = self.loc[tuple(slicer)]\n    if isinstance(ax, MultiIndex):\n        setattr(result, self._get_axis_name(axis), ax.truncate(before, after))\n    if copy:\n        result = result.copy()\n    return result",
                            "def tz_convert(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True) -> FrameOrSeries:\n    \"\"\"\n    Convert tz-aware axis to target time zone.\n\n    Parameters\n    ----------\n    tz : str or tzinfo object\n    axis : the axis to convert\n    level : int, str, default None\n        If axis is a MultiIndex, convert a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n\n    Returns\n    -------\n    %(klass)s\n        Object with time zone converted axis.\n\n    Raises\n    ------\n    TypeError\n        If the axis is tz-naive.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_convert(ax, tz):\n        if not hasattr(ax, 'tz_convert'):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_convert(tz)\n        return ax\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_convert(ax.levels[level], tz)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f'The level {level} is not valid')\n        ax = _tz_convert(ax, tz)\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                            "def tz_localize(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True, ambiguous='raise', nonexistent: str='raise') -> FrameOrSeries:\n    \"\"\"\n    Localize tz-naive index of a Series or DataFrame to target time zone.\n\n    This operation localizes the Index. To localize the values in a\n    timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\n    Parameters\n    ----------\n    tz : str or tzinfo\n    axis : the axis to localize\n    level : int, str, default None\n        If axis ia a MultiIndex, localize a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n    ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n        When clocks moved backward due to DST, ambiguous times may arise.\n        For example in Central European Time (UTC+01), when going from\n        03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n        00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n        `ambiguous` parameter dictates how ambiguous times should be\n        handled.\n\n        - 'infer' will attempt to infer fall dst-transition hours based on\n          order\n        - bool-ndarray where True signifies a DST time, False designates\n          a non-DST time (note that this flag is only applicable for\n          ambiguous times)\n        - 'NaT' will return NaT where there are ambiguous times\n        - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n          times.\n    nonexistent : str, default 'raise'\n        A nonexistent time does not exist in a particular timezone\n        where clocks moved forward due to DST. Valid values are:\n\n        - 'shift_forward' will shift the nonexistent time forward to the\n          closest existing time\n        - 'shift_backward' will shift the nonexistent time backward to the\n          closest existing time\n        - 'NaT' will return NaT where there are nonexistent times\n        - timedelta objects will shift nonexistent times by the timedelta\n        - 'raise' will raise an NonExistentTimeError if there are\n          nonexistent times.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as the input.\n\n    Raises\n    ------\n    TypeError\n        If the TimeSeries is tz-aware and tz is not None.\n\n    Examples\n    --------\n\n    Localize local times:\n\n    >>> s = pd.Series([1],\n    ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n    >>> s.tz_localize('CET')\n    2018-09-15 01:30:00+02:00    1\n    dtype: int64\n\n    Be careful with DST changes. When there is sequential data, pandas\n    can infer the DST time:\n\n    >>> s = pd.Series(range(7),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 03:00:00',\n    ...                                       '2018-10-28 03:30:00']))\n    >>> s.tz_localize('CET', ambiguous='infer')\n    2018-10-28 01:30:00+02:00    0\n    2018-10-28 02:00:00+02:00    1\n    2018-10-28 02:30:00+02:00    2\n    2018-10-28 02:00:00+01:00    3\n    2018-10-28 02:30:00+01:00    4\n    2018-10-28 03:00:00+01:00    5\n    2018-10-28 03:30:00+01:00    6\n    dtype: int64\n\n    In some cases, inferring the DST is impossible. In such cases, you can\n    pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n    >>> s = pd.Series(range(3),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n    ...                                       '2018-10-28 02:36:00',\n    ...                                       '2018-10-28 03:46:00']))\n    >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n    2018-10-28 01:20:00+02:00    0\n    2018-10-28 02:36:00+02:00    1\n    2018-10-28 03:46:00+01:00    2\n    dtype: int64\n\n    If the DST transition causes nonexistent times, you can shift these\n    dates forward or backwards with a timedelta object or `'shift_forward'`\n    or `'shift_backwards'`.\n    >>> s = pd.Series(range(2),\n    ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n    ...                                       '2015-03-29 03:30:00']))\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n    2015-03-29 03:00:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n    2015-03-29 01:59:59.999999999+01:00    0\n    2015-03-29 03:30:00+02:00              1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n    2015-03-29 03:30:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    \"\"\"\n    nonexistent_options = ('raise', 'NaT', 'shift_forward', 'shift_backward')\n    if nonexistent not in nonexistent_options and (not isinstance(nonexistent, timedelta)):\n        raise ValueError(\"The nonexistent argument must be one of 'raise', 'NaT', 'shift_forward', 'shift_backward' or a timedelta object\")\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_localize(ax, tz, ambiguous, nonexistent):\n        if not hasattr(ax, 'tz_localize'):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n        return ax\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_localize(ax.levels[level], tz, ambiguous, nonexistent)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f'The level {level} is not valid')\n        ax = _tz_localize(ax, tz, ambiguous, nonexistent)\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                            "def abs(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\"\n    Return a Series/DataFrame with absolute numeric value of each element.\n\n    This function only applies to elements that are all numeric.\n\n    Returns\n    -------\n    abs\n        Series/DataFrame containing the absolute value of each element.\n\n    See Also\n    --------\n    numpy.absolute : Calculate the absolute value element-wise.\n\n    Notes\n    -----\n    For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n    :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n    Examples\n    --------\n    Absolute numeric values in a Series.\n\n    >>> s = pd.Series([-1.10, 2, -3.33, 4])\n    >>> s.abs()\n    0    1.10\n    1    2.00\n    2    3.33\n    3    4.00\n    dtype: float64\n\n    Absolute numeric values in a Series with complex numbers.\n\n    >>> s = pd.Series([1.2 + 1j])\n    >>> s.abs()\n    0    1.56205\n    dtype: float64\n\n    Absolute numeric values in a Series with a Timedelta element.\n\n    >>> s = pd.Series([pd.Timedelta('1 days')])\n    >>> s.abs()\n    0   1 days\n    dtype: timedelta64[ns]\n\n    Select rows with data closest to certain value using argsort (from\n    `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n    >>> df = pd.DataFrame({\n    ...     'a': [4, 5, 6, 7],\n    ...     'b': [10, 20, 30, 40],\n    ...     'c': [100, 50, -30, -50]\n    ... })\n    >>> df\n         a    b    c\n    0    4   10  100\n    1    5   20   50\n    2    6   30  -30\n    3    7   40  -50\n    >>> df.loc[(df.c - 43).abs().argsort()]\n         a    b    c\n    1    5   20   50\n    0    4   10  100\n    2    6   30  -30\n    3    7   40  -50\n    \"\"\"\n    return np.abs(self)",
                            "def describe(self: FrameOrSeries, percentiles=None, include=None, exclude=None) -> FrameOrSeries:\n    \"\"\"\n    Generate descriptive statistics.\n\n    Descriptive statistics include those that summarize the central\n    tendency, dispersion and shape of a\n    dataset's distribution, excluding ``NaN`` values.\n\n    Analyzes both numeric and object series, as well\n    as ``DataFrame`` column sets of mixed data types. The output\n    will vary depending on what is provided. Refer to the notes\n    below for more detail.\n\n    Parameters\n    ----------\n    percentiles : list-like of numbers, optional\n        The percentiles to include in the output. All should\n        fall between 0 and 1. The default is\n        ``[.25, .5, .75]``, which returns the 25th, 50th, and\n        75th percentiles.\n    include : 'all', list-like of dtypes or None (default), optional\n        A white list of data types to include in the result. Ignored\n        for ``Series``. Here are the options:\n\n        - 'all' : All columns of the input will be included in the output.\n        - A list-like of dtypes : Limits the results to the\n          provided data types.\n          To limit the result to numeric types submit\n          ``numpy.number``. To limit it instead to object columns submit\n          the ``numpy.object`` data type. Strings\n          can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          select pandas categorical columns, use ``'category'``\n        - None (default) : The result will include all numeric columns.\n    exclude : list-like of dtypes or None (default), optional,\n        A black list of data types to omit from the result. Ignored\n        for ``Series``. Here are the options:\n\n        - A list-like of dtypes : Excludes the provided data types\n          from the result. To exclude numeric types submit\n          ``numpy.number``. To exclude object columns submit the data\n          type ``numpy.object``. Strings can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          exclude pandas categorical columns, use ``'category'``\n        - None (default) : The result will exclude nothing.\n\n    Returns\n    -------\n    Series or DataFrame\n        Summary statistics of the Series or Dataframe provided.\n\n    See Also\n    --------\n    DataFrame.count: Count number of non-NA/null observations.\n    DataFrame.max: Maximum of the values in the object.\n    DataFrame.min: Minimum of the values in the object.\n    DataFrame.mean: Mean of the values.\n    DataFrame.std: Standard deviation of the observations.\n    DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n        columns based on their dtype.\n\n    Notes\n    -----\n    For numeric data, the result's index will include ``count``,\n    ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n    upper percentiles. By default the lower percentile is ``25`` and the\n    upper percentile is ``75``. The ``50`` percentile is the\n    same as the median.\n\n    For object data (e.g. strings or timestamps), the result's index\n    will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n    is the most common value. The ``freq`` is the most common value's\n    frequency. Timestamps also include the ``first`` and ``last`` items.\n\n    If multiple object values have the highest count, then the\n    ``count`` and ``top`` results will be arbitrarily chosen from\n    among those with the highest count.\n\n    For mixed data types provided via a ``DataFrame``, the default is to\n    return only an analysis of numeric columns. If the dataframe consists\n    only of object and categorical data without any numeric columns, the\n    default is to return an analysis of both the object and categorical\n    columns. If ``include='all'`` is provided as an option, the result\n    will include a union of attributes of each type.\n\n    The `include` and `exclude` parameters can be used to limit\n    which columns in a ``DataFrame`` are analyzed for the output.\n    The parameters are ignored when analyzing a ``Series``.\n\n    Examples\n    --------\n    Describing a numeric ``Series``.\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    dtype: float64\n\n    Describing a categorical ``Series``.\n\n    >>> s = pd.Series(['a', 'a', 'b', 'c'])\n    >>> s.describe()\n    count     4\n    unique    3\n    top       a\n    freq      2\n    dtype: object\n\n    Describing a timestamp ``Series``.\n\n    >>> s = pd.Series([\n    ...   np.datetime64(\"2000-01-01\"),\n    ...   np.datetime64(\"2010-01-01\"),\n    ...   np.datetime64(\"2010-01-01\")\n    ... ])\n    >>> s.describe()\n    count                       3\n    unique                      2\n    top       2010-01-01 00:00:00\n    freq                        2\n    first     2000-01-01 00:00:00\n    last      2010-01-01 00:00:00\n    dtype: object\n\n    Describing a ``DataFrame``. By default only numeric fields\n    are returned.\n\n    >>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n    ...                    'numeric': [1, 2, 3],\n    ...                    'object': ['a', 'b', 'c']\n    ...                   })\n    >>> df.describe()\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Describing all columns of a ``DataFrame`` regardless of data type.\n\n    >>> df.describe(include='all')\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n\n    Describing a column from a ``DataFrame`` by accessing it as\n    an attribute.\n\n    >>> df.numeric.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    Name: numeric, dtype: float64\n\n    Including only numeric columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.number])\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Including only string columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.object])\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\n\n    Including only categorical columns from a ``DataFrame`` description.\n\n    >>> df.describe(include=['category'])\n           categorical\n    count            3\n    unique           3\n    top              f\n    freq             1\n\n    Excluding numeric columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.number])\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\n\n    Excluding object columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.object])\n           categorical  numeric\n    count            3      3.0\n    unique           3      NaN\n    top              f      NaN\n    freq             1      NaN\n    mean           NaN      2.0\n    std            NaN      1.0\n    min            NaN      1.0\n    25%            NaN      1.5\n    50%            NaN      2.0\n    75%            NaN      2.5\n    max            NaN      3.0\n    \"\"\"\n    if self.ndim == 2 and self.columns.size == 0:\n        raise ValueError('Cannot describe a DataFrame without columns')\n    if percentiles is not None:\n        percentiles = list(percentiles)\n        validate_percentile(percentiles)\n        if 0.5 not in percentiles:\n            percentiles.append(0.5)\n        percentiles = np.asarray(percentiles)\n    else:\n        percentiles = np.array([0.25, 0.5, 0.75])\n    unique_pcts = np.unique(percentiles)\n    if len(unique_pcts) < len(percentiles):\n        raise ValueError('percentiles cannot contain duplicates')\n    percentiles = unique_pcts\n    formatted_percentiles = format_percentiles(percentiles)\n\n    def describe_numeric_1d(series):\n        stat_index = ['count', 'mean', 'std', 'min'] + formatted_percentiles + ['max']\n        d = [series.count(), series.mean(), series.std(), series.min()] + series.quantile(percentiles).tolist() + [series.max()]\n        return pd.Series(d, index=stat_index, name=series.name)\n\n    def describe_categorical_1d(data):\n        names = ['count', 'unique']\n        objcounts = data.value_counts()\n        count_unique = len(objcounts[objcounts != 0])\n        result = [data.count(), count_unique]\n        dtype = None\n        if result[1] > 0:\n            top, freq = (objcounts.index[0], objcounts.iloc[0])\n            if is_datetime64_any_dtype(data):\n                tz = data.dt.tz\n                asint = data.dropna().values.view('i8')\n                top = Timestamp(top)\n                if top.tzinfo is not None and tz is not None:\n                    top = top.tz_convert(tz)\n                else:\n                    top = top.tz_localize(tz)\n                names += ['top', 'freq', 'first', 'last']\n                result += [top, freq, Timestamp(asint.min(), tz=tz), Timestamp(asint.max(), tz=tz)]\n            else:\n                names += ['top', 'freq']\n                result += [top, freq]\n        else:\n            names += ['top', 'freq']\n            result += [np.nan, np.nan]\n            dtype = 'object'\n        return pd.Series(result, index=names, name=data.name, dtype=dtype)\n\n    def describe_1d(data):\n        if is_bool_dtype(data):\n            return describe_categorical_1d(data)\n        elif is_numeric_dtype(data):\n            return describe_numeric_1d(data)\n        elif is_timedelta64_dtype(data):\n            return describe_numeric_1d(data)\n        else:\n            return describe_categorical_1d(data)\n    if self.ndim == 1:\n        return describe_1d(self)\n    elif include is None and exclude is None:\n        data = self.select_dtypes(include=[np.number])\n        if len(data.columns) == 0:\n            data = self\n    elif include == 'all':\n        if exclude is not None:\n            msg = \"exclude must be None when include is 'all'\"\n            raise ValueError(msg)\n        data = self\n    else:\n        data = self.select_dtypes(include=include, exclude=exclude)\n    ldesc = [describe_1d(s) for _, s in data.items()]\n    names: List[Optional[Hashable]] = []\n    ldesc_indexes = sorted((x.index for x in ldesc), key=len)\n    for idxnames in ldesc_indexes:\n        for name in idxnames:\n            if name not in names:\n                names.append(name)\n    d = pd.concat([x.reindex(names, copy=False) for x in ldesc], axis=1, sort=False)\n    d.columns = data.columns.copy()\n    return d",
                            "@Appender(_shared_docs['pct_change'] % _shared_doc_kwargs)\ndef pct_change(self: FrameOrSeries, periods=1, fill_method='pad', limit=None, freq=None, **kwargs) -> FrameOrSeries:\n    axis = self._get_axis_number(kwargs.pop('axis', self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self._ensure_type(self.fillna(method=fill_method, axis=axis, limit=limit))\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    if freq is not None:\n        rs = rs.loc[~rs.index.duplicated()]\n        rs = rs.reindex_like(data)\n    return rs",
                            "def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n    if axis is None:\n        raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n    grouped = self.groupby(level=level, axis=axis, sort=False)\n    if hasattr(grouped, name) and skipna:\n        return getattr(grouped, name)(**kwargs)\n    axis = self._get_axis_number(axis)\n    method = getattr(type(self), name)\n    applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n    return grouped.aggregate(applyf)",
                            "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add the operations to the cls; evaluate the doc strings again\n    \"\"\"\n    axis_descr, name, name2 = _doc_parms(cls)\n    cls.any = _make_logical_function(cls, 'any', name, name2, axis_descr, _any_desc, nanops.nanany, _any_see_also, _any_examples, empty_value=False)\n    cls.all = _make_logical_function(cls, 'all', name, name2, axis_descr, _all_desc, nanops.nanall, _all_see_also, _all_examples, empty_value=True)\n\n    @Substitution(desc='Return the mean absolute deviation of the values for the requested axis.', name1=name, name2=name2, axis_descr=axis_descr, min_count='', see_also='', examples='')\n    @Appender(_num_doc)\n    def mad(self, axis=None, skipna=None, level=None):\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level('mad', axis=axis, level=level, skipna=skipna)\n        data = self._get_numeric_data()\n        if axis == 0:\n            demeaned = data - data.mean(axis=0)\n        else:\n            demeaned = data.sub(data.mean(axis=1), axis=0)\n        return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n    cls.mad = mad\n    cls.sem = _make_stat_function_ddof(cls, 'sem', name, name2, axis_descr, 'Return unbiased standard error of the mean over requested axis.\\n\\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nansem)\n    cls.var = _make_stat_function_ddof(cls, 'var', name, name2, axis_descr, 'Return unbiased variance over requested axis.\\n\\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanvar)\n    cls.std = _make_stat_function_ddof(cls, 'std', name, name2, axis_descr, 'Return sample standard deviation over requested axis.\\n\\nNormalized by N-1 by default. This can be changed using the ddof argument', nanops.nanstd)\n    cls.cummin = _make_cum_function(cls, 'cummin', name, name2, axis_descr, 'minimum', np.minimum.accumulate, 'min', np.inf, np.nan, _cummin_examples)\n    cls.cumsum = _make_cum_function(cls, 'cumsum', name, name2, axis_descr, 'sum', np.cumsum, 'sum', 0.0, np.nan, _cumsum_examples)\n    cls.cumprod = _make_cum_function(cls, 'cumprod', name, name2, axis_descr, 'product', np.cumprod, 'prod', 1.0, np.nan, _cumprod_examples)\n    cls.cummax = _make_cum_function(cls, 'cummax', name, name2, axis_descr, 'maximum', np.maximum.accumulate, 'max', -np.inf, np.nan, _cummax_examples)\n    cls.sum = _make_min_count_stat_function(cls, 'sum', name, name2, axis_descr, 'Return the sum of the values for the requested axis.\\n\\n            This is equivalent to the method ``numpy.sum``.', nanops.nansum, _stat_func_see_also, _sum_examples)\n    cls.mean = _make_stat_function(cls, 'mean', name, name2, axis_descr, 'Return the mean of the values for the requested axis.', nanops.nanmean)\n    cls.skew = _make_stat_function(cls, 'skew', name, name2, axis_descr, 'Return unbiased skew over requested axis.\\n\\nNormalized by N-1.', nanops.nanskew)\n    cls.kurt = _make_stat_function(cls, 'kurt', name, name2, axis_descr, \"Return unbiased kurtosis over requested axis.\\n\\nKurtosis obtained using Fisher's definition of\\nkurtosis (kurtosis of normal == 0.0). Normalized by N-1.\", nanops.nankurt)\n    cls.kurtosis = cls.kurt\n    cls.prod = _make_min_count_stat_function(cls, 'prod', name, name2, axis_descr, 'Return the product of the values for the requested axis.', nanops.nanprod, examples=_prod_examples)\n    cls.product = cls.prod\n    cls.median = _make_stat_function(cls, 'median', name, name2, axis_descr, 'Return the median of the values for the requested axis.', nanops.nanmedian)\n    cls.max = _make_stat_function(cls, 'max', name, name2, axis_descr, 'Return the maximum of the values for the requested axis.\\n\\n            If you want the *index* of the maximum, use ``idxmax``. This is\\n            the equivalent of the ``numpy.ndarray`` method ``argmax``.', nanops.nanmax, _stat_func_see_also, _max_examples)\n    cls.min = _make_stat_function(cls, 'min', name, name2, axis_descr, 'Return the minimum of the values for the requested axis.\\n\\n            If you want the *index* of the minimum, use ``idxmin``. This is\\n            the equivalent of the ``numpy.ndarray`` method ``argmin``.', nanops.nanmin, _stat_func_see_also, _min_examples)",
                            "@classmethod\ndef _add_series_or_dataframe_operations(cls):\n    \"\"\"\n    Add the series or dataframe only operations to the cls; evaluate\n    the doc strings again.\n    \"\"\"\n    from pandas.core.window import EWM, Expanding, Rolling, Window\n\n    @Appender(Rolling.__doc__)\n    def rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None):\n        axis = self._get_axis_number(axis)\n        if win_type is not None:\n            return Window(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)\n        return Rolling(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)\n    cls.rolling = rolling\n\n    @Appender(Expanding.__doc__)\n    def expanding(self, min_periods=1, center=False, axis=0):\n        axis = self._get_axis_number(axis)\n        return Expanding(self, min_periods=min_periods, center=center, axis=axis)\n    cls.expanding = expanding\n\n    @Appender(EWM.__doc__)\n    def ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0):\n        axis = self._get_axis_number(axis)\n        return EWM(self, com=com, span=span, halflife=halflife, alpha=alpha, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na, axis=axis)\n    cls.ewm = ewm",
                            "@Appender(_shared_docs['transform'] % dict(axis='', **_shared_doc_kwargs))\ndef transform(self, func, *args, **kwargs):\n    result = self.agg(func, *args, **kwargs)\n    if is_scalar(result) or len(result) != len(self):\n        raise ValueError('transforms cannot produce aggregated results')\n    return result",
                            "def _find_valid_index(self, how: str):\n    \"\"\"\n    Retrieves the index of the first valid value.\n\n    Parameters\n    ----------\n    how : {'first', 'last'}\n        Use this parameter to change between the first or last valid index.\n\n    Returns\n    -------\n    idx_first_valid : type of index\n    \"\"\"\n    idxpos = find_valid_index(self._values, how)\n    if idxpos is None:\n        return None\n    return self.index[idxpos]",
                            "@Appender(_shared_docs['valid_index'] % {'position': 'first', 'klass': 'Series/DataFrame'})\ndef first_valid_index(self):\n    return self._find_valid_index('first')",
                            "@Appender(_shared_docs['valid_index'] % {'position': 'last', 'klass': 'Series/DataFrame'})\ndef last_valid_index(self):\n    return self._find_valid_index('last')",
                            "def set_axis(a, i):\n    setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n    cls._internal_names_set.add(a)",
                            "def f():\n    self._data = self._data.consolidate()",
                            "def ranker(data):\n    ranks = algos.rank(data.values, axis=axis, method=method, ascending=ascending, na_option=na_option, pct=pct)\n    ranks = self._constructor(ranks, **data._construct_axes_dict())\n    return ranks.__finalize__(self)",
                            "def _tz_convert(ax, tz):\n    if not hasattr(ax, 'tz_convert'):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_convert(tz)\n    return ax",
                            "def _tz_localize(ax, tz, ambiguous, nonexistent):\n    if not hasattr(ax, 'tz_localize'):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(f'{ax_name} is not a valid DatetimeIndex or PeriodIndex')\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n    return ax",
                            "def describe_numeric_1d(series):\n    stat_index = ['count', 'mean', 'std', 'min'] + formatted_percentiles + ['max']\n    d = [series.count(), series.mean(), series.std(), series.min()] + series.quantile(percentiles).tolist() + [series.max()]\n    return pd.Series(d, index=stat_index, name=series.name)",
                            "def describe_categorical_1d(data):\n    names = ['count', 'unique']\n    objcounts = data.value_counts()\n    count_unique = len(objcounts[objcounts != 0])\n    result = [data.count(), count_unique]\n    dtype = None\n    if result[1] > 0:\n        top, freq = (objcounts.index[0], objcounts.iloc[0])\n        if is_datetime64_any_dtype(data):\n            tz = data.dt.tz\n            asint = data.dropna().values.view('i8')\n            top = Timestamp(top)\n            if top.tzinfo is not None and tz is not None:\n                top = top.tz_convert(tz)\n            else:\n                top = top.tz_localize(tz)\n            names += ['top', 'freq', 'first', 'last']\n            result += [top, freq, Timestamp(asint.min(), tz=tz), Timestamp(asint.max(), tz=tz)]\n        else:\n            names += ['top', 'freq']\n            result += [top, freq]\n    else:\n        names += ['top', 'freq']\n        result += [np.nan, np.nan]\n        dtype = 'object'\n    return pd.Series(result, index=names, name=data.name, dtype=dtype)",
                            "def describe_1d(data):\n    if is_bool_dtype(data):\n        return describe_categorical_1d(data)\n    elif is_numeric_dtype(data):\n        return describe_numeric_1d(data)\n    elif is_timedelta64_dtype(data):\n        return describe_numeric_1d(data)\n    else:\n        return describe_categorical_1d(data)",
                            "@Substitution(desc='Return the mean absolute deviation of the values for the requested axis.', name1=name, name2=name2, axis_descr=axis_descr, min_count='', see_also='', examples='')\n@Appender(_num_doc)\ndef mad(self, axis=None, skipna=None, level=None):\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level('mad', axis=axis, level=level, skipna=skipna)\n    data = self._get_numeric_data()\n    if axis == 0:\n        demeaned = data - data.mean(axis=0)\n    else:\n        demeaned = data.sub(data.mean(axis=1), axis=0)\n    return np.abs(demeaned).mean(axis=axis, skipna=skipna)",
                            "@Appender(Rolling.__doc__)\ndef rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None):\n    axis = self._get_axis_number(axis)\n    if win_type is not None:\n        return Window(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)\n    return Rolling(self, window=window, min_periods=min_periods, center=center, win_type=win_type, on=on, axis=axis, closed=closed)",
                            "@Appender(Expanding.__doc__)\ndef expanding(self, min_periods=1, center=False, axis=0):\n    axis = self._get_axis_number(axis)\n    return Expanding(self, min_periods=min_periods, center=center, axis=axis)",
                            "@Appender(EWM.__doc__)\ndef ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0):\n    axis = self._get_axis_number(axis)\n    return EWM(self, com=com, span=span, halflife=halflife, alpha=alpha, min_periods=min_periods, adjust=adjust, ignore_na=ignore_na, axis=axis)",
                            "def f(x):\n    return like in ensure_str(x)",
                            "def f(x):\n    return matcher.search(ensure_str(x)) is not None"
                        ],
                        "constructor_variables": [
                            "attrs",
                            "data"
                        ],
                        "class_level_variables": [
                            "_internal_names",
                            "_internal_names_set",
                            "_accessors",
                            "_deprecations",
                            "_metadata",
                            "_is_copy",
                            "_data",
                            "_attrs",
                            "_typ",
                            "_AXIS_ALIASES",
                            "_AXIS_IALIASES",
                            "_stat_axis_number",
                            "_stat_axis_name",
                            "_ix",
                            "_AXIS_ORDERS",
                            "_AXIS_NUMBERS",
                            "_AXIS_NAMES",
                            "_AXIS_REVERSED",
                            "_info_axis_number",
                            "_info_axis_name",
                            "_AXIS_LEN",
                            "__bool__",
                            "__array_priority__",
                            "_xs"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
                            "_init_mgr(self, mgr, axes=None, dtype=None, copy=False)",
                            "attrs(self) -> Dict[Optional[Hashable], Any]",
                            "attrs(self, value: Mapping[Optional[Hashable], Any]) -> None",
                            "_validate_dtype(self, dtype)",
                            "_constructor(self: FrameOrSeries) -> Type[FrameOrSeries]",
                            "_constructor_sliced(self)",
                            "_constructor_expanddim(self)",
                            "_setup_axes(cls, axes: List[str], docs: Dict[str, str]) -> None",
                            "_construct_axes_dict(self, axes=None, **kwargs)",
                            "_construct_axes_dict_from(self, axes, **kwargs)",
                            "_construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None)",
                            "_from_axes(cls: Type[FrameOrSeries], data, axes, **kwargs) -> FrameOrSeries",
                            "_get_axis_number(cls, axis)",
                            "_get_axis_name(cls, axis)",
                            "_get_axis(self, axis)",
                            "_get_block_manager_axis(cls, axis)",
                            "_get_axis_resolvers(self, axis: str) -> Dict[str, ABCSeries]",
                            "_get_index_resolvers(self) -> Dict[str, ABCSeries]",
                            "_get_cleaned_column_resolvers(self) -> Dict[str, ABCSeries]",
                            "_info_axis(self)",
                            "_stat_axis(self)",
                            "shape(self) -> Tuple[int, ...]",
                            "axes(self) -> List[Index]",
                            "ndim(self) -> int",
                            "size(self)",
                            "_selected_obj(self: FrameOrSeries) -> FrameOrSeries",
                            "_obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries",
                            "set_axis(self, labels, axis=0, inplace=False)",
                            "_set_axis(self, axis, labels) -> None",
                            "swapaxes(self: FrameOrSeries, axis1, axis2, copy=True) -> FrameOrSeries",
                            "droplevel(self: FrameOrSeries, level, axis=0) -> FrameOrSeries",
                            "pop(self: FrameOrSeries, item) -> FrameOrSeries",
                            "squeeze(self, axis=None)",
                            "swaplevel(self: FrameOrSeries, i=-2, j=-1, axis=0) -> FrameOrSeries",
                            "rename(self, *args, **kwargs)",
                            "rename_axis(self, mapper=lib.no_default, **kwargs)",
                            "_set_axis_name(self, name, axis=0, inplace=False)",
                            "_indexed_same(self, other) -> bool",
                            "equals(self, other)",
                            "__neg__(self)",
                            "__pos__(self)",
                            "__invert__(self)",
                            "__nonzero__(self)",
                            "bool(self)",
                            "__abs__(self: FrameOrSeries) -> FrameOrSeries",
                            "__round__(self: FrameOrSeries, decimals: int=0) -> FrameOrSeries",
                            "_is_level_reference(self, key, axis=0)",
                            "_is_label_reference(self, key, axis=0) -> bool_t",
                            "_is_label_or_level_reference(self, key: str, axis: int=0) -> bool_t",
                            "_check_label_or_level_ambiguity(self, key, axis: int=0) -> None",
                            "_get_label_or_level_values(self, key: str, axis: int=0) -> np.ndarray",
                            "_drop_labels_or_levels(self, keys, axis: int=0)",
                            "__hash__(self)",
                            "__iter__(self)",
                            "keys(self)",
                            "items(self)",
                            "iteritems(self)",
                            "__len__(self) -> int",
                            "__contains__(self, key) -> bool_t",
                            "empty(self) -> bool_t",
                            "__array__(self, dtype=None)",
                            "__array_wrap__(self, result, context=None)",
                            "__getstate__(self) -> Dict[str, Any]",
                            "__setstate__(self, state)",
                            "__repr__(self) -> str",
                            "_repr_latex_(self)",
                            "_repr_data_resource_(self)",
                            "to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None) -> None",
                            "to_json(self, path_or_buf: Optional[FilePathOrBuffer]=None, orient: Optional[str]=None, date_format: Optional[str]=None, double_precision: int=10, force_ascii: bool_t=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool_t=False, compression: Optional[str]='infer', index: bool_t=True, indent: Optional[int]=None) -> Optional[str]",
                            "to_hdf(self, path_or_buf, key: str, mode: str='a', complevel: Optional[int]=None, complib: Optional[str]=None, append: bool_t=False, format: Optional[str]=None, index: bool_t=True, min_itemsize: Optional[Union[int, Dict[str, int]]]=None, nan_rep=None, dropna: Optional[bool_t]=None, data_columns: Optional[List[str]]=None, errors: str='strict', encoding: str='UTF-8') -> None",
                            "to_sql(self, name: str, con, schema=None, if_exists: str='fail', index: bool_t=True, index_label=None, chunksize=None, dtype=None, method=None) -> None",
                            "to_pickle(self, path, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL) -> None",
                            "to_clipboard(self, excel: bool_t=True, sep: Optional[str]=None, **kwargs) -> None",
                            "to_xarray(self)",
                            "to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None)",
                            "to_csv(self, path_or_buf: Optional[FilePathOrBuffer]=None, sep: str=',', na_rep: str='', float_format: Optional[str]=None, columns: Optional[Sequence[Optional[Hashable]]]=None, header: Union[bool_t, List[str]]=True, index: bool_t=True, index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]]=None, mode: str='w', encoding: Optional[str]=None, compression: Optional[Union[str, Mapping[str, str]]]='infer', quoting: Optional[int]=None, quotechar: str='\"', line_terminator: Optional[str]=None, chunksize: Optional[int]=None, date_format: Optional[str]=None, doublequote: bool_t=True, escapechar: Optional[str]=None, decimal: Optional[str]='.') -> Optional[str]",
                            "_create_indexer(cls, name: str, indexer) -> None",
                            "_set_as_cached(self, item, cacher) -> None",
                            "_reset_cacher(self) -> None",
                            "_maybe_cache_changed(self, item, value) -> None",
                            "_is_cached(self) -> bool_t",
                            "_get_cacher(self)",
                            "_maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True) -> None",
                            "_clear_item_cache(self) -> None",
                            "take(self: FrameOrSeries, indices, axis=0, is_copy: Optional[bool_t]=None, **kwargs) -> FrameOrSeries",
                            "xs(self, key, axis=0, level=None, drop_level: bool_t=True)",
                            "__getitem__(self, item)",
                            "_get_item_cache(self, item)",
                            "_iget_item_cache(self, item)",
                            "_box_item_values(self, key, values)",
                            "_slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None) -> FrameOrSeries",
                            "_set_item(self, key, value) -> None",
                            "_set_is_copy(self, ref=None, copy: bool_t=True) -> None",
                            "_check_is_chained_assignment_possible(self) -> bool_t",
                            "_check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
                            "__delitem__(self, key) -> None",
                            "get(self, key, default=None)",
                            "_is_view(self)",
                            "reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None) -> FrameOrSeries",
                            "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise')",
                            "_drop_axis(self: FrameOrSeries, labels, axis, level=None, errors: str='raise') -> FrameOrSeries",
                            "_update_inplace(self, result, verify_is_copy: bool_t=True) -> None",
                            "add_prefix(self: FrameOrSeries, prefix: str) -> FrameOrSeries",
                            "add_suffix(self: FrameOrSeries, suffix: str) -> FrameOrSeries",
                            "sort_values(self, by=None, axis=0, ascending=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', ignore_index: bool_t=False)",
                            "sort_index(self, axis=0, level=None, ascending: bool_t=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool_t=True, ignore_index: bool_t=False)",
                            "reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries",
                            "_reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy) -> FrameOrSeries",
                            "_needs_reindex_multi(self, axes, method, level) -> bool_t",
                            "_reindex_multi(self, axes, copy, fill_value)",
                            "_reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False) -> FrameOrSeries",
                            "filter(self: FrameOrSeries, items=None, like: Optional[str]=None, regex: Optional[str]=None, axis=None) -> FrameOrSeries",
                            "head(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                            "tail(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                            "sample(self: FrameOrSeries, n=None, frac=None, replace=False, weights=None, random_state=None, axis=None) -> FrameOrSeries",
                            "pipe(self, func, *args, **kwargs)",
                            "__finalize__(self: FrameOrSeries, other, method=None, **kwargs) -> FrameOrSeries",
                            "__getattr__(self, name: str)",
                            "__setattr__(self, name: str, value) -> None",
                            "_dir_additions(self)",
                            "_protect_consolidate(self, f)",
                            "_consolidate_inplace(self) -> None",
                            "_consolidate(self, inplace: bool_t=False)",
                            "_is_mixed_type(self)",
                            "_is_numeric_mixed_type(self)",
                            "_is_datelike_mixed_type(self)",
                            "_check_inplace_setting(self, value) -> bool_t",
                            "_get_numeric_data(self)",
                            "_get_bool_data(self)",
                            "values(self) -> np.ndarray",
                            "_values(self) -> np.ndarray",
                            "_get_values(self) -> np.ndarray",
                            "_internal_get_values(self) -> np.ndarray",
                            "dtypes(self)",
                            "_to_dict_of_blocks(self, copy: bool_t=True)",
                            "astype(self: FrameOrSeries, dtype, copy: bool_t=True, errors: str='raise') -> FrameOrSeries",
                            "copy(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                            "__copy__(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                            "__deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries",
                            "_convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False, copy: bool_t=True) -> FrameOrSeries",
                            "infer_objects(self: FrameOrSeries) -> FrameOrSeries",
                            "fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                            "ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                            "bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                            "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                            "interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
                            "asof(self, where, subset=None)",
                            "isna(self: FrameOrSeries) -> FrameOrSeries",
                            "isnull(self: FrameOrSeries) -> FrameOrSeries",
                            "notna(self: FrameOrSeries) -> FrameOrSeries",
                            "notnull(self: FrameOrSeries) -> FrameOrSeries",
                            "_clip_with_scalar(self, lower, upper, inplace: bool_t=False)",
                            "_clip_with_one_bound(self, threshold, method, axis, inplace)",
                            "clip(self: FrameOrSeries, lower=None, upper=None, axis=None, inplace: bool_t=False, *args, **kwargs) -> FrameOrSeries",
                            "asfreq(self: FrameOrSeries, freq, method=None, how: Optional[str]=None, normalize: bool_t=False, fill_value=None) -> FrameOrSeries",
                            "at_time(self: FrameOrSeries, time, asof: bool_t=False, axis=None) -> FrameOrSeries",
                            "between_time(self: FrameOrSeries, start_time, end_time, include_start: bool_t=True, include_end: bool_t=True, axis=None) -> FrameOrSeries",
                            "resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: int=0, on=None, level=None)",
                            "first(self: FrameOrSeries, offset) -> FrameOrSeries",
                            "last(self: FrameOrSeries, offset) -> FrameOrSeries",
                            "rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False) -> FrameOrSeries",
                            "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                            "_align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                            "_align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                            "_where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                            "where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                            "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                            "shift(self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None) -> FrameOrSeries",
                            "slice_shift(self: FrameOrSeries, periods: int=1, axis=0) -> FrameOrSeries",
                            "tshift(self: FrameOrSeries, periods: int=1, freq=None, axis=0) -> FrameOrSeries",
                            "truncate(self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t=True) -> FrameOrSeries",
                            "tz_convert(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True) -> FrameOrSeries",
                            "tz_localize(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True, ambiguous='raise', nonexistent: str='raise') -> FrameOrSeries",
                            "abs(self: FrameOrSeries) -> FrameOrSeries",
                            "describe(self: FrameOrSeries, percentiles=None, include=None, exclude=None) -> FrameOrSeries",
                            "pct_change(self: FrameOrSeries, periods=1, fill_method='pad', limit=None, freq=None, **kwargs) -> FrameOrSeries",
                            "_agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs)",
                            "_add_numeric_operations(cls)",
                            "_add_series_or_dataframe_operations(cls)",
                            "transform(self, func, *args, **kwargs)",
                            "_find_valid_index(self, how: str)",
                            "first_valid_index(self)",
                            "last_valid_index(self)",
                            "set_axis(a, i)",
                            "f()",
                            "ranker(data)",
                            "_tz_convert(ax, tz)",
                            "_tz_localize(ax, tz, ambiguous, nonexistent)",
                            "describe_numeric_1d(series)",
                            "describe_categorical_1d(data)",
                            "describe_1d(data)",
                            "mad(self, axis=None, skipna=None, level=None)",
                            "rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)",
                            "expanding(self, min_periods=1, center=False, axis=0)",
                            "ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0)",
                            "f(x)",
                            "f(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "where": {
                                    "variable_value": "'1989-12-31'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start.ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115bf46d0>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "where": {
                                    "variable_value": "Timestamp('1989-12-31 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "Timestamp('1990-01-01 00:00:00', freq='53S')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start.ordinal": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": "<class 'pandas.core.series.Series'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x114fd2450>"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115bf46d0>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "where": {
                                    "variable_value": "DatetimeIndex(['1989-12-31'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "1"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start.ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115bf46d0>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "where": {
                                    "variable_value": "DatetimeIndex(['1989-12-31'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "1"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start.ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": "1990-01-01 00:00:00    False\n1990-01-01 00:00:53    False\n1990-01-01 00:01:46    False\n1990-01-01 00:02:39    False\n1990-01-01 00:03:32    False\n1990-01-01 00:04:25    False\n1990-01-01 00:05:18    False\n1990-01-01 00:06:11    False\n1990-01-01 00:07:04    False\n1990-01-01 00:07:57    False\nFreq: 53S, dtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "10"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": "<bound method Series.all of 1990-01-01 00:00:00    False\n1990-01-01 00:00:53    False\n1990-01-01 00:01:46    False\n1990-01-01 00:02:39    False\n1990-01-01 00:03:32    False\n1990-01-01 00:04:25    False\n1990-01-01 00:05:18    False\n1990-01-01 00:06:11    False\n1990-01-01 00:07:04    False\n1990-01-01 00:07:57    False\nFreq: 53S, dtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115bf46d0>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": "array([False, False, False, False, False, False, False, False, False,\n       False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "missing": {
                                    "variable_value": "array([ True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "d": {
                                    "variable_value": "                     A  B\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "             A   B\n1989-12-31 NaN NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "d.copy": {
                                    "variable_value": "<bound method NDFrame.copy of                      A  B\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": "DatetimeIndex(['1989-12-31'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "1"
                                },
                                "data.loc": {
                                    "variable_value": "<pandas.core.indexing._LocIndexer object at 0x122fbf900>",
                                    "variable_type": "_LocIndexer",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x122fbf900>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "where": {
                                    "variable_value": "'1989-12-31'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "PeriodIndex(['1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "            A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start.ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115bf46d0>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "where": {
                                    "variable_value": "7304",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "PeriodIndex(['1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "            A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "7305",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ordinal": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "start.ordinal": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": "<class 'pandas.core.series.Series'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x114fd2450>"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x115bf46d0>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "where": {
                                    "variable_value": "'1989-12-31'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x1118b9310>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "where": {
                                    "variable_value": "Timestamp('1989-12-31 00:00:00')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "Timestamp('1990-01-01 00:00:00', freq='53S')",
                                    "variable_type": "Timestamp",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": "<class 'pandas.core.series.Series'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110d505e0>"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x1118b9310>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "where": {
                                    "variable_value": "DatetimeIndex(['1989-12-31'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "1"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x1118b9310>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "where": {
                                    "variable_value": "DatetimeIndex(['1989-12-31'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "1"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "DatetimeIndex(['1990-01-01 00:00:00', '1990-01-01 00:00:53',\n               '1990-01-01 00:01:46', '1990-01-01 00:02:39',\n               '1990-01-01 00:03:32', '1990-01-01 00:04:25',\n               '1990-01-01 00:05:18', '1990-01-01 00:06:11',\n               '1990-01-01 00:07:04', '1990-01-01 00:07:57'],\n              dtype='datetime64[ns]', freq='53S')",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "                     A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": "1990-01-01 00:00:00    False\n1990-01-01 00:00:53    False\n1990-01-01 00:01:46    False\n1990-01-01 00:02:39    False\n1990-01-01 00:03:32    False\n1990-01-01 00:04:25    False\n1990-01-01 00:05:18    False\n1990-01-01 00:06:11    False\n1990-01-01 00:07:04    False\n1990-01-01 00:07:57    False\nFreq: 53S, dtype: bool",
                                    "variable_type": "Series",
                                    "variable_shape": "10"
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": "<bound method Series.all of 1990-01-01 00:00:00    False\n1990-01-01 00:00:53    False\n1990-01-01 00:01:46    False\n1990-01-01 00:02:39    False\n1990-01-01 00:03:32    False\n1990-01-01 00:04:25    False\n1990-01-01 00:05:18    False\n1990-01-01 00:06:11    False\n1990-01-01 00:07:04    False\n1990-01-01 00:07:57    False\nFreq: 53S, dtype: bool>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x1118b9310>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": "array([-1])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": "array([False, False, False, False, False, False, False, False, False,\n       False])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "missing": {
                                    "variable_value": "array([ True])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "1"
                                },
                                "d": {
                                    "variable_value": "                     A  B\n1990-01-01 00:07:57  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of                      A  B\n1990-01-01 00:00:00  0  0\n1990-01-01 00:00:53  1  1\n1990-01-01 00:01:46  2  2\n1990-01-01 00:02:39  3  3\n1990-01-01 00:03:32  4  4\n1990-01-01 00:04:25  5  5\n1990-01-01 00:05:18  6  6\n1990-01-01 00:06:11  7  7\n1990-01-01 00:07:04  8  8\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": "             A   B\n1989-12-31 NaN NaN",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "1"
                                },
                                "d.copy": {
                                    "variable_value": "<bound method NDFrame.copy of                      A  B\n1990-01-01 00:07:57  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": "DatetimeIndex(['1989-12-31'], dtype='datetime64[ns]', freq=None)",
                                    "variable_type": "DatetimeIndex",
                                    "variable_shape": "1"
                                },
                                "data.loc": {
                                    "variable_value": "<pandas.core.indexing._LocIndexer object at 0x11eda3900>",
                                    "variable_type": "_LocIndexer",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": "<pandas.core.indexing._iLocIndexer object at 0x11eda3900>",
                                    "variable_type": "_iLocIndexer",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "where": {
                                    "variable_value": "'1989-12-31'",
                                    "variable_type": "str",
                                    "variable_shape": "10"
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "PeriodIndex(['1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "            A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x1118b9310>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "where": {
                                    "variable_value": "Period('1989-12-31', 'D')",
                                    "variable_type": "Period",
                                    "variable_shape": null
                                },
                                "Timestamp": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.is_monotonic": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.index": {
                                    "variable_value": "PeriodIndex(['1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01', '1990-01-01', '1990-01-01',\n             '1990-01-01', '1990-01-01'],\n            dtype='period[D]', freq='D')",
                                    "variable_type": "PeriodIndex",
                                    "variable_shape": "10"
                                },
                                "self": {
                                    "variable_value": "            A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9",
                                    "variable_type": "DataFrame",
                                    "variable_shape": "10"
                                },
                                "is_series": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "ABCSeries": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "subset": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "self.columns": {
                                    "variable_value": "Index(['A', 'B'], dtype='object')",
                                    "variable_type": "Index",
                                    "variable_shape": "2"
                                },
                                "is_list_like": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "is_list": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "start": {
                                    "variable_value": "Period('1990-01-01', 'D')",
                                    "variable_type": "Period",
                                    "variable_shape": null
                                },
                                "PeriodIndex": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Period": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.freq": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "Series": {
                                    "variable_value": "<class 'pandas.core.series.Series'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x110d505e0>"
                                },
                                "np.float64": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "np.nan": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.searchsorted": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._values": {
                                    "variable_value": "array([[0, 0],\n       [1, 1],\n       [2, 2],\n       [3, 3],\n       [4, 4],\n       [5, 5],\n       [6, 6],\n       [7, 7],\n       [8, 8],\n       [9, 9]])",
                                    "variable_type": "ndarray",
                                    "variable_shape": "10"
                                },
                                "isna": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "Index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "nulls": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.isna": {
                                    "variable_value": "<bound method DataFrame.isna of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "nulls.all": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._constructor": {
                                    "variable_value": "<class 'pandas.core.frame.DataFrame'>",
                                    "variable_type": "type",
                                    "variable_shape": "<property object at 0x1118b9310>"
                                },
                                "self.name": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "DataFrame": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "locs": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.index.asof_locs": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "nulls.values": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "missing": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.take": {
                                    "variable_value": "<bound method NDFrame.take of             A  B\n1990-01-01  0  0\n1990-01-01  1  1\n1990-01-01  2  2\n1990-01-01  3  3\n1990-01-01  4  4\n1990-01-01  5  5\n1990-01-01  6  6\n1990-01-01  7  7\n1990-01-01  8  8\n1990-01-01  9  9>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "data": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "d.copy": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.index": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.loc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "data.iloc": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _single_replace(self, to_replace, method, inplace, limit):\n    \"\"\"\n    Replaces values in a Series using the fill method specified when no\n    replacement value is given in the replace method\n    \"\"\"\n    if self.ndim != 1:\n        raise TypeError(\n            f\"cannot replace {to_replace} with method {method} on a \"\n            f\"{type(self).__name__}\"\n        )\n\n    orig_dtype = self.dtype\n    result = self if inplace else self.copy()\n    fill_f = missing.get_fill_func(method)\n\n    mask = missing.mask_missing(result.values, to_replace)\n    values = fill_f(result.values, limit=limit, mask=mask)\n\n    if values.dtype == orig_dtype and inplace:\n        return\n\n    result = pd.Series(values, index=self.index, dtype=self.dtype).__finalize__(self)\n\n    if inplace:\n        self._update_inplace(result._data)\n        return\n\n    return result",
                "def _doc_parms(cls):\n    \"\"\"Return a tuple of the doc parms.\"\"\"\n    axis_descr = (\n        f\"{{{', '.join(f'{a} ({i})' for i, a in enumerate(cls._AXIS_ORDERS))}}}\"\n    )\n    name = cls._constructor_sliced.__name__ if cls._AXIS_LEN > 1 else \"scalar\"\n    name2 = cls.__name__\n    return axis_descr, name, name2",
                "def _make_min_count_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also: str = \"\", examples: str = \"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=_min_count_stub,\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self,\n        axis=None,\n        skipna=None,\n        level=None,\n        numeric_only=None,\n        min_count=0,\n        **kwargs,\n    ):\n        if name == \"sum\":\n            nv.validate_sum(tuple(), kwargs)\n        elif name == \"prod\":\n            nv.validate_prod(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, min_count=min_count\n            )\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=numeric_only,\n            min_count=min_count,\n        )\n\n    return set_function_name(stat_func, name, cls)",
                "def _make_stat_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also: str = \"\", examples: str = \"\"\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=see_also,\n        examples=examples,\n    )\n    @Appender(_num_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n    ):\n        if name == \"median\":\n            nv.validate_median(tuple(), kwargs)\n        else:\n            nv.validate_stat_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n        )\n\n    return set_function_name(stat_func, name, cls)",
                "def _make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f):\n    @Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n    @Appender(_num_ddof_doc)\n    def stat_func(\n        self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n    ):\n        nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\n                name, axis=axis, level=level, skipna=skipna, ddof=ddof\n            )\n        return self._reduce(\n            f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n        )\n\n    return set_function_name(stat_func, name, cls)",
                "def _make_cum_function(\n    cls,\n    name,\n    name1,\n    name2,\n    axis_descr,\n    desc,\n    accum_func,\n    accum_func_name,\n    mask_a,\n    mask_b,\n    examples,\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        accum_func_name=accum_func_name,\n        examples=examples,\n    )\n    @Appender(_cnum_doc)\n    def cum_func(self, axis=None, skipna=True, *args, **kwargs):\n        skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n        if axis is None:\n            axis = self._stat_axis_number\n        else:\n            axis = self._get_axis_number(axis)\n\n        if axis == 1:\n            return cum_func(self.T, axis=0, skipna=skipna, *args, **kwargs).T\n\n        def na_accum_func(blk_values):\n            # We will be applying this function to block values\n            if blk_values.dtype.kind in [\"m\", \"M\"]:\n                # GH#30460, GH#29058\n                # numpy 1.18 started sorting NaTs at the end instead of beginning,\n                #  so we need to work around to maintain backwards-consistency.\n                orig_dtype = blk_values.dtype\n\n                # We need to define mask before masking NaTs\n                mask = isna(blk_values)\n\n                if accum_func == np.minimum.accumulate:\n                    # Note: the accum_func comparison fails as an \"is\" comparison\n                    y = blk_values.view(\"i8\")\n                    y[mask] = np.iinfo(np.int64).max\n                    changed = True\n                else:\n                    y = blk_values\n                    changed = False\n\n                result = accum_func(y.view(\"i8\"), axis)\n                if skipna:\n                    np.putmask(result, mask, iNaT)\n                elif accum_func == np.minimum.accumulate:\n                    # Restore NaTs that we masked previously\n                    nz = (~np.asarray(mask)).nonzero()[0]\n                    if len(nz):\n                        # everything up to the first non-na entry stays NaT\n                        result[: nz[0]] = iNaT\n\n                if changed:\n                    # restore NaT elements\n                    y[mask] = iNaT  # TODO: could try/finally for this?\n\n                if isinstance(blk_values, np.ndarray):\n                    result = result.view(orig_dtype)\n                else:\n                    # DatetimeArray\n                    result = type(blk_values)._from_sequence(result, dtype=orig_dtype)\n\n            elif skipna and not issubclass(\n                blk_values.dtype.type, (np.integer, np.bool_)\n            ):\n                vals = blk_values.copy().T\n                mask = isna(vals)\n                np.putmask(vals, mask, mask_a)\n                result = accum_func(vals, axis)\n                np.putmask(result, mask, mask_b)\n            else:\n                result = accum_func(blk_values.T, axis)\n\n            # transpose back for ndarray, not for EA\n            return result.T if hasattr(result, \"T\") else result\n\n        result = self._data.apply(na_accum_func)\n\n        d = self._construct_axes_dict()\n        d[\"copy\"] = False\n        return self._constructor(result, **d).__finalize__(self)\n\n    return set_function_name(cum_func, name, cls)",
                "def _make_logical_function(\n    cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value\n):\n    @Substitution(\n        desc=desc,\n        name1=name1,\n        name2=name2,\n        axis_descr=axis_descr,\n        see_also=see_also,\n        examples=examples,\n        empty_value=empty_value,\n    )\n    @Appender(_bool_doc)\n    def logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n        nv.validate_logical_func(tuple(), kwargs, fname=name)\n        if level is not None:\n            if bool_only is not None:\n                raise NotImplementedError(\n                    \"Option bool_only is not implemented with option level.\"\n                )\n            return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n        return self._reduce(\n            f,\n            name,\n            axis=axis,\n            skipna=skipna,\n            numeric_only=bool_only,\n            filter_type=\"bool\",\n        )\n\n    return set_function_name(logical_func, name, cls)",
                "def __init__(\n    self,\n    data: BlockManager,\n    axes: Optional[List[Index]] = None,\n    copy: bool = False,\n    dtype: Optional[Dtype] = None,\n    attrs: Optional[Mapping[Optional[Hashable], Any]] = None,\n    fastpath: bool = False,\n):\n\n    if not fastpath:\n        if dtype is not None:\n            data = data.astype(dtype)\n        elif copy:\n            data = data.copy()\n\n        if axes is not None:\n            for i, ax in enumerate(axes):\n                data = data.reindex_axis(ax, axis=i)\n\n    object.__setattr__(self, \"_is_copy\", None)\n    object.__setattr__(self, \"_data\", data)\n    object.__setattr__(self, \"_item_cache\", {})\n    if attrs is None:\n        attrs = {}\n    else:\n        attrs = dict(attrs)\n    object.__setattr__(self, \"_attrs\", attrs)",
                "def _init_mgr(self, mgr, axes=None, dtype=None, copy=False):\n    \"\"\" passed a manager and a axes dict \"\"\"\n    for a, axe in axes.items():\n        if axe is not None:\n            mgr = mgr.reindex_axis(\n                axe, axis=self._get_block_manager_axis(a), copy=False\n            )\n\n    # make a copy if explicitly requested\n    if copy:\n        mgr = mgr.copy()\n    if dtype is not None:\n        # avoid further copies if we can\n        if len(mgr.blocks) > 1 or mgr.blocks[0].values.dtype != dtype:\n            mgr = mgr.astype(dtype=dtype)\n    return mgr",
                "@property\ndef attrs(self) -> Dict[Optional[Hashable], Any]:\n    \"\"\"\n    Dictionary of global attributes on this object.\n    \"\"\"\n    if self._attrs is None:\n        self._attrs = {}\n    return self._attrs",
                "@attrs.setter\ndef attrs(self, value: Mapping[Optional[Hashable], Any]) -> None:\n    self._attrs = dict(value)",
                "def _validate_dtype(self, dtype):\n    \"\"\" validate the passed dtype \"\"\"\n\n    if dtype is not None:\n        dtype = pandas_dtype(dtype)\n\n        # a compound dtype\n        if dtype.kind == \"V\":\n            raise NotImplementedError(\n                \"compound dtypes are not implemented\"\n                f\" in the {type(self).__name__} constructor\"\n            )\n\n    return dtype",
                "@property\ndef _constructor(self: FrameOrSeries) -> Type[FrameOrSeries]:\n    \"\"\"Used when a manipulation result has the same dimensions as the\n    original.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "@property\ndef _constructor_sliced(self):\n    \"\"\"Used when a manipulation result has one lower dimension(s) as the\n    original, such as DataFrame single columns slicing.\n    \"\"\"\n    raise AbstractMethodError(self)",
                "@property\ndef _constructor_expanddim(self):\n    \"\"\"Used when a manipulation result has one higher dimension as the\n    original, such as Series.to_frame()\n    \"\"\"\n    raise NotImplementedError",
                "@classmethod\ndef _setup_axes(cls, axes: List[str], docs: Dict[str, str]) -> None:\n    \"\"\"\n    Provide axes setup for the major PandasObjects.\n\n    Parameters\n    ----------\n    axes : the names of the axes in order (lowest to highest)\n    docs : docstrings for the axis properties\n    \"\"\"\n    info_axis = len(axes) - 1\n    axes_are_reversed = len(axes) > 1\n\n    cls._AXIS_ORDERS = axes\n    cls._AXIS_NUMBERS = {a: i for i, a in enumerate(axes)}\n    cls._AXIS_LEN = len(axes)\n    cls._AXIS_NAMES = dict(enumerate(axes))\n    cls._AXIS_REVERSED = axes_are_reversed\n\n    cls._info_axis_number = info_axis\n    cls._info_axis_name = axes[info_axis]\n\n    # setup the actual axis\n    def set_axis(a, i):\n        setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n        cls._internal_names_set.add(a)\n\n    if axes_are_reversed:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, 1 - i)\n    else:\n        for i, a in cls._AXIS_NAMES.items():\n            set_axis(a, i)",
                "def _construct_axes_dict(self, axes=None, **kwargs):\n    \"\"\"Return an axes dictionary for myself.\"\"\"\n    d = {a: self._get_axis(a) for a in (axes or self._AXIS_ORDERS)}\n    d.update(kwargs)\n    return d",
                "@staticmethod\ndef _construct_axes_dict_from(self, axes, **kwargs):\n    \"\"\"Return an axes dictionary for the passed axes.\"\"\"\n    d = {a: ax for a, ax in zip(self._AXIS_ORDERS, axes)}\n    d.update(kwargs)\n    return d",
                "def _construct_axes_from_arguments(\n    self, args, kwargs, require_all: bool = False, sentinel=None\n):\n    \"\"\"Construct and returns axes if supplied in args/kwargs.\n\n    If require_all, raise if all axis arguments are not supplied\n    return a tuple of (axes, kwargs).\n\n    sentinel specifies the default parameter when an axis is not\n    supplied; useful to distinguish when a user explicitly passes None\n    in scenarios where None has special meaning.\n    \"\"\"\n\n    # construct the args\n    args = list(args)\n    for a in self._AXIS_ORDERS:\n\n        # look for a argument by position\n        if a not in kwargs:\n            try:\n                kwargs[a] = args.pop(0)\n            except IndexError:\n                if require_all:\n                    raise TypeError(\"not enough/duplicate arguments specified!\")\n\n    axes = {a: kwargs.pop(a, sentinel) for a in self._AXIS_ORDERS}\n    return axes, kwargs",
                "@classmethod\ndef _from_axes(cls: Type[FrameOrSeries], data, axes, **kwargs) -> FrameOrSeries:\n    # for construction from BlockManager\n    if isinstance(data, BlockManager):\n        return cls(data, **kwargs)\n    else:\n        if cls._AXIS_REVERSED:\n            axes = axes[::-1]\n        d = cls._construct_axes_dict_from(cls, axes, copy=False)\n        d.update(kwargs)\n        return cls(data, **d)",
                "@classmethod\ndef _get_axis_number(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if is_integer(axis):\n        if axis in cls._AXIS_NAMES:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NUMBERS[axis]\n        except KeyError:\n            pass\n    raise ValueError(f\"No axis named {axis} for object type {cls}\")",
                "@classmethod\ndef _get_axis_name(cls, axis):\n    axis = cls._AXIS_ALIASES.get(axis, axis)\n    if isinstance(axis, str):\n        if axis in cls._AXIS_NUMBERS:\n            return axis\n    else:\n        try:\n            return cls._AXIS_NAMES[axis]\n        except KeyError:\n            pass\n    raise ValueError(f\"No axis named {axis} for object type {cls}\")",
                "def _get_axis(self, axis):\n    name = self._get_axis_name(axis)\n    return getattr(self, name)",
                "@classmethod\ndef _get_block_manager_axis(cls, axis):\n    \"\"\"Map the axis to the block_manager axis.\"\"\"\n    axis = cls._get_axis_number(axis)\n    if cls._AXIS_REVERSED:\n        m = cls._AXIS_LEN - 1\n        return m - axis\n    return axis",
                "def _get_axis_resolvers(self, axis: str) -> Dict[str, ABCSeries]:\n    # index or columns\n    axis_index = getattr(self, axis)\n    d = dict()\n    prefix = axis[0]\n\n    for i, name in enumerate(axis_index.names):\n        if name is not None:\n            key = level = name\n        else:\n            # prefix with 'i' or 'c' depending on the input axis\n            # e.g., you must do ilevel_0 for the 0th level of an unnamed\n            # multiiindex\n            key = f\"{prefix}level_{i}\"\n            level = i\n\n        level_values = axis_index.get_level_values(level)\n        s = level_values.to_series()\n        s.index = axis_index\n        d[key] = s\n\n    # put the index/columns itself in the dict\n    if isinstance(axis_index, MultiIndex):\n        dindex = axis_index\n    else:\n        dindex = axis_index.to_series()\n\n    d[axis] = dindex\n    return d",
                "def _get_index_resolvers(self) -> Dict[str, ABCSeries]:\n    from pandas.core.computation.parsing import clean_column_name\n\n    d: Dict[str, ABCSeries] = {}\n    for axis_name in self._AXIS_ORDERS:\n        d.update(self._get_axis_resolvers(axis_name))\n\n    return {clean_column_name(k): v for k, v in d.items() if not isinstance(k, int)}",
                "def _get_cleaned_column_resolvers(self) -> Dict[str, ABCSeries]:\n    \"\"\"\n    Return the special character free column resolvers of a dataframe.\n\n    Column names with special characters are 'cleaned up' so that they can\n    be referred to by backtick quoting.\n    Used in :meth:`DataFrame.eval`.\n    \"\"\"\n    from pandas.core.computation.parsing import clean_column_name\n\n    if isinstance(self, ABCSeries):\n        return {clean_column_name(self.name): self}\n\n    return {\n        clean_column_name(k): v for k, v in self.items() if not isinstance(k, int)\n    }",
                "@property\ndef _info_axis(self):\n    return getattr(self, self._info_axis_name)",
                "@property\ndef _stat_axis(self):\n    return getattr(self, self._stat_axis_name)",
                "@property\ndef shape(self) -> Tuple[int, ...]:\n    \"\"\"\n    Return a tuple of axis dimensions\n    \"\"\"\n    return tuple(len(self._get_axis(a)) for a in self._AXIS_ORDERS)",
                "@property\ndef axes(self) -> List[Index]:\n    \"\"\"\n    Return index label(s) of the internal NDFrame\n    \"\"\"\n    # we do it this way because if we have reversed axes, then\n    # the block manager shows then reversed\n    return [self._get_axis(a) for a in self._AXIS_ORDERS]",
                "@property\ndef ndim(self) -> int:\n    \"\"\"\n    Return an int representing the number of axes / array dimensions.\n\n    Return 1 if Series. Otherwise return 2 if DataFrame.\n\n    See Also\n    --------\n    ndarray.ndim : Number of array dimensions.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.ndim\n    1\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.ndim\n    2\n    \"\"\"\n    return self._data.ndim",
                "@property\ndef size(self):\n    \"\"\"\n    Return an int representing the number of elements in this object.\n\n    Return the number of rows if Series. Otherwise return the number of\n    rows times number of columns if DataFrame.\n\n    See Also\n    --------\n    ndarray.size : Number of elements in the array.\n\n    Examples\n    --------\n    >>> s = pd.Series({'a': 1, 'b': 2, 'c': 3})\n    >>> s.size\n    3\n\n    >>> df = pd.DataFrame({'col1': [1, 2], 'col2': [3, 4]})\n    >>> df.size\n    4\n    \"\"\"\n    return np.prod(self.shape)",
                "@property\ndef _selected_obj(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                "@property\ndef _obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\" internal compat with SelectionMixin \"\"\"\n    return self",
                "def set_axis(self, labels, axis=0, inplace=False):\n    \"\"\"\n    Assign desired index to given axis.\n\n    Indexes for column or row labels can be changed by assigning\n    a list-like or Index.\n\n    .. versionchanged:: 0.21.0\n\n       The signature is now `labels` and `axis`, consistent with\n       the rest of pandas API. Previously, the `axis` and `labels`\n       arguments were respectively the first and second positional\n       arguments.\n\n    Parameters\n    ----------\n    labels : list-like, Index\n        The values for the new index.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to update. The value 0 identifies the rows, and 1\n        identifies the columns.\n\n    inplace : bool, default False\n        Whether to return a new %(klass)s instance.\n\n    Returns\n    -------\n    renamed : %(klass)s or None\n        An object of same type as caller if inplace=False, None otherwise.\n\n    See Also\n    --------\n    DataFrame.rename_axis : Alter the name of the index or columns.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n\n    >>> s.set_axis(['a', 'b', 'c'], axis=0)\n    a    1\n    b    2\n    c    3\n    dtype: int64\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n\n    Change the row labels.\n\n    >>> df.set_axis(['a', 'b', 'c'], axis='index')\n       A  B\n    a  1  4\n    b  2  5\n    c  3  6\n\n    Change the column labels.\n\n    >>> df.set_axis(['I', 'II'], axis='columns')\n       I  II\n    0  1   4\n    1  2   5\n    2  3   6\n\n    Now, update the labels inplace.\n\n    >>> df.set_axis(['i', 'ii'], axis='columns', inplace=True)\n    >>> df\n       i  ii\n    0  1   4\n    1  2   5\n    2  3   6\n    \"\"\"\n    if inplace:\n        setattr(self, self._get_axis_name(axis), labels)\n    else:\n        obj = self.copy()\n        obj.set_axis(labels, axis=axis, inplace=True)\n        return obj",
                "def _set_axis(self, axis, labels) -> None:\n    self._data.set_axis(axis, labels)\n    self._clear_item_cache()",
                "def swapaxes(self: FrameOrSeries, axis1, axis2, copy=True) -> FrameOrSeries:\n    \"\"\"\n    Interchange axes and swap values axes appropriately.\n\n    Returns\n    -------\n    y : same as input\n    \"\"\"\n    i = self._get_axis_number(axis1)\n    j = self._get_axis_number(axis2)\n\n    if i == j:\n        if copy:\n            return self.copy()\n        return self\n\n    mapping = {i: j, j: i}\n\n    new_axes = (self._get_axis(mapping.get(k, k)) for k in range(self._AXIS_LEN))\n    new_values = self.values.swapaxes(i, j)\n    if copy:\n        new_values = new_values.copy()\n\n    return self._constructor(new_values, *new_axes).__finalize__(self)",
                "def droplevel(self: FrameOrSeries, level, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Return DataFrame with requested index / column level(s) removed.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    level : int, str, or list-like\n        If a string is given, must be the name of a level\n        If list-like, elements must be names or positional indexes\n        of levels.\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n    Returns\n    -------\n    DataFrame\n        DataFrame with requested index / column level(s) removed.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([\n    ...     [1, 2, 3, 4],\n    ...     [5, 6, 7, 8],\n    ...     [9, 10, 11, 12]\n    ... ]).set_index([0, 1]).rename_axis(['a', 'b'])\n\n    >>> df.columns = pd.MultiIndex.from_tuples([\n    ...    ('c', 'e'), ('d', 'f')\n    ... ], names=['level_1', 'level_2'])\n\n    >>> df\n    level_1   c   d\n    level_2   e   f\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n\n    >>> df.droplevel('a')\n    level_1   c   d\n    level_2   e   f\n    b\n    2        3   4\n    6        7   8\n    10      11  12\n\n    >>> df.droplevel('level2', axis=1)\n    level_1   c   d\n    a b\n    1 2      3   4\n    5 6      7   8\n    9 10    11  12\n    \"\"\"\n    labels = self._get_axis(axis)\n    new_labels = labels.droplevel(level)\n    result = self.set_axis(new_labels, axis=axis, inplace=False)\n    return result",
                "def pop(self: FrameOrSeries, item) -> FrameOrSeries:\n    \"\"\"\n    Return item and drop from frame. Raise KeyError if not found.\n\n    Parameters\n    ----------\n    item : str\n        Label of column to be popped.\n\n    Returns\n    -------\n    Series\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=('name', 'class', 'max_speed'))\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  parrot    bird       24.0\n    2    lion  mammal       80.5\n    3  monkey  mammal        NaN\n\n    >>> df.pop('class')\n    0      bird\n    1      bird\n    2    mammal\n    3    mammal\n    Name: class, dtype: object\n\n    >>> df\n         name  max_speed\n    0  falcon      389.0\n    1  parrot       24.0\n    2    lion       80.5\n    3  monkey        NaN\n    \"\"\"\n    result = self[item]\n    del self[item]\n    try:\n        result._reset_cacher()\n    except AttributeError:\n        pass\n\n    return result",
                "def squeeze(self, axis=None):\n    \"\"\"\n    Squeeze 1 dimensional axis objects into scalars.\n\n    Series or DataFrames with a single element are squeezed to a scalar.\n    DataFrames with a single column or a single row are squeezed to a\n    Series. Otherwise the object is unchanged.\n\n    This method is most useful when you don't know if your\n    object is a Series or DataFrame, but you do know it has just a single\n    column. In that case you can safely call `squeeze` to ensure you have a\n    Series.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns', None}, default None\n        A specific axis to squeeze. By default, all length-1 axes are\n        squeezed.\n\n    Returns\n    -------\n    DataFrame, Series, or scalar\n        The projection after squeezing `axis` or all the axes.\n\n    See Also\n    --------\n    Series.iloc : Integer-location based indexing for selecting scalars.\n    DataFrame.iloc : Integer-location based indexing for selecting Series.\n    Series.to_frame : Inverse of DataFrame.squeeze for a\n        single-column DataFrame.\n\n    Examples\n    --------\n    >>> primes = pd.Series([2, 3, 5, 7])\n\n    Slicing might produce a Series with a single value:\n\n    >>> even_primes = primes[primes % 2 == 0]\n    >>> even_primes\n    0    2\n    dtype: int64\n\n    >>> even_primes.squeeze()\n    2\n\n    Squeezing objects with more than one value in every axis does nothing:\n\n    >>> odd_primes = primes[primes % 2 == 1]\n    >>> odd_primes\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    >>> odd_primes.squeeze()\n    1    3\n    2    5\n    3    7\n    dtype: int64\n\n    Squeezing is even more effective when used with DataFrames.\n\n    >>> df = pd.DataFrame([[1, 2], [3, 4]], columns=['a', 'b'])\n    >>> df\n       a  b\n    0  1  2\n    1  3  4\n\n    Slicing a single column will produce a DataFrame with the columns\n    having only one value:\n\n    >>> df_a = df[['a']]\n    >>> df_a\n       a\n    0  1\n    1  3\n\n    So the columns can be squeezed down, resulting in a Series:\n\n    >>> df_a.squeeze('columns')\n    0    1\n    1    3\n    Name: a, dtype: int64\n\n    Slicing a single row from a single column will produce a single\n    scalar DataFrame:\n\n    >>> df_0a = df.loc[df.index < 1, ['a']]\n    >>> df_0a\n       a\n    0  1\n\n    Squeezing the rows produces a single scalar Series:\n\n    >>> df_0a.squeeze('rows')\n    a    1\n    Name: 0, dtype: int64\n\n    Squeezing all axes will project directly into a scalar:\n\n    >>> df_0a.squeeze()\n    1\n    \"\"\"\n    axis = self._AXIS_NAMES if axis is None else (self._get_axis_number(axis),)\n    return self.iloc[\n        tuple(\n            0 if i in axis and len(a) == 1 else slice(None)\n            for i, a in enumerate(self.axes)\n        )\n    ]",
                "def swaplevel(self: FrameOrSeries, i=-2, j=-1, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Swap levels i and j in a MultiIndex on a particular axis\n\n    Parameters\n    ----------\n    i, j : int, str (can be mixed)\n        Level of index to be swapped. Can pass level name as string.\n\n    Returns\n    -------\n    swapped : same type as caller (new object)\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    result = self.copy()\n    labels = result._data.axes[axis]\n    result._data.set_axis(axis, labels.swaplevel(i, j))\n    return result",
                "def rename(self, *args, **kwargs):\n    \"\"\"\n    Alter axes input function or functions. Function / dict values must be\n    unique (1-to-1). Labels not contained in a dict / Series will be left\n    as-is. Extra labels listed don't throw an error. Alternatively, change\n    ``Series.name`` with a scalar value (Series only).\n\n    Parameters\n    ----------\n    %(axes)s : scalar, list-like, dict-like or function, optional\n        Scalar or list-like will alter the ``Series.name`` attribute,\n        and raise on DataFrame.\n        dict-like or functions are transformations to apply to\n        that axis' values\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Whether to return a new %(klass)s. If True then value of copy is\n        ignored.\n    level : int or level name, default None\n        In case of a MultiIndex, only rename labels in the specified\n        level.\n    errors : {'ignore', 'raise'}, default 'ignore'\n        If 'raise', raise a `KeyError` when a dict-like `mapper`, `index`,\n        or `columns` contains labels that are not present in the Index\n        being transformed.\n        If 'ignore', existing keys will be renamed and extra keys will be\n        ignored.\n\n    Returns\n    -------\n    renamed : %(klass)s (new object)\n\n    Raises\n    ------\n    KeyError\n        If any of the labels is not found in the selected axis and\n        \"errors='raise'\".\n\n    See Also\n    --------\n    NDFrame.rename_axis\n\n    Examples\n    --------\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s\n    0    1\n    1    2\n    2    3\n    dtype: int64\n    >>> s.rename(\"my_name\") # scalar, changes Series.name\n    0    1\n    1    2\n    2    3\n    Name: my_name, dtype: int64\n    >>> s.rename(lambda x: x ** 2)  # function, changes labels\n    0    1\n    1    2\n    4    3\n    dtype: int64\n    >>> s.rename({1: 3, 2: 5})  # mapping, changes labels\n    0    1\n    3    2\n    5    3\n    dtype: int64\n\n    Since ``DataFrame`` doesn't have a ``.name`` attribute,\n    only mapping-type arguments are allowed.\n\n    >>> df = pd.DataFrame({\"A\": [1, 2, 3], \"B\": [4, 5, 6]})\n    >>> df.rename(2)\n    Traceback (most recent call last):\n    ...\n    TypeError: 'int' object is not callable\n\n    ``DataFrame.rename`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"B\": \"c\"})\n       a  c\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename(index=str, columns={\"A\": \"a\", \"C\": \"c\"})\n       a  B\n    0  1  4\n    1  2  5\n    2  3  6\n\n    Using axis-style parameters\n\n    >>> df.rename(str.lower, axis='columns')\n       a  b\n    0  1  4\n    1  2  5\n    2  3  6\n\n    >>> df.rename({1: 2, 2: 4}, axis='index')\n       A  B\n    0  1  4\n    2  2  5\n    4  3  6\n\n    See the :ref:`user guide <basics.rename>` for more.\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    copy = kwargs.pop(\"copy\", True)\n    inplace = kwargs.pop(\"inplace\", False)\n    level = kwargs.pop(\"level\", None)\n    axis = kwargs.pop(\"axis\", None)\n    errors = kwargs.pop(\"errors\", \"ignore\")\n    if axis is not None:\n        # Validate the axis\n        self._get_axis_number(axis)\n\n    if kwargs:\n        raise TypeError(\n            \"rename() got an unexpected keyword \"\n            f'argument \"{list(kwargs.keys())[0]}\"'\n        )\n\n    if com.count_not_none(*axes.values()) == 0:\n        raise TypeError(\"must pass an index to rename\")\n\n    self._consolidate_inplace()\n    result = self if inplace else self.copy(deep=copy)\n\n    # start in the axis order to eliminate too many copies\n    for axis in range(self._AXIS_LEN):\n        v = axes.get(self._AXIS_NAMES[axis])\n        if v is None:\n            continue\n        f = com.get_rename_function(v)\n        baxis = self._get_block_manager_axis(axis)\n        if level is not None:\n            level = self.axes[axis]._get_level_number(level)\n\n        # GH 13473\n        if not callable(v):\n            indexer = self.axes[axis].get_indexer_for(v)\n            if errors == \"raise\" and len(indexer[indexer == -1]):\n                missing_labels = [\n                    label for index, label in enumerate(v) if indexer[index] == -1\n                ]\n                raise KeyError(f\"{missing_labels} not found in axis\")\n\n        result._data = result._data.rename_axis(\n            f, axis=baxis, copy=copy, level=level\n        )\n        result._clear_item_cache()\n\n    if inplace:\n        self._update_inplace(result._data)\n    else:\n        return result.__finalize__(self)",
                "@rewrite_axis_style_signature(\"mapper\", [(\"copy\", True), (\"inplace\", False)])\ndef rename_axis(self, mapper=lib.no_default, **kwargs):\n    \"\"\"\n    Set the name of the axis for the index or columns.\n\n    Parameters\n    ----------\n    mapper : scalar, list-like, optional\n        Value to set the axis name attribute.\n    index, columns : scalar, list-like, dict-like or function, optional\n        A scalar, list-like, dict-like or functions transformations to\n        apply to that axis' values.\n\n        Use either ``mapper`` and ``axis`` to\n        specify the axis to target with ``mapper``, or ``index``\n        and/or ``columns``.\n\n        .. versionchanged:: 0.24.0\n\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to rename.\n    copy : bool, default True\n        Also copy underlying data.\n    inplace : bool, default False\n        Modifies the object directly, instead of creating a new Series\n        or DataFrame.\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or None if `inplace` is True.\n\n    See Also\n    --------\n    Series.rename : Alter Series index labels or name.\n    DataFrame.rename : Alter DataFrame index labels or name.\n    Index.rename : Set new names on index.\n\n    Notes\n    -----\n    ``DataFrame.rename_axis`` supports two calling conventions\n\n    * ``(index=index_mapper, columns=columns_mapper, ...)``\n    * ``(mapper, axis={'index', 'columns'}, ...)``\n\n    The first calling convention will only modify the names of\n    the index and/or the names of the Index object that is the columns.\n    In this case, the parameter ``copy`` is ignored.\n\n    The second calling convention will modify the names of the\n    the corresponding index if mapper is a list or a scalar.\n    However, if mapper is dict-like or a function, it will use the\n    deprecated behavior of modifying the axis *labels*.\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Examples\n    --------\n    **Series**\n\n    >>> s = pd.Series([\"dog\", \"cat\", \"monkey\"])\n    >>> s\n    0       dog\n    1       cat\n    2    monkey\n    dtype: object\n    >>> s.rename_axis(\"animal\")\n    animal\n    0    dog\n    1    cat\n    2    monkey\n    dtype: object\n\n    **DataFrame**\n\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2],\n    ...                    \"num_arms\": [0, 0, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs  num_arms\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"animal\")\n    >>> df\n            num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n    >>> df = df.rename_axis(\"limbs\", axis=\"columns\")\n    >>> df\n    limbs   num_legs  num_arms\n    animal\n    dog            4         0\n    cat            4         0\n    monkey         2         2\n\n    **MultiIndex**\n\n    >>> df.index = pd.MultiIndex.from_product([['mammal'],\n    ...                                        ['dog', 'cat', 'monkey']],\n    ...                                       names=['type', 'name'])\n    >>> df\n    limbs          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(index={'type': 'class'})\n    limbs          num_legs  num_arms\n    class  name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n\n    >>> df.rename_axis(columns=str.upper)\n    LIMBS          num_legs  num_arms\n    type   name\n    mammal dog            4         0\n           cat            4         0\n           monkey         2         2\n    \"\"\"\n    axes, kwargs = self._construct_axes_from_arguments(\n        (), kwargs, sentinel=lib.no_default\n    )\n    copy = kwargs.pop(\"copy\", True)\n    inplace = kwargs.pop(\"inplace\", False)\n    axis = kwargs.pop(\"axis\", 0)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n\n    if kwargs:\n        raise TypeError(\n            \"rename_axis() got an unexpected keyword \"\n            f'argument \"{list(kwargs.keys())[0]}\"'\n        )\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    if mapper is not lib.no_default:\n        # Use v0.23 behavior if a scalar or list\n        non_mapper = is_scalar(mapper) or (\n            is_list_like(mapper) and not is_dict_like(mapper)\n        )\n        if non_mapper:\n            return self._set_axis_name(mapper, axis=axis, inplace=inplace)\n        else:\n            raise ValueError(\"Use `.rename` to alter labels with a mapper.\")\n    else:\n        # Use new behavior.  Means that index and/or columns\n        # is specified\n        result = self if inplace else self.copy(deep=copy)\n\n        for axis in range(self._AXIS_LEN):\n            v = axes.get(self._AXIS_NAMES[axis])\n            if v is lib.no_default:\n                continue\n            non_mapper = is_scalar(v) or (is_list_like(v) and not is_dict_like(v))\n            if non_mapper:\n                newnames = v\n            else:\n                f = com.get_rename_function(v)\n                curnames = self._get_axis(axis).names\n                newnames = [f(name) for name in curnames]\n            result._set_axis_name(newnames, axis=axis, inplace=True)\n        if not inplace:\n            return result",
                "def _set_axis_name(self, name, axis=0, inplace=False):\n    \"\"\"\n    Set the name(s) of the axis.\n\n    Parameters\n    ----------\n    name : str or list of str\n        Name(s) to set.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis to set the label. The value 0 or 'index' specifies index,\n        and the value 1 or 'columns' specifies columns.\n    inplace : bool, default False\n        If `True`, do operation inplace and return None.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series, DataFrame, or None\n        The same type as the caller or `None` if `inplace` is `True`.\n\n    See Also\n    --------\n    DataFrame.rename : Alter the axis labels of :class:`DataFrame`.\n    Series.rename : Alter the index labels or set the index name\n        of :class:`Series`.\n    Index.rename : Set the name of :class:`Index` or :class:`MultiIndex`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"num_legs\": [4, 4, 2]},\n    ...                   [\"dog\", \"cat\", \"monkey\"])\n    >>> df\n            num_legs\n    dog            4\n    cat            4\n    monkey         2\n    >>> df._set_axis_name(\"animal\")\n            num_legs\n    animal\n    dog            4\n    cat            4\n    monkey         2\n    >>> df.index = pd.MultiIndex.from_product(\n    ...                [[\"mammal\"], ['dog', 'cat', 'monkey']])\n    >>> df._set_axis_name([\"type\", \"name\"])\n                   legs\n    type   name\n    mammal dog        4\n           cat        4\n           monkey     2\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    idx = self._get_axis(axis).set_names(name)\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    renamed = self if inplace else self.copy()\n    renamed.set_axis(idx, axis=axis, inplace=True)\n    if not inplace:\n        return renamed",
                "def _indexed_same(self, other) -> bool:\n    return all(\n        self._get_axis(a).equals(other._get_axis(a)) for a in self._AXIS_ORDERS\n    )",
                "def equals(self, other):\n    \"\"\"\n    Test whether two objects contain the same elements.\n\n    This function allows two Series or DataFrames to be compared against\n    each other to see if they have the same shape and elements. NaNs in\n    the same location are considered equal. The column headers do not\n    need to have the same type, but the elements within the columns must\n    be the same dtype.\n\n    Parameters\n    ----------\n    other : Series or DataFrame\n        The other Series or DataFrame to be compared with the first.\n\n    Returns\n    -------\n    bool\n        True if all elements are the same in both objects, False\n        otherwise.\n\n    See Also\n    --------\n    Series.eq : Compare two Series objects of the same length\n        and return a Series where each element is True if the element\n        in each Series is equal, False otherwise.\n    DataFrame.eq : Compare two DataFrame objects of the same shape and\n        return a DataFrame where each element is True if the respective\n        element in each DataFrame is equal, False otherwise.\n    testing.assert_series_equal : Raises an AssertionError if left and\n        right are not equal. Provides an easy interface to ignore\n        inequality in dtypes, indexes and precision among others.\n    testing.assert_frame_equal : Like assert_series_equal, but targets\n        DataFrames.\n    numpy.array_equal : Return True if two arrays have the same shape\n        and elements, False otherwise.\n\n    Notes\n    -----\n    This function requires that the elements have the same dtype as their\n    respective elements in the other Series or DataFrame. However, the\n    column labels do not need to have the same type, as long as they are\n    still considered equal.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({1: [10], 2: [20]})\n    >>> df\n        1   2\n    0  10  20\n\n    DataFrames df and exactly_equal have the same types and values for\n    their elements and column labels, which will return True.\n\n    >>> exactly_equal = pd.DataFrame({1: [10], 2: [20]})\n    >>> exactly_equal\n        1   2\n    0  10  20\n    >>> df.equals(exactly_equal)\n    True\n\n    DataFrames df and different_column_type have the same element\n    types and values, but have different types for the column labels,\n    which will still return True.\n\n    >>> different_column_type = pd.DataFrame({1.0: [10], 2.0: [20]})\n    >>> different_column_type\n       1.0  2.0\n    0   10   20\n    >>> df.equals(different_column_type)\n    True\n\n    DataFrames df and different_data_type have different types for the\n    same values for their elements, and will return False even though\n    their column labels are the same values and types.\n\n    >>> different_data_type = pd.DataFrame({1: [10.0], 2: [20.0]})\n    >>> different_data_type\n          1     2\n    0  10.0  20.0\n    >>> df.equals(different_data_type)\n    False\n    \"\"\"\n    if not isinstance(other, self._constructor):\n        return False\n    return self._data.equals(other._data)",
                "def __neg__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values):\n        arr = operator.inv(values)\n    elif (\n        is_numeric_dtype(values)\n        or is_timedelta64_dtype(values)\n        or is_object_dtype(values)\n    ):\n        arr = operator.neg(values)\n    else:\n        raise TypeError(f\"Unary negative expects numeric dtype, not {values.dtype}\")\n    return self.__array_wrap__(arr)",
                "def __pos__(self):\n    values = com.values_from_object(self)\n    if is_bool_dtype(values) or is_period_arraylike(values):\n        arr = values\n    elif (\n        is_numeric_dtype(values)\n        or is_timedelta64_dtype(values)\n        or is_object_dtype(values)\n    ):\n        arr = operator.pos(values)\n    else:\n        raise TypeError(f\"Unary plus expects numeric dtype, not {values.dtype}\")\n    return self.__array_wrap__(arr)",
                "def __invert__(self):\n    if not self.size:\n        # inv fails with 0 len\n        return self\n\n    arr = operator.inv(com.values_from_object(self))\n    return self.__array_wrap__(arr)",
                "def __nonzero__(self):\n    raise ValueError(\n        f\"The truth value of a {type(self).__name__} is ambiguous. \"\n        \"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\n    )",
                "def bool(self):\n    \"\"\"\n    Return the bool of a single element PandasObject.\n\n    This must be a boolean scalar value, either True or False.  Raise a\n    ValueError if the PandasObject does not have exactly 1 element, or that\n    element is not boolean\n\n    Returns\n    -------\n    bool\n        Same single boolean value converted to bool type.\n    \"\"\"\n    v = self.squeeze()\n    if isinstance(v, (bool, np.bool_)):\n        return bool(v)\n    elif is_scalar(v):\n        raise ValueError(\n            \"bool cannot act on a non-boolean single element \"\n            f\"{type(self).__name__}\"\n        )\n\n    self.__nonzero__()",
                "def __abs__(self: FrameOrSeries) -> FrameOrSeries:\n    return self.abs()",
                "def __round__(self: FrameOrSeries, decimals: int = 0) -> FrameOrSeries:\n    return self.round(decimals)",
                "def _is_level_reference(self, key, axis=0):\n    \"\"\"\n    Test whether a key is a level reference for a given axis.\n\n    To be considered a level reference, `key` must be a string that:\n      - (axis=0): Matches the name of an index level and does NOT match\n        a column label.\n      - (axis=1): Matches the name of a column level and does NOT match\n        an index label.\n\n    Parameters\n    ----------\n    key : str\n        Potential level name for the given axis\n    axis : int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_level : bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n\n    return (\n        key is not None\n        and is_hashable(key)\n        and key in self.axes[axis].names\n        and not self._is_label_reference(key, axis=axis)\n    )",
                "def _is_label_reference(self, key, axis=0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label reference for a given axis.\n\n    To be considered a label reference, `key` must be a string that:\n      - (axis=0): Matches a column label\n      - (axis=1): Matches an index label\n\n    Parameters\n    ----------\n    key: str\n        Potential label name\n    axis: int, default 0\n        Axis perpendicular to the axis that labels are associated with\n        (0 means search for column labels, 1 means search for index labels)\n\n    Returns\n    -------\n    is_label: bool\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n    return (\n        key is not None\n        and is_hashable(key)\n        and any(key in self.axes[ax] for ax in other_axes)\n    )",
                "def _is_label_or_level_reference(self, key: str, axis: int = 0) -> bool_t:\n    \"\"\"\n    Test whether a key is a label or level reference for a given axis.\n\n    To be considered either a label or a level reference, `key` must be a\n    string that:\n      - (axis=0): Matches a column label or an index level\n      - (axis=1): Matches an index label or a column level\n\n    Parameters\n    ----------\n    key: str\n        Potential label or level name\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    is_label_or_level: bool\n    \"\"\"\n    return self._is_level_reference(key, axis=axis) or self._is_label_reference(\n        key, axis=axis\n    )",
                "def _check_label_or_level_ambiguity(self, key, axis: int = 0) -> None:\n    \"\"\"\n    Check whether `key` is ambiguous.\n\n    By ambiguous, we mean that it matches both a level of the input\n    `axis` and a label of the other axis.\n\n    Parameters\n    ----------\n    key: str or object\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns).\n\n    Raises\n    ------\n    ValueError: `key` is ambiguous\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = (ax for ax in range(self._AXIS_LEN) if ax != axis)\n\n    if (\n        key is not None\n        and is_hashable(key)\n        and key in self.axes[axis].names\n        and any(key in self.axes[ax] for ax in other_axes)\n    ):\n\n        # Build an informative and grammatical warning\n        level_article, level_type = (\n            (\"an\", \"index\") if axis == 0 else (\"a\", \"column\")\n        )\n\n        label_article, label_type = (\n            (\"a\", \"column\") if axis == 0 else (\"an\", \"index\")\n        )\n\n        msg = (\n            f\"'{key}' is both {level_article} {level_type} level and \"\n            f\"{label_article} {label_type} label, which is ambiguous.\"\n        )\n        raise ValueError(msg)",
                "def _get_label_or_level_values(self, key: str, axis: int = 0) -> np.ndarray:\n    \"\"\"\n    Return a 1-D array of values associated with `key`, a label or level\n    from the given `axis`.\n\n    Retrieval logic:\n      - (axis=0): Return column values if `key` matches a column label.\n        Otherwise return index level values if `key` matches an index\n        level.\n      - (axis=1): Return row values if `key` matches an index label.\n        Otherwise return column level values if 'key' matches a column\n        level\n\n    Parameters\n    ----------\n    key: str\n        Label or level name.\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    values: np.ndarray\n\n    Raises\n    ------\n    KeyError\n        if `key` matches neither a label nor a level\n    ValueError\n        if `key` matches multiple labels\n    FutureWarning\n        if `key` is ambiguous. This will become an ambiguity error in a\n        future version\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    other_axes = [ax for ax in range(self._AXIS_LEN) if ax != axis]\n\n    if self._is_label_reference(key, axis=axis):\n        self._check_label_or_level_ambiguity(key, axis=axis)\n        values = self.xs(key, axis=other_axes[0])._values\n    elif self._is_level_reference(key, axis=axis):\n        values = self.axes[axis].get_level_values(key)._values\n    else:\n        raise KeyError(key)\n\n    # Check for duplicates\n    if values.ndim > 1:\n\n        if other_axes and isinstance(self._get_axis(other_axes[0]), MultiIndex):\n            multi_message = (\n                \"\\n\"\n                \"For a multi-index, the label must be a \"\n                \"tuple with elements corresponding to \"\n                \"each level.\"\n            )\n        else:\n            multi_message = \"\"\n\n        label_axis_name = \"column\" if axis == 0 else \"index\"\n        raise ValueError(\n            (\n                f\"The {label_axis_name} label '{key}' \"\n                f\"is not unique.{multi_message}\"\n            )\n        )\n\n    return values",
                "def _drop_labels_or_levels(self, keys, axis: int = 0):\n    \"\"\"\n    Drop labels and/or levels for the given `axis`.\n\n    For each key in `keys`:\n      - (axis=0): If key matches a column label then drop the column.\n        Otherwise if key matches an index level then drop the level.\n      - (axis=1): If key matches an index label then drop the row.\n        Otherwise if key matches a column level then drop the level.\n\n    Parameters\n    ----------\n    keys: str or list of str\n        labels or levels to drop\n    axis: int, default 0\n        Axis that levels are associated with (0 for index, 1 for columns)\n\n    Returns\n    -------\n    dropped: DataFrame\n\n    Raises\n    ------\n    ValueError\n        if any `keys` match neither a label nor a level\n    \"\"\"\n    axis = self._get_axis_number(axis)\n\n    # Validate keys\n    keys = com.maybe_make_list(keys)\n    invalid_keys = [\n        k for k in keys if not self._is_label_or_level_reference(k, axis=axis)\n    ]\n\n    if invalid_keys:\n        raise ValueError(\n            (\n                \"The following keys are not valid labels or \"\n                f\"levels for axis {axis}: {invalid_keys}\"\n            )\n        )\n\n    # Compute levels and labels to drop\n    levels_to_drop = [k for k in keys if self._is_level_reference(k, axis=axis)]\n\n    labels_to_drop = [k for k in keys if not self._is_level_reference(k, axis=axis)]\n\n    # Perform copy upfront and then use inplace operations below.\n    # This ensures that we always perform exactly one copy.\n    # ``copy`` and/or ``inplace`` options could be added in the future.\n    dropped = self.copy()\n\n    if axis == 0:\n        # Handle dropping index levels\n        if levels_to_drop:\n            dropped.reset_index(levels_to_drop, drop=True, inplace=True)\n\n        # Handle dropping columns labels\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=1, inplace=True)\n    else:\n        # Handle dropping column levels\n        if levels_to_drop:\n            if isinstance(dropped.columns, MultiIndex):\n                # Drop the specified levels from the MultiIndex\n                dropped.columns = dropped.columns.droplevel(levels_to_drop)\n            else:\n                # Drop the last level of Index by replacing with\n                # a RangeIndex\n                dropped.columns = RangeIndex(dropped.columns.size)\n\n        # Handle dropping index labels\n        if labels_to_drop:\n            dropped.drop(labels_to_drop, axis=0, inplace=True)\n\n    return dropped",
                "def __hash__(self):\n    raise TypeError(\n        f\"{repr(type(self).__name__)} objects are mutable, \"\n        f\"thus they cannot be hashed\"\n    )",
                "def __iter__(self):\n    \"\"\"\n    Iterate over info axis.\n\n    Returns\n    -------\n    iterator\n        Info axis as iterator.\n    \"\"\"\n    return iter(self._info_axis)",
                "def keys(self):\n    \"\"\"\n    Get the 'info axis' (see Indexing for more).\n\n    This is index for Series, columns for DataFrame.\n\n    Returns\n    -------\n    Index\n        Info axis.\n    \"\"\"\n    return self._info_axis",
                "def items(self):\n    \"\"\"Iterate over (label, values) on info axis\n\n    This is index for Series and columns for DataFrame.\n\n    Returns\n    -------\n    Generator\n    \"\"\"\n    for h in self._info_axis:\n        yield h, self[h]",
                "@Appender(items.__doc__)\ndef iteritems(self):\n    return self.items()",
                "def __len__(self) -> int:\n    \"\"\"Returns length of info axis\"\"\"\n    return len(self._info_axis)",
                "def __contains__(self, key) -> bool_t:\n    \"\"\"True if the key is in the info axis\"\"\"\n    return key in self._info_axis",
                "@property\ndef empty(self) -> bool_t:\n    \"\"\"\n    Indicator whether DataFrame is empty.\n\n    True if DataFrame is entirely empty (no items), meaning any of the\n    axes are of length 0.\n\n    Returns\n    -------\n    bool\n        If DataFrame is empty, return True, if not return False.\n\n    See Also\n    --------\n    Series.dropna\n    DataFrame.dropna\n\n    Notes\n    -----\n    If DataFrame contains only NaNs, it is still not considered empty. See\n    the example below.\n\n    Examples\n    --------\n    An example of an actual empty DataFrame. Notice the index is empty:\n\n    >>> df_empty = pd.DataFrame({'A' : []})\n    >>> df_empty\n    Empty DataFrame\n    Columns: [A]\n    Index: []\n    >>> df_empty.empty\n    True\n\n    If we only have NaNs in our DataFrame, it is not considered empty! We\n    will need to drop the NaNs to make the DataFrame empty:\n\n    >>> df = pd.DataFrame({'A' : [np.nan]})\n    >>> df\n        A\n    0 NaN\n    >>> df.empty\n    False\n    >>> df.dropna().empty\n    True\n    \"\"\"\n    return any(len(self._get_axis(a)) == 0 for a in self._AXIS_ORDERS)",
                "def __array__(self, dtype=None):\n    return com.values_from_object(self)",
                "def __array_wrap__(self, result, context=None):\n    result = lib.item_from_zerodim(result)\n    if is_scalar(result):\n        # e.g. we get here with np.ptp(series)\n        # ptp also requires the item_from_zerodim\n        return result\n    d = self._construct_axes_dict(self._AXIS_ORDERS, copy=False)\n    return self._constructor(result, **d).__finalize__(self)",
                "def __getstate__(self) -> Dict[str, Any]:\n    meta = {k: getattr(self, k, None) for k in self._metadata}\n    return dict(\n        _data=self._data,\n        _typ=self._typ,\n        _metadata=self._metadata,\n        attrs=self.attrs,\n        **meta,\n    )",
                "def __setstate__(self, state):\n\n    if isinstance(state, BlockManager):\n        self._data = state\n    elif isinstance(state, dict):\n        typ = state.get(\"_typ\")\n        if typ is not None:\n            attrs = state.get(\"_attrs\", {})\n            object.__setattr__(self, \"_attrs\", attrs)\n\n            # set in the order of internal names\n            # to avoid definitional recursion\n            # e.g. say fill_value needing _data to be\n            # defined\n            meta = set(self._internal_names + self._metadata)\n            for k in list(meta):\n                if k in state:\n                    v = state[k]\n                    object.__setattr__(self, k, v)\n\n            for k, v in state.items():\n                if k not in meta:\n                    object.__setattr__(self, k, v)\n\n        else:\n            self._unpickle_series_compat(state)\n    elif len(state) == 2:\n        self._unpickle_series_compat(state)\n\n    self._item_cache = {}",
                "def __repr__(self) -> str:\n    # string representation based upon iterating over self\n    # (since, by definition, `PandasContainers` are iterable)\n    prepr = f\"[{','.join(map(pprint_thing, self))}]\"\n    return f\"{type(self).__name__}({prepr})\"",
                "def _repr_latex_(self):\n    \"\"\"\n    Returns a LaTeX representation for a particular object.\n    Mainly for use with nbconvert (jupyter notebook conversion to pdf).\n    \"\"\"\n    if config.get_option(\"display.latex.repr\"):\n        return self.to_latex()\n    else:\n        return None",
                "def _repr_data_resource_(self):\n    \"\"\"\n    Not a real Jupyter special repr method, but we use the same\n    naming convention.\n    \"\"\"\n    if config.get_option(\"display.html.table_schema\"):\n        data = self.head(config.get_option(\"display.max_rows\"))\n        payload = json.loads(\n            data.to_json(orient=\"table\"), object_pairs_hook=collections.OrderedDict\n        )\n        return payload",
                "@Appender(_shared_docs[\"to_excel\"] % dict(klass=\"object\"))\ndef to_excel(\n    self,\n    excel_writer,\n    sheet_name=\"Sheet1\",\n    na_rep=\"\",\n    float_format=None,\n    columns=None,\n    header=True,\n    index=True,\n    index_label=None,\n    startrow=0,\n    startcol=0,\n    engine=None,\n    merge_cells=True,\n    encoding=None,\n    inf_rep=\"inf\",\n    verbose=True,\n    freeze_panes=None,\n) -> None:\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n    from pandas.io.formats.excel import ExcelFormatter\n\n    formatter = ExcelFormatter(\n        df,\n        na_rep=na_rep,\n        cols=columns,\n        header=header,\n        float_format=float_format,\n        index=index,\n        index_label=index_label,\n        merge_cells=merge_cells,\n        inf_rep=inf_rep,\n    )\n    formatter.write(\n        excel_writer,\n        sheet_name=sheet_name,\n        startrow=startrow,\n        startcol=startcol,\n        freeze_panes=freeze_panes,\n        engine=engine,\n    )",
                "def to_json(\n    self,\n    path_or_buf: Optional[FilePathOrBuffer] = None,\n    orient: Optional[str] = None,\n    date_format: Optional[str] = None,\n    double_precision: int = 10,\n    force_ascii: bool_t = True,\n    date_unit: str = \"ms\",\n    default_handler: Optional[Callable[[Any], JSONSerializable]] = None,\n    lines: bool_t = False,\n    compression: Optional[str] = \"infer\",\n    index: bool_t = True,\n    indent: Optional[int] = None,\n) -> Optional[str]:\n    \"\"\"\n    Convert the object to a JSON string.\n\n    Note NaN's and None will be converted to null and datetime objects\n    will be converted to UNIX timestamps.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, optional\n        File path or object. If not specified, the result is returned as\n        a string.\n    orient : str\n        Indication of expected JSON string format.\n\n        * Series:\n\n            - default is 'index'\n            - allowed values are: {'split','records','index','table'}.\n\n        * DataFrame:\n\n            - default is 'columns'\n            - allowed values are: {'split', 'records', 'index', 'columns',\n              'values', 'table'}.\n\n        * The format of the JSON string:\n\n            - 'split' : dict like {'index' -> [index], 'columns' -> [columns],\n              'data' -> [values]}\n            - 'records' : list like [{column -> value}, ... , {column -> value}]\n            - 'index' : dict like {index -> {column -> value}}\n            - 'columns' : dict like {column -> {index -> value}}\n            - 'values' : just the values array\n            - 'table' : dict like {'schema': {schema}, 'data': {data}}\n\n            Describing the data, where data component is like ``orient='records'``.\n\n        .. versionchanged:: 0.20.0\n\n    date_format : {None, 'epoch', 'iso'}\n        Type of date conversion. 'epoch' = epoch milliseconds,\n        'iso' = ISO8601. The default depends on the `orient`. For\n        ``orient='table'``, the default is 'iso'. For all other orients,\n        the default is 'epoch'.\n    double_precision : int, default 10\n        The number of decimal places to use when encoding\n        floating point values.\n    force_ascii : bool, default True\n        Force encoded string to be ASCII.\n    date_unit : str, default 'ms' (milliseconds)\n        The time unit to encode to, governs timestamp and ISO8601\n        precision.  One of 's', 'ms', 'us', 'ns' for second, millisecond,\n        microsecond, and nanosecond respectively.\n    default_handler : callable, default None\n        Handler to call if object cannot otherwise be converted to a\n        suitable format for JSON. Should receive a single argument which is\n        the object to convert and return a serialisable object.\n    lines : bool, default False\n        If 'orient' is 'records' write out line delimited json format. Will\n        throw ValueError if incorrect 'orient' since others are not list\n        like.\n\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}\n\n        A string representing the compression to use in the output file,\n        only used when the first argument is a filename. By default, the\n        compression is inferred from the filename.\n\n        .. versionadded:: 0.21.0\n        .. versionchanged:: 0.24.0\n           'infer' option added and set to default\n    index : bool, default True\n        Whether to include the index values in the JSON string. Not\n        including the index (``index=False``) is only supported when\n        orient is 'split' or 'table'.\n\n        .. versionadded:: 0.23.0\n\n    indent : int, optional\n       Length of whitespace used to indent each record.\n\n       .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting json format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_json\n\n    Notes\n    -----\n    The behavior of ``indent=0`` varies from the stdlib, which does not\n    indent the output but does insert newlines. Currently, ``indent=0``\n    and the default ``indent=None`` are equivalent in pandas, though this\n    may change in a future release.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame([['a', 'b'], ['c', 'd']],\n    ...                   index=['row 1', 'row 2'],\n    ...                   columns=['col 1', 'col 2'])\n    >>> df.to_json(orient='split')\n    '{\"columns\":[\"col 1\",\"col 2\"],\n      \"index\":[\"row 1\",\"row 2\"],\n      \"data\":[[\"a\",\"b\"],[\"c\",\"d\"]]}'\n\n    Encoding/decoding a Dataframe using ``'records'`` formatted JSON.\n    Note that index labels are not preserved with this encoding.\n\n    >>> df.to_json(orient='records')\n    '[{\"col 1\":\"a\",\"col 2\":\"b\"},{\"col 1\":\"c\",\"col 2\":\"d\"}]'\n\n    Encoding/decoding a Dataframe using ``'index'`` formatted JSON:\n\n    >>> df.to_json(orient='index')\n    '{\"row 1\":{\"col 1\":\"a\",\"col 2\":\"b\"},\"row 2\":{\"col 1\":\"c\",\"col 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'columns'`` formatted JSON:\n\n    >>> df.to_json(orient='columns')\n    '{\"col 1\":{\"row 1\":\"a\",\"row 2\":\"c\"},\"col 2\":{\"row 1\":\"b\",\"row 2\":\"d\"}}'\n\n    Encoding/decoding a Dataframe using ``'values'`` formatted JSON:\n\n    >>> df.to_json(orient='values')\n    '[[\"a\",\"b\"],[\"c\",\"d\"]]'\n\n    Encoding with Table Schema\n\n    >>> df.to_json(orient='table')\n    '{\"schema\": {\"fields\": [{\"name\": \"index\", \"type\": \"string\"},\n                            {\"name\": \"col 1\", \"type\": \"string\"},\n                            {\"name\": \"col 2\", \"type\": \"string\"}],\n                 \"primaryKey\": \"index\",\n                 \"pandas_version\": \"0.20.0\"},\n      \"data\": [{\"index\": \"row 1\", \"col 1\": \"a\", \"col 2\": \"b\"},\n               {\"index\": \"row 2\", \"col 1\": \"c\", \"col 2\": \"d\"}]}'\n    \"\"\"\n\n    from pandas.io import json\n\n    if date_format is None and orient == \"table\":\n        date_format = \"iso\"\n    elif date_format is None:\n        date_format = \"epoch\"\n\n    config.is_nonnegative_int(indent)\n    indent = indent or 0\n\n    return json.to_json(\n        path_or_buf=path_or_buf,\n        obj=self,\n        orient=orient,\n        date_format=date_format,\n        double_precision=double_precision,\n        force_ascii=force_ascii,\n        date_unit=date_unit,\n        default_handler=default_handler,\n        lines=lines,\n        compression=compression,\n        index=index,\n        indent=indent,\n    )",
                "def to_hdf(\n    self,\n    path_or_buf,\n    key: str,\n    mode: str = \"a\",\n    complevel: Optional[int] = None,\n    complib: Optional[str] = None,\n    append: bool_t = False,\n    format: Optional[str] = None,\n    index: bool_t = True,\n    min_itemsize: Optional[Union[int, Dict[str, int]]] = None,\n    nan_rep=None,\n    dropna: Optional[bool_t] = None,\n    data_columns: Optional[List[str]] = None,\n    errors: str = \"strict\",\n    encoding: str = \"UTF-8\",\n) -> None:\n    \"\"\"\n    Write the contained data to an HDF5 file using HDFStore.\n\n    Hierarchical Data Format (HDF) is self-describing, allowing an\n    application to interpret the structure and contents of a file with\n    no outside information. One HDF file can hold a mix of related objects\n    which can be accessed as a group or as individual objects.\n\n    In order to add another DataFrame or Series to an existing HDF file\n    please use append mode and a different a key.\n\n    For more information see the :ref:`user guide <io.hdf5>`.\n\n    Parameters\n    ----------\n    path_or_buf : str or pandas.HDFStore\n        File path or HDFStore object.\n    key : str\n        Identifier for the group in the store.\n    mode : {'a', 'w', 'r+'}, default 'a'\n        Mode to open file:\n\n        - 'w': write, a new file is created (an existing file with\n          the same name would be deleted).\n        - 'a': append, an existing file is opened for reading and\n          writing, and if the file does not exist it is created.\n        - 'r+': similar to 'a', but the file must already exist.\n    complevel : {0-9}, optional\n        Specifies a compression level for data.\n        A value of 0 disables compression.\n    complib : {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'zlib'\n        Specifies the compression library to be used.\n        As of v0.20.2 these additional compressors for Blosc are supported\n        (default if no compressor specified: 'blosc:blosclz'):\n        {'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy',\n        'blosc:zlib', 'blosc:zstd'}.\n        Specifying a compression library which is not available issues\n        a ValueError.\n    append : bool, default False\n        For Table formats, append the input data to the existing.\n    format : {'fixed', 'table', None}, default 'fixed'\n        Possible values:\n\n        - 'fixed': Fixed format. Fast writing/reading. Not-appendable,\n          nor searchable.\n        - 'table': Table format. Write as a PyTables Table structure\n          which may perform worse but allow more flexible operations\n          like searching / selecting subsets of the data.\n        - If None, pd.get_option('io.hdf.default_format') is checked,\n          followed by fallback to \"fixed\"\n    errors : str, default 'strict'\n        Specifies how encoding and decoding errors are to be handled.\n        See the errors argument for :func:`open` for a full list\n        of options.\n    encoding : str, default \"UTF-8\"\n    min_itemsize : dict or int, optional\n        Map column names to minimum string sizes for columns.\n    nan_rep : Any, optional\n        How to represent null values as str.\n        Not allowed with append=True.\n    data_columns : list of columns or True, optional\n        List of columns to create as indexed data columns for on-disk\n        queries, or True to use all columns. By default only the axes\n        of the object are indexed. See :ref:`io.hdf5-query-data-columns`.\n        Applicable only to format='table'.\n\n    See Also\n    --------\n    DataFrame.read_hdf : Read from HDF file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n    DataFrame.to_sql : Write to a sql table.\n    DataFrame.to_feather : Write out feather-format for DataFrames.\n    DataFrame.to_csv : Write out to a csv file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]},\n    ...                   index=['a', 'b', 'c'])\n    >>> df.to_hdf('data.h5', key='df', mode='w')\n\n    We can add another object to the same file:\n\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s.to_hdf('data.h5', key='s')\n\n    Reading from HDF file:\n\n    >>> pd.read_hdf('data.h5', 'df')\n    A  B\n    a  1  4\n    b  2  5\n    c  3  6\n    >>> pd.read_hdf('data.h5', 's')\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    Deleting file with data:\n\n    >>> import os\n    >>> os.remove('data.h5')\n    \"\"\"\n    from pandas.io import pytables\n\n    pytables.to_hdf(\n        path_or_buf,\n        key,\n        self,\n        mode=mode,\n        complevel=complevel,\n        complib=complib,\n        append=append,\n        format=format,\n        index=index,\n        min_itemsize=min_itemsize,\n        nan_rep=nan_rep,\n        dropna=dropna,\n        data_columns=data_columns,\n        errors=errors,\n        encoding=encoding,\n    )",
                "def to_sql(\n    self,\n    name: str,\n    con,\n    schema=None,\n    if_exists: str = \"fail\",\n    index: bool_t = True,\n    index_label=None,\n    chunksize=None,\n    dtype=None,\n    method=None,\n) -> None:\n    \"\"\"\n    Write records stored in a DataFrame to a SQL database.\n\n    Databases supported by SQLAlchemy [1]_ are supported. Tables can be\n    newly created, appended to, or overwritten.\n\n    Parameters\n    ----------\n    name : str\n        Name of SQL table.\n    con : sqlalchemy.engine.Engine or sqlite3.Connection\n        Using SQLAlchemy makes it possible to use any DB supported by that\n        library. Legacy support is provided for sqlite3.Connection objects. The user\n        is responsible for engine disposal and connection closure for the SQLAlchemy\n        connectable See `here \\\n            <https://docs.sqlalchemy.org/en/13/core/connections.html>`_\n\n    schema : str, optional\n        Specify the schema (if database flavor supports this). If None, use\n        default schema.\n    if_exists : {'fail', 'replace', 'append'}, default 'fail'\n        How to behave if the table already exists.\n\n        * fail: Raise a ValueError.\n        * replace: Drop the table before inserting new values.\n        * append: Insert new values to the existing table.\n\n    index : bool, default True\n        Write DataFrame index as a column. Uses `index_label` as the column\n        name in the table.\n    index_label : str or sequence, default None\n        Column label for index column(s). If None is given (default) and\n        `index` is True, then the index names are used.\n        A sequence should be given if the DataFrame uses MultiIndex.\n    chunksize : int, optional\n        Specify the number of rows in each batch to be written at a time.\n        By default, all rows will be written at once.\n    dtype : dict or scalar, optional\n        Specifying the datatype for columns. If a dictionary is used, the\n        keys should be the column names and the values should be the\n        SQLAlchemy types or strings for the sqlite3 legacy mode. If a\n        scalar is provided, it will be applied to all columns.\n    method : {None, 'multi', callable}, optional\n        Controls the SQL insertion clause used:\n\n        * None : Uses standard SQL ``INSERT`` clause (one per row).\n        * 'multi': Pass multiple values in a single ``INSERT`` clause.\n        * callable with signature ``(pd_table, conn, keys, data_iter)``.\n\n        Details and a sample callable implementation can be found in the\n        section :ref:`insert method <io.sql.method>`.\n\n        .. versionadded:: 0.24.0\n\n    Raises\n    ------\n    ValueError\n        When the table already exists and `if_exists` is 'fail' (the\n        default).\n\n    See Also\n    --------\n    read_sql : Read a DataFrame from a table.\n\n    Notes\n    -----\n    Timezone aware datetime columns will be written as\n    ``Timestamp with timezone`` type with SQLAlchemy if supported by the\n    database. Otherwise, the datetimes will be stored as timezone unaware\n    timestamps local to the original timezone.\n\n    .. versionadded:: 0.24.0\n\n    References\n    ----------\n    .. [1] http://docs.sqlalchemy.org\n    .. [2] https://www.python.org/dev/peps/pep-0249/\n\n    Examples\n    --------\n\n    Create an in-memory SQLite database.\n\n    >>> from sqlalchemy import create_engine\n    >>> engine = create_engine('sqlite://', echo=False)\n\n    Create a table from scratch with 3 rows.\n\n    >>> df = pd.DataFrame({'name' : ['User 1', 'User 2', 'User 3']})\n    >>> df\n         name\n    0  User 1\n    1  User 2\n    2  User 3\n\n    >>> df.to_sql('users', con=engine)\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3')]\n\n    >>> df1 = pd.DataFrame({'name' : ['User 4', 'User 5']})\n    >>> df1.to_sql('users', con=engine, if_exists='append')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 1'), (1, 'User 2'), (2, 'User 3'),\n     (0, 'User 4'), (1, 'User 5')]\n\n    Overwrite the table with just ``df1``.\n\n    >>> df1.to_sql('users', con=engine, if_exists='replace',\n    ...            index_label='id')\n    >>> engine.execute(\"SELECT * FROM users\").fetchall()\n    [(0, 'User 4'), (1, 'User 5')]\n\n    Specify the dtype (especially useful for integers with missing values).\n    Notice that while pandas is forced to store the data as floating point,\n    the database supports nullable integers. When fetching the data with\n    Python, we get back integer scalars.\n\n    >>> df = pd.DataFrame({\"A\": [1, None, 2]})\n    >>> df\n         A\n    0  1.0\n    1  NaN\n    2  2.0\n\n    >>> from sqlalchemy.types import Integer\n    >>> df.to_sql('integers', con=engine, index=False,\n    ...           dtype={\"A\": Integer()})\n\n    >>> engine.execute(\"SELECT * FROM integers\").fetchall()\n    [(1,), (None,), (2,)]\n    \"\"\"\n    from pandas.io import sql\n\n    sql.to_sql(\n        self,\n        name,\n        con,\n        schema=schema,\n        if_exists=if_exists,\n        index=index,\n        index_label=index_label,\n        chunksize=chunksize,\n        dtype=dtype,\n        method=method,\n    )",
                "def to_pickle(\n    self,\n    path,\n    compression: Optional[str] = \"infer\",\n    protocol: int = pickle.HIGHEST_PROTOCOL,\n) -> None:\n    \"\"\"\n    Pickle (serialize) object to file.\n\n    Parameters\n    ----------\n    path : str\n        File path where the pickled object will be stored.\n    compression : {'infer', 'gzip', 'bz2', 'zip', 'xz', None}, \\\n    default 'infer'\n        A string representing the compression to use in the output file. By\n        default, infers from the file extension in specified path.\n    protocol : int\n        Int which indicates which protocol should be used by the pickler,\n        default HIGHEST_PROTOCOL (see [1]_ paragraph 12.1.2). The possible\n        values are 0, 1, 2, 3, 4. A negative value for the protocol\n        parameter is equivalent to setting its value to HIGHEST_PROTOCOL.\n\n        .. [1] https://docs.python.org/3/library/pickle.html.\n        .. versionadded:: 0.21.0.\n\n    See Also\n    --------\n    read_pickle : Load pickled pandas object (or any object) from file.\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_sql : Write DataFrame to a SQL database.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Examples\n    --------\n    >>> original_df = pd.DataFrame({\"foo\": range(5), \"bar\": range(5, 10)})\n    >>> original_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n    >>> original_df.to_pickle(\"./dummy.pkl\")\n\n    >>> unpickled_df = pd.read_pickle(\"./dummy.pkl\")\n    >>> unpickled_df\n       foo  bar\n    0    0    5\n    1    1    6\n    2    2    7\n    3    3    8\n    4    4    9\n\n    >>> import os\n    >>> os.remove(\"./dummy.pkl\")\n    \"\"\"\n    from pandas.io.pickle import to_pickle\n\n    to_pickle(self, path, compression=compression, protocol=protocol)",
                "def to_clipboard(\n    self, excel: bool_t = True, sep: Optional[str] = None, **kwargs\n) -> None:\n    r\"\"\"\n    Copy object to the system clipboard.\n\n    Write a text representation of object to the system clipboard.\n    This can be pasted into Excel, for example.\n\n    Parameters\n    ----------\n    excel : bool, default True\n        Produce output in a csv format for easy pasting into excel.\n\n        - True, use the provided separator for csv pasting.\n        - False, write a string representation of the object to the clipboard.\n\n    sep : str, default ``'\\t'``\n        Field delimiter.\n    **kwargs\n        These parameters will be passed to DataFrame.to_csv.\n\n    See Also\n    --------\n    DataFrame.to_csv : Write a DataFrame to a comma-separated values\n        (csv) file.\n    read_clipboard : Read text from clipboard and pass to read_table.\n\n    Notes\n    -----\n    Requirements for your platform.\n\n      - Linux : `xclip`, or `xsel` (with `PyQt4` modules)\n      - Windows : none\n      - OS X : none\n\n    Examples\n    --------\n    Copy the contents of a DataFrame to the clipboard.\n\n    >>> df = pd.DataFrame([[1, 2, 3], [4, 5, 6]], columns=['A', 'B', 'C'])\n    >>> df.to_clipboard(sep=',')\n    ... # Wrote the following to the system clipboard:\n    ... # ,A,B,C\n    ... # 0,1,2,3\n    ... # 1,4,5,6\n\n    We can omit the the index by passing the keyword `index` and setting\n    it to false.\n\n    >>> df.to_clipboard(sep=',', index=False)\n    ... # Wrote the following to the system clipboard:\n    ... # A,B,C\n    ... # 1,2,3\n    ... # 4,5,6\n    \"\"\"\n    from pandas.io import clipboards\n\n    clipboards.to_clipboard(self, excel=excel, sep=sep, **kwargs)",
                "def to_xarray(self):\n    \"\"\"\n    Return an xarray object from the pandas object.\n\n    Returns\n    -------\n    xarray.DataArray or xarray.Dataset\n        Data in the pandas structure converted to Dataset if the object is\n        a DataFrame, or a DataArray if the object is a Series.\n\n    See Also\n    --------\n    DataFrame.to_hdf : Write DataFrame to an HDF5 file.\n    DataFrame.to_parquet : Write a DataFrame to the binary parquet format.\n\n    Notes\n    -----\n    See the `xarray docs <http://xarray.pydata.org/en/stable/>`__\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0, 2),\n    ...                    ('parrot', 'bird', 24.0, 2),\n    ...                    ('lion', 'mammal', 80.5, 4),\n    ...                    ('monkey', 'mammal', np.nan, 4)],\n    ...                   columns=['name', 'class', 'max_speed',\n    ...                            'num_legs'])\n    >>> df\n         name   class  max_speed  num_legs\n    0  falcon    bird      389.0         2\n    1  parrot    bird       24.0         2\n    2    lion  mammal       80.5         4\n    3  monkey  mammal        NaN         4\n\n    >>> df.to_xarray()\n    <xarray.Dataset>\n    Dimensions:    (index: 4)\n    Coordinates:\n      * index      (index) int64 0 1 2 3\n    Data variables:\n        name       (index) object 'falcon' 'parrot' 'lion' 'monkey'\n        class      (index) object 'bird' 'bird' 'mammal' 'mammal'\n        max_speed  (index) float64 389.0 24.0 80.5 nan\n        num_legs   (index) int64 2 2 4 4\n\n    >>> df['max_speed'].to_xarray()\n    <xarray.DataArray 'max_speed' (index: 4)>\n    array([389. ,  24. ,  80.5,   nan])\n    Coordinates:\n      * index    (index) int64 0 1 2 3\n\n    >>> dates = pd.to_datetime(['2018-01-01', '2018-01-01',\n    ...                         '2018-01-02', '2018-01-02'])\n    >>> df_multiindex = pd.DataFrame({'date': dates,\n    ...                               'animal': ['falcon', 'parrot',\n    ...                                          'falcon', 'parrot'],\n    ...                               'speed': [350, 18, 361, 15]})\n    >>> df_multiindex = df_multiindex.set_index(['date', 'animal'])\n\n    >>> df_multiindex\n                       speed\n    date       animal\n    2018-01-01 falcon    350\n               parrot     18\n    2018-01-02 falcon    361\n               parrot     15\n\n    >>> df_multiindex.to_xarray()\n    <xarray.Dataset>\n    Dimensions:  (animal: 2, date: 2)\n    Coordinates:\n      * date     (date) datetime64[ns] 2018-01-01 2018-01-02\n      * animal   (animal) object 'falcon' 'parrot'\n    Data variables:\n        speed    (date, animal) int64 350 18 361 15\n    \"\"\"\n    xarray = import_optional_dependency(\"xarray\")\n\n    if self.ndim == 1:\n        return xarray.DataArray.from_series(self)\n    else:\n        return xarray.Dataset.from_dataframe(self)",
                "@Substitution(returns=fmt.return_docstring)\ndef to_latex(\n    self,\n    buf=None,\n    columns=None,\n    col_space=None,\n    header=True,\n    index=True,\n    na_rep=\"NaN\",\n    formatters=None,\n    float_format=None,\n    sparsify=None,\n    index_names=True,\n    bold_rows=False,\n    column_format=None,\n    longtable=None,\n    escape=None,\n    encoding=None,\n    decimal=\".\",\n    multicolumn=None,\n    multicolumn_format=None,\n    multirow=None,\n    caption=None,\n    label=None,\n):\n    r\"\"\"\n    Render object to a LaTeX tabular, longtable, or nested table/tabular.\n\n    Requires ``\\usepackage{booktabs}``.  The output can be copy/pasted\n    into a main LaTeX document or read from an external file\n    with ``\\input{table.tex}``.\n\n    .. versionchanged:: 0.20.2\n       Added to Series.\n\n    .. versionchanged:: 1.0.0\n       Added caption and label arguments.\n\n    Parameters\n    ----------\n    buf : str, Path or StringIO-like, optional, default None\n        Buffer to write to. If None, the output is returned as a string.\n    columns : list of label, optional\n        The subset of columns to write. Writes all columns by default.\n    col_space : int, optional\n        The minimum width of each column.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given,\n        it is assumed to be aliases for the column names.\n    index : bool, default True\n        Write row names (index).\n    na_rep : str, default 'NaN'\n        Missing data representation.\n    formatters : list of functions or dict of {str: function}, optional\n        Formatter functions to apply to columns' elements by position or\n        name. The result of each function must be a unicode string.\n        List must be of length equal to the number of columns.\n    float_format : one-parameter function or str, optional, default None\n        Formatter for floating point numbers. For example\n        ``float_format=\"%%.2f\"`` and ``float_format=\"{:0.2f}\".format`` will\n        both result in 0.1234 being formatted as 0.12.\n    sparsify : bool, optional\n        Set to False for a DataFrame with a hierarchical index to print\n        every multiindex key at each row. By default, the value will be\n        read from the config module.\n    index_names : bool, default True\n        Prints the names of the indexes.\n    bold_rows : bool, default False\n        Make the row labels bold in the output.\n    column_format : str, optional\n        The columns format as specified in `LaTeX table format\n        <https://en.wikibooks.org/wiki/LaTeX/Tables>`__ e.g. 'rcl' for 3\n        columns. By default, 'l' will be used for all columns except\n        columns of numbers, which default to 'r'.\n    longtable : bool, optional\n        By default, the value will be read from the pandas config\n        module. Use a longtable environment instead of tabular. Requires\n        adding a \\usepackage{longtable} to your LaTeX preamble.\n    escape : bool, optional\n        By default, the value will be read from the pandas config\n        module. When set to False prevents from escaping latex special\n        characters in column names.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    decimal : str, default '.'\n        Character recognized as decimal separator, e.g. ',' in Europe.\n    multicolumn : bool, default True\n        Use \\multicolumn to enhance MultiIndex columns.\n        The default will be read from the config module.\n    multicolumn_format : str, default 'l'\n        The alignment for multicolumns, similar to `column_format`\n        The default will be read from the config module.\n    multirow : bool, default False\n        Use \\multirow to enhance MultiIndex rows. Requires adding a\n        \\usepackage{multirow} to your LaTeX preamble. Will print\n        centered labels (instead of top-aligned) across the contained\n        rows, separating groups via clines. The default will be read\n        from the pandas config module.\n    caption : str, optional\n        The LaTeX caption to be placed inside ``\\caption{}`` in the output.\n\n        .. versionadded:: 1.0.0\n\n    label : str, optional\n        The LaTeX label to be placed inside ``\\label{}`` in the output.\n        This is used with ``\\ref{}`` in the main ``.tex`` file.\n\n        .. versionadded:: 1.0.0\n    %(returns)s\n    See Also\n    --------\n    DataFrame.to_string : Render a DataFrame to a console-friendly\n        tabular output.\n    DataFrame.to_html : Render a DataFrame as an HTML table.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> print(df.to_latex(index=False))  # doctest: +NORMALIZE_WHITESPACE\n    \\begin{tabular}{lll}\n     \\toprule\n           name &    mask &    weapon \\\\\n     \\midrule\n        Raphael &     red &       sai \\\\\n      Donatello &  purple &  bo staff \\\\\n    \\bottomrule\n    \\end{tabular}\n    \"\"\"\n    # Get defaults from the pandas config\n    if self.ndim == 1:\n        self = self.to_frame()\n    if longtable is None:\n        longtable = config.get_option(\"display.latex.longtable\")\n    if escape is None:\n        escape = config.get_option(\"display.latex.escape\")\n    if multicolumn is None:\n        multicolumn = config.get_option(\"display.latex.multicolumn\")\n    if multicolumn_format is None:\n        multicolumn_format = config.get_option(\"display.latex.multicolumn_format\")\n    if multirow is None:\n        multirow = config.get_option(\"display.latex.multirow\")\n\n    formatter = DataFrameFormatter(\n        self,\n        columns=columns,\n        col_space=col_space,\n        na_rep=na_rep,\n        header=header,\n        index=index,\n        formatters=formatters,\n        float_format=float_format,\n        bold_rows=bold_rows,\n        sparsify=sparsify,\n        index_names=index_names,\n        escape=escape,\n        decimal=decimal,\n    )\n    return formatter.to_latex(\n        buf=buf,\n        column_format=column_format,\n        longtable=longtable,\n        encoding=encoding,\n        multicolumn=multicolumn,\n        multicolumn_format=multicolumn_format,\n        multirow=multirow,\n        caption=caption,\n        label=label,\n    )",
                "def to_csv(\n    self,\n    path_or_buf: Optional[FilePathOrBuffer] = None,\n    sep: str = \",\",\n    na_rep: str = \"\",\n    float_format: Optional[str] = None,\n    columns: Optional[Sequence[Optional[Hashable]]] = None,\n    header: Union[bool_t, List[str]] = True,\n    index: bool_t = True,\n    index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]] = None,\n    mode: str = \"w\",\n    encoding: Optional[str] = None,\n    compression: Optional[Union[str, Mapping[str, str]]] = \"infer\",\n    quoting: Optional[int] = None,\n    quotechar: str = '\"',\n    line_terminator: Optional[str] = None,\n    chunksize: Optional[int] = None,\n    date_format: Optional[str] = None,\n    doublequote: bool_t = True,\n    escapechar: Optional[str] = None,\n    decimal: Optional[str] = \".\",\n) -> Optional[str]:\n    r\"\"\"\n    Write object to a comma-separated values (csv) file.\n\n    .. versionchanged:: 0.24.0\n        The order of arguments for Series was changed.\n\n    Parameters\n    ----------\n    path_or_buf : str or file handle, default None\n        File path or object, if None is provided the result is returned as\n        a string.  If a file object is passed it should be opened with\n        `newline=''`, disabling universal newlines.\n\n        .. versionchanged:: 0.24.0\n\n           Was previously named \"path\" for Series.\n\n    sep : str, default ','\n        String of length 1. Field delimiter for the output file.\n    na_rep : str, default ''\n        Missing data representation.\n    float_format : str, default None\n        Format string for floating point numbers.\n    columns : sequence, optional\n        Columns to write.\n    header : bool or list of str, default True\n        Write out the column names. If a list of strings is given it is\n        assumed to be aliases for the column names.\n\n        .. versionchanged:: 0.24.0\n\n           Previously defaulted to False for Series.\n\n    index : bool, default True\n        Write row names (index).\n    index_label : str or sequence, or False, default None\n        Column label for index column(s) if desired. If None is given, and\n        `header` and `index` are True, then the index names are used. A\n        sequence should be given if the object uses MultiIndex. If\n        False do not print fields for index names. Use index_label=False\n        for easier importing in R.\n    mode : str\n        Python write mode, default 'w'.\n    encoding : str, optional\n        A string representing the encoding to use in the output file,\n        defaults to 'utf-8'.\n    compression : str or dict, default 'infer'\n        If str, represents compression mode. If dict, value at 'method' is\n        the compression mode. Compression mode may be any of the following\n        possible values: {'infer', 'gzip', 'bz2', 'zip', 'xz', None}. If\n        compression mode is 'infer' and `path_or_buf` is path-like, then\n        detect compression mode from the following extensions: '.gz',\n        '.bz2', '.zip' or '.xz'. (otherwise no compression). If dict given\n        and mode is 'zip' or inferred as 'zip', other entries passed as\n        additional compression options.\n\n        .. versionchanged:: 1.0.0\n\n           May now be a dict with key 'method' as compression mode\n           and other entries as additional compression options if\n           compression mode is 'zip'.\n\n    quoting : optional constant from csv module\n        Defaults to csv.QUOTE_MINIMAL. If you have set a `float_format`\n        then floats are converted to strings and thus csv.QUOTE_NONNUMERIC\n        will treat them as non-numeric.\n    quotechar : str, default '\\\"'\n        String of length 1. Character used to quote fields.\n    line_terminator : str, optional\n        The newline character or character sequence to use in the output\n        file. Defaults to `os.linesep`, which depends on the OS in which\n        this method is called ('\\n' for linux, '\\r\\n' for Windows, i.e.).\n\n        .. versionchanged:: 0.24.0\n    chunksize : int or None\n        Rows to write at a time.\n    date_format : str, default None\n        Format string for datetime objects.\n    doublequote : bool, default True\n        Control quoting of `quotechar` inside a field.\n    escapechar : str, default None\n        String of length 1. Character used to escape `sep` and `quotechar`\n        when appropriate.\n    decimal : str, default '.'\n        Character recognized as decimal separator. E.g. use ',' for\n        European data.\n\n    Returns\n    -------\n    None or str\n        If path_or_buf is None, returns the resulting csv format as a\n        string. Otherwise returns None.\n\n    See Also\n    --------\n    read_csv : Load a CSV file into a DataFrame.\n    to_excel : Write DataFrame to an Excel file.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'name': ['Raphael', 'Donatello'],\n    ...                    'mask': ['red', 'purple'],\n    ...                    'weapon': ['sai', 'bo staff']})\n    >>> df.to_csv(index=False)\n    'name,mask,weapon\\nRaphael,red,sai\\nDonatello,purple,bo staff\\n'\n\n    # create 'out.zip' containing 'out.csv'\n    >>> compression_opts = dict(method='zip',\n    ...                         archive_name='out.csv')  # doctest: +SKIP\n\n    >>> df.to_csv('out.zip', index=False,\n    ...           compression=compression_opts)  # doctest: +SKIP\n    \"\"\"\n\n    df = self if isinstance(self, ABCDataFrame) else self.to_frame()\n\n    from pandas.io.formats.csvs import CSVFormatter\n\n    formatter = CSVFormatter(\n        df,\n        path_or_buf,\n        line_terminator=line_terminator,\n        sep=sep,\n        encoding=encoding,\n        compression=compression,\n        quoting=quoting,\n        na_rep=na_rep,\n        float_format=float_format,\n        cols=columns,\n        header=header,\n        index=index,\n        index_label=index_label,\n        mode=mode,\n        chunksize=chunksize,\n        quotechar=quotechar,\n        date_format=date_format,\n        doublequote=doublequote,\n        escapechar=escapechar,\n        decimal=decimal,\n    )\n    formatter.save()\n\n    if path_or_buf is None:\n        return formatter.path_or_buf.getvalue()\n\n    return None",
                "@classmethod\ndef _create_indexer(cls, name: str, indexer) -> None:\n    \"\"\"Create an indexer like _name in the class.\n\n    Kept for compatibility with geopandas. To be removed in the future. See GH27258\n    \"\"\"\n    if getattr(cls, name, None) is None:\n        _indexer = functools.partial(indexer, name)\n        setattr(cls, name, property(_indexer, doc=indexer.__doc__))",
                "def _set_as_cached(self, item, cacher) -> None:\n    \"\"\"Set the _cacher attribute on the calling object with a weakref to\n    cacher.\n    \"\"\"\n    self._cacher = (item, weakref.ref(cacher))",
                "def _reset_cacher(self) -> None:\n    \"\"\"Reset the cacher.\"\"\"\n    if hasattr(self, \"_cacher\"):\n        del self._cacher",
                "def _maybe_cache_changed(self, item, value) -> None:\n    \"\"\"The object has called back to us saying maybe it has changed.\n    \"\"\"\n    self._data.set(item, value)",
                "@property\ndef _is_cached(self) -> bool_t:\n    \"\"\"Return boolean indicating if self is cached or not.\"\"\"\n    return getattr(self, \"_cacher\", None) is not None",
                "def _get_cacher(self):\n    \"\"\"return my cacher or None\"\"\"\n    cacher = getattr(self, \"_cacher\", None)\n    if cacher is not None:\n        cacher = cacher[1]()\n    return cacher",
                "def _maybe_update_cacher(\n    self, clear: bool_t = False, verify_is_copy: bool_t = True\n) -> None:\n    \"\"\"\n    See if we need to update our parent cacher if clear, then clear our\n    cache.\n\n    Parameters\n    ----------\n    clear : bool, default False\n        Clear the item cache.\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n\n    cacher = getattr(self, \"_cacher\", None)\n    if cacher is not None:\n        ref = cacher[1]()\n\n        # we are trying to reference a dead referant, hence\n        # a copy\n        if ref is None:\n            del self._cacher\n        else:\n            # Note: we need to call ref._maybe_cache_changed even in the\n            #  case where it will raise.  (Uh, not clear why)\n            try:\n                ref._maybe_cache_changed(cacher[0], self)\n            except AssertionError:\n                # ref._data.setitem can raise\n                #  AssertionError because of shape mismatch\n                pass\n\n    if verify_is_copy:\n        self._check_setitem_copy(stacklevel=5, t=\"referant\")\n\n    if clear:\n        self._clear_item_cache()",
                "def _clear_item_cache(self) -> None:\n    self._item_cache.clear()",
                "def take(\n    self: FrameOrSeries, indices, axis=0, is_copy: Optional[bool_t] = None, **kwargs\n) -> FrameOrSeries:\n    \"\"\"\n    Return the elements in the given *positional* indices along an axis.\n\n    This means that we are not indexing according to actual values in\n    the index attribute of the object. We are indexing according to the\n    actual position of the element in the object.\n\n    Parameters\n    ----------\n    indices : array-like\n        An array of ints indicating which positions to take.\n    axis : {0 or 'index', 1 or 'columns', None}, default 0\n        The axis on which to select elements. ``0`` means that we are\n        selecting rows, ``1`` means that we are selecting columns.\n    is_copy : bool, default True\n        Whether to return a copy of the original object or not.\n\n        .. deprecated:: 1.0.0\n    **kwargs\n        For compatibility with :meth:`numpy.take`. Has no effect on the\n        output.\n\n    Returns\n    -------\n    taken : same type as caller\n        An array-like containing the elements taken from the object.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by labels.\n    DataFrame.iloc : Select a subset of a DataFrame by positions.\n    numpy.take : Take elements from an array along an axis.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([('falcon', 'bird', 389.0),\n    ...                    ('parrot', 'bird', 24.0),\n    ...                    ('lion', 'mammal', 80.5),\n    ...                    ('monkey', 'mammal', np.nan)],\n    ...                   columns=['name', 'class', 'max_speed'],\n    ...                   index=[0, 2, 3, 1])\n    >>> df\n         name   class  max_speed\n    0  falcon    bird      389.0\n    2  parrot    bird       24.0\n    3    lion  mammal       80.5\n    1  monkey  mammal        NaN\n\n    Take elements at positions 0 and 3 along the axis 0 (default).\n\n    Note how the actual indices selected (0 and 1) do not correspond to\n    our selected indices 0 and 3. That's because we are selecting the 0th\n    and 3rd rows, not rows whose indices equal 0 and 3.\n\n    >>> df.take([0, 3])\n         name   class  max_speed\n    0  falcon    bird      389.0\n    1  monkey  mammal        NaN\n\n    Take elements at indices 1 and 2 along the axis 1 (column selection).\n\n    >>> df.take([1, 2], axis=1)\n        class  max_speed\n    0    bird      389.0\n    2    bird       24.0\n    3  mammal       80.5\n    1  mammal        NaN\n\n    We may take elements using negative integers for positive indices,\n    starting from the end of the object, just like with Python lists.\n\n    >>> df.take([-1, -2])\n         name   class  max_speed\n    1  monkey  mammal        NaN\n    3    lion  mammal       80.5\n    \"\"\"\n    if is_copy is not None:\n        warnings.warn(\n            \"is_copy is deprecated and will be removed in a future version. \"\n            \"take will always return a copy in the future.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n    else:\n        is_copy = True\n\n    nv.validate_take(tuple(), kwargs)\n\n    self._consolidate_inplace()\n\n    new_data = self._data.take(\n        indices, axis=self._get_block_manager_axis(axis), verify=True\n    )\n    result = self._constructor(new_data).__finalize__(self)\n\n    # Maybe set copy if we didn't actually change the index.\n    if is_copy:\n        if not result._get_axis(axis).equals(self._get_axis(axis)):\n            result._set_is_copy(self)\n\n    return result",
                "def xs(self, key, axis=0, level=None, drop_level: bool_t = True):\n    \"\"\"\n    Return cross-section from the Series/DataFrame.\n\n    This method takes a `key` argument to select data at a particular\n    level of a MultiIndex.\n\n    Parameters\n    ----------\n    key : label or tuple of label\n        Label contained in the index, or partially in a MultiIndex.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Axis to retrieve cross-section on.\n    level : object, defaults to first n levels (n=1 or len(key))\n        In case of a key partially contained in a MultiIndex, indicate\n        which levels are used. Levels can be referred by label or position.\n    drop_level : bool, default True\n        If False, returns object with same levels as self.\n\n    Returns\n    -------\n    Series or DataFrame\n        Cross-section from the original Series or DataFrame\n        corresponding to the selected index levels.\n\n    See Also\n    --------\n    DataFrame.loc : Access a group of rows and columns\n        by label(s) or a boolean array.\n    DataFrame.iloc : Purely integer-location based indexing\n        for selection by position.\n\n    Notes\n    -----\n    `xs` can not be used to set values.\n\n    MultiIndex Slicers is a generic way to get/set values on\n    any level or levels.\n    It is a superset of `xs` functionality, see\n    :ref:`MultiIndex Slicers <advanced.mi_slicers>`.\n\n    Examples\n    --------\n    >>> d = {'num_legs': [4, 4, 2, 2],\n    ...      'num_wings': [0, 0, 2, 2],\n    ...      'class': ['mammal', 'mammal', 'mammal', 'bird'],\n    ...      'animal': ['cat', 'dog', 'bat', 'penguin'],\n    ...      'locomotion': ['walks', 'walks', 'flies', 'walks']}\n    >>> df = pd.DataFrame(data=d)\n    >>> df = df.set_index(['class', 'animal', 'locomotion'])\n    >>> df\n                               num_legs  num_wings\n    class  animal  locomotion\n    mammal cat     walks              4          0\n           dog     walks              4          0\n           bat     flies              2          2\n    bird   penguin walks              2          2\n\n    Get values at specified index\n\n    >>> df.xs('mammal')\n                       num_legs  num_wings\n    animal locomotion\n    cat    walks              4          0\n    dog    walks              4          0\n    bat    flies              2          2\n\n    Get values at several indexes\n\n    >>> df.xs(('mammal', 'dog'))\n                num_legs  num_wings\n    locomotion\n    walks              4          0\n\n    Get values at specified index and level\n\n    >>> df.xs('cat', level=1)\n                       num_legs  num_wings\n    class  locomotion\n    mammal walks              4          0\n\n    Get values at several indexes and levels\n\n    >>> df.xs(('bird', 'walks'),\n    ...       level=[0, 'locomotion'])\n             num_legs  num_wings\n    animal\n    penguin         2          2\n\n    Get values at specified column and axis\n\n    >>> df.xs('num_wings', axis=1)\n    class   animal   locomotion\n    mammal  cat      walks         0\n            dog      walks         0\n            bat      flies         2\n    bird    penguin  walks         2\n    Name: num_wings, dtype: int64\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    labels = self._get_axis(axis)\n    if level is not None:\n        loc, new_ax = labels.get_loc_level(key, level=level, drop_level=drop_level)\n\n        # create the tuple of the indexer\n        _indexer = [slice(None)] * self.ndim\n        _indexer[axis] = loc\n        indexer = tuple(_indexer)\n\n        result = self.iloc[indexer]\n        setattr(result, result._get_axis_name(axis), new_ax)\n        return result\n\n    if axis == 1:\n        return self[key]\n\n    self._consolidate_inplace()\n\n    index = self.index\n    if isinstance(index, MultiIndex):\n        loc, new_index = self.index.get_loc_level(key, drop_level=drop_level)\n    else:\n        loc = self.index.get_loc(key)\n\n        if isinstance(loc, np.ndarray):\n            if loc.dtype == np.bool_:\n                (inds,) = loc.nonzero()\n                return self.take(inds, axis=axis)\n            else:\n                return self.take(loc, axis=axis)\n\n        if not is_scalar(loc):\n            new_index = self.index[loc]\n\n    if is_scalar(loc):\n        new_values = self._data.fast_xs(loc)\n\n        # may need to box a datelike-scalar\n        #\n        # if we encounter an array-like and we only have 1 dim\n        # that means that their are list/ndarrays inside the Series!\n        # so just return them (GH 6394)\n        if not is_list_like(new_values) or self.ndim == 1:\n            return com.maybe_box_datetimelike(new_values)\n\n        result = self._constructor_sliced(\n            new_values,\n            index=self.columns,\n            name=self.index[loc],\n            dtype=new_values.dtype,\n        )\n\n    else:\n        result = self.iloc[loc]\n        result.index = new_index\n\n    # this could be a view\n    # but only in a single-dtyped view sliceable case\n    result._set_is_copy(self, copy=not result._is_view)\n    return result",
                "def __getitem__(self, item):\n    raise AbstractMethodError(self)",
                "def _get_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a label indexer.\"\"\"\n    cache = self._item_cache\n    res = cache.get(item)\n    if res is None:\n        values = self._data.get(item)\n        res = self._box_item_values(item, values)\n        cache[item] = res\n        res._set_as_cached(item, self)\n\n        # for a chain\n        res._is_copy = self._is_copy\n    return res",
                "def _iget_item_cache(self, item):\n    \"\"\"Return the cached item, item represents a positional indexer.\"\"\"\n    ax = self._info_axis\n    if ax.is_unique:\n        lower = self._get_item_cache(ax[item])\n    else:\n        lower = self.take(item, axis=self._info_axis_number)\n    return lower",
                "def _box_item_values(self, key, values):\n    raise AbstractMethodError(self)",
                "def _slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None) -> FrameOrSeries:\n    \"\"\"\n    Construct a slice of this container.\n\n    kind parameter is maintained for compatibility with Series slicing.\n    \"\"\"\n    axis = self._get_block_manager_axis(axis)\n    result = self._constructor(self._data.get_slice(slobj, axis=axis))\n    result = result.__finalize__(self)\n\n    # this could be a view\n    # but only in a single-dtyped view sliceable case\n    is_copy = axis != 0 or result._is_view\n    result._set_is_copy(self, copy=is_copy)\n    return result",
                "def _set_item(self, key, value) -> None:\n    self._data.set(key, value)\n    self._clear_item_cache()",
                "def _set_is_copy(self, ref=None, copy: bool_t = True) -> None:\n    if not copy:\n        self._is_copy = None\n    else:\n        if ref is not None:\n            self._is_copy = weakref.ref(ref)\n        else:\n            self._is_copy = None",
                "def _check_is_chained_assignment_possible(self) -> bool_t:\n    \"\"\"\n    Check if we are a view, have a cacher, and are of mixed type.\n    If so, then force a setitem_copy check.\n\n    Should be called just near setting a value\n\n    Will return a boolean if it we are a view and are cached, but a\n    single-dtype meaning that the cacher should be updated following\n    setting.\n    \"\"\"\n    if self._is_view and self._is_cached:\n        ref = self._get_cacher()\n        if ref is not None and ref._is_mixed_type:\n            self._check_setitem_copy(stacklevel=4, t=\"referant\", force=True)\n        return True\n    elif self._is_copy:\n        self._check_setitem_copy(stacklevel=4, t=\"referant\")\n    return False",
                "def _check_setitem_copy(self, stacklevel=4, t=\"setting\", force=False):\n    \"\"\"\n\n    Parameters\n    ----------\n    stacklevel : int, default 4\n       the level to show of the stack when the error is output\n    t : str, the type of setting error\n    force : bool, default False\n       If True, then force showing an error.\n\n    validate if we are doing a setitem on a chained copy.\n\n    If you call this function, be sure to set the stacklevel such that the\n    user will see the error *at the level of setting*\n\n    It is technically possible to figure out that we are setting on\n    a copy even WITH a multi-dtyped pandas object. In other words, some\n    blocks may be views while other are not. Currently _is_view will ALWAYS\n    return False for multi-blocks to avoid having to handle this case.\n\n    df = DataFrame(np.arange(0,9), columns=['count'])\n    df['group'] = 'b'\n\n    # This technically need not raise SettingWithCopy if both are view\n    # (which is not # generally guaranteed but is usually True.  However,\n    # this is in general not a good practice and we recommend using .loc.\n    df.iloc[0:5]['group'] = 'a'\n\n    \"\"\"\n\n    # return early if the check is not needed\n    if not (force or self._is_copy):\n        return\n\n    value = config.get_option(\"mode.chained_assignment\")\n    if value is None:\n        return\n\n    # see if the copy is not actually referred; if so, then dissolve\n    # the copy weakref\n    if self._is_copy is not None and not isinstance(self._is_copy, str):\n        r = self._is_copy()\n        if not gc.get_referents(r) or r.shape == self.shape:\n            self._is_copy = None\n            return\n\n    # a custom message\n    if isinstance(self._is_copy, str):\n        t = self._is_copy\n\n    elif t == \"referant\":\n        t = (\n            \"\\n\"\n            \"A value is trying to be set on a copy of a slice from a \"\n            \"DataFrame\\n\\n\"\n            \"See the caveats in the documentation: \"\n            \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n            \"indexing.html#returning-a-view-versus-a-copy\"\n        )\n\n    else:\n        t = (\n            \"\\n\"\n            \"A value is trying to be set on a copy of a slice from a \"\n            \"DataFrame.\\n\"\n            \"Try using .loc[row_indexer,col_indexer] = value \"\n            \"instead\\n\\nSee the caveats in the documentation: \"\n            \"https://pandas.pydata.org/pandas-docs/stable/user_guide/\"\n            \"indexing.html#returning-a-view-versus-a-copy\"\n        )\n\n    if value == \"raise\":\n        raise com.SettingWithCopyError(t)\n    elif value == \"warn\":\n        warnings.warn(t, com.SettingWithCopyWarning, stacklevel=stacklevel)",
                "def __delitem__(self, key) -> None:\n    \"\"\"\n    Delete item\n    \"\"\"\n    deleted = False\n\n    maybe_shortcut = False\n    if self.ndim == 2 and isinstance(self.columns, MultiIndex):\n        try:\n            maybe_shortcut = key not in self.columns._engine\n        except TypeError:\n            pass\n\n    if maybe_shortcut:\n        # Allow shorthand to delete all columns whose first len(key)\n        # elements match key:\n        if not isinstance(key, tuple):\n            key = (key,)\n        for col in self.columns:\n            if isinstance(col, tuple) and col[: len(key)] == key:\n                del self[col]\n                deleted = True\n    if not deleted:\n        # If the above loop ran and didn't delete anything because\n        # there was no match, this call should raise the appropriate\n        # exception:\n        self._data.delete(key)\n\n    # delete from the caches\n    try:\n        del self._item_cache[key]\n    except KeyError:\n        pass",
                "def get(self, key, default=None):\n    \"\"\"\n    Get item from object for given key (ex: DataFrame column).\n\n    Returns default value if not found.\n\n    Parameters\n    ----------\n    key : object\n\n    Returns\n    -------\n    value : same type as items contained in object\n    \"\"\"\n    try:\n        return self[key]\n    except (KeyError, ValueError, IndexError):\n        return default",
                "@property\ndef _is_view(self):\n    \"\"\"Return boolean indicating if self is view of another array \"\"\"\n    return self._data.is_view",
                "def reindex_like(\n    self: FrameOrSeries,\n    other,\n    method: Optional[str] = None,\n    copy: bool_t = True,\n    limit=None,\n    tolerance=None,\n) -> FrameOrSeries:\n    \"\"\"\n    Return an object with matching indices as other object.\n\n    Conform the object to the same index on all axes. Optional\n    filling logic, placing NaN in locations having no value\n    in the previous index. A new object is produced unless the\n    new index is equivalent to the current one and copy=False.\n\n    Parameters\n    ----------\n    other : Object of the same data type\n        Its row and column indices are used to define the new indices\n        of this object.\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: propagate last valid observation forward to next\n          valid\n        * backfill / bfill: use next valid observation to fill gap\n        * nearest: use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    limit : int, default None\n        Maximum number of consecutive labels to fill for inexact matches.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as caller, but with changed indices on each axis.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex : Change to new indices or expand indices.\n\n    Notes\n    -----\n    Same as calling\n    ``.reindex(index=other.index, columns=other.columns,...)``.\n\n    Examples\n    --------\n    >>> df1 = pd.DataFrame([[24.3, 75.7, 'high'],\n    ...                     [31, 87.8, 'high'],\n    ...                     [22, 71.6, 'medium'],\n    ...                     [35, 95, 'medium']],\n    ...                    columns=['temp_celsius', 'temp_fahrenheit',\n    ...                             'windspeed'],\n    ...                    index=pd.date_range(start='2014-02-12',\n    ...                                        end='2014-02-15', freq='D'))\n\n    >>> df1\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          24.3             75.7      high\n    2014-02-13          31.0             87.8      high\n    2014-02-14          22.0             71.6    medium\n    2014-02-15          35.0             95.0    medium\n\n    >>> df2 = pd.DataFrame([[28, 'low'],\n    ...                     [30, 'low'],\n    ...                     [35.1, 'medium']],\n    ...                    columns=['temp_celsius', 'windspeed'],\n    ...                    index=pd.DatetimeIndex(['2014-02-12', '2014-02-13',\n    ...                                            '2014-02-15']))\n\n    >>> df2\n                temp_celsius windspeed\n    2014-02-12          28.0       low\n    2014-02-13          30.0       low\n    2014-02-15          35.1    medium\n\n    >>> df2.reindex_like(df1)\n                temp_celsius  temp_fahrenheit windspeed\n    2014-02-12          28.0              NaN       low\n    2014-02-13          30.0              NaN       low\n    2014-02-14           NaN              NaN       NaN\n    2014-02-15          35.1              NaN    medium\n    \"\"\"\n    d = other._construct_axes_dict(\n        axes=self._AXIS_ORDERS,\n        method=method,\n        copy=copy,\n        limit=limit,\n        tolerance=tolerance,\n    )\n\n    return self.reindex(**d)",
                "def drop(\n    self,\n    labels=None,\n    axis=0,\n    index=None,\n    columns=None,\n    level=None,\n    inplace: bool_t = False,\n    errors: str = \"raise\",\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    if labels is not None:\n        if index is not None or columns is not None:\n            raise ValueError(\"Cannot specify both 'labels' and 'index'/'columns'\")\n        axis_name = self._get_axis_name(axis)\n        axes = {axis_name: labels}\n    elif index is not None or columns is not None:\n        axes, _ = self._construct_axes_from_arguments((index, columns), {})\n    else:\n        raise ValueError(\n            \"Need to specify at least one of 'labels', 'index' or 'columns'\"\n        )\n\n    obj = self\n\n    for axis, labels in axes.items():\n        if labels is not None:\n            obj = obj._drop_axis(labels, axis, level=level, errors=errors)\n\n    if inplace:\n        self._update_inplace(obj)\n    else:\n        return obj",
                "def _drop_axis(\n    self: FrameOrSeries, labels, axis, level=None, errors: str = \"raise\"\n) -> FrameOrSeries:\n    \"\"\"\n    Drop labels from specified axis. Used in the ``drop`` method\n    internally.\n\n    Parameters\n    ----------\n    labels : single label or list-like\n    axis : int or axis name\n    level : int or level name, default None\n        For MultiIndex\n    errors : {'ignore', 'raise'}, default 'raise'\n        If 'ignore', suppress error and existing labels are dropped.\n\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    axis = self._get_axis(axis)\n\n    if axis.is_unique:\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError(\"axis must be a MultiIndex\")\n            new_axis = axis.drop(labels, level=level, errors=errors)\n        else:\n            new_axis = axis.drop(labels, errors=errors)\n        result = self.reindex(**{axis_name: new_axis})\n\n    # Case for non-unique axis\n    else:\n        labels = ensure_object(com.index_labels_to_array(labels))\n        if level is not None:\n            if not isinstance(axis, MultiIndex):\n                raise AssertionError(\"axis must be a MultiIndex\")\n            indexer = ~axis.get_level_values(level).isin(labels)\n\n            # GH 18561 MultiIndex.drop should raise if label is absent\n            if errors == \"raise\" and indexer.all():\n                raise KeyError(f\"{labels} not found in axis\")\n        else:\n            indexer = ~axis.isin(labels)\n            # Check if label doesn't exist along axis\n            labels_missing = (axis.get_indexer_for(labels) == -1).any()\n            if errors == \"raise\" and labels_missing:\n                raise KeyError(f\"{labels} not found in axis\")\n\n        slicer = [slice(None)] * self.ndim\n        slicer[self._get_axis_number(axis_name)] = indexer\n\n        result = self.loc[tuple(slicer)]\n\n    return result",
                "def _update_inplace(self, result, verify_is_copy: bool_t = True) -> None:\n    \"\"\"\n    Replace self internals with result.\n\n    Parameters\n    ----------\n    verify_is_copy : bool, default True\n        Provide is_copy checks.\n    \"\"\"\n    # NOTE: This does *not* call __finalize__ and that's an explicit\n    # decision that we may revisit in the future.\n\n    self._reset_cache()\n    self._clear_item_cache()\n    self._data = getattr(result, \"_data\", result)\n    self._maybe_update_cacher(verify_is_copy=verify_is_copy)",
                "def add_prefix(self: FrameOrSeries, prefix: str) -> FrameOrSeries:\n    \"\"\"\n    Prefix labels with string `prefix`.\n\n    For Series, the row labels are prefixed.\n    For DataFrame, the column labels are prefixed.\n\n    Parameters\n    ----------\n    prefix : str\n        The string to add before each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_suffix: Suffix row labels with string `suffix`.\n    DataFrame.add_suffix: Suffix column labels with string `suffix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_prefix('item_')\n    item_0    1\n    item_1    2\n    item_2    3\n    item_3    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_prefix('col_')\n         col_A  col_B\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial(\"{prefix}{}\".format, prefix=prefix)\n\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                "def add_suffix(self: FrameOrSeries, suffix: str) -> FrameOrSeries:\n    \"\"\"\n    Suffix labels with string `suffix`.\n\n    For Series, the row labels are suffixed.\n    For DataFrame, the column labels are suffixed.\n\n    Parameters\n    ----------\n    suffix : str\n        The string to add after each label.\n\n    Returns\n    -------\n    Series or DataFrame\n        New Series or DataFrame with updated labels.\n\n    See Also\n    --------\n    Series.add_prefix: Prefix row labels with string `prefix`.\n    DataFrame.add_prefix: Prefix column labels with string `prefix`.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2, 3, 4])\n    >>> s\n    0    1\n    1    2\n    2    3\n    3    4\n    dtype: int64\n\n    >>> s.add_suffix('_item')\n    0_item    1\n    1_item    2\n    2_item    3\n    3_item    4\n    dtype: int64\n\n    >>> df = pd.DataFrame({'A': [1, 2, 3, 4], 'B': [3, 4, 5, 6]})\n    >>> df\n       A  B\n    0  1  3\n    1  2  4\n    2  3  5\n    3  4  6\n\n    >>> df.add_suffix('_col')\n         A_col  B_col\n    0       1       3\n    1       2       4\n    2       3       5\n    3       4       6\n    \"\"\"\n    f = functools.partial(\"{}{suffix}\".format, suffix=suffix)\n\n    mapper = {self._info_axis_name: f}\n    return self.rename(**mapper)",
                "def sort_values(\n    self,\n    by=None,\n    axis=0,\n    ascending=True,\n    inplace: bool_t = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n    ignore_index: bool_t = False,\n):\n    \"\"\"\n    Sort by the values along either axis.\n\n    Parameters\n    ----------%(optional_by)s\n    axis : %(axes_single_arg)s, default 0\n         Axis to be sorted.\n    ascending : bool or list of bool, default True\n         Sort ascending vs. descending. Specify list for multiple sort\n         orders.  If this is a list of bools, must match the length of\n         the by.\n    inplace : bool, default False\n         If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n         Choice of sorting algorithm. See also ndarray.np.sort for more\n         information.  `mergesort` is the only stable algorithm. For\n         DataFrames, this option is only applied when sorting on a single\n         column or label.\n    na_position : {'first', 'last'}, default 'last'\n         Puts NaNs at the beginning if `first`; `last` puts NaNs at the\n         end.\n    ignore_index : bool, default False\n         If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n         .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted values if inplace=False, None otherwise.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\n    ...     'col1': ['A', 'A', 'B', np.nan, 'D', 'C'],\n    ...     'col2': [2, 1, 9, 8, 7, 4],\n    ...     'col3': [0, 1, 9, 4, 2, 3],\n    ... })\n    >>> df\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n\n    Sort by col1\n\n    >>> df.sort_values(by=['col1'])\n        col1 col2 col3\n    0   A    2    0\n    1   A    1    1\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort by multiple columns\n\n    >>> df.sort_values(by=['col1', 'col2'])\n        col1 col2 col3\n    1   A    1    1\n    0   A    2    0\n    2   B    9    9\n    5   C    4    3\n    4   D    7    2\n    3   NaN  8    4\n\n    Sort Descending\n\n    >>> df.sort_values(by='col1', ascending=False)\n        col1 col2 col3\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    3   NaN  8    4\n\n    Putting NAs first\n\n    >>> df.sort_values(by='col1', ascending=False, na_position='first')\n        col1 col2 col3\n    3   NaN  8    4\n    4   D    7    2\n    5   C    4    3\n    2   B    9    9\n    0   A    2    0\n    1   A    1    1\n    \"\"\"\n    raise AbstractMethodError(self)",
                "def sort_index(\n    self,\n    axis=0,\n    level=None,\n    ascending: bool_t = True,\n    inplace: bool_t = False,\n    kind: str = \"quicksort\",\n    na_position: str = \"last\",\n    sort_remaining: bool_t = True,\n    ignore_index: bool_t = False,\n):\n    \"\"\"\n    Sort object by labels (along an axis).\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        The axis along which to sort.  The value 0 identifies the rows,\n        and 1 identifies the columns.\n    level : int or level name or list of ints or list of level names\n        If not None, sort on values in specified index level(s).\n    ascending : bool, default True\n        Sort ascending vs. descending.\n    inplace : bool, default False\n        If True, perform operation in-place.\n    kind : {'quicksort', 'mergesort', 'heapsort'}, default 'quicksort'\n        Choice of sorting algorithm. See also ndarray.np.sort for more\n        information.  `mergesort` is the only stable algorithm. For\n        DataFrames, this option is only applied when sorting on a single\n        column or label.\n    na_position : {'first', 'last'}, default 'last'\n        Puts NaNs at the beginning if `first`; `last` puts NaNs at the end.\n        Not implemented for MultiIndex.\n    sort_remaining : bool, default True\n        If True and sorting by level and index is multilevel, sort by other\n        levels too (in order) after sorting by specified level.\n    ignore_index : bool, default False\n        If True, the resulting axis will be labeled 0, 1, \u2026, n - 1.\n\n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    sorted_obj : DataFrame or None\n        DataFrame with sorted index if inplace=False, None otherwise.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    axis = self._get_axis_number(axis)\n    axis_name = self._get_axis_name(axis)\n    labels = self._get_axis(axis)\n\n    if level is not None:\n        raise NotImplementedError(\"level is not implemented\")\n    if inplace:\n        raise NotImplementedError(\"inplace is not implemented\")\n\n    sort_index = labels.argsort()\n    if not ascending:\n        sort_index = sort_index[::-1]\n\n    new_axis = labels.take(sort_index)\n    return self.reindex(**{axis_name: new_axis})",
                "def reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries:\n    \"\"\"\n    Conform %(klass)s to new index with optional filling logic.\n\n    Places NA/NaN in locations having no value in the previous index. A new object\n    is produced unless the new index is equivalent to the current one and\n    ``copy=False``.\n\n    Parameters\n    ----------\n    %(optional_labels)s\n    %(axes)s : array-like, optional\n        New labels / index to conform to, should be specified using\n        keywords. Preferably an Index object to avoid duplicating data.\n    %(optional_axis)s\n    method : {None, 'backfill'/'bfill', 'pad'/'ffill', 'nearest'}\n        Method to use for filling holes in reindexed DataFrame.\n        Please note: this is only applicable to DataFrames/Series with a\n        monotonically increasing/decreasing index.\n\n        * None (default): don't fill gaps\n        * pad / ffill: Propagate last valid observation forward to next\n          valid.\n        * backfill / bfill: Use next valid observation to fill gap.\n        * nearest: Use nearest valid observations to fill gap.\n\n    copy : bool, default True\n        Return a new object, even if the passed indexes are the same.\n    level : int or name\n        Broadcast across a level, matching Index values on the\n        passed MultiIndex level.\n    fill_value : scalar, default np.NaN\n        Value to use for missing values. Defaults to NaN, but can be any\n        \"compatible\" value.\n    limit : int, default None\n        Maximum number of consecutive elements to forward or backward fill.\n    tolerance : optional\n        Maximum distance between original and new labels for inexact\n        matches. The values of the index at the matching locations most\n        satisfy the equation ``abs(index[indexer] - target) <= tolerance``.\n\n        Tolerance may be a scalar value, which applies the same tolerance\n        to all values, or list-like, which applies variable tolerance per\n        element. List-like includes list, tuple, array, Series, and must be\n        the same size as the index and its dtype must exactly match the\n        index's type.\n\n        .. versionadded:: 0.21.0 (list-like tolerance)\n\n    Returns\n    -------\n    %(klass)s with changed index.\n\n    See Also\n    --------\n    DataFrame.set_index : Set row labels.\n    DataFrame.reset_index : Remove row labels or move them to new columns.\n    DataFrame.reindex_like : Change to same indices as other DataFrame.\n\n    Examples\n    --------\n\n    ``DataFrame.reindex`` supports two calling conventions\n\n    * ``(index=index_labels, columns=column_labels, ...)``\n    * ``(labels, axis={'index', 'columns'}, ...)``\n\n    We *highly* recommend using keyword arguments to clarify your\n    intent.\n\n    Create a dataframe with some fictional data.\n\n    >>> index = ['Firefox', 'Chrome', 'Safari', 'IE10', 'Konqueror']\n    >>> df = pd.DataFrame({'http_status': [200, 200, 404, 404, 301],\n    ...                   'response_time': [0.04, 0.02, 0.07, 0.08, 1.0]},\n    ...                   index=index)\n    >>> df\n               http_status  response_time\n    Firefox            200           0.04\n    Chrome             200           0.02\n    Safari             404           0.07\n    IE10               404           0.08\n    Konqueror          301           1.00\n\n    Create a new index and reindex the dataframe. By default\n    values in the new index that do not have corresponding\n    records in the dataframe are assigned ``NaN``.\n\n    >>> new_index = ['Safari', 'Iceweasel', 'Comodo Dragon', 'IE10',\n    ...              'Chrome']\n    >>> df.reindex(new_index)\n                   http_status  response_time\n    Safari               404.0           0.07\n    Iceweasel              NaN            NaN\n    Comodo Dragon          NaN            NaN\n    IE10                 404.0           0.08\n    Chrome               200.0           0.02\n\n    We can fill in the missing values by passing a value to\n    the keyword ``fill_value``. Because the index is not monotonically\n    increasing or decreasing, we cannot use arguments to the keyword\n    ``method`` to fill the ``NaN`` values.\n\n    >>> df.reindex(new_index, fill_value=0)\n                   http_status  response_time\n    Safari                 404           0.07\n    Iceweasel                0           0.00\n    Comodo Dragon            0           0.00\n    IE10                   404           0.08\n    Chrome                 200           0.02\n\n    >>> df.reindex(new_index, fill_value='missing')\n                  http_status response_time\n    Safari                404          0.07\n    Iceweasel         missing       missing\n    Comodo Dragon     missing       missing\n    IE10                  404          0.08\n    Chrome                200          0.02\n\n    We can also reindex the columns.\n\n    >>> df.reindex(columns=['http_status', 'user_agent'])\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    Or we can use \"axis-style\" keyword arguments\n\n    >>> df.reindex(['http_status', 'user_agent'], axis=\"columns\")\n               http_status  user_agent\n    Firefox            200         NaN\n    Chrome             200         NaN\n    Safari             404         NaN\n    IE10               404         NaN\n    Konqueror          301         NaN\n\n    To further illustrate the filling functionality in\n    ``reindex``, we will create a dataframe with a\n    monotonically increasing index (for example, a sequence\n    of dates).\n\n    >>> date_index = pd.date_range('1/1/2010', periods=6, freq='D')\n    >>> df2 = pd.DataFrame({\"prices\": [100, 101, np.nan, 100, 89, 88]},\n    ...                    index=date_index)\n    >>> df2\n                prices\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n\n    Suppose we decide to expand the dataframe to cover a wider\n    date range.\n\n    >>> date_index2 = pd.date_range('12/29/2009', periods=10, freq='D')\n    >>> df2.reindex(date_index2)\n                prices\n    2009-12-29     NaN\n    2009-12-30     NaN\n    2009-12-31     NaN\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    The index entries that did not have a value in the original data frame\n    (for example, '2009-12-29') are by default filled with ``NaN``.\n    If desired, we can fill in the missing values using one of several\n    options.\n\n    For example, to back-propagate the last valid value to fill the ``NaN``\n    values, pass ``bfill`` as an argument to the ``method`` keyword.\n\n    >>> df2.reindex(date_index2, method='bfill')\n                prices\n    2009-12-29   100.0\n    2009-12-30   100.0\n    2009-12-31   100.0\n    2010-01-01   100.0\n    2010-01-02   101.0\n    2010-01-03     NaN\n    2010-01-04   100.0\n    2010-01-05    89.0\n    2010-01-06    88.0\n    2010-01-07     NaN\n\n    Please note that the ``NaN`` value present in the original dataframe\n    (at index value 2010-01-03) will not be filled by any of the\n    value propagation schemes. This is because filling while reindexing\n    does not look at dataframe values, but only compares the original and\n    desired indexes. If you do want to fill in the ``NaN`` values present\n    in the original dataframe, use the ``fillna()`` method.\n\n    See the :ref:`user guide <basics.reindexing>` for more.\n    \"\"\"\n    # TODO: Decide if we care about having different examples for different\n    # kinds\n\n    # construct the args\n    axes, kwargs = self._construct_axes_from_arguments(args, kwargs)\n    method = missing.clean_reindex_fill_method(kwargs.pop(\"method\", None))\n    level = kwargs.pop(\"level\", None)\n    copy = kwargs.pop(\"copy\", True)\n    limit = kwargs.pop(\"limit\", None)\n    tolerance = kwargs.pop(\"tolerance\", None)\n    fill_value = kwargs.pop(\"fill_value\", None)\n\n    # Series.reindex doesn't use / need the axis kwarg\n    # We pop and ignore it here, to make writing Series/Frame generic code\n    # easier\n    kwargs.pop(\"axis\", None)\n\n    if kwargs:\n        raise TypeError(\n            \"reindex() got an unexpected keyword \"\n            f'argument \"{list(kwargs.keys())[0]}\"'\n        )\n\n    self._consolidate_inplace()\n\n    # if all axes that are requested to reindex are equal, then only copy\n    # if indicated must have index names equal here as well as values\n    if all(\n        self._get_axis(axis).identical(ax)\n        for axis, ax in axes.items()\n        if ax is not None\n    ):\n        if copy:\n            return self.copy()\n        return self\n\n    # check if we are a multi reindex\n    if self._needs_reindex_multi(axes, method, level):\n        return self._reindex_multi(axes, copy, fill_value)\n\n    # perform the reindex on the axes\n    return self._reindex_axes(\n        axes, level, limit, tolerance, method, fill_value, copy\n    ).__finalize__(self)",
                "def _reindex_axes(\n    self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy\n) -> FrameOrSeries:\n    \"\"\"Perform the reindex for all the axes.\"\"\"\n    obj = self\n    for a in self._AXIS_ORDERS:\n        labels = axes[a]\n        if labels is None:\n            continue\n\n        ax = self._get_axis(a)\n        new_index, indexer = ax.reindex(\n            labels, level=level, limit=limit, tolerance=tolerance, method=method\n        )\n\n        axis = self._get_axis_number(a)\n        obj = obj._reindex_with_indexers(\n            {axis: [new_index, indexer]},\n            fill_value=fill_value,\n            copy=copy,\n            allow_dups=False,\n        )\n\n    return obj",
                "def _needs_reindex_multi(self, axes, method, level) -> bool_t:\n    \"\"\"Check if we do need a multi reindex.\"\"\"\n    return (\n        (com.count_not_none(*axes.values()) == self._AXIS_LEN)\n        and method is None\n        and level is None\n        and not self._is_mixed_type\n    )",
                "def _reindex_multi(self, axes, copy, fill_value):\n    raise AbstractMethodError(self)",
                "def _reindex_with_indexers(\n    self: FrameOrSeries,\n    reindexers,\n    fill_value=None,\n    copy: bool_t = False,\n    allow_dups: bool_t = False,\n) -> FrameOrSeries:\n    \"\"\"allow_dups indicates an internal call here \"\"\"\n\n    # reindex doing multiple operations on different axes if indicated\n    new_data = self._data\n    for axis in sorted(reindexers.keys()):\n        index, indexer = reindexers[axis]\n        baxis = self._get_block_manager_axis(axis)\n\n        if index is None:\n            continue\n\n        index = ensure_index(index)\n        if indexer is not None:\n            indexer = ensure_int64(indexer)\n\n        # TODO: speed up on homogeneous DataFrame objects\n        new_data = new_data.reindex_indexer(\n            index,\n            indexer,\n            axis=baxis,\n            fill_value=fill_value,\n            allow_dups=allow_dups,\n            copy=copy,\n        )\n\n    if copy and new_data is self._data:\n        new_data = new_data.copy()\n\n    return self._constructor(new_data).__finalize__(self)",
                "def filter(\n    self: FrameOrSeries,\n    items=None,\n    like: Optional[str] = None,\n    regex: Optional[str] = None,\n    axis=None,\n) -> FrameOrSeries:\n    \"\"\"\n    Subset the dataframe rows or columns according to the specified index labels.\n\n    Note that this routine does not filter a dataframe on its\n    contents. The filter is applied to the labels of the index.\n\n    Parameters\n    ----------\n    items : list-like\n        Keep labels from axis which are in items.\n    like : str\n        Keep labels from axis for which \"like in label == True\".\n    regex : str (regular expression)\n        Keep labels from axis for which re.search(regex, label) == True.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        The axis to filter on, expressed either as an index (int)\n        or axis name (str). By default this is the info axis,\n        'index' for Series, 'columns' for DataFrame.\n\n    Returns\n    -------\n    same type as input object\n\n    See Also\n    --------\n    DataFrame.loc\n\n    Notes\n    -----\n    The ``items``, ``like``, and ``regex`` parameters are\n    enforced to be mutually exclusive.\n\n    ``axis`` defaults to the info axis that is used when indexing\n    with ``[]``.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame(np.array(([1, 2, 3], [4, 5, 6])),\n    ...                   index=['mouse', 'rabbit'],\n    ...                   columns=['one', 'two', 'three'])\n\n    >>> # select columns by name\n    >>> df.filter(items=['one', 'three'])\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select columns by regular expression\n    >>> df.filter(regex='e$', axis=1)\n             one  three\n    mouse     1      3\n    rabbit    4      6\n\n    >>> # select rows containing 'bbi'\n    >>> df.filter(like='bbi', axis=0)\n             one  two  three\n    rabbit    4    5      6\n    \"\"\"\n    nkw = com.count_not_none(items, like, regex)\n    if nkw > 1:\n        raise TypeError(\n            \"Keyword arguments `items`, `like`, or `regex` \"\n            \"are mutually exclusive\"\n        )\n\n    if axis is None:\n        axis = self._info_axis_name\n    labels = self._get_axis(axis)\n\n    if items is not None:\n        name = self._get_axis_name(axis)\n        return self.reindex(**{name: [r for r in items if r in labels]})\n    elif like:\n\n        def f(x):\n            return like in ensure_str(x)\n\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    elif regex:\n\n        def f(x):\n            return matcher.search(ensure_str(x)) is not None\n\n        matcher = re.compile(regex)\n        values = labels.map(f)\n        return self.loc(axis=axis)[values]\n    else:\n        raise TypeError(\"Must pass either `items`, `like`, or `regex`\")",
                "def head(self: FrameOrSeries, n: int = 5) -> FrameOrSeries:\n    \"\"\"\n    Return the first `n` rows.\n\n    This function returns the first `n` rows for the object based\n    on position. It is useful for quickly testing if your object\n    has the right type of data in it.\n\n    For negative values of `n`, this function returns all rows except\n    the last `n` rows, equivalent to ``df[:-n]``.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    same type as caller\n        The first `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.tail: Returns the last `n` rows.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the first 5 lines\n\n    >>> df.head()\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n\n    Viewing the first `n` lines (three in this case)\n\n    >>> df.head(3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n\n    For negative values of `n`\n\n    >>> df.head(-3)\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    \"\"\"\n\n    return self.iloc[:n]",
                "def tail(self: FrameOrSeries, n: int = 5) -> FrameOrSeries:\n    \"\"\"\n    Return the last `n` rows.\n\n    This function returns last `n` rows from the object based on\n    position. It is useful for quickly verifying data, for example,\n    after sorting or appending rows.\n\n    For negative values of `n`, this function returns all rows except\n    the first `n` rows, equivalent to ``df[n:]``.\n\n    Parameters\n    ----------\n    n : int, default 5\n        Number of rows to select.\n\n    Returns\n    -------\n    type of caller\n        The last `n` rows of the caller object.\n\n    See Also\n    --------\n    DataFrame.head : The first `n` rows of the caller object.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'animal': ['alligator', 'bee', 'falcon', 'lion',\n    ...                    'monkey', 'parrot', 'shark', 'whale', 'zebra']})\n    >>> df\n          animal\n    0  alligator\n    1        bee\n    2     falcon\n    3       lion\n    4     monkey\n    5     parrot\n    6      shark\n    7      whale\n    8      zebra\n\n    Viewing the last 5 lines\n\n    >>> df.tail()\n       animal\n    4  monkey\n    5  parrot\n    6   shark\n    7   whale\n    8   zebra\n\n    Viewing the last `n` lines (three in this case)\n\n    >>> df.tail(3)\n      animal\n    6  shark\n    7  whale\n    8  zebra\n\n    For negative values of `n`\n\n    >>> df.tail(-3)\n       animal\n    3    lion\n    4  monkey\n    5  parrot\n    6   shark\n    7   whale\n    8   zebra\n    \"\"\"\n\n    if n == 0:\n        return self.iloc[0:0]\n    return self.iloc[-n:]",
                "def sample(\n    self: FrameOrSeries,\n    n=None,\n    frac=None,\n    replace=False,\n    weights=None,\n    random_state=None,\n    axis=None,\n) -> FrameOrSeries:\n    \"\"\"\n    Return a random sample of items from an axis of object.\n\n    You can use `random_state` for reproducibility.\n\n    Parameters\n    ----------\n    n : int, optional\n        Number of items from axis to return. Cannot be used with `frac`.\n        Default = 1 if `frac` = None.\n    frac : float, optional\n        Fraction of axis items to return. Cannot be used with `n`.\n    replace : bool, default False\n        Allow or disallow sampling of the same row more than once.\n    weights : str or ndarray-like, optional\n        Default 'None' results in equal probability weighting.\n        If passed a Series, will align with target object on index. Index\n        values in weights not found in sampled object will be ignored and\n        index values in sampled object not in weights will be assigned\n        weights of zero.\n        If called on a DataFrame, will accept the name of a column\n        when axis = 0.\n        Unless weights are a Series, weights must be same length as axis\n        being sampled.\n        If weights do not sum to 1, they will be normalized to sum to 1.\n        Missing values in the weights column will be treated as zero.\n        Infinite values not allowed.\n    random_state : int or numpy.random.RandomState, optional\n        Seed for the random number generator (if int), or numpy RandomState\n        object.\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default None\n        Axis to sample. Accepts axis number or name. Default is stat axis\n        for given data type (0 for Series and DataFrames).\n\n    Returns\n    -------\n    Series or DataFrame\n        A new object of same type as caller containing `n` items randomly\n        sampled from the caller object.\n\n    See Also\n    --------\n    numpy.random.choice: Generates a random sample from a given 1-D numpy\n        array.\n\n    Notes\n    -----\n    If `frac` > 1, `replacement` should be set to `True`.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'num_legs': [2, 4, 8, 0],\n    ...                    'num_wings': [2, 0, 0, 0],\n    ...                    'num_specimen_seen': [10, 2, 1, 8]},\n    ...                   index=['falcon', 'dog', 'spider', 'fish'])\n    >>> df\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    dog            4          0                  2\n    spider         8          0                  1\n    fish           0          0                  8\n\n    Extract 3 random elements from the ``Series`` ``df['num_legs']``:\n    Note that we use `random_state` to ensure the reproducibility of\n    the examples.\n\n    >>> df['num_legs'].sample(n=3, random_state=1)\n    fish      0\n    spider    8\n    falcon    2\n    Name: num_legs, dtype: int64\n\n    A random 50% sample of the ``DataFrame`` with replacement:\n\n    >>> df.sample(frac=0.5, replace=True, random_state=1)\n          num_legs  num_wings  num_specimen_seen\n    dog          4          0                  2\n    fish         0          0                  8\n\n    An upsample sample of the ``DataFrame`` with replacement:\n    Note that `replace` parameter has to be `True` for `frac` parameter > 1.\n\n    >>> df.sample(frac=2, replace=True, random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    dog            4          0                  2\n    fish           0          0                  8\n    falcon         2          2                 10\n    falcon         2          2                 10\n    fish           0          0                  8\n    dog            4          0                  2\n    fish           0          0                  8\n    dog            4          0                  2\n\n    Using a DataFrame column as weights. Rows with larger value in the\n    `num_specimen_seen` column are more likely to be sampled.\n\n    >>> df.sample(n=2, weights='num_specimen_seen', random_state=1)\n            num_legs  num_wings  num_specimen_seen\n    falcon         2          2                 10\n    fish           0          0                  8\n    \"\"\"\n\n    if axis is None:\n        axis = self._stat_axis_number\n\n    axis = self._get_axis_number(axis)\n    axis_length = self.shape[axis]\n\n    # Process random_state argument\n    rs = com.random_state(random_state)\n\n    # Check weights for compliance\n    if weights is not None:\n\n        # If a series, align with frame\n        if isinstance(weights, ABCSeries):\n            weights = weights.reindex(self.axes[axis])\n\n        # Strings acceptable if a dataframe and axis = 0\n        if isinstance(weights, str):\n            if isinstance(self, ABCDataFrame):\n                if axis == 0:\n                    try:\n                        weights = self[weights]\n                    except KeyError:\n                        raise KeyError(\n                            \"String passed to weights not a valid column\"\n                        )\n                else:\n                    raise ValueError(\n                        \"Strings can only be passed to \"\n                        \"weights when sampling from rows on \"\n                        \"a DataFrame\"\n                    )\n            else:\n                raise ValueError(\n                    \"Strings cannot be passed as weights \"\n                    \"when sampling from a Series.\"\n                )\n\n        weights = pd.Series(weights, dtype=\"float64\")\n\n        if len(weights) != axis_length:\n            raise ValueError(\n                \"Weights and axis to be sampled must be of same length\"\n            )\n\n        if (weights == np.inf).any() or (weights == -np.inf).any():\n            raise ValueError(\"weight vector may not include `inf` values\")\n\n        if (weights < 0).any():\n            raise ValueError(\"weight vector many not include negative values\")\n\n        # If has nan, set to zero.\n        weights = weights.fillna(0)\n\n        # Renormalize if don't sum to 1\n        if weights.sum() != 1:\n            if weights.sum() != 0:\n                weights = weights / weights.sum()\n            else:\n                raise ValueError(\"Invalid weights: weights sum to zero\")\n\n        weights = weights.values\n\n    # If no frac or n, default to n=1.\n    if n is None and frac is None:\n        n = 1\n    elif frac is not None and frac > 1 and not replace:\n        raise ValueError(\n            \"Replace has to be set to `True` when \"\n            \"upsampling the population `frac` > 1.\"\n        )\n    elif n is not None and frac is None and n % 1 != 0:\n        raise ValueError(\"Only integers accepted as `n` values\")\n    elif n is None and frac is not None:\n        n = int(round(frac * axis_length))\n    elif n is not None and frac is not None:\n        raise ValueError(\"Please enter a value for `frac` OR `n`, not both\")\n\n    # Check for negative sizes\n    if n < 0:\n        raise ValueError(\n            \"A negative number of rows requested. Please provide positive value.\"\n        )\n\n    locs = rs.choice(axis_length, size=n, replace=replace, p=weights)\n    return self.take(locs, axis=axis)",
                "@Appender(_shared_docs[\"pipe\"] % _shared_doc_kwargs)\ndef pipe(self, func, *args, **kwargs):\n    return com.pipe(self, func, *args, **kwargs)",
                "def __finalize__(\n    self: FrameOrSeries, other, method=None, **kwargs\n) -> FrameOrSeries:\n    \"\"\"\n    Propagate metadata from other to self.\n\n    Parameters\n    ----------\n    other : the object from which to get the attributes that we are going\n        to propagate\n    method : optional, a passed method name ; possibly to take different\n        types of propagation actions based on this\n\n    \"\"\"\n    if isinstance(other, NDFrame):\n        for name in other.attrs:\n            self.attrs[name] = other.attrs[name]\n        # For subclasses using _metadata.\n        for name in self._metadata:\n            object.__setattr__(self, name, getattr(other, name, None))\n    return self",
                "def __getattr__(self, name: str):\n    \"\"\"After regular attribute access, try looking up the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n\n    # Note: obj.x will always call obj.__getattribute__('x') prior to\n    # calling obj.__getattr__('x').\n\n    if (\n        name in self._internal_names_set\n        or name in self._metadata\n        or name in self._accessors\n    ):\n        return object.__getattribute__(self, name)\n    else:\n        if self._info_axis._can_hold_identifiers_and_holds_name(name):\n            return self[name]\n        return object.__getattribute__(self, name)",
                "def __setattr__(self, name: str, value) -> None:\n    \"\"\"After regular attribute access, try setting the name\n    This allows simpler access to columns for interactive use.\n    \"\"\"\n\n    # first try regular attribute access via __getattribute__, so that\n    # e.g. ``obj.x`` and ``obj.x = 4`` will always reference/modify\n    # the same attribute.\n\n    try:\n        object.__getattribute__(self, name)\n        return object.__setattr__(self, name, value)\n    except AttributeError:\n        pass\n\n    # if this fails, go on to more involved attribute setting\n    # (note that this matches __getattr__, above).\n    if name in self._internal_names_set:\n        object.__setattr__(self, name, value)\n    elif name in self._metadata:\n        object.__setattr__(self, name, value)\n    else:\n        try:\n            existing = getattr(self, name)\n            if isinstance(existing, Index):\n                object.__setattr__(self, name, value)\n            elif name in self._info_axis:\n                self[name] = value\n            else:\n                object.__setattr__(self, name, value)\n        except (AttributeError, TypeError):\n            if isinstance(self, ABCDataFrame) and (is_list_like(value)):\n                warnings.warn(\n                    \"Pandas doesn't allow columns to be \"\n                    \"created via a new attribute name - see \"\n                    \"https://pandas.pydata.org/pandas-docs/\"\n                    \"stable/indexing.html#attribute-access\",\n                    stacklevel=2,\n                )\n            object.__setattr__(self, name, value)",
                "def _dir_additions(self):\n    \"\"\" add the string-like attributes from the info_axis.\n    If info_axis is a MultiIndex, it's first level values are used.\n    \"\"\"\n    additions = {\n        c\n        for c in self._info_axis.unique(level=0)[:100]\n        if isinstance(c, str) and c.isidentifier()\n    }\n    return super()._dir_additions().union(additions)",
                "def _protect_consolidate(self, f):\n    \"\"\"Consolidate _data -- if the blocks have changed, then clear the\n    cache\n    \"\"\"\n    blocks_before = len(self._data.blocks)\n    result = f()\n    if len(self._data.blocks) != blocks_before:\n        self._clear_item_cache()\n    return result",
                "def _consolidate_inplace(self) -> None:\n    \"\"\"Consolidate data in place and return None\"\"\"\n\n    def f():\n        self._data = self._data.consolidate()\n\n    self._protect_consolidate(f)",
                "def _consolidate(self, inplace: bool_t = False):\n    \"\"\"\n    Compute NDFrame with \"consolidated\" internals (data of each dtype\n    grouped together in a single ndarray).\n\n    Parameters\n    ----------\n    inplace : bool, default False\n        If False return new object, otherwise modify existing object.\n\n    Returns\n    -------\n    consolidated : same type as caller\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if inplace:\n        self._consolidate_inplace()\n    else:\n        f = lambda: self._data.consolidate()\n        cons_data = self._protect_consolidate(f)\n        return self._constructor(cons_data).__finalize__(self)",
                "@property\ndef _is_mixed_type(self):\n    f = lambda: self._data.is_mixed_type\n    return self._protect_consolidate(f)",
                "@property\ndef _is_numeric_mixed_type(self):\n    f = lambda: self._data.is_numeric_mixed_type\n    return self._protect_consolidate(f)",
                "@property\ndef _is_datelike_mixed_type(self):\n    f = lambda: self._data.is_datelike_mixed_type\n    return self._protect_consolidate(f)",
                "def _check_inplace_setting(self, value) -> bool_t:\n    \"\"\" check whether we allow in-place setting with this type of value \"\"\"\n\n    if self._is_mixed_type:\n        if not self._is_numeric_mixed_type:\n\n            # allow an actual np.nan thru\n            if is_float(value) and np.isnan(value):\n                return True\n\n            raise TypeError(\n                \"Cannot do inplace boolean setting on \"\n                \"mixed-types with a non np.nan value\"\n            )\n\n    return True",
                "def _get_numeric_data(self):\n    return self._constructor(self._data.get_numeric_data()).__finalize__(self)",
                "def _get_bool_data(self):\n    return self._constructor(self._data.get_bool_data()).__finalize__(self)",
                "@property\ndef values(self) -> np.ndarray:\n    \"\"\"\n    Return a Numpy representation of the DataFrame.\n\n    .. warning::\n\n       We recommend using :meth:`DataFrame.to_numpy` instead.\n\n    Only the values in the DataFrame will be returned, the axes labels\n    will be removed.\n\n    Returns\n    -------\n    numpy.ndarray\n        The values of the DataFrame.\n\n    See Also\n    --------\n    DataFrame.to_numpy : Recommended alternative to this method.\n    DataFrame.index : Retrieve the index labels.\n    DataFrame.columns : Retrieving the column names.\n\n    Notes\n    -----\n    The dtype will be a lower-common-denominator dtype (implicit\n    upcasting); that is to say if the dtypes (even of numeric types)\n    are mixed, the one that accommodates all will be chosen. Use this\n    with care if you are not dealing with the blocks.\n\n    e.g. If the dtypes are float16 and float32, dtype will be upcast to\n    float32.  If dtypes are int32 and uint8, dtype will be upcast to\n    int32. By :func:`numpy.find_common_type` convention, mixing int64\n    and uint64 will result in a float64 dtype.\n\n    Examples\n    --------\n    A DataFrame where all columns are the same type (e.g., int64) results\n    in an array of the same type.\n\n    >>> df = pd.DataFrame({'age':    [ 3,  29],\n    ...                    'height': [94, 170],\n    ...                    'weight': [31, 115]})\n    >>> df\n       age  height  weight\n    0    3      94      31\n    1   29     170     115\n    >>> df.dtypes\n    age       int64\n    height    int64\n    weight    int64\n    dtype: object\n    >>> df.values\n    array([[  3,  94,  31],\n           [ 29, 170, 115]], dtype=int64)\n\n    A DataFrame with mixed type columns(e.g., str/object, int64, float32)\n    results in an ndarray of the broadest type that accommodates these\n    mixed types (e.g., object).\n\n    >>> df2 = pd.DataFrame([('parrot',   24.0, 'second'),\n    ...                     ('lion',     80.5, 1),\n    ...                     ('monkey', np.nan, None)],\n    ...                   columns=('name', 'max_speed', 'rank'))\n    >>> df2.dtypes\n    name          object\n    max_speed    float64\n    rank          object\n    dtype: object\n    >>> df2.values\n    array([['parrot', 24.0, 'second'],\n           ['lion', 80.5, 1],\n           ['monkey', nan, None]], dtype=object)\n    \"\"\"\n    self._consolidate_inplace()\n    return self._data.as_array(transpose=self._AXIS_REVERSED)",
                "@property\ndef _values(self) -> np.ndarray:\n    \"\"\"internal implementation\"\"\"\n    return self.values",
                "@property\ndef _get_values(self) -> np.ndarray:\n    # compat\n    return self.values",
                "def _internal_get_values(self) -> np.ndarray:\n    \"\"\"\n    Return an ndarray after converting sparse values to dense.\n\n    This is the same as ``.values`` for non-sparse data. For sparse\n    data contained in a `SparseArray`, the data are first\n    converted to a dense representation.\n\n    Returns\n    -------\n    numpy.ndarray\n        Numpy representation of DataFrame.\n\n    See Also\n    --------\n    values : Numpy representation of DataFrame.\n    SparseArray : Container for sparse data.\n    \"\"\"\n    return self.values",
                "@property\ndef dtypes(self):\n    \"\"\"\n    Return the dtypes in the DataFrame.\n\n    This returns a Series with the data type of each column.\n    The result's index is the original DataFrame's columns. Columns\n    with mixed types are stored with the ``object`` dtype. See\n    :ref:`the User Guide <basics.dtypes>` for more.\n\n    Returns\n    -------\n    pandas.Series\n        The data type of each column.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'float': [1.0],\n    ...                    'int': [1],\n    ...                    'datetime': [pd.Timestamp('20180310')],\n    ...                    'string': ['foo']})\n    >>> df.dtypes\n    float              float64\n    int                  int64\n    datetime    datetime64[ns]\n    string              object\n    dtype: object\n    \"\"\"\n    from pandas import Series\n\n    return Series(self._data.get_dtypes(), index=self._info_axis, dtype=np.object_)",
                "def _to_dict_of_blocks(self, copy: bool_t = True):\n    \"\"\"\n    Return a dict of dtype -> Constructor Types that\n    each is a homogeneous dtype.\n\n    Internal ONLY\n    \"\"\"\n    return {\n        k: self._constructor(v).__finalize__(self)\n        for k, v, in self._data.to_dict(copy=copy).items()\n    }",
                "def astype(\n    self: FrameOrSeries, dtype, copy: bool_t = True, errors: str = \"raise\"\n) -> FrameOrSeries:\n    \"\"\"\n    Cast a pandas object to a specified dtype ``dtype``.\n\n    Parameters\n    ----------\n    dtype : data type, or dict of column name -> data type\n        Use a numpy.dtype or Python type to cast entire pandas object to\n        the same type. Alternatively, use {col: dtype, ...}, where col is a\n        column label and dtype is a numpy.dtype or Python type to cast one\n        or more of the DataFrame's columns to column-specific types.\n    copy : bool, default True\n        Return a copy when ``copy=True`` (be very careful setting\n        ``copy=False`` as changes to values then may propagate to other\n        pandas objects).\n    errors : {'raise', 'ignore'}, default 'raise'\n        Control raising of exceptions on invalid data for provided dtype.\n\n        - ``raise`` : allow exceptions to be raised\n        - ``ignore`` : suppress exceptions. On error return original object.\n\n    Returns\n    -------\n    casted : same type as caller\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to a numeric type.\n    numpy.ndarray.astype : Cast a numpy array to a specified type.\n\n    Examples\n    --------\n    Create a DataFrame:\n\n    >>> d = {'col1': [1, 2], 'col2': [3, 4]}\n    >>> df = pd.DataFrame(data=d)\n    >>> df.dtypes\n    col1    int64\n    col2    int64\n    dtype: object\n\n    Cast all columns to int32:\n\n    >>> df.astype('int32').dtypes\n    col1    int32\n    col2    int32\n    dtype: object\n\n    Cast col1 to int32 using a dictionary:\n\n    >>> df.astype({'col1': 'int32'}).dtypes\n    col1    int32\n    col2    int64\n    dtype: object\n\n    Create a series:\n\n    >>> ser = pd.Series([1, 2], dtype='int32')\n    >>> ser\n    0    1\n    1    2\n    dtype: int32\n    >>> ser.astype('int64')\n    0    1\n    1    2\n    dtype: int64\n\n    Convert to categorical type:\n\n    >>> ser.astype('category')\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [1, 2]\n\n    Convert to ordered categorical type with custom ordering:\n\n    >>> cat_dtype = pd.api.types.CategoricalDtype(\n    ...     categories=[2, 1], ordered=True)\n    >>> ser.astype(cat_dtype)\n    0    1\n    1    2\n    dtype: category\n    Categories (2, int64): [2 < 1]\n\n    Note that using ``copy=False`` and changing data on a new\n    pandas object may propagate changes:\n\n    >>> s1 = pd.Series([1, 2])\n    >>> s2 = s1.astype('int64', copy=False)\n    >>> s2[0] = 10\n    >>> s1  # note that s1[0] has changed too\n    0    10\n    1     2\n    dtype: int64\n    \"\"\"\n    if is_dict_like(dtype):\n        if self.ndim == 1:  # i.e. Series\n            if len(dtype) > 1 or self.name not in dtype:\n                raise KeyError(\n                    \"Only the Series name can be used for \"\n                    \"the key in Series dtype mappings.\"\n                )\n            new_type = dtype[self.name]\n            return self.astype(new_type, copy, errors)\n\n        for col_name in dtype.keys():\n            if col_name not in self:\n                raise KeyError(\n                    \"Only a column name can be used for the \"\n                    \"key in a dtype mappings argument.\"\n                )\n        results = []\n        for col_name, col in self.items():\n            if col_name in dtype:\n                results.append(\n                    col.astype(dtype=dtype[col_name], copy=copy, errors=errors)\n                )\n            else:\n                results.append(col.copy() if copy else col)\n\n    elif is_extension_array_dtype(dtype) and self.ndim > 1:\n        # GH 18099/22869: columnwise conversion to extension dtype\n        # GH 24704: use iloc to handle duplicate column names\n        results = [\n            self.iloc[:, i].astype(dtype, copy=copy)\n            for i in range(len(self.columns))\n        ]\n\n    else:\n        # else, only a single dtype is given\n        new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors)\n        return self._constructor(new_data).__finalize__(self)\n\n    # GH 19920: retain column metadata after concat\n    result = pd.concat(results, axis=1, copy=False)\n    result.columns = self.columns\n    return result",
                "def copy(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n    \"\"\"\n    Make a copy of this object's indices and data.\n\n    When ``deep=True`` (default), a new object will be created with a\n    copy of the calling object's data and indices. Modifications to\n    the data or indices of the copy will not be reflected in the\n    original object (see notes below).\n\n    When ``deep=False``, a new object will be created without copying\n    the calling object's data or index (only references to the data\n    and index are copied). Any changes to the data of the original\n    will be reflected in the shallow copy (and vice versa).\n\n    Parameters\n    ----------\n    deep : bool, default True\n        Make a deep copy, including a copy of the data and the indices.\n        With ``deep=False`` neither the indices nor the data are copied.\n\n    Returns\n    -------\n    copy : Series or DataFrame\n        Object type matches caller.\n\n    Notes\n    -----\n    When ``deep=True``, data is copied but actual Python objects\n    will not be copied recursively, only the reference to the object.\n    This is in contrast to `copy.deepcopy` in the Standard Library,\n    which recursively copies object data (see examples below).\n\n    While ``Index`` objects are copied when ``deep=True``, the underlying\n    numpy array is not copied for performance reasons. Since ``Index`` is\n    immutable, the underlying data can be safely shared and a copy\n    is not needed.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> s\n    a    1\n    b    2\n    dtype: int64\n\n    >>> s_copy = s.copy()\n    >>> s_copy\n    a    1\n    b    2\n    dtype: int64\n\n    **Shallow copy versus default (deep) copy:**\n\n    >>> s = pd.Series([1, 2], index=[\"a\", \"b\"])\n    >>> deep = s.copy()\n    >>> shallow = s.copy(deep=False)\n\n    Shallow copy shares data and index with original.\n\n    >>> s is shallow\n    False\n    >>> s.values is shallow.values and s.index is shallow.index\n    True\n\n    Deep copy has own copy of data and index.\n\n    >>> s is deep\n    False\n    >>> s.values is deep.values or s.index is deep.index\n    False\n\n    Updates to the data shared by shallow copy and original is reflected\n    in both; deep copy remains unchanged.\n\n    >>> s[0] = 3\n    >>> shallow[1] = 4\n    >>> s\n    a    3\n    b    4\n    dtype: int64\n    >>> shallow\n    a    3\n    b    4\n    dtype: int64\n    >>> deep\n    a    1\n    b    2\n    dtype: int64\n\n    Note that when copying an object containing Python objects, a deep copy\n    will copy the data, but will not do so recursively. Updating a nested\n    data object will be reflected in the deep copy.\n\n    >>> s = pd.Series([[1, 2], [3, 4]])\n    >>> deep = s.copy()\n    >>> s[0][0] = 10\n    >>> s\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    >>> deep\n    0    [10, 2]\n    1     [3, 4]\n    dtype: object\n    \"\"\"\n    data = self._data.copy(deep=deep)\n    return self._constructor(data).__finalize__(self)",
                "def __copy__(self: FrameOrSeries, deep: bool_t = True) -> FrameOrSeries:\n    return self.copy(deep=deep)",
                "def __deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries:\n    \"\"\"\n    Parameters\n    ----------\n    memo, default None\n        Standard signature. Unused\n    \"\"\"\n    return self.copy(deep=True)",
                "def _convert(\n    self: FrameOrSeries,\n    datetime: bool_t = False,\n    numeric: bool_t = False,\n    timedelta: bool_t = False,\n    coerce: bool_t = False,\n    copy: bool_t = True,\n) -> FrameOrSeries:\n    \"\"\"\n    Attempt to infer better dtype for object columns\n\n    Parameters\n    ----------\n    datetime : bool, default False\n        If True, convert to date where possible.\n    numeric : bool, default False\n        If True, attempt to convert to numbers (including strings), with\n        unconvertible values becoming NaN.\n    timedelta : bool, default False\n        If True, convert to timedelta where possible.\n    coerce : bool, default False\n        If True, force conversion with unconvertible values converted to\n        nulls (NaN or NaT).\n    copy : bool, default True\n        If True, return a copy even if no copy is necessary (e.g. no\n        conversion was done). Note: This is meant for internal use, and\n        should not be confused with inplace.\n\n    Returns\n    -------\n    converted : same as input object\n    \"\"\"\n    validate_bool_kwarg(datetime, \"datetime\")\n    validate_bool_kwarg(numeric, \"numeric\")\n    validate_bool_kwarg(timedelta, \"timedelta\")\n    validate_bool_kwarg(coerce, \"coerce\")\n    validate_bool_kwarg(copy, \"copy\")\n    return self._constructor(\n        self._data.convert(\n            datetime=datetime,\n            numeric=numeric,\n            timedelta=timedelta,\n            coerce=coerce,\n            copy=copy,\n        )\n    ).__finalize__(self)",
                "def infer_objects(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\"\n    Attempt to infer better dtypes for object columns.\n\n    Attempts soft conversion of object-dtyped\n    columns, leaving non-object and unconvertible\n    columns unchanged. The inference rules are the\n    same as during normal Series/DataFrame construction.\n\n    .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    converted : same type as input object\n\n    See Also\n    --------\n    to_datetime : Convert argument to datetime.\n    to_timedelta : Convert argument to timedelta.\n    to_numeric : Convert argument to numeric type.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({\"A\": [\"a\", 1, 2, 3]})\n    >>> df = df.iloc[1:]\n    >>> df\n       A\n    1  1\n    2  2\n    3  3\n\n    >>> df.dtypes\n    A    object\n    dtype: object\n\n    >>> df.infer_objects().dtypes\n    A    int64\n    dtype: object\n    \"\"\"\n    # numeric=False necessary to only soft convert;\n    # python objects will still be converted to\n    # native numpy numeric types\n    return self._constructor(\n        self._data.convert(\n            datetime=True, numeric=False, timedelta=True, coerce=False, copy=True\n        )\n    ).__finalize__(self)",
                "def fillna(\n    self: FrameOrSeries,\n    value=None,\n    method=None,\n    axis=None,\n    inplace: bool_t = False,\n    limit=None,\n    downcast=None,\n) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Fill NA/NaN values using the specified method.\n\n    Parameters\n    ----------\n    value : scalar, dict, Series, or DataFrame\n        Value to use to fill holes (e.g. 0), alternately a\n        dict/Series/DataFrame of values specifying which value to use for\n        each index (for a Series) or column (for a DataFrame).  Values not\n        in the dict/Series/DataFrame will not be filled. This value cannot\n        be a list.\n    method : {'backfill', 'bfill', 'pad', 'ffill', None}, default None\n        Method to use for filling holes in reindexed Series\n        pad / ffill: propagate last valid observation forward to next valid\n        backfill / bfill: use next valid observation to fill gap.\n    axis : %(axes_single_arg)s\n        Axis along which to fill missing values.\n    inplace : bool, default False\n        If True, fill in-place. Note: this will modify any\n        other views on this object (e.g., a no-copy slice for a column in a\n        DataFrame).\n    limit : int, default None\n        If method is specified, this is the maximum number of consecutive\n        NaN values to forward/backward fill. In other words, if there is\n        a gap with more than this number of consecutive NaNs, it will only\n        be partially filled. If method is not specified, this is the\n        maximum number of entries along the entire axis where NaNs will be\n        filled. Must be greater than 0 if not None.\n    downcast : dict, default is None\n        A dict of item->dtype of what to downcast if possible,\n        or the string 'infer' which will try to downcast to an appropriate\n        equal type (e.g. float64 to int64 if possible).\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n\n    See Also\n    --------\n    interpolate : Fill NaN values using interpolation.\n    reindex : Conform object to new index.\n    asfreq : Convert TimeSeries to specified frequency.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame([[np.nan, 2, np.nan, 0],\n    ...                    [3, 4, np.nan, 1],\n    ...                    [np.nan, np.nan, np.nan, 5],\n    ...                    [np.nan, 3, np.nan, 4]],\n    ...                   columns=list('ABCD'))\n    >>> df\n         A    B   C  D\n    0  NaN  2.0 NaN  0\n    1  3.0  4.0 NaN  1\n    2  NaN  NaN NaN  5\n    3  NaN  3.0 NaN  4\n\n    Replace all NaN elements with 0s.\n\n    >>> df.fillna(0)\n        A   B   C   D\n    0   0.0 2.0 0.0 0\n    1   3.0 4.0 0.0 1\n    2   0.0 0.0 0.0 5\n    3   0.0 3.0 0.0 4\n\n    We can also propagate non-null values forward or backward.\n\n    >>> df.fillna(method='ffill')\n        A   B   C   D\n    0   NaN 2.0 NaN 0\n    1   3.0 4.0 NaN 1\n    2   3.0 4.0 NaN 5\n    3   3.0 3.0 NaN 4\n\n    Replace all NaN elements in column 'A', 'B', 'C', and 'D', with 0, 1,\n    2, and 3 respectively.\n\n    >>> values = {'A': 0, 'B': 1, 'C': 2, 'D': 3}\n    >>> df.fillna(value=values)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 2.0 1\n    2   0.0 1.0 2.0 5\n    3   0.0 3.0 2.0 4\n\n    Only replace the first NaN element.\n\n    >>> df.fillna(value=values, limit=1)\n        A   B   C   D\n    0   0.0 2.0 2.0 0\n    1   3.0 4.0 NaN 1\n    2   NaN 1.0 NaN 5\n    3   NaN 3.0 NaN 4\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    value, method = validate_fillna_kwargs(value, method)\n\n    self._consolidate_inplace()\n\n    # set the default here, so functions examining the signaure\n    # can detect if something was set (e.g. in groupby) (GH9221)\n    if axis is None:\n        axis = 0\n    axis = self._get_axis_number(axis)\n\n    if value is None:\n\n        if self._is_mixed_type and axis == 1:\n            if inplace:\n                raise NotImplementedError()\n            result = self.T.fillna(method=method, limit=limit).T\n\n            # need to downcast here because of all of the transposes\n            result._data = result._data.downcast()\n\n            return result\n\n        new_data = self._data.interpolate(\n            method=method,\n            axis=axis,\n            limit=limit,\n            inplace=inplace,\n            coerce=True,\n            downcast=downcast,\n        )\n    else:\n        if len(self._get_axis(axis)) == 0:\n            return self\n\n        if self.ndim == 1:\n            if isinstance(value, (dict, ABCSeries)):\n                value = create_series_with_explicit_dtype(\n                    value, dtype_if_empty=object\n                )\n            elif not is_list_like(value):\n                pass\n            else:\n                raise TypeError(\n                    '\"value\" parameter must be a scalar, dict '\n                    \"or Series, but you passed a \"\n                    f'\"{type(value).__name__}\"'\n                )\n\n            new_data = self._data.fillna(\n                value=value, limit=limit, inplace=inplace, downcast=downcast\n            )\n\n        elif isinstance(value, (dict, ABCSeries)):\n            if axis == 1:\n                raise NotImplementedError(\n                    \"Currently only can fill \"\n                    \"with dict/Series column \"\n                    \"by column\"\n                )\n\n            result = self if inplace else self.copy()\n            for k, v in value.items():\n                if k not in result:\n                    continue\n                obj = result[k]\n                obj.fillna(v, limit=limit, inplace=True, downcast=downcast)\n            return result if not inplace else None\n\n        elif not is_list_like(value):\n            new_data = self._data.fillna(\n                value=value, limit=limit, inplace=inplace, downcast=downcast\n            )\n        elif isinstance(value, ABCDataFrame) and self.ndim == 2:\n            new_data = self.where(self.notna(), value)\n        else:\n            raise ValueError(f\"invalid fill value with a {type(value)}\")\n\n    if inplace:\n        self._update_inplace(new_data)\n        return None\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "def ffill(\n    self: FrameOrSeries,\n    axis=None,\n    inplace: bool_t = False,\n    limit=None,\n    downcast=None,\n) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='ffill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(\n        method=\"ffill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n    )",
                "def bfill(\n    self: FrameOrSeries,\n    axis=None,\n    inplace: bool_t = False,\n    limit=None,\n    downcast=None,\n) -> Optional[FrameOrSeries]:\n    \"\"\"\n    Synonym for :meth:`DataFrame.fillna` with ``method='bfill'``.\n\n    Returns\n    -------\n    %(klass)s or None\n        Object with missing values filled or None if ``inplace=True``.\n    \"\"\"\n    return self.fillna(\n        method=\"bfill\", axis=axis, inplace=inplace, limit=limit, downcast=downcast\n    )",
                "@Appender(_shared_docs[\"replace\"] % _shared_doc_kwargs)\ndef replace(\n    self,\n    to_replace=None,\n    value=None,\n    inplace=False,\n    limit=None,\n    regex=False,\n    method=\"pad\",\n):\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    if not is_bool(regex) and to_replace is not None:\n        raise AssertionError(\"'to_replace' must be 'None' if 'regex' is not a bool\")\n\n    self._consolidate_inplace()\n\n    if value is None:\n        # passing a single value that is scalar like\n        # when value is None (GH5319), for compat\n        if not is_dict_like(to_replace) and not is_dict_like(regex):\n            to_replace = [to_replace]\n\n        if isinstance(to_replace, (tuple, list)):\n            if isinstance(self, ABCDataFrame):\n                return self.apply(\n                    _single_replace, args=(to_replace, method, inplace, limit)\n                )\n            return _single_replace(self, to_replace, method, inplace, limit)\n\n        if not is_dict_like(to_replace):\n            if not is_dict_like(regex):\n                raise TypeError(\n                    'If \"to_replace\" and \"value\" are both None '\n                    'and \"to_replace\" is not a list, then '\n                    \"regex must be a mapping\"\n                )\n            to_replace = regex\n            regex = True\n\n        items = list(to_replace.items())\n        keys, values = zip(*items) if items else ([], [])\n\n        are_mappings = [is_dict_like(v) for v in values]\n\n        if any(are_mappings):\n            if not all(are_mappings):\n                raise TypeError(\n                    \"If a nested mapping is passed, all values \"\n                    \"of the top level mapping must be mappings\"\n                )\n            # passed a nested dict/Series\n            to_rep_dict = {}\n            value_dict = {}\n\n            for k, v in items:\n                keys, values = list(zip(*v.items())) or ([], [])\n\n                to_rep_dict[k] = list(keys)\n                value_dict[k] = list(values)\n\n            to_replace, value = to_rep_dict, value_dict\n        else:\n            to_replace, value = keys, values\n\n        return self.replace(\n            to_replace, value, inplace=inplace, limit=limit, regex=regex\n        )\n    else:\n\n        # need a non-zero len on all axes\n        if not self.size:\n            return self\n\n        new_data = self._data\n        if is_dict_like(to_replace):\n            if is_dict_like(value):  # {'A' : NA} -> {'A' : 0}\n                res = self if inplace else self.copy()\n                for c, src in to_replace.items():\n                    if c in value and c in self:\n                        # object conversion is handled in\n                        # series.replace which is called recursively\n                        res[c] = res[c].replace(\n                            to_replace=src,\n                            value=value[c],\n                            inplace=False,\n                            regex=regex,\n                        )\n                return None if inplace else res\n\n            # {'A': NA} -> 0\n            elif not is_list_like(value):\n                keys = [(k, src) for k, src in to_replace.items() if k in self]\n                keys_len = len(keys) - 1\n                for i, (k, src) in enumerate(keys):\n                    convert = i == keys_len\n                    new_data = new_data.replace(\n                        to_replace=src,\n                        value=value,\n                        filter=[k],\n                        inplace=inplace,\n                        regex=regex,\n                        convert=convert,\n                    )\n            else:\n                raise TypeError(\"value argument must be scalar, dict, or Series\")\n\n        elif is_list_like(to_replace):  # [NA, ''] -> [0, 'missing']\n            if is_list_like(value):\n                if len(to_replace) != len(value):\n                    raise ValueError(\n                        f\"Replacement lists must match in length. \"\n                        f\"Expecting {len(to_replace)} got {len(value)} \"\n                    )\n\n                new_data = self._data.replace_list(\n                    src_list=to_replace,\n                    dest_list=value,\n                    inplace=inplace,\n                    regex=regex,\n                )\n\n            else:  # [NA, ''] -> 0\n                new_data = self._data.replace(\n                    to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                )\n        elif to_replace is None:\n            if not (\n                is_re_compilable(regex)\n                or is_list_like(regex)\n                or is_dict_like(regex)\n            ):\n                raise TypeError(\n                    f\"'regex' must be a string or a compiled regular expression \"\n                    f\"or a list or dict of strings or regular expressions, \"\n                    f\"you passed a {repr(type(regex).__name__)}\"\n                )\n            return self.replace(\n                regex, value, inplace=inplace, limit=limit, regex=True\n            )\n        else:\n\n            # dest iterable dict-like\n            if is_dict_like(value):  # NA -> {'A' : 0, 'B' : -1}\n                new_data = self._data\n\n                for k, v in value.items():\n                    if k in self:\n                        new_data = new_data.replace(\n                            to_replace=to_replace,\n                            value=v,\n                            filter=[k],\n                            inplace=inplace,\n                            regex=regex,\n                        )\n\n            elif not is_list_like(value):  # NA -> 0\n                new_data = self._data.replace(\n                    to_replace=to_replace, value=value, inplace=inplace, regex=regex\n                )\n            else:\n                raise TypeError(\n                    f'Invalid \"to_replace\" type: {repr(type(to_replace).__name__)}'\n                )\n\n    if inplace:\n        self._update_inplace(new_data)\n    else:\n        return self._constructor(new_data).__finalize__(self)",
                "@Appender(_shared_docs[\"interpolate\"] % _shared_doc_kwargs)\ndef interpolate(\n    self,\n    method=\"linear\",\n    axis=0,\n    limit=None,\n    inplace=False,\n    limit_direction=\"forward\",\n    limit_area=None,\n    downcast=None,\n    **kwargs,\n):\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = self._get_axis_number(axis)\n\n    if axis == 0:\n        ax = self._info_axis_name\n        _maybe_transposed_self = self\n    elif axis == 1:\n        _maybe_transposed_self = self.T\n        ax = 1\n\n    ax = _maybe_transposed_self._get_axis_number(ax)\n\n    if _maybe_transposed_self.ndim == 2:\n        alt_ax = 1 - ax\n    else:\n        alt_ax = ax\n\n    if isinstance(_maybe_transposed_self.index, MultiIndex) and method != \"linear\":\n        raise ValueError(\n            \"Only `method=linear` interpolation is supported on MultiIndexes.\"\n        )\n\n    if _maybe_transposed_self._data.get_dtype_counts().get(\"object\") == len(\n        _maybe_transposed_self.T\n    ):\n        raise TypeError(\n            \"Cannot interpolate with all object-dtype columns \"\n            \"in the DataFrame. Try setting at least one \"\n            \"column to a numeric dtype.\"\n        )\n\n    # create/use the index\n    if method == \"linear\":\n        # prior default\n        index = np.arange(len(_maybe_transposed_self._get_axis(alt_ax)))\n    else:\n        index = _maybe_transposed_self._get_axis(alt_ax)\n        methods = {\"index\", \"values\", \"nearest\", \"time\"}\n        is_numeric_or_datetime = (\n            is_numeric_dtype(index)\n            or is_datetime64_any_dtype(index)\n            or is_timedelta64_dtype(index)\n        )\n        if method not in methods and not is_numeric_or_datetime:\n            raise ValueError(\n                \"Index column must be numeric or datetime type when \"\n                f\"using {method} method other than linear. \"\n                \"Try setting a numeric or datetime index column before \"\n                \"interpolating.\"\n            )\n\n    if isna(index).any():\n        raise NotImplementedError(\n            \"Interpolation with NaNs in the index \"\n            \"has not been implemented. Try filling \"\n            \"those NaNs before interpolating.\"\n        )\n    data = _maybe_transposed_self._data\n    new_data = data.interpolate(\n        method=method,\n        axis=ax,\n        index=index,\n        values=_maybe_transposed_self,\n        limit=limit,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        inplace=inplace,\n        downcast=downcast,\n        **kwargs,\n    )\n\n    if inplace:\n        if axis == 1:\n            new_data = self._constructor(new_data).T._data\n        self._update_inplace(new_data)\n    else:\n        res = self._constructor(new_data).__finalize__(self)\n        if axis == 1:\n            res = res.T\n        return res",
                "def asof(self, where, subset=None):\n    \"\"\"\n    Return the last row(s) without any NaNs before `where`.\n\n    The last row (for each element in `where`, if list) without any\n    NaN is taken.\n    In case of a :class:`~pandas.DataFrame`, the last row without NaN\n    considering only the subset of columns (if not `None`)\n\n    If there is no good value, NaN is returned for a Series or\n    a Series of NaN values for a DataFrame\n\n    Parameters\n    ----------\n    where : date or array-like of dates\n        Date(s) before which the last row(s) are returned.\n    subset : str or array-like of str, default `None`\n        For DataFrame, if not `None`, only use these columns to\n        check for NaNs.\n\n    Returns\n    -------\n    scalar, Series, or DataFrame\n\n        The return can be:\n\n        * scalar : when `self` is a Series and `where` is a scalar\n        * Series: when `self` is a Series and `where` is an array-like,\n          or when `self` is a DataFrame and `where` is a scalar\n        * DataFrame : when `self` is a DataFrame and `where` is an\n          array-like\n\n        Return scalar, Series, or DataFrame.\n\n    See Also\n    --------\n    merge_asof : Perform an asof merge. Similar to left join.\n\n    Notes\n    -----\n    Dates are assumed to be sorted. Raises if this is not the case.\n\n    Examples\n    --------\n    A Series and a scalar `where`.\n\n    >>> s = pd.Series([1, 2, np.nan, 4], index=[10, 20, 30, 40])\n    >>> s\n    10    1.0\n    20    2.0\n    30    NaN\n    40    4.0\n    dtype: float64\n\n    >>> s.asof(20)\n    2.0\n\n    For a sequence `where`, a Series is returned. The first value is\n    NaN, because the first element of `where` is before the first\n    index value.\n\n    >>> s.asof([5, 20])\n    5     NaN\n    20    2.0\n    dtype: float64\n\n    Missing values are not considered. The following is ``2.0``, not\n    NaN, even though NaN is at the index location for ``30``.\n\n    >>> s.asof(30)\n    2.0\n\n    Take all columns into consideration\n\n    >>> df = pd.DataFrame({'a': [10, 20, 30, 40, 50],\n    ...                    'b': [None, None, None, None, 500]},\n    ...                   index=pd.DatetimeIndex(['2018-02-27 09:01:00',\n    ...                                           '2018-02-27 09:02:00',\n    ...                                           '2018-02-27 09:03:00',\n    ...                                           '2018-02-27 09:04:00',\n    ...                                           '2018-02-27 09:05:00']))\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']))\n                          a   b\n    2018-02-27 09:03:30 NaN NaN\n    2018-02-27 09:04:30 NaN NaN\n\n    Take a single column into consideration\n\n    >>> df.asof(pd.DatetimeIndex(['2018-02-27 09:03:30',\n    ...                           '2018-02-27 09:04:30']),\n    ...         subset=['a'])\n                             a   b\n    2018-02-27 09:03:30   30.0 NaN\n    2018-02-27 09:04:30   40.0 NaN\n    \"\"\"\n    if isinstance(where, str):\n        where = Timestamp(where)\n\n    if not self.index.is_monotonic:\n        raise ValueError(\"asof requires a sorted index\")\n\n    is_series = isinstance(self, ABCSeries)\n    if is_series:\n        if subset is not None:\n            raise ValueError(\"subset is not valid for Series\")\n    else:\n        if subset is None:\n            subset = self.columns\n        if not is_list_like(subset):\n            subset = [subset]\n\n    is_list = is_list_like(where)\n    if not is_list:\n        start = self.index[0]\n        if isinstance(self.index, PeriodIndex):\n            where = Period(where, freq=self.index.freq).ordinal\n            start = start.ordinal\n\n        if where < start:\n            if not is_series:\n                from pandas import Series\n\n                return Series(index=self.columns, name=where, dtype=np.float64)\n            return np.nan\n\n        # It's always much faster to use a *while* loop here for\n        # Series than pre-computing all the NAs. However a\n        # *while* loop is extremely expensive for DataFrame\n        # so we later pre-compute all the NAs and use the same\n        # code path whether *where* is a scalar or list.\n        # See PR: https://github.com/pandas-dev/pandas/pull/14476\n        if is_series:\n            loc = self.index.searchsorted(where, side=\"right\")\n            if loc > 0:\n                loc -= 1\n\n            values = self._values\n            while loc > 0 and isna(values[loc]):\n                loc -= 1\n            return values[loc]\n\n    if not isinstance(where, Index):\n        where = Index(where) if is_list else Index([where])\n\n    nulls = self.isna() if is_series else self[subset].isna().any(1)\n    if nulls.all():\n        if is_series:\n            return self._constructor(np.nan, index=where, name=self.name)\n        elif is_list:\n            from pandas import DataFrame\n\n            return DataFrame(np.nan, index=where, columns=self.columns)\n        else:\n            from pandas import Series\n\n            return Series(np.nan, index=self.columns, name=where[0])\n\n    locs = self.index.asof_locs(where, ~(nulls.values))\n\n    # mask the missing\n    missing = locs == -1\n    d = self.take(locs)\n    data = d.copy()\n    data.index = where\n    data.loc[missing] = np.nan\n    return data if is_list else data.iloc[-1]",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isna(self: FrameOrSeries) -> FrameOrSeries:\n    return isna(self).__finalize__(self)",
                "@Appender(_shared_docs[\"isna\"] % _shared_doc_kwargs)\ndef isnull(self: FrameOrSeries) -> FrameOrSeries:\n    return isna(self).__finalize__(self)",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notna(self: FrameOrSeries) -> FrameOrSeries:\n    return notna(self).__finalize__(self)",
                "@Appender(_shared_docs[\"notna\"] % _shared_doc_kwargs)\ndef notnull(self: FrameOrSeries) -> FrameOrSeries:\n    return notna(self).__finalize__(self)",
                "def _clip_with_scalar(self, lower, upper, inplace: bool_t = False):\n    if (lower is not None and np.any(isna(lower))) or (\n        upper is not None and np.any(isna(upper))\n    ):\n        raise ValueError(\"Cannot use an NA value as a clip threshold\")\n\n    result = self\n    mask = isna(self.values)\n\n    with np.errstate(all=\"ignore\"):\n        if upper is not None:\n            subset = self.to_numpy() <= upper\n            result = result.where(subset, upper, axis=None, inplace=False)\n        if lower is not None:\n            subset = self.to_numpy() >= lower\n            result = result.where(subset, lower, axis=None, inplace=False)\n\n    if np.any(mask):\n        result[mask] = np.nan\n\n    if inplace:\n        self._update_inplace(result)\n    else:\n        return result",
                "def _clip_with_one_bound(self, threshold, method, axis, inplace):\n\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n\n    # method is self.le for upper bound and self.ge for lower bound\n    if is_scalar(threshold) and is_number(threshold):\n        if method.__name__ == \"le\":\n            return self._clip_with_scalar(None, threshold, inplace=inplace)\n        return self._clip_with_scalar(threshold, None, inplace=inplace)\n\n    subset = method(threshold, axis=axis) | isna(self)\n\n    # GH #15390\n    # In order for where method to work, the threshold must\n    # be transformed to NDFrame from other array like structure.\n    if (not isinstance(threshold, ABCSeries)) and is_list_like(threshold):\n        if isinstance(self, ABCSeries):\n            threshold = self._constructor(threshold, index=self.index)\n        else:\n            threshold = _align_method_FRAME(self, threshold, axis)\n    return self.where(subset, threshold, axis=axis, inplace=inplace)",
                "def clip(\n    self: FrameOrSeries,\n    lower=None,\n    upper=None,\n    axis=None,\n    inplace: bool_t = False,\n    *args,\n    **kwargs,\n) -> FrameOrSeries:\n    \"\"\"\n    Trim values at input threshold(s).\n\n    Assigns values outside boundary to boundary values. Thresholds\n    can be singular values or array like, and in the latter case\n    the clipping is performed element-wise in the specified axis.\n\n    Parameters\n    ----------\n    lower : float or array_like, default None\n        Minimum threshold value. All values below this\n        threshold will be set to it.\n    upper : float or array_like, default None\n        Maximum threshold value. All values above this\n        threshold will be set to it.\n    axis : int or str axis name, optional\n        Align object with lower and upper along the given axis.\n    inplace : bool, default False\n        Whether to perform the operation in place on the data.\n\n        .. versionadded:: 0.21.0\n    *args, **kwargs\n        Additional keywords have no effect but might be accepted\n        for compatibility with numpy.\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as calling object with the values outside the\n        clip boundaries replaced.\n\n    Examples\n    --------\n    >>> data = {'col_0': [9, -3, 0, -1, 5], 'col_1': [-2, -7, 6, 8, -5]}\n    >>> df = pd.DataFrame(data)\n    >>> df\n       col_0  col_1\n    0      9     -2\n    1     -3     -7\n    2      0      6\n    3     -1      8\n    4      5     -5\n\n    Clips per column using lower and upper thresholds:\n\n    >>> df.clip(-4, 6)\n       col_0  col_1\n    0      6     -2\n    1     -3     -4\n    2      0      6\n    3     -1      6\n    4      5     -4\n\n    Clips using specific lower and upper thresholds per column element:\n\n    >>> t = pd.Series([2, -4, -1, 6, 3])\n    >>> t\n    0    2\n    1   -4\n    2   -1\n    3    6\n    4    3\n    dtype: int64\n\n    >>> df.clip(t, t + 4, axis=0)\n       col_0  col_1\n    0      6      2\n    1     -3     -4\n    2      0      3\n    3      6      8\n    4      5      3\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    axis = nv.validate_clip_with_axis(axis, args, kwargs)\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n\n    # GH 17276\n    # numpy doesn't like NaN as a clip value\n    # so ignore\n    # GH 19992\n    # numpy doesn't drop a list-like bound containing NaN\n    if not is_list_like(lower) and np.any(isna(lower)):\n        lower = None\n    if not is_list_like(upper) and np.any(isna(upper)):\n        upper = None\n\n    # GH 2747 (arguments were reversed)\n    if lower is not None and upper is not None:\n        if is_scalar(lower) and is_scalar(upper):\n            lower, upper = min(lower, upper), max(lower, upper)\n\n    # fast-path for scalars\n    if (lower is None or (is_scalar(lower) and is_number(lower))) and (\n        upper is None or (is_scalar(upper) and is_number(upper))\n    ):\n        return self._clip_with_scalar(lower, upper, inplace=inplace)\n\n    result = self\n    if lower is not None:\n        result = result._clip_with_one_bound(\n            lower, method=self.ge, axis=axis, inplace=inplace\n        )\n    if upper is not None:\n        if inplace:\n            result = self\n        result = result._clip_with_one_bound(\n            upper, method=self.le, axis=axis, inplace=inplace\n        )\n\n    return result",
                "def asfreq(\n    self: FrameOrSeries,\n    freq,\n    method=None,\n    how: Optional[str] = None,\n    normalize: bool_t = False,\n    fill_value=None,\n) -> FrameOrSeries:\n    \"\"\"\n    Convert TimeSeries to specified frequency.\n\n    Optionally provide filling method to pad/backfill missing values.\n\n    Returns the original data conformed to a new index with the specified\n    frequency. ``resample`` is more appropriate if an operation, such as\n    summarization, is necessary to represent the data at the new frequency.\n\n    Parameters\n    ----------\n    freq : DateOffset or str\n    method : {'backfill'/'bfill', 'pad'/'ffill'}, default None\n        Method to use for filling holes in reindexed Series (note this\n        does not fill NaNs that already were present):\n\n        * 'pad' / 'ffill': propagate last valid observation forward to next\n          valid\n        * 'backfill' / 'bfill': use NEXT valid observation to fill.\n    how : {'start', 'end'}, default end\n        For PeriodIndex only (see PeriodIndex.asfreq).\n    normalize : bool, default False\n        Whether to reset output index to midnight.\n    fill_value : scalar, optional\n        Value to use for missing values, applied during upsampling (note\n        this does not fill NaNs that already were present).\n\n    Returns\n    -------\n    converted : same type as caller\n\n    See Also\n    --------\n    reindex\n\n    Notes\n    -----\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 4 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=4, freq='T')\n    >>> series = pd.Series([0.0, None, 2.0, 3.0], index=index)\n    >>> df = pd.DataFrame({'s':series})\n    >>> df\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample the series into 30 second bins.\n\n    >>> df.asfreq(freq='30S')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    NaN\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    NaN\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``fill value``.\n\n    >>> df.asfreq(freq='30S', fill_value=9.0)\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    9.0\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    9.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    9.0\n    2000-01-01 00:03:00    3.0\n\n    Upsample again, providing a ``method``.\n\n    >>> df.asfreq(freq='30S', method='bfill')\n                           s\n    2000-01-01 00:00:00    0.0\n    2000-01-01 00:00:30    NaN\n    2000-01-01 00:01:00    NaN\n    2000-01-01 00:01:30    2.0\n    2000-01-01 00:02:00    2.0\n    2000-01-01 00:02:30    3.0\n    2000-01-01 00:03:00    3.0\n    \"\"\"\n    from pandas.core.resample import asfreq\n\n    return asfreq(\n        self,\n        freq,\n        method=method,\n        how=how,\n        normalize=normalize,\n        fill_value=fill_value,\n    )",
                "def at_time(\n    self: FrameOrSeries, time, asof: bool_t = False, axis=None\n) -> FrameOrSeries:\n    \"\"\"\n    Select values at particular time of day (e.g. 9:30AM).\n\n    Parameters\n    ----------\n    time : datetime.time or str\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    between_time : Select values between particular times of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_at_time : Get just the index locations for\n        values at particular time of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='12H')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-09 12:00:00  2\n    2018-04-10 00:00:00  3\n    2018-04-10 12:00:00  4\n\n    >>> ts.at_time('12:00')\n                         A\n    2018-04-09 12:00:00  2\n    2018-04-10 12:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_at_time(time, asof=asof)\n    except AttributeError:\n        raise TypeError(\"Index must be DatetimeIndex\")\n\n    return self.take(indexer, axis=axis)",
                "def between_time(\n    self: FrameOrSeries,\n    start_time,\n    end_time,\n    include_start: bool_t = True,\n    include_end: bool_t = True,\n    axis=None,\n) -> FrameOrSeries:\n    \"\"\"\n    Select values between particular times of the day (e.g., 9:00-9:30 AM).\n\n    By setting ``start_time`` to be later than ``end_time``,\n    you can get the times that are *not* between the two times.\n\n    Parameters\n    ----------\n    start_time : datetime.time or str\n    end_time : datetime.time or str\n    include_start : bool, default True\n    include_end : bool, default True\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    at_time : Select values at a particular time of the day.\n    first : Select initial periods of time series based on a date offset.\n    last : Select final periods of time series based on a date offset.\n    DatetimeIndex.indexer_between_time : Get just the index locations for\n        values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='1D20min')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n    2018-04-12 01:00:00  4\n\n    >>> ts.between_time('0:15', '0:45')\n                         A\n    2018-04-10 00:20:00  2\n    2018-04-11 00:40:00  3\n\n    You get the times that are *not* between two times by setting\n    ``start_time`` later than ``end_time``:\n\n    >>> ts.between_time('0:45', '0:15')\n                         A\n    2018-04-09 00:00:00  1\n    2018-04-12 01:00:00  4\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n\n    index = self._get_axis(axis)\n    try:\n        indexer = index.indexer_between_time(\n            start_time,\n            end_time,\n            include_start=include_start,\n            include_end=include_end,\n        )\n    except AttributeError:\n        raise TypeError(\"Index must be DatetimeIndex\")\n\n    return self.take(indexer, axis=axis)",
                "def resample(\n    self,\n    rule,\n    axis=0,\n    closed: Optional[str] = None,\n    label: Optional[str] = None,\n    convention: str = \"start\",\n    kind: Optional[str] = None,\n    loffset=None,\n    base: int = 0,\n    on=None,\n    level=None,\n):\n    \"\"\"\n    Resample time-series data.\n\n    Convenience method for frequency conversion and resampling of time\n    series. Object must have a datetime-like index (`DatetimeIndex`,\n    `PeriodIndex`, or `TimedeltaIndex`), or pass datetime-like values\n    to the `on` or `level` keyword.\n\n    Parameters\n    ----------\n    rule : DateOffset, Timedelta or str\n        The offset string or object representing target conversion.\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Which axis to use for up- or down-sampling. For `Series` this\n        will default to 0, i.e. along the rows. Must be\n        `DatetimeIndex`, `TimedeltaIndex` or `PeriodIndex`.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    label : {'right', 'left'}, default None\n        Which bin edge label to label bucket with. The default is 'left'\n        for all frequency offsets except for 'M', 'A', 'Q', 'BM',\n        'BA', 'BQ', and 'W' which all have a default of 'right'.\n    convention : {'start', 'end', 's', 'e'}, default 'start'\n        For `PeriodIndex` only, controls whether to use the start or\n        end of `rule`.\n    kind : {'timestamp', 'period'}, optional, default None\n        Pass 'timestamp' to convert the resulting index to a\n        `DateTimeIndex` or 'period' to convert it to a `PeriodIndex`.\n        By default the input representation is retained.\n    loffset : timedelta, default None\n        Adjust the resampled time labels.\n    base : int, default 0\n        For frequencies that evenly subdivide 1 day, the \"origin\" of the\n        aggregated intervals. For example, for '5min' frequency, base could\n        range from 0 through 4. Defaults to 0.\n    on : str, optional\n        For a DataFrame, column to use instead of index for resampling.\n        Column must be datetime-like.\n\n    level : str or int, optional\n        For a MultiIndex, level (name or number) to use for\n        resampling. `level` must be datetime-like.\n\n    Returns\n    -------\n    Resampler object\n\n    See Also\n    --------\n    groupby : Group by mapping, function, label, or list of labels.\n    Series.resample : Resample a Series.\n    DataFrame.resample: Resample a DataFrame.\n\n    Notes\n    -----\n    See the `user guide\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#resampling>`_\n    for more.\n\n    To learn more about the offset strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects>`__.\n\n    Examples\n    --------\n\n    Start by creating a series with 9 one minute timestamps.\n\n    >>> index = pd.date_range('1/1/2000', periods=9, freq='T')\n    >>> series = pd.Series(range(9), index=index)\n    >>> series\n    2000-01-01 00:00:00    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:02:00    2\n    2000-01-01 00:03:00    3\n    2000-01-01 00:04:00    4\n    2000-01-01 00:05:00    5\n    2000-01-01 00:06:00    6\n    2000-01-01 00:07:00    7\n    2000-01-01 00:08:00    8\n    Freq: T, dtype: int64\n\n    Downsample the series into 3 minute bins and sum the values\n    of the timestamps falling into a bin.\n\n    >>> series.resample('3T').sum()\n    2000-01-01 00:00:00     3\n    2000-01-01 00:03:00    12\n    2000-01-01 00:06:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but label each\n    bin using the right edge instead of the left. Please note that the\n    value in the bucket used as the label is not included in the bucket,\n    which it labels. For example, in the original series the\n    bucket ``2000-01-01 00:03:00`` contains the value 3, but the summed\n    value in the resampled bucket with the label ``2000-01-01 00:03:00``\n    does not include 3 (if it did, the summed value would be 6, not 3).\n    To include this value close the right side of the bin interval as\n    illustrated in the example below this one.\n\n    >>> series.resample('3T', label='right').sum()\n    2000-01-01 00:03:00     3\n    2000-01-01 00:06:00    12\n    2000-01-01 00:09:00    21\n    Freq: 3T, dtype: int64\n\n    Downsample the series into 3 minute bins as above, but close the right\n    side of the bin interval.\n\n    >>> series.resample('3T', label='right', closed='right').sum()\n    2000-01-01 00:00:00     0\n    2000-01-01 00:03:00     6\n    2000-01-01 00:06:00    15\n    2000-01-01 00:09:00    15\n    Freq: 3T, dtype: int64\n\n    Upsample the series into 30 second bins.\n\n    >>> series.resample('30S').asfreq()[0:5]   # Select first 5 rows\n    2000-01-01 00:00:00   0.0\n    2000-01-01 00:00:30   NaN\n    2000-01-01 00:01:00   1.0\n    2000-01-01 00:01:30   NaN\n    2000-01-01 00:02:00   2.0\n    Freq: 30S, dtype: float64\n\n    Upsample the series into 30 second bins and fill the ``NaN``\n    values using the ``pad`` method.\n\n    >>> series.resample('30S').pad()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    0\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    1\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Upsample the series into 30 second bins and fill the\n    ``NaN`` values using the ``bfill`` method.\n\n    >>> series.resample('30S').bfill()[0:5]\n    2000-01-01 00:00:00    0\n    2000-01-01 00:00:30    1\n    2000-01-01 00:01:00    1\n    2000-01-01 00:01:30    2\n    2000-01-01 00:02:00    2\n    Freq: 30S, dtype: int64\n\n    Pass a custom function via ``apply``\n\n    >>> def custom_resampler(array_like):\n    ...     return np.sum(array_like) + 5\n    ...\n    >>> series.resample('3T').apply(custom_resampler)\n    2000-01-01 00:00:00     8\n    2000-01-01 00:03:00    17\n    2000-01-01 00:06:00    26\n    Freq: 3T, dtype: int64\n\n    For a Series with a PeriodIndex, the keyword `convention` can be\n    used to control whether to use the start or end of `rule`.\n\n    Resample a year by quarter using 'start' `convention`. Values are\n    assigned to the first quarter of the period.\n\n    >>> s = pd.Series([1, 2], index=pd.period_range('2012-01-01',\n    ...                                             freq='A',\n    ...                                             periods=2))\n    >>> s\n    2012    1\n    2013    2\n    Freq: A-DEC, dtype: int64\n    >>> s.resample('Q', convention='start').asfreq()\n    2012Q1    1.0\n    2012Q2    NaN\n    2012Q3    NaN\n    2012Q4    NaN\n    2013Q1    2.0\n    2013Q2    NaN\n    2013Q3    NaN\n    2013Q4    NaN\n    Freq: Q-DEC, dtype: float64\n\n    Resample quarters by month using 'end' `convention`. Values are\n    assigned to the last month of the period.\n\n    >>> q = pd.Series([1, 2, 3, 4], index=pd.period_range('2018-01-01',\n    ...                                                   freq='Q',\n    ...                                                   periods=4))\n    >>> q\n    2018Q1    1\n    2018Q2    2\n    2018Q3    3\n    2018Q4    4\n    Freq: Q-DEC, dtype: int64\n    >>> q.resample('M', convention='end').asfreq()\n    2018-03    1.0\n    2018-04    NaN\n    2018-05    NaN\n    2018-06    2.0\n    2018-07    NaN\n    2018-08    NaN\n    2018-09    3.0\n    2018-10    NaN\n    2018-11    NaN\n    2018-12    4.0\n    Freq: M, dtype: float64\n\n    For DataFrame objects, the keyword `on` can be used to specify the\n    column instead of the index for resampling.\n\n    >>> d = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...           'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df = pd.DataFrame(d)\n    >>> df['week_starting'] = pd.date_range('01/01/2018',\n    ...                                     periods=8,\n    ...                                     freq='W')\n    >>> df\n       price  volume week_starting\n    0     10      50    2018-01-07\n    1     11      60    2018-01-14\n    2      9      40    2018-01-21\n    3     13     100    2018-01-28\n    4     14      50    2018-02-04\n    5     18     100    2018-02-11\n    6     17      40    2018-02-18\n    7     19      50    2018-02-25\n    >>> df.resample('M', on='week_starting').mean()\n                   price  volume\n    week_starting\n    2018-01-31     10.75    62.5\n    2018-02-28     17.00    60.0\n\n    For a DataFrame with MultiIndex, the keyword `level` can be used to\n    specify on which level the resampling needs to take place.\n\n    >>> days = pd.date_range('1/1/2000', periods=4, freq='D')\n    >>> d2 = dict({'price': [10, 11, 9, 13, 14, 18, 17, 19],\n    ...            'volume': [50, 60, 40, 100, 50, 100, 40, 50]})\n    >>> df2 = pd.DataFrame(d2,\n    ...                    index=pd.MultiIndex.from_product([days,\n    ...                                                     ['morning',\n    ...                                                      'afternoon']]\n    ...                                                     ))\n    >>> df2\n                          price  volume\n    2000-01-01 morning       10      50\n               afternoon     11      60\n    2000-01-02 morning        9      40\n               afternoon     13     100\n    2000-01-03 morning       14      50\n               afternoon     18     100\n    2000-01-04 morning       17      40\n               afternoon     19      50\n    >>> df2.resample('D', level=0).sum()\n                price  volume\n    2000-01-01     21     110\n    2000-01-02     22     140\n    2000-01-03     32     150\n    2000-01-04     36      90\n    \"\"\"\n\n    from pandas.core.resample import resample\n\n    axis = self._get_axis_number(axis)\n    return resample(\n        self,\n        freq=rule,\n        label=label,\n        closed=closed,\n        axis=axis,\n        kind=kind,\n        loffset=loffset,\n        convention=convention,\n        base=base,\n        key=on,\n        level=level,\n    )",
                "def first(self: FrameOrSeries, offset) -> FrameOrSeries:\n    \"\"\"\n    Method to subset initial periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    last : Select final periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1,2,3,4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the first 3 days:\n\n    >>> ts.first('3D')\n                A\n    2018-04-09  1\n    2018-04-11  2\n\n    Notice the data for 3 first calender days were returned, not the first\n    3 days observed in the dataset, and therefore data for 2018-04-13 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'first' only supports a DatetimeIndex index\")\n\n    if len(self.index) == 0:\n        return self\n\n    offset = to_offset(offset)\n    end_date = end = self.index[0] + offset\n\n    # Tick-like, e.g. 3 weeks\n    if not offset.is_anchored() and hasattr(offset, \"_inc\"):\n        if end_date in self.index:\n            end = self.index.searchsorted(end_date, side=\"left\")\n            return self.iloc[:end]\n\n    return self.loc[:end]",
                "def last(self: FrameOrSeries, offset) -> FrameOrSeries:\n    \"\"\"\n    Method to subset final periods of time series data based on a date offset.\n\n    Parameters\n    ----------\n    offset : str, DateOffset, dateutil.relativedelta\n\n    Returns\n    -------\n    subset : same type as caller\n\n    Raises\n    ------\n    TypeError\n        If the index is not  a :class:`DatetimeIndex`\n\n    See Also\n    --------\n    first : Select initial periods of time series based on a date offset.\n    at_time : Select values at a particular time of the day.\n    between_time : Select values between particular times of the day.\n\n    Examples\n    --------\n    >>> i = pd.date_range('2018-04-09', periods=4, freq='2D')\n    >>> ts = pd.DataFrame({'A': [1, 2, 3, 4]}, index=i)\n    >>> ts\n                A\n    2018-04-09  1\n    2018-04-11  2\n    2018-04-13  3\n    2018-04-15  4\n\n    Get the rows for the last 3 days:\n\n    >>> ts.last('3D')\n                A\n    2018-04-13  3\n    2018-04-15  4\n\n    Notice the data for 3 last calender days were returned, not the last\n    3 observed days in the dataset, and therefore data for 2018-04-11 was\n    not returned.\n    \"\"\"\n    if not isinstance(self.index, DatetimeIndex):\n        raise TypeError(\"'last' only supports a DatetimeIndex index\")\n\n    if len(self.index) == 0:\n        return self\n\n    offset = to_offset(offset)\n\n    start_date = self.index[-1] - offset\n    start = self.index.searchsorted(start_date, side=\"right\")\n    return self.iloc[start:]",
                "def rank(\n    self: FrameOrSeries,\n    axis=0,\n    method: str = \"average\",\n    numeric_only: Optional[bool_t] = None,\n    na_option: str = \"keep\",\n    ascending: bool_t = True,\n    pct: bool_t = False,\n) -> FrameOrSeries:\n    \"\"\"\n    Compute numerical data ranks (1 through n) along axis.\n\n    By default, equal values are assigned a rank that is the average of the\n    ranks of those values.\n\n    Parameters\n    ----------\n    axis : {0 or 'index', 1 or 'columns'}, default 0\n        Index to direct ranking.\n    method : {'average', 'min', 'max', 'first', 'dense'}, default 'average'\n        How to rank the group of records that have the same value (i.e. ties):\n\n        * average: average rank of the group\n        * min: lowest rank in the group\n        * max: highest rank in the group\n        * first: ranks assigned in order they appear in the array\n        * dense: like 'min', but rank always increases by 1 between groups.\n\n    numeric_only : bool, optional\n        For DataFrame objects, rank only numeric columns if set to True.\n    na_option : {'keep', 'top', 'bottom'}, default 'keep'\n        How to rank NaN values:\n\n        * keep: assign NaN rank to NaN values\n        * top: assign smallest rank to NaN values if ascending\n        * bottom: assign highest rank to NaN values if ascending.\n\n    ascending : bool, default True\n        Whether or not the elements should be ranked in ascending order.\n    pct : bool, default False\n        Whether or not to display the returned rankings in percentile\n        form.\n\n    Returns\n    -------\n    same type as caller\n        Return a Series or DataFrame with data ranks as values.\n\n    See Also\n    --------\n    core.groupby.GroupBy.rank : Rank of values within each group.\n\n    Examples\n    --------\n\n    >>> df = pd.DataFrame(data={'Animal': ['cat', 'penguin', 'dog',\n    ...                                    'spider', 'snake'],\n    ...                         'Number_legs': [4, 2, 4, 8, np.nan]})\n    >>> df\n        Animal  Number_legs\n    0      cat          4.0\n    1  penguin          2.0\n    2      dog          4.0\n    3   spider          8.0\n    4    snake          NaN\n\n    The following example shows how the method behaves with the above\n    parameters:\n\n    * default_rank: this is the default behaviour obtained without using\n      any parameter.\n    * max_rank: setting ``method = 'max'`` the records that have the\n      same values are ranked using the highest rank (e.g.: since 'cat'\n      and 'dog' are both in the 2nd and 3rd position, rank 3 is assigned.)\n    * NA_bottom: choosing ``na_option = 'bottom'``, if there are records\n      with NaN values they are placed at the bottom of the ranking.\n    * pct_rank: when setting ``pct = True``, the ranking is expressed as\n      percentile rank.\n\n    >>> df['default_rank'] = df['Number_legs'].rank()\n    >>> df['max_rank'] = df['Number_legs'].rank(method='max')\n    >>> df['NA_bottom'] = df['Number_legs'].rank(na_option='bottom')\n    >>> df['pct_rank'] = df['Number_legs'].rank(pct=True)\n    >>> df\n        Animal  Number_legs  default_rank  max_rank  NA_bottom  pct_rank\n    0      cat          4.0           2.5       3.0        2.5     0.625\n    1  penguin          2.0           1.0       1.0        1.0     0.250\n    2      dog          4.0           2.5       3.0        2.5     0.625\n    3   spider          8.0           4.0       4.0        4.0     1.000\n    4    snake          NaN           NaN       NaN        5.0       NaN\n    \"\"\"\n    axis = self._get_axis_number(axis)\n\n    if na_option not in {\"keep\", \"top\", \"bottom\"}:\n        msg = \"na_option must be one of 'keep', 'top', or 'bottom'\"\n        raise ValueError(msg)\n\n    def ranker(data):\n        ranks = algos.rank(\n            data.values,\n            axis=axis,\n            method=method,\n            ascending=ascending,\n            na_option=na_option,\n            pct=pct,\n        )\n        ranks = self._constructor(ranks, **data._construct_axes_dict())\n        return ranks.__finalize__(self)\n\n    # if numeric_only is None, and we can't get anything, we try with\n    # numeric_only=True\n    if numeric_only is None:\n        try:\n            return ranker(self)\n        except TypeError:\n            numeric_only = True\n\n    if numeric_only:\n        data = self._get_numeric_data()\n    else:\n        data = self\n\n    return ranker(data)",
                "@Appender(_shared_docs[\"align\"] % _shared_doc_kwargs)\ndef align(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy=True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n    broadcast_axis=None,\n):\n    method = missing.clean_fill_method(method)\n\n    if broadcast_axis == 1 and self.ndim != other.ndim:\n        if isinstance(self, ABCSeries):\n            # this means other is a DataFrame, and we need to broadcast\n            # self\n            cons = self._constructor_expanddim\n            df = cons(\n                {c: self for c in other.columns}, **other._construct_axes_dict()\n            )\n            return df._align_frame(\n                other,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n        elif isinstance(other, ABCSeries):\n            # this means self is a DataFrame, and we need to broadcast\n            # other\n            cons = other._constructor_expanddim\n            df = cons(\n                {c: other for c in self.columns}, **self._construct_axes_dict()\n            )\n            return self._align_frame(\n                df,\n                join=join,\n                axis=axis,\n                level=level,\n                copy=copy,\n                fill_value=fill_value,\n                method=method,\n                limit=limit,\n                fill_axis=fill_axis,\n            )\n\n    if axis is not None:\n        axis = self._get_axis_number(axis)\n    if isinstance(other, ABCDataFrame):\n        return self._align_frame(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n        )\n    elif isinstance(other, ABCSeries):\n        return self._align_series(\n            other,\n            join=join,\n            axis=axis,\n            level=level,\n            copy=copy,\n            fill_value=fill_value,\n            method=method,\n            limit=limit,\n            fill_axis=fill_axis,\n        )\n    else:  # pragma: no cover\n        raise TypeError(f\"unsupported type: {type(other)}\")",
                "def _align_frame(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy: bool_t = True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n):\n    # defaults\n    join_index, join_columns = None, None\n    ilidx, iridx = None, None\n    clidx, cridx = None, None\n\n    is_series = isinstance(self, ABCSeries)\n\n    if axis is None or axis == 0:\n        if not self.index.equals(other.index):\n            join_index, ilidx, iridx = self.index.join(\n                other.index, how=join, level=level, return_indexers=True\n            )\n\n    if axis is None or axis == 1:\n        if not is_series and not self.columns.equals(other.columns):\n            join_columns, clidx, cridx = self.columns.join(\n                other.columns, how=join, level=level, return_indexers=True\n            )\n\n    if is_series:\n        reindexers = {0: [join_index, ilidx]}\n    else:\n        reindexers = {0: [join_index, ilidx], 1: [join_columns, clidx]}\n\n    left = self._reindex_with_indexers(\n        reindexers, copy=copy, fill_value=fill_value, allow_dups=True\n    )\n    # other must be always DataFrame\n    right = other._reindex_with_indexers(\n        {0: [join_index, iridx], 1: [join_columns, cridx]},\n        copy=copy,\n        fill_value=fill_value,\n        allow_dups=True,\n    )\n\n    if method is not None:\n        left = self._ensure_type(\n            left.fillna(method=method, axis=fill_axis, limit=limit)\n        )\n        right = self._ensure_type(\n            right.fillna(method=method, axis=fill_axis, limit=limit)\n        )\n\n    # if DatetimeIndex have different tz, convert to UTC\n    if is_datetime64tz_dtype(left.index):\n        if left.index.tz != right.index.tz:\n            if join_index is not None:\n                left.index = join_index\n                right.index = join_index\n\n    return left.__finalize__(self), right.__finalize__(other)",
                "def _align_series(\n    self,\n    other,\n    join=\"outer\",\n    axis=None,\n    level=None,\n    copy: bool_t = True,\n    fill_value=None,\n    method=None,\n    limit=None,\n    fill_axis=0,\n):\n\n    is_series = isinstance(self, ABCSeries)\n\n    # series/series compat, other must always be a Series\n    if is_series:\n        if axis:\n            raise ValueError(\"cannot align series to a series other than axis 0\")\n\n        # equal\n        if self.index.equals(other.index):\n            join_index, lidx, ridx = None, None, None\n        else:\n            join_index, lidx, ridx = self.index.join(\n                other.index, how=join, level=level, return_indexers=True\n            )\n\n        left = self._reindex_indexer(join_index, lidx, copy)\n        right = other._reindex_indexer(join_index, ridx, copy)\n\n    else:\n        # one has > 1 ndim\n        fdata = self._data\n        if axis == 0:\n            join_index = self.index\n            lidx, ridx = None, None\n            if not self.index.equals(other.index):\n                join_index, lidx, ridx = self.index.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=1)\n\n        elif axis == 1:\n            join_index = self.columns\n            lidx, ridx = None, None\n            if not self.columns.equals(other.index):\n                join_index, lidx, ridx = self.columns.join(\n                    other.index, how=join, level=level, return_indexers=True\n                )\n\n            if lidx is not None:\n                fdata = fdata.reindex_indexer(join_index, lidx, axis=0)\n        else:\n            raise ValueError(\"Must specify axis=0 or 1\")\n\n        if copy and fdata is self._data:\n            fdata = fdata.copy()\n\n        left = self._constructor(fdata)\n\n        if ridx is None:\n            right = other\n        else:\n            right = other.reindex(join_index, level=level)\n\n    # fill\n    fill_na = notna(fill_value) or (method is not None)\n    if fill_na:\n        left = left.fillna(fill_value, method=method, limit=limit, axis=fill_axis)\n        right = right.fillna(fill_value, method=method, limit=limit)\n\n    # if DatetimeIndex have different tz, convert to UTC\n    if is_series or (not is_series and axis == 0):\n        if is_datetime64tz_dtype(left.index):\n            if left.index.tz != right.index.tz:\n                if join_index is not None:\n                    left.index = join_index\n                    right.index = join_index\n\n    return left.__finalize__(self), right.__finalize__(other)",
                "def _where(\n    self,\n    cond,\n    other=np.nan,\n    inplace=False,\n    axis=None,\n    level=None,\n    errors=\"raise\",\n    try_cast=False,\n):\n    \"\"\"\n    Equivalent to public method `where`, except that `other` is not\n    applied as a function even if callable. Used in __setitem__.\n    \"\"\"\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n\n    # align the cond to same shape as myself\n    cond = com.apply_if_callable(cond, self)\n    if isinstance(cond, NDFrame):\n        cond, _ = cond.align(self, join=\"right\", broadcast_axis=1)\n    else:\n        if not hasattr(cond, \"shape\"):\n            cond = np.asanyarray(cond)\n        if cond.shape != self.shape:\n            raise ValueError(\"Array conditional must be same shape as self\")\n        cond = self._constructor(cond, **self._construct_axes_dict())\n\n    # make sure we are boolean\n    fill_value = bool(inplace)\n    cond = cond.fillna(fill_value)\n\n    msg = \"Boolean array expected for the condition, not {dtype}\"\n\n    if not isinstance(cond, ABCDataFrame):\n        # This is a single-dimensional object.\n        if not is_bool_dtype(cond):\n            raise ValueError(msg.format(dtype=cond.dtype))\n    elif not cond.empty:\n        for dt in cond.dtypes:\n            if not is_bool_dtype(dt):\n                raise ValueError(msg.format(dtype=dt))\n\n    cond = -cond if inplace else cond\n\n    # try to align with other\n    try_quick = True\n    if hasattr(other, \"align\"):\n\n        # align with me\n        if other.ndim <= self.ndim:\n\n            _, other = self.align(\n                other, join=\"left\", axis=axis, level=level, fill_value=np.nan\n            )\n\n            # if we are NOT aligned, raise as we cannot where index\n            if axis is None and not all(\n                other._get_axis(i).equals(ax) for i, ax in enumerate(self.axes)\n            ):\n                raise InvalidIndexError\n\n        # slice me out of the other\n        else:\n            raise NotImplementedError(\n                \"cannot align with a higher dimensional NDFrame\"\n            )\n\n    if isinstance(other, np.ndarray):\n\n        if other.shape != self.shape:\n\n            if self.ndim == 1:\n\n                icond = cond.values\n\n                # GH 2745 / GH 4192\n                # treat like a scalar\n                if len(other) == 1:\n                    other = np.array(other[0])\n\n                # GH 3235\n                # match True cond to other\n                elif len(cond[icond]) == len(other):\n\n                    # try to not change dtype at first (if try_quick)\n                    if try_quick:\n                        new_other = com.values_from_object(self)\n                        new_other = new_other.copy()\n                        new_other[icond] = other\n                        other = new_other\n\n                else:\n                    raise ValueError(\n                        \"Length of replacements must equal series length\"\n                    )\n\n            else:\n                raise ValueError(\n                    \"other must be the same shape as self when an ndarray\"\n                )\n\n        # we are the same shape, so create an actual object for alignment\n        else:\n            other = self._constructor(other, **self._construct_axes_dict())\n\n    if axis is None:\n        axis = 0\n\n    if self.ndim == getattr(other, \"ndim\", 0):\n        align = True\n    else:\n        align = self._get_axis_number(axis) == 1\n\n    block_axis = self._get_block_manager_axis(axis)\n\n    if inplace:\n        # we may have different type blocks come out of putmask, so\n        # reconstruct the block manager\n\n        self._check_inplace_setting(other)\n        new_data = self._data.putmask(\n            mask=cond,\n            new=other,\n            align=align,\n            inplace=True,\n            axis=block_axis,\n            transpose=self._AXIS_REVERSED,\n        )\n        self._update_inplace(new_data)\n\n    else:\n        new_data = self._data.where(\n            other=other,\n            cond=cond,\n            align=align,\n            errors=errors,\n            try_cast=try_cast,\n            axis=block_axis,\n        )\n\n        return self._constructor(new_data).__finalize__(self)",
                "@Appender(\n    _shared_docs[\"where\"]\n    % dict(\n        _shared_doc_kwargs,\n        cond=\"True\",\n        cond_rev=\"False\",\n        name=\"where\",\n        name_other=\"mask\",\n    )\n)\ndef where(\n    self,\n    cond,\n    other=np.nan,\n    inplace=False,\n    axis=None,\n    level=None,\n    errors=\"raise\",\n    try_cast=False,\n):\n\n    other = com.apply_if_callable(other, self)\n    return self._where(\n        cond, other, inplace, axis, level, errors=errors, try_cast=try_cast\n    )",
                "@Appender(\n    _shared_docs[\"where\"]\n    % dict(\n        _shared_doc_kwargs,\n        cond=\"False\",\n        cond_rev=\"True\",\n        name=\"mask\",\n        name_other=\"where\",\n    )\n)\ndef mask(\n    self,\n    cond,\n    other=np.nan,\n    inplace=False,\n    axis=None,\n    level=None,\n    errors=\"raise\",\n    try_cast=False,\n):\n\n    inplace = validate_bool_kwarg(inplace, \"inplace\")\n    cond = com.apply_if_callable(cond, self)\n\n    # see gh-21891\n    if not hasattr(cond, \"__invert__\"):\n        cond = np.array(cond)\n\n    return self.where(\n        ~cond,\n        other=other,\n        inplace=inplace,\n        axis=axis,\n        level=level,\n        try_cast=try_cast,\n        errors=errors,\n    )",
                "@Appender(_shared_docs[\"shift\"] % _shared_doc_kwargs)\ndef shift(\n    self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None\n) -> FrameOrSeries:\n    if periods == 0:\n        return self.copy()\n\n    block_axis = self._get_block_manager_axis(axis)\n    if freq is None:\n        new_data = self._data.shift(\n            periods=periods, axis=block_axis, fill_value=fill_value\n        )\n    else:\n        return self.tshift(periods, freq)\n\n    return self._constructor(new_data).__finalize__(self)",
                "def slice_shift(self: FrameOrSeries, periods: int = 1, axis=0) -> FrameOrSeries:\n    \"\"\"\n    Equivalent to `shift` without copying data.\n\n    The shifted data will not include the dropped periods and the\n    shifted axis will be smaller than the original.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n\n    Returns\n    -------\n    shifted : same type as caller\n\n    Notes\n    -----\n    While the `slice_shift` is faster than `shift`, you may pay for it\n    later during alignment.\n    \"\"\"\n    if periods == 0:\n        return self\n\n    if periods > 0:\n        vslicer = slice(None, -periods)\n        islicer = slice(periods, None)\n    else:\n        vslicer = slice(-periods, None)\n        islicer = slice(None, periods)\n\n    new_obj = self._slice(vslicer, axis=axis)\n    shifted_axis = self._get_axis(axis)[islicer]\n    new_obj.set_axis(shifted_axis, axis=axis, inplace=True)\n\n    return new_obj.__finalize__(self)",
                "def tshift(\n    self: FrameOrSeries, periods: int = 1, freq=None, axis=0\n) -> FrameOrSeries:\n    \"\"\"\n    Shift the time index, using the index's frequency if available.\n\n    Parameters\n    ----------\n    periods : int\n        Number of periods to move, can be positive or negative.\n    freq : DateOffset, timedelta, or str, default None\n        Increment to use from the tseries module\n        or time rule expressed as a string (e.g. 'EOM').\n    axis : {0 or \u2018index\u2019, 1 or \u2018columns\u2019, None}, default 0\n        Corresponds to the axis that contains the Index.\n\n    Returns\n    -------\n    shifted : Series/DataFrame\n\n    Notes\n    -----\n    If freq is not specified then tries to use the freq or inferred_freq\n    attributes of the index. If neither of those attributes exist, a\n    ValueError is thrown\n    \"\"\"\n\n    index = self._get_axis(axis)\n    if freq is None:\n        freq = getattr(index, \"freq\", None)\n\n    if freq is None:\n        freq = getattr(index, \"inferred_freq\", None)\n\n    if freq is None:\n        msg = \"Freq was not given and was not set in the index\"\n        raise ValueError(msg)\n\n    if periods == 0:\n        return self\n\n    if isinstance(freq, str):\n        freq = to_offset(freq)\n\n    block_axis = self._get_block_manager_axis(axis)\n    if isinstance(index, PeriodIndex):\n        orig_freq = to_offset(index.freq)\n        if freq == orig_freq:\n            new_data = self._data.copy()\n            new_data.axes[block_axis] = index.shift(periods)\n        elif orig_freq is not None:\n            msg = (\n                f\"Given freq {freq.rule_code} does not match\"\n                f\" PeriodIndex freq {orig_freq.rule_code}\"\n            )\n            raise ValueError(msg)\n    else:\n        new_data = self._data.copy()\n        new_data.axes[block_axis] = index.shift(periods, freq)\n\n    return self._constructor(new_data).__finalize__(self)",
                "def truncate(\n    self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t = True\n) -> FrameOrSeries:\n    \"\"\"\n    Truncate a Series or DataFrame before and after some index value.\n\n    This is a useful shorthand for boolean indexing based on index\n    values above or below certain thresholds.\n\n    Parameters\n    ----------\n    before : date, str, int\n        Truncate all rows before this index value.\n    after : date, str, int\n        Truncate all rows after this index value.\n    axis : {0 or 'index', 1 or 'columns'}, optional\n        Axis to truncate. Truncates the index (rows) by default.\n    copy : bool, default is True,\n        Return a copy of the truncated section.\n\n    Returns\n    -------\n    type of caller\n        The truncated Series or DataFrame.\n\n    See Also\n    --------\n    DataFrame.loc : Select a subset of a DataFrame by label.\n    DataFrame.iloc : Select a subset of a DataFrame by position.\n\n    Notes\n    -----\n    If the index being truncated contains only datetime values,\n    `before` and `after` may be specified as strings instead of\n    Timestamps.\n\n    Examples\n    --------\n    >>> df = pd.DataFrame({'A': ['a', 'b', 'c', 'd', 'e'],\n    ...                    'B': ['f', 'g', 'h', 'i', 'j'],\n    ...                    'C': ['k', 'l', 'm', 'n', 'o']},\n    ...                   index=[1, 2, 3, 4, 5])\n    >>> df\n       A  B  C\n    1  a  f  k\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n    5  e  j  o\n\n    >>> df.truncate(before=2, after=4)\n       A  B  C\n    2  b  g  l\n    3  c  h  m\n    4  d  i  n\n\n    The columns of a DataFrame can be truncated.\n\n    >>> df.truncate(before=\"A\", after=\"B\", axis=\"columns\")\n       A  B\n    1  a  f\n    2  b  g\n    3  c  h\n    4  d  i\n    5  e  j\n\n    For Series, only rows can be truncated.\n\n    >>> df['A'].truncate(before=2, after=4)\n    2    b\n    3    c\n    4    d\n    Name: A, dtype: object\n\n    The index values in ``truncate`` can be datetimes or string\n    dates.\n\n    >>> dates = pd.date_range('2016-01-01', '2016-02-01', freq='s')\n    >>> df = pd.DataFrame(index=dates, data={'A': 1})\n    >>> df.tail()\n                         A\n    2016-01-31 23:59:56  1\n    2016-01-31 23:59:57  1\n    2016-01-31 23:59:58  1\n    2016-01-31 23:59:59  1\n    2016-02-01 00:00:00  1\n\n    >>> df.truncate(before=pd.Timestamp('2016-01-05'),\n    ...             after=pd.Timestamp('2016-01-10')).tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Because the index is a DatetimeIndex containing only dates, we can\n    specify `before` and `after` as strings. They will be coerced to\n    Timestamps before truncation.\n\n    >>> df.truncate('2016-01-05', '2016-01-10').tail()\n                         A\n    2016-01-09 23:59:56  1\n    2016-01-09 23:59:57  1\n    2016-01-09 23:59:58  1\n    2016-01-09 23:59:59  1\n    2016-01-10 00:00:00  1\n\n    Note that ``truncate`` assumes a 0 value for any unspecified time\n    component (midnight). This differs from partial string slicing, which\n    returns any partially matching dates.\n\n    >>> df.loc['2016-01-05':'2016-01-10', :].tail()\n                         A\n    2016-01-10 23:59:55  1\n    2016-01-10 23:59:56  1\n    2016-01-10 23:59:57  1\n    2016-01-10 23:59:58  1\n    2016-01-10 23:59:59  1\n    \"\"\"\n    if axis is None:\n        axis = self._stat_axis_number\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    # GH 17935\n    # Check that index is sorted\n    if not ax.is_monotonic_increasing and not ax.is_monotonic_decreasing:\n        raise ValueError(\"truncate requires a sorted index\")\n\n    # if we have a date index, convert to dates, otherwise\n    # treat like a slice\n    if ax.is_all_dates:\n        from pandas.core.tools.datetimes import to_datetime\n\n        before = to_datetime(before)\n        after = to_datetime(after)\n\n    if before is not None and after is not None:\n        if before > after:\n            raise ValueError(f\"Truncate: {after} must be after {before}\")\n\n    slicer = [slice(None, None)] * self._AXIS_LEN\n    slicer[axis] = slice(before, after)\n    result = self.loc[tuple(slicer)]\n\n    if isinstance(ax, MultiIndex):\n        setattr(result, self._get_axis_name(axis), ax.truncate(before, after))\n\n    if copy:\n        result = result.copy()\n\n    return result",
                "def tz_convert(\n    self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t = True\n) -> FrameOrSeries:\n    \"\"\"\n    Convert tz-aware axis to target time zone.\n\n    Parameters\n    ----------\n    tz : str or tzinfo object\n    axis : the axis to convert\n    level : int, str, default None\n        If axis is a MultiIndex, convert a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n\n    Returns\n    -------\n    %(klass)s\n        Object with time zone converted axis.\n\n    Raises\n    ------\n    TypeError\n        If the axis is tz-naive.\n    \"\"\"\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_convert(ax, tz):\n        if not hasattr(ax, \"tz_convert\"):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(\n                    f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                )\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_convert(tz)\n        return ax\n\n    # if a level is given it must be a MultiIndex level or\n    # equivalent to the axis name\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_convert(ax.levels[level], tz)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f\"The level {level} is not valid\")\n        ax = _tz_convert(ax, tz)\n\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                "def tz_localize(\n    self: FrameOrSeries,\n    tz,\n    axis=0,\n    level=None,\n    copy: bool_t = True,\n    ambiguous=\"raise\",\n    nonexistent: str = \"raise\",\n) -> FrameOrSeries:\n    \"\"\"\n    Localize tz-naive index of a Series or DataFrame to target time zone.\n\n    This operation localizes the Index. To localize the values in a\n    timezone-naive Series, use :meth:`Series.dt.tz_localize`.\n\n    Parameters\n    ----------\n    tz : str or tzinfo\n    axis : the axis to localize\n    level : int, str, default None\n        If axis ia a MultiIndex, localize a specific level. Otherwise\n        must be None.\n    copy : bool, default True\n        Also make a copy of the underlying data.\n    ambiguous : 'infer', bool-ndarray, 'NaT', default 'raise'\n        When clocks moved backward due to DST, ambiguous times may arise.\n        For example in Central European Time (UTC+01), when going from\n        03:00 DST to 02:00 non-DST, 02:30:00 local time occurs both at\n        00:30:00 UTC and at 01:30:00 UTC. In such a situation, the\n        `ambiguous` parameter dictates how ambiguous times should be\n        handled.\n\n        - 'infer' will attempt to infer fall dst-transition hours based on\n          order\n        - bool-ndarray where True signifies a DST time, False designates\n          a non-DST time (note that this flag is only applicable for\n          ambiguous times)\n        - 'NaT' will return NaT where there are ambiguous times\n        - 'raise' will raise an AmbiguousTimeError if there are ambiguous\n          times.\n    nonexistent : str, default 'raise'\n        A nonexistent time does not exist in a particular timezone\n        where clocks moved forward due to DST. Valid values are:\n\n        - 'shift_forward' will shift the nonexistent time forward to the\n          closest existing time\n        - 'shift_backward' will shift the nonexistent time backward to the\n          closest existing time\n        - 'NaT' will return NaT where there are nonexistent times\n        - timedelta objects will shift nonexistent times by the timedelta\n        - 'raise' will raise an NonExistentTimeError if there are\n          nonexistent times.\n\n        .. versionadded:: 0.24.0\n\n    Returns\n    -------\n    Series or DataFrame\n        Same type as the input.\n\n    Raises\n    ------\n    TypeError\n        If the TimeSeries is tz-aware and tz is not None.\n\n    Examples\n    --------\n\n    Localize local times:\n\n    >>> s = pd.Series([1],\n    ...               index=pd.DatetimeIndex(['2018-09-15 01:30:00']))\n    >>> s.tz_localize('CET')\n    2018-09-15 01:30:00+02:00    1\n    dtype: int64\n\n    Be careful with DST changes. When there is sequential data, pandas\n    can infer the DST time:\n\n    >>> s = pd.Series(range(7),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 02:00:00',\n    ...                                       '2018-10-28 02:30:00',\n    ...                                       '2018-10-28 03:00:00',\n    ...                                       '2018-10-28 03:30:00']))\n    >>> s.tz_localize('CET', ambiguous='infer')\n    2018-10-28 01:30:00+02:00    0\n    2018-10-28 02:00:00+02:00    1\n    2018-10-28 02:30:00+02:00    2\n    2018-10-28 02:00:00+01:00    3\n    2018-10-28 02:30:00+01:00    4\n    2018-10-28 03:00:00+01:00    5\n    2018-10-28 03:30:00+01:00    6\n    dtype: int64\n\n    In some cases, inferring the DST is impossible. In such cases, you can\n    pass an ndarray to the ambiguous parameter to set the DST explicitly\n\n    >>> s = pd.Series(range(3),\n    ...               index=pd.DatetimeIndex(['2018-10-28 01:20:00',\n    ...                                       '2018-10-28 02:36:00',\n    ...                                       '2018-10-28 03:46:00']))\n    >>> s.tz_localize('CET', ambiguous=np.array([True, True, False]))\n    2018-10-28 01:20:00+02:00    0\n    2018-10-28 02:36:00+02:00    1\n    2018-10-28 03:46:00+01:00    2\n    dtype: int64\n\n    If the DST transition causes nonexistent times, you can shift these\n    dates forward or backwards with a timedelta object or `'shift_forward'`\n    or `'shift_backwards'`.\n    >>> s = pd.Series(range(2),\n    ...               index=pd.DatetimeIndex(['2015-03-29 02:30:00',\n    ...                                       '2015-03-29 03:30:00']))\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_forward')\n    2015-03-29 03:00:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent='shift_backward')\n    2015-03-29 01:59:59.999999999+01:00    0\n    2015-03-29 03:30:00+02:00              1\n    dtype: int64\n    >>> s.tz_localize('Europe/Warsaw', nonexistent=pd.Timedelta('1H'))\n    2015-03-29 03:30:00+02:00    0\n    2015-03-29 03:30:00+02:00    1\n    dtype: int64\n    \"\"\"\n    nonexistent_options = (\"raise\", \"NaT\", \"shift_forward\", \"shift_backward\")\n    if nonexistent not in nonexistent_options and not isinstance(\n        nonexistent, timedelta\n    ):\n        raise ValueError(\n            \"The nonexistent argument must be one of 'raise', \"\n            \"'NaT', 'shift_forward', 'shift_backward' or \"\n            \"a timedelta object\"\n        )\n\n    axis = self._get_axis_number(axis)\n    ax = self._get_axis(axis)\n\n    def _tz_localize(ax, tz, ambiguous, nonexistent):\n        if not hasattr(ax, \"tz_localize\"):\n            if len(ax) > 0:\n                ax_name = self._get_axis_name(axis)\n                raise TypeError(\n                    f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n                )\n            else:\n                ax = DatetimeIndex([], tz=tz)\n        else:\n            ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n        return ax\n\n    # if a level is given it must be a MultiIndex level or\n    # equivalent to the axis name\n    if isinstance(ax, MultiIndex):\n        level = ax._get_level_number(level)\n        new_level = _tz_localize(ax.levels[level], tz, ambiguous, nonexistent)\n        ax = ax.set_levels(new_level, level=level)\n    else:\n        if level not in (None, 0, ax.name):\n            raise ValueError(f\"The level {level} is not valid\")\n        ax = _tz_localize(ax, tz, ambiguous, nonexistent)\n\n    result = self._constructor(self._data, copy=copy)\n    result = result.set_axis(ax, axis=axis, inplace=False)\n    return result.__finalize__(self)",
                "def abs(self: FrameOrSeries) -> FrameOrSeries:\n    \"\"\"\n    Return a Series/DataFrame with absolute numeric value of each element.\n\n    This function only applies to elements that are all numeric.\n\n    Returns\n    -------\n    abs\n        Series/DataFrame containing the absolute value of each element.\n\n    See Also\n    --------\n    numpy.absolute : Calculate the absolute value element-wise.\n\n    Notes\n    -----\n    For ``complex`` inputs, ``1.2 + 1j``, the absolute value is\n    :math:`\\\\sqrt{ a^2 + b^2 }`.\n\n    Examples\n    --------\n    Absolute numeric values in a Series.\n\n    >>> s = pd.Series([-1.10, 2, -3.33, 4])\n    >>> s.abs()\n    0    1.10\n    1    2.00\n    2    3.33\n    3    4.00\n    dtype: float64\n\n    Absolute numeric values in a Series with complex numbers.\n\n    >>> s = pd.Series([1.2 + 1j])\n    >>> s.abs()\n    0    1.56205\n    dtype: float64\n\n    Absolute numeric values in a Series with a Timedelta element.\n\n    >>> s = pd.Series([pd.Timedelta('1 days')])\n    >>> s.abs()\n    0   1 days\n    dtype: timedelta64[ns]\n\n    Select rows with data closest to certain value using argsort (from\n    `StackOverflow <https://stackoverflow.com/a/17758115>`__).\n\n    >>> df = pd.DataFrame({\n    ...     'a': [4, 5, 6, 7],\n    ...     'b': [10, 20, 30, 40],\n    ...     'c': [100, 50, -30, -50]\n    ... })\n    >>> df\n         a    b    c\n    0    4   10  100\n    1    5   20   50\n    2    6   30  -30\n    3    7   40  -50\n    >>> df.loc[(df.c - 43).abs().argsort()]\n         a    b    c\n    1    5   20   50\n    0    4   10  100\n    2    6   30  -30\n    3    7   40  -50\n    \"\"\"\n    return np.abs(self)",
                "def describe(\n    self: FrameOrSeries, percentiles=None, include=None, exclude=None\n) -> FrameOrSeries:\n    \"\"\"\n    Generate descriptive statistics.\n\n    Descriptive statistics include those that summarize the central\n    tendency, dispersion and shape of a\n    dataset's distribution, excluding ``NaN`` values.\n\n    Analyzes both numeric and object series, as well\n    as ``DataFrame`` column sets of mixed data types. The output\n    will vary depending on what is provided. Refer to the notes\n    below for more detail.\n\n    Parameters\n    ----------\n    percentiles : list-like of numbers, optional\n        The percentiles to include in the output. All should\n        fall between 0 and 1. The default is\n        ``[.25, .5, .75]``, which returns the 25th, 50th, and\n        75th percentiles.\n    include : 'all', list-like of dtypes or None (default), optional\n        A white list of data types to include in the result. Ignored\n        for ``Series``. Here are the options:\n\n        - 'all' : All columns of the input will be included in the output.\n        - A list-like of dtypes : Limits the results to the\n          provided data types.\n          To limit the result to numeric types submit\n          ``numpy.number``. To limit it instead to object columns submit\n          the ``numpy.object`` data type. Strings\n          can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          select pandas categorical columns, use ``'category'``\n        - None (default) : The result will include all numeric columns.\n    exclude : list-like of dtypes or None (default), optional,\n        A black list of data types to omit from the result. Ignored\n        for ``Series``. Here are the options:\n\n        - A list-like of dtypes : Excludes the provided data types\n          from the result. To exclude numeric types submit\n          ``numpy.number``. To exclude object columns submit the data\n          type ``numpy.object``. Strings can also be used in the style of\n          ``select_dtypes`` (e.g. ``df.describe(include=['O'])``). To\n          exclude pandas categorical columns, use ``'category'``\n        - None (default) : The result will exclude nothing.\n\n    Returns\n    -------\n    Series or DataFrame\n        Summary statistics of the Series or Dataframe provided.\n\n    See Also\n    --------\n    DataFrame.count: Count number of non-NA/null observations.\n    DataFrame.max: Maximum of the values in the object.\n    DataFrame.min: Minimum of the values in the object.\n    DataFrame.mean: Mean of the values.\n    DataFrame.std: Standard deviation of the observations.\n    DataFrame.select_dtypes: Subset of a DataFrame including/excluding\n        columns based on their dtype.\n\n    Notes\n    -----\n    For numeric data, the result's index will include ``count``,\n    ``mean``, ``std``, ``min``, ``max`` as well as lower, ``50`` and\n    upper percentiles. By default the lower percentile is ``25`` and the\n    upper percentile is ``75``. The ``50`` percentile is the\n    same as the median.\n\n    For object data (e.g. strings or timestamps), the result's index\n    will include ``count``, ``unique``, ``top``, and ``freq``. The ``top``\n    is the most common value. The ``freq`` is the most common value's\n    frequency. Timestamps also include the ``first`` and ``last`` items.\n\n    If multiple object values have the highest count, then the\n    ``count`` and ``top`` results will be arbitrarily chosen from\n    among those with the highest count.\n\n    For mixed data types provided via a ``DataFrame``, the default is to\n    return only an analysis of numeric columns. If the dataframe consists\n    only of object and categorical data without any numeric columns, the\n    default is to return an analysis of both the object and categorical\n    columns. If ``include='all'`` is provided as an option, the result\n    will include a union of attributes of each type.\n\n    The `include` and `exclude` parameters can be used to limit\n    which columns in a ``DataFrame`` are analyzed for the output.\n    The parameters are ignored when analyzing a ``Series``.\n\n    Examples\n    --------\n    Describing a numeric ``Series``.\n\n    >>> s = pd.Series([1, 2, 3])\n    >>> s.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    dtype: float64\n\n    Describing a categorical ``Series``.\n\n    >>> s = pd.Series(['a', 'a', 'b', 'c'])\n    >>> s.describe()\n    count     4\n    unique    3\n    top       a\n    freq      2\n    dtype: object\n\n    Describing a timestamp ``Series``.\n\n    >>> s = pd.Series([\n    ...   np.datetime64(\"2000-01-01\"),\n    ...   np.datetime64(\"2010-01-01\"),\n    ...   np.datetime64(\"2010-01-01\")\n    ... ])\n    >>> s.describe()\n    count                       3\n    unique                      2\n    top       2010-01-01 00:00:00\n    freq                        2\n    first     2000-01-01 00:00:00\n    last      2010-01-01 00:00:00\n    dtype: object\n\n    Describing a ``DataFrame``. By default only numeric fields\n    are returned.\n\n    >>> df = pd.DataFrame({'categorical': pd.Categorical(['d','e','f']),\n    ...                    'numeric': [1, 2, 3],\n    ...                    'object': ['a', 'b', 'c']\n    ...                   })\n    >>> df.describe()\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Describing all columns of a ``DataFrame`` regardless of data type.\n\n    >>> df.describe(include='all')\n            categorical  numeric object\n    count            3      3.0      3\n    unique           3      NaN      3\n    top              f      NaN      c\n    freq             1      NaN      1\n    mean           NaN      2.0    NaN\n    std            NaN      1.0    NaN\n    min            NaN      1.0    NaN\n    25%            NaN      1.5    NaN\n    50%            NaN      2.0    NaN\n    75%            NaN      2.5    NaN\n    max            NaN      3.0    NaN\n\n    Describing a column from a ``DataFrame`` by accessing it as\n    an attribute.\n\n    >>> df.numeric.describe()\n    count    3.0\n    mean     2.0\n    std      1.0\n    min      1.0\n    25%      1.5\n    50%      2.0\n    75%      2.5\n    max      3.0\n    Name: numeric, dtype: float64\n\n    Including only numeric columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.number])\n           numeric\n    count      3.0\n    mean       2.0\n    std        1.0\n    min        1.0\n    25%        1.5\n    50%        2.0\n    75%        2.5\n    max        3.0\n\n    Including only string columns in a ``DataFrame`` description.\n\n    >>> df.describe(include=[np.object])\n           object\n    count       3\n    unique      3\n    top         c\n    freq        1\n\n    Including only categorical columns from a ``DataFrame`` description.\n\n    >>> df.describe(include=['category'])\n           categorical\n    count            3\n    unique           3\n    top              f\n    freq             1\n\n    Excluding numeric columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.number])\n           categorical object\n    count            3      3\n    unique           3      3\n    top              f      c\n    freq             1      1\n\n    Excluding object columns from a ``DataFrame`` description.\n\n    >>> df.describe(exclude=[np.object])\n           categorical  numeric\n    count            3      3.0\n    unique           3      NaN\n    top              f      NaN\n    freq             1      NaN\n    mean           NaN      2.0\n    std            NaN      1.0\n    min            NaN      1.0\n    25%            NaN      1.5\n    50%            NaN      2.0\n    75%            NaN      2.5\n    max            NaN      3.0\n    \"\"\"\n    if self.ndim == 2 and self.columns.size == 0:\n        raise ValueError(\"Cannot describe a DataFrame without columns\")\n\n    if percentiles is not None:\n        # explicit conversion of `percentiles` to list\n        percentiles = list(percentiles)\n\n        # get them all to be in [0, 1]\n        validate_percentile(percentiles)\n\n        # median should always be included\n        if 0.5 not in percentiles:\n            percentiles.append(0.5)\n        percentiles = np.asarray(percentiles)\n    else:\n        percentiles = np.array([0.25, 0.5, 0.75])\n\n    # sort and check for duplicates\n    unique_pcts = np.unique(percentiles)\n    if len(unique_pcts) < len(percentiles):\n        raise ValueError(\"percentiles cannot contain duplicates\")\n    percentiles = unique_pcts\n\n    formatted_percentiles = format_percentiles(percentiles)\n\n    def describe_numeric_1d(series):\n        stat_index = (\n            [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n        )\n        d = (\n            [series.count(), series.mean(), series.std(), series.min()]\n            + series.quantile(percentiles).tolist()\n            + [series.max()]\n        )\n        return pd.Series(d, index=stat_index, name=series.name)\n\n    def describe_categorical_1d(data):\n        names = [\"count\", \"unique\"]\n        objcounts = data.value_counts()\n        count_unique = len(objcounts[objcounts != 0])\n        result = [data.count(), count_unique]\n        dtype = None\n        if result[1] > 0:\n            top, freq = objcounts.index[0], objcounts.iloc[0]\n\n            if is_datetime64_any_dtype(data):\n                tz = data.dt.tz\n                asint = data.dropna().values.view(\"i8\")\n                top = Timestamp(top)\n                if top.tzinfo is not None and tz is not None:\n                    # Don't tz_localize(None) if key is already tz-aware\n                    top = top.tz_convert(tz)\n                else:\n                    top = top.tz_localize(tz)\n                names += [\"top\", \"freq\", \"first\", \"last\"]\n                result += [\n                    top,\n                    freq,\n                    Timestamp(asint.min(), tz=tz),\n                    Timestamp(asint.max(), tz=tz),\n                ]\n            else:\n                names += [\"top\", \"freq\"]\n                result += [top, freq]\n\n        # If the DataFrame is empty, set 'top' and 'freq' to None\n        # to maintain output shape consistency\n        else:\n            names += [\"top\", \"freq\"]\n            result += [np.nan, np.nan]\n            dtype = \"object\"\n\n        return pd.Series(result, index=names, name=data.name, dtype=dtype)\n\n    def describe_1d(data):\n        if is_bool_dtype(data):\n            return describe_categorical_1d(data)\n        elif is_numeric_dtype(data):\n            return describe_numeric_1d(data)\n        elif is_timedelta64_dtype(data):\n            return describe_numeric_1d(data)\n        else:\n            return describe_categorical_1d(data)\n\n    if self.ndim == 1:\n        return describe_1d(self)\n    elif (include is None) and (exclude is None):\n        # when some numerics are found, keep only numerics\n        data = self.select_dtypes(include=[np.number])\n        if len(data.columns) == 0:\n            data = self\n    elif include == \"all\":\n        if exclude is not None:\n            msg = \"exclude must be None when include is 'all'\"\n            raise ValueError(msg)\n        data = self\n    else:\n        data = self.select_dtypes(include=include, exclude=exclude)\n\n    ldesc = [describe_1d(s) for _, s in data.items()]\n    # set a convenient order for rows\n    names: List[Optional[Hashable]] = []\n    ldesc_indexes = sorted((x.index for x in ldesc), key=len)\n    for idxnames in ldesc_indexes:\n        for name in idxnames:\n            if name not in names:\n                names.append(name)\n\n    d = pd.concat([x.reindex(names, copy=False) for x in ldesc], axis=1, sort=False)\n    d.columns = data.columns.copy()\n    return d",
                "@Appender(_shared_docs[\"pct_change\"] % _shared_doc_kwargs)\ndef pct_change(\n    self: FrameOrSeries,\n    periods=1,\n    fill_method=\"pad\",\n    limit=None,\n    freq=None,\n    **kwargs,\n) -> FrameOrSeries:\n    # TODO: Not sure if above is correct - need someone to confirm.\n    axis = self._get_axis_number(kwargs.pop(\"axis\", self._stat_axis_name))\n    if fill_method is None:\n        data = self\n    else:\n        data = self._ensure_type(\n            self.fillna(method=fill_method, axis=axis, limit=limit)\n        )\n\n    rs = data.div(data.shift(periods=periods, freq=freq, axis=axis, **kwargs)) - 1\n    if freq is not None:\n        # Shift method is implemented differently when freq is not None\n        # We want to restore the original index\n        rs = rs.loc[~rs.index.duplicated()]\n        rs = rs.reindex_like(data)\n    return rs",
                "def _agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs):\n    if axis is None:\n        raise ValueError(\"Must specify 'axis' when aggregating by level.\")\n    grouped = self.groupby(level=level, axis=axis, sort=False)\n    if hasattr(grouped, name) and skipna:\n        return getattr(grouped, name)(**kwargs)\n    axis = self._get_axis_number(axis)\n    method = getattr(type(self), name)\n    applyf = lambda x: method(x, axis=axis, skipna=skipna, **kwargs)\n    return grouped.aggregate(applyf)",
                "@classmethod\ndef _add_numeric_operations(cls):\n    \"\"\"\n    Add the operations to the cls; evaluate the doc strings again\n    \"\"\"\n\n    axis_descr, name, name2 = _doc_parms(cls)\n\n    cls.any = _make_logical_function(\n        cls,\n        \"any\",\n        name,\n        name2,\n        axis_descr,\n        _any_desc,\n        nanops.nanany,\n        _any_see_also,\n        _any_examples,\n        empty_value=False,\n    )\n    cls.all = _make_logical_function(\n        cls,\n        \"all\",\n        name,\n        name2,\n        axis_descr,\n        _all_desc,\n        nanops.nanall,\n        _all_see_also,\n        _all_examples,\n        empty_value=True,\n    )\n\n    @Substitution(\n        desc=\"Return the mean absolute deviation of the values \"\n        \"for the requested axis.\",\n        name1=name,\n        name2=name2,\n        axis_descr=axis_descr,\n        min_count=\"\",\n        see_also=\"\",\n        examples=\"\",\n    )\n    @Appender(_num_doc)\n    def mad(self, axis=None, skipna=None, level=None):\n        if skipna is None:\n            skipna = True\n        if axis is None:\n            axis = self._stat_axis_number\n        if level is not None:\n            return self._agg_by_level(\"mad\", axis=axis, level=level, skipna=skipna)\n\n        data = self._get_numeric_data()\n        if axis == 0:\n            demeaned = data - data.mean(axis=0)\n        else:\n            demeaned = data.sub(data.mean(axis=1), axis=0)\n        return np.abs(demeaned).mean(axis=axis, skipna=skipna)\n\n    cls.mad = mad\n\n    cls.sem = _make_stat_function_ddof(\n        cls,\n        \"sem\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased standard error of the mean over requested \"\n        \"axis.\\n\\nNormalized by N-1 by default. This can be changed \"\n        \"using the ddof argument\",\n        nanops.nansem,\n    )\n    cls.var = _make_stat_function_ddof(\n        cls,\n        \"var\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased variance over requested axis.\\n\\nNormalized by \"\n        \"N-1 by default. This can be changed using the ddof argument\",\n        nanops.nanvar,\n    )\n    cls.std = _make_stat_function_ddof(\n        cls,\n        \"std\",\n        name,\n        name2,\n        axis_descr,\n        \"Return sample standard deviation over requested axis.\"\n        \"\\n\\nNormalized by N-1 by default. This can be changed using the \"\n        \"ddof argument\",\n        nanops.nanstd,\n    )\n\n    cls.cummin = _make_cum_function(\n        cls,\n        \"cummin\",\n        name,\n        name2,\n        axis_descr,\n        \"minimum\",\n        np.minimum.accumulate,\n        \"min\",\n        np.inf,\n        np.nan,\n        _cummin_examples,\n    )\n    cls.cumsum = _make_cum_function(\n        cls,\n        \"cumsum\",\n        name,\n        name2,\n        axis_descr,\n        \"sum\",\n        np.cumsum,\n        \"sum\",\n        0.0,\n        np.nan,\n        _cumsum_examples,\n    )\n    cls.cumprod = _make_cum_function(\n        cls,\n        \"cumprod\",\n        name,\n        name2,\n        axis_descr,\n        \"product\",\n        np.cumprod,\n        \"prod\",\n        1.0,\n        np.nan,\n        _cumprod_examples,\n    )\n    cls.cummax = _make_cum_function(\n        cls,\n        \"cummax\",\n        name,\n        name2,\n        axis_descr,\n        \"maximum\",\n        np.maximum.accumulate,\n        \"max\",\n        -np.inf,\n        np.nan,\n        _cummax_examples,\n    )\n\n    cls.sum = _make_min_count_stat_function(\n        cls,\n        \"sum\",\n        name,\n        name2,\n        axis_descr,\n        \"\"\"Return the sum of the values for the requested axis.\\n\n        This is equivalent to the method ``numpy.sum``.\"\"\",\n        nanops.nansum,\n        _stat_func_see_also,\n        _sum_examples,\n    )\n    cls.mean = _make_stat_function(\n        cls,\n        \"mean\",\n        name,\n        name2,\n        axis_descr,\n        \"Return the mean of the values for the requested axis.\",\n        nanops.nanmean,\n    )\n    cls.skew = _make_stat_function(\n        cls,\n        \"skew\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased skew over requested axis.\\n\\nNormalized by N-1.\",\n        nanops.nanskew,\n    )\n    cls.kurt = _make_stat_function(\n        cls,\n        \"kurt\",\n        name,\n        name2,\n        axis_descr,\n        \"Return unbiased kurtosis over requested axis.\\n\\n\"\n        \"Kurtosis obtained using Fisher's definition of\\n\"\n        \"kurtosis (kurtosis of normal == 0.0). Normalized \"\n        \"by N-1.\",\n        nanops.nankurt,\n    )\n    cls.kurtosis = cls.kurt\n    cls.prod = _make_min_count_stat_function(\n        cls,\n        \"prod\",\n        name,\n        name2,\n        axis_descr,\n        \"Return the product of the values for the requested axis.\",\n        nanops.nanprod,\n        examples=_prod_examples,\n    )\n    cls.product = cls.prod\n    cls.median = _make_stat_function(\n        cls,\n        \"median\",\n        name,\n        name2,\n        axis_descr,\n        \"Return the median of the values for the requested axis.\",\n        nanops.nanmedian,\n    )\n    cls.max = _make_stat_function(\n        cls,\n        \"max\",\n        name,\n        name2,\n        axis_descr,\n        \"\"\"Return the maximum of the values for the requested axis.\\n\n        If you want the *index* of the maximum, use ``idxmax``. This is\n        the equivalent of the ``numpy.ndarray`` method ``argmax``.\"\"\",\n        nanops.nanmax,\n        _stat_func_see_also,\n        _max_examples,\n    )\n    cls.min = _make_stat_function(\n        cls,\n        \"min\",\n        name,\n        name2,\n        axis_descr,\n        \"\"\"Return the minimum of the values for the requested axis.\\n\n        If you want the *index* of the minimum, use ``idxmin``. This is\n        the equivalent of the ``numpy.ndarray`` method ``argmin``.\"\"\",\n        nanops.nanmin,\n        _stat_func_see_also,\n        _min_examples,\n    )",
                "@classmethod\ndef _add_series_or_dataframe_operations(cls):\n    \"\"\"\n    Add the series or dataframe only operations to the cls; evaluate\n    the doc strings again.\n    \"\"\"\n\n    from pandas.core.window import EWM, Expanding, Rolling, Window\n\n    @Appender(Rolling.__doc__)\n    def rolling(\n        self,\n        window,\n        min_periods=None,\n        center=False,\n        win_type=None,\n        on=None,\n        axis=0,\n        closed=None,\n    ):\n        axis = self._get_axis_number(axis)\n\n        if win_type is not None:\n            return Window(\n                self,\n                window=window,\n                min_periods=min_periods,\n                center=center,\n                win_type=win_type,\n                on=on,\n                axis=axis,\n                closed=closed,\n            )\n\n        return Rolling(\n            self,\n            window=window,\n            min_periods=min_periods,\n            center=center,\n            win_type=win_type,\n            on=on,\n            axis=axis,\n            closed=closed,\n        )\n\n    cls.rolling = rolling\n\n    @Appender(Expanding.__doc__)\n    def expanding(self, min_periods=1, center=False, axis=0):\n        axis = self._get_axis_number(axis)\n        return Expanding(self, min_periods=min_periods, center=center, axis=axis)\n\n    cls.expanding = expanding\n\n    @Appender(EWM.__doc__)\n    def ewm(\n        self,\n        com=None,\n        span=None,\n        halflife=None,\n        alpha=None,\n        min_periods=0,\n        adjust=True,\n        ignore_na=False,\n        axis=0,\n    ):\n        axis = self._get_axis_number(axis)\n        return EWM(\n            self,\n            com=com,\n            span=span,\n            halflife=halflife,\n            alpha=alpha,\n            min_periods=min_periods,\n            adjust=adjust,\n            ignore_na=ignore_na,\n            axis=axis,\n        )\n\n    cls.ewm = ewm",
                "@Appender(_shared_docs[\"transform\"] % dict(axis=\"\", **_shared_doc_kwargs))\ndef transform(self, func, *args, **kwargs):\n    result = self.agg(func, *args, **kwargs)\n    if is_scalar(result) or len(result) != len(self):\n        raise ValueError(\"transforms cannot produce aggregated results\")\n\n    return result",
                "def _find_valid_index(self, how: str):\n    \"\"\"\n    Retrieves the index of the first valid value.\n\n    Parameters\n    ----------\n    how : {'first', 'last'}\n        Use this parameter to change between the first or last valid index.\n\n    Returns\n    -------\n    idx_first_valid : type of index\n    \"\"\"\n\n    idxpos = find_valid_index(self._values, how)\n    if idxpos is None:\n        return None\n    return self.index[idxpos]",
                "@Appender(\n    _shared_docs[\"valid_index\"] % {\"position\": \"first\", \"klass\": \"Series/DataFrame\"}\n)\ndef first_valid_index(self):\n    return self._find_valid_index(\"first\")",
                "@Appender(\n    _shared_docs[\"valid_index\"] % {\"position\": \"last\", \"klass\": \"Series/DataFrame\"}\n)\ndef last_valid_index(self):\n    return self._find_valid_index(\"last\")",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    min_count=_min_count_stub,\n    see_also=see_also,\n    examples=examples,\n)\n@Appender(_num_doc)\ndef stat_func(\n    self,\n    axis=None,\n    skipna=None,\n    level=None,\n    numeric_only=None,\n    min_count=0,\n    **kwargs,\n):\n    if name == \"sum\":\n        nv.validate_sum(tuple(), kwargs)\n    elif name == \"prod\":\n        nv.validate_prod(tuple(), kwargs)\n    else:\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(\n            name, axis=axis, level=level, skipna=skipna, min_count=min_count\n        )\n    return self._reduce(\n        f,\n        name,\n        axis=axis,\n        skipna=skipna,\n        numeric_only=numeric_only,\n        min_count=min_count,\n    )",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    min_count=\"\",\n    see_also=see_also,\n    examples=examples,\n)\n@Appender(_num_doc)\ndef stat_func(\n    self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs\n):\n    if name == \"median\":\n        nv.validate_median(tuple(), kwargs)\n    else:\n        nv.validate_stat_func(tuple(), kwargs, fname=name)\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n    return self._reduce(\n        f, name, axis=axis, skipna=skipna, numeric_only=numeric_only\n    )",
                "@Substitution(desc=desc, name1=name1, name2=name2, axis_descr=axis_descr)\n@Appender(_num_ddof_doc)\ndef stat_func(\n    self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs\n):\n    nv.validate_stat_ddof_func(tuple(), kwargs, fname=name)\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(\n            name, axis=axis, level=level, skipna=skipna, ddof=ddof\n        )\n    return self._reduce(\n        f, name, axis=axis, numeric_only=numeric_only, skipna=skipna, ddof=ddof\n    )",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    accum_func_name=accum_func_name,\n    examples=examples,\n)\n@Appender(_cnum_doc)\ndef cum_func(self, axis=None, skipna=True, *args, **kwargs):\n    skipna = nv.validate_cum_func_with_skipna(skipna, args, kwargs, name)\n    if axis is None:\n        axis = self._stat_axis_number\n    else:\n        axis = self._get_axis_number(axis)\n\n    if axis == 1:\n        return cum_func(self.T, axis=0, skipna=skipna, *args, **kwargs).T\n\n    def na_accum_func(blk_values):\n        # We will be applying this function to block values\n        if blk_values.dtype.kind in [\"m\", \"M\"]:\n            # GH#30460, GH#29058\n            # numpy 1.18 started sorting NaTs at the end instead of beginning,\n            #  so we need to work around to maintain backwards-consistency.\n            orig_dtype = blk_values.dtype\n\n            # We need to define mask before masking NaTs\n            mask = isna(blk_values)\n\n            if accum_func == np.minimum.accumulate:\n                # Note: the accum_func comparison fails as an \"is\" comparison\n                y = blk_values.view(\"i8\")\n                y[mask] = np.iinfo(np.int64).max\n                changed = True\n            else:\n                y = blk_values\n                changed = False\n\n            result = accum_func(y.view(\"i8\"), axis)\n            if skipna:\n                np.putmask(result, mask, iNaT)\n            elif accum_func == np.minimum.accumulate:\n                # Restore NaTs that we masked previously\n                nz = (~np.asarray(mask)).nonzero()[0]\n                if len(nz):\n                    # everything up to the first non-na entry stays NaT\n                    result[: nz[0]] = iNaT\n\n            if changed:\n                # restore NaT elements\n                y[mask] = iNaT  # TODO: could try/finally for this?\n\n            if isinstance(blk_values, np.ndarray):\n                result = result.view(orig_dtype)\n            else:\n                # DatetimeArray\n                result = type(blk_values)._from_sequence(result, dtype=orig_dtype)\n\n        elif skipna and not issubclass(\n            blk_values.dtype.type, (np.integer, np.bool_)\n        ):\n            vals = blk_values.copy().T\n            mask = isna(vals)\n            np.putmask(vals, mask, mask_a)\n            result = accum_func(vals, axis)\n            np.putmask(result, mask, mask_b)\n        else:\n            result = accum_func(blk_values.T, axis)\n\n        # transpose back for ndarray, not for EA\n        return result.T if hasattr(result, \"T\") else result\n\n    result = self._data.apply(na_accum_func)\n\n    d = self._construct_axes_dict()\n    d[\"copy\"] = False\n    return self._constructor(result, **d).__finalize__(self)",
                "@Substitution(\n    desc=desc,\n    name1=name1,\n    name2=name2,\n    axis_descr=axis_descr,\n    see_also=see_also,\n    examples=examples,\n    empty_value=empty_value,\n)\n@Appender(_bool_doc)\ndef logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs):\n    nv.validate_logical_func(tuple(), kwargs, fname=name)\n    if level is not None:\n        if bool_only is not None:\n            raise NotImplementedError(\n                \"Option bool_only is not implemented with option level.\"\n            )\n        return self._agg_by_level(name, axis=axis, level=level, skipna=skipna)\n    return self._reduce(\n        f,\n        name,\n        axis=axis,\n        skipna=skipna,\n        numeric_only=bool_only,\n        filter_type=\"bool\",\n    )",
                "def set_axis(a, i):\n    setattr(cls, a, properties.AxisProperty(i, docs.get(a, a)))\n    cls._internal_names_set.add(a)",
                "def f():\n    self._data = self._data.consolidate()",
                "def ranker(data):\n    ranks = algos.rank(\n        data.values,\n        axis=axis,\n        method=method,\n        ascending=ascending,\n        na_option=na_option,\n        pct=pct,\n    )\n    ranks = self._constructor(ranks, **data._construct_axes_dict())\n    return ranks.__finalize__(self)",
                "def _tz_convert(ax, tz):\n    if not hasattr(ax, \"tz_convert\"):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(\n                f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n            )\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_convert(tz)\n    return ax",
                "def _tz_localize(ax, tz, ambiguous, nonexistent):\n    if not hasattr(ax, \"tz_localize\"):\n        if len(ax) > 0:\n            ax_name = self._get_axis_name(axis)\n            raise TypeError(\n                f\"{ax_name} is not a valid DatetimeIndex or PeriodIndex\"\n            )\n        else:\n            ax = DatetimeIndex([], tz=tz)\n    else:\n        ax = ax.tz_localize(tz, ambiguous=ambiguous, nonexistent=nonexistent)\n    return ax",
                "def describe_numeric_1d(series):\n    stat_index = (\n        [\"count\", \"mean\", \"std\", \"min\"] + formatted_percentiles + [\"max\"]\n    )\n    d = (\n        [series.count(), series.mean(), series.std(), series.min()]\n        + series.quantile(percentiles).tolist()\n        + [series.max()]\n    )\n    return pd.Series(d, index=stat_index, name=series.name)",
                "def describe_categorical_1d(data):\n    names = [\"count\", \"unique\"]\n    objcounts = data.value_counts()\n    count_unique = len(objcounts[objcounts != 0])\n    result = [data.count(), count_unique]\n    dtype = None\n    if result[1] > 0:\n        top, freq = objcounts.index[0], objcounts.iloc[0]\n\n        if is_datetime64_any_dtype(data):\n            tz = data.dt.tz\n            asint = data.dropna().values.view(\"i8\")\n            top = Timestamp(top)\n            if top.tzinfo is not None and tz is not None:\n                # Don't tz_localize(None) if key is already tz-aware\n                top = top.tz_convert(tz)\n            else:\n                top = top.tz_localize(tz)\n            names += [\"top\", \"freq\", \"first\", \"last\"]\n            result += [\n                top,\n                freq,\n                Timestamp(asint.min(), tz=tz),\n                Timestamp(asint.max(), tz=tz),\n            ]\n        else:\n            names += [\"top\", \"freq\"]\n            result += [top, freq]\n\n    # If the DataFrame is empty, set 'top' and 'freq' to None\n    # to maintain output shape consistency\n    else:\n        names += [\"top\", \"freq\"]\n        result += [np.nan, np.nan]\n        dtype = \"object\"\n\n    return pd.Series(result, index=names, name=data.name, dtype=dtype)",
                "def describe_1d(data):\n    if is_bool_dtype(data):\n        return describe_categorical_1d(data)\n    elif is_numeric_dtype(data):\n        return describe_numeric_1d(data)\n    elif is_timedelta64_dtype(data):\n        return describe_numeric_1d(data)\n    else:\n        return describe_categorical_1d(data)",
                "@Substitution(\n    desc=\"Return the mean absolute deviation of the values \"\n    \"for the requested axis.\",\n    name1=name,\n    name2=name2,\n    axis_descr=axis_descr,\n    min_count=\"\",\n    see_also=\"\",\n    examples=\"\",\n)\n@Appender(_num_doc)\ndef mad(self, axis=None, skipna=None, level=None):\n    if skipna is None:\n        skipna = True\n    if axis is None:\n        axis = self._stat_axis_number\n    if level is not None:\n        return self._agg_by_level(\"mad\", axis=axis, level=level, skipna=skipna)\n\n    data = self._get_numeric_data()\n    if axis == 0:\n        demeaned = data - data.mean(axis=0)\n    else:\n        demeaned = data.sub(data.mean(axis=1), axis=0)\n    return np.abs(demeaned).mean(axis=axis, skipna=skipna)",
                "@Appender(Rolling.__doc__)\ndef rolling(\n    self,\n    window,\n    min_periods=None,\n    center=False,\n    win_type=None,\n    on=None,\n    axis=0,\n    closed=None,\n):\n    axis = self._get_axis_number(axis)\n\n    if win_type is not None:\n        return Window(\n            self,\n            window=window,\n            min_periods=min_periods,\n            center=center,\n            win_type=win_type,\n            on=on,\n            axis=axis,\n            closed=closed,\n        )\n\n    return Rolling(\n        self,\n        window=window,\n        min_periods=min_periods,\n        center=center,\n        win_type=win_type,\n        on=on,\n        axis=axis,\n        closed=closed,\n    )",
                "@Appender(Expanding.__doc__)\ndef expanding(self, min_periods=1, center=False, axis=0):\n    axis = self._get_axis_number(axis)\n    return Expanding(self, min_periods=min_periods, center=center, axis=axis)",
                "@Appender(EWM.__doc__)\ndef ewm(\n    self,\n    com=None,\n    span=None,\n    halflife=None,\n    alpha=None,\n    min_periods=0,\n    adjust=True,\n    ignore_na=False,\n    axis=0,\n):\n    axis = self._get_axis_number(axis)\n    return EWM(\n        self,\n        com=com,\n        span=span,\n        halflife=halflife,\n        alpha=alpha,\n        min_periods=min_periods,\n        adjust=adjust,\n        ignore_na=ignore_na,\n        axis=axis,\n    )",
                "def na_accum_func(blk_values):\n    # We will be applying this function to block values\n    if blk_values.dtype.kind in [\"m\", \"M\"]:\n        # GH#30460, GH#29058\n        # numpy 1.18 started sorting NaTs at the end instead of beginning,\n        #  so we need to work around to maintain backwards-consistency.\n        orig_dtype = blk_values.dtype\n\n        # We need to define mask before masking NaTs\n        mask = isna(blk_values)\n\n        if accum_func == np.minimum.accumulate:\n            # Note: the accum_func comparison fails as an \"is\" comparison\n            y = blk_values.view(\"i8\")\n            y[mask] = np.iinfo(np.int64).max\n            changed = True\n        else:\n            y = blk_values\n            changed = False\n\n        result = accum_func(y.view(\"i8\"), axis)\n        if skipna:\n            np.putmask(result, mask, iNaT)\n        elif accum_func == np.minimum.accumulate:\n            # Restore NaTs that we masked previously\n            nz = (~np.asarray(mask)).nonzero()[0]\n            if len(nz):\n                # everything up to the first non-na entry stays NaT\n                result[: nz[0]] = iNaT\n\n        if changed:\n            # restore NaT elements\n            y[mask] = iNaT  # TODO: could try/finally for this?\n\n        if isinstance(blk_values, np.ndarray):\n            result = result.view(orig_dtype)\n        else:\n            # DatetimeArray\n            result = type(blk_values)._from_sequence(result, dtype=orig_dtype)\n\n    elif skipna and not issubclass(\n        blk_values.dtype.type, (np.integer, np.bool_)\n    ):\n        vals = blk_values.copy().T\n        mask = isna(vals)\n        np.putmask(vals, mask, mask_a)\n        result = accum_func(vals, axis)\n        np.putmask(result, mask, mask_b)\n    else:\n        result = accum_func(blk_values.T, axis)\n\n    # transpose back for ndarray, not for EA\n    return result.T if hasattr(result, \"T\") else result",
                "def f(x):\n    return like in ensure_str(x)",
                "def f(x):\n    return matcher.search(ensure_str(x)) is not None"
            ],
            "inscope_function_signatures": [
                "_single_replace(self, to_replace, method, inplace, limit)",
                "_doc_parms(cls)",
                "_make_min_count_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also: str='', examples: str='')",
                "_make_stat_function(cls, name, name1, name2, axis_descr, desc, f, see_also: str='', examples: str='')",
                "_make_stat_function_ddof(cls, name, name1, name2, axis_descr, desc, f)",
                "_make_cum_function(cls, name, name1, name2, axis_descr, desc, accum_func, accum_func_name, mask_a, mask_b, examples)",
                "_make_logical_function(cls, name, name1, name2, axis_descr, desc, f, see_also, examples, empty_value)",
                "__init__(self, data: BlockManager, axes: Optional[List[Index]]=None, copy: bool=False, dtype: Optional[Dtype]=None, attrs: Optional[Mapping[Optional[Hashable], Any]]=None, fastpath: bool=False)",
                "_init_mgr(self, mgr, axes=None, dtype=None, copy=False)",
                "attrs(self) -> Dict[Optional[Hashable], Any]",
                "attrs(self, value: Mapping[Optional[Hashable], Any]) -> None",
                "_validate_dtype(self, dtype)",
                "_constructor(self: FrameOrSeries) -> Type[FrameOrSeries]",
                "_constructor_sliced(self)",
                "_constructor_expanddim(self)",
                "_setup_axes(cls, axes: List[str], docs: Dict[str, str]) -> None",
                "_construct_axes_dict(self, axes=None, **kwargs)",
                "_construct_axes_dict_from(self, axes, **kwargs)",
                "_construct_axes_from_arguments(self, args, kwargs, require_all: bool=False, sentinel=None)",
                "_from_axes(cls: Type[FrameOrSeries], data, axes, **kwargs) -> FrameOrSeries",
                "_get_axis_number(cls, axis)",
                "_get_axis_name(cls, axis)",
                "_get_axis(self, axis)",
                "_get_block_manager_axis(cls, axis)",
                "_get_axis_resolvers(self, axis: str) -> Dict[str, ABCSeries]",
                "_get_index_resolvers(self) -> Dict[str, ABCSeries]",
                "_get_cleaned_column_resolvers(self) -> Dict[str, ABCSeries]",
                "_info_axis(self)",
                "_stat_axis(self)",
                "shape(self) -> Tuple[int, ...]",
                "axes(self) -> List[Index]",
                "ndim(self) -> int",
                "size(self)",
                "_selected_obj(self: FrameOrSeries) -> FrameOrSeries",
                "_obj_with_exclusions(self: FrameOrSeries) -> FrameOrSeries",
                "set_axis(self, labels, axis=0, inplace=False)",
                "_set_axis(self, axis, labels) -> None",
                "swapaxes(self: FrameOrSeries, axis1, axis2, copy=True) -> FrameOrSeries",
                "droplevel(self: FrameOrSeries, level, axis=0) -> FrameOrSeries",
                "pop(self: FrameOrSeries, item) -> FrameOrSeries",
                "squeeze(self, axis=None)",
                "swaplevel(self: FrameOrSeries, i=-2, j=-1, axis=0) -> FrameOrSeries",
                "rename(self, *args, **kwargs)",
                "rename_axis(self, mapper=lib.no_default, **kwargs)",
                "_set_axis_name(self, name, axis=0, inplace=False)",
                "_indexed_same(self, other) -> bool",
                "equals(self, other)",
                "__neg__(self)",
                "__pos__(self)",
                "__invert__(self)",
                "__nonzero__(self)",
                "bool(self)",
                "__abs__(self: FrameOrSeries) -> FrameOrSeries",
                "__round__(self: FrameOrSeries, decimals: int=0) -> FrameOrSeries",
                "_is_level_reference(self, key, axis=0)",
                "_is_label_reference(self, key, axis=0) -> bool_t",
                "_is_label_or_level_reference(self, key: str, axis: int=0) -> bool_t",
                "_check_label_or_level_ambiguity(self, key, axis: int=0) -> None",
                "_get_label_or_level_values(self, key: str, axis: int=0) -> np.ndarray",
                "_drop_labels_or_levels(self, keys, axis: int=0)",
                "__hash__(self)",
                "__iter__(self)",
                "keys(self)",
                "items(self)",
                "iteritems(self)",
                "__len__(self) -> int",
                "__contains__(self, key) -> bool_t",
                "empty(self) -> bool_t",
                "__array__(self, dtype=None)",
                "__array_wrap__(self, result, context=None)",
                "__getstate__(self) -> Dict[str, Any]",
                "__setstate__(self, state)",
                "__repr__(self) -> str",
                "_repr_latex_(self)",
                "_repr_data_resource_(self)",
                "to_excel(self, excel_writer, sheet_name='Sheet1', na_rep='', float_format=None, columns=None, header=True, index=True, index_label=None, startrow=0, startcol=0, engine=None, merge_cells=True, encoding=None, inf_rep='inf', verbose=True, freeze_panes=None) -> None",
                "to_json(self, path_or_buf: Optional[FilePathOrBuffer]=None, orient: Optional[str]=None, date_format: Optional[str]=None, double_precision: int=10, force_ascii: bool_t=True, date_unit: str='ms', default_handler: Optional[Callable[[Any], JSONSerializable]]=None, lines: bool_t=False, compression: Optional[str]='infer', index: bool_t=True, indent: Optional[int]=None) -> Optional[str]",
                "to_hdf(self, path_or_buf, key: str, mode: str='a', complevel: Optional[int]=None, complib: Optional[str]=None, append: bool_t=False, format: Optional[str]=None, index: bool_t=True, min_itemsize: Optional[Union[int, Dict[str, int]]]=None, nan_rep=None, dropna: Optional[bool_t]=None, data_columns: Optional[List[str]]=None, errors: str='strict', encoding: str='UTF-8') -> None",
                "to_sql(self, name: str, con, schema=None, if_exists: str='fail', index: bool_t=True, index_label=None, chunksize=None, dtype=None, method=None) -> None",
                "to_pickle(self, path, compression: Optional[str]='infer', protocol: int=pickle.HIGHEST_PROTOCOL) -> None",
                "to_clipboard(self, excel: bool_t=True, sep: Optional[str]=None, **kwargs) -> None",
                "to_xarray(self)",
                "to_latex(self, buf=None, columns=None, col_space=None, header=True, index=True, na_rep='NaN', formatters=None, float_format=None, sparsify=None, index_names=True, bold_rows=False, column_format=None, longtable=None, escape=None, encoding=None, decimal='.', multicolumn=None, multicolumn_format=None, multirow=None, caption=None, label=None)",
                "to_csv(self, path_or_buf: Optional[FilePathOrBuffer]=None, sep: str=',', na_rep: str='', float_format: Optional[str]=None, columns: Optional[Sequence[Optional[Hashable]]]=None, header: Union[bool_t, List[str]]=True, index: bool_t=True, index_label: Optional[Union[bool_t, str, Sequence[Optional[Hashable]]]]=None, mode: str='w', encoding: Optional[str]=None, compression: Optional[Union[str, Mapping[str, str]]]='infer', quoting: Optional[int]=None, quotechar: str='\"', line_terminator: Optional[str]=None, chunksize: Optional[int]=None, date_format: Optional[str]=None, doublequote: bool_t=True, escapechar: Optional[str]=None, decimal: Optional[str]='.') -> Optional[str]",
                "_create_indexer(cls, name: str, indexer) -> None",
                "_set_as_cached(self, item, cacher) -> None",
                "_reset_cacher(self) -> None",
                "_maybe_cache_changed(self, item, value) -> None",
                "_is_cached(self) -> bool_t",
                "_get_cacher(self)",
                "_maybe_update_cacher(self, clear: bool_t=False, verify_is_copy: bool_t=True) -> None",
                "_clear_item_cache(self) -> None",
                "take(self: FrameOrSeries, indices, axis=0, is_copy: Optional[bool_t]=None, **kwargs) -> FrameOrSeries",
                "xs(self, key, axis=0, level=None, drop_level: bool_t=True)",
                "__getitem__(self, item)",
                "_get_item_cache(self, item)",
                "_iget_item_cache(self, item)",
                "_box_item_values(self, key, values)",
                "_slice(self: FrameOrSeries, slobj: slice, axis=0, kind=None) -> FrameOrSeries",
                "_set_item(self, key, value) -> None",
                "_set_is_copy(self, ref=None, copy: bool_t=True) -> None",
                "_check_is_chained_assignment_possible(self) -> bool_t",
                "_check_setitem_copy(self, stacklevel=4, t='setting', force=False)",
                "__delitem__(self, key) -> None",
                "get(self, key, default=None)",
                "_is_view(self)",
                "reindex_like(self: FrameOrSeries, other, method: Optional[str]=None, copy: bool_t=True, limit=None, tolerance=None) -> FrameOrSeries",
                "drop(self, labels=None, axis=0, index=None, columns=None, level=None, inplace: bool_t=False, errors: str='raise')",
                "_drop_axis(self: FrameOrSeries, labels, axis, level=None, errors: str='raise') -> FrameOrSeries",
                "_update_inplace(self, result, verify_is_copy: bool_t=True) -> None",
                "add_prefix(self: FrameOrSeries, prefix: str) -> FrameOrSeries",
                "add_suffix(self: FrameOrSeries, suffix: str) -> FrameOrSeries",
                "sort_values(self, by=None, axis=0, ascending=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', ignore_index: bool_t=False)",
                "sort_index(self, axis=0, level=None, ascending: bool_t=True, inplace: bool_t=False, kind: str='quicksort', na_position: str='last', sort_remaining: bool_t=True, ignore_index: bool_t=False)",
                "reindex(self: FrameOrSeries, *args, **kwargs) -> FrameOrSeries",
                "_reindex_axes(self: FrameOrSeries, axes, level, limit, tolerance, method, fill_value, copy) -> FrameOrSeries",
                "_needs_reindex_multi(self, axes, method, level) -> bool_t",
                "_reindex_multi(self, axes, copy, fill_value)",
                "_reindex_with_indexers(self: FrameOrSeries, reindexers, fill_value=None, copy: bool_t=False, allow_dups: bool_t=False) -> FrameOrSeries",
                "filter(self: FrameOrSeries, items=None, like: Optional[str]=None, regex: Optional[str]=None, axis=None) -> FrameOrSeries",
                "head(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                "tail(self: FrameOrSeries, n: int=5) -> FrameOrSeries",
                "sample(self: FrameOrSeries, n=None, frac=None, replace=False, weights=None, random_state=None, axis=None) -> FrameOrSeries",
                "pipe(self, func, *args, **kwargs)",
                "__finalize__(self: FrameOrSeries, other, method=None, **kwargs) -> FrameOrSeries",
                "__getattr__(self, name: str)",
                "__setattr__(self, name: str, value) -> None",
                "_dir_additions(self)",
                "_protect_consolidate(self, f)",
                "_consolidate_inplace(self) -> None",
                "_consolidate(self, inplace: bool_t=False)",
                "_is_mixed_type(self)",
                "_is_numeric_mixed_type(self)",
                "_is_datelike_mixed_type(self)",
                "_check_inplace_setting(self, value) -> bool_t",
                "_get_numeric_data(self)",
                "_get_bool_data(self)",
                "values(self) -> np.ndarray",
                "_values(self) -> np.ndarray",
                "_get_values(self) -> np.ndarray",
                "_internal_get_values(self) -> np.ndarray",
                "dtypes(self)",
                "_to_dict_of_blocks(self, copy: bool_t=True)",
                "astype(self: FrameOrSeries, dtype, copy: bool_t=True, errors: str='raise') -> FrameOrSeries",
                "copy(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                "__copy__(self: FrameOrSeries, deep: bool_t=True) -> FrameOrSeries",
                "__deepcopy__(self: FrameOrSeries, memo=None) -> FrameOrSeries",
                "_convert(self: FrameOrSeries, datetime: bool_t=False, numeric: bool_t=False, timedelta: bool_t=False, coerce: bool_t=False, copy: bool_t=True) -> FrameOrSeries",
                "infer_objects(self: FrameOrSeries) -> FrameOrSeries",
                "fillna(self: FrameOrSeries, value=None, method=None, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                "ffill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                "bfill(self: FrameOrSeries, axis=None, inplace: bool_t=False, limit=None, downcast=None) -> Optional[FrameOrSeries]",
                "replace(self, to_replace=None, value=None, inplace=False, limit=None, regex=False, method='pad')",
                "interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
                "asof(self, where, subset=None)",
                "isna(self: FrameOrSeries) -> FrameOrSeries",
                "isnull(self: FrameOrSeries) -> FrameOrSeries",
                "notna(self: FrameOrSeries) -> FrameOrSeries",
                "notnull(self: FrameOrSeries) -> FrameOrSeries",
                "_clip_with_scalar(self, lower, upper, inplace: bool_t=False)",
                "_clip_with_one_bound(self, threshold, method, axis, inplace)",
                "clip(self: FrameOrSeries, lower=None, upper=None, axis=None, inplace: bool_t=False, *args, **kwargs) -> FrameOrSeries",
                "asfreq(self: FrameOrSeries, freq, method=None, how: Optional[str]=None, normalize: bool_t=False, fill_value=None) -> FrameOrSeries",
                "at_time(self: FrameOrSeries, time, asof: bool_t=False, axis=None) -> FrameOrSeries",
                "between_time(self: FrameOrSeries, start_time, end_time, include_start: bool_t=True, include_end: bool_t=True, axis=None) -> FrameOrSeries",
                "resample(self, rule, axis=0, closed: Optional[str]=None, label: Optional[str]=None, convention: str='start', kind: Optional[str]=None, loffset=None, base: int=0, on=None, level=None)",
                "first(self: FrameOrSeries, offset) -> FrameOrSeries",
                "last(self: FrameOrSeries, offset) -> FrameOrSeries",
                "rank(self: FrameOrSeries, axis=0, method: str='average', numeric_only: Optional[bool_t]=None, na_option: str='keep', ascending: bool_t=True, pct: bool_t=False) -> FrameOrSeries",
                "align(self, other, join='outer', axis=None, level=None, copy=True, fill_value=None, method=None, limit=None, fill_axis=0, broadcast_axis=None)",
                "_align_frame(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                "_align_series(self, other, join='outer', axis=None, level=None, copy: bool_t=True, fill_value=None, method=None, limit=None, fill_axis=0)",
                "_where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                "where(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                "mask(self, cond, other=np.nan, inplace=False, axis=None, level=None, errors='raise', try_cast=False)",
                "shift(self: FrameOrSeries, periods=1, freq=None, axis=0, fill_value=None) -> FrameOrSeries",
                "slice_shift(self: FrameOrSeries, periods: int=1, axis=0) -> FrameOrSeries",
                "tshift(self: FrameOrSeries, periods: int=1, freq=None, axis=0) -> FrameOrSeries",
                "truncate(self: FrameOrSeries, before=None, after=None, axis=None, copy: bool_t=True) -> FrameOrSeries",
                "tz_convert(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True) -> FrameOrSeries",
                "tz_localize(self: FrameOrSeries, tz, axis=0, level=None, copy: bool_t=True, ambiguous='raise', nonexistent: str='raise') -> FrameOrSeries",
                "abs(self: FrameOrSeries) -> FrameOrSeries",
                "describe(self: FrameOrSeries, percentiles=None, include=None, exclude=None) -> FrameOrSeries",
                "pct_change(self: FrameOrSeries, periods=1, fill_method='pad', limit=None, freq=None, **kwargs) -> FrameOrSeries",
                "_agg_by_level(self, name, axis=0, level=0, skipna=True, **kwargs)",
                "_add_numeric_operations(cls)",
                "_add_series_or_dataframe_operations(cls)",
                "transform(self, func, *args, **kwargs)",
                "_find_valid_index(self, how: str)",
                "first_valid_index(self)",
                "last_valid_index(self)",
                "stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, min_count=0, **kwargs)",
                "stat_func(self, axis=None, skipna=None, level=None, numeric_only=None, **kwargs)",
                "stat_func(self, axis=None, skipna=None, level=None, ddof=1, numeric_only=None, **kwargs)",
                "cum_func(self, axis=None, skipna=True, *args, **kwargs)",
                "logical_func(self, axis=0, bool_only=None, skipna=True, level=None, **kwargs)",
                "set_axis(a, i)",
                "f()",
                "ranker(data)",
                "_tz_convert(ax, tz)",
                "_tz_localize(ax, tz, ambiguous, nonexistent)",
                "describe_numeric_1d(series)",
                "describe_categorical_1d(data)",
                "describe_1d(data)",
                "mad(self, axis=None, skipna=None, level=None)",
                "rolling(self, window, min_periods=None, center=False, win_type=None, on=None, axis=0, closed=None)",
                "expanding(self, min_periods=1, center=False, axis=0)",
                "ewm(self, com=None, span=None, halflife=None, alpha=None, min_periods=0, adjust=True, ignore_na=False, axis=0)",
                "na_accum_func(blk_values)",
                "f(x)",
                "f(x)"
            ],
            "variables_in_file": {
                "_shared_docs": [
                    10885,
                    5126,
                    6407,
                    10253,
                    8727,
                    10264,
                    10911,
                    8864,
                    8609,
                    5027,
                    10915,
                    9898,
                    7340,
                    8236,
                    6576,
                    8753,
                    7092,
                    9781,
                    7096,
                    1979,
                    7100,
                    10299,
                    2113,
                    10305,
                    2003,
                    8790,
                    5080,
                    5084,
                    10849,
                    98,
                    6114,
                    6759,
                    7030,
                    7162,
                    8189,
                    7166
                ],
                "Dict": [
                    98,
                    291,
                    290,
                    453,
                    231,
                    423,
                    456,
                    298,
                    462,
                    2350,
                    176,
                    1904
                ],
                "str": [
                    4102,
                    4103,
                    1555,
                    10279,
                    3660,
                    2642,
                    3667,
                    1622,
                    98,
                    5220,
                    4205,
                    4206,
                    2160,
                    2161,
                    2164,
                    3188,
                    5239,
                    2167,
                    2170,
                    2701,
                    155,
                    5287,
                    170,
                    171,
                    172,
                    173,
                    3760,
                    177,
                    10971,
                    7406,
                    8959,
                    11019,
                    289,
                    290,
                    291,
                    294,
                    2343,
                    2344,
                    3878,
                    298,
                    2346,
                    2348,
                    6955,
                    2350,
                    2353,
                    2354,
                    2355,
                    3907,
                    4957,
                    1904,
                    8068,
                    8070,
                    3978,
                    400,
                    5527,
                    1948,
                    423,
                    2483,
                    2486,
                    453,
                    4037,
                    456,
                    3018,
                    3019,
                    3020,
                    462,
                    3022,
                    3024,
                    3025,
                    3026,
                    3027,
                    3029,
                    3030,
                    3032,
                    3034,
                    3035,
                    3036,
                    7656,
                    7657,
                    7658,
                    7659,
                    4587,
                    4588,
                    9198
                ],
                "dict": [
                    2113,
                    98,
                    99,
                    426,
                    6028,
                    10253,
                    208,
                    241,
                    1906,
                    8754,
                    8728,
                    313,
                    6045,
                    1918
                ],
                "_shared_doc_kwargs": [
                    8864,
                    99,
                    6759,
                    6407,
                    9898,
                    8236,
                    10253,
                    8755,
                    7092,
                    7096,
                    5080,
                    8729,
                    7162,
                    7166
                ],
                "self.ndim": [
                    3520,
                    8516,
                    9669,
                    8575,
                    6027,
                    9753,
                    6065,
                    3954,
                    115,
                    5651,
                    2838,
                    3703,
                    5627,
                    8538,
                    3483,
                    8252,
                    2975
                ],
                "self": [
                    10240,
                    10255,
                    10256,
                    10293,
                    10296,
                    8252,
                    8253,
                    10302,
                    8256,
                    8258,
                    10308,
                    8276,
                    2133,
                    8278,
                    8291,
                    4197,
                    8293,
                    8305,
                    115,
                    118,
                    121,
                    122,
                    131,
                    134,
                    8336,
                    8339,
                    8340,
                    4246,
                    4247,
                    4248,
                    8345,
                    8346,
                    8355,
                    4260,
                    8367,
                    8370,
                    8381,
                    202,
                    203,
                    204,
                    8396,
                    209,
                    8404,
                    8407,
                    216,
                    8411,
                    8416,
                    8418,
                    8420,
                    8421,
                    235,
                    236,
                    237,
                    8429,
                    8431,
                    8432,
                    241,
                    8441,
                    8444,
                    253,
                    266,
                    273,
                    8465,
                    6421,
                    2327,
                    6430,
                    6431,
                    6434,
                    8484,
                    8486,
                    8490,
                    8492,
                    10238,
                    8516,
                    8518,
                    6471,
                    8524,
                    333,
                    6477,
                    6478,
                    6480,
                    6483,
                    340,
                    6485,
                    8536,
                    8538,
                    6498,
                    359,
                    8553,
                    369,
                    4469,
                    6521,
                    8570,
                    8575,
                    6529,
                    8578,
                    8580,
                    4488,
                    8586,
                    8587,
                    4493,
                    6543,
                    8593,
                    4498,
                    4499,
                    8595,
                    4502,
                    4503,
                    6550,
                    6553,
                    4506,
                    411,
                    4508,
                    412,
                    8598,
                    8607,
                    4514,
                    4515,
                    2466,
                    6563,
                    4520,
                    425,
                    6572,
                    4525,
                    6574,
                    4538,
                    4541,
                    4545,
                    457,
                    458,
                    4557,
                    4560,
                    472,
                    473,
                    476,
                    481,
                    4579,
                    485,
                    4582,
                    492,
                    501,
                    524,
                    548,
                    553,
                    8747,
                    8748,
                    558,
                    4657,
                    4658,
                    4661,
                    4662,
                    4669,
                    2627,
                    4677,
                    8774,
                    8780,
                    6776,
                    6779,
                    6780,
                    6782,
                    642,
                    644,
                    649,
                    650,
                    2698,
                    4752,
                    660,
                    661,
                    665,
                    666,
                    670,
                    671,
                    675,
                    8869,
                    8871,
                    8873,
                    8877,
                    8879,
                    6848,
                    6849,
                    6851,
                    2758,
                    8903,
                    8912,
                    8913,
                    8916,
                    4826,
                    4827,
                    732,
                    734,
                    8945,
                    11001,
                    11003,
                    8957,
                    11006,
                    8962,
                    8966,
                    778,
                    779,
                    8975,
                    8978,
                    2838,
                    2839,
                    2841,
                    11041,
                    11043,
                    11044,
                    6958,
                    6961,
                    11061,
                    6967,
                    11063,
                    11066,
                    6973,
                    6974,
                    6975,
                    6982,
                    4941,
                    4943,
                    4944,
                    6992,
                    6996,
                    4954,
                    11098,
                    7004,
                    11100,
                    4958,
                    7007,
                    11103,
                    4961,
                    7011,
                    7015,
                    7017,
                    7021,
                    890,
                    891,
                    894,
                    9101,
                    9102,
                    911,
                    912,
                    9103,
                    11159,
                    11161,
                    11163,
                    2975,
                    2976,
                    5025,
                    9122,
                    9124,
                    9127,
                    2989,
                    11188,
                    11189,
                    7094,
                    7098,
                    9160,
                    9161,
                    9166,
                    5082,
                    9187,
                    9189,
                    7164,
                    7168,
                    7176,
                    1033,
                    7177,
                    7181,
                    7184,
                    1041,
                    7191,
                    1052,
                    1053,
                    7198,
                    1056,
                    1057,
                    7203,
                    7204,
                    1061,
                    7206,
                    1063,
                    1067,
                    7212,
                    7213,
                    7215,
                    7216,
                    1080,
                    1082,
                    3151,
                    5214,
                    5216,
                    5217,
                    5218,
                    5229,
                    5230,
                    5231,
                    5233,
                    9330,
                    5235,
                    5236,
                    5237,
                    9331,
                    9336,
                    5249,
                    5250,
                    3204,
                    7303,
                    3208,
                    3209,
                    5256,
                    5257,
                    5258,
                    5259,
                    3214,
                    5262,
                    5264,
                    5265,
                    5266,
                    3219,
                    5268,
                    9357,
                    5270,
                    3223,
                    9359,
                    7324,
                    5278,
                    7326,
                    7329,
                    7333,
                    5286,
                    7335,
                    3243,
                    3250,
                    5298,
                    5300,
                    5301,
                    3255,
                    1209,
                    5308,
                    3262,
                    5310,
                    1216,
                    3265,
                    3268,
                    1232,
                    5328,
                    5330,
                    5331,
                    5332,
                    1238,
                    9430,
                    1240,
                    1241,
                    5336,
                    5337,
                    5341,
                    5342,
                    1249,
                    5346,
                    5347,
                    5352,
                    5353,
                    5367,
                    5370,
                    1307,
                    1308,
                    1311,
                    3364,
                    3366,
                    3367,
                    1321,
                    3369,
                    3373,
                    3374,
                    5449,
                    5450,
                    5455,
                    7504,
                    5460,
                    5480,
                    1407,
                    1409,
                    1415,
                    5512,
                    7559,
                    7560,
                    7562,
                    7568,
                    1426,
                    5522,
                    5523,
                    1429,
                    3477,
                    3478,
                    3483,
                    3487,
                    1440,
                    1443,
                    3492,
                    1445,
                    3494,
                    1447,
                    1448,
                    3496,
                    3498,
                    1452,
                    3500,
                    3505,
                    3507,
                    3510,
                    3513,
                    1471,
                    3520,
                    3523,
                    1477,
                    3525,
                    3526,
                    1480,
                    9669,
                    1483,
                    3531,
                    1486,
                    3536,
                    7636,
                    7637,
                    3542,
                    7639,
                    3546,
                    3549,
                    3550,
                    3552,
                    7650,
                    3555,
                    3560,
                    3562,
                    3564,
                    1517,
                    3568,
                    1522,
                    1523,
                    3576,
                    3577,
                    3578,
                    5627,
                    5628,
                    3583,
                    5633,
                    5634,
                    3587,
                    3588,
                    5637,
                    3592,
                    1546,
                    1547,
                    3595,
                    3597,
                    5643,
                    1552,
                    5651,
                    5655,
                    5656,
                    9753,
                    3610,
                    3611,
                    9754,
                    3613,
                    5661,
                    3615,
                    3616,
                    5662,
                    5666,
                    9757,
                    9759,
                    9764,
                    9766,
                    1575,
                    1597,
                    1598,
                    1603,
                    1604,
                    3651,
                    3660,
                    3661,
                    3662,
                    3663,
                    3667,
                    3668,
                    3703,
                    1656,
                    1657,
                    3705,
                    1659,
                    1660,
                    1661,
                    1662,
                    1663,
                    3714,
                    3716,
                    1670,
                    3722,
                    3726,
                    5774,
                    5775,
                    5778,
                    5787,
                    3748,
                    3755,
                    1716,
                    9908,
                    9910,
                    9912,
                    1721,
                    9913,
                    5826,
                    5827,
                    1733,
                    1735,
                    9927,
                    5834,
                    9930,
                    1740,
                    9931,
                    1772,
                    5878,
                    5879,
                    1785,
                    5882,
                    7931,
                    7933,
                    9983,
                    9985,
                    9987,
                    1799,
                    1810,
                    1811,
                    3861,
                    1815,
                    1819,
                    3868,
                    1823,
                    3886,
                    3889,
                    3895,
                    7991,
                    7994,
                    7995,
                    3902,
                    7998,
                    8002,
                    8003,
                    8004,
                    8006,
                    1872,
                    3923,
                    3924,
                    3925,
                    1882,
                    3934,
                    1890,
                    1891,
                    5995,
                    1905,
                    3954,
                    1907,
                    1908,
                    1909,
                    1910,
                    3955,
                    3957,
                    6001,
                    6005,
                    6008,
                    8053,
                    1917,
                    8056,
                    6015,
                    8057,
                    8061,
                    1922,
                    8062,
                    8063,
                    3973,
                    3974,
                    3975,
                    1928,
                    3976,
                    6024,
                    6025,
                    1932,
                    6027,
                    1936,
                    1939,
                    1941,
                    1943,
                    6041,
                    1951,
                    1952,
                    6053,
                    1960,
                    6062,
                    6065,
                    1970,
                    6066,
                    6071,
                    6074,
                    4034,
                    4035,
                    6091,
                    10192,
                    10196,
                    8156,
                    6110,
                    10207,
                    8171,
                    8172,
                    10221,
                    10222,
                    8178,
                    8183,
                    8185,
                    4093,
                    4094
                ],
                "TypeError": [
                    4483,
                    6538,
                    7566,
                    6800,
                    1425,
                    6035,
                    1044,
                    5269,
                    1050,
                    1439,
                    6438,
                    6567,
                    4651,
                    6453,
                    7992,
                    1219,
                    4679,
                    9167,
                    7648,
                    1771,
                    367,
                    5359,
                    6511,
                    8179,
                    116,
                    8054,
                    9337,
                    3706,
                    8317
                ],
                "to_replace": [
                    6530,
                    6532,
                    6418,
                    6426,
                    6427,
                    6555,
                    6429,
                    6432,
                    6434,
                    6436,
                    6564,
                    6568,
                    6443,
                    6446,
                    6467,
                    6469,
                    6472,
                    6481,
                    6484,
                    6498,
                    6513,
                    6515,
                    117,
                    6518,
                    6522,
                    125
                ],
                "method": [
                    6016,
                    8452,
                    8454,
                    8455,
                    6792,
                    3862,
                    6807,
                    4502,
                    4507,
                    6432,
                    6434,
                    6818,
                    7202,
                    6821,
                    7206,
                    4522,
                    8366,
                    8368,
                    6834,
                    8371,
                    8250,
                    4539,
                    8267,
                    2636,
                    9931,
                    9932,
                    7506,
                    8312,
                    8285,
                    8166,
                    5993,
                    8300,
                    117,
                    4470,
                    6008,
                    123
                ],
                "__name__": [
                    1952,
                    1477,
                    6568,
                    1452,
                    1772,
                    6541,
                    118,
                    6038,
                    253
                ],
                "type": [
                    1952,
                    1477,
                    11143,
                    6568,
                    9931,
                    1452,
                    1772,
                    6541,
                    6068,
                    8317,
                    118,
                    6038,
                    253
                ],
                "orig_dtype": [
                    128,
                    11140,
                    11143,
                    11111,
                    121
                ],
                "self.dtype": [
                    121,
                    131
                ],
                "result": [
                    3584,
                    9732,
                    7176,
                    9738,
                    9741,
                    7182,
                    10255,
                    10256,
                    7185,
                    10259,
                    7188,
                    7191,
                    7193,
                    1053,
                    5665,
                    5666,
                    5667,
                    1074,
                    1077,
                    1080,
                    1082,
                    122,
                    125,
                    126,
                    131,
                    134,
                    137,
                    9357,
                    9358,
                    9359,
                    7326,
                    7328,
                    7333,
                    7334,
                    7338,
                    5299,
                    5302,
                    1238,
                    734,
                    735,
                    1251,
                    1253,
                    778,
                    781,
                    785,
                    3369,
                    3373,
                    3374,
                    3376,
                    1885,
                    1886,
                    3934,
                    1889,
                    1891,
                    3957,
                    11125,
                    3959,
                    6008,
                    11127,
                    6011,
                    6013,
                    11133,
                    11140,
                    3975,
                    11143,
                    11151,
                    912,
                    913,
                    914,
                    915,
                    11152,
                    11154,
                    11157,
                    11159,
                    11163,
                    3487,
                    3488,
                    3489,
                    9124,
                    6053,
                    6055,
                    9127,
                    6057,
                    9130,
                    6059,
                    9132,
                    3523,
                    3531,
                    3532,
                    3536,
                    3537,
                    9187,
                    9188,
                    9189,
                    9709,
                    9711,
                    3577,
                    3578,
                    9724,
                    3582,
                    3583
                ],
                "inplace": [
                    128,
                    641,
                    6530,
                    6019,
                    7299,
                    133,
                    8582,
                    1035,
                    6544,
                    6417,
                    4245,
                    7190,
                    6042,
                    4252,
                    1053,
                    1310,
                    1311,
                    6432,
                    1313,
                    6434,
                    6558,
                    6564,
                    6053,
                    7203,
                    7204,
                    7329,
                    3881,
                    7332,
                    6059,
                    6571,
                    7335,
                    8749,
                    6063,
                    7216,
                    8481,
                    8495,
                    6070,
                    1079,
                    6841,
                    3901,
                    1213,
                    6846,
                    8509,
                    8773,
                    1224,
                    6472,
                    6092,
                    5326,
                    5327,
                    1232,
                    8783,
                    6483,
                    1238,
                    6494,
                    6111,
                    1252,
                    5992,
                    6506,
                    7324,
                    6006,
                    6774,
                    122,
                    6524
                ],
                "self.copy": [
                    644,
                    6053,
                    8869,
                    1740,
                    912,
                    4498,
                    5778,
                    6483,
                    1238,
                    665,
                    122,
                    5787,
                    1053,
                    1311
                ],
                "fill_f": [
                    123,
                    126
                ],
                "missing.get_fill_func": [
                    123
                ],
                "missing": [
                    7020,
                    7024,
                    4470,
                    8250,
                    123,
                    125
                ],
                "mask": [
                    11137,
                    7177,
                    11114,
                    11149,
                    11150,
                    11119,
                    11152,
                    7187,
                    7188,
                    11127,
                    11130,
                    125,
                    126
                ],
                "missing.mask_missing": [
                    125
                ],
                "result.values": [
                    125,
                    126
                ],
                "values": [
                    128,
                    131,
                    1668,
                    1415,
                    1416,
                    1417,
                    1419,
                    1420,
                    1421,
                    1423,
                    1425,
                    1429,
                    1430,
                    1431,
                    1688,
                    1433,
                    1434,
                    1435,
                    1437,
                    1439,
                    6447,
                    6449,
                    4668,
                    4669,
                    6462,
                    6465,
                    4676,
                    4677,
                    6469,
                    6996,
                    6997,
                    6999,
                    3549,
                    3550,
                    224,
                    9716,
                    1661,
                    126,
                    1663
                ],
                "limit": [
                    6018,
                    8454,
                    8455,
                    6544,
                    3864,
                    6042,
                    4507,
                    6432,
                    6434,
                    4522,
                    6058,
                    6063,
                    8368,
                    8371,
                    6838,
                    9913,
                    6472,
                    6092,
                    8268,
                    8286,
                    6111,
                    8313,
                    8301,
                    6008,
                    4473,
                    126
                ],
                "values.dtype": [
                    128,
                    224,
                    1425,
                    1439
                ],
                "__finalize__": [
                    7168,
                    131,
                    5775,
                    5522,
                    8978,
                    4506,
                    11163,
                    5662,
                    8607,
                    675,
                    3369,
                    6574,
                    8879,
                    7094,
                    6074,
                    7098,
                    5826,
                    6851,
                    5332,
                    1891,
                    4582,
                    5878,
                    5367,
                    5370,
                    7164
                ],
                "pd.Series": [
                    4978,
                    131,
                    9741,
                    9703
                ],
                "pd": [
                    5665,
                    131,
                    9703,
                    9741,
                    9777,
                    4978
                ],
                "self.index": [
                    131,
                    8339,
                    8340,
                    3496,
                    3498,
                    3500,
                    7213,
                    6958,
                    3510,
                    7991,
                    10296,
                    7994,
                    6973,
                    7998,
                    6974,
                    6975,
                    8002,
                    8003,
                    3526,
                    6992,
                    8404,
                    8407,
                    8418,
                    8420,
                    8421,
                    7017,
                    8053,
                    8056,
                    8061,
                    8062
                ],
                "self._update_inplace": [
                    6849,
                    134,
                    6572,
                    8595,
                    7191,
                    6071,
                    1080,
                    3902
                ],
                "result._data": [
                    134,
                    913,
                    914,
                    1074,
                    1080,
                    6011
                ],
                "bool_t": [
                    7170,
                    5892,
                    4101,
                    3590,
                    8069,
                    4104,
                    8071,
                    5514,
                    8072,
                    140,
                    2701,
                    8325,
                    3599,
                    3217,
                    5777,
                    1555,
                    8981,
                    7574,
                    5527,
                    7575,
                    3229,
                    1821,
                    5791,
                    5792,
                    5793,
                    1826,
                    5794,
                    5795,
                    3877,
                    5669,
                    2347,
                    2349,
                    9135,
                    2352,
                    3761,
                    3378,
                    2487,
                    4535,
                    7223,
                    6079,
                    5312,
                    8389,
                    4551,
                    4552,
                    3274,
                    3022,
                    3023,
                    3024,
                    6098,
                    3033,
                    7513,
                    5349,
                    4203,
                    4204,
                    9196,
                    4207,
                    4208,
                    7407,
                    2163,
                    1526,
                    2166,
                    2168,
                    3961
                ],
                "bool": [
                    1472,
                    1473,
                    292,
                    1319,
                    140,
                    8495,
                    345,
                    186,
                    189
                ],
                "PandasObject": [
                    143
                ],
                "SelectionMixin": [
                    143
                ],
                "indexing.IndexingMixin": [
                    143
                ],
                "indexing": [
                    143
                ],
                "_internal_names": [
                    170,
                    155
                ],
                "List": [
                    289,
                    298,
                    9770,
                    173,
                    3022,
                    495,
                    2353,
                    185,
                    155
                ],
                "_internal_names_set": [
                    170
                ],
                "Set": [
                    170,
                    171
                ],
                "set": [
                    1928,
                    170,
                    171
                ],
                "_accessors": [
                    171
                ],
                "_deprecations": [
                    172
                ],
                "FrozenSet": [
                    172
                ],
                "frozenset": [
                    172
                ],
                "_metadata": [
                    173
                ],
                "_is_copy": [
                    174
                ],
                "_data": [
                    175
                ],
                "BlockManager": [
                    184,
                    1916,
                    375,
                    175
                ],
                "_attrs": [
                    176
                ],
                "Optional": [
                    8069,
                    5895,
                    2701,
                    2345,
                    2346,
                    9770,
                    2348,
                    2350,
                    176,
                    2352,
                    2353,
                    3760,
                    185,
                    187,
                    188,
                    6082,
                    3017,
                    3274,
                    3020,
                    3021,
                    3024,
                    2642,
                    3026,
                    3027,
                    3028,
                    3030,
                    3031,
                    3032,
                    6101,
                    3034,
                    3035,
                    3036,
                    231,
                    7656,
                    7657,
                    4587,
                    4588,
                    7659,
                    7406,
                    2159,
                    240,
                    2160,
                    2161,
                    2165,
                    2167,
                    2169,
                    2170
                ],
                "Hashable": [
                    231,
                    9770,
                    3021,
                    176,
                    240,
                    3024,
                    188
                ],
                "Any": [
                    231,
                    176,
                    240,
                    1904,
                    2165,
                    188
                ],
                "_typ": [
                    177
                ],
                "Index": [
                    5263,
                    495,
                    7001,
                    185,
                    7002
                ],
                "Dtype": [
                    187
                ],
                "Mapping": [
                    240,
                    3027,
                    188
                ],
                "fastpath": [
                    192
                ],
                "dtype": [
                    256,
                    5633,
                    5636,
                    9739,
                    5644,
                    9741,
                    5646,
                    5651,
                    5655,
                    5661,
                    193,
                    194,
                    2635,
                    222,
                    224,
                    225,
                    250,
                    9710,
                    246,
                    247,
                    5626,
                    5628
                ],
                "data": [
                    9987,
                    9989,
                    9991,
                    9741,
                    5774,
                    5775,
                    9744,
                    9745,
                    9746,
                    9747,
                    9748,
                    9749,
                    9751,
                    9757,
                    9758,
                    9759,
                    9764,
                    9766,
                    9768,
                    6832,
                    6833,
                    1970,
                    9778,
                    1972,
                    9910,
                    9912,
                    9916,
                    9921,
                    194,
                    196,
                    200,
                    203,
                    8183,
                    8164,
                    8171,
                    9707,
                    9709,
                    7022,
                    7023,
                    7024,
                    7025,
                    9714,
                    9715,
                    9716,
                    375,
                    376,
                    8185,
                    8187,
                    382
                ],
                "data.astype": [
                    194
                ],
                "copy": [
                    5634,
                    3591,
                    1034,
                    9357,
                    5646,
                    4497,
                    5649,
                    5523,
                    4503,
                    3863,
                    664,
                    5655,
                    4507,
                    1053,
                    5661,
                    672,
                    8356,
                    8361,
                    9129,
                    4529,
                    1075,
                    1212,
                    5825,
                    195,
                    5832,
                    8265,
                    1238,
                    8283,
                    220,
                    8411,
                    8412,
                    4576,
                    4579,
                    9187,
                    8298,
                    8310,
                    4472,
                    8441
                ],
                "data.copy": [
                    196
                ],
                "axes": [
                    1033,
                    4494,
                    4502,
                    4503,
                    1049,
                    4507,
                    1057,
                    4516,
                    3887,
                    3889,
                    307,
                    308,
                    310,
                    311,
                    312,
                    313,
                    1209,
                    3897,
                    4538,
                    317,
                    198,
                    199,
                    333,
                    340,
                    213,
                    1241,
                    369,
                    370,
                    4469,
                    379,
                    380
                ],
                "i": [
                    914,
                    660,
                    5655,
                    663,
                    5656,
                    668,
                    671,
                    429,
                    436,
                    437,
                    311,
                    321,
                    325,
                    326,
                    199,
                    200,
                    328,
                    329,
                    10314,
                    8524,
                    6500,
                    6501,
                    893,
                    894
                ],
                "ax": [
                    9344,
                    6785,
                    6788,
                    9348,
                    6790,
                    9349,
                    9350,
                    9351,
                    9353,
                    1547,
                    9355,
                    4493,
                    4494,
                    4495,
                    1552,
                    9103,
                    9358,
                    9107,
                    9112,
                    9343,
                    9126,
                    9127,
                    4520,
                    4521,
                    6835,
                    1598,
                    1604,
                    199,
                    200,
                    9161,
                    8524,
                    9164,
                    9165,
                    9171,
                    340,
                    9173,
                    9174,
                    9178,
                    9179,
                    9180,
                    9181,
                    9183,
                    9185,
                    9188,
                    3560,
                    3561,
                    3562,
                    9331,
                    9334,
                    9335,
                    1657,
                    6779,
                    9341,
                    6783
                ],
                "enumerate": [
                    6500,
                    199,
                    10314,
                    8524,
                    429,
                    1070,
                    311,
                    313,
                    894
                ],
                "data.reindex_axis": [
                    200
                ],
                "object.__setattr__": [
                    5217,
                    1922,
                    5250,
                    5257,
                    202,
                    203,
                    204,
                    1932,
                    5259,
                    1936,
                    209,
                    5264,
                    5268,
                    5278
                ],
                "object": [
                    5217,
                    1922,
                    5249,
                    5250,
                    5257,
                    202,
                    203,
                    204,
                    1932,
                    5259,
                    6030,
                    1936,
                    209,
                    5233,
                    5264,
                    5268,
                    5237,
                    5278
                ],
                "attrs": [
                    1921,
                    1922,
                    205,
                    206,
                    239,
                    208,
                    209
                ],
                "a": [
                    4515,
                    4516,
                    4520,
                    1321,
                    4525,
                    311,
                    321,
                    322,
                    325,
                    326,
                    328,
                    329,
                    10314,
                    333,
                    1872,
                    340,
                    213,
                    216,
                    359,
                    362,
                    364,
                    492,
                    369,
                    501,
                    893,
                    894
                ],
                "axe": [
                    216,
                    213,
                    214
                ],
                "axes.items": [
                    3897,
                    213,
                    4494
                ],
                "mgr": [
                    224,
                    225,
                    226,
                    215,
                    221
                ],
                "mgr.reindex_axis": [
                    215
                ],
                "self._get_block_manager_axis": [
                    8962,
                    8580,
                    1061,
                    3367,
                    3576,
                    8871,
                    4560,
                    216
                ],
                "mgr.copy": [
                    221
                ],
                "len": [
                    3715,
                    6024,
                    6797,
                    10256,
                    1940,
                    5656,
                    6809,
                    1819,
                    9758,
                    9771,
                    1068,
                    5298,
                    307,
                    308,
                    5300,
                    312,
                    7994,
                    9165,
                    1872,
                    9688,
                    224,
                    8544,
                    6499,
                    8549,
                    492,
                    9708,
                    6515,
                    4980,
                    6518,
                    9335,
                    8056,
                    11131,
                    5628,
                    893
                ],
                "mgr.blocks": [
                    224
                ],
                "mgr.astype": [
                    225
                ],
                "self._attrs": [
                    241,
                    235,
                    236,
                    237
                ],
                "property": [
                    261,
                    268,
                    526,
                    3216,
                    275,
                    1825,
                    550,
                    3752,
                    555,
                    5452,
                    5457,
                    5334,
                    5339,
                    479,
                    5344,
                    483,
                    230,
                    487,
                    5482,
                    494,
                    503,
                    3195,
                    5375
                ],
                "value": [
                    5250,
                    3587,
                    6530,
                    5257,
                    5259,
                    6028,
                    6029,
                    3214,
                    6030,
                    5264,
                    6032,
                    5266,
                    6544,
                    5268,
                    6549,
                    5270,
                    6038,
                    6423,
                    6552,
                    6042,
                    6045,
                    5278,
                    6562,
                    6564,
                    6054,
                    6061,
                    6063,
                    6065,
                    6066,
                    6068,
                    6467,
                    6469,
                    3654,
                    3655,
                    6472,
                    6482,
                    6485,
                    6490,
                    6497,
                    6504,
                    5993,
                    3691,
                    5356,
                    3693,
                    241,
                    6514,
                    6003,
                    6515,
                    6518,
                    6523
                ],
                "attrs.setter": [
                    239
                ],
                "pandas_dtype": [
                    247
                ],
                "dtype.kind": [
                    250
                ],
                "NotImplementedError": [
                    6827,
                    4251,
                    11185,
                    8530,
                    6007,
                    280,
                    251,
                    4253,
                    6047
                ],
                "FrameOrSeries": [
                    5669,
                    551,
                    556,
                    7219,
                    7226,
                    4681,
                    5199,
                    5200,
                    652,
                    5777,
                    4754,
                    9363,
                    5780,
                    5790,
                    8866,
                    8867,
                    5796,
                    677,
                    4262,
                    9900,
                    3758,
                    8881,
                    9906,
                    3764,
                    3274,
                    3275,
                    5836,
                    8919,
                    8920,
                    9433,
                    9434,
                    4830,
                    737,
                    4837,
                    7403,
                    7409,
                    5888,
                    262,
                    5895,
                    7946,
                    8981,
                    8982,
                    3907,
                    3908,
                    8008,
                    7513,
                    7514,
                    373,
                    898,
                    8066,
                    8073,
                    3978,
                    7571,
                    5527,
                    5528,
                    7577,
                    4511,
                    4512,
                    9135,
                    9136,
                    7093,
                    7097,
                    6077,
                    6082,
                    4548,
                    4037,
                    4553,
                    1482,
                    1485,
                    6096,
                    6101,
                    9192,
                    4585,
                    4590,
                    9199,
                    3570,
                    7163,
                    7167
                ],
                "AbstractMethodError": [
                    4545,
                    4197,
                    266,
                    3568,
                    273,
                    3542
                ],
                "Type": [
                    373,
                    262
                ],
                "_AXIS_ALIASES": [
                    284
                ],
                "_AXIS_IALIASES": [
                    285
                ],
                "_stat_axis_number": [
                    286
                ],
                "_stat_axis_name": [
                    287
                ],
                "_ix": [
                    288
                ],
                "_AXIS_ORDERS": [
                    289
                ],
                "_AXIS_NUMBERS": [
                    290
                ],
                "int": [
                    4754,
                    1555,
                    5014,
                    1817,
                    1690,
                    290,
                    291,
                    293,
                    295,
                    2345,
                    1579,
                    2350,
                    8881,
                    4681,
                    460,
                    1485,
                    2643,
                    3028,
                    1622,
                    3031,
                    8919,
                    476,
                    488,
                    7661,
                    2162,
                    504,
                    2169
                ],
                "_AXIS_NAMES": [
                    291
                ],
                "_AXIS_REVERSED": [
                    292
                ],
                "_info_axis_number": [
                    293
                ],
                "_info_axis_name": [
                    294
                ],
                "_AXIS_LEN": [
                    295
                ],
                "info_axis": [
                    307,
                    316,
                    317
                ],
                "axes_are_reversed": [
                    314,
                    308,
                    324
                ],
                "cls._AXIS_ORDERS": [
                    10314,
                    310
                ],
                "cls": [
                    10251,
                    10314,
                    10316,
                    10317,
                    3193,
                    3195,
                    9941,
                    9943,
                    9944,
                    9955,
                    9956,
                    11015,
                    9994,
                    9996,
                    9997,
                    10007,
                    10008,
                    10017,
                    10018,
                    11048,
                    10029,
                    10030,
                    310,
                    311,
                    312,
                    313,
                    314,
                    10042,
                    316,
                    317,
                    10043,
                    11070,
                    321,
                    322,
                    325,
                    10055,
                    328,
                    10056,
                    10068,
                    10069,
                    10082,
                    10083,
                    10094,
                    10095,
                    10103,
                    10104,
                    376,
                    378,
                    380,
                    382,
                    10112,
                    10113,
                    386,
                    388,
                    392,
                    395,
                    10124,
                    10125,
                    10126,
                    399,
                    401,
                    405,
                    10135,
                    408,
                    10136,
                    10137,
                    11165,
                    417,
                    418,
                    419,
                    10145,
                    10146,
                    10158,
                    10159,
                    11198,
                    10217,
                    10224
                ],
                "cls._AXIS_NUMBERS": [
                    392,
                    401,
                    311
                ],
                "cls._AXIS_LEN": [
                    312,
                    419,
                    10316
                ],
                "cls._AXIS_NAMES": [
                    388,
                    325,
                    328,
                    405,
                    313
                ],
                "cls._AXIS_REVERSED": [
                    418,
                    314,
                    378
                ],
                "cls._info_axis_number": [
                    316
                ],
                "cls._info_axis_name": [
                    317
                ],
                "setattr": [
                    3488,
                    321,
                    642,
                    9127,
                    3195
                ],
                "properties.AxisProperty": [
                    321
                ],
                "properties": [
                    321
                ],
                "docs.get": [
                    321
                ],
                "docs": [
                    321
                ],
                "cls._internal_names_set.add": [
                    322
                ],
                "cls._internal_names_set": [
                    322
                ],
                "cls._AXIS_NAMES.items": [
                    328,
                    325
                ],
                "set_axis": [
                    329,
                    326
                ],
                "classmethod": [
                    384,
                    297,
                    397,
                    9935,
                    3187,
                    372,
                    10172,
                    414
                ],
                "d": [
                    3860,
                    11161,
                    11162,
                    11163,
                    3868,
                    426,
                    9777,
                    9778,
                    9779,
                    442,
                    450,
                    451,
                    456,
                    458,
                    460,
                    333,
                    334,
                    335,
                    340,
                    341,
                    342,
                    1890,
                    1891,
                    9698,
                    9703,
                    7021,
                    7022,
                    380,
                    381,
                    382
                ],
                "self._get_axis": [
                    1670,
                    6024,
                    7562,
                    4493,
                    9103,
                    3478,
                    4248,
                    1308,
                    670,
                    4520,
                    1321,
                    3373,
                    4658,
                    9161,
                    333,
                    1872,
                    8913,
                    3925,
                    7639,
                    732,
                    1249,
                    492,
                    8945,
                    9331,
                    501
                ],
                "self._AXIS_ORDERS": [
                    1890,
                    4515,
                    359,
                    457,
                    1321,
                    492,
                    333,
                    1872,
                    369,
                    340,
                    501,
                    3861
                ],
                "d.update": [
                    458,
                    381,
                    341,
                    334
                ],
                "kwargs": [
                    4480,
                    4482,
                    4485,
                    7301,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    10255,
                    1043,
                    1046,
                    11035,
                    11037,
                    3362,
                    11182,
                    11057,
                    9908,
                    1209,
                    1210,
                    6843,
                    1212,
                    1213,
                    1214,
                    9916,
                    1218,
                    1221,
                    2758,
                    9929,
                    9932,
                    334,
                    341,
                    11096,
                    5082,
                    11103,
                    4472,
                    362,
                    364,
                    369,
                    370,
                    10993,
                    10995,
                    4469,
                    4470,
                    4471,
                    376,
                    4473,
                    4474,
                    4475,
                    10997,
                    381
                ],
                "zip": [
                    340,
                    6462,
                    6447
                ],
                "staticmethod": [
                    337
                ],
                "args": [
                    7301,
                    358,
                    1033,
                    364,
                    10255,
                    4469,
                    11096,
                    5082,
                    11103
                ],
                "list": [
                    6464,
                    6465,
                    4485,
                    1221,
                    358,
                    1929,
                    9674,
                    6446,
                    1046,
                    6429,
                    6462
                ],
                "args.pop": [
                    364
                ],
                "IndexError": [
                    365,
                    3749
                ],
                "require_all": [
                    366
                ],
                "kwargs.pop": [
                    4480,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    369,
                    9908,
                    4470,
                    4471,
                    4472,
                    4473,
                    4474,
                    4475,
                    1212,
                    1213,
                    1214
                ],
                "sentinel": [
                    369
                ],
                "isinstance": [
                    3712,
                    3715,
                    8963,
                    9348,
                    1670,
                    11139,
                    6792,
                    6028,
                    5263,
                    400,
                    8336,
                    8959,
                    5270,
                    6045,
                    6429,
                    6430,
                    8485,
                    9126,
                    5287,
                    3497,
                    6955,
                    7211,
                    7212,
                    3502,
                    6065,
                    6961,
                    8500,
                    7991,
                    445,
                    6974,
                    8253,
                    1472,
                    460,
                    3660,
                    8396,
                    3151,
                    8271,
                    3667,
                    2133,
                    8534,
                    472,
                    1753,
                    3929,
                    4953,
                    476,
                    4957,
                    4958,
                    375,
                    5212,
                    7001,
                    9178,
                    3940,
                    8292,
                    9321,
                    8304,
                    8053,
                    3703,
                    1916,
                    1918,
                    1407
                ],
                "cls._construct_axes_dict_from": [
                    380
                ],
                "axis": [
                    10248,
                    1546,
                    1547,
                    1037,
                    1039,
                    1041,
                    7197,
                    7198,
                    1056,
                    1057,
                    1061,
                    7206,
                    1063,
                    1575,
                    1576,
                    1067,
                    8749,
                    7215,
                    4656,
                    4657,
                    4658,
                    7216,
                    4661,
                    1597,
                    1598,
                    4669,
                    1603,
                    4677,
                    8263,
                    1609,
                    1613,
                    8784,
                    8281,
                    8290,
                    8291,
                    8296,
                    9330,
                    9331,
                    8308,
                    1656,
                    1657,
                    6776,
                    1659,
                    1660,
                    6778,
                    1662,
                    1663,
                    6781,
                    9336,
                    642,
                    645,
                    7301,
                    7302,
                    7303,
                    649,
                    9358,
                    1680,
                    8338,
                    4246,
                    4247,
                    4248,
                    8344,
                    8578,
                    7329,
                    8580,
                    7335,
                    8871,
                    1716,
                    9908,
                    1721,
                    9913,
                    9916,
                    7568,
                    1214,
                    1215,
                    1216,
                    1728,
                    6847,
                    6852,
                    1733,
                    9925,
                    1735,
                    9927,
                    9930,
                    9932,
                    1742,
                    1232,
                    8400,
                    8912,
                    8913,
                    8914,
                    1240,
                    1241,
                    9100,
                    732,
                    734,
                    9101,
                    1249,
                    8417,
                    1251,
                    9102,
                    9103,
                    8428,
                    8945,
                    11000,
                    11001,
                    7931,
                    11004,
                    9982,
                    9983,
                    7937,
                    8962,
                    9985,
                    9988,
                    11009,
                    9992,
                    8458,
                    1307,
                    1308,
                    1312,
                    11040,
                    11041,
                    11043,
                    11045,
                    3367,
                    11151,
                    3373,
                    3886,
                    11060,
                    11061,
                    10238,
                    11064,
                    3897,
                    3899,
                    11067,
                    8519,
                    8523,
                    4940,
                    4941,
                    4943,
                    4944,
                    3923,
                    3924,
                    3925,
                    3927,
                    3929,
                    4954,
                    3931,
                    11097,
                    3933,
                    11098,
                    4959,
                    11100,
                    11102,
                    3940,
                    3942,
                    3948,
                    3950,
                    5999,
                    6000,
                    6001,
                    6005,
                    11125,
                    890,
                    8572,
                    893,
                    8573,
                    6017,
                    386,
                    387,
                    388,
                    389,
                    7558,
                    7559,
                    392,
                    6024,
                    7560,
                    395,
                    7562,
                    4493,
                    4494,
                    399,
                    400,
                    401,
                    402,
                    911,
                    913,
                    405,
                    914,
                    3477,
                    408,
                    3478,
                    11154,
                    411,
                    3484,
                    6046,
                    3488,
                    417,
                    5025,
                    3491,
                    420,
                    421,
                    9123,
                    9127,
                    425,
                    427,
                    4525,
                    4527,
                    3505,
                    3507,
                    11188,
                    11192,
                    450,
                    9160,
                    9161,
                    6092,
                    4558,
                    4559,
                    4560,
                    9166,
                    10192,
                    7635,
                    7636,
                    7637,
                    7639,
                    10202,
                    8156,
                    6111,
                    7650,
                    9188,
                    8165,
                    10213,
                    1517,
                    10221,
                    10222,
                    1522,
                    1523,
                    3576,
                    3577,
                    3582
                ],
                "cls._AXIS_ALIASES.get": [
                    386,
                    399
                ],
                "cls._AXIS_ALIASES": [
                    386,
                    399
                ],
                "is_integer": [
                    387
                ],
                "KeyError": [
                    1665,
                    4962,
                    4963,
                    3749,
                    5638,
                    393,
                    3946,
                    3727,
                    1072,
                    3952,
                    406,
                    5629
                ],
                "ValueError": [
                    7174,
                    4999,
                    6793,
                    9354,
                    395,
                    8973,
                    5007,
                    1681,
                    10257,
                    5012,
                    9108,
                    408,
                    5016,
                    5020,
                    9120,
                    6819,
                    9763,
                    3749,
                    1451,
                    8491,
                    3885,
                    6959,
                    3891,
                    6068,
                    6964,
                    8503,
                    8507,
                    1725,
                    1475,
                    9670,
                    9926,
                    8401,
                    1234,
                    1620,
                    9689,
                    8160,
                    9184,
                    4967,
                    8954,
                    9324,
                    4973,
                    8559,
                    6516,
                    4981,
                    8564,
                    8439,
                    4986,
                    4989
                ],
                "name": [
                    9773,
                    9774,
                    9775,
                    4661,
                    4662,
                    2628,
                    10316,
                    10318,
                    5213,
                    5214,
                    5216,
                    5217,
                    5229,
                    5230,
                    5231,
                    5233,
                    5235,
                    5236,
                    5237,
                    3193,
                    3194,
                    3195,
                    5249,
                    5250,
                    5256,
                    5257,
                    5258,
                    5259,
                    5262,
                    5264,
                    5265,
                    5266,
                    5268,
                    5278,
                    9928,
                    9929,
                    9931,
                    9941,
                    9946,
                    1250,
                    9958,
                    10992,
                    10994,
                    9971,
                    10997,
                    11004,
                    11008,
                    11015,
                    9999,
                    10010,
                    11034,
                    1308,
                    11037,
                    11043,
                    10020,
                    11045,
                    11048,
                    10032,
                    11057,
                    11064,
                    11067,
                    10045,
                    11070,
                    10058,
                    10071,
                    11096,
                    10085,
                    10097,
                    10106,
                    10115,
                    10128,
                    411,
                    412,
                    10139,
                    11165,
                    10148,
                    429,
                    430,
                    431,
                    11182,
                    10161,
                    11188,
                    11191,
                    11198
                ],
                "self._get_axis_name": [
                    642,
                    9127,
                    3886,
                    9166,
                    3924,
                    4661,
                    4247,
                    9336,
                    411
                ],
                "getattr": [
                    481,
                    5217,
                    485,
                    3975,
                    425,
                    9929,
                    3243,
                    9931,
                    5262,
                    1905,
                    3219,
                    8947,
                    8950,
                    3223,
                    3193,
                    412,
                    8575
                ],
                "cls._get_axis_number": [
                    417
                ],
                "m": [
                    419,
                    420
                ],
                "axis_index": [
                    448,
                    425,
                    429,
                    439,
                    441,
                    445,
                    446
                ],
                "prefix": [
                    4032,
                    427,
                    436
                ],
                "axis_index.names": [
                    429
                ],
                "key": [
                    3712,
                    1665,
                    3713,
                    3587,
                    3715,
                    3722,
                    1550,
                    1551,
                    1552,
                    3726,
                    1683,
                    3480,
                    1823,
                    2465,
                    3492,
                    3748,
                    1575,
                    1576,
                    3498,
                    3500,
                    431,
                    436,
                    442,
                    1601,
                    1602,
                    1603,
                    1604,
                    1617,
                    1520,
                    1521,
                    1522,
                    1523,
                    3705,
                    1659,
                    1660,
                    1661,
                    1662,
                    1663
                ],
                "level": [
                    9984,
                    8449,
                    9985,
                    9349,
                    9350,
                    7943,
                    9351,
                    9353,
                    9354,
                    1036,
                    8341,
                    4502,
                    3479,
                    3480,
                    4250,
                    4507,
                    8347,
                    11042,
                    11043,
                    1062,
                    1063,
                    4522,
                    8749,
                    431,
                    11183,
                    1075,
                    11188,
                    437,
                    11062,
                    439,
                    11064,
                    3899,
                    4540,
                    8519,
                    8264,
                    9927,
                    8785,
                    3928,
                    8408,
                    8282,
                    3931,
                    9179,
                    733,
                    9180,
                    9181,
                    9183,
                    9184,
                    3939,
                    3942,
                    8422,
                    8297,
                    8433,
                    8309,
                    4471,
                    11002,
                    11004
                ],
                "level_values": [
                    440,
                    439
                ],
                "axis_index.get_level_values": [
                    439
                ],
                "s": [
                    440,
                    441,
                    442,
                    9768
                ],
                "level_values.to_series": [
                    440
                ],
                "s.index": [
                    441
                ],
                "MultiIndex": [
                    3940,
                    9348,
                    1670,
                    9126,
                    6792,
                    3497,
                    3703,
                    3929,
                    1753,
                    9178,
                    445
                ],
                "dindex": [
                    448,
                    450,
                    446
                ],
                "axis_index.to_series": [
                    448
                ],
                "ABCSeries": [
                    453,
                    423,
                    456,
                    7211,
                    6028,
                    7212,
                    462,
                    8271,
                    8304,
                    6961,
                    8336,
                    8253,
                    8396,
                    472,
                    4953,
                    6045
                ],
                "axis_name": [
                    4260,
                    457,
                    458,
                    3886,
                    3887,
                    3955,
                    3924,
                    4247,
                    3934
                ],
                "self._get_axis_resolvers": [
                    458
                ],
                "clean_column_name": [
                    473,
                    476,
                    460
                ],
                "k": [
                    1929,
                    1930,
                    1931,
                    1932,
                    1934,
                    1935,
                    1936,
                    5522,
                    5523,
                    6552,
                    6553,
                    6557,
                    670,
                    6054,
                    6055,
                    6057,
                    1721,
                    6461,
                    6464,
                    6465,
                    1733,
                    1735,
                    460,
                    476,
                    6498,
                    6500,
                    6505,
                    1905
                ],
                "v": [
                    1931,
                    1932,
                    1934,
                    1936,
                    5522,
                    5523,
                    6552,
                    6556,
                    1057,
                    1058,
                    1060,
                    6054,
                    1066,
                    1067,
                    6058,
                    1070,
                    6449,
                    6461,
                    6462,
                    1471,
                    1472,
                    1473,
                    1474,
                    460,
                    1241,
                    1242,
                    1244,
                    476,
                    1246,
                    1248
                ],
                "d.items": [
                    460
                ],
                "self.name": [
                    473,
                    5628,
                    5633,
                    7007
                ],
                "self.items": [
                    5643,
                    476,
                    1815
                ],
                "self._info_axis_name": [
                    481,
                    4034,
                    4657,
                    6779,
                    4093
                ],
                "self._stat_axis_name": [
                    9908,
                    485
                ],
                "tuple": [
                    3712,
                    3362,
                    3715,
                    9124,
                    11037,
                    492,
                    11182,
                    10993,
                    11057,
                    10995,
                    3957,
                    10997,
                    6429,
                    11035,
                    892,
                    3485
                ],
                "Tuple": [
                    488
                ],
                "self._data.ndim": [
                    524
                ],
                "self._data": [
                    1409,
                    6529,
                    3587,
                    8966,
                    3975,
                    5512,
                    649,
                    3722,
                    5879,
                    524,
                    8587,
                    3214,
                    5774,
                    8975,
                    9357,
                    5523,
                    6550,
                    8598,
                    11159,
                    6041,
                    5661,
                    6563,
                    3366,
                    6521,
                    8873,
                    3755,
                    6062,
                    5298,
                    5300,
                    3513,
                    5308,
                    5827,
                    5450,
                    4557,
                    6480,
                    5330,
                    5336,
                    3549,
                    5341,
                    8416,
                    5346,
                    4579,
                    9187,
                    8441,
                    1907,
                    5367,
                    3577,
                    5370,
                    1917,
                    6015
                ],
                "np.prod": [
                    548
                ],
                "np": [
                    5376,
                    7171,
                    7172,
                    11139,
                    5512,
                    9992,
                    9738,
                    7179,
                    11146,
                    7310,
                    11150,
                    7312,
                    11152,
                    7187,
                    7188,
                    8470,
                    6809,
                    9757,
                    8739,
                    548,
                    8489,
                    3502,
                    3503,
                    10036,
                    10038,
                    10039,
                    8765,
                    1472,
                    10049,
                    10052,
                    6982,
                    6983,
                    8519,
                    8778,
                    5453,
                    10062,
                    10065,
                    5458,
                    9682,
                    9684,
                    1622,
                    5462,
                    8534,
                    9430,
                    9687,
                    10075,
                    10077,
                    10078,
                    7007,
                    8545,
                    7011,
                    7015,
                    5356,
                    11116,
                    11119,
                    7024,
                    11127,
                    11128,
                    4985,
                    11130
                ],
                "self.shape": [
                    548,
                    8490,
                    3662,
                    4944,
                    8536
                ],
                "labels": [
                    642,
                    645,
                    649,
                    913,
                    914,
                    3478,
                    3480,
                    4248,
                    4255,
                    4259,
                    4516,
                    4517,
                    4522,
                    3883,
                    3887,
                    4658,
                    4662,
                    3897,
                    3898,
                    3899,
                    4668,
                    4676,
                    3931,
                    732,
                    3933,
                    733,
                    3938,
                    3942,
                    3946,
                    3948,
                    3950,
                    3952
                ],
                "obj": [
                    3904,
                    4514,
                    644,
                    645,
                    646,
                    6057,
                    6058,
                    4526,
                    4533,
                    3895,
                    3899,
                    3902
                ],
                "obj.set_axis": [
                    645
                ],
                "self._data.set_axis": [
                    649
                ],
                "self._clear_item_cache": [
                    3265,
                    3588,
                    3974,
                    650,
                    5301
                ],
                "self._get_axis_number": [
                    8578,
                    7303,
                    7560,
                    1546,
                    9102,
                    911,
                    1041,
                    660,
                    661,
                    3477,
                    4246,
                    1307,
                    7198,
                    6776,
                    4525,
                    1716,
                    9908,
                    1597,
                    1216,
                    9160,
                    9930,
                    4943,
                    10192,
                    3923,
                    7637,
                    8156,
                    11100,
                    8291,
                    1517,
                    10221,
                    6001,
                    9330,
                    3955,
                    1656,
                    890,
                    7931,
                    10238
                ],
                "axis1": [
                    660
                ],
                "j": [
                    914,
                    661,
                    663,
                    668,
                    671
                ],
                "axis2": [
                    661
                ],
                "mapping": [
                    668,
                    670
                ],
                "new_axes": [
                    675,
                    670
                ],
                "mapping.get": [
                    670
                ],
                "range": [
                    1056,
                    5656,
                    1547,
                    670,
                    1240,
                    1657,
                    1598
                ],
                "self._AXIS_LEN": [
                    1056,
                    9122,
                    1547,
                    670,
                    1240,
                    1657,
                    4538,
                    1598
                ],
                "new_values": [
                    3520,
                    673,
                    3521,
                    675,
                    3524,
                    3527,
                    3513,
                    671
                ],
                "self.values.swapaxes": [
                    671
                ],
                "self.values": [
                    5480,
                    7177,
                    5455,
                    5460,
                    671
                ],
                "new_values.copy": [
                    673
                ],
                "self._constructor": [
                    9357,
                    5775,
                    5522,
                    8978,
                    11163,
                    5662,
                    8607,
                    675,
                    3369,
                    8492,
                    7213,
                    6574,
                    8879,
                    6074,
                    6848,
                    5826,
                    6851,
                    5332,
                    7007,
                    1891,
                    9187,
                    4582,
                    8171,
                    8570,
                    5878,
                    5367,
                    3577,
                    5370,
                    8444,
                    1407
                ],
                "new_labels": [
                    733,
                    734
                ],
                "labels.droplevel": [
                    733
                ],
                "self.set_axis": [
                    734
                ],
                "item": [
                    3552,
                    3204,
                    778,
                    779,
                    3562,
                    3564,
                    3214,
                    3547,
                    3549,
                    3550,
                    3551
                ],
                "result._reset_cacher": [
                    781
                ],
                "AttributeError": [
                    5251,
                    7565,
                    782,
                    5269,
                    7647
                ],
                "self._AXIS_NAMES": [
                    1057,
                    890,
                    1241
                ],
                "self.iloc": [
                    8004,
                    8063,
                    3531,
                    4752,
                    5655,
                    4826,
                    891,
                    4827,
                    3487
                ],
                "slice": [
                    9122,
                    9123,
                    8906,
                    8907,
                    8909,
                    8910,
                    3570,
                    3954,
                    3483,
                    893
                ],
                "self.axes": [
                    1603,
                    1604,
                    1063,
                    1067,
                    8524,
                    1552,
                    1522,
                    4954,
                    894,
                    1663
                ],
                "result._data.axes": [
                    913
                ],
                "result._data.set_axis": [
                    914
                ],
                "labels.swaplevel": [
                    914
                ],
                "self._construct_axes_from_arguments": [
                    1033,
                    1209,
                    4469,
                    3889
                ],
                "errors": [
                    3899,
                    5634,
                    5661,
                    3945,
                    1068,
                    2477,
                    1038,
                    3951,
                    5646,
                    8749,
                    8787,
                    8602,
                    3931,
                    3933
                ],
                "kwargs.keys": [
                    4485,
                    1221,
                    1046
                ],
                "com.count_not_none": [
                    1049,
                    4538,
                    4649
                ],
                "com": [
                    10241,
                    1415,
                    1429,
                    1049,
                    1060,
                    8484,
                    1447,
                    4649,
                    8747,
                    1719,
                    4538,
                    3521,
                    8774,
                    4947,
                    5082,
                    1882,
                    1248,
                    3938,
                    8553,
                    3692,
                    3694
                ],
                "axes.values": [
                    1049,
                    4538
                ],
                "self._consolidate_inplace": [
                    3364,
                    3494,
                    4488,
                    5449,
                    5995,
                    5328,
                    6421,
                    1052
                ],
                "axes.get": [
                    1057,
                    1241
                ],
                "f": [
                    1060,
                    11045,
                    1075,
                    5299,
                    11190,
                    11067,
                    4668,
                    5310,
                    4032,
                    4034,
                    4676,
                    5330,
                    5331,
                    5336,
                    5337,
                    5341,
                    5342,
                    1248,
                    1250,
                    5346,
                    5347,
                    4091,
                    4093,
                    11007
                ],
                "com.get_rename_function": [
                    1248,
                    1060
                ],
                "baxis": [
                    4560,
                    4573,
                    1075,
                    1061
                ],
                "_get_level_number": [
                    1063
                ],
                "callable": [
                    1066
                ],
                "indexer": [
                    7564,
                    7568,
                    3485,
                    3487,
                    4521,
                    1067,
                    1068,
                    1070,
                    4527,
                    4559,
                    4566,
                    4567,
                    7641,
                    4572,
                    7650,
                    3942,
                    3945,
                    3948,
                    3955,
                    3194,
                    3195
                ],
                "get_indexer_for": [
                    1067
                ],
                "missing_labels": [
                    1072,
                    1069
                ],
                "label": [
                    3012,
                    1070,
                    7935
                ],
                "index": [
                    8963,
                    8964,
                    8967,
                    7562,
                    7564,
                    8976,
                    6809,
                    6811,
                    6814,
                    6815,
                    2336,
                    6816,
                    2472,
                    3496,
                    3497,
                    6826,
                    3884,
                    1070,
                    3888,
                    3889,
                    2994,
                    6836,
                    2632,
                    4559,
                    4562,
                    4565,
                    7639,
                    7641,
                    4571,
                    3167,
                    2143,
                    8945,
                    8947,
                    8950
                ],
                "result._data.rename_axis": [
                    1074
                ],
                "result._clear_item_cache": [
                    1077
                ],
                "result.__finalize__": [
                    1082,
                    9189,
                    3578,
                    9359
                ],
                "lib.no_default": [
                    1226,
                    1210,
                    1085,
                    1242
                ],
                "lib": [
                    1242,
                    1226,
                    1085,
                    1210,
                    1885
                ],
                "validate_bool_kwarg": [
                    5824,
                    5825,
                    8481,
                    7299,
                    8773,
                    1224,
                    3881,
                    5992,
                    5822,
                    5326,
                    6417,
                    4245,
                    6774,
                    5821,
                    1310,
                    5823
                ],
                "mapper": [
                    4034,
                    4035,
                    1226,
                    1228,
                    1229,
                    1232,
                    4093,
                    4094
                ],
                "non_mapper": [
                    1244,
                    1228,
                    1245,
                    1231
                ],
                "is_scalar": [
                    7201,
                    1474,
                    1228,
                    10256,
                    3509,
                    7317,
                    3512,
                    7321,
                    7322,
                    1244,
                    1886
                ],
                "is_list_like": [
                    3520,
                    6497,
                    6562,
                    6535,
                    7211,
                    1229,
                    6061,
                    7310,
                    6032,
                    6513,
                    6514,
                    7312,
                    5270,
                    6968,
                    6971,
                    1244
                ],
                "is_dict_like": [
                    6436,
                    6437,
                    6536,
                    6426,
                    1229,
                    6449,
                    6481,
                    6482,
                    6549,
                    5626,
                    1244
                ],
                "self._set_axis_name": [
                    1232
                ],
                "newnames": [
                    1250,
                    1251,
                    1246
                ],
                "curnames": [
                    1249,
                    1250
                ],
                "names": [
                    1249,
                    1603,
                    9731,
                    9737,
                    9706,
                    9770,
                    9741,
                    9774,
                    9775,
                    9777,
                    1522,
                    9723
                ],
                "result._set_axis_name": [
                    1251
                ],
                "rewrite_axis_style_signature": [
                    1084
                ],
                "idx": [
                    1312,
                    1308
                ],
                "set_names": [
                    1308
                ],
                "renamed": [
                    1312,
                    1314,
                    1311
                ],
                "renamed.set_axis": [
                    1312
                ],
                "all": [
                    1320,
                    8523,
                    4492,
                    6452
                ],
                "equals": [
                    1321,
                    8524,
                    3373
                ],
                "other._get_axis": [
                    1321,
                    8524
                ],
                "other": [
                    1409,
                    8449,
                    8447,
                    8575,
                    8586,
                    8589,
                    8465,
                    8339,
                    3860,
                    8341,
                    8599,
                    8345,
                    8347,
                    8359,
                    1321,
                    8747,
                    8749,
                    8252,
                    8381,
                    8513,
                    8258,
                    8516,
                    8261,
                    8518,
                    8519,
                    8524,
                    8782,
                    8271,
                    8274,
                    8276,
                    8404,
                    8534,
                    8408,
                    8536,
                    5212,
                    5213,
                    5214,
                    8412,
                    8544,
                    5217,
                    8545,
                    8292,
                    8420,
                    8294,
                    8422,
                    8549,
                    8555,
                    8556,
                    8431,
                    8304,
                    8433,
                    8306,
                    8570,
                    8317,
                    1407
                ],
                "self._data.equals": [
                    1409
                ],
                "other._data": [
                    1409
                ],
                "com.values_from_object": [
                    1447,
                    1415,
                    8553,
                    1429,
                    1882
                ],
                "is_bool_dtype": [
                    1416,
                    9744,
                    8502,
                    1430,
                    8506
                ],
                "arr": [
                    1440,
                    1447,
                    1448,
                    1417,
                    1423,
                    1426,
                    1431,
                    1437
                ],
                "operator.inv": [
                    1417,
                    1447
                ],
                "operator": [
                    1417,
                    1447,
                    1437,
                    1423
                ],
                "is_numeric_dtype": [
                    1433,
                    9746,
                    1419,
                    6814
                ],
                "is_timedelta64_dtype": [
                    6816,
                    1434,
                    1420,
                    9748
                ],
                "is_object_dtype": [
                    1435,
                    1421
                ],
                "operator.neg": [
                    1423
                ],
                "self.__array_wrap__": [
                    1440,
                    1426,
                    1448
                ],
                "is_period_arraylike": [
                    1430
                ],
                "operator.pos": [
                    1437
                ],
                "self.size": [
                    1443,
                    6477
                ],
                "__bool__": [
                    1456
                ],
                "__nonzero__": [
                    1456
                ],
                "self.squeeze": [
                    1471
                ],
                "np.bool_": [
                    1472,
                    11146,
                    3503
                ],
                "self.__nonzero__": [
                    1480
                ],
                "self.abs": [
                    1483
                ],
                "self.round": [
                    1486
                ],
                "decimals": [
                    1486
                ],
                "is_hashable": [
                    1521,
                    1602,
                    1551
                ],
                "self._is_label_reference": [
                    1659,
                    1523,
                    1575
                ],
                "other_axes": [
                    1604,
                    1670,
                    1547,
                    1552,
                    1657,
                    1661,
                    1598
                ],
                "any": [
                    1604,
                    7004,
                    6826,
                    3950,
                    1552,
                    1872,
                    6451,
                    4985,
                    4988
                ],
                "self._is_level_reference": [
                    1735,
                    1733,
                    1662,
                    1575
                ],
                "level_article": [
                    1608,
                    1617
                ],
                "level_type": [
                    1608,
                    1617
                ],
                "label_article": [
                    1618,
                    1612
                ],
                "label_type": [
                    1618,
                    1612
                ],
                "msg": [
                    8160,
                    9762,
                    9763,
                    8969,
                    8973,
                    1616,
                    8498,
                    1620,
                    8503,
                    8953,
                    8954,
                    8507,
                    8159
                ],
                "self._check_label_or_level_ambiguity": [
                    1660
                ],
                "_values": [
                    1661,
                    1663
                ],
                "self.xs": [
                    1661
                ],
                "get_level_values": [
                    1663
                ],
                "values.ndim": [
                    1668
                ],
                "multi_message": [
                    1684,
                    1678,
                    1671
                ],
                "label_axis_name": [
                    1680,
                    1683
                ],
                "np.ndarray": [
                    5376,
                    11139,
                    5453,
                    3502,
                    5458,
                    1622,
                    5462,
                    8534
                ],
                "keys": [
                    6464,
                    6498,
                    6499,
                    6500,
                    1733,
                    6469,
                    1735,
                    6447,
                    1719,
                    1721,
                    6462
                ],
                "com.maybe_make_list": [
                    1719
                ],
                "invalid_keys": [
                    1720,
                    1724,
                    1728
                ],
                "self._is_label_or_level_reference": [
                    1721
                ],
                "levels_to_drop": [
                    1733,
                    1744,
                    1745,
                    1752,
                    1755
                ],
                "labels_to_drop": [
                    1762,
                    1763,
                    1735,
                    1748,
                    1749
                ],
                "dropped": [
                    1763,
                    1765,
                    1740,
                    1745,
                    1749,
                    1753,
                    1755,
                    1759
                ],
                "dropped.reset_index": [
                    1745
                ],
                "dropped.drop": [
                    1763,
                    1749
                ],
                "dropped.columns": [
                    1753,
                    1755,
                    1759
                ],
                "dropped.columns.droplevel": [
                    1755
                ],
                "RangeIndex": [
                    1759
                ],
                "dropped.columns.size": [
                    1759
                ],
                "repr": [
                    6568,
                    1772,
                    6541
                ],
                "iter": [
                    1785
                ],
                "self._info_axis": [
                    5286,
                    1799,
                    3560,
                    5512,
                    5265,
                    1810,
                    5235,
                    1785,
                    1819,
                    1823
                ],
                "h": [
                    1810,
                    1811
                ],
                "Appender": [
                    6407,
                    10253,
                    1813,
                    8726,
                    11030,
                    8864,
                    9898,
                    8236,
                    11053,
                    11180,
                    8752,
                    7092,
                    7096,
                    10298,
                    10304,
                    2113,
                    7162,
                    10181,
                    11094,
                    5080,
                    10982,
                    6759,
                    10219,
                    10226,
                    9978,
                    7166
                ],
                "items.__doc__": [
                    1813
                ],
                "items": [
                    4649,
                    6446,
                    6447,
                    5523,
                    4660,
                    1813,
                    4662,
                    6461
                ],
                "__array_priority__": [
                    1879
                ],
                "lib.item_from_zerodim": [
                    1885
                ],
                "self._construct_axes_dict": [
                    1890,
                    8492,
                    8276,
                    11161,
                    8570
                ],
                "meta": [
                    1928,
                    1929,
                    1935,
                    1905,
                    1911
                ],
                "self._metadata": [
                    5216,
                    1928,
                    5258,
                    5230,
                    1905,
                    1909
                ],
                "self._typ": [
                    1908
                ],
                "self.attrs": [
                    5214,
                    1910
                ],
                "state": [
                    1921,
                    1930,
                    1931,
                    1934,
                    1939,
                    1940,
                    1941,
                    1916,
                    1917,
                    1918,
                    1919
                ],
                "typ": [
                    1920,
                    1919
                ],
                "state.get": [
                    1921,
                    1919
                ],
                "self._internal_names": [
                    1928
                ],
                "state.items": [
                    1934
                ],
                "self._unpickle_series_compat": [
                    1939,
                    1941
                ],
                "self._item_cache": [
                    3546,
                    3268,
                    3726,
                    1943
                ],
                "prepr": [
                    1952,
                    1951
                ],
                "join": [
                    8408,
                    8262,
                    8295,
                    8422,
                    10314,
                    8433,
                    8307,
                    8341,
                    8280,
                    8347,
                    1951
                ],
                "map": [
                    1951
                ],
                "pprint_thing": [
                    1951
                ],
                "config.get_option": [
                    2978,
                    2980,
                    2982,
                    1959,
                    2984,
                    3654,
                    2986,
                    1969,
                    1970
                ],
                "config": [
                    2978,
                    2980,
                    2982,
                    1959,
                    2984,
                    3654,
                    2986,
                    1969,
                    1970,
                    2322
                ],
                "self.to_latex": [
                    1960
                ],
                "self.head": [
                    1970
                ],
                "payload": [
                    1971,
                    1974
                ],
                "json.loads": [
                    1971
                ],
                "json": [
                    1971,
                    2325
                ],
                "data.to_json": [
                    1972
                ],
                "collections.OrderedDict": [
                    1972
                ],
                "collections": [
                    1972
                ],
                "df": [
                    8257,
                    8260,
                    3151,
                    8275,
                    3156,
                    2133,
                    8279,
                    2138
                ],
                "ABCDataFrame": [
                    8292,
                    3151,
                    6065,
                    8500,
                    2133,
                    5270,
                    4958,
                    6430
                ],
                "self.to_frame": [
                    2976,
                    2133,
                    3151
                ],
                "formatter": [
                    2148,
                    3177,
                    2988,
                    3180,
                    3155,
                    2137,
                    3003
                ],
                "ExcelFormatter": [
                    2137
                ],
                "na_rep": [
                    2992,
                    3163,
                    2139
                ],
                "columns": [
                    3884,
                    2990,
                    3888,
                    3889,
                    2140,
                    3165
                ],
                "header": [
                    2993,
                    2141,
                    3166
                ],
                "float_format": [
                    2996,
                    2142,
                    3164
                ],
                "index_label": [
                    2144,
                    2633,
                    3168
                ],
                "merge_cells": [
                    2145
                ],
                "inf_rep": [
                    2146
                ],
                "formatter.write": [
                    2148
                ],
                "excel_writer": [
                    2149
                ],
                "sheet_name": [
                    2150
                ],
                "startrow": [
                    2151
                ],
                "startcol": [
                    2152
                ],
                "freeze_panes": [
                    2153
                ],
                "engine": [
                    2154
                ],
                "FilePathOrBuffer": [
                    3017,
                    2159
                ],
                "Callable": [
                    3539,
                    2165
                ],
                "JSONSerializable": [
                    2165
                ],
                "date_format": [
                    3172,
                    2317,
                    2318,
                    2319,
                    2320,
                    2329
                ],
                "orient": [
                    2328,
                    2317
                ],
                "config.is_nonnegative_int": [
                    2322
                ],
                "indent": [
                    2337,
                    2322,
                    2323
                ],
                "json.to_json": [
                    2325
                ],
                "path_or_buf": [
                    2464,
                    3179,
                    3157,
                    2326
                ],
                "double_precision": [
                    2330
                ],
                "force_ascii": [
                    2331
                ],
                "date_unit": [
                    2332
                ],
                "default_handler": [
                    2333
                ],
                "lines": [
                    2334
                ],
                "compression": [
                    3161,
                    2698,
                    2335
                ],
                "Union": [
                    3024,
                    3027,
                    3022,
                    2350
                ],
                "pytables.to_hdf": [
                    2463
                ],
                "pytables": [
                    2463
                ],
                "mode": [
                    3169,
                    2467
                ],
                "complevel": [
                    2468
                ],
                "complib": [
                    2469
                ],
                "append": [
                    2470
                ],
                "format": [
                    4032,
                    10915,
                    10885,
                    2471,
                    4091,
                    10911
                ],
                "min_itemsize": [
                    2473
                ],
                "nan_rep": [
                    2474
                ],
                "dropna": [
                    2475
                ],
                "data_columns": [
                    2476
                ],
                "encoding": [
                    3160,
                    2478,
                    3007
                ],
                "sql.to_sql": [
                    2626
                ],
                "sql": [
                    2626
                ],
                "con": [
                    2629
                ],
                "schema": [
                    2630
                ],
                "if_exists": [
                    2631
                ],
                "chunksize": [
                    2634,
                    3170
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    2643
                ],
                "pickle": [
                    2643
                ],
                "to_pickle": [
                    2698
                ],
                "path": [
                    2698
                ],
                "protocol": [
                    2698
                ],
                "clipboards.to_clipboard": [
                    2758
                ],
                "clipboards": [
                    2758
                ],
                "excel": [
                    2758
                ],
                "sep": [
                    2758,
                    3159
                ],
                "xarray": [
                    2841,
                    2836,
                    2839
                ],
                "import_optional_dependency": [
                    2836
                ],
                "xarray.DataArray.from_series": [
                    2839
                ],
                "xarray.DataArray": [
                    2839
                ],
                "xarray.Dataset.from_dataframe": [
                    2841
                ],
                "xarray.Dataset": [
                    2841
                ],
                "longtable": [
                    2977,
                    2978,
                    3006
                ],
                "escape": [
                    3000,
                    2979,
                    2980
                ],
                "multicolumn": [
                    3008,
                    2981,
                    2982
                ],
                "multicolumn_format": [
                    2984,
                    3009,
                    2983
                ],
                "multirow": [
                    3010,
                    2985,
                    2986
                ],
                "DataFrameFormatter": [
                    2988
                ],
                "col_space": [
                    2991
                ],
                "formatters": [
                    2995
                ],
                "bold_rows": [
                    2997
                ],
                "sparsify": [
                    2998
                ],
                "index_names": [
                    2999
                ],
                "decimal": [
                    3001,
                    3175
                ],
                "formatter.to_latex": [
                    3003
                ],
                "buf": [
                    3004
                ],
                "column_format": [
                    3005
                ],
                "caption": [
                    3011
                ],
                "Substitution": [
                    11171,
                    11052,
                    11021,
                    11086,
                    9968,
                    2843,
                    10973
                ],
                "fmt.return_docstring": [
                    2843
                ],
                "fmt": [
                    2843
                ],
                "Sequence": [
                    3024,
                    3021
                ],
                "CSVFormatter": [
                    3155
                ],
                "line_terminator": [
                    3158
                ],
                "quoting": [
                    3162
                ],
                "quotechar": [
                    3171
                ],
                "doublequote": [
                    3173
                ],
                "escapechar": [
                    3174
                ],
                "formatter.save": [
                    3177
                ],
                "formatter.path_or_buf.getvalue": [
                    3180
                ],
                "formatter.path_or_buf": [
                    3180
                ],
                "_indexer": [
                    3483,
                    3194,
                    3195,
                    3484,
                    3485
                ],
                "functools.partial": [
                    4032,
                    3194,
                    4091
                ],
                "functools": [
                    4032,
                    3194,
                    4091
                ],
                "indexer.__doc__": [
                    3195
                ],
                "self._cacher": [
                    3209,
                    3250,
                    3204
                ],
                "weakref.ref": [
                    3595,
                    3204
                ],
                "weakref": [
                    3595,
                    3204
                ],
                "cacher": [
                    3255,
                    3204,
                    3243,
                    3244,
                    3245,
                    3223,
                    3224,
                    3225,
                    3226
                ],
                "hasattr": [
                    8001,
                    8513,
                    3208,
                    8488,
                    8777,
                    9928,
                    9164,
                    11157,
                    9334
                ],
                "self._data.set": [
                    3587,
                    3214
                ],
                "ref": [
                    3594,
                    3595,
                    3245,
                    3249,
                    3255,
                    3611,
                    3612
                ],
                "ref._maybe_cache_changed": [
                    3255
                ],
                "AssertionError": [
                    3256,
                    3930,
                    6419,
                    3941
                ],
                "verify_is_copy": [
                    3976,
                    3261
                ],
                "self._check_setitem_copy": [
                    3616,
                    3613,
                    3262
                ],
                "clear": [
                    3264
                ],
                "self._item_cache.clear": [
                    3268
                ],
                "is_copy": [
                    3360,
                    3372,
                    3352,
                    3582,
                    3583
                ],
                "warnings.warn": [
                    3353,
                    3694,
                    5271
                ],
                "warnings": [
                    3353,
                    3694,
                    5271
                ],
                "FutureWarning": [
                    3356
                ],
                "nv.validate_take": [
                    3362
                ],
                "nv": [
                    3362,
                    7301,
                    11182,
                    10993,
                    11057,
                    10995,
                    10997,
                    11096,
                    11035,
                    11037
                ],
                "new_data": [
                    6529,
                    8966,
                    8967,
                    8587,
                    8975,
                    8976,
                    8978,
                    8595,
                    6550,
                    8598,
                    6041,
                    6554,
                    5661,
                    5662,
                    8607,
                    6563,
                    3366,
                    3369,
                    8873,
                    6572,
                    6062,
                    6574,
                    8879,
                    6833,
                    6066,
                    6071,
                    6074,
                    6848,
                    6849,
                    6851,
                    4557,
                    6480,
                    4570,
                    4579,
                    4580,
                    4582,
                    6502,
                    6521,
                    6015
                ],
                "self._data.take": [
                    3366
                ],
                "indices": [
                    3367
                ],
                "result._get_axis": [
                    3373
                ],
                "result._set_is_copy": [
                    3536,
                    3374,
                    3583
                ],
                "loc": [
                    3480,
                    3484,
                    3498,
                    3500,
                    3502,
                    3503,
                    3504,
                    3507,
                    3509,
                    3510,
                    3512,
                    3513,
                    3526,
                    3531,
                    6992,
                    6993,
                    6994,
                    6997,
                    6998,
                    6999
                ],
                "new_ax": [
                    3480,
                    3488
                ],
                "labels.get_loc_level": [
                    3480
                ],
                "drop_level": [
                    3480,
                    3498
                ],
                "result._get_axis_name": [
                    3488
                ],
                "new_index": [
                    4521,
                    3498,
                    3532,
                    4527,
                    3510
                ],
                "self.index.get_loc_level": [
                    3498
                ],
                "self.index.get_loc": [
                    3500
                ],
                "loc.dtype": [
                    3503
                ],
                "inds": [
                    3504,
                    3505
                ],
                "loc.nonzero": [
                    3504
                ],
                "self.take": [
                    5025,
                    7650,
                    3564,
                    7021,
                    7568,
                    3505,
                    3507
                ],
                "self._data.fast_xs": [
                    3513
                ],
                "com.maybe_box_datetimelike": [
                    3521
                ],
                "self._constructor_sliced": [
                    3523
                ],
                "self.columns": [
                    3714,
                    5666,
                    7011,
                    3525,
                    6982,
                    7015,
                    8345,
                    9669,
                    6967,
                    8429,
                    8431,
                    8432,
                    8276,
                    3703,
                    5656,
                    3705,
                    8346
                ],
                "new_values.dtype": [
                    3527
                ],
                "result.index": [
                    3532
                ],
                "result._is_view": [
                    3536,
                    3582
                ],
                "_xs": [
                    3539
                ],
                "xs": [
                    3539
                ],
                "cache": [
                    3546,
                    3547,
                    3551
                ],
                "res": [
                    3552,
                    6494,
                    3555,
                    3556,
                    6851,
                    6853,
                    6854,
                    6483,
                    6488,
                    3547,
                    3548,
                    3550,
                    3551
                ],
                "cache.get": [
                    3547
                ],
                "self._data.get": [
                    3549
                ],
                "self._box_item_values": [
                    3550
                ],
                "res._set_as_cached": [
                    3552
                ],
                "res._is_copy": [
                    3555
                ],
                "self._is_copy": [
                    3555,
                    3651,
                    3592,
                    3595,
                    3660,
                    3597,
                    3661,
                    3663,
                    3667,
                    3668,
                    3615
                ],
                "ax.is_unique": [
                    3561
                ],
                "lower": [
                    7329,
                    7171,
                    3562,
                    3564,
                    3565,
                    7310,
                    7183,
                    7184,
                    7185,
                    7311,
                    7316,
                    7317,
                    7318,
                    7321,
                    7324,
                    7327
                ],
                "self._get_item_cache": [
                    3562
                ],
                "self._info_axis_number": [
                    3564
                ],
                "self._data.get_slice": [
                    3577
                ],
                "slobj": [
                    3577
                ],
                "self._is_view": [
                    3610
                ],
                "self._is_cached": [
                    3610
                ],
                "self._get_cacher": [
                    3611
                ],
                "ref._is_mixed_type": [
                    3612
                ],
                "force": [
                    3651
                ],
                "r": [
                    4662,
                    3661,
                    3662
                ],
                "gc.get_referents": [
                    3662
                ],
                "gc": [
                    3662
                ],
                "r.shape": [
                    3662
                ],
                "t": [
                    3681,
                    3692,
                    3694,
                    3668,
                    3670,
                    3671
                ],
                "com.SettingWithCopyError": [
                    3692
                ],
                "com.SettingWithCopyWarning": [
                    3694
                ],
                "stacklevel": [
                    3694
                ],
                "deleted": [
                    3700,
                    3717,
                    3718
                ],
                "maybe_shortcut": [
                    3705,
                    3709,
                    3702
                ],
                "self.columns._engine": [
                    3705
                ],
                "col": [
                    3714,
                    3715,
                    3716,
                    5643,
                    5646,
                    5649
                ],
                "self._data.delete": [
                    3722
                ],
                "default": [
                    3750
                ],
                "self._data.is_view": [
                    3755
                ],
                "other._construct_axes_dict": [
                    8258,
                    3860
                ],
                "tolerance": [
                    4522,
                    3865,
                    4474,
                    4507
                ],
                "self.reindex": [
                    4662,
                    4260,
                    3868,
                    3934
                ],
                "_": [
                    9768,
                    3889,
                    8486,
                    8518
                ],
                "obj._drop_axis": [
                    3899
                ],
                "axis.is_unique": [
                    3927
                ],
                "new_axis": [
                    4259,
                    4260,
                    3931,
                    3933,
                    3934
                ],
                "axis.drop": [
                    3931,
                    3933
                ],
                "ensure_object": [
                    3938
                ],
                "com.index_labels_to_array": [
                    3938
                ],
                "isin": [
                    3942
                ],
                "axis.get_level_values": [
                    3942
                ],
                "indexer.all": [
                    3945
                ],
                "axis.isin": [
                    3948
                ],
                "labels_missing": [
                    3950,
                    3951
                ],
                "axis.get_indexer_for": [
                    3950
                ],
                "slicer": [
                    9122,
                    9123,
                    9124,
                    3954,
                    3955,
                    3957
                ],
                "self.loc": [
                    9124,
                    4677,
                    8006,
                    3957,
                    4669
                ],
                "self._reset_cache": [
                    3973
                ],
                "self._maybe_update_cacher": [
                    3976
                ],
                "self.rename": [
                    4035,
                    4094
                ],
                "suffix": [
                    4091
                ],
                "sort_index": [
                    4257,
                    4259,
                    4255
                ],
                "labels.argsort": [
                    4255
                ],
                "ascending": [
                    4256,
                    8167
                ],
                "labels.take": [
                    4259
                ],
                "missing.clean_reindex_fill_method": [
                    4470
                ],
                "fill_value": [
                    8356,
                    8452,
                    8454,
                    8455,
                    8266,
                    8299,
                    8362,
                    8311,
                    8874,
                    8495,
                    4528,
                    8496,
                    4507,
                    7509,
                    4503,
                    4475,
                    8284,
                    4574
                ],
                "identical": [
                    4493
                ],
                "self._needs_reindex_multi": [
                    4502
                ],
                "self._reindex_multi": [
                    4503
                ],
                "self._reindex_axes": [
                    4506
                ],
                "ax.reindex": [
                    4521
                ],
                "obj._reindex_with_indexers": [
                    4526
                ],
                "self._is_mixed_type": [
                    5352,
                    4541,
                    6005
                ],
                "sorted": [
                    9771,
                    4558
                ],
                "reindexers.keys": [
                    4558
                ],
                "reindexers": [
                    8353,
                    8356,
                    4558,
                    4559,
                    8351
                ],
                "ensure_index": [
                    4565
                ],
                "ensure_int64": [
                    4567
                ],
                "new_data.reindex_indexer": [
                    4570
                ],
                "allow_dups": [
                    4575
                ],
                "new_data.copy": [
                    4580
                ],
                "nkw": [
                    4649,
                    4650
                ],
                "like": [
                    4649,
                    4666,
                    4663
                ],
                "regex": [
                    6530,
                    6534,
                    6535,
                    6536,
                    6541,
                    6544,
                    6418,
                    6426,
                    6559,
                    6564,
                    6437,
                    4649,
                    6443,
                    6444,
                    4670,
                    4675,
                    6472,
                    6492,
                    6507,
                    6525
                ],
                "ensure_str": [
                    4673,
                    4666
                ],
                "x": [
                    4673,
                    9771,
                    9932,
                    9777,
                    4666
                ],
                "labels.map": [
                    4668,
                    4676
                ],
                "matcher.search": [
                    4673
                ],
                "matcher": [
                    4673,
                    4675
                ],
                "re.compile": [
                    4675
                ],
                "re": [
                    4675
                ],
                "n": [
                    5024,
                    5019,
                    5004,
                    5005,
                    4752,
                    5011,
                    5013,
                    5014,
                    5015,
                    4825,
                    4827
                ],
                "self._stat_axis_number": [
                    11041,
                    7559,
                    4941,
                    9101,
                    7636,
                    11061,
                    11001,
                    11098,
                    9983
                ],
                "axis_length": [
                    4944,
                    5024,
                    4980,
                    5014
                ],
                "rs": [
                    5024,
                    9921,
                    9920,
                    9922,
                    4947,
                    9916
                ],
                "com.random_state": [
                    4947
                ],
                "random_state": [
                    4947
                ],
                "weights": [
                    4992,
                    4961,
                    4985,
                    4995,
                    4996,
                    4997,
                    5024,
                    5001,
                    4978,
                    4980,
                    4950,
                    4953,
                    4954,
                    4988,
                    4957
                ],
                "weights.reindex": [
                    4954
                ],
                "np.inf": [
                    4985,
                    10077,
                    10038
                ],
                "weights.fillna": [
                    4992
                ],
                "weights.sum": [
                    4995,
                    4996,
                    4997
                ],
                "weights.values": [
                    5001
                ],
                "frac": [
                    5004,
                    5006,
                    5011,
                    5013,
                    5014,
                    5015
                ],
                "replace": [
                    5024,
                    6488,
                    5006
                ],
                "round": [
                    5014
                ],
                "locs": [
                    5024,
                    5025,
                    7017,
                    7020,
                    7021
                ],
                "rs.choice": [
                    5024
                ],
                "com.pipe": [
                    5082
                ],
                "func": [
                    5082,
                    10255
                ],
                "dedent": [
                    5084
                ],
                "NDFrame": [
                    5212,
                    8485
                ],
                "other.attrs": [
                    5213,
                    5214
                ],
                "self._internal_names_set": [
                    5256,
                    5229
                ],
                "self._accessors": [
                    5231
                ],
                "object.__getattribute__": [
                    5233,
                    5249,
                    5237
                ],
                "self._info_axis._can_hold_identifiers_and_holds_name": [
                    5235
                ],
                "existing": [
                    5262,
                    5263
                ],
                "additions": [
                    5289,
                    5284
                ],
                "c": [
                    8258,
                    5285,
                    5286,
                    5287,
                    6484,
                    6485,
                    8276,
                    6488,
                    6490
                ],
                "self._info_axis.unique": [
                    5286
                ],
                "c.isidentifier": [
                    5287
                ],
                "union": [
                    5289
                ],
                "_dir_additions": [
                    5289
                ],
                "super": [
                    5289
                ],
                "blocks_before": [
                    5298,
                    5300
                ],
                "self._data.blocks": [
                    5298,
                    5300
                ],
                "self._data.consolidate": [
                    5330,
                    5308
                ],
                "self._protect_consolidate": [
                    5347,
                    5331,
                    5337,
                    5310,
                    5342
                ],
                "cons_data": [
                    5331,
                    5332
                ],
                "self._data.is_mixed_type": [
                    5336
                ],
                "self._data.is_numeric_mixed_type": [
                    5341
                ],
                "self._data.is_datelike_mixed_type": [
                    5346
                ],
                "self._is_numeric_mixed_type": [
                    5353
                ],
                "is_float": [
                    5356
                ],
                "np.isnan": [
                    5356
                ],
                "self._data.get_numeric_data": [
                    5367
                ],
                "self._data.get_bool_data": [
                    5370
                ],
                "self._data.as_array": [
                    5450
                ],
                "self._AXIS_REVERSED": [
                    8593,
                    5450
                ],
                "Series": [
                    5512,
                    6982,
                    7015
                ],
                "self._data.get_dtypes": [
                    5512
                ],
                "np.object_": [
                    5512
                ],
                "self._data.to_dict": [
                    5523
                ],
                "new_type": [
                    5633,
                    5634
                ],
                "self.astype": [
                    5634
                ],
                "col_name": [
                    5636,
                    5637,
                    5643,
                    5644,
                    5646
                ],
                "dtype.keys": [
                    5636
                ],
                "results": [
                    5665,
                    5642,
                    5645,
                    5649,
                    5654
                ],
                "results.append": [
                    5649,
                    5645
                ],
                "col.astype": [
                    5646
                ],
                "col.copy": [
                    5649
                ],
                "is_extension_array_dtype": [
                    5651
                ],
                "astype": [
                    5655
                ],
                "self._data.astype": [
                    5661
                ],
                "pd.concat": [
                    5665,
                    9777
                ],
                "result.columns": [
                    5666
                ],
                "self._data.copy": [
                    8975,
                    5774,
                    8966
                ],
                "deep": [
                    5778,
                    5774
                ],
                "datetime": [
                    5828,
                    5821
                ],
                "numeric": [
                    5829,
                    5822
                ],
                "timedelta": [
                    9322,
                    5830,
                    5823
                ],
                "coerce": [
                    5824,
                    5831
                ],
                "self._data.convert": [
                    5827,
                    5879
                ],
                "validate_fillna_kwargs": [
                    5993
                ],
                "T": [
                    6008,
                    11148,
                    11103,
                    6848
                ],
                "self.T.fillna": [
                    6008
                ],
                "self.T": [
                    6008,
                    6782,
                    11103
                ],
                "result._data.downcast": [
                    6011
                ],
                "self._data.interpolate": [
                    6015
                ],
                "downcast": [
                    6021,
                    6058,
                    6092,
                    6063,
                    6842,
                    6042,
                    6111
                ],
                "create_series_with_explicit_dtype": [
                    6029
                ],
                "self._data.fillna": [
                    6041,
                    6062
                ],
                "value.items": [
                    6552,
                    6054
                ],
                "obj.fillna": [
                    6058
                ],
                "self.where": [
                    7216,
                    6066,
                    8780
                ],
                "self.notna": [
                    6066
                ],
                "self.fillna": [
                    9913,
                    6091,
                    6110
                ],
                "is_bool": [
                    6418
                ],
                "self.apply": [
                    6431
                ],
                "_single_replace": [
                    6432,
                    6434
                ],
                "to_replace.items": [
                    6498,
                    6484,
                    6446
                ],
                "are_mappings": [
                    6449,
                    6451,
                    6452
                ],
                "to_rep_dict": [
                    6464,
                    6458,
                    6467
                ],
                "value_dict": [
                    6465,
                    6467,
                    6459
                ],
                "v.items": [
                    6462
                ],
                "self.replace": [
                    6543,
                    6471
                ],
                "src": [
                    6498,
                    6500,
                    6503,
                    6484,
                    6489
                ],
                "keys_len": [
                    6499,
                    6501
                ],
                "convert": [
                    6508,
                    6501
                ],
                "new_data.replace": [
                    6554,
                    6502
                ],
                "self._data.replace_list": [
                    6521
                ],
                "self._data.replace": [
                    6529,
                    6563
                ],
                "is_re_compilable": [
                    6534
                ],
                "_maybe_transposed_self": [
                    6785,
                    6787,
                    6792,
                    6797,
                    6798,
                    6832,
                    6837,
                    6809,
                    6811,
                    6780,
                    6782
                ],
                "_maybe_transposed_self._get_axis_number": [
                    6785
                ],
                "_maybe_transposed_self.ndim": [
                    6787
                ],
                "alt_ax": [
                    6809,
                    6811,
                    6788,
                    6790
                ],
                "_maybe_transposed_self.index": [
                    6792
                ],
                "get": [
                    6797
                ],
                "_maybe_transposed_self._data.get_dtype_counts": [
                    6797
                ],
                "_maybe_transposed_self._data": [
                    6832,
                    6797
                ],
                "_maybe_transposed_self.T": [
                    6798
                ],
                "np.arange": [
                    6809
                ],
                "_maybe_transposed_self._get_axis": [
                    6809,
                    6811
                ],
                "methods": [
                    6818,
                    6812
                ],
                "is_numeric_or_datetime": [
                    6818,
                    6813
                ],
                "is_datetime64_any_dtype": [
                    9714,
                    6815
                ],
                "isna": [
                    7171,
                    7172,
                    7206,
                    7177,
                    6826,
                    11114,
                    11149,
                    7310,
                    7312,
                    6997,
                    7094,
                    7098,
                    7004
                ],
                "data.interpolate": [
                    6833
                ],
                "limit_direction": [
                    6839
                ],
                "limit_area": [
                    6840
                ],
                "T._data": [
                    6848
                ],
                "res.T": [
                    6853
                ],
                "where": [
                    6978,
                    7011,
                    6982,
                    7015,
                    7017,
                    6955,
                    6956,
                    7023,
                    6992,
                    7007,
                    7001,
                    7002,
                    6971,
                    6975
                ],
                "Timestamp": [
                    9728,
                    6956,
                    9717,
                    9727
                ],
                "self.index.is_monotonic": [
                    6958
                ],
                "is_series": [
                    6979,
                    8458,
                    8396,
                    6991,
                    8336,
                    6961,
                    6962,
                    8399,
                    8345,
                    8350,
                    7004,
                    7006
                ],
                "subset": [
                    7206,
                    7181,
                    7182,
                    7184,
                    7185,
                    7216,
                    6963,
                    6966,
                    6967,
                    6968,
                    6969,
                    7004
                ],
                "is_list": [
                    7008,
                    7025,
                    7002,
                    6971,
                    6972
                ],
                "start": [
                    6976,
                    6978,
                    6973,
                    8062,
                    8063
                ],
                "PeriodIndex": [
                    8963,
                    6974
                ],
                "ordinal": [
                    6975
                ],
                "Period": [
                    6975
                ],
                "self.index.freq": [
                    6975
                ],
                "start.ordinal": [
                    6976
                ],
                "np.float64": [
                    6982
                ],
                "np.nan": [
                    7011,
                    8739,
                    10052,
                    7015,
                    6983,
                    8519,
                    9738,
                    7024,
                    10065,
                    7188,
                    8470,
                    10039,
                    8765,
                    10078,
                    7007
                ],
                "self.index.searchsorted": [
                    6992,
                    8003,
                    8062
                ],
                "self._values": [
                    6996,
                    10293
                ],
                "nulls": [
                    7017,
                    7004,
                    7005
                ],
                "self.isna": [
                    7004
                ],
                "nulls.all": [
                    7005
                ],
                "DataFrame": [
                    7011
                ],
                "self.index.asof_locs": [
                    7017
                ],
                "nulls.values": [
                    7017
                ],
                "d.copy": [
                    7022
                ],
                "data.index": [
                    7023
                ],
                "data.loc": [
                    7024
                ],
                "data.iloc": [
                    7025
                ],
                "notna": [
                    7168,
                    7164,
                    8452
                ],
                "np.any": [
                    7171,
                    7172,
                    7310,
                    7312,
                    7187
                ],
                "upper": [
                    7331,
                    7172,
                    7335,
                    7180,
                    7181,
                    7182,
                    7312,
                    7313,
                    7316,
                    7317,
                    7318,
                    7322,
                    7324
                ],
                "np.errstate": [
                    7179
                ],
                "self.to_numpy": [
                    7184,
                    7181
                ],
                "result.where": [
                    7185,
                    7182
                ],
                "threshold": [
                    7201,
                    7203,
                    7204,
                    7206,
                    7211,
                    7213,
                    7215,
                    7216
                ],
                "is_number": [
                    7201,
                    7321,
                    7322
                ],
                "method.__name__": [
                    7202
                ],
                "self._clip_with_scalar": [
                    7324,
                    7203,
                    7204
                ],
                "_align_method_FRAME": [
                    7215
                ],
                "nv.validate_clip_with_axis": [
                    7301
                ],
                "min": [
                    7318
                ],
                "max": [
                    7318,
                    11119
                ],
                "result._clip_with_one_bound": [
                    7328,
                    7334
                ],
                "self.ge": [
                    7329
                ],
                "self.le": [
                    7335
                ],
                "asfreq": [
                    7503
                ],
                "freq": [
                    8960,
                    9732,
                    8965,
                    8872,
                    8970,
                    8877,
                    8976,
                    7505,
                    8946,
                    8947,
                    9712,
                    8949,
                    8950,
                    8952,
                    9916,
                    9917,
                    9726,
                    8959
                ],
                "how": [
                    7507,
                    10293
                ],
                "normalize": [
                    7508
                ],
                "index.indexer_at_time": [
                    7564
                ],
                "time": [
                    7564
                ],
                "asof": [
                    7564
                ],
                "index.indexer_between_time": [
                    7641
                ],
                "start_time": [
                    7642
                ],
                "end_time": [
                    7643
                ],
                "include_start": [
                    7644
                ],
                "include_end": [
                    7645
                ],
                "resample": [
                    7932
                ],
                "rule": [
                    7934
                ],
                "closed": [
                    7936,
                    10203,
                    10214
                ],
                "kind": [
                    7938
                ],
                "loffset": [
                    7939
                ],
                "convention": [
                    7940
                ],
                "base": [
                    7941
                ],
                "on": [
                    10201,
                    10212,
                    7942
                ],
                "DatetimeIndex": [
                    9341,
                    9171,
                    8053,
                    7991
                ],
                "offset": [
                    8001,
                    8061,
                    8059,
                    7997,
                    7998
                ],
                "to_offset": [
                    8960,
                    8059,
                    8964,
                    7997
                ],
                "end_date": [
                    8002,
                    8003,
                    7998
                ],
                "end": [
                    8006,
                    8003,
                    8004,
                    7998
                ],
                "offset.is_anchored": [
                    8001
                ],
                "start_date": [
                    8061,
                    8062
                ],
                "na_option": [
                    8168,
                    8158
                ],
                "ranks": [
                    8163,
                    8172,
                    8171
                ],
                "algos.rank": [
                    8163
                ],
                "algos": [
                    8163
                ],
                "data.values": [
                    8164
                ],
                "pct": [
                    8169
                ],
                "data._construct_axes_dict": [
                    8171
                ],
                "ranks.__finalize__": [
                    8172
                ],
                "numeric_only": [
                    11011,
                    11045,
                    8176,
                    8180,
                    8182,
                    11067
                ],
                "ranker": [
                    8178,
                    8187
                ],
                "self._get_numeric_data": [
                    9987,
                    8183
                ],
                "missing.clean_fill_method": [
                    8250
                ],
                "broadcast_axis": [
                    8252
                ],
                "other.ndim": [
                    8252,
                    8516
                ],
                "cons": [
                    8256,
                    8257,
                    8274,
                    8275
                ],
                "self._constructor_expanddim": [
                    8256
                ],
                "other.columns": [
                    8345,
                    8258,
                    8347
                ],
                "df._align_frame": [
                    8260
                ],
                "fill_axis": [
                    8454,
                    8269,
                    8302,
                    8368,
                    8371,
                    8314,
                    8287
                ],
                "other._constructor_expanddim": [
                    8274
                ],
                "self._align_frame": [
                    8293,
                    8278
                ],
                "self._align_series": [
                    8305
                ],
                "join_index": [
                    8449,
                    8332,
                    8461,
                    8462,
                    8463,
                    8340,
                    8351,
                    8353,
                    8360,
                    8377,
                    8378,
                    8379,
                    8405,
                    8407,
                    8411,
                    8412,
                    8418,
                    8421,
                    8426,
                    8429,
                    8432,
                    8437
                ],
                "join_columns": [
                    8360,
                    8353,
                    8346,
                    8332
                ],
                "ilidx": [
                    8353,
                    8340,
                    8333,
                    8351
                ],
                "iridx": [
                    8360,
                    8340,
                    8333
                ],
                "clidx": [
                    8353,
                    8346,
                    8334
                ],
                "cridx": [
                    8360,
                    8346,
                    8334
                ],
                "self.index.equals": [
                    8339,
                    8404,
                    8420
                ],
                "other.index": [
                    8420,
                    8422,
                    8431,
                    8433,
                    8339,
                    8404,
                    8341,
                    8408
                ],
                "self.index.join": [
                    8340,
                    8421,
                    8407
                ],
                "self.columns.equals": [
                    8345,
                    8431
                ],
                "self.columns.join": [
                    8432,
                    8346
                ],
                "left": [
                    8355,
                    8454,
                    8459,
                    8460,
                    8462,
                    8367,
                    8368,
                    8465,
                    8375,
                    8376,
                    8378,
                    8411,
                    8444,
                    8381
                ],
                "self._reindex_with_indexers": [
                    8355
                ],
                "right": [
                    8449,
                    8359,
                    8455,
                    8460,
                    8463,
                    8465,
                    8370,
                    8371,
                    8376,
                    8379,
                    8412,
                    8381,
                    8447
                ],
                "other._reindex_with_indexers": [
                    8359
                ],
                "self._ensure_type": [
                    9912,
                    8370,
                    8367
                ],
                "left.fillna": [
                    8368,
                    8454
                ],
                "right.fillna": [
                    8371,
                    8455
                ],
                "is_datetime64tz_dtype": [
                    8459,
                    8375
                ],
                "left.index": [
                    8459,
                    8460,
                    8462,
                    8375,
                    8376,
                    8378
                ],
                "left.index.tz": [
                    8376,
                    8460
                ],
                "right.index.tz": [
                    8376,
                    8460
                ],
                "right.index": [
                    8376,
                    8379,
                    8460,
                    8463
                ],
                "left.__finalize__": [
                    8465,
                    8381
                ],
                "right.__finalize__": [
                    8465,
                    8381
                ],
                "lidx": [
                    8419,
                    8421,
                    8425,
                    8426,
                    8430,
                    8432,
                    8436,
                    8405,
                    8437,
                    8407,
                    8411
                ],
                "ridx": [
                    8419,
                    8421,
                    8430,
                    8432,
                    8405,
                    8407,
                    8412,
                    8446
                ],
                "self._reindex_indexer": [
                    8411
                ],
                "other._reindex_indexer": [
                    8412
                ],
                "fdata": [
                    8416,
                    8426,
                    8437,
                    8441,
                    8442,
                    8444
                ],
                "fdata.reindex_indexer": [
                    8426,
                    8437
                ],
                "fdata.copy": [
                    8442
                ],
                "other.reindex": [
                    8449
                ],
                "fill_na": [
                    8452,
                    8453
                ],
                "cond": [
                    8588,
                    8600,
                    8484,
                    8485,
                    8486,
                    8488,
                    8489,
                    8490,
                    8492,
                    8749,
                    8496,
                    8500,
                    8502,
                    8503,
                    8504,
                    8505,
                    8509,
                    8774,
                    8777,
                    8778,
                    8781,
                    8540,
                    8549
                ],
                "com.apply_if_callable": [
                    8747,
                    8484,
                    8774
                ],
                "cond.align": [
                    8486
                ],
                "np.asanyarray": [
                    8489
                ],
                "cond.shape": [
                    8490
                ],
                "cond.fillna": [
                    8496
                ],
                "msg.format": [
                    8507,
                    8503
                ],
                "cond.dtype": [
                    8503
                ],
                "cond.empty": [
                    8504
                ],
                "dt": [
                    8505,
                    8506,
                    8507
                ],
                "cond.dtypes": [
                    8505
                ],
                "try_quick": [
                    8512,
                    8552
                ],
                "self.align": [
                    8518
                ],
                "InvalidIndexError": [
                    8526
                ],
                "other.shape": [
                    8536
                ],
                "icond": [
                    8555,
                    8540,
                    8549
                ],
                "cond.values": [
                    8540
                ],
                "np.array": [
                    8545,
                    8778,
                    9684
                ],
                "new_other": [
                    8553,
                    8554,
                    8555,
                    8556
                ],
                "new_other.copy": [
                    8554
                ],
                "align": [
                    8576,
                    8601,
                    8578,
                    8590
                ],
                "block_axis": [
                    8962,
                    8580,
                    8871,
                    8967,
                    8874,
                    8592,
                    8976,
                    8604
                ],
                "self._check_inplace_setting": [
                    8586
                ],
                "self._data.putmask": [
                    8587
                ],
                "self._data.where": [
                    8598
                ],
                "try_cast": [
                    8786,
                    8603,
                    8749
                ],
                "self._where": [
                    8748
                ],
                "periods": [
                    9916,
                    8868,
                    8902,
                    8967,
                    8905,
                    8874,
                    8906,
                    8907,
                    8877,
                    8909,
                    8910,
                    8976,
                    8956
                ],
                "self._data.shift": [
                    8873
                ],
                "self.tshift": [
                    8877
                ],
                "vslicer": [
                    8912,
                    8906,
                    8909
                ],
                "islicer": [
                    8913,
                    8907,
                    8910
                ],
                "new_obj": [
                    8912,
                    8914,
                    8916
                ],
                "self._slice": [
                    8912
                ],
                "shifted_axis": [
                    8913,
                    8914
                ],
                "new_obj.set_axis": [
                    8914
                ],
                "new_obj.__finalize__": [
                    8916
                ],
                "orig_freq": [
                    8968,
                    8971,
                    8964,
                    8965
                ],
                "index.freq": [
                    8964
                ],
                "new_data.axes": [
                    8976,
                    8967
                ],
                "index.shift": [
                    8976,
                    8967
                ],
                "freq.rule_code": [
                    8970
                ],
                "orig_freq.rule_code": [
                    8971
                ],
                "ax.is_monotonic_increasing": [
                    9107
                ],
                "ax.is_monotonic_decreasing": [
                    9107
                ],
                "ax.is_all_dates": [
                    9112
                ],
                "before": [
                    9120,
                    9123,
                    9127,
                    9115,
                    9118,
                    9119
                ],
                "to_datetime": [
                    9115,
                    9116
                ],
                "after": [
                    9120,
                    9123,
                    9127,
                    9116,
                    9118,
                    9119
                ],
                "ax.truncate": [
                    9127
                ],
                "result.copy": [
                    9130
                ],
                "ax_name": [
                    9168,
                    9338,
                    9336,
                    9166
                ],
                "tz": [
                    9728,
                    9185,
                    9350,
                    9355,
                    9727,
                    9171,
                    9715,
                    9173,
                    9718,
                    9720,
                    9722,
                    9180,
                    9341,
                    9343
                ],
                "ax.tz_convert": [
                    9173
                ],
                "ax._get_level_number": [
                    9179,
                    9349
                ],
                "new_level": [
                    9180,
                    9181,
                    9350,
                    9351
                ],
                "_tz_convert": [
                    9185,
                    9180
                ],
                "ax.levels": [
                    9180,
                    9350
                ],
                "ax.set_levels": [
                    9181,
                    9351
                ],
                "ax.name": [
                    9353,
                    9183
                ],
                "result.set_axis": [
                    9188,
                    9358
                ],
                "nonexistent_options": [
                    9320,
                    9321
                ],
                "nonexistent": [
                    9350,
                    9321,
                    9322,
                    9355,
                    9343
                ],
                "ax.tz_localize": [
                    9343
                ],
                "ambiguous": [
                    9355,
                    9350,
                    9343
                ],
                "_tz_localize": [
                    9355,
                    9350
                ],
                "np.abs": [
                    9992,
                    9430
                ],
                "self.columns.size": [
                    9669
                ],
                "percentiles": [
                    9700,
                    9672,
                    9674,
                    9677,
                    9680,
                    9681,
                    9682,
                    9684,
                    9687,
                    9688,
                    9690,
                    9692
                ],
                "validate_percentile": [
                    9677
                ],
                "percentiles.append": [
                    9681
                ],
                "np.asarray": [
                    9682,
                    11130
                ],
                "unique_pcts": [
                    9688,
                    9690,
                    9687
                ],
                "np.unique": [
                    9687
                ],
                "formatted_percentiles": [
                    9696,
                    9692
                ],
                "format_percentiles": [
                    9692
                ],
                "stat_index": [
                    9703,
                    9695
                ],
                "series.count": [
                    9699
                ],
                "series": [
                    9699,
                    9700,
                    9701,
                    9703
                ],
                "series.mean": [
                    9699
                ],
                "series.std": [
                    9699
                ],
                "series.min": [
                    9699
                ],
                "tolist": [
                    9700
                ],
                "series.quantile": [
                    9700
                ],
                "series.max": [
                    9701
                ],
                "series.name": [
                    9703
                ],
                "objcounts": [
                    9712,
                    9707,
                    9708
                ],
                "data.value_counts": [
                    9707
                ],
                "count_unique": [
                    9708,
                    9709
                ],
                "data.count": [
                    9709
                ],
                "top": [
                    9732,
                    9712,
                    9717,
                    9718,
                    9720,
                    9722,
                    9725
                ],
                "objcounts.index": [
                    9712
                ],
                "objcounts.iloc": [
                    9712
                ],
                "data.dt.tz": [
                    9715
                ],
                "data.dt": [
                    9715
                ],
                "asint": [
                    9728,
                    9716,
                    9727
                ],
                "values.view": [
                    9716
                ],
                "data.dropna": [
                    9716
                ],
                "top.tzinfo": [
                    9718
                ],
                "top.tz_convert": [
                    9720
                ],
                "top.tz_localize": [
                    9722
                ],
                "asint.min": [
                    9727
                ],
                "asint.max": [
                    9728
                ],
                "data.name": [
                    9741
                ],
                "describe_categorical_1d": [
                    9745,
                    9751
                ],
                "describe_numeric_1d": [
                    9747,
                    9749
                ],
                "describe_1d": [
                    9768,
                    9754
                ],
                "include": [
                    9760,
                    9755,
                    9766
                ],
                "exclude": [
                    9761,
                    9755,
                    9766
                ],
                "self.select_dtypes": [
                    9757,
                    9766
                ],
                "np.number": [
                    9757
                ],
                "data.columns": [
                    9778,
                    9758
                ],
                "ldesc": [
                    9768,
                    9777,
                    9771
                ],
                "data.items": [
                    9768
                ],
                "ldesc_indexes": [
                    9771,
                    9772
                ],
                "x.index": [
                    9771
                ],
                "idxnames": [
                    9772,
                    9773
                ],
                "names.append": [
                    9775
                ],
                "x.reindex": [
                    9777
                ],
                "d.columns": [
                    9778
                ],
                "data.columns.copy": [
                    9778
                ],
                "fill_method": [
                    9913,
                    9909
                ],
                "data.div": [
                    9916
                ],
                "data.shift": [
                    9916
                ],
                "rs.loc": [
                    9920
                ],
                "rs.index.duplicated": [
                    9920
                ],
                "rs.index": [
                    9920
                ],
                "rs.reindex_like": [
                    9921
                ],
                "grouped": [
                    9928,
                    9929,
                    9933,
                    9927
                ],
                "self.groupby": [
                    9927
                ],
                "skipna": [
                    9985,
                    11010,
                    9992,
                    11145,
                    11038,
                    11039,
                    11043,
                    9980,
                    11045,
                    11058,
                    11059,
                    11188,
                    11064,
                    11193,
                    11067,
                    9928,
                    9932,
                    11096,
                    11103,
                    10998,
                    10999,
                    11126,
                    11004,
                    9981
                ],
                "applyf": [
                    9932,
                    9933
                ],
                "grouped.aggregate": [
                    9933
                ],
                "axis_descr": [
                    10117,
                    10001,
                    10130,
                    11025,
                    10012,
                    10141,
                    10022,
                    10150,
                    11175,
                    11052,
                    10034,
                    10163,
                    10047,
                    10313,
                    10060,
                    10318,
                    11090,
                    9941,
                    10073,
                    9948,
                    10977,
                    10087,
                    9960,
                    10099,
                    9973,
                    10108
                ],
                "name2": [
                    10116,
                    10000,
                    10129,
                    11024,
                    10011,
                    10140,
                    10021,
                    10149,
                    11174,
                    11052,
                    10033,
                    10162,
                    10046,
                    10059,
                    10317,
                    10318,
                    11089,
                    9941,
                    10072,
                    9947,
                    10976,
                    10086,
                    9959,
                    10098,
                    9972,
                    10107
                ],
                "_doc_parms": [
                    9941
                ],
                "cls.any": [
                    9943
                ],
                "_make_logical_function": [
                    9955,
                    9943
                ],
                "_any_desc": [
                    10772,
                    9949
                ],
                "nanops.nanany": [
                    9950
                ],
                "nanops": [
                    9962,
                    10026,
                    10090,
                    10122,
                    10154,
                    10110,
                    10132,
                    10005,
                    10101,
                    10167,
                    10143,
                    9950,
                    10015
                ],
                "_any_see_also": [
                    10762,
                    9951
                ],
                "_any_examples": [
                    9952,
                    10779
                ],
                "cls.all": [
                    9955
                ],
                "_all_desc": [
                    10408,
                    9961
                ],
                "nanops.nanall": [
                    9962
                ],
                "_all_see_also": [
                    9963,
                    10461
                ],
                "_all_examples": [
                    9964,
                    10415
                ],
                "self._agg_by_level": [
                    9985,
                    11043,
                    11188,
                    11063,
                    11003
                ],
                "demeaned": [
                    9992,
                    9989,
                    9991
                ],
                "data.mean": [
                    9989,
                    9991
                ],
                "data.sub": [
                    9991
                ],
                "mean": [
                    9992
                ],
                "_num_doc": [
                    10321,
                    9978,
                    10982,
                    11030
                ],
                "cls.mad": [
                    9994
                ],
                "mad": [
                    9994
                ],
                "cls.sem": [
                    9996
                ],
                "_make_stat_function_ddof": [
                    10017,
                    9996,
                    10007
                ],
                "nanops.nansem": [
                    10005
                ],
                "cls.var": [
                    10007
                ],
                "nanops.nanvar": [
                    10015
                ],
                "cls.std": [
                    10017
                ],
                "nanops.nanstd": [
                    10026
                ],
                "cls.cummin": [
                    10029
                ],
                "_make_cum_function": [
                    10042,
                    10068,
                    10029,
                    10055
                ],
                "np.minimum.accumulate": [
                    11116,
                    10036,
                    11128
                ],
                "np.minimum": [
                    11116,
                    10036,
                    11128
                ],
                "_cummin_examples": [
                    10040,
                    10502
                ],
                "cls.cumsum": [
                    10042
                ],
                "np.cumsum": [
                    10049
                ],
                "_cumsum_examples": [
                    10053,
                    10567
                ],
                "cls.cumprod": [
                    10055
                ],
                "np.cumprod": [
                    10062
                ],
                "_cumprod_examples": [
                    10632,
                    10066
                ],
                "cls.cummax": [
                    10068
                ],
                "np.maximum.accumulate": [
                    10075
                ],
                "np.maximum": [
                    10075
                ],
                "_cummax_examples": [
                    10697,
                    10079
                ],
                "cls.sum": [
                    10082
                ],
                "_make_min_count_stat_function": [
                    10082,
                    10125
                ],
                "nanops.nansum": [
                    10090
                ],
                "_stat_func_see_also": [
                    10168,
                    10091,
                    10155,
                    10919
                ],
                "_sum_examples": [
                    10889,
                    10092,
                    10885
                ],
                "cls.mean": [
                    10094
                ],
                "_make_stat_function": [
                    10112,
                    10145,
                    10094,
                    10158,
                    10103,
                    10136
                ],
                "nanops.nanmean": [
                    10101
                ],
                "cls.skew": [
                    10103
                ],
                "nanops.nanskew": [
                    10110
                ],
                "cls.kurt": [
                    10112,
                    10124
                ],
                "nanops.nankurt": [
                    10122
                ],
                "cls.kurtosis": [
                    10124
                ],
                "cls.prod": [
                    10125,
                    10135
                ],
                "nanops.nanprod": [
                    10132
                ],
                "_prod_examples": [
                    10133,
                    10934
                ],
                "cls.product": [
                    10135
                ],
                "cls.median": [
                    10136
                ],
                "nanops.nanmedian": [
                    10143
                ],
                "cls.max": [
                    10145
                ],
                "nanops.nanmax": [
                    10154
                ],
                "_max_examples": [
                    10156,
                    10911
                ],
                "cls.min": [
                    10158
                ],
                "nanops.nanmin": [
                    10167
                ],
                "_min_examples": [
                    10169,
                    10915
                ],
                "win_type": [
                    10200,
                    10194,
                    10211
                ],
                "Window": [
                    10195
                ],
                "window": [
                    10208,
                    10197
                ],
                "min_periods": [
                    10222,
                    10209,
                    10245,
                    10198
                ],
                "center": [
                    10210,
                    10222,
                    10199
                ],
                "Rolling": [
                    10181,
                    10206
                ],
                "Rolling.__doc__": [
                    10181
                ],
                "cls.rolling": [
                    10217
                ],
                "rolling": [
                    10217
                ],
                "Expanding": [
                    10219,
                    10222
                ],
                "Expanding.__doc__": [
                    10219
                ],
                "cls.expanding": [
                    10224
                ],
                "expanding": [
                    10224
                ],
                "EWM": [
                    10226,
                    10239
                ],
                "span": [
                    10242
                ],
                "halflife": [
                    10243
                ],
                "alpha": [
                    10244
                ],
                "adjust": [
                    10246
                ],
                "ignore_na": [
                    10247
                ],
                "EWM.__doc__": [
                    10226
                ],
                "cls.ewm": [
                    10251
                ],
                "ewm": [
                    10251
                ],
                "self.agg": [
                    10255
                ],
                "idxpos": [
                    10296,
                    10293,
                    10294
                ],
                "find_valid_index": [
                    10293
                ],
                "self._find_valid_index": [
                    10308,
                    10302
                ],
                "cls._constructor_sliced.__name__": [
                    10316
                ],
                "cls._constructor_sliced": [
                    10316
                ],
                "cls.__name__": [
                    10317
                ],
                "_num_ddof_doc": [
                    10347,
                    11053
                ],
                "_bool_doc": [
                    10370,
                    11180
                ],
                "_cnum_doc": [
                    10468,
                    11094
                ],
                "_min_count_stub": [
                    10978,
                    10957
                ],
                "nv.validate_sum": [
                    10993
                ],
                "nv.validate_prod": [
                    10995
                ],
                "nv.validate_stat_func": [
                    11037,
                    10997
                ],
                "min_count": [
                    11004,
                    11012
                ],
                "self._reduce": [
                    11066,
                    11044,
                    11189,
                    11006
                ],
                "desc": [
                    11172,
                    11052,
                    11022,
                    11087,
                    10974
                ],
                "name1": [
                    11173,
                    11052,
                    11023,
                    11088,
                    10975
                ],
                "see_also": [
                    11027,
                    10979,
                    11176
                ],
                "examples": [
                    11177,
                    10980,
                    11028,
                    11092
                ],
                "set_function_name": [
                    11015,
                    11048,
                    11070,
                    11165,
                    11198
                ],
                "stat_func": [
                    11048,
                    11070,
                    11015
                ],
                "nv.validate_median": [
                    11035
                ],
                "nv.validate_stat_ddof_func": [
                    11057
                ],
                "ddof": [
                    11064,
                    11067
                ],
                "nv.validate_cum_func_with_skipna": [
                    11096
                ],
                "cum_func": [
                    11165,
                    11103
                ],
                "blk_values.dtype.kind": [
                    11107
                ],
                "blk_values.dtype": [
                    11146,
                    11107,
                    11111
                ],
                "blk_values": [
                    11107,
                    11139,
                    11111,
                    11143,
                    11114,
                    11146,
                    11148,
                    11118,
                    11122,
                    11154
                ],
                "accum_func": [
                    11116,
                    11151,
                    11154,
                    11125,
                    11128
                ],
                "y": [
                    11137,
                    11118,
                    11119,
                    11122,
                    11125
                ],
                "blk_values.view": [
                    11118
                ],
                "np.iinfo": [
                    11119
                ],
                "np.int64": [
                    11119
                ],
                "changed": [
                    11120,
                    11123,
                    11135
                ],
                "y.view": [
                    11125
                ],
                "np.putmask": [
                    11152,
                    11150,
                    11127
                ],
                "iNaT": [
                    11137,
                    11133,
                    11127
                ],
                "nz": [
                    11130,
                    11131,
                    11133
                ],
                "nonzero": [
                    11130
                ],
                "result.view": [
                    11140
                ],
                "_from_sequence": [
                    11143
                ],
                "issubclass": [
                    11145
                ],
                "blk_values.dtype.type": [
                    11146
                ],
                "np.integer": [
                    11146
                ],
                "vals": [
                    11148,
                    11149,
                    11150,
                    11151
                ],
                "blk_values.copy": [
                    11148
                ],
                "mask_a": [
                    11150
                ],
                "mask_b": [
                    11152
                ],
                "blk_values.T": [
                    11154
                ],
                "result.T": [
                    11157
                ],
                "self._data.apply": [
                    11159
                ],
                "na_accum_func": [
                    11159
                ],
                "accum_func_name": [
                    11091
                ],
                "nv.validate_logical_func": [
                    11182
                ],
                "bool_only": [
                    11184,
                    11194
                ],
                "empty_value": [
                    11178
                ],
                "logical_func": [
                    11198
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs": [
                    10885,
                    5126,
                    6407,
                    10253,
                    8727,
                    10264,
                    10911,
                    8864,
                    8609,
                    5027,
                    10915,
                    9898,
                    7340,
                    8236,
                    6576,
                    8753,
                    7092,
                    9781,
                    7096,
                    1979,
                    7100,
                    10299,
                    2113,
                    10305,
                    2003,
                    8790,
                    5080,
                    5084,
                    10849,
                    98,
                    6114,
                    6759,
                    7030,
                    7162,
                    8189,
                    7166
                ],
                "Dict": [
                    98,
                    291,
                    290,
                    453,
                    231,
                    423,
                    456,
                    298,
                    462,
                    2350,
                    176,
                    1904
                ],
                "_shared_doc_kwargs": [
                    8864,
                    99,
                    6759,
                    6407,
                    9898,
                    8236,
                    10253,
                    8755,
                    7092,
                    7096,
                    5080,
                    8729,
                    7162,
                    7166
                ],
                "self.ndim": [
                    3520,
                    8516,
                    9669,
                    8575,
                    6027,
                    9753,
                    6065,
                    3954,
                    115,
                    5651,
                    2838,
                    3703,
                    5627,
                    8538,
                    3483,
                    8252,
                    2975
                ],
                "self": [
                    10240,
                    10255,
                    10256,
                    10293,
                    10296,
                    8252,
                    8253,
                    10302,
                    8256,
                    8258,
                    10308,
                    8276,
                    2133,
                    8278,
                    8291,
                    4197,
                    8293,
                    8305,
                    115,
                    118,
                    121,
                    122,
                    131,
                    134,
                    8336,
                    8339,
                    8340,
                    4246,
                    4247,
                    4248,
                    8345,
                    8346,
                    8355,
                    4260,
                    8367,
                    8370,
                    8381,
                    202,
                    203,
                    204,
                    8396,
                    209,
                    8404,
                    8407,
                    216,
                    8411,
                    8416,
                    8418,
                    8420,
                    8421,
                    235,
                    236,
                    237,
                    8429,
                    8431,
                    8432,
                    241,
                    8441,
                    8444,
                    253,
                    266,
                    273,
                    8465,
                    6421,
                    2327,
                    6430,
                    6431,
                    6434,
                    8484,
                    8486,
                    8490,
                    8492,
                    10238,
                    8516,
                    8518,
                    6471,
                    8524,
                    333,
                    6477,
                    6478,
                    6480,
                    6483,
                    340,
                    6485,
                    8536,
                    8538,
                    6498,
                    359,
                    8553,
                    369,
                    4469,
                    6521,
                    8570,
                    8575,
                    6529,
                    8578,
                    8580,
                    4488,
                    8586,
                    8587,
                    4493,
                    6543,
                    8593,
                    4498,
                    4499,
                    8595,
                    4502,
                    4503,
                    6550,
                    6553,
                    4506,
                    411,
                    4508,
                    412,
                    8598,
                    8607,
                    4514,
                    4515,
                    2466,
                    6563,
                    4520,
                    425,
                    6572,
                    4525,
                    6574,
                    4538,
                    4541,
                    4545,
                    457,
                    458,
                    4557,
                    4560,
                    472,
                    473,
                    476,
                    481,
                    4579,
                    485,
                    4582,
                    492,
                    501,
                    524,
                    548,
                    553,
                    8747,
                    8748,
                    558,
                    4657,
                    4658,
                    4661,
                    4662,
                    4669,
                    2627,
                    4677,
                    8774,
                    8780,
                    6776,
                    6779,
                    6780,
                    6782,
                    642,
                    644,
                    649,
                    650,
                    2698,
                    4752,
                    660,
                    661,
                    665,
                    666,
                    670,
                    671,
                    675,
                    8869,
                    8871,
                    8873,
                    8877,
                    8879,
                    6848,
                    6849,
                    6851,
                    2758,
                    8903,
                    8912,
                    8913,
                    8916,
                    4826,
                    4827,
                    732,
                    734,
                    8945,
                    11001,
                    11003,
                    8957,
                    11006,
                    8962,
                    8966,
                    778,
                    779,
                    8975,
                    8978,
                    2838,
                    2839,
                    2841,
                    11041,
                    11043,
                    11044,
                    6958,
                    6961,
                    11061,
                    6967,
                    11063,
                    11066,
                    6973,
                    6974,
                    6975,
                    6982,
                    4941,
                    4943,
                    4944,
                    6992,
                    6996,
                    4954,
                    11098,
                    7004,
                    11100,
                    4958,
                    7007,
                    11103,
                    4961,
                    7011,
                    7015,
                    7017,
                    7021,
                    890,
                    891,
                    894,
                    9101,
                    9102,
                    911,
                    912,
                    9103,
                    11159,
                    11161,
                    11163,
                    2975,
                    2976,
                    5025,
                    9122,
                    9124,
                    9127,
                    2989,
                    11188,
                    11189,
                    7094,
                    7098,
                    9160,
                    9161,
                    9166,
                    5082,
                    9187,
                    9189,
                    7164,
                    7168,
                    7176,
                    1033,
                    7177,
                    7181,
                    7184,
                    1041,
                    7191,
                    1052,
                    1053,
                    7198,
                    1056,
                    1057,
                    7203,
                    7204,
                    1061,
                    7206,
                    1063,
                    1067,
                    7212,
                    7213,
                    7215,
                    7216,
                    1080,
                    1082,
                    3151,
                    5214,
                    5216,
                    5217,
                    5218,
                    5229,
                    5230,
                    5231,
                    5233,
                    9330,
                    5235,
                    5236,
                    5237,
                    9331,
                    9336,
                    5249,
                    5250,
                    3204,
                    7303,
                    3208,
                    3209,
                    5256,
                    5257,
                    5258,
                    5259,
                    3214,
                    5262,
                    5264,
                    5265,
                    5266,
                    3219,
                    5268,
                    9357,
                    5270,
                    3223,
                    9359,
                    7324,
                    5278,
                    7326,
                    7329,
                    7333,
                    5286,
                    7335,
                    3243,
                    3250,
                    5298,
                    5300,
                    5301,
                    3255,
                    1209,
                    5308,
                    3262,
                    5310,
                    1216,
                    3265,
                    3268,
                    1232,
                    5328,
                    5330,
                    5331,
                    5332,
                    1238,
                    9430,
                    1240,
                    1241,
                    5336,
                    5337,
                    5341,
                    5342,
                    1249,
                    5346,
                    5347,
                    5352,
                    5353,
                    5367,
                    5370,
                    1307,
                    1308,
                    1311,
                    3364,
                    3366,
                    3367,
                    1321,
                    3369,
                    3373,
                    3374,
                    5449,
                    5450,
                    5455,
                    7504,
                    5460,
                    5480,
                    1407,
                    1409,
                    1415,
                    5512,
                    7559,
                    7560,
                    7562,
                    7568,
                    1426,
                    5522,
                    5523,
                    1429,
                    3477,
                    3478,
                    3483,
                    3487,
                    1440,
                    1443,
                    3492,
                    1445,
                    3494,
                    1447,
                    1448,
                    3496,
                    3498,
                    1452,
                    3500,
                    3505,
                    3507,
                    3510,
                    3513,
                    1471,
                    3520,
                    3523,
                    1477,
                    3525,
                    3526,
                    1480,
                    9669,
                    1483,
                    3531,
                    1486,
                    3536,
                    7636,
                    7637,
                    3542,
                    7639,
                    3546,
                    3549,
                    3550,
                    3552,
                    7650,
                    3555,
                    3560,
                    3562,
                    3564,
                    1517,
                    3568,
                    1522,
                    1523,
                    3576,
                    3577,
                    3578,
                    5627,
                    5628,
                    3583,
                    5633,
                    5634,
                    3587,
                    3588,
                    5637,
                    3592,
                    1546,
                    1547,
                    3595,
                    3597,
                    5643,
                    1552,
                    5651,
                    5655,
                    5656,
                    9753,
                    3610,
                    3611,
                    9754,
                    3613,
                    5661,
                    3615,
                    3616,
                    5662,
                    5666,
                    9757,
                    9759,
                    9764,
                    9766,
                    1575,
                    1597,
                    1598,
                    1603,
                    1604,
                    3651,
                    3660,
                    3661,
                    3662,
                    3663,
                    3667,
                    3668,
                    3703,
                    1656,
                    1657,
                    3705,
                    1659,
                    1660,
                    1661,
                    1662,
                    1663,
                    3714,
                    3716,
                    1670,
                    3722,
                    3726,
                    5774,
                    5775,
                    5778,
                    5787,
                    3748,
                    3755,
                    1716,
                    9908,
                    9910,
                    9912,
                    1721,
                    9913,
                    5826,
                    5827,
                    1733,
                    1735,
                    9927,
                    5834,
                    9930,
                    1740,
                    9931,
                    1772,
                    5878,
                    5879,
                    1785,
                    5882,
                    7931,
                    7933,
                    9983,
                    9985,
                    9987,
                    1799,
                    1810,
                    1811,
                    3861,
                    1815,
                    1819,
                    3868,
                    1823,
                    3886,
                    3889,
                    3895,
                    7991,
                    7994,
                    7995,
                    3902,
                    7998,
                    8002,
                    8003,
                    8004,
                    8006,
                    1872,
                    3923,
                    3924,
                    3925,
                    1882,
                    3934,
                    1890,
                    1891,
                    5995,
                    1905,
                    3954,
                    1907,
                    1908,
                    1909,
                    1910,
                    3955,
                    3957,
                    6001,
                    6005,
                    6008,
                    8053,
                    1917,
                    8056,
                    6015,
                    8057,
                    8061,
                    1922,
                    8062,
                    8063,
                    3973,
                    3974,
                    3975,
                    1928,
                    3976,
                    6024,
                    6025,
                    1932,
                    6027,
                    1936,
                    1939,
                    1941,
                    1943,
                    6041,
                    1951,
                    1952,
                    6053,
                    1960,
                    6062,
                    6065,
                    1970,
                    6066,
                    6071,
                    6074,
                    4034,
                    4035,
                    6091,
                    10192,
                    10196,
                    8156,
                    6110,
                    10207,
                    8171,
                    8172,
                    10221,
                    10222,
                    8178,
                    8183,
                    8185,
                    4093,
                    4094
                ],
                "to_replace": [
                    6530,
                    6532,
                    6418,
                    6426,
                    6427,
                    6555,
                    6429,
                    6432,
                    6434,
                    6436,
                    6564,
                    6568,
                    6443,
                    6446,
                    6467,
                    6469,
                    6472,
                    6481,
                    6484,
                    6498,
                    6513,
                    6515,
                    117,
                    6518,
                    6522,
                    125
                ],
                "method": [
                    6016,
                    8452,
                    8454,
                    8455,
                    6792,
                    3862,
                    6807,
                    4502,
                    4507,
                    6432,
                    6434,
                    6818,
                    7202,
                    6821,
                    7206,
                    4522,
                    8366,
                    8368,
                    6834,
                    8371,
                    8250,
                    4539,
                    8267,
                    2636,
                    9931,
                    9932,
                    7506,
                    8312,
                    8285,
                    8166,
                    5993,
                    8300,
                    117,
                    4470,
                    6008,
                    123
                ],
                "orig_dtype": [
                    128,
                    11140,
                    11143,
                    11111,
                    121
                ],
                "self.dtype": [
                    121,
                    131
                ],
                "result": [
                    3584,
                    9732,
                    7176,
                    9738,
                    9741,
                    7182,
                    10255,
                    10256,
                    7185,
                    10259,
                    7188,
                    7191,
                    7193,
                    1053,
                    5665,
                    5666,
                    5667,
                    1074,
                    1077,
                    1080,
                    1082,
                    122,
                    125,
                    126,
                    131,
                    134,
                    137,
                    9357,
                    9358,
                    9359,
                    7326,
                    7328,
                    7333,
                    7334,
                    7338,
                    5299,
                    5302,
                    1238,
                    734,
                    735,
                    1251,
                    1253,
                    778,
                    781,
                    785,
                    3369,
                    3373,
                    3374,
                    3376,
                    1885,
                    1886,
                    3934,
                    1889,
                    1891,
                    3957,
                    11125,
                    3959,
                    6008,
                    11127,
                    6011,
                    6013,
                    11133,
                    11140,
                    3975,
                    11143,
                    11151,
                    912,
                    913,
                    914,
                    915,
                    11152,
                    11154,
                    11157,
                    11159,
                    11163,
                    3487,
                    3488,
                    3489,
                    9124,
                    6053,
                    6055,
                    9127,
                    6057,
                    9130,
                    6059,
                    9132,
                    3523,
                    3531,
                    3532,
                    3536,
                    3537,
                    9187,
                    9188,
                    9189,
                    9709,
                    9711,
                    3577,
                    3578,
                    9724,
                    3582,
                    3583
                ],
                "inplace": [
                    128,
                    641,
                    6530,
                    6019,
                    7299,
                    133,
                    8582,
                    1035,
                    6544,
                    6417,
                    4245,
                    7190,
                    6042,
                    4252,
                    1053,
                    1310,
                    1311,
                    6432,
                    1313,
                    6434,
                    6558,
                    6564,
                    6053,
                    7203,
                    7204,
                    7329,
                    3881,
                    7332,
                    6059,
                    6571,
                    7335,
                    8749,
                    6063,
                    7216,
                    8481,
                    8495,
                    6070,
                    1079,
                    6841,
                    3901,
                    1213,
                    6846,
                    8509,
                    8773,
                    1224,
                    6472,
                    6092,
                    5326,
                    5327,
                    1232,
                    8783,
                    6483,
                    1238,
                    6494,
                    6111,
                    1252,
                    5992,
                    6506,
                    7324,
                    6006,
                    6774,
                    122,
                    6524
                ],
                "self.copy": [
                    644,
                    6053,
                    8869,
                    1740,
                    912,
                    4498,
                    5778,
                    6483,
                    1238,
                    665,
                    122,
                    5787,
                    1053,
                    1311
                ],
                "fill_f": [
                    123,
                    126
                ],
                "missing.get_fill_func": [
                    123
                ],
                "missing": [
                    7020,
                    7024,
                    4470,
                    8250,
                    123,
                    125
                ],
                "mask": [
                    11137,
                    7177,
                    11114,
                    11149,
                    11150,
                    11119,
                    11152,
                    7187,
                    7188,
                    11127,
                    11130,
                    125,
                    126
                ],
                "missing.mask_missing": [
                    125
                ],
                "result.values": [
                    125,
                    126
                ],
                "values": [
                    128,
                    131,
                    1668,
                    1415,
                    1416,
                    1417,
                    1419,
                    1420,
                    1421,
                    1423,
                    1425,
                    1429,
                    1430,
                    1431,
                    1688,
                    1433,
                    1434,
                    1435,
                    1437,
                    1439,
                    6447,
                    6449,
                    4668,
                    4669,
                    6462,
                    6465,
                    4676,
                    4677,
                    6469,
                    6996,
                    6997,
                    6999,
                    3549,
                    3550,
                    224,
                    9716,
                    1661,
                    126,
                    1663
                ],
                "limit": [
                    6018,
                    8454,
                    8455,
                    6544,
                    3864,
                    6042,
                    4507,
                    6432,
                    6434,
                    4522,
                    6058,
                    6063,
                    8368,
                    8371,
                    6838,
                    9913,
                    6472,
                    6092,
                    8268,
                    8286,
                    6111,
                    8313,
                    8301,
                    6008,
                    4473,
                    126
                ],
                "values.dtype": [
                    128,
                    224,
                    1425,
                    1439
                ],
                "__finalize__": [
                    7168,
                    131,
                    5775,
                    5522,
                    8978,
                    4506,
                    11163,
                    5662,
                    8607,
                    675,
                    3369,
                    6574,
                    8879,
                    7094,
                    6074,
                    7098,
                    5826,
                    6851,
                    5332,
                    1891,
                    4582,
                    5878,
                    5367,
                    5370,
                    7164
                ],
                "pd.Series": [
                    4978,
                    131,
                    9741,
                    9703
                ],
                "pd": [
                    5665,
                    131,
                    9703,
                    9741,
                    9777,
                    4978
                ],
                "self.index": [
                    131,
                    8339,
                    8340,
                    3496,
                    3498,
                    3500,
                    7213,
                    6958,
                    3510,
                    7991,
                    10296,
                    7994,
                    6973,
                    7998,
                    6974,
                    6975,
                    8002,
                    8003,
                    3526,
                    6992,
                    8404,
                    8407,
                    8418,
                    8420,
                    8421,
                    7017,
                    8053,
                    8056,
                    8061,
                    8062
                ],
                "self._update_inplace": [
                    6849,
                    134,
                    6572,
                    8595,
                    7191,
                    6071,
                    1080,
                    3902
                ],
                "result._data": [
                    134,
                    913,
                    914,
                    1074,
                    1080,
                    6011
                ],
                "bool_t": [
                    7170,
                    5892,
                    4101,
                    3590,
                    8069,
                    4104,
                    8071,
                    5514,
                    8072,
                    140,
                    2701,
                    8325,
                    3599,
                    3217,
                    5777,
                    1555,
                    8981,
                    7574,
                    5527,
                    7575,
                    3229,
                    1821,
                    5791,
                    5792,
                    5793,
                    1826,
                    5794,
                    5795,
                    3877,
                    5669,
                    2347,
                    2349,
                    9135,
                    2352,
                    3761,
                    3378,
                    2487,
                    4535,
                    7223,
                    6079,
                    5312,
                    8389,
                    4551,
                    4552,
                    3274,
                    3022,
                    3023,
                    3024,
                    6098,
                    3033,
                    7513,
                    5349,
                    4203,
                    4204,
                    9196,
                    4207,
                    4208,
                    7407,
                    2163,
                    1526,
                    2166,
                    2168,
                    3961
                ],
                "PandasObject": [
                    143
                ],
                "SelectionMixin": [
                    143
                ],
                "indexing.IndexingMixin": [
                    143
                ],
                "indexing": [
                    143
                ],
                "_internal_names": [
                    170,
                    155
                ],
                "List": [
                    289,
                    298,
                    9770,
                    173,
                    3022,
                    495,
                    2353,
                    185,
                    155
                ],
                "_internal_names_set": [
                    170
                ],
                "Set": [
                    170,
                    171
                ],
                "_accessors": [
                    171
                ],
                "_deprecations": [
                    172
                ],
                "FrozenSet": [
                    172
                ],
                "_metadata": [
                    173
                ],
                "_is_copy": [
                    174
                ],
                "_data": [
                    175
                ],
                "BlockManager": [
                    184,
                    1916,
                    375,
                    175
                ],
                "_attrs": [
                    176
                ],
                "Optional": [
                    8069,
                    5895,
                    2701,
                    2345,
                    2346,
                    9770,
                    2348,
                    2350,
                    176,
                    2352,
                    2353,
                    3760,
                    185,
                    187,
                    188,
                    6082,
                    3017,
                    3274,
                    3020,
                    3021,
                    3024,
                    2642,
                    3026,
                    3027,
                    3028,
                    3030,
                    3031,
                    3032,
                    6101,
                    3034,
                    3035,
                    3036,
                    231,
                    7656,
                    7657,
                    4587,
                    4588,
                    7659,
                    7406,
                    2159,
                    240,
                    2160,
                    2161,
                    2165,
                    2167,
                    2169,
                    2170
                ],
                "Hashable": [
                    231,
                    9770,
                    3021,
                    176,
                    240,
                    3024,
                    188
                ],
                "Any": [
                    231,
                    176,
                    240,
                    1904,
                    2165,
                    188
                ],
                "_typ": [
                    177
                ],
                "Index": [
                    5263,
                    495,
                    7001,
                    185,
                    7002
                ],
                "Dtype": [
                    187
                ],
                "Mapping": [
                    240,
                    3027,
                    188
                ],
                "fastpath": [
                    192
                ],
                "dtype": [
                    256,
                    5633,
                    5636,
                    9739,
                    5644,
                    9741,
                    5646,
                    5651,
                    5655,
                    5661,
                    193,
                    194,
                    2635,
                    222,
                    224,
                    225,
                    250,
                    9710,
                    246,
                    247,
                    5626,
                    5628
                ],
                "data": [
                    9987,
                    9989,
                    9991,
                    9741,
                    5774,
                    5775,
                    9744,
                    9745,
                    9746,
                    9747,
                    9748,
                    9749,
                    9751,
                    9757,
                    9758,
                    9759,
                    9764,
                    9766,
                    9768,
                    6832,
                    6833,
                    1970,
                    9778,
                    1972,
                    9910,
                    9912,
                    9916,
                    9921,
                    194,
                    196,
                    200,
                    203,
                    8183,
                    8164,
                    8171,
                    9707,
                    9709,
                    7022,
                    7023,
                    7024,
                    7025,
                    9714,
                    9715,
                    9716,
                    375,
                    376,
                    8185,
                    8187,
                    382
                ],
                "data.astype": [
                    194
                ],
                "copy": [
                    5634,
                    3591,
                    1034,
                    9357,
                    5646,
                    4497,
                    5649,
                    5523,
                    4503,
                    3863,
                    664,
                    5655,
                    4507,
                    1053,
                    5661,
                    672,
                    8356,
                    8361,
                    9129,
                    4529,
                    1075,
                    1212,
                    5825,
                    195,
                    5832,
                    8265,
                    1238,
                    8283,
                    220,
                    8411,
                    8412,
                    4576,
                    4579,
                    9187,
                    8298,
                    8310,
                    4472,
                    8441
                ],
                "data.copy": [
                    196
                ],
                "axes": [
                    1033,
                    4494,
                    4502,
                    4503,
                    1049,
                    4507,
                    1057,
                    4516,
                    3887,
                    3889,
                    307,
                    308,
                    310,
                    311,
                    312,
                    313,
                    1209,
                    3897,
                    4538,
                    317,
                    198,
                    199,
                    333,
                    340,
                    213,
                    1241,
                    369,
                    370,
                    4469,
                    379,
                    380
                ],
                "i": [
                    914,
                    660,
                    5655,
                    663,
                    5656,
                    668,
                    671,
                    429,
                    436,
                    437,
                    311,
                    321,
                    325,
                    326,
                    199,
                    200,
                    328,
                    329,
                    10314,
                    8524,
                    6500,
                    6501,
                    893,
                    894
                ],
                "ax": [
                    9344,
                    6785,
                    6788,
                    9348,
                    6790,
                    9349,
                    9350,
                    9351,
                    9353,
                    1547,
                    9355,
                    4493,
                    4494,
                    4495,
                    1552,
                    9103,
                    9358,
                    9107,
                    9112,
                    9343,
                    9126,
                    9127,
                    4520,
                    4521,
                    6835,
                    1598,
                    1604,
                    199,
                    200,
                    9161,
                    8524,
                    9164,
                    9165,
                    9171,
                    340,
                    9173,
                    9174,
                    9178,
                    9179,
                    9180,
                    9181,
                    9183,
                    9185,
                    9188,
                    3560,
                    3561,
                    3562,
                    9331,
                    9334,
                    9335,
                    1657,
                    6779,
                    9341,
                    6783
                ],
                "data.reindex_axis": [
                    200
                ],
                "object.__setattr__": [
                    5217,
                    1922,
                    5250,
                    5257,
                    202,
                    203,
                    204,
                    1932,
                    5259,
                    1936,
                    209,
                    5264,
                    5268,
                    5278
                ],
                "attrs": [
                    1921,
                    1922,
                    205,
                    206,
                    239,
                    208,
                    209
                ],
                "a": [
                    4515,
                    4516,
                    4520,
                    1321,
                    4525,
                    311,
                    321,
                    322,
                    325,
                    326,
                    328,
                    329,
                    10314,
                    333,
                    1872,
                    340,
                    213,
                    216,
                    359,
                    362,
                    364,
                    492,
                    369,
                    501,
                    893,
                    894
                ],
                "axe": [
                    216,
                    213,
                    214
                ],
                "axes.items": [
                    3897,
                    213,
                    4494
                ],
                "mgr": [
                    224,
                    225,
                    226,
                    215,
                    221
                ],
                "mgr.reindex_axis": [
                    215
                ],
                "self._get_block_manager_axis": [
                    8962,
                    8580,
                    1061,
                    3367,
                    3576,
                    8871,
                    4560,
                    216
                ],
                "mgr.copy": [
                    221
                ],
                "mgr.blocks": [
                    224
                ],
                "mgr.astype": [
                    225
                ],
                "self._attrs": [
                    241,
                    235,
                    236,
                    237
                ],
                "value": [
                    5250,
                    3587,
                    6530,
                    5257,
                    5259,
                    6028,
                    6029,
                    3214,
                    6030,
                    5264,
                    6032,
                    5266,
                    6544,
                    5268,
                    6549,
                    5270,
                    6038,
                    6423,
                    6552,
                    6042,
                    6045,
                    5278,
                    6562,
                    6564,
                    6054,
                    6061,
                    6063,
                    6065,
                    6066,
                    6068,
                    6467,
                    6469,
                    3654,
                    3655,
                    6472,
                    6482,
                    6485,
                    6490,
                    6497,
                    6504,
                    5993,
                    3691,
                    5356,
                    3693,
                    241,
                    6514,
                    6003,
                    6515,
                    6518,
                    6523
                ],
                "attrs.setter": [
                    239
                ],
                "pandas_dtype": [
                    247
                ],
                "dtype.kind": [
                    250
                ],
                "FrameOrSeries": [
                    5669,
                    551,
                    556,
                    7219,
                    7226,
                    4681,
                    5199,
                    5200,
                    652,
                    5777,
                    4754,
                    9363,
                    5780,
                    5790,
                    8866,
                    8867,
                    5796,
                    677,
                    4262,
                    9900,
                    3758,
                    8881,
                    9906,
                    3764,
                    3274,
                    3275,
                    5836,
                    8919,
                    8920,
                    9433,
                    9434,
                    4830,
                    737,
                    4837,
                    7403,
                    7409,
                    5888,
                    262,
                    5895,
                    7946,
                    8981,
                    8982,
                    3907,
                    3908,
                    8008,
                    7513,
                    7514,
                    373,
                    898,
                    8066,
                    8073,
                    3978,
                    7571,
                    5527,
                    5528,
                    7577,
                    4511,
                    4512,
                    9135,
                    9136,
                    7093,
                    7097,
                    6077,
                    6082,
                    4548,
                    4037,
                    4553,
                    1482,
                    1485,
                    6096,
                    6101,
                    9192,
                    4585,
                    4590,
                    9199,
                    3570,
                    7163,
                    7167
                ],
                "AbstractMethodError": [
                    4545,
                    4197,
                    266,
                    3568,
                    273,
                    3542
                ],
                "Type": [
                    373,
                    262
                ],
                "_AXIS_ALIASES": [
                    284
                ],
                "_AXIS_IALIASES": [
                    285
                ],
                "_stat_axis_number": [
                    286
                ],
                "_stat_axis_name": [
                    287
                ],
                "_ix": [
                    288
                ],
                "_AXIS_ORDERS": [
                    289
                ],
                "_AXIS_NUMBERS": [
                    290
                ],
                "_AXIS_NAMES": [
                    291
                ],
                "_AXIS_REVERSED": [
                    292
                ],
                "_info_axis_number": [
                    293
                ],
                "_info_axis_name": [
                    294
                ],
                "_AXIS_LEN": [
                    295
                ],
                "info_axis": [
                    307,
                    316,
                    317
                ],
                "axes_are_reversed": [
                    314,
                    308,
                    324
                ],
                "cls._AXIS_ORDERS": [
                    10314,
                    310
                ],
                "cls": [
                    10251,
                    10314,
                    10316,
                    10317,
                    3193,
                    3195,
                    9941,
                    9943,
                    9944,
                    9955,
                    9956,
                    11015,
                    9994,
                    9996,
                    9997,
                    10007,
                    10008,
                    10017,
                    10018,
                    11048,
                    10029,
                    10030,
                    310,
                    311,
                    312,
                    313,
                    314,
                    10042,
                    316,
                    317,
                    10043,
                    11070,
                    321,
                    322,
                    325,
                    10055,
                    328,
                    10056,
                    10068,
                    10069,
                    10082,
                    10083,
                    10094,
                    10095,
                    10103,
                    10104,
                    376,
                    378,
                    380,
                    382,
                    10112,
                    10113,
                    386,
                    388,
                    392,
                    395,
                    10124,
                    10125,
                    10126,
                    399,
                    401,
                    405,
                    10135,
                    408,
                    10136,
                    10137,
                    11165,
                    417,
                    418,
                    419,
                    10145,
                    10146,
                    10158,
                    10159,
                    11198,
                    10217,
                    10224
                ],
                "cls._AXIS_NUMBERS": [
                    392,
                    401,
                    311
                ],
                "cls._AXIS_LEN": [
                    312,
                    419,
                    10316
                ],
                "cls._AXIS_NAMES": [
                    388,
                    325,
                    328,
                    405,
                    313
                ],
                "cls._AXIS_REVERSED": [
                    418,
                    314,
                    378
                ],
                "cls._info_axis_number": [
                    316
                ],
                "cls._info_axis_name": [
                    317
                ],
                "properties.AxisProperty": [
                    321
                ],
                "properties": [
                    321
                ],
                "docs.get": [
                    321
                ],
                "docs": [
                    321
                ],
                "cls._internal_names_set.add": [
                    322
                ],
                "cls._internal_names_set": [
                    322
                ],
                "cls._AXIS_NAMES.items": [
                    328,
                    325
                ],
                "set_axis": [
                    329,
                    326
                ],
                "d": [
                    3860,
                    11161,
                    11162,
                    11163,
                    3868,
                    426,
                    9777,
                    9778,
                    9779,
                    442,
                    450,
                    451,
                    456,
                    458,
                    460,
                    333,
                    334,
                    335,
                    340,
                    341,
                    342,
                    1890,
                    1891,
                    9698,
                    9703,
                    7021,
                    7022,
                    380,
                    381,
                    382
                ],
                "self._get_axis": [
                    1670,
                    6024,
                    7562,
                    4493,
                    9103,
                    3478,
                    4248,
                    1308,
                    670,
                    4520,
                    1321,
                    3373,
                    4658,
                    9161,
                    333,
                    1872,
                    8913,
                    3925,
                    7639,
                    732,
                    1249,
                    492,
                    8945,
                    9331,
                    501
                ],
                "self._AXIS_ORDERS": [
                    1890,
                    4515,
                    359,
                    457,
                    1321,
                    492,
                    333,
                    1872,
                    369,
                    340,
                    501,
                    3861
                ],
                "d.update": [
                    458,
                    381,
                    341,
                    334
                ],
                "kwargs": [
                    4480,
                    4482,
                    4485,
                    7301,
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    10255,
                    1043,
                    1046,
                    11035,
                    11037,
                    3362,
                    11182,
                    11057,
                    9908,
                    1209,
                    1210,
                    6843,
                    1212,
                    1213,
                    1214,
                    9916,
                    1218,
                    1221,
                    2758,
                    9929,
                    9932,
                    334,
                    341,
                    11096,
                    5082,
                    11103,
                    4472,
                    362,
                    364,
                    369,
                    370,
                    10993,
                    10995,
                    4469,
                    4470,
                    4471,
                    376,
                    4473,
                    4474,
                    4475,
                    10997,
                    381
                ],
                "args": [
                    7301,
                    358,
                    1033,
                    364,
                    10255,
                    4469,
                    11096,
                    5082,
                    11103
                ],
                "args.pop": [
                    364
                ],
                "require_all": [
                    366
                ],
                "kwargs.pop": [
                    4480,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    369,
                    9908,
                    4470,
                    4471,
                    4472,
                    4473,
                    4474,
                    4475,
                    1212,
                    1213,
                    1214
                ],
                "sentinel": [
                    369
                ],
                "cls._construct_axes_dict_from": [
                    380
                ],
                "axis": [
                    10248,
                    1546,
                    1547,
                    1037,
                    1039,
                    1041,
                    7197,
                    7198,
                    1056,
                    1057,
                    1061,
                    7206,
                    1063,
                    1575,
                    1576,
                    1067,
                    8749,
                    7215,
                    4656,
                    4657,
                    4658,
                    7216,
                    4661,
                    1597,
                    1598,
                    4669,
                    1603,
                    4677,
                    8263,
                    1609,
                    1613,
                    8784,
                    8281,
                    8290,
                    8291,
                    8296,
                    9330,
                    9331,
                    8308,
                    1656,
                    1657,
                    6776,
                    1659,
                    1660,
                    6778,
                    1662,
                    1663,
                    6781,
                    9336,
                    642,
                    645,
                    7301,
                    7302,
                    7303,
                    649,
                    9358,
                    1680,
                    8338,
                    4246,
                    4247,
                    4248,
                    8344,
                    8578,
                    7329,
                    8580,
                    7335,
                    8871,
                    1716,
                    9908,
                    1721,
                    9913,
                    9916,
                    7568,
                    1214,
                    1215,
                    1216,
                    1728,
                    6847,
                    6852,
                    1733,
                    9925,
                    1735,
                    9927,
                    9930,
                    9932,
                    1742,
                    1232,
                    8400,
                    8912,
                    8913,
                    8914,
                    1240,
                    1241,
                    9100,
                    732,
                    734,
                    9101,
                    1249,
                    8417,
                    1251,
                    9102,
                    9103,
                    8428,
                    8945,
                    11000,
                    11001,
                    7931,
                    11004,
                    9982,
                    9983,
                    7937,
                    8962,
                    9985,
                    9988,
                    11009,
                    9992,
                    8458,
                    1307,
                    1308,
                    1312,
                    11040,
                    11041,
                    11043,
                    11045,
                    3367,
                    11151,
                    3373,
                    3886,
                    11060,
                    11061,
                    10238,
                    11064,
                    3897,
                    3899,
                    11067,
                    8519,
                    8523,
                    4940,
                    4941,
                    4943,
                    4944,
                    3923,
                    3924,
                    3925,
                    3927,
                    3929,
                    4954,
                    3931,
                    11097,
                    3933,
                    11098,
                    4959,
                    11100,
                    11102,
                    3940,
                    3942,
                    3948,
                    3950,
                    5999,
                    6000,
                    6001,
                    6005,
                    11125,
                    890,
                    8572,
                    893,
                    8573,
                    6017,
                    386,
                    387,
                    388,
                    389,
                    7558,
                    7559,
                    392,
                    6024,
                    7560,
                    395,
                    7562,
                    4493,
                    4494,
                    399,
                    400,
                    401,
                    402,
                    911,
                    913,
                    405,
                    914,
                    3477,
                    408,
                    3478,
                    11154,
                    411,
                    3484,
                    6046,
                    3488,
                    417,
                    5025,
                    3491,
                    420,
                    421,
                    9123,
                    9127,
                    425,
                    427,
                    4525,
                    4527,
                    3505,
                    3507,
                    11188,
                    11192,
                    450,
                    9160,
                    9161,
                    6092,
                    4558,
                    4559,
                    4560,
                    9166,
                    10192,
                    7635,
                    7636,
                    7637,
                    7639,
                    10202,
                    8156,
                    6111,
                    7650,
                    9188,
                    8165,
                    10213,
                    1517,
                    10221,
                    10222,
                    1522,
                    1523,
                    3576,
                    3577,
                    3582
                ],
                "cls._AXIS_ALIASES.get": [
                    386,
                    399
                ],
                "cls._AXIS_ALIASES": [
                    386,
                    399
                ],
                "is_integer": [
                    387
                ],
                "name": [
                    9773,
                    9774,
                    9775,
                    4661,
                    4662,
                    2628,
                    10316,
                    10318,
                    5213,
                    5214,
                    5216,
                    5217,
                    5229,
                    5230,
                    5231,
                    5233,
                    5235,
                    5236,
                    5237,
                    3193,
                    3194,
                    3195,
                    5249,
                    5250,
                    5256,
                    5257,
                    5258,
                    5259,
                    5262,
                    5264,
                    5265,
                    5266,
                    5268,
                    5278,
                    9928,
                    9929,
                    9931,
                    9941,
                    9946,
                    1250,
                    9958,
                    10992,
                    10994,
                    9971,
                    10997,
                    11004,
                    11008,
                    11015,
                    9999,
                    10010,
                    11034,
                    1308,
                    11037,
                    11043,
                    10020,
                    11045,
                    11048,
                    10032,
                    11057,
                    11064,
                    11067,
                    10045,
                    11070,
                    10058,
                    10071,
                    11096,
                    10085,
                    10097,
                    10106,
                    10115,
                    10128,
                    411,
                    412,
                    10139,
                    11165,
                    10148,
                    429,
                    430,
                    431,
                    11182,
                    10161,
                    11188,
                    11191,
                    11198
                ],
                "self._get_axis_name": [
                    642,
                    9127,
                    3886,
                    9166,
                    3924,
                    4661,
                    4247,
                    9336,
                    411
                ],
                "cls._get_axis_number": [
                    417
                ],
                "m": [
                    419,
                    420
                ],
                "axis_index": [
                    448,
                    425,
                    429,
                    439,
                    441,
                    445,
                    446
                ],
                "prefix": [
                    4032,
                    427,
                    436
                ],
                "axis_index.names": [
                    429
                ],
                "key": [
                    3712,
                    1665,
                    3713,
                    3587,
                    3715,
                    3722,
                    1550,
                    1551,
                    1552,
                    3726,
                    1683,
                    3480,
                    1823,
                    2465,
                    3492,
                    3748,
                    1575,
                    1576,
                    3498,
                    3500,
                    431,
                    436,
                    442,
                    1601,
                    1602,
                    1603,
                    1604,
                    1617,
                    1520,
                    1521,
                    1522,
                    1523,
                    3705,
                    1659,
                    1660,
                    1661,
                    1662,
                    1663
                ],
                "level": [
                    9984,
                    8449,
                    9985,
                    9349,
                    9350,
                    7943,
                    9351,
                    9353,
                    9354,
                    1036,
                    8341,
                    4502,
                    3479,
                    3480,
                    4250,
                    4507,
                    8347,
                    11042,
                    11043,
                    1062,
                    1063,
                    4522,
                    8749,
                    431,
                    11183,
                    1075,
                    11188,
                    437,
                    11062,
                    439,
                    11064,
                    3899,
                    4540,
                    8519,
                    8264,
                    9927,
                    8785,
                    3928,
                    8408,
                    8282,
                    3931,
                    9179,
                    733,
                    9180,
                    9181,
                    9183,
                    9184,
                    3939,
                    3942,
                    8422,
                    8297,
                    8433,
                    8309,
                    4471,
                    11002,
                    11004
                ],
                "level_values": [
                    440,
                    439
                ],
                "axis_index.get_level_values": [
                    439
                ],
                "s": [
                    440,
                    441,
                    442,
                    9768
                ],
                "level_values.to_series": [
                    440
                ],
                "s.index": [
                    441
                ],
                "MultiIndex": [
                    3940,
                    9348,
                    1670,
                    9126,
                    6792,
                    3497,
                    3703,
                    3929,
                    1753,
                    9178,
                    445
                ],
                "dindex": [
                    448,
                    450,
                    446
                ],
                "axis_index.to_series": [
                    448
                ],
                "ABCSeries": [
                    453,
                    423,
                    456,
                    7211,
                    6028,
                    7212,
                    462,
                    8271,
                    8304,
                    6961,
                    8336,
                    8253,
                    8396,
                    472,
                    4953,
                    6045
                ],
                "axis_name": [
                    4260,
                    457,
                    458,
                    3886,
                    3887,
                    3955,
                    3924,
                    4247,
                    3934
                ],
                "self._get_axis_resolvers": [
                    458
                ],
                "clean_column_name": [
                    473,
                    476,
                    460
                ],
                "k": [
                    1929,
                    1930,
                    1931,
                    1932,
                    1934,
                    1935,
                    1936,
                    5522,
                    5523,
                    6552,
                    6553,
                    6557,
                    670,
                    6054,
                    6055,
                    6057,
                    1721,
                    6461,
                    6464,
                    6465,
                    1733,
                    1735,
                    460,
                    476,
                    6498,
                    6500,
                    6505,
                    1905
                ],
                "v": [
                    1931,
                    1932,
                    1934,
                    1936,
                    5522,
                    5523,
                    6552,
                    6556,
                    1057,
                    1058,
                    1060,
                    6054,
                    1066,
                    1067,
                    6058,
                    1070,
                    6449,
                    6461,
                    6462,
                    1471,
                    1472,
                    1473,
                    1474,
                    460,
                    1241,
                    1242,
                    1244,
                    476,
                    1246,
                    1248
                ],
                "d.items": [
                    460
                ],
                "self.name": [
                    473,
                    5628,
                    5633,
                    7007
                ],
                "self.items": [
                    5643,
                    476,
                    1815
                ],
                "self._info_axis_name": [
                    481,
                    4034,
                    4657,
                    6779,
                    4093
                ],
                "self._stat_axis_name": [
                    9908,
                    485
                ],
                "Tuple": [
                    488
                ],
                "self._data.ndim": [
                    524
                ],
                "self._data": [
                    1409,
                    6529,
                    3587,
                    8966,
                    3975,
                    5512,
                    649,
                    3722,
                    5879,
                    524,
                    8587,
                    3214,
                    5774,
                    8975,
                    9357,
                    5523,
                    6550,
                    8598,
                    11159,
                    6041,
                    5661,
                    6563,
                    3366,
                    6521,
                    8873,
                    3755,
                    6062,
                    5298,
                    5300,
                    3513,
                    5308,
                    5827,
                    5450,
                    4557,
                    6480,
                    5330,
                    5336,
                    3549,
                    5341,
                    8416,
                    5346,
                    4579,
                    9187,
                    8441,
                    1907,
                    5367,
                    3577,
                    5370,
                    1917,
                    6015
                ],
                "np.prod": [
                    548
                ],
                "np": [
                    5376,
                    7171,
                    7172,
                    11139,
                    5512,
                    9992,
                    9738,
                    7179,
                    11146,
                    7310,
                    11150,
                    7312,
                    11152,
                    7187,
                    7188,
                    8470,
                    6809,
                    9757,
                    8739,
                    548,
                    8489,
                    3502,
                    3503,
                    10036,
                    10038,
                    10039,
                    8765,
                    1472,
                    10049,
                    10052,
                    6982,
                    6983,
                    8519,
                    8778,
                    5453,
                    10062,
                    10065,
                    5458,
                    9682,
                    9684,
                    1622,
                    5462,
                    8534,
                    9430,
                    9687,
                    10075,
                    10077,
                    10078,
                    7007,
                    8545,
                    7011,
                    7015,
                    5356,
                    11116,
                    11119,
                    7024,
                    11127,
                    11128,
                    4985,
                    11130
                ],
                "self.shape": [
                    548,
                    8490,
                    3662,
                    4944,
                    8536
                ],
                "labels": [
                    642,
                    645,
                    649,
                    913,
                    914,
                    3478,
                    3480,
                    4248,
                    4255,
                    4259,
                    4516,
                    4517,
                    4522,
                    3883,
                    3887,
                    4658,
                    4662,
                    3897,
                    3898,
                    3899,
                    4668,
                    4676,
                    3931,
                    732,
                    3933,
                    733,
                    3938,
                    3942,
                    3946,
                    3948,
                    3950,
                    3952
                ],
                "obj": [
                    3904,
                    4514,
                    644,
                    645,
                    646,
                    6057,
                    6058,
                    4526,
                    4533,
                    3895,
                    3899,
                    3902
                ],
                "obj.set_axis": [
                    645
                ],
                "self._data.set_axis": [
                    649
                ],
                "self._clear_item_cache": [
                    3265,
                    3588,
                    3974,
                    650,
                    5301
                ],
                "self._get_axis_number": [
                    8578,
                    7303,
                    7560,
                    1546,
                    9102,
                    911,
                    1041,
                    660,
                    661,
                    3477,
                    4246,
                    1307,
                    7198,
                    6776,
                    4525,
                    1716,
                    9908,
                    1597,
                    1216,
                    9160,
                    9930,
                    4943,
                    10192,
                    3923,
                    7637,
                    8156,
                    11100,
                    8291,
                    1517,
                    10221,
                    6001,
                    9330,
                    3955,
                    1656,
                    890,
                    7931,
                    10238
                ],
                "axis1": [
                    660
                ],
                "j": [
                    914,
                    661,
                    663,
                    668,
                    671
                ],
                "axis2": [
                    661
                ],
                "mapping": [
                    668,
                    670
                ],
                "new_axes": [
                    675,
                    670
                ],
                "mapping.get": [
                    670
                ],
                "self._AXIS_LEN": [
                    1056,
                    9122,
                    1547,
                    670,
                    1240,
                    1657,
                    4538,
                    1598
                ],
                "new_values": [
                    3520,
                    673,
                    3521,
                    675,
                    3524,
                    3527,
                    3513,
                    671
                ],
                "self.values.swapaxes": [
                    671
                ],
                "self.values": [
                    5480,
                    7177,
                    5455,
                    5460,
                    671
                ],
                "new_values.copy": [
                    673
                ],
                "self._constructor": [
                    9357,
                    5775,
                    5522,
                    8978,
                    11163,
                    5662,
                    8607,
                    675,
                    3369,
                    8492,
                    7213,
                    6574,
                    8879,
                    6074,
                    6848,
                    5826,
                    6851,
                    5332,
                    7007,
                    1891,
                    9187,
                    4582,
                    8171,
                    8570,
                    5878,
                    5367,
                    3577,
                    5370,
                    8444,
                    1407
                ],
                "new_labels": [
                    733,
                    734
                ],
                "labels.droplevel": [
                    733
                ],
                "self.set_axis": [
                    734
                ],
                "item": [
                    3552,
                    3204,
                    778,
                    779,
                    3562,
                    3564,
                    3214,
                    3547,
                    3549,
                    3550,
                    3551
                ],
                "result._reset_cacher": [
                    781
                ],
                "self._AXIS_NAMES": [
                    1057,
                    890,
                    1241
                ],
                "self.iloc": [
                    8004,
                    8063,
                    3531,
                    4752,
                    5655,
                    4826,
                    891,
                    4827,
                    3487
                ],
                "self.axes": [
                    1603,
                    1604,
                    1063,
                    1067,
                    8524,
                    1552,
                    1522,
                    4954,
                    894,
                    1663
                ],
                "result._data.axes": [
                    913
                ],
                "result._data.set_axis": [
                    914
                ],
                "labels.swaplevel": [
                    914
                ],
                "self._construct_axes_from_arguments": [
                    1033,
                    1209,
                    4469,
                    3889
                ],
                "errors": [
                    3899,
                    5634,
                    5661,
                    3945,
                    1068,
                    2477,
                    1038,
                    3951,
                    5646,
                    8749,
                    8787,
                    8602,
                    3931,
                    3933
                ],
                "kwargs.keys": [
                    4485,
                    1221,
                    1046
                ],
                "com.count_not_none": [
                    1049,
                    4538,
                    4649
                ],
                "com": [
                    10241,
                    1415,
                    1429,
                    1049,
                    1060,
                    8484,
                    1447,
                    4649,
                    8747,
                    1719,
                    4538,
                    3521,
                    8774,
                    4947,
                    5082,
                    1882,
                    1248,
                    3938,
                    8553,
                    3692,
                    3694
                ],
                "axes.values": [
                    1049,
                    4538
                ],
                "self._consolidate_inplace": [
                    3364,
                    3494,
                    4488,
                    5449,
                    5995,
                    5328,
                    6421,
                    1052
                ],
                "axes.get": [
                    1057,
                    1241
                ],
                "f": [
                    1060,
                    11045,
                    1075,
                    5299,
                    11190,
                    11067,
                    4668,
                    5310,
                    4032,
                    4034,
                    4676,
                    5330,
                    5331,
                    5336,
                    5337,
                    5341,
                    5342,
                    1248,
                    1250,
                    5346,
                    5347,
                    4091,
                    4093,
                    11007
                ],
                "com.get_rename_function": [
                    1248,
                    1060
                ],
                "baxis": [
                    4560,
                    4573,
                    1075,
                    1061
                ],
                "_get_level_number": [
                    1063
                ],
                "indexer": [
                    7564,
                    7568,
                    3485,
                    3487,
                    4521,
                    1067,
                    1068,
                    1070,
                    4527,
                    4559,
                    4566,
                    4567,
                    7641,
                    4572,
                    7650,
                    3942,
                    3945,
                    3948,
                    3955,
                    3194,
                    3195
                ],
                "get_indexer_for": [
                    1067
                ],
                "missing_labels": [
                    1072,
                    1069
                ],
                "label": [
                    3012,
                    1070,
                    7935
                ],
                "index": [
                    8963,
                    8964,
                    8967,
                    7562,
                    7564,
                    8976,
                    6809,
                    6811,
                    6814,
                    6815,
                    2336,
                    6816,
                    2472,
                    3496,
                    3497,
                    6826,
                    3884,
                    1070,
                    3888,
                    3889,
                    2994,
                    6836,
                    2632,
                    4559,
                    4562,
                    4565,
                    7639,
                    7641,
                    4571,
                    3167,
                    2143,
                    8945,
                    8947,
                    8950
                ],
                "result._data.rename_axis": [
                    1074
                ],
                "result._clear_item_cache": [
                    1077
                ],
                "result.__finalize__": [
                    1082,
                    9189,
                    3578,
                    9359
                ],
                "lib.no_default": [
                    1226,
                    1210,
                    1085,
                    1242
                ],
                "lib": [
                    1242,
                    1226,
                    1085,
                    1210,
                    1885
                ],
                "validate_bool_kwarg": [
                    5824,
                    5825,
                    8481,
                    7299,
                    8773,
                    1224,
                    3881,
                    5992,
                    5822,
                    5326,
                    6417,
                    4245,
                    6774,
                    5821,
                    1310,
                    5823
                ],
                "mapper": [
                    4034,
                    4035,
                    1226,
                    1228,
                    1229,
                    1232,
                    4093,
                    4094
                ],
                "non_mapper": [
                    1244,
                    1228,
                    1245,
                    1231
                ],
                "is_scalar": [
                    7201,
                    1474,
                    1228,
                    10256,
                    3509,
                    7317,
                    3512,
                    7321,
                    7322,
                    1244,
                    1886
                ],
                "is_list_like": [
                    3520,
                    6497,
                    6562,
                    6535,
                    7211,
                    1229,
                    6061,
                    7310,
                    6032,
                    6513,
                    6514,
                    7312,
                    5270,
                    6968,
                    6971,
                    1244
                ],
                "is_dict_like": [
                    6436,
                    6437,
                    6536,
                    6426,
                    1229,
                    6449,
                    6481,
                    6482,
                    6549,
                    5626,
                    1244
                ],
                "self._set_axis_name": [
                    1232
                ],
                "newnames": [
                    1250,
                    1251,
                    1246
                ],
                "curnames": [
                    1249,
                    1250
                ],
                "names": [
                    1249,
                    1603,
                    9731,
                    9737,
                    9706,
                    9770,
                    9741,
                    9774,
                    9775,
                    9777,
                    1522,
                    9723
                ],
                "result._set_axis_name": [
                    1251
                ],
                "rewrite_axis_style_signature": [
                    1084
                ],
                "idx": [
                    1312,
                    1308
                ],
                "set_names": [
                    1308
                ],
                "renamed": [
                    1312,
                    1314,
                    1311
                ],
                "renamed.set_axis": [
                    1312
                ],
                "equals": [
                    1321,
                    8524,
                    3373
                ],
                "other._get_axis": [
                    1321,
                    8524
                ],
                "other": [
                    1409,
                    8449,
                    8447,
                    8575,
                    8586,
                    8589,
                    8465,
                    8339,
                    3860,
                    8341,
                    8599,
                    8345,
                    8347,
                    8359,
                    1321,
                    8747,
                    8749,
                    8252,
                    8381,
                    8513,
                    8258,
                    8516,
                    8261,
                    8518,
                    8519,
                    8524,
                    8782,
                    8271,
                    8274,
                    8276,
                    8404,
                    8534,
                    8408,
                    8536,
                    5212,
                    5213,
                    5214,
                    8412,
                    8544,
                    5217,
                    8545,
                    8292,
                    8420,
                    8294,
                    8422,
                    8549,
                    8555,
                    8556,
                    8431,
                    8304,
                    8433,
                    8306,
                    8570,
                    8317,
                    1407
                ],
                "self._data.equals": [
                    1409
                ],
                "other._data": [
                    1409
                ],
                "com.values_from_object": [
                    1447,
                    1415,
                    8553,
                    1429,
                    1882
                ],
                "is_bool_dtype": [
                    1416,
                    9744,
                    8502,
                    1430,
                    8506
                ],
                "arr": [
                    1440,
                    1447,
                    1448,
                    1417,
                    1423,
                    1426,
                    1431,
                    1437
                ],
                "operator.inv": [
                    1417,
                    1447
                ],
                "operator": [
                    1417,
                    1447,
                    1437,
                    1423
                ],
                "is_numeric_dtype": [
                    1433,
                    9746,
                    1419,
                    6814
                ],
                "is_timedelta64_dtype": [
                    6816,
                    1434,
                    1420,
                    9748
                ],
                "is_object_dtype": [
                    1435,
                    1421
                ],
                "operator.neg": [
                    1423
                ],
                "self.__array_wrap__": [
                    1440,
                    1426,
                    1448
                ],
                "is_period_arraylike": [
                    1430
                ],
                "operator.pos": [
                    1437
                ],
                "self.size": [
                    1443,
                    6477
                ],
                "__bool__": [
                    1456
                ],
                "__nonzero__": [
                    1456
                ],
                "self.squeeze": [
                    1471
                ],
                "np.bool_": [
                    1472,
                    11146,
                    3503
                ],
                "self.__nonzero__": [
                    1480
                ],
                "self.abs": [
                    1483
                ],
                "self.round": [
                    1486
                ],
                "decimals": [
                    1486
                ],
                "is_hashable": [
                    1521,
                    1602,
                    1551
                ],
                "self._is_label_reference": [
                    1659,
                    1523,
                    1575
                ],
                "other_axes": [
                    1604,
                    1670,
                    1547,
                    1552,
                    1657,
                    1661,
                    1598
                ],
                "self._is_level_reference": [
                    1735,
                    1733,
                    1662,
                    1575
                ],
                "level_article": [
                    1608,
                    1617
                ],
                "level_type": [
                    1608,
                    1617
                ],
                "label_article": [
                    1618,
                    1612
                ],
                "label_type": [
                    1618,
                    1612
                ],
                "msg": [
                    8160,
                    9762,
                    9763,
                    8969,
                    8973,
                    1616,
                    8498,
                    1620,
                    8503,
                    8953,
                    8954,
                    8507,
                    8159
                ],
                "self._check_label_or_level_ambiguity": [
                    1660
                ],
                "_values": [
                    1661,
                    1663
                ],
                "self.xs": [
                    1661
                ],
                "get_level_values": [
                    1663
                ],
                "values.ndim": [
                    1668
                ],
                "multi_message": [
                    1684,
                    1678,
                    1671
                ],
                "label_axis_name": [
                    1680,
                    1683
                ],
                "np.ndarray": [
                    5376,
                    11139,
                    5453,
                    3502,
                    5458,
                    1622,
                    5462,
                    8534
                ],
                "keys": [
                    6464,
                    6498,
                    6499,
                    6500,
                    1733,
                    6469,
                    1735,
                    6447,
                    1719,
                    1721,
                    6462
                ],
                "com.maybe_make_list": [
                    1719
                ],
                "invalid_keys": [
                    1720,
                    1724,
                    1728
                ],
                "self._is_label_or_level_reference": [
                    1721
                ],
                "levels_to_drop": [
                    1733,
                    1744,
                    1745,
                    1752,
                    1755
                ],
                "labels_to_drop": [
                    1762,
                    1763,
                    1735,
                    1748,
                    1749
                ],
                "dropped": [
                    1763,
                    1765,
                    1740,
                    1745,
                    1749,
                    1753,
                    1755,
                    1759
                ],
                "dropped.reset_index": [
                    1745
                ],
                "dropped.drop": [
                    1763,
                    1749
                ],
                "dropped.columns": [
                    1753,
                    1755,
                    1759
                ],
                "dropped.columns.droplevel": [
                    1755
                ],
                "RangeIndex": [
                    1759
                ],
                "dropped.columns.size": [
                    1759
                ],
                "self._info_axis": [
                    5286,
                    1799,
                    3560,
                    5512,
                    5265,
                    1810,
                    5235,
                    1785,
                    1819,
                    1823
                ],
                "h": [
                    1810,
                    1811
                ],
                "Appender": [
                    6407,
                    10253,
                    1813,
                    8726,
                    11030,
                    8864,
                    9898,
                    8236,
                    11053,
                    11180,
                    8752,
                    7092,
                    7096,
                    10298,
                    10304,
                    2113,
                    7162,
                    10181,
                    11094,
                    5080,
                    10982,
                    6759,
                    10219,
                    10226,
                    9978,
                    7166
                ],
                "items.__doc__": [
                    1813
                ],
                "items": [
                    4649,
                    6446,
                    6447,
                    5523,
                    4660,
                    1813,
                    4662,
                    6461
                ],
                "__array_priority__": [
                    1879
                ],
                "lib.item_from_zerodim": [
                    1885
                ],
                "self._construct_axes_dict": [
                    1890,
                    8492,
                    8276,
                    11161,
                    8570
                ],
                "meta": [
                    1928,
                    1929,
                    1935,
                    1905,
                    1911
                ],
                "self._metadata": [
                    5216,
                    1928,
                    5258,
                    5230,
                    1905,
                    1909
                ],
                "self._typ": [
                    1908
                ],
                "self.attrs": [
                    5214,
                    1910
                ],
                "state": [
                    1921,
                    1930,
                    1931,
                    1934,
                    1939,
                    1940,
                    1941,
                    1916,
                    1917,
                    1918,
                    1919
                ],
                "typ": [
                    1920,
                    1919
                ],
                "state.get": [
                    1921,
                    1919
                ],
                "self._internal_names": [
                    1928
                ],
                "state.items": [
                    1934
                ],
                "self._unpickle_series_compat": [
                    1939,
                    1941
                ],
                "self._item_cache": [
                    3546,
                    3268,
                    3726,
                    1943
                ],
                "prepr": [
                    1952,
                    1951
                ],
                "join": [
                    8408,
                    8262,
                    8295,
                    8422,
                    10314,
                    8433,
                    8307,
                    8341,
                    8280,
                    8347,
                    1951
                ],
                "pprint_thing": [
                    1951
                ],
                "config.get_option": [
                    2978,
                    2980,
                    2982,
                    1959,
                    2984,
                    3654,
                    2986,
                    1969,
                    1970
                ],
                "config": [
                    2978,
                    2980,
                    2982,
                    1959,
                    2984,
                    3654,
                    2986,
                    1969,
                    1970,
                    2322
                ],
                "self.to_latex": [
                    1960
                ],
                "self.head": [
                    1970
                ],
                "payload": [
                    1971,
                    1974
                ],
                "json.loads": [
                    1971
                ],
                "json": [
                    1971,
                    2325
                ],
                "data.to_json": [
                    1972
                ],
                "collections.OrderedDict": [
                    1972
                ],
                "collections": [
                    1972
                ],
                "df": [
                    8257,
                    8260,
                    3151,
                    8275,
                    3156,
                    2133,
                    8279,
                    2138
                ],
                "ABCDataFrame": [
                    8292,
                    3151,
                    6065,
                    8500,
                    2133,
                    5270,
                    4958,
                    6430
                ],
                "self.to_frame": [
                    2976,
                    2133,
                    3151
                ],
                "formatter": [
                    2148,
                    3177,
                    2988,
                    3180,
                    3155,
                    2137,
                    3003
                ],
                "ExcelFormatter": [
                    2137
                ],
                "na_rep": [
                    2992,
                    3163,
                    2139
                ],
                "columns": [
                    3884,
                    2990,
                    3888,
                    3889,
                    2140,
                    3165
                ],
                "header": [
                    2993,
                    2141,
                    3166
                ],
                "float_format": [
                    2996,
                    2142,
                    3164
                ],
                "index_label": [
                    2144,
                    2633,
                    3168
                ],
                "merge_cells": [
                    2145
                ],
                "inf_rep": [
                    2146
                ],
                "formatter.write": [
                    2148
                ],
                "excel_writer": [
                    2149
                ],
                "sheet_name": [
                    2150
                ],
                "startrow": [
                    2151
                ],
                "startcol": [
                    2152
                ],
                "freeze_panes": [
                    2153
                ],
                "engine": [
                    2154
                ],
                "FilePathOrBuffer": [
                    3017,
                    2159
                ],
                "Callable": [
                    3539,
                    2165
                ],
                "JSONSerializable": [
                    2165
                ],
                "date_format": [
                    3172,
                    2317,
                    2318,
                    2319,
                    2320,
                    2329
                ],
                "orient": [
                    2328,
                    2317
                ],
                "config.is_nonnegative_int": [
                    2322
                ],
                "indent": [
                    2337,
                    2322,
                    2323
                ],
                "json.to_json": [
                    2325
                ],
                "path_or_buf": [
                    2464,
                    3179,
                    3157,
                    2326
                ],
                "double_precision": [
                    2330
                ],
                "force_ascii": [
                    2331
                ],
                "date_unit": [
                    2332
                ],
                "default_handler": [
                    2333
                ],
                "lines": [
                    2334
                ],
                "compression": [
                    3161,
                    2698,
                    2335
                ],
                "Union": [
                    3024,
                    3027,
                    3022,
                    2350
                ],
                "pytables.to_hdf": [
                    2463
                ],
                "pytables": [
                    2463
                ],
                "mode": [
                    3169,
                    2467
                ],
                "complevel": [
                    2468
                ],
                "complib": [
                    2469
                ],
                "append": [
                    2470
                ],
                "min_itemsize": [
                    2473
                ],
                "nan_rep": [
                    2474
                ],
                "dropna": [
                    2475
                ],
                "data_columns": [
                    2476
                ],
                "encoding": [
                    3160,
                    2478,
                    3007
                ],
                "sql.to_sql": [
                    2626
                ],
                "sql": [
                    2626
                ],
                "con": [
                    2629
                ],
                "schema": [
                    2630
                ],
                "if_exists": [
                    2631
                ],
                "chunksize": [
                    2634,
                    3170
                ],
                "pickle.HIGHEST_PROTOCOL": [
                    2643
                ],
                "pickle": [
                    2643
                ],
                "to_pickle": [
                    2698
                ],
                "path": [
                    2698
                ],
                "protocol": [
                    2698
                ],
                "clipboards.to_clipboard": [
                    2758
                ],
                "clipboards": [
                    2758
                ],
                "excel": [
                    2758
                ],
                "sep": [
                    2758,
                    3159
                ],
                "xarray": [
                    2841,
                    2836,
                    2839
                ],
                "import_optional_dependency": [
                    2836
                ],
                "xarray.DataArray.from_series": [
                    2839
                ],
                "xarray.DataArray": [
                    2839
                ],
                "xarray.Dataset.from_dataframe": [
                    2841
                ],
                "xarray.Dataset": [
                    2841
                ],
                "longtable": [
                    2977,
                    2978,
                    3006
                ],
                "escape": [
                    3000,
                    2979,
                    2980
                ],
                "multicolumn": [
                    3008,
                    2981,
                    2982
                ],
                "multicolumn_format": [
                    2984,
                    3009,
                    2983
                ],
                "multirow": [
                    3010,
                    2985,
                    2986
                ],
                "DataFrameFormatter": [
                    2988
                ],
                "col_space": [
                    2991
                ],
                "formatters": [
                    2995
                ],
                "bold_rows": [
                    2997
                ],
                "sparsify": [
                    2998
                ],
                "index_names": [
                    2999
                ],
                "decimal": [
                    3001,
                    3175
                ],
                "formatter.to_latex": [
                    3003
                ],
                "buf": [
                    3004
                ],
                "column_format": [
                    3005
                ],
                "caption": [
                    3011
                ],
                "Substitution": [
                    11171,
                    11052,
                    11021,
                    11086,
                    9968,
                    2843,
                    10973
                ],
                "fmt.return_docstring": [
                    2843
                ],
                "fmt": [
                    2843
                ],
                "Sequence": [
                    3024,
                    3021
                ],
                "CSVFormatter": [
                    3155
                ],
                "line_terminator": [
                    3158
                ],
                "quoting": [
                    3162
                ],
                "quotechar": [
                    3171
                ],
                "doublequote": [
                    3173
                ],
                "escapechar": [
                    3174
                ],
                "formatter.save": [
                    3177
                ],
                "formatter.path_or_buf.getvalue": [
                    3180
                ],
                "formatter.path_or_buf": [
                    3180
                ],
                "_indexer": [
                    3483,
                    3194,
                    3195,
                    3484,
                    3485
                ],
                "functools.partial": [
                    4032,
                    3194,
                    4091
                ],
                "functools": [
                    4032,
                    3194,
                    4091
                ],
                "indexer.__doc__": [
                    3195
                ],
                "self._cacher": [
                    3209,
                    3250,
                    3204
                ],
                "weakref.ref": [
                    3595,
                    3204
                ],
                "weakref": [
                    3595,
                    3204
                ],
                "cacher": [
                    3255,
                    3204,
                    3243,
                    3244,
                    3245,
                    3223,
                    3224,
                    3225,
                    3226
                ],
                "self._data.set": [
                    3587,
                    3214
                ],
                "ref": [
                    3594,
                    3595,
                    3245,
                    3249,
                    3255,
                    3611,
                    3612
                ],
                "ref._maybe_cache_changed": [
                    3255
                ],
                "verify_is_copy": [
                    3976,
                    3261
                ],
                "self._check_setitem_copy": [
                    3616,
                    3613,
                    3262
                ],
                "clear": [
                    3264
                ],
                "self._item_cache.clear": [
                    3268
                ],
                "is_copy": [
                    3360,
                    3372,
                    3352,
                    3582,
                    3583
                ],
                "warnings.warn": [
                    3353,
                    3694,
                    5271
                ],
                "warnings": [
                    3353,
                    3694,
                    5271
                ],
                "nv.validate_take": [
                    3362
                ],
                "nv": [
                    3362,
                    7301,
                    11182,
                    10993,
                    11057,
                    10995,
                    10997,
                    11096,
                    11035,
                    11037
                ],
                "new_data": [
                    6529,
                    8966,
                    8967,
                    8587,
                    8975,
                    8976,
                    8978,
                    8595,
                    6550,
                    8598,
                    6041,
                    6554,
                    5661,
                    5662,
                    8607,
                    6563,
                    3366,
                    3369,
                    8873,
                    6572,
                    6062,
                    6574,
                    8879,
                    6833,
                    6066,
                    6071,
                    6074,
                    6848,
                    6849,
                    6851,
                    4557,
                    6480,
                    4570,
                    4579,
                    4580,
                    4582,
                    6502,
                    6521,
                    6015
                ],
                "self._data.take": [
                    3366
                ],
                "indices": [
                    3367
                ],
                "result._get_axis": [
                    3373
                ],
                "result._set_is_copy": [
                    3536,
                    3374,
                    3583
                ],
                "loc": [
                    3480,
                    3484,
                    3498,
                    3500,
                    3502,
                    3503,
                    3504,
                    3507,
                    3509,
                    3510,
                    3512,
                    3513,
                    3526,
                    3531,
                    6992,
                    6993,
                    6994,
                    6997,
                    6998,
                    6999
                ],
                "new_ax": [
                    3480,
                    3488
                ],
                "labels.get_loc_level": [
                    3480
                ],
                "drop_level": [
                    3480,
                    3498
                ],
                "result._get_axis_name": [
                    3488
                ],
                "new_index": [
                    4521,
                    3498,
                    3532,
                    4527,
                    3510
                ],
                "self.index.get_loc_level": [
                    3498
                ],
                "self.index.get_loc": [
                    3500
                ],
                "loc.dtype": [
                    3503
                ],
                "inds": [
                    3504,
                    3505
                ],
                "loc.nonzero": [
                    3504
                ],
                "self.take": [
                    5025,
                    7650,
                    3564,
                    7021,
                    7568,
                    3505,
                    3507
                ],
                "self._data.fast_xs": [
                    3513
                ],
                "com.maybe_box_datetimelike": [
                    3521
                ],
                "self._constructor_sliced": [
                    3523
                ],
                "self.columns": [
                    3714,
                    5666,
                    7011,
                    3525,
                    6982,
                    7015,
                    8345,
                    9669,
                    6967,
                    8429,
                    8431,
                    8432,
                    8276,
                    3703,
                    5656,
                    3705,
                    8346
                ],
                "new_values.dtype": [
                    3527
                ],
                "result.index": [
                    3532
                ],
                "result._is_view": [
                    3536,
                    3582
                ],
                "_xs": [
                    3539
                ],
                "xs": [
                    3539
                ],
                "cache": [
                    3546,
                    3547,
                    3551
                ],
                "res": [
                    3552,
                    6494,
                    3555,
                    3556,
                    6851,
                    6853,
                    6854,
                    6483,
                    6488,
                    3547,
                    3548,
                    3550,
                    3551
                ],
                "cache.get": [
                    3547
                ],
                "self._data.get": [
                    3549
                ],
                "self._box_item_values": [
                    3550
                ],
                "res._set_as_cached": [
                    3552
                ],
                "res._is_copy": [
                    3555
                ],
                "self._is_copy": [
                    3555,
                    3651,
                    3592,
                    3595,
                    3660,
                    3597,
                    3661,
                    3663,
                    3667,
                    3668,
                    3615
                ],
                "ax.is_unique": [
                    3561
                ],
                "lower": [
                    7329,
                    7171,
                    3562,
                    3564,
                    3565,
                    7310,
                    7183,
                    7184,
                    7185,
                    7311,
                    7316,
                    7317,
                    7318,
                    7321,
                    7324,
                    7327
                ],
                "self._get_item_cache": [
                    3562
                ],
                "self._info_axis_number": [
                    3564
                ],
                "self._data.get_slice": [
                    3577
                ],
                "slobj": [
                    3577
                ],
                "self._is_view": [
                    3610
                ],
                "self._is_cached": [
                    3610
                ],
                "self._get_cacher": [
                    3611
                ],
                "ref._is_mixed_type": [
                    3612
                ],
                "force": [
                    3651
                ],
                "r": [
                    4662,
                    3661,
                    3662
                ],
                "gc.get_referents": [
                    3662
                ],
                "gc": [
                    3662
                ],
                "r.shape": [
                    3662
                ],
                "t": [
                    3681,
                    3692,
                    3694,
                    3668,
                    3670,
                    3671
                ],
                "com.SettingWithCopyError": [
                    3692
                ],
                "com.SettingWithCopyWarning": [
                    3694
                ],
                "stacklevel": [
                    3694
                ],
                "deleted": [
                    3700,
                    3717,
                    3718
                ],
                "maybe_shortcut": [
                    3705,
                    3709,
                    3702
                ],
                "self.columns._engine": [
                    3705
                ],
                "col": [
                    3714,
                    3715,
                    3716,
                    5643,
                    5646,
                    5649
                ],
                "self._data.delete": [
                    3722
                ],
                "default": [
                    3750
                ],
                "self._data.is_view": [
                    3755
                ],
                "other._construct_axes_dict": [
                    8258,
                    3860
                ],
                "tolerance": [
                    4522,
                    3865,
                    4474,
                    4507
                ],
                "self.reindex": [
                    4662,
                    4260,
                    3868,
                    3934
                ],
                "_": [
                    9768,
                    3889,
                    8486,
                    8518
                ],
                "obj._drop_axis": [
                    3899
                ],
                "axis.is_unique": [
                    3927
                ],
                "new_axis": [
                    4259,
                    4260,
                    3931,
                    3933,
                    3934
                ],
                "axis.drop": [
                    3931,
                    3933
                ],
                "ensure_object": [
                    3938
                ],
                "com.index_labels_to_array": [
                    3938
                ],
                "isin": [
                    3942
                ],
                "axis.get_level_values": [
                    3942
                ],
                "indexer.all": [
                    3945
                ],
                "axis.isin": [
                    3948
                ],
                "labels_missing": [
                    3950,
                    3951
                ],
                "axis.get_indexer_for": [
                    3950
                ],
                "slicer": [
                    9122,
                    9123,
                    9124,
                    3954,
                    3955,
                    3957
                ],
                "self.loc": [
                    9124,
                    4677,
                    8006,
                    3957,
                    4669
                ],
                "self._reset_cache": [
                    3973
                ],
                "self._maybe_update_cacher": [
                    3976
                ],
                "self.rename": [
                    4035,
                    4094
                ],
                "suffix": [
                    4091
                ],
                "sort_index": [
                    4257,
                    4259,
                    4255
                ],
                "labels.argsort": [
                    4255
                ],
                "ascending": [
                    4256,
                    8167
                ],
                "labels.take": [
                    4259
                ],
                "missing.clean_reindex_fill_method": [
                    4470
                ],
                "fill_value": [
                    8356,
                    8452,
                    8454,
                    8455,
                    8266,
                    8299,
                    8362,
                    8311,
                    8874,
                    8495,
                    4528,
                    8496,
                    4507,
                    7509,
                    4503,
                    4475,
                    8284,
                    4574
                ],
                "identical": [
                    4493
                ],
                "self._needs_reindex_multi": [
                    4502
                ],
                "self._reindex_multi": [
                    4503
                ],
                "self._reindex_axes": [
                    4506
                ],
                "ax.reindex": [
                    4521
                ],
                "obj._reindex_with_indexers": [
                    4526
                ],
                "self._is_mixed_type": [
                    5352,
                    4541,
                    6005
                ],
                "reindexers.keys": [
                    4558
                ],
                "reindexers": [
                    8353,
                    8356,
                    4558,
                    4559,
                    8351
                ],
                "ensure_index": [
                    4565
                ],
                "ensure_int64": [
                    4567
                ],
                "new_data.reindex_indexer": [
                    4570
                ],
                "allow_dups": [
                    4575
                ],
                "new_data.copy": [
                    4580
                ],
                "nkw": [
                    4649,
                    4650
                ],
                "like": [
                    4649,
                    4666,
                    4663
                ],
                "regex": [
                    6530,
                    6534,
                    6535,
                    6536,
                    6541,
                    6544,
                    6418,
                    6426,
                    6559,
                    6564,
                    6437,
                    4649,
                    6443,
                    6444,
                    4670,
                    4675,
                    6472,
                    6492,
                    6507,
                    6525
                ],
                "ensure_str": [
                    4673,
                    4666
                ],
                "x": [
                    4673,
                    9771,
                    9932,
                    9777,
                    4666
                ],
                "labels.map": [
                    4668,
                    4676
                ],
                "matcher.search": [
                    4673
                ],
                "matcher": [
                    4673,
                    4675
                ],
                "re.compile": [
                    4675
                ],
                "re": [
                    4675
                ],
                "n": [
                    5024,
                    5019,
                    5004,
                    5005,
                    4752,
                    5011,
                    5013,
                    5014,
                    5015,
                    4825,
                    4827
                ],
                "self._stat_axis_number": [
                    11041,
                    7559,
                    4941,
                    9101,
                    7636,
                    11061,
                    11001,
                    11098,
                    9983
                ],
                "axis_length": [
                    4944,
                    5024,
                    4980,
                    5014
                ],
                "rs": [
                    5024,
                    9921,
                    9920,
                    9922,
                    4947,
                    9916
                ],
                "com.random_state": [
                    4947
                ],
                "random_state": [
                    4947
                ],
                "weights": [
                    4992,
                    4961,
                    4985,
                    4995,
                    4996,
                    4997,
                    5024,
                    5001,
                    4978,
                    4980,
                    4950,
                    4953,
                    4954,
                    4988,
                    4957
                ],
                "weights.reindex": [
                    4954
                ],
                "np.inf": [
                    4985,
                    10077,
                    10038
                ],
                "weights.fillna": [
                    4992
                ],
                "weights.sum": [
                    4995,
                    4996,
                    4997
                ],
                "weights.values": [
                    5001
                ],
                "frac": [
                    5004,
                    5006,
                    5011,
                    5013,
                    5014,
                    5015
                ],
                "replace": [
                    5024,
                    6488,
                    5006
                ],
                "locs": [
                    5024,
                    5025,
                    7017,
                    7020,
                    7021
                ],
                "rs.choice": [
                    5024
                ],
                "com.pipe": [
                    5082
                ],
                "func": [
                    5082,
                    10255
                ],
                "dedent": [
                    5084
                ],
                "NDFrame": [
                    5212,
                    8485
                ],
                "other.attrs": [
                    5213,
                    5214
                ],
                "self._internal_names_set": [
                    5256,
                    5229
                ],
                "self._accessors": [
                    5231
                ],
                "object.__getattribute__": [
                    5233,
                    5249,
                    5237
                ],
                "self._info_axis._can_hold_identifiers_and_holds_name": [
                    5235
                ],
                "existing": [
                    5262,
                    5263
                ],
                "additions": [
                    5289,
                    5284
                ],
                "c": [
                    8258,
                    5285,
                    5286,
                    5287,
                    6484,
                    6485,
                    8276,
                    6488,
                    6490
                ],
                "self._info_axis.unique": [
                    5286
                ],
                "c.isidentifier": [
                    5287
                ],
                "union": [
                    5289
                ],
                "_dir_additions": [
                    5289
                ],
                "blocks_before": [
                    5298,
                    5300
                ],
                "self._data.blocks": [
                    5298,
                    5300
                ],
                "self._data.consolidate": [
                    5330,
                    5308
                ],
                "self._protect_consolidate": [
                    5347,
                    5331,
                    5337,
                    5310,
                    5342
                ],
                "cons_data": [
                    5331,
                    5332
                ],
                "self._data.is_mixed_type": [
                    5336
                ],
                "self._data.is_numeric_mixed_type": [
                    5341
                ],
                "self._data.is_datelike_mixed_type": [
                    5346
                ],
                "self._is_numeric_mixed_type": [
                    5353
                ],
                "is_float": [
                    5356
                ],
                "np.isnan": [
                    5356
                ],
                "self._data.get_numeric_data": [
                    5367
                ],
                "self._data.get_bool_data": [
                    5370
                ],
                "self._data.as_array": [
                    5450
                ],
                "self._AXIS_REVERSED": [
                    8593,
                    5450
                ],
                "Series": [
                    5512,
                    6982,
                    7015
                ],
                "self._data.get_dtypes": [
                    5512
                ],
                "np.object_": [
                    5512
                ],
                "self._data.to_dict": [
                    5523
                ],
                "new_type": [
                    5633,
                    5634
                ],
                "self.astype": [
                    5634
                ],
                "col_name": [
                    5636,
                    5637,
                    5643,
                    5644,
                    5646
                ],
                "dtype.keys": [
                    5636
                ],
                "results": [
                    5665,
                    5642,
                    5645,
                    5649,
                    5654
                ],
                "results.append": [
                    5649,
                    5645
                ],
                "col.astype": [
                    5646
                ],
                "col.copy": [
                    5649
                ],
                "is_extension_array_dtype": [
                    5651
                ],
                "astype": [
                    5655
                ],
                "self._data.astype": [
                    5661
                ],
                "pd.concat": [
                    5665,
                    9777
                ],
                "result.columns": [
                    5666
                ],
                "self._data.copy": [
                    8975,
                    5774,
                    8966
                ],
                "deep": [
                    5778,
                    5774
                ],
                "datetime": [
                    5828,
                    5821
                ],
                "numeric": [
                    5829,
                    5822
                ],
                "timedelta": [
                    9322,
                    5830,
                    5823
                ],
                "coerce": [
                    5824,
                    5831
                ],
                "self._data.convert": [
                    5827,
                    5879
                ],
                "validate_fillna_kwargs": [
                    5993
                ],
                "T": [
                    6008,
                    11148,
                    11103,
                    6848
                ],
                "self.T.fillna": [
                    6008
                ],
                "self.T": [
                    6008,
                    6782,
                    11103
                ],
                "result._data.downcast": [
                    6011
                ],
                "self._data.interpolate": [
                    6015
                ],
                "downcast": [
                    6021,
                    6058,
                    6092,
                    6063,
                    6842,
                    6042,
                    6111
                ],
                "create_series_with_explicit_dtype": [
                    6029
                ],
                "self._data.fillna": [
                    6041,
                    6062
                ],
                "value.items": [
                    6552,
                    6054
                ],
                "obj.fillna": [
                    6058
                ],
                "self.where": [
                    7216,
                    6066,
                    8780
                ],
                "self.notna": [
                    6066
                ],
                "self.fillna": [
                    9913,
                    6091,
                    6110
                ],
                "is_bool": [
                    6418
                ],
                "self.apply": [
                    6431
                ],
                "_single_replace": [
                    6432,
                    6434
                ],
                "to_replace.items": [
                    6498,
                    6484,
                    6446
                ],
                "are_mappings": [
                    6449,
                    6451,
                    6452
                ],
                "to_rep_dict": [
                    6464,
                    6458,
                    6467
                ],
                "value_dict": [
                    6465,
                    6467,
                    6459
                ],
                "v.items": [
                    6462
                ],
                "self.replace": [
                    6543,
                    6471
                ],
                "src": [
                    6498,
                    6500,
                    6503,
                    6484,
                    6489
                ],
                "keys_len": [
                    6499,
                    6501
                ],
                "convert": [
                    6508,
                    6501
                ],
                "new_data.replace": [
                    6554,
                    6502
                ],
                "self._data.replace_list": [
                    6521
                ],
                "self._data.replace": [
                    6529,
                    6563
                ],
                "is_re_compilable": [
                    6534
                ],
                "_maybe_transposed_self": [
                    6785,
                    6787,
                    6792,
                    6797,
                    6798,
                    6832,
                    6837,
                    6809,
                    6811,
                    6780,
                    6782
                ],
                "_maybe_transposed_self._get_axis_number": [
                    6785
                ],
                "_maybe_transposed_self.ndim": [
                    6787
                ],
                "alt_ax": [
                    6809,
                    6811,
                    6788,
                    6790
                ],
                "_maybe_transposed_self.index": [
                    6792
                ],
                "get": [
                    6797
                ],
                "_maybe_transposed_self._data.get_dtype_counts": [
                    6797
                ],
                "_maybe_transposed_self._data": [
                    6832,
                    6797
                ],
                "_maybe_transposed_self.T": [
                    6798
                ],
                "np.arange": [
                    6809
                ],
                "_maybe_transposed_self._get_axis": [
                    6809,
                    6811
                ],
                "methods": [
                    6818,
                    6812
                ],
                "is_numeric_or_datetime": [
                    6818,
                    6813
                ],
                "is_datetime64_any_dtype": [
                    9714,
                    6815
                ],
                "isna": [
                    7171,
                    7172,
                    7206,
                    7177,
                    6826,
                    11114,
                    11149,
                    7310,
                    7312,
                    6997,
                    7094,
                    7098,
                    7004
                ],
                "data.interpolate": [
                    6833
                ],
                "limit_direction": [
                    6839
                ],
                "limit_area": [
                    6840
                ],
                "T._data": [
                    6848
                ],
                "res.T": [
                    6853
                ],
                "where": [
                    6978,
                    7011,
                    6982,
                    7015,
                    7017,
                    6955,
                    6956,
                    7023,
                    6992,
                    7007,
                    7001,
                    7002,
                    6971,
                    6975
                ],
                "Timestamp": [
                    9728,
                    6956,
                    9717,
                    9727
                ],
                "self.index.is_monotonic": [
                    6958
                ],
                "is_series": [
                    6979,
                    8458,
                    8396,
                    6991,
                    8336,
                    6961,
                    6962,
                    8399,
                    8345,
                    8350,
                    7004,
                    7006
                ],
                "subset": [
                    7206,
                    7181,
                    7182,
                    7184,
                    7185,
                    7216,
                    6963,
                    6966,
                    6967,
                    6968,
                    6969,
                    7004
                ],
                "is_list": [
                    7008,
                    7025,
                    7002,
                    6971,
                    6972
                ],
                "start": [
                    6976,
                    6978,
                    6973,
                    8062,
                    8063
                ],
                "PeriodIndex": [
                    8963,
                    6974
                ],
                "ordinal": [
                    6975
                ],
                "Period": [
                    6975
                ],
                "self.index.freq": [
                    6975
                ],
                "start.ordinal": [
                    6976
                ],
                "np.float64": [
                    6982
                ],
                "np.nan": [
                    7011,
                    8739,
                    10052,
                    7015,
                    6983,
                    8519,
                    9738,
                    7024,
                    10065,
                    7188,
                    8470,
                    10039,
                    8765,
                    10078,
                    7007
                ],
                "self.index.searchsorted": [
                    6992,
                    8003,
                    8062
                ],
                "self._values": [
                    6996,
                    10293
                ],
                "nulls": [
                    7017,
                    7004,
                    7005
                ],
                "self.isna": [
                    7004
                ],
                "nulls.all": [
                    7005
                ],
                "DataFrame": [
                    7011
                ],
                "self.index.asof_locs": [
                    7017
                ],
                "nulls.values": [
                    7017
                ],
                "d.copy": [
                    7022
                ],
                "data.index": [
                    7023
                ],
                "data.loc": [
                    7024
                ],
                "data.iloc": [
                    7025
                ],
                "notna": [
                    7168,
                    7164,
                    8452
                ],
                "np.any": [
                    7171,
                    7172,
                    7310,
                    7312,
                    7187
                ],
                "upper": [
                    7331,
                    7172,
                    7335,
                    7180,
                    7181,
                    7182,
                    7312,
                    7313,
                    7316,
                    7317,
                    7318,
                    7322,
                    7324
                ],
                "np.errstate": [
                    7179
                ],
                "self.to_numpy": [
                    7184,
                    7181
                ],
                "result.where": [
                    7185,
                    7182
                ],
                "threshold": [
                    7201,
                    7203,
                    7204,
                    7206,
                    7211,
                    7213,
                    7215,
                    7216
                ],
                "is_number": [
                    7201,
                    7321,
                    7322
                ],
                "method.__name__": [
                    7202
                ],
                "self._clip_with_scalar": [
                    7324,
                    7203,
                    7204
                ],
                "_align_method_FRAME": [
                    7215
                ],
                "nv.validate_clip_with_axis": [
                    7301
                ],
                "result._clip_with_one_bound": [
                    7328,
                    7334
                ],
                "self.ge": [
                    7329
                ],
                "self.le": [
                    7335
                ],
                "asfreq": [
                    7503
                ],
                "freq": [
                    8960,
                    9732,
                    8965,
                    8872,
                    8970,
                    8877,
                    8976,
                    7505,
                    8946,
                    8947,
                    9712,
                    8949,
                    8950,
                    8952,
                    9916,
                    9917,
                    9726,
                    8959
                ],
                "how": [
                    7507,
                    10293
                ],
                "normalize": [
                    7508
                ],
                "index.indexer_at_time": [
                    7564
                ],
                "time": [
                    7564
                ],
                "asof": [
                    7564
                ],
                "index.indexer_between_time": [
                    7641
                ],
                "start_time": [
                    7642
                ],
                "end_time": [
                    7643
                ],
                "include_start": [
                    7644
                ],
                "include_end": [
                    7645
                ],
                "resample": [
                    7932
                ],
                "rule": [
                    7934
                ],
                "closed": [
                    7936,
                    10203,
                    10214
                ],
                "kind": [
                    7938
                ],
                "loffset": [
                    7939
                ],
                "convention": [
                    7940
                ],
                "base": [
                    7941
                ],
                "on": [
                    10201,
                    10212,
                    7942
                ],
                "DatetimeIndex": [
                    9341,
                    9171,
                    8053,
                    7991
                ],
                "offset": [
                    8001,
                    8061,
                    8059,
                    7997,
                    7998
                ],
                "to_offset": [
                    8960,
                    8059,
                    8964,
                    7997
                ],
                "end_date": [
                    8002,
                    8003,
                    7998
                ],
                "end": [
                    8006,
                    8003,
                    8004,
                    7998
                ],
                "offset.is_anchored": [
                    8001
                ],
                "start_date": [
                    8061,
                    8062
                ],
                "na_option": [
                    8168,
                    8158
                ],
                "ranks": [
                    8163,
                    8172,
                    8171
                ],
                "algos.rank": [
                    8163
                ],
                "algos": [
                    8163
                ],
                "data.values": [
                    8164
                ],
                "pct": [
                    8169
                ],
                "data._construct_axes_dict": [
                    8171
                ],
                "ranks.__finalize__": [
                    8172
                ],
                "numeric_only": [
                    11011,
                    11045,
                    8176,
                    8180,
                    8182,
                    11067
                ],
                "ranker": [
                    8178,
                    8187
                ],
                "self._get_numeric_data": [
                    9987,
                    8183
                ],
                "missing.clean_fill_method": [
                    8250
                ],
                "broadcast_axis": [
                    8252
                ],
                "other.ndim": [
                    8252,
                    8516
                ],
                "cons": [
                    8256,
                    8257,
                    8274,
                    8275
                ],
                "self._constructor_expanddim": [
                    8256
                ],
                "other.columns": [
                    8345,
                    8258,
                    8347
                ],
                "df._align_frame": [
                    8260
                ],
                "fill_axis": [
                    8454,
                    8269,
                    8302,
                    8368,
                    8371,
                    8314,
                    8287
                ],
                "other._constructor_expanddim": [
                    8274
                ],
                "self._align_frame": [
                    8293,
                    8278
                ],
                "self._align_series": [
                    8305
                ],
                "join_index": [
                    8449,
                    8332,
                    8461,
                    8462,
                    8463,
                    8340,
                    8351,
                    8353,
                    8360,
                    8377,
                    8378,
                    8379,
                    8405,
                    8407,
                    8411,
                    8412,
                    8418,
                    8421,
                    8426,
                    8429,
                    8432,
                    8437
                ],
                "join_columns": [
                    8360,
                    8353,
                    8346,
                    8332
                ],
                "ilidx": [
                    8353,
                    8340,
                    8333,
                    8351
                ],
                "iridx": [
                    8360,
                    8340,
                    8333
                ],
                "clidx": [
                    8353,
                    8346,
                    8334
                ],
                "cridx": [
                    8360,
                    8346,
                    8334
                ],
                "self.index.equals": [
                    8339,
                    8404,
                    8420
                ],
                "other.index": [
                    8420,
                    8422,
                    8431,
                    8433,
                    8339,
                    8404,
                    8341,
                    8408
                ],
                "self.index.join": [
                    8340,
                    8421,
                    8407
                ],
                "self.columns.equals": [
                    8345,
                    8431
                ],
                "self.columns.join": [
                    8432,
                    8346
                ],
                "left": [
                    8355,
                    8454,
                    8459,
                    8460,
                    8462,
                    8367,
                    8368,
                    8465,
                    8375,
                    8376,
                    8378,
                    8411,
                    8444,
                    8381
                ],
                "self._reindex_with_indexers": [
                    8355
                ],
                "right": [
                    8449,
                    8359,
                    8455,
                    8460,
                    8463,
                    8465,
                    8370,
                    8371,
                    8376,
                    8379,
                    8412,
                    8381,
                    8447
                ],
                "other._reindex_with_indexers": [
                    8359
                ],
                "self._ensure_type": [
                    9912,
                    8370,
                    8367
                ],
                "left.fillna": [
                    8368,
                    8454
                ],
                "right.fillna": [
                    8371,
                    8455
                ],
                "is_datetime64tz_dtype": [
                    8459,
                    8375
                ],
                "left.index": [
                    8459,
                    8460,
                    8462,
                    8375,
                    8376,
                    8378
                ],
                "left.index.tz": [
                    8376,
                    8460
                ],
                "right.index.tz": [
                    8376,
                    8460
                ],
                "right.index": [
                    8376,
                    8379,
                    8460,
                    8463
                ],
                "left.__finalize__": [
                    8465,
                    8381
                ],
                "right.__finalize__": [
                    8465,
                    8381
                ],
                "lidx": [
                    8419,
                    8421,
                    8425,
                    8426,
                    8430,
                    8432,
                    8436,
                    8405,
                    8437,
                    8407,
                    8411
                ],
                "ridx": [
                    8419,
                    8421,
                    8430,
                    8432,
                    8405,
                    8407,
                    8412,
                    8446
                ],
                "self._reindex_indexer": [
                    8411
                ],
                "other._reindex_indexer": [
                    8412
                ],
                "fdata": [
                    8416,
                    8426,
                    8437,
                    8441,
                    8442,
                    8444
                ],
                "fdata.reindex_indexer": [
                    8426,
                    8437
                ],
                "fdata.copy": [
                    8442
                ],
                "other.reindex": [
                    8449
                ],
                "fill_na": [
                    8452,
                    8453
                ],
                "cond": [
                    8588,
                    8600,
                    8484,
                    8485,
                    8486,
                    8488,
                    8489,
                    8490,
                    8492,
                    8749,
                    8496,
                    8500,
                    8502,
                    8503,
                    8504,
                    8505,
                    8509,
                    8774,
                    8777,
                    8778,
                    8781,
                    8540,
                    8549
                ],
                "com.apply_if_callable": [
                    8747,
                    8484,
                    8774
                ],
                "cond.align": [
                    8486
                ],
                "np.asanyarray": [
                    8489
                ],
                "cond.shape": [
                    8490
                ],
                "cond.fillna": [
                    8496
                ],
                "msg.format": [
                    8507,
                    8503
                ],
                "cond.dtype": [
                    8503
                ],
                "cond.empty": [
                    8504
                ],
                "dt": [
                    8505,
                    8506,
                    8507
                ],
                "cond.dtypes": [
                    8505
                ],
                "try_quick": [
                    8512,
                    8552
                ],
                "self.align": [
                    8518
                ],
                "InvalidIndexError": [
                    8526
                ],
                "other.shape": [
                    8536
                ],
                "icond": [
                    8555,
                    8540,
                    8549
                ],
                "cond.values": [
                    8540
                ],
                "np.array": [
                    8545,
                    8778,
                    9684
                ],
                "new_other": [
                    8553,
                    8554,
                    8555,
                    8556
                ],
                "new_other.copy": [
                    8554
                ],
                "align": [
                    8576,
                    8601,
                    8578,
                    8590
                ],
                "block_axis": [
                    8962,
                    8580,
                    8871,
                    8967,
                    8874,
                    8592,
                    8976,
                    8604
                ],
                "self._check_inplace_setting": [
                    8586
                ],
                "self._data.putmask": [
                    8587
                ],
                "self._data.where": [
                    8598
                ],
                "try_cast": [
                    8786,
                    8603,
                    8749
                ],
                "self._where": [
                    8748
                ],
                "periods": [
                    9916,
                    8868,
                    8902,
                    8967,
                    8905,
                    8874,
                    8906,
                    8907,
                    8877,
                    8909,
                    8910,
                    8976,
                    8956
                ],
                "self._data.shift": [
                    8873
                ],
                "self.tshift": [
                    8877
                ],
                "vslicer": [
                    8912,
                    8906,
                    8909
                ],
                "islicer": [
                    8913,
                    8907,
                    8910
                ],
                "new_obj": [
                    8912,
                    8914,
                    8916
                ],
                "self._slice": [
                    8912
                ],
                "shifted_axis": [
                    8913,
                    8914
                ],
                "new_obj.set_axis": [
                    8914
                ],
                "new_obj.__finalize__": [
                    8916
                ],
                "orig_freq": [
                    8968,
                    8971,
                    8964,
                    8965
                ],
                "index.freq": [
                    8964
                ],
                "new_data.axes": [
                    8976,
                    8967
                ],
                "index.shift": [
                    8976,
                    8967
                ],
                "freq.rule_code": [
                    8970
                ],
                "orig_freq.rule_code": [
                    8971
                ],
                "ax.is_monotonic_increasing": [
                    9107
                ],
                "ax.is_monotonic_decreasing": [
                    9107
                ],
                "ax.is_all_dates": [
                    9112
                ],
                "before": [
                    9120,
                    9123,
                    9127,
                    9115,
                    9118,
                    9119
                ],
                "to_datetime": [
                    9115,
                    9116
                ],
                "after": [
                    9120,
                    9123,
                    9127,
                    9116,
                    9118,
                    9119
                ],
                "ax.truncate": [
                    9127
                ],
                "result.copy": [
                    9130
                ],
                "ax_name": [
                    9168,
                    9338,
                    9336,
                    9166
                ],
                "tz": [
                    9728,
                    9185,
                    9350,
                    9355,
                    9727,
                    9171,
                    9715,
                    9173,
                    9718,
                    9720,
                    9722,
                    9180,
                    9341,
                    9343
                ],
                "ax.tz_convert": [
                    9173
                ],
                "ax._get_level_number": [
                    9179,
                    9349
                ],
                "new_level": [
                    9180,
                    9181,
                    9350,
                    9351
                ],
                "_tz_convert": [
                    9185,
                    9180
                ],
                "ax.levels": [
                    9180,
                    9350
                ],
                "ax.set_levels": [
                    9181,
                    9351
                ],
                "ax.name": [
                    9353,
                    9183
                ],
                "result.set_axis": [
                    9188,
                    9358
                ],
                "nonexistent_options": [
                    9320,
                    9321
                ],
                "nonexistent": [
                    9350,
                    9321,
                    9322,
                    9355,
                    9343
                ],
                "ax.tz_localize": [
                    9343
                ],
                "ambiguous": [
                    9355,
                    9350,
                    9343
                ],
                "_tz_localize": [
                    9355,
                    9350
                ],
                "np.abs": [
                    9992,
                    9430
                ],
                "self.columns.size": [
                    9669
                ],
                "percentiles": [
                    9700,
                    9672,
                    9674,
                    9677,
                    9680,
                    9681,
                    9682,
                    9684,
                    9687,
                    9688,
                    9690,
                    9692
                ],
                "validate_percentile": [
                    9677
                ],
                "percentiles.append": [
                    9681
                ],
                "np.asarray": [
                    9682,
                    11130
                ],
                "unique_pcts": [
                    9688,
                    9690,
                    9687
                ],
                "np.unique": [
                    9687
                ],
                "formatted_percentiles": [
                    9696,
                    9692
                ],
                "format_percentiles": [
                    9692
                ],
                "stat_index": [
                    9703,
                    9695
                ],
                "series.count": [
                    9699
                ],
                "series": [
                    9699,
                    9700,
                    9701,
                    9703
                ],
                "series.mean": [
                    9699
                ],
                "series.std": [
                    9699
                ],
                "series.min": [
                    9699
                ],
                "tolist": [
                    9700
                ],
                "series.quantile": [
                    9700
                ],
                "series.max": [
                    9701
                ],
                "series.name": [
                    9703
                ],
                "objcounts": [
                    9712,
                    9707,
                    9708
                ],
                "data.value_counts": [
                    9707
                ],
                "count_unique": [
                    9708,
                    9709
                ],
                "data.count": [
                    9709
                ],
                "top": [
                    9732,
                    9712,
                    9717,
                    9718,
                    9720,
                    9722,
                    9725
                ],
                "objcounts.index": [
                    9712
                ],
                "objcounts.iloc": [
                    9712
                ],
                "data.dt.tz": [
                    9715
                ],
                "data.dt": [
                    9715
                ],
                "asint": [
                    9728,
                    9716,
                    9727
                ],
                "values.view": [
                    9716
                ],
                "data.dropna": [
                    9716
                ],
                "top.tzinfo": [
                    9718
                ],
                "top.tz_convert": [
                    9720
                ],
                "top.tz_localize": [
                    9722
                ],
                "asint.min": [
                    9727
                ],
                "asint.max": [
                    9728
                ],
                "data.name": [
                    9741
                ],
                "describe_categorical_1d": [
                    9745,
                    9751
                ],
                "describe_numeric_1d": [
                    9747,
                    9749
                ],
                "describe_1d": [
                    9768,
                    9754
                ],
                "include": [
                    9760,
                    9755,
                    9766
                ],
                "exclude": [
                    9761,
                    9755,
                    9766
                ],
                "self.select_dtypes": [
                    9757,
                    9766
                ],
                "np.number": [
                    9757
                ],
                "data.columns": [
                    9778,
                    9758
                ],
                "ldesc": [
                    9768,
                    9777,
                    9771
                ],
                "data.items": [
                    9768
                ],
                "ldesc_indexes": [
                    9771,
                    9772
                ],
                "x.index": [
                    9771
                ],
                "idxnames": [
                    9772,
                    9773
                ],
                "names.append": [
                    9775
                ],
                "x.reindex": [
                    9777
                ],
                "d.columns": [
                    9778
                ],
                "data.columns.copy": [
                    9778
                ],
                "fill_method": [
                    9913,
                    9909
                ],
                "data.div": [
                    9916
                ],
                "data.shift": [
                    9916
                ],
                "rs.loc": [
                    9920
                ],
                "rs.index.duplicated": [
                    9920
                ],
                "rs.index": [
                    9920
                ],
                "rs.reindex_like": [
                    9921
                ],
                "grouped": [
                    9928,
                    9929,
                    9933,
                    9927
                ],
                "self.groupby": [
                    9927
                ],
                "skipna": [
                    9985,
                    11010,
                    9992,
                    11145,
                    11038,
                    11039,
                    11043,
                    9980,
                    11045,
                    11058,
                    11059,
                    11188,
                    11064,
                    11193,
                    11067,
                    9928,
                    9932,
                    11096,
                    11103,
                    10998,
                    10999,
                    11126,
                    11004,
                    9981
                ],
                "applyf": [
                    9932,
                    9933
                ],
                "grouped.aggregate": [
                    9933
                ],
                "axis_descr": [
                    10117,
                    10001,
                    10130,
                    11025,
                    10012,
                    10141,
                    10022,
                    10150,
                    11175,
                    11052,
                    10034,
                    10163,
                    10047,
                    10313,
                    10060,
                    10318,
                    11090,
                    9941,
                    10073,
                    9948,
                    10977,
                    10087,
                    9960,
                    10099,
                    9973,
                    10108
                ],
                "name2": [
                    10116,
                    10000,
                    10129,
                    11024,
                    10011,
                    10140,
                    10021,
                    10149,
                    11174,
                    11052,
                    10033,
                    10162,
                    10046,
                    10059,
                    10317,
                    10318,
                    11089,
                    9941,
                    10072,
                    9947,
                    10976,
                    10086,
                    9959,
                    10098,
                    9972,
                    10107
                ],
                "_doc_parms": [
                    9941
                ],
                "cls.any": [
                    9943
                ],
                "_make_logical_function": [
                    9955,
                    9943
                ],
                "_any_desc": [
                    10772,
                    9949
                ],
                "nanops.nanany": [
                    9950
                ],
                "nanops": [
                    9962,
                    10026,
                    10090,
                    10122,
                    10154,
                    10110,
                    10132,
                    10005,
                    10101,
                    10167,
                    10143,
                    9950,
                    10015
                ],
                "_any_see_also": [
                    10762,
                    9951
                ],
                "_any_examples": [
                    9952,
                    10779
                ],
                "cls.all": [
                    9955
                ],
                "_all_desc": [
                    10408,
                    9961
                ],
                "nanops.nanall": [
                    9962
                ],
                "_all_see_also": [
                    9963,
                    10461
                ],
                "_all_examples": [
                    9964,
                    10415
                ],
                "self._agg_by_level": [
                    9985,
                    11043,
                    11188,
                    11063,
                    11003
                ],
                "demeaned": [
                    9992,
                    9989,
                    9991
                ],
                "data.mean": [
                    9989,
                    9991
                ],
                "data.sub": [
                    9991
                ],
                "mean": [
                    9992
                ],
                "_num_doc": [
                    10321,
                    9978,
                    10982,
                    11030
                ],
                "cls.mad": [
                    9994
                ],
                "mad": [
                    9994
                ],
                "cls.sem": [
                    9996
                ],
                "_make_stat_function_ddof": [
                    10017,
                    9996,
                    10007
                ],
                "nanops.nansem": [
                    10005
                ],
                "cls.var": [
                    10007
                ],
                "nanops.nanvar": [
                    10015
                ],
                "cls.std": [
                    10017
                ],
                "nanops.nanstd": [
                    10026
                ],
                "cls.cummin": [
                    10029
                ],
                "_make_cum_function": [
                    10042,
                    10068,
                    10029,
                    10055
                ],
                "np.minimum.accumulate": [
                    11116,
                    10036,
                    11128
                ],
                "np.minimum": [
                    11116,
                    10036,
                    11128
                ],
                "_cummin_examples": [
                    10040,
                    10502
                ],
                "cls.cumsum": [
                    10042
                ],
                "np.cumsum": [
                    10049
                ],
                "_cumsum_examples": [
                    10053,
                    10567
                ],
                "cls.cumprod": [
                    10055
                ],
                "np.cumprod": [
                    10062
                ],
                "_cumprod_examples": [
                    10632,
                    10066
                ],
                "cls.cummax": [
                    10068
                ],
                "np.maximum.accumulate": [
                    10075
                ],
                "np.maximum": [
                    10075
                ],
                "_cummax_examples": [
                    10697,
                    10079
                ],
                "cls.sum": [
                    10082
                ],
                "_make_min_count_stat_function": [
                    10082,
                    10125
                ],
                "nanops.nansum": [
                    10090
                ],
                "_stat_func_see_also": [
                    10168,
                    10091,
                    10155,
                    10919
                ],
                "_sum_examples": [
                    10889,
                    10092,
                    10885
                ],
                "cls.mean": [
                    10094
                ],
                "_make_stat_function": [
                    10112,
                    10145,
                    10094,
                    10158,
                    10103,
                    10136
                ],
                "nanops.nanmean": [
                    10101
                ],
                "cls.skew": [
                    10103
                ],
                "nanops.nanskew": [
                    10110
                ],
                "cls.kurt": [
                    10112,
                    10124
                ],
                "nanops.nankurt": [
                    10122
                ],
                "cls.kurtosis": [
                    10124
                ],
                "cls.prod": [
                    10125,
                    10135
                ],
                "nanops.nanprod": [
                    10132
                ],
                "_prod_examples": [
                    10133,
                    10934
                ],
                "cls.product": [
                    10135
                ],
                "cls.median": [
                    10136
                ],
                "nanops.nanmedian": [
                    10143
                ],
                "cls.max": [
                    10145
                ],
                "nanops.nanmax": [
                    10154
                ],
                "_max_examples": [
                    10156,
                    10911
                ],
                "cls.min": [
                    10158
                ],
                "nanops.nanmin": [
                    10167
                ],
                "_min_examples": [
                    10169,
                    10915
                ],
                "win_type": [
                    10200,
                    10194,
                    10211
                ],
                "Window": [
                    10195
                ],
                "window": [
                    10208,
                    10197
                ],
                "min_periods": [
                    10222,
                    10209,
                    10245,
                    10198
                ],
                "center": [
                    10210,
                    10222,
                    10199
                ],
                "Rolling": [
                    10181,
                    10206
                ],
                "Rolling.__doc__": [
                    10181
                ],
                "cls.rolling": [
                    10217
                ],
                "rolling": [
                    10217
                ],
                "Expanding": [
                    10219,
                    10222
                ],
                "Expanding.__doc__": [
                    10219
                ],
                "cls.expanding": [
                    10224
                ],
                "expanding": [
                    10224
                ],
                "EWM": [
                    10226,
                    10239
                ],
                "span": [
                    10242
                ],
                "halflife": [
                    10243
                ],
                "alpha": [
                    10244
                ],
                "adjust": [
                    10246
                ],
                "ignore_na": [
                    10247
                ],
                "EWM.__doc__": [
                    10226
                ],
                "cls.ewm": [
                    10251
                ],
                "ewm": [
                    10251
                ],
                "self.agg": [
                    10255
                ],
                "idxpos": [
                    10296,
                    10293,
                    10294
                ],
                "find_valid_index": [
                    10293
                ],
                "self._find_valid_index": [
                    10308,
                    10302
                ],
                "cls._constructor_sliced.__name__": [
                    10316
                ],
                "cls._constructor_sliced": [
                    10316
                ],
                "cls.__name__": [
                    10317
                ],
                "_num_ddof_doc": [
                    10347,
                    11053
                ],
                "_bool_doc": [
                    10370,
                    11180
                ],
                "_cnum_doc": [
                    10468,
                    11094
                ],
                "_min_count_stub": [
                    10978,
                    10957
                ],
                "nv.validate_sum": [
                    10993
                ],
                "nv.validate_prod": [
                    10995
                ],
                "nv.validate_stat_func": [
                    11037,
                    10997
                ],
                "min_count": [
                    11004,
                    11012
                ],
                "self._reduce": [
                    11066,
                    11044,
                    11189,
                    11006
                ],
                "desc": [
                    11172,
                    11052,
                    11022,
                    11087,
                    10974
                ],
                "name1": [
                    11173,
                    11052,
                    11023,
                    11088,
                    10975
                ],
                "see_also": [
                    11027,
                    10979,
                    11176
                ],
                "examples": [
                    11177,
                    10980,
                    11028,
                    11092
                ],
                "set_function_name": [
                    11015,
                    11048,
                    11070,
                    11165,
                    11198
                ],
                "stat_func": [
                    11048,
                    11070,
                    11015
                ],
                "nv.validate_median": [
                    11035
                ],
                "nv.validate_stat_ddof_func": [
                    11057
                ],
                "ddof": [
                    11064,
                    11067
                ],
                "nv.validate_cum_func_with_skipna": [
                    11096
                ],
                "cum_func": [
                    11165,
                    11103
                ],
                "blk_values.dtype.kind": [
                    11107
                ],
                "blk_values.dtype": [
                    11146,
                    11107,
                    11111
                ],
                "blk_values": [
                    11107,
                    11139,
                    11111,
                    11143,
                    11114,
                    11146,
                    11148,
                    11118,
                    11122,
                    11154
                ],
                "accum_func": [
                    11116,
                    11151,
                    11154,
                    11125,
                    11128
                ],
                "y": [
                    11137,
                    11118,
                    11119,
                    11122,
                    11125
                ],
                "blk_values.view": [
                    11118
                ],
                "np.iinfo": [
                    11119
                ],
                "np.int64": [
                    11119
                ],
                "changed": [
                    11120,
                    11123,
                    11135
                ],
                "y.view": [
                    11125
                ],
                "np.putmask": [
                    11152,
                    11150,
                    11127
                ],
                "iNaT": [
                    11137,
                    11133,
                    11127
                ],
                "nz": [
                    11130,
                    11131,
                    11133
                ],
                "nonzero": [
                    11130
                ],
                "result.view": [
                    11140
                ],
                "_from_sequence": [
                    11143
                ],
                "blk_values.dtype.type": [
                    11146
                ],
                "np.integer": [
                    11146
                ],
                "vals": [
                    11148,
                    11149,
                    11150,
                    11151
                ],
                "blk_values.copy": [
                    11148
                ],
                "mask_a": [
                    11150
                ],
                "mask_b": [
                    11152
                ],
                "blk_values.T": [
                    11154
                ],
                "result.T": [
                    11157
                ],
                "self._data.apply": [
                    11159
                ],
                "na_accum_func": [
                    11159
                ],
                "accum_func_name": [
                    11091
                ],
                "nv.validate_logical_func": [
                    11182
                ],
                "bool_only": [
                    11184,
                    11194
                ],
                "empty_value": [
                    11178
                ],
                "logical_func": [
                    11198
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_92/pandas/core/indexes/period.py": {
            "buggy_functions": [
                {
                    "function_name": "searchsorted",
                    "function_code": "@Substitution(klass=\"PeriodIndex\")\n@Appender(_shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    if isinstance(value, Period):\n        if value.freq != self.freq:\n            raise raise_on_incompatible(self, value)\n        value = value.ordinal\n    elif isinstance(value, str):\n        try:\n            value = Period(value, freq=self.freq).ordinal\n        except DateParseError:\n            raise KeyError(f\"Cannot interpret '{value}' as period\")\n\n    return self._ndarray_values.searchsorted(value, side=side, sorter=sorter)\n",
                    "decorators": [
                        "Substitution(klass='PeriodIndex')",
                        "Appender(_shared_docs['searchsorted'])"
                    ],
                    "docstring": null,
                    "start_line": 469,
                    "variables": {
                        "isinstance": [
                            472,
                            476
                        ],
                        "value": [
                            480,
                            482,
                            472,
                            473,
                            474,
                            475,
                            476,
                            478
                        ],
                        "Period": [
                            472,
                            478
                        ],
                        "value.freq": [
                            473
                        ],
                        "self.freq": [
                            473,
                            478
                        ],
                        "self": [
                            473,
                            474,
                            482,
                            478
                        ],
                        "raise_on_incompatible": [
                            474
                        ],
                        "value.ordinal": [
                            475
                        ],
                        "str": [
                            476
                        ],
                        "ordinal": [
                            478
                        ],
                        "DateParseError": [
                            479
                        ],
                        "KeyError": [
                            480
                        ],
                        "self._ndarray_values.searchsorted": [
                            482
                        ],
                        "self._ndarray_values": [
                            482
                        ],
                        "side": [
                            482
                        ],
                        "sorter": [
                            482
                        ],
                        "Substitution": [
                            469
                        ],
                        "Appender": [
                            470
                        ],
                        "_shared_docs": [
                            470
                        ]
                    },
                    "filtered_variables": {
                        "value": [
                            480,
                            482,
                            472,
                            473,
                            474,
                            475,
                            476,
                            478
                        ],
                        "Period": [
                            472,
                            478
                        ],
                        "value.freq": [
                            473
                        ],
                        "self.freq": [
                            473,
                            478
                        ],
                        "self": [
                            473,
                            474,
                            482,
                            478
                        ],
                        "raise_on_incompatible": [
                            474
                        ],
                        "value.ordinal": [
                            475
                        ],
                        "ordinal": [
                            478
                        ],
                        "DateParseError": [
                            479
                        ],
                        "self._ndarray_values.searchsorted": [
                            482
                        ],
                        "self._ndarray_values": [
                            482
                        ],
                        "side": [
                            482
                        ],
                        "sorter": [
                            482
                        ],
                        "Substitution": [
                            469
                        ],
                        "Appender": [
                            470
                        ],
                        "_shared_docs": [
                            470
                        ]
                    },
                    "diff_line_number": 472,
                    "class_data": {
                        "signature": "class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin)",
                        "docstring": "Immutable ndarray holding ordinal values indicating regular periods in time.\n\nIndex keys are boxed to Period objects which carries the metadata (eg,\nfrequency information).\n\nParameters\n----------\ndata : array-like (1d int np.ndarray or PeriodArray), optional\n    Optional period-like data to construct index with.\ncopy : bool\n    Make a copy of input ndarray.\nfreq : str or period object, optional\n    One of pandas period strings or corresponding objects\nyear : int, array, or Series, default None\nmonth : int, array, or Series, default None\nquarter : int, array, or Series, default None\nday : int, array, or Series, default None\nhour : int, array, or Series, default None\nminute : int, array, or Series, default None\nsecond : int, array, or Series, default None\ntz : object, default None\n    Timezone for converting datetime64 data to Periods.\ndtype : str or PeriodDtype, default None\n\nAttributes\n----------\nday\ndayofweek\ndayofyear\ndays_in_month\ndaysinmonth\nend_time\nfreq\nfreqstr\nhour\nis_leap_year\nminute\nmonth\nquarter\nqyear\nsecond\nstart_time\nweek\nweekday\nweekofyear\nyear\n\nMethods\n-------\nasfreq\nstrftime\nto_timestamp\n\nSee Also\n--------\nIndex : The base pandas Index type.\nPeriod : Represents a period of time.\nDatetimeIndex : Index with datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nperiod_range : Create a fixed-frequency PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)",
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields):\n    valid_field_set = {'year', 'month', 'day', 'quarter', 'hour', 'minute', 'second'}\n    if not set(fields).issubset(valid_field_set):\n        argument = list(set(fields) - valid_field_set)[0]\n        raise TypeError(f'__new__() got an unexpected keyword argument {argument}')\n    name = maybe_extract_name(name, data, cls)\n    if data is None and ordinal is None:\n        data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n        freq = freq2\n        data = PeriodArray(data, freq=freq)\n    else:\n        freq = validate_dtype_freq(dtype, freq)\n        if freq and isinstance(data, cls) and (data.freq != freq):\n            data = data.asfreq(freq)\n        if data is None and ordinal is not None:\n            ordinal = np.asarray(ordinal, dtype=np.int64)\n            data = PeriodArray(ordinal, freq)\n        else:\n            data = period_array(data=data, freq=freq)\n    if copy:\n        data = data.copy()\n    return cls._simple_new(data, name=name)",
                            "@classmethod\ndef _simple_new(cls, values, name=None, freq=None, **kwargs):\n    \"\"\"\n    Create a new PeriodIndex.\n\n    Parameters\n    ----------\n    values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n        Values that can be converted to a PeriodArray without inference\n        or coercion.\n\n    \"\"\"\n    if isinstance(values, list):\n        values = np.asarray(values)\n    if is_float_dtype(values):\n        raise TypeError('PeriodIndex._simple_new does not accept floats.')\n    if freq:\n        freq = Period._maybe_convert_freq(freq)\n    values = PeriodArray(values, freq=freq)\n    if not isinstance(values, PeriodArray):\n        raise TypeError('PeriodIndex._simple_new only accepts PeriodArray')\n    result = object.__new__(cls)\n    result._data = values\n    result._index_data = values._data\n    result.name = name\n    result._reset_identity()\n    return result",
                            "@property\ndef values(self):\n    return np.asarray(self)",
                            "def _shallow_copy(self, values=None, **kwargs):\n    if values is None:\n        values = self._data\n    if isinstance(values, type(self)):\n        values = values._data\n    if not isinstance(values, PeriodArray):\n        if isinstance(values, np.ndarray) and values.dtype == 'i8':\n            values = PeriodArray(values, freq=self.freq)\n        else:\n            raise TypeError(type(values), getattr(values, 'dtype', None))\n    validate_dtype_freq(self.dtype, kwargs.get('freq'))\n    attributes = self._get_attributes_dict()\n    attributes.update(kwargs)\n    if not len(values) and 'dtype' not in kwargs:\n        attributes['dtype'] = self.dtype\n    return self._simple_new(values, **attributes)",
                            "def _shallow_copy_with_infer(self, values=None, **kwargs):\n    \"\"\" we always want to return a PeriodIndex \"\"\"\n    return self._shallow_copy(values=values, **kwargs)",
                            "@property\ndef _box_func(self):\n    \"\"\"Maybe box an ordinal or Period\"\"\"\n\n    def func(x):\n        if isinstance(x, Period) or x is NaT:\n            return x\n        else:\n            return Period._from_ordinal(ordinal=x, freq=self.freq)\n    return func",
                            "def _maybe_convert_timedelta(self, other):\n    \"\"\"\n    Convert timedelta-like input to an integer multiple of self.freq\n\n    Parameters\n    ----------\n    other : timedelta, np.timedelta64, DateOffset, int, np.ndarray\n\n    Returns\n    -------\n    converted : int, np.ndarray[int64]\n\n    Raises\n    ------\n    IncompatibleFrequency : if the input cannot be written as a multiple\n        of self.freq.  Note IncompatibleFrequency subclasses ValueError.\n    \"\"\"\n    if isinstance(other, (timedelta, np.timedelta64, Tick, np.ndarray)):\n        offset = frequencies.to_offset(self.freq.rule_code)\n        if isinstance(offset, Tick):\n            delta = self._data._check_timedeltalike_freq_compat(other)\n            return delta\n    elif isinstance(other, DateOffset):\n        freqstr = other.rule_code\n        base = libfrequencies.get_base_alias(freqstr)\n        if base == self.freq.rule_code:\n            return other.n\n        raise raise_on_incompatible(self, other)\n    elif is_integer(other):\n        return other\n    raise raise_on_incompatible(self, None)",
                            "def _mpl_repr(self):\n    return self.astype(object).values",
                            "@property\ndef _formatter_func(self):\n    return self.array._formatter(boxed=False)",
                            "@cache_readonly\ndef _engine(self):\n    period = weakref.ref(self)\n    return self._engine_type(period, len(self))",
                            "@Appender(_index_shared_docs['contains'])\ndef __contains__(self, key) -> bool:\n    if isinstance(key, Period):\n        if key.freq != self.freq:\n            return False\n        else:\n            return key.ordinal in self._engine\n    else:\n        try:\n            self.get_loc(key)\n            return True\n        except (TypeError, KeyError):\n            return False",
                            "@cache_readonly\ndef _int64index(self):\n    return Int64Index._simple_new(self.asi8, name=self.name)",
                            "def __array__(self, dtype=None):\n    if is_integer_dtype(dtype):\n        return self.asi8\n    else:\n        return self.astype(object).values",
                            "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc. Needs additional handling as\n    PeriodIndex stores internal data as int dtype\n\n    Replace this to __numpy_ufunc__ in future version\n    \"\"\"\n    if isinstance(context, tuple) and len(context) > 0:\n        func = context[0]\n        if func is np.add:\n            pass\n        elif func is np.subtract:\n            name = self.name\n            left = context[1][0]\n            right = context[1][1]\n            if isinstance(left, PeriodIndex) and isinstance(right, PeriodIndex):\n                name = left.name if left.name == right.name else None\n                return Index(result, name=name)\n            elif isinstance(left, Period) or isinstance(right, Period):\n                return Index(result, name=name)\n        elif isinstance(func, np.ufunc):\n            if 'M->M' not in func.types:\n                msg = f\"ufunc '{func.__name__}' not supported for the PeriodIndex\"\n                raise ValueError(msg)\n    if is_bool_dtype(result):\n        return result\n    return type(self)(result, freq=self.freq, name=self.name)",
                            "def asof_locs(self, where, mask):\n    \"\"\"\n    where : array of timestamps\n    mask : array of booleans where data is not NA\n\n    \"\"\"\n    where_idx = where\n    if isinstance(where_idx, DatetimeIndex):\n        where_idx = PeriodIndex(where_idx.values, freq=self.freq)\n    locs = self._ndarray_values[mask].searchsorted(where_idx._ndarray_values, side='right')\n    locs = np.where(locs > 0, locs - 1, 0)\n    result = np.arange(len(self))[mask].take(locs)\n    first = mask.argmax()\n    result[(locs == 0) & (where_idx._ndarray_values < self._ndarray_values[first])] = -1\n    return result",
                            "@Appender(_index_shared_docs['astype'])\ndef astype(self, dtype, copy=True, how='start'):\n    dtype = pandas_dtype(dtype)\n    if is_datetime64_any_dtype(dtype):\n        tz = getattr(dtype, 'tz', None)\n        return self.to_timestamp(how=how).tz_localize(tz)\n    return super().astype(dtype, copy=copy)",
                            "@Substitution(klass='PeriodIndex')\n@Appender(_shared_docs['searchsorted'])\ndef searchsorted(self, value, side='left', sorter=None):\n    if isinstance(value, Period):\n        if value.freq != self.freq:\n            raise raise_on_incompatible(self, value)\n        value = value.ordinal\n    elif isinstance(value, str):\n        try:\n            value = Period(value, freq=self.freq).ordinal\n        except DateParseError:\n            raise KeyError(f\"Cannot interpret '{value}' as period\")\n    return self._ndarray_values.searchsorted(value, side=side, sorter=sorter)",
                            "@property\ndef is_full(self) -> bool:\n    \"\"\"\n    Returns True if this PeriodIndex is range-like in that all Periods\n    between start and end are present, in order.\n    \"\"\"\n    if len(self) == 0:\n        return True\n    if not self.is_monotonic:\n        raise ValueError('Index is not monotonic')\n    values = self.asi8\n    return (values[1:] - values[:-1] < 2).all()",
                            "@property\ndef inferred_type(self) -> str:\n    return 'period'",
                            "def get_value(self, series, key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing\n    \"\"\"\n    s = com.values_from_object(series)\n    try:\n        return com.maybe_box(self, super().get_value(s, key), series, key)\n    except (KeyError, IndexError):\n        if isinstance(key, str):\n            asdt, parsed, reso = parse_time_string(key, self.freq)\n            grp = resolution.Resolution.get_freq_group(reso)\n            freqn = resolution.get_freq_group(self.freq)\n            vals = self._ndarray_values\n            if grp < freqn:\n                iv = Period(asdt, freq=(grp, 1))\n                ord1 = iv.asfreq(self.freq, how='S').ordinal\n                ord2 = iv.asfreq(self.freq, how='E').ordinal\n                if ord2 < vals[0] or ord1 > vals[-1]:\n                    raise KeyError(key)\n                pos = np.searchsorted(self._ndarray_values, [ord1, ord2])\n                key = slice(pos[0], pos[1] + 1)\n                return series[key]\n            elif grp == freqn:\n                key = Period(asdt, freq=self.freq).ordinal\n                return com.maybe_box(self, self._int64index.get_value(s, key), series, key)\n            else:\n                raise KeyError(key)\n        period = Period(key, self.freq)\n        key = period.value if isna(period) else period.ordinal\n        return com.maybe_box(self, self._int64index.get_value(s, key), series, key)",
                            "@Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    target = ensure_index(target)\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return no_matches\n        target = target.asi8\n        self_index = self._int64index\n    else:\n        self_index = self\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n    return Index.get_indexer(self_index, target, method, limit, tolerance)",
                            "@Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return (no_matches, no_matches)\n        target = target.asi8\n    indexer, missing = self._int64index.get_indexer_non_unique(target)\n    return (ensure_platform_int(indexer), missing)",
                            "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location for requested label\n\n    Returns\n    -------\n    loc : int\n    \"\"\"\n    try:\n        return self._engine.get_loc(key)\n    except KeyError:\n        if is_integer(key):\n            raise\n        try:\n            asdt, parsed, reso = parse_time_string(key, self.freq)\n            key = asdt\n        except TypeError:\n            pass\n        except DateParseError:\n            raise KeyError(f\"Cannot interpret '{key}' as period\")\n        try:\n            key = Period(key, freq=self.freq)\n        except ValueError:\n            raise KeyError(key)\n        try:\n            ordinal = iNaT if key is NaT else key.ordinal\n            if tolerance is not None:\n                tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n            return self._int64index.get_loc(ordinal, method, tolerance)\n        except KeyError:\n            raise KeyError(key)",
                            "def _maybe_cast_slice_bound(self, label, side, kind):\n    \"\"\"\n    If label is a string or a datetime, cast it to Period.ordinal according\n    to resolution.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'ix', 'loc', 'getitem'}\n\n    Returns\n    -------\n    bound : Period or object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n\n    \"\"\"\n    assert kind in ['ix', 'loc', 'getitem']\n    if isinstance(label, datetime):\n        return Period(label, freq=self.freq)\n    elif isinstance(label, str):\n        try:\n            _, parsed, reso = parse_time_string(label, self.freq)\n            bounds = self._parsed_string_to_bounds(reso, parsed)\n            return bounds[0 if side == 'left' else 1]\n        except ValueError:\n            raise KeyError(label)\n    elif is_integer(label) or is_float(label):\n        self._invalid_indexer('slice', label)\n    return label",
                            "def _parsed_string_to_bounds(self, reso, parsed):\n    if reso == 'year':\n        t1 = Period(year=parsed.year, freq='A')\n    elif reso == 'month':\n        t1 = Period(year=parsed.year, month=parsed.month, freq='M')\n    elif reso == 'quarter':\n        q = (parsed.month - 1) // 3 + 1\n        t1 = Period(year=parsed.year, quarter=q, freq='Q-DEC')\n    elif reso == 'day':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, freq='D')\n    elif reso == 'hour':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, freq='H')\n    elif reso == 'minute':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, minute=parsed.minute, freq='T')\n    elif reso == 'second':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, minute=parsed.minute, second=parsed.second, freq='S')\n    else:\n        raise KeyError(reso)\n    return (t1.asfreq(self.freq, how='start'), t1.asfreq(self.freq, how='end'))",
                            "def _get_string_slice(self, key):\n    if not self.is_monotonic:\n        raise ValueError('Partial indexing only valid for ordered time series')\n    key, parsed, reso = parse_time_string(key, self.freq)\n    grp = resolution.Resolution.get_freq_group(reso)\n    freqn = resolution.get_freq_group(self.freq)\n    if reso in ['day', 'hour', 'minute', 'second'] and (not grp < freqn):\n        raise KeyError(key)\n    t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n    return slice(self.searchsorted(t1.ordinal, side='left'), self.searchsorted(t2.ordinal, side='right'))",
                            "def _convert_tolerance(self, tolerance, target):\n    tolerance = DatetimeIndexOpsMixin._convert_tolerance(self, tolerance, target)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError('list-like tolerance size must match target index size')\n    return self._maybe_convert_timedelta(tolerance)",
                            "def insert(self, loc, item):\n    if not isinstance(item, Period) or self.freq != item.freq:\n        return self.astype(object).insert(loc, item)\n    idx = np.concatenate((self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8))\n    return self._shallow_copy(idx)",
                            "def join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    \"\"\"\n    See Index.join\n    \"\"\"\n    self._assert_can_do_setop(other)\n    if not isinstance(other, PeriodIndex):\n        return self.astype(object).join(other, how=how, level=level, return_indexers=return_indexers, sort=sort)\n    result = Int64Index.join(self, other, how=how, level=level, return_indexers=return_indexers, sort=sort)\n    if return_indexers:\n        result, lidx, ridx = result\n        return (self._apply_meta(result), lidx, ridx)\n    return self._apply_meta(result)",
                            "def _assert_can_do_setop(self, other):\n    super()._assert_can_do_setop(other)\n    if isinstance(other, PeriodIndex) and self.freq != other.freq:\n        raise raise_on_incompatible(self, other)",
                            "def intersection(self, other, sort=False):\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    res_name = get_op_result_name(self, other)\n    other = ensure_index(other)\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this.intersection(other, sort=sort)\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self.intersection(i8other, sort=sort)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                            "def difference(self, other, sort=None):\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    res_name = get_op_result_name(self, other)\n    other = ensure_index(other)\n    if self.equals(other):\n        return self._shallow_copy(self._data[:0])\n    if is_object_dtype(other):\n        return self.astype(object).difference(other).astype(self.dtype)\n    elif not is_dtype_equal(self.dtype, other.dtype):\n        return self\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self.difference(i8other, sort=sort)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                            "def _union(self, other, sort):\n    if not len(other) or self.equals(other) or (not len(self)):\n        return super()._union(other, sort=sort)\n    assert isinstance(other, type(self))\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this._union(other, sort=sort)\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self._union(i8other, sort=sort)\n    res_name = get_op_result_name(self, other)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                            "def _apply_meta(self, rawarr):\n    if not isinstance(rawarr, PeriodIndex):\n        rawarr = PeriodIndex._simple_new(rawarr, freq=self.freq, name=self.name)\n    return rawarr",
                            "def memory_usage(self, deep=False):\n    result = super().memory_usage(deep=deep)\n    if hasattr(self, '_cache') and '_int64index' in self._cache:\n        result += self._int64index.memory_usage(deep=deep)\n    return result",
                            "def func(x):\n    if isinstance(x, Period) or x is NaT:\n        return x\n    else:\n        return Period._from_ordinal(ordinal=x, freq=self.freq)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_infer_as_myclass",
                            "_data",
                            "_engine_type",
                            "_supports_partial_string_indexing"
                        ],
                        "class_decorators": [
                            "delegate_names(PeriodArray, PeriodDelegateMixin._delegated_properties, typ='property')",
                            "delegate_names(PeriodArray, PeriodDelegateMixin._delegated_methods, typ='method', overwrite=True)"
                        ],
                        "function_signatures": [
                            "__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
                            "_simple_new(cls, values, name=None, freq=None, **kwargs)",
                            "values(self)",
                            "_shallow_copy(self, values=None, **kwargs)",
                            "_shallow_copy_with_infer(self, values=None, **kwargs)",
                            "_box_func(self)",
                            "_maybe_convert_timedelta(self, other)",
                            "_mpl_repr(self)",
                            "_formatter_func(self)",
                            "_engine(self)",
                            "__contains__(self, key) -> bool",
                            "_int64index(self)",
                            "__array__(self, dtype=None)",
                            "__array_wrap__(self, result, context=None)",
                            "asof_locs(self, where, mask)",
                            "astype(self, dtype, copy=True, how='start')",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "is_full(self) -> bool",
                            "inferred_type(self) -> str",
                            "get_value(self, series, key)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                            "get_indexer_non_unique(self, target)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "_maybe_cast_slice_bound(self, label, side, kind)",
                            "_parsed_string_to_bounds(self, reso, parsed)",
                            "_get_string_slice(self, key)",
                            "_convert_tolerance(self, tolerance, target)",
                            "insert(self, loc, item)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_assert_can_do_setop(self, other)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_apply_meta(self, rawarr)",
                            "memory_usage(self, deep=False)",
                            "func(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                },
                {
                    "function_name": "_get_string_slice",
                    "function_code": "def _get_string_slice(self, key):\n    if not self.is_monotonic:\n        raise ValueError(\"Partial indexing only valid for ordered time series\")\n\n    key, parsed, reso = parse_time_string(key, self.freq)\n    grp = resolution.Resolution.get_freq_group(reso)\n    freqn = resolution.get_freq_group(self.freq)\n    if reso in [\"day\", \"hour\", \"minute\", \"second\"] and not grp < freqn:\n        raise KeyError(key)\n\n    t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n    return slice(\n        self.searchsorted(t1.ordinal, side=\"left\"),\n        self.searchsorted(t2.ordinal, side=\"right\"),\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 694,
                    "variables": {
                        "self.is_monotonic": [
                            695
                        ],
                        "self": [
                            704,
                            706,
                            707,
                            695,
                            698,
                            700
                        ],
                        "ValueError": [
                            696
                        ],
                        "key": [
                            698,
                            702
                        ],
                        "parsed": [
                            704,
                            698
                        ],
                        "reso": [
                            704,
                            698,
                            699,
                            701
                        ],
                        "parse_time_string": [
                            698
                        ],
                        "self.freq": [
                            698,
                            700
                        ],
                        "grp": [
                            699,
                            701
                        ],
                        "resolution.Resolution.get_freq_group": [
                            699
                        ],
                        "resolution.Resolution": [
                            699
                        ],
                        "resolution": [
                            699,
                            700
                        ],
                        "freqn": [
                            700,
                            701
                        ],
                        "resolution.get_freq_group": [
                            700
                        ],
                        "KeyError": [
                            702
                        ],
                        "t1": [
                            704,
                            706
                        ],
                        "t2": [
                            704,
                            707
                        ],
                        "self._parsed_string_to_bounds": [
                            704
                        ],
                        "slice": [
                            705
                        ],
                        "self.searchsorted": [
                            706,
                            707
                        ],
                        "t1.ordinal": [
                            706
                        ],
                        "t2.ordinal": [
                            707
                        ]
                    },
                    "filtered_variables": {
                        "self.is_monotonic": [
                            695
                        ],
                        "self": [
                            704,
                            706,
                            707,
                            695,
                            698,
                            700
                        ],
                        "key": [
                            698,
                            702
                        ],
                        "parsed": [
                            704,
                            698
                        ],
                        "reso": [
                            704,
                            698,
                            699,
                            701
                        ],
                        "parse_time_string": [
                            698
                        ],
                        "self.freq": [
                            698,
                            700
                        ],
                        "grp": [
                            699,
                            701
                        ],
                        "resolution.Resolution.get_freq_group": [
                            699
                        ],
                        "resolution.Resolution": [
                            699
                        ],
                        "resolution": [
                            699,
                            700
                        ],
                        "freqn": [
                            700,
                            701
                        ],
                        "resolution.get_freq_group": [
                            700
                        ],
                        "t1": [
                            704,
                            706
                        ],
                        "t2": [
                            704,
                            707
                        ],
                        "self._parsed_string_to_bounds": [
                            704
                        ],
                        "self.searchsorted": [
                            706,
                            707
                        ],
                        "t1.ordinal": [
                            706
                        ],
                        "t2.ordinal": [
                            707
                        ]
                    },
                    "diff_line_number": 706,
                    "class_data": {
                        "signature": "class PeriodIndex(DatetimeIndexOpsMixin, Int64Index, PeriodDelegateMixin)",
                        "docstring": "Immutable ndarray holding ordinal values indicating regular periods in time.\n\nIndex keys are boxed to Period objects which carries the metadata (eg,\nfrequency information).\n\nParameters\n----------\ndata : array-like (1d int np.ndarray or PeriodArray), optional\n    Optional period-like data to construct index with.\ncopy : bool\n    Make a copy of input ndarray.\nfreq : str or period object, optional\n    One of pandas period strings or corresponding objects\nyear : int, array, or Series, default None\nmonth : int, array, or Series, default None\nquarter : int, array, or Series, default None\nday : int, array, or Series, default None\nhour : int, array, or Series, default None\nminute : int, array, or Series, default None\nsecond : int, array, or Series, default None\ntz : object, default None\n    Timezone for converting datetime64 data to Periods.\ndtype : str or PeriodDtype, default None\n\nAttributes\n----------\nday\ndayofweek\ndayofyear\ndays_in_month\ndaysinmonth\nend_time\nfreq\nfreqstr\nhour\nis_leap_year\nminute\nmonth\nquarter\nqyear\nsecond\nstart_time\nweek\nweekday\nweekofyear\nyear\n\nMethods\n-------\nasfreq\nstrftime\nto_timestamp\n\nSee Also\n--------\nIndex : The base pandas Index type.\nPeriod : Represents a period of time.\nDatetimeIndex : Index with datetime64 data.\nTimedeltaIndex : Index of timedelta64 data.\nperiod_range : Create a fixed-frequency PeriodIndex.\n\nExamples\n--------\n>>> idx = pd.PeriodIndex(year=year_arr, quarter=q_arr)",
                        "constructor_docstring": null,
                        "functions": [
                            "def __new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields):\n    valid_field_set = {'year', 'month', 'day', 'quarter', 'hour', 'minute', 'second'}\n    if not set(fields).issubset(valid_field_set):\n        argument = list(set(fields) - valid_field_set)[0]\n        raise TypeError(f'__new__() got an unexpected keyword argument {argument}')\n    name = maybe_extract_name(name, data, cls)\n    if data is None and ordinal is None:\n        data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n        freq = freq2\n        data = PeriodArray(data, freq=freq)\n    else:\n        freq = validate_dtype_freq(dtype, freq)\n        if freq and isinstance(data, cls) and (data.freq != freq):\n            data = data.asfreq(freq)\n        if data is None and ordinal is not None:\n            ordinal = np.asarray(ordinal, dtype=np.int64)\n            data = PeriodArray(ordinal, freq)\n        else:\n            data = period_array(data=data, freq=freq)\n    if copy:\n        data = data.copy()\n    return cls._simple_new(data, name=name)",
                            "@classmethod\ndef _simple_new(cls, values, name=None, freq=None, **kwargs):\n    \"\"\"\n    Create a new PeriodIndex.\n\n    Parameters\n    ----------\n    values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n        Values that can be converted to a PeriodArray without inference\n        or coercion.\n\n    \"\"\"\n    if isinstance(values, list):\n        values = np.asarray(values)\n    if is_float_dtype(values):\n        raise TypeError('PeriodIndex._simple_new does not accept floats.')\n    if freq:\n        freq = Period._maybe_convert_freq(freq)\n    values = PeriodArray(values, freq=freq)\n    if not isinstance(values, PeriodArray):\n        raise TypeError('PeriodIndex._simple_new only accepts PeriodArray')\n    result = object.__new__(cls)\n    result._data = values\n    result._index_data = values._data\n    result.name = name\n    result._reset_identity()\n    return result",
                            "@property\ndef values(self):\n    return np.asarray(self)",
                            "def _shallow_copy(self, values=None, **kwargs):\n    if values is None:\n        values = self._data\n    if isinstance(values, type(self)):\n        values = values._data\n    if not isinstance(values, PeriodArray):\n        if isinstance(values, np.ndarray) and values.dtype == 'i8':\n            values = PeriodArray(values, freq=self.freq)\n        else:\n            raise TypeError(type(values), getattr(values, 'dtype', None))\n    validate_dtype_freq(self.dtype, kwargs.get('freq'))\n    attributes = self._get_attributes_dict()\n    attributes.update(kwargs)\n    if not len(values) and 'dtype' not in kwargs:\n        attributes['dtype'] = self.dtype\n    return self._simple_new(values, **attributes)",
                            "def _shallow_copy_with_infer(self, values=None, **kwargs):\n    \"\"\" we always want to return a PeriodIndex \"\"\"\n    return self._shallow_copy(values=values, **kwargs)",
                            "@property\ndef _box_func(self):\n    \"\"\"Maybe box an ordinal or Period\"\"\"\n\n    def func(x):\n        if isinstance(x, Period) or x is NaT:\n            return x\n        else:\n            return Period._from_ordinal(ordinal=x, freq=self.freq)\n    return func",
                            "def _maybe_convert_timedelta(self, other):\n    \"\"\"\n    Convert timedelta-like input to an integer multiple of self.freq\n\n    Parameters\n    ----------\n    other : timedelta, np.timedelta64, DateOffset, int, np.ndarray\n\n    Returns\n    -------\n    converted : int, np.ndarray[int64]\n\n    Raises\n    ------\n    IncompatibleFrequency : if the input cannot be written as a multiple\n        of self.freq.  Note IncompatibleFrequency subclasses ValueError.\n    \"\"\"\n    if isinstance(other, (timedelta, np.timedelta64, Tick, np.ndarray)):\n        offset = frequencies.to_offset(self.freq.rule_code)\n        if isinstance(offset, Tick):\n            delta = self._data._check_timedeltalike_freq_compat(other)\n            return delta\n    elif isinstance(other, DateOffset):\n        freqstr = other.rule_code\n        base = libfrequencies.get_base_alias(freqstr)\n        if base == self.freq.rule_code:\n            return other.n\n        raise raise_on_incompatible(self, other)\n    elif is_integer(other):\n        return other\n    raise raise_on_incompatible(self, None)",
                            "def _mpl_repr(self):\n    return self.astype(object).values",
                            "@property\ndef _formatter_func(self):\n    return self.array._formatter(boxed=False)",
                            "@cache_readonly\ndef _engine(self):\n    period = weakref.ref(self)\n    return self._engine_type(period, len(self))",
                            "@Appender(_index_shared_docs['contains'])\ndef __contains__(self, key) -> bool:\n    if isinstance(key, Period):\n        if key.freq != self.freq:\n            return False\n        else:\n            return key.ordinal in self._engine\n    else:\n        try:\n            self.get_loc(key)\n            return True\n        except (TypeError, KeyError):\n            return False",
                            "@cache_readonly\ndef _int64index(self):\n    return Int64Index._simple_new(self.asi8, name=self.name)",
                            "def __array__(self, dtype=None):\n    if is_integer_dtype(dtype):\n        return self.asi8\n    else:\n        return self.astype(object).values",
                            "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc. Needs additional handling as\n    PeriodIndex stores internal data as int dtype\n\n    Replace this to __numpy_ufunc__ in future version\n    \"\"\"\n    if isinstance(context, tuple) and len(context) > 0:\n        func = context[0]\n        if func is np.add:\n            pass\n        elif func is np.subtract:\n            name = self.name\n            left = context[1][0]\n            right = context[1][1]\n            if isinstance(left, PeriodIndex) and isinstance(right, PeriodIndex):\n                name = left.name if left.name == right.name else None\n                return Index(result, name=name)\n            elif isinstance(left, Period) or isinstance(right, Period):\n                return Index(result, name=name)\n        elif isinstance(func, np.ufunc):\n            if 'M->M' not in func.types:\n                msg = f\"ufunc '{func.__name__}' not supported for the PeriodIndex\"\n                raise ValueError(msg)\n    if is_bool_dtype(result):\n        return result\n    return type(self)(result, freq=self.freq, name=self.name)",
                            "def asof_locs(self, where, mask):\n    \"\"\"\n    where : array of timestamps\n    mask : array of booleans where data is not NA\n\n    \"\"\"\n    where_idx = where\n    if isinstance(where_idx, DatetimeIndex):\n        where_idx = PeriodIndex(where_idx.values, freq=self.freq)\n    locs = self._ndarray_values[mask].searchsorted(where_idx._ndarray_values, side='right')\n    locs = np.where(locs > 0, locs - 1, 0)\n    result = np.arange(len(self))[mask].take(locs)\n    first = mask.argmax()\n    result[(locs == 0) & (where_idx._ndarray_values < self._ndarray_values[first])] = -1\n    return result",
                            "@Appender(_index_shared_docs['astype'])\ndef astype(self, dtype, copy=True, how='start'):\n    dtype = pandas_dtype(dtype)\n    if is_datetime64_any_dtype(dtype):\n        tz = getattr(dtype, 'tz', None)\n        return self.to_timestamp(how=how).tz_localize(tz)\n    return super().astype(dtype, copy=copy)",
                            "@Substitution(klass='PeriodIndex')\n@Appender(_shared_docs['searchsorted'])\ndef searchsorted(self, value, side='left', sorter=None):\n    if isinstance(value, Period):\n        if value.freq != self.freq:\n            raise raise_on_incompatible(self, value)\n        value = value.ordinal\n    elif isinstance(value, str):\n        try:\n            value = Period(value, freq=self.freq).ordinal\n        except DateParseError:\n            raise KeyError(f\"Cannot interpret '{value}' as period\")\n    return self._ndarray_values.searchsorted(value, side=side, sorter=sorter)",
                            "@property\ndef is_full(self) -> bool:\n    \"\"\"\n    Returns True if this PeriodIndex is range-like in that all Periods\n    between start and end are present, in order.\n    \"\"\"\n    if len(self) == 0:\n        return True\n    if not self.is_monotonic:\n        raise ValueError('Index is not monotonic')\n    values = self.asi8\n    return (values[1:] - values[:-1] < 2).all()",
                            "@property\ndef inferred_type(self) -> str:\n    return 'period'",
                            "def get_value(self, series, key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing\n    \"\"\"\n    s = com.values_from_object(series)\n    try:\n        return com.maybe_box(self, super().get_value(s, key), series, key)\n    except (KeyError, IndexError):\n        if isinstance(key, str):\n            asdt, parsed, reso = parse_time_string(key, self.freq)\n            grp = resolution.Resolution.get_freq_group(reso)\n            freqn = resolution.get_freq_group(self.freq)\n            vals = self._ndarray_values\n            if grp < freqn:\n                iv = Period(asdt, freq=(grp, 1))\n                ord1 = iv.asfreq(self.freq, how='S').ordinal\n                ord2 = iv.asfreq(self.freq, how='E').ordinal\n                if ord2 < vals[0] or ord1 > vals[-1]:\n                    raise KeyError(key)\n                pos = np.searchsorted(self._ndarray_values, [ord1, ord2])\n                key = slice(pos[0], pos[1] + 1)\n                return series[key]\n            elif grp == freqn:\n                key = Period(asdt, freq=self.freq).ordinal\n                return com.maybe_box(self, self._int64index.get_value(s, key), series, key)\n            else:\n                raise KeyError(key)\n        period = Period(key, self.freq)\n        key = period.value if isna(period) else period.ordinal\n        return com.maybe_box(self, self._int64index.get_value(s, key), series, key)",
                            "@Appender(_index_shared_docs['get_indexer'] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    target = ensure_index(target)\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return no_matches\n        target = target.asi8\n        self_index = self._int64index\n    else:\n        self_index = self\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n    return Index.get_indexer(self_index, target, method, limit, tolerance)",
                            "@Appender(_index_shared_docs['get_indexer_non_unique'] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return (no_matches, no_matches)\n        target = target.asi8\n    indexer, missing = self._int64index.get_indexer_non_unique(target)\n    return (ensure_platform_int(indexer), missing)",
                            "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location for requested label\n\n    Returns\n    -------\n    loc : int\n    \"\"\"\n    try:\n        return self._engine.get_loc(key)\n    except KeyError:\n        if is_integer(key):\n            raise\n        try:\n            asdt, parsed, reso = parse_time_string(key, self.freq)\n            key = asdt\n        except TypeError:\n            pass\n        except DateParseError:\n            raise KeyError(f\"Cannot interpret '{key}' as period\")\n        try:\n            key = Period(key, freq=self.freq)\n        except ValueError:\n            raise KeyError(key)\n        try:\n            ordinal = iNaT if key is NaT else key.ordinal\n            if tolerance is not None:\n                tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n            return self._int64index.get_loc(ordinal, method, tolerance)\n        except KeyError:\n            raise KeyError(key)",
                            "def _maybe_cast_slice_bound(self, label, side, kind):\n    \"\"\"\n    If label is a string or a datetime, cast it to Period.ordinal according\n    to resolution.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'ix', 'loc', 'getitem'}\n\n    Returns\n    -------\n    bound : Period or object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n\n    \"\"\"\n    assert kind in ['ix', 'loc', 'getitem']\n    if isinstance(label, datetime):\n        return Period(label, freq=self.freq)\n    elif isinstance(label, str):\n        try:\n            _, parsed, reso = parse_time_string(label, self.freq)\n            bounds = self._parsed_string_to_bounds(reso, parsed)\n            return bounds[0 if side == 'left' else 1]\n        except ValueError:\n            raise KeyError(label)\n    elif is_integer(label) or is_float(label):\n        self._invalid_indexer('slice', label)\n    return label",
                            "def _parsed_string_to_bounds(self, reso, parsed):\n    if reso == 'year':\n        t1 = Period(year=parsed.year, freq='A')\n    elif reso == 'month':\n        t1 = Period(year=parsed.year, month=parsed.month, freq='M')\n    elif reso == 'quarter':\n        q = (parsed.month - 1) // 3 + 1\n        t1 = Period(year=parsed.year, quarter=q, freq='Q-DEC')\n    elif reso == 'day':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, freq='D')\n    elif reso == 'hour':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, freq='H')\n    elif reso == 'minute':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, minute=parsed.minute, freq='T')\n    elif reso == 'second':\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, hour=parsed.hour, minute=parsed.minute, second=parsed.second, freq='S')\n    else:\n        raise KeyError(reso)\n    return (t1.asfreq(self.freq, how='start'), t1.asfreq(self.freq, how='end'))",
                            "def _get_string_slice(self, key):\n    if not self.is_monotonic:\n        raise ValueError('Partial indexing only valid for ordered time series')\n    key, parsed, reso = parse_time_string(key, self.freq)\n    grp = resolution.Resolution.get_freq_group(reso)\n    freqn = resolution.get_freq_group(self.freq)\n    if reso in ['day', 'hour', 'minute', 'second'] and (not grp < freqn):\n        raise KeyError(key)\n    t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n    return slice(self.searchsorted(t1.ordinal, side='left'), self.searchsorted(t2.ordinal, side='right'))",
                            "def _convert_tolerance(self, tolerance, target):\n    tolerance = DatetimeIndexOpsMixin._convert_tolerance(self, tolerance, target)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError('list-like tolerance size must match target index size')\n    return self._maybe_convert_timedelta(tolerance)",
                            "def insert(self, loc, item):\n    if not isinstance(item, Period) or self.freq != item.freq:\n        return self.astype(object).insert(loc, item)\n    idx = np.concatenate((self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8))\n    return self._shallow_copy(idx)",
                            "def join(self, other, how='left', level=None, return_indexers=False, sort=False):\n    \"\"\"\n    See Index.join\n    \"\"\"\n    self._assert_can_do_setop(other)\n    if not isinstance(other, PeriodIndex):\n        return self.astype(object).join(other, how=how, level=level, return_indexers=return_indexers, sort=sort)\n    result = Int64Index.join(self, other, how=how, level=level, return_indexers=return_indexers, sort=sort)\n    if return_indexers:\n        result, lidx, ridx = result\n        return (self._apply_meta(result), lidx, ridx)\n    return self._apply_meta(result)",
                            "def _assert_can_do_setop(self, other):\n    super()._assert_can_do_setop(other)\n    if isinstance(other, PeriodIndex) and self.freq != other.freq:\n        raise raise_on_incompatible(self, other)",
                            "def intersection(self, other, sort=False):\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    res_name = get_op_result_name(self, other)\n    other = ensure_index(other)\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this.intersection(other, sort=sort)\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self.intersection(i8other, sort=sort)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                            "def difference(self, other, sort=None):\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    res_name = get_op_result_name(self, other)\n    other = ensure_index(other)\n    if self.equals(other):\n        return self._shallow_copy(self._data[:0])\n    if is_object_dtype(other):\n        return self.astype(object).difference(other).astype(self.dtype)\n    elif not is_dtype_equal(self.dtype, other.dtype):\n        return self\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self.difference(i8other, sort=sort)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                            "def _union(self, other, sort):\n    if not len(other) or self.equals(other) or (not len(self)):\n        return super()._union(other, sort=sort)\n    assert isinstance(other, type(self))\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype('O')\n        other = other.astype('O')\n        return this._union(other, sort=sort)\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self._union(i8other, sort=sort)\n    res_name = get_op_result_name(self, other)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                            "def _apply_meta(self, rawarr):\n    if not isinstance(rawarr, PeriodIndex):\n        rawarr = PeriodIndex._simple_new(rawarr, freq=self.freq, name=self.name)\n    return rawarr",
                            "def memory_usage(self, deep=False):\n    result = super().memory_usage(deep=deep)\n    if hasattr(self, '_cache') and '_int64index' in self._cache:\n        result += self._int64index.memory_usage(deep=deep)\n    return result",
                            "def func(x):\n    if isinstance(x, Period) or x is NaT:\n        return x\n    else:\n        return Period._from_ordinal(ordinal=x, freq=self.freq)"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [
                            "_typ",
                            "_attributes",
                            "_is_numeric_dtype",
                            "_infer_as_myclass",
                            "_data",
                            "_engine_type",
                            "_supports_partial_string_indexing"
                        ],
                        "class_decorators": [
                            "delegate_names(PeriodArray, PeriodDelegateMixin._delegated_properties, typ='property')",
                            "delegate_names(PeriodArray, PeriodDelegateMixin._delegated_methods, typ='method', overwrite=True)"
                        ],
                        "function_signatures": [
                            "__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
                            "_simple_new(cls, values, name=None, freq=None, **kwargs)",
                            "values(self)",
                            "_shallow_copy(self, values=None, **kwargs)",
                            "_shallow_copy_with_infer(self, values=None, **kwargs)",
                            "_box_func(self)",
                            "_maybe_convert_timedelta(self, other)",
                            "_mpl_repr(self)",
                            "_formatter_func(self)",
                            "_engine(self)",
                            "__contains__(self, key) -> bool",
                            "_int64index(self)",
                            "__array__(self, dtype=None)",
                            "__array_wrap__(self, result, context=None)",
                            "asof_locs(self, where, mask)",
                            "astype(self, dtype, copy=True, how='start')",
                            "searchsorted(self, value, side='left', sorter=None)",
                            "is_full(self) -> bool",
                            "inferred_type(self) -> str",
                            "get_value(self, series, key)",
                            "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                            "get_indexer_non_unique(self, target)",
                            "get_loc(self, key, method=None, tolerance=None)",
                            "_maybe_cast_slice_bound(self, label, side, kind)",
                            "_parsed_string_to_bounds(self, reso, parsed)",
                            "_get_string_slice(self, key)",
                            "_convert_tolerance(self, tolerance, target)",
                            "insert(self, loc, item)",
                            "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                            "_assert_can_do_setop(self, other)",
                            "intersection(self, other, sort=False)",
                            "difference(self, other, sort=None)",
                            "_union(self, other, sort)",
                            "_apply_meta(self, rawarr)",
                            "memory_usage(self, deep=False)",
                            "func(x)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def _new_PeriodIndex(cls, **d):\n    # GH13277 for unpickling\n    values = d.pop(\"data\")\n    if values.dtype == \"int64\":\n        freq = d.pop(\"freq\", None)\n        values = PeriodArray(values, freq=freq)\n        return cls._simple_new(values, **d)\n    else:\n        return cls(values, **d)",
                "def period_range(\n    start=None, end=None, periods=None, freq=None, name=None\n) -> PeriodIndex:\n    \"\"\"\n    Return a fixed frequency PeriodIndex.\n\n    The day (calendar) is the default frequency.\n\n    Parameters\n    ----------\n    start : str or period-like, default None\n        Left bound for generating periods.\n    end : str or period-like, default None\n        Right bound for generating periods.\n    periods : int, default None\n        Number of periods to generate.\n    freq : str or DateOffset, optional\n        Frequency alias. By default the freq is taken from `start` or `end`\n        if those are Period objects. Otherwise, the default is ``\"D\"`` for\n        daily frequency.\n    name : str, default None\n        Name of the resulting PeriodIndex.\n\n    Returns\n    -------\n    PeriodIndex\n\n    Notes\n    -----\n    Of the three parameters: ``start``, ``end``, and ``periods``, exactly two\n    must be specified.\n\n    To learn more about the frequency strings, please see `this link\n    <https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases>`__.\n\n    Examples\n    --------\n\n    >>> pd.period_range(start='2017-01-01', end='2018-01-01', freq='M')\n    PeriodIndex(['2017-01', '2017-02', '2017-03', '2017-04', '2017-05',\n                 '2017-06', '2017-06', '2017-07', '2017-08', '2017-09',\n                 '2017-10', '2017-11', '2017-12', '2018-01'],\n                dtype='period[M]', freq='M')\n\n    If ``start`` or ``end`` are ``Period`` objects, they will be used as anchor\n    endpoints for a ``PeriodIndex`` with frequency matching that of the\n    ``period_range`` constructor.\n\n    >>> pd.period_range(start=pd.Period('2017Q1', freq='Q'),\n    ...                 end=pd.Period('2017Q2', freq='Q'), freq='M')\n    PeriodIndex(['2017-03', '2017-04', '2017-05', '2017-06'],\n                dtype='period[M]', freq='M')\n    \"\"\"\n    if com.count_not_none(start, end, periods) != 2:\n        raise ValueError(\n            \"Of the three parameters: start, end, and periods, \"\n            \"exactly two must be specified\"\n        )\n    if freq is None and (not isinstance(start, Period) and not isinstance(end, Period)):\n        freq = \"D\"\n\n    data, freq = PeriodArray._generate_range(start, end, periods, freq, fields={})\n    data = PeriodArray(data, freq=freq)\n    return PeriodIndex(data, name=name)",
                "def __new__(\n    cls,\n    data=None,\n    ordinal=None,\n    freq=None,\n    tz=None,\n    dtype=None,\n    copy=False,\n    name=None,\n    **fields,\n):\n\n    valid_field_set = {\n        \"year\",\n        \"month\",\n        \"day\",\n        \"quarter\",\n        \"hour\",\n        \"minute\",\n        \"second\",\n    }\n\n    if not set(fields).issubset(valid_field_set):\n        argument = list(set(fields) - valid_field_set)[0]\n        raise TypeError(f\"__new__() got an unexpected keyword argument {argument}\")\n\n    name = maybe_extract_name(name, data, cls)\n\n    if data is None and ordinal is None:\n        # range-based.\n        data, freq2 = PeriodArray._generate_range(None, None, None, freq, fields)\n        # PeriodArray._generate range does validation that fields is\n        # empty when really using the range-based constructor.\n        freq = freq2\n\n        data = PeriodArray(data, freq=freq)\n    else:\n        freq = validate_dtype_freq(dtype, freq)\n\n        # PeriodIndex allow PeriodIndex(period_index, freq=different)\n        # Let's not encourage that kind of behavior in PeriodArray.\n\n        if freq and isinstance(data, cls) and data.freq != freq:\n            # TODO: We can do some of these with no-copy / coercion?\n            # e.g. D -> 2D seems to be OK\n            data = data.asfreq(freq)\n\n        if data is None and ordinal is not None:\n            # we strangely ignore `ordinal` if data is passed.\n            ordinal = np.asarray(ordinal, dtype=np.int64)\n            data = PeriodArray(ordinal, freq)\n        else:\n            # don't pass copy here, since we copy later.\n            data = period_array(data=data, freq=freq)\n\n    if copy:\n        data = data.copy()\n\n    return cls._simple_new(data, name=name)",
                "@classmethod\ndef _simple_new(cls, values, name=None, freq=None, **kwargs):\n    \"\"\"\n    Create a new PeriodIndex.\n\n    Parameters\n    ----------\n    values : PeriodArray, PeriodIndex, Index[int64], ndarray[int64]\n        Values that can be converted to a PeriodArray without inference\n        or coercion.\n\n    \"\"\"\n    # TODO: raising on floats is tested, but maybe not useful.\n    # Should the callers know not to pass floats?\n    # At the very least, I think we can ensure that lists aren't passed.\n    if isinstance(values, list):\n        values = np.asarray(values)\n    if is_float_dtype(values):\n        raise TypeError(\"PeriodIndex._simple_new does not accept floats.\")\n    if freq:\n        freq = Period._maybe_convert_freq(freq)\n    values = PeriodArray(values, freq=freq)\n\n    if not isinstance(values, PeriodArray):\n        raise TypeError(\"PeriodIndex._simple_new only accepts PeriodArray\")\n    result = object.__new__(cls)\n    result._data = values\n    # For groupby perf. See note in indexes/base about _index_data\n    result._index_data = values._data\n    result.name = name\n    result._reset_identity()\n    return result",
                "@property\ndef values(self):\n    return np.asarray(self)",
                "def _shallow_copy(self, values=None, **kwargs):\n    # TODO: simplify, figure out type of values\n    if values is None:\n        values = self._data\n\n    if isinstance(values, type(self)):\n        values = values._data\n\n    if not isinstance(values, PeriodArray):\n        if isinstance(values, np.ndarray) and values.dtype == \"i8\":\n            values = PeriodArray(values, freq=self.freq)\n        else:\n            # GH#30713 this should never be reached\n            raise TypeError(type(values), getattr(values, \"dtype\", None))\n\n    # We don't allow changing `freq` in _shallow_copy.\n    validate_dtype_freq(self.dtype, kwargs.get(\"freq\"))\n    attributes = self._get_attributes_dict()\n\n    attributes.update(kwargs)\n    if not len(values) and \"dtype\" not in kwargs:\n        attributes[\"dtype\"] = self.dtype\n    return self._simple_new(values, **attributes)",
                "def _shallow_copy_with_infer(self, values=None, **kwargs):\n    \"\"\" we always want to return a PeriodIndex \"\"\"\n    return self._shallow_copy(values=values, **kwargs)",
                "@property\ndef _box_func(self):\n    \"\"\"Maybe box an ordinal or Period\"\"\"\n    # TODO(DatetimeArray): Avoid double-boxing\n    # PeriodArray takes care of boxing already, so we need to check\n    # whether we're given an ordinal or a Period. It seems like some\n    # places outside of indexes/period.py are calling this _box_func,\n    # but passing data that's already boxed.\n    def func(x):\n        if isinstance(x, Period) or x is NaT:\n            return x\n        else:\n            return Period._from_ordinal(ordinal=x, freq=self.freq)\n\n    return func",
                "def _maybe_convert_timedelta(self, other):\n    \"\"\"\n    Convert timedelta-like input to an integer multiple of self.freq\n\n    Parameters\n    ----------\n    other : timedelta, np.timedelta64, DateOffset, int, np.ndarray\n\n    Returns\n    -------\n    converted : int, np.ndarray[int64]\n\n    Raises\n    ------\n    IncompatibleFrequency : if the input cannot be written as a multiple\n        of self.freq.  Note IncompatibleFrequency subclasses ValueError.\n    \"\"\"\n    if isinstance(other, (timedelta, np.timedelta64, Tick, np.ndarray)):\n        offset = frequencies.to_offset(self.freq.rule_code)\n        if isinstance(offset, Tick):\n            # _check_timedeltalike_freq_compat will raise if incompatible\n            delta = self._data._check_timedeltalike_freq_compat(other)\n            return delta\n    elif isinstance(other, DateOffset):\n        freqstr = other.rule_code\n        base = libfrequencies.get_base_alias(freqstr)\n        if base == self.freq.rule_code:\n            return other.n\n\n        raise raise_on_incompatible(self, other)\n    elif is_integer(other):\n        # integer is passed to .shift via\n        # _add_datetimelike_methods basically\n        # but ufunc may pass integer to _add_delta\n        return other\n\n    # raise when input doesn't have freq\n    raise raise_on_incompatible(self, None)",
                "def _mpl_repr(self):\n    # how to represent ourselves to matplotlib\n    return self.astype(object).values",
                "@property\ndef _formatter_func(self):\n    return self.array._formatter(boxed=False)",
                "@cache_readonly\ndef _engine(self):\n    # To avoid a reference cycle, pass a weakref of self to _engine_type.\n    period = weakref.ref(self)\n    return self._engine_type(period, len(self))",
                "@Appender(_index_shared_docs[\"contains\"])\ndef __contains__(self, key) -> bool:\n    if isinstance(key, Period):\n        if key.freq != self.freq:\n            return False\n        else:\n            return key.ordinal in self._engine\n    else:\n        try:\n            self.get_loc(key)\n            return True\n        except (TypeError, KeyError):\n            # TypeError can be reached if we pass a tuple that is not hashable\n            return False",
                "@cache_readonly\ndef _int64index(self):\n    return Int64Index._simple_new(self.asi8, name=self.name)",
                "def __array__(self, dtype=None):\n    if is_integer_dtype(dtype):\n        return self.asi8\n    else:\n        return self.astype(object).values",
                "def __array_wrap__(self, result, context=None):\n    \"\"\"\n    Gets called after a ufunc. Needs additional handling as\n    PeriodIndex stores internal data as int dtype\n\n    Replace this to __numpy_ufunc__ in future version\n    \"\"\"\n    if isinstance(context, tuple) and len(context) > 0:\n        func = context[0]\n        if func is np.add:\n            pass\n        elif func is np.subtract:\n            name = self.name\n            left = context[1][0]\n            right = context[1][1]\n            if isinstance(left, PeriodIndex) and isinstance(right, PeriodIndex):\n                name = left.name if left.name == right.name else None\n                return Index(result, name=name)\n            elif isinstance(left, Period) or isinstance(right, Period):\n                return Index(result, name=name)\n        elif isinstance(func, np.ufunc):\n            if \"M->M\" not in func.types:\n                msg = f\"ufunc '{func.__name__}' not supported for the PeriodIndex\"\n                # This should be TypeError, but TypeError cannot be raised\n                # from here because numpy catches.\n                raise ValueError(msg)\n\n    if is_bool_dtype(result):\n        return result\n    # the result is object dtype array of Period\n    # cannot pass _simple_new as it is\n    return type(self)(result, freq=self.freq, name=self.name)",
                "def asof_locs(self, where, mask):\n    \"\"\"\n    where : array of timestamps\n    mask : array of booleans where data is not NA\n\n    \"\"\"\n    where_idx = where\n    if isinstance(where_idx, DatetimeIndex):\n        where_idx = PeriodIndex(where_idx.values, freq=self.freq)\n\n    locs = self._ndarray_values[mask].searchsorted(\n        where_idx._ndarray_values, side=\"right\"\n    )\n\n    locs = np.where(locs > 0, locs - 1, 0)\n    result = np.arange(len(self))[mask].take(locs)\n\n    first = mask.argmax()\n    result[\n        (locs == 0) & (where_idx._ndarray_values < self._ndarray_values[first])\n    ] = -1\n\n    return result",
                "@Appender(_index_shared_docs[\"astype\"])\ndef astype(self, dtype, copy=True, how=\"start\"):\n    dtype = pandas_dtype(dtype)\n\n    if is_datetime64_any_dtype(dtype):\n        # 'how' is index-specific, isn't part of the EA interface.\n        tz = getattr(dtype, \"tz\", None)\n        return self.to_timestamp(how=how).tz_localize(tz)\n\n    # TODO: should probably raise on `how` here, so we don't ignore it.\n    return super().astype(dtype, copy=copy)",
                "@Substitution(klass=\"PeriodIndex\")\n@Appender(_shared_docs[\"searchsorted\"])\ndef searchsorted(self, value, side=\"left\", sorter=None):\n    if isinstance(value, Period):\n        if value.freq != self.freq:\n            raise raise_on_incompatible(self, value)\n        value = value.ordinal\n    elif isinstance(value, str):\n        try:\n            value = Period(value, freq=self.freq).ordinal\n        except DateParseError:\n            raise KeyError(f\"Cannot interpret '{value}' as period\")\n\n    return self._ndarray_values.searchsorted(value, side=side, sorter=sorter)",
                "@property\ndef is_full(self) -> bool:\n    \"\"\"\n    Returns True if this PeriodIndex is range-like in that all Periods\n    between start and end are present, in order.\n    \"\"\"\n    if len(self) == 0:\n        return True\n    if not self.is_monotonic:\n        raise ValueError(\"Index is not monotonic\")\n    values = self.asi8\n    return ((values[1:] - values[:-1]) < 2).all()",
                "@property\ndef inferred_type(self) -> str:\n    # b/c data is represented as ints make sure we can't have ambiguous\n    # indexing\n    return \"period\"",
                "def get_value(self, series, key):\n    \"\"\"\n    Fast lookup of value from 1-dimensional ndarray. Only use this if you\n    know what you're doing\n    \"\"\"\n    s = com.values_from_object(series)\n    try:\n        return com.maybe_box(self, super().get_value(s, key), series, key)\n    except (KeyError, IndexError):\n        if isinstance(key, str):\n            asdt, parsed, reso = parse_time_string(key, self.freq)\n            grp = resolution.Resolution.get_freq_group(reso)\n            freqn = resolution.get_freq_group(self.freq)\n\n            vals = self._ndarray_values\n\n            # if our data is higher resolution than requested key, slice\n            if grp < freqn:\n                iv = Period(asdt, freq=(grp, 1))\n                ord1 = iv.asfreq(self.freq, how=\"S\").ordinal\n                ord2 = iv.asfreq(self.freq, how=\"E\").ordinal\n\n                if ord2 < vals[0] or ord1 > vals[-1]:\n                    raise KeyError(key)\n\n                pos = np.searchsorted(self._ndarray_values, [ord1, ord2])\n                key = slice(pos[0], pos[1] + 1)\n                return series[key]\n            elif grp == freqn:\n                key = Period(asdt, freq=self.freq).ordinal\n                return com.maybe_box(\n                    self, self._int64index.get_value(s, key), series, key\n                )\n            else:\n                raise KeyError(key)\n\n        period = Period(key, self.freq)\n        key = period.value if isna(period) else period.ordinal\n        return com.maybe_box(self, self._int64index.get_value(s, key), series, key)",
                "@Appender(_index_shared_docs[\"get_indexer\"] % _index_doc_kwargs)\ndef get_indexer(self, target, method=None, limit=None, tolerance=None):\n    target = ensure_index(target)\n\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            # No matches\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return no_matches\n\n        target = target.asi8\n        self_index = self._int64index\n    else:\n        self_index = self\n\n    if tolerance is not None:\n        tolerance = self._convert_tolerance(tolerance, target)\n    return Index.get_indexer(self_index, target, method, limit, tolerance)",
                "@Appender(_index_shared_docs[\"get_indexer_non_unique\"] % _index_doc_kwargs)\ndef get_indexer_non_unique(self, target):\n    target = ensure_index(target)\n\n    if isinstance(target, PeriodIndex):\n        if target.freq != self.freq:\n            no_matches = -1 * np.ones(self.shape, dtype=np.intp)\n            return no_matches, no_matches\n\n        target = target.asi8\n\n    indexer, missing = self._int64index.get_indexer_non_unique(target)\n    return ensure_platform_int(indexer), missing",
                "def get_loc(self, key, method=None, tolerance=None):\n    \"\"\"\n    Get integer location for requested label\n\n    Returns\n    -------\n    loc : int\n    \"\"\"\n    try:\n        return self._engine.get_loc(key)\n    except KeyError:\n        if is_integer(key):\n            raise\n\n        try:\n            asdt, parsed, reso = parse_time_string(key, self.freq)\n            key = asdt\n        except TypeError:\n            pass\n        except DateParseError:\n            # A string with invalid format\n            raise KeyError(f\"Cannot interpret '{key}' as period\")\n\n        try:\n            key = Period(key, freq=self.freq)\n        except ValueError:\n            # we cannot construct the Period\n            # as we have an invalid type\n            raise KeyError(key)\n\n        try:\n            ordinal = iNaT if key is NaT else key.ordinal\n            if tolerance is not None:\n                tolerance = self._convert_tolerance(tolerance, np.asarray(key))\n            return self._int64index.get_loc(ordinal, method, tolerance)\n\n        except KeyError:\n            raise KeyError(key)",
                "def _maybe_cast_slice_bound(self, label, side, kind):\n    \"\"\"\n    If label is a string or a datetime, cast it to Period.ordinal according\n    to resolution.\n\n    Parameters\n    ----------\n    label : object\n    side : {'left', 'right'}\n    kind : {'ix', 'loc', 'getitem'}\n\n    Returns\n    -------\n    bound : Period or object\n\n    Notes\n    -----\n    Value of `side` parameter should be validated in caller.\n\n    \"\"\"\n    assert kind in [\"ix\", \"loc\", \"getitem\"]\n\n    if isinstance(label, datetime):\n        return Period(label, freq=self.freq)\n    elif isinstance(label, str):\n        try:\n            _, parsed, reso = parse_time_string(label, self.freq)\n            bounds = self._parsed_string_to_bounds(reso, parsed)\n            return bounds[0 if side == \"left\" else 1]\n        except ValueError:\n            # string cannot be parsed as datetime-like\n            # TODO: we need tests for this case\n            raise KeyError(label)\n    elif is_integer(label) or is_float(label):\n        self._invalid_indexer(\"slice\", label)\n\n    return label",
                "def _parsed_string_to_bounds(self, reso, parsed):\n    if reso == \"year\":\n        t1 = Period(year=parsed.year, freq=\"A\")\n    elif reso == \"month\":\n        t1 = Period(year=parsed.year, month=parsed.month, freq=\"M\")\n    elif reso == \"quarter\":\n        q = (parsed.month - 1) // 3 + 1\n        t1 = Period(year=parsed.year, quarter=q, freq=\"Q-DEC\")\n    elif reso == \"day\":\n        t1 = Period(year=parsed.year, month=parsed.month, day=parsed.day, freq=\"D\")\n    elif reso == \"hour\":\n        t1 = Period(\n            year=parsed.year,\n            month=parsed.month,\n            day=parsed.day,\n            hour=parsed.hour,\n            freq=\"H\",\n        )\n    elif reso == \"minute\":\n        t1 = Period(\n            year=parsed.year,\n            month=parsed.month,\n            day=parsed.day,\n            hour=parsed.hour,\n            minute=parsed.minute,\n            freq=\"T\",\n        )\n    elif reso == \"second\":\n        t1 = Period(\n            year=parsed.year,\n            month=parsed.month,\n            day=parsed.day,\n            hour=parsed.hour,\n            minute=parsed.minute,\n            second=parsed.second,\n            freq=\"S\",\n        )\n    else:\n        raise KeyError(reso)\n    return (t1.asfreq(self.freq, how=\"start\"), t1.asfreq(self.freq, how=\"end\"))",
                "def _get_string_slice(self, key):\n    if not self.is_monotonic:\n        raise ValueError(\"Partial indexing only valid for ordered time series\")\n\n    key, parsed, reso = parse_time_string(key, self.freq)\n    grp = resolution.Resolution.get_freq_group(reso)\n    freqn = resolution.get_freq_group(self.freq)\n    if reso in [\"day\", \"hour\", \"minute\", \"second\"] and not grp < freqn:\n        raise KeyError(key)\n\n    t1, t2 = self._parsed_string_to_bounds(reso, parsed)\n    return slice(\n        self.searchsorted(t1.ordinal, side=\"left\"),\n        self.searchsorted(t2.ordinal, side=\"right\"),\n    )",
                "def _convert_tolerance(self, tolerance, target):\n    tolerance = DatetimeIndexOpsMixin._convert_tolerance(self, tolerance, target)\n    if target.size != tolerance.size and tolerance.size > 1:\n        raise ValueError(\"list-like tolerance size must match target index size\")\n    return self._maybe_convert_timedelta(tolerance)",
                "def insert(self, loc, item):\n    if not isinstance(item, Period) or self.freq != item.freq:\n        return self.astype(object).insert(loc, item)\n\n    idx = np.concatenate(\n        (self[:loc].asi8, np.array([item.ordinal]), self[loc:].asi8)\n    )\n    return self._shallow_copy(idx)",
                "def join(self, other, how=\"left\", level=None, return_indexers=False, sort=False):\n    \"\"\"\n    See Index.join\n    \"\"\"\n    self._assert_can_do_setop(other)\n\n    if not isinstance(other, PeriodIndex):\n        return self.astype(object).join(\n            other, how=how, level=level, return_indexers=return_indexers, sort=sort\n        )\n\n    result = Int64Index.join(\n        self,\n        other,\n        how=how,\n        level=level,\n        return_indexers=return_indexers,\n        sort=sort,\n    )\n\n    if return_indexers:\n        result, lidx, ridx = result\n        return self._apply_meta(result), lidx, ridx\n    return self._apply_meta(result)",
                "def _assert_can_do_setop(self, other):\n    super()._assert_can_do_setop(other)\n\n    # *Can't* use PeriodIndexes of different freqs\n    # *Can* use PeriodIndex/DatetimeIndex\n    if isinstance(other, PeriodIndex) and self.freq != other.freq:\n        raise raise_on_incompatible(self, other)",
                "def intersection(self, other, sort=False):\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    res_name = get_op_result_name(self, other)\n    other = ensure_index(other)\n\n    if self.equals(other):\n        return self._get_reconciled_name_object(other)\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        # TODO: fastpath for if we have a different PeriodDtype\n        this = self.astype(\"O\")\n        other = other.astype(\"O\")\n        return this.intersection(other, sort=sort)\n\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self.intersection(i8other, sort=sort)\n\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                "def difference(self, other, sort=None):\n    self._validate_sort_keyword(sort)\n    self._assert_can_do_setop(other)\n    res_name = get_op_result_name(self, other)\n    other = ensure_index(other)\n\n    if self.equals(other):\n        # pass an empty PeriodArray with the appropriate dtype\n        return self._shallow_copy(self._data[:0])\n\n    if is_object_dtype(other):\n        return self.astype(object).difference(other).astype(self.dtype)\n\n    elif not is_dtype_equal(self.dtype, other.dtype):\n        return self\n\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self.difference(i8other, sort=sort)\n\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                "def _union(self, other, sort):\n    if not len(other) or self.equals(other) or not len(self):\n        return super()._union(other, sort=sort)\n\n    # We are called by `union`, which is responsible for this validation\n    assert isinstance(other, type(self))\n\n    if not is_dtype_equal(self.dtype, other.dtype):\n        this = self.astype(\"O\")\n        other = other.astype(\"O\")\n        return this._union(other, sort=sort)\n\n    i8self = Int64Index._simple_new(self.asi8)\n    i8other = Int64Index._simple_new(other.asi8)\n    i8result = i8self._union(i8other, sort=sort)\n\n    res_name = get_op_result_name(self, other)\n    result = self._shallow_copy(np.asarray(i8result, dtype=np.int64), name=res_name)\n    return result",
                "def _apply_meta(self, rawarr):\n    if not isinstance(rawarr, PeriodIndex):\n        rawarr = PeriodIndex._simple_new(rawarr, freq=self.freq, name=self.name)\n    return rawarr",
                "def memory_usage(self, deep=False):\n    result = super().memory_usage(deep=deep)\n    if hasattr(self, \"_cache\") and \"_int64index\" in self._cache:\n        result += self._int64index.memory_usage(deep=deep)\n    return result",
                "def func(x):\n    if isinstance(x, Period) or x is NaT:\n        return x\n    else:\n        return Period._from_ordinal(ordinal=x, freq=self.freq)"
            ],
            "inscope_function_signatures": [
                "_new_PeriodIndex(cls, **d)",
                "period_range(start=None, end=None, periods=None, freq=None, name=None) -> PeriodIndex",
                "__new__(cls, data=None, ordinal=None, freq=None, tz=None, dtype=None, copy=False, name=None, **fields)",
                "_simple_new(cls, values, name=None, freq=None, **kwargs)",
                "values(self)",
                "_shallow_copy(self, values=None, **kwargs)",
                "_shallow_copy_with_infer(self, values=None, **kwargs)",
                "_box_func(self)",
                "_maybe_convert_timedelta(self, other)",
                "_mpl_repr(self)",
                "_formatter_func(self)",
                "_engine(self)",
                "__contains__(self, key) -> bool",
                "_int64index(self)",
                "__array__(self, dtype=None)",
                "__array_wrap__(self, result, context=None)",
                "asof_locs(self, where, mask)",
                "astype(self, dtype, copy=True, how='start')",
                "searchsorted(self, value, side='left', sorter=None)",
                "is_full(self) -> bool",
                "inferred_type(self) -> str",
                "get_value(self, series, key)",
                "get_indexer(self, target, method=None, limit=None, tolerance=None)",
                "get_indexer_non_unique(self, target)",
                "get_loc(self, key, method=None, tolerance=None)",
                "_maybe_cast_slice_bound(self, label, side, kind)",
                "_parsed_string_to_bounds(self, reso, parsed)",
                "_get_string_slice(self, key)",
                "_convert_tolerance(self, tolerance, target)",
                "insert(self, loc, item)",
                "join(self, other, how='left', level=None, return_indexers=False, sort=False)",
                "_assert_can_do_setop(self, other)",
                "intersection(self, other, sort=False)",
                "difference(self, other, sort=None)",
                "_union(self, other, sort)",
                "_apply_meta(self, rawarr)",
                "memory_usage(self, deep=False)",
                "func(x)"
            ],
            "variables_in_file": {
                "_index_doc_kwargs": [
                    562,
                    52,
                    53,
                    543
                ],
                "dict": [
                    52,
                    53
                ],
                "ibase._index_doc_kwargs": [
                    52
                ],
                "ibase": [
                    52
                ],
                "_index_doc_kwargs.update": [
                    53
                ],
                "values": [
                    257,
                    398,
                    271,
                    272,
                    274,
                    275,
                    277,
                    278,
                    279,
                    282,
                    289,
                    291,
                    295,
                    61,
                    62,
                    64,
                    65,
                    67,
                    357,
                    494,
                    495,
                    244,
                    245,
                    246,
                    250,
                    252,
                    255
                ],
                "d.pop": [
                    61,
                    63
                ],
                "d": [
                    65,
                    67,
                    61,
                    63
                ],
                "values.dtype": [
                    62,
                    278
                ],
                "freq": [
                    64,
                    199,
                    903,
                    904,
                    202,
                    906,
                    204,
                    907,
                    206,
                    211,
                    214,
                    248,
                    249,
                    250,
                    219,
                    222,
                    63
                ],
                "PeriodArray": [
                    64,
                    161,
                    199,
                    906,
                    907,
                    204,
                    78,
                    79,
                    82,
                    84,
                    277,
                    279,
                    250,
                    219,
                    252
                ],
                "cls._simple_new": [
                    65,
                    227
                ],
                "cls": [
                    65,
                    67,
                    227,
                    195,
                    211,
                    254
                ],
                "DatetimelikeDelegateMixin": [
                    70
                ],
                "_raw_methods": [
                    75,
                    79
                ],
                "_raw_properties": [
                    76,
                    78
                ],
                "_delegated_properties": [
                    78
                ],
                "PeriodArray._datetimelike_ops": [
                    78
                ],
                "list": [
                    192,
                    244,
                    78
                ],
                "_delegated_methods": [
                    79
                ],
                "set": [
                    192,
                    191,
                    79
                ],
                "PeriodArray._datetimelike_methods": [
                    79
                ],
                "DatetimeIndexOpsMixin": [
                    86,
                    711
                ],
                "Int64Index": [
                    736,
                    800,
                    389,
                    776,
                    777,
                    818,
                    819,
                    86,
                    799
                ],
                "PeriodDelegateMixin": [
                    82,
                    84,
                    86
                ],
                "_typ": [
                    154
                ],
                "_attributes": [
                    155
                ],
                "_is_numeric_dtype": [
                    158
                ],
                "_infer_as_myclass": [
                    159
                ],
                "_data": [
                    161
                ],
                "_engine_type": [
                    163
                ],
                "libindex.PeriodEngine": [
                    163
                ],
                "libindex": [
                    163
                ],
                "_supports_partial_string_indexing": [
                    164
                ],
                "valid_field_set": [
                    192,
                    181,
                    191
                ],
                "issubset": [
                    191
                ],
                "fields": [
                    192,
                    199,
                    191
                ],
                "argument": [
                    192,
                    193
                ],
                "TypeError": [
                    193,
                    593,
                    247,
                    282,
                    253,
                    383
                ],
                "name": [
                    416,
                    417,
                    258,
                    195,
                    227,
                    419,
                    908,
                    412
                ],
                "maybe_extract_name": [
                    195
                ],
                "data": [
                    225,
                    195,
                    227,
                    197,
                    199,
                    906,
                    907,
                    204,
                    908,
                    211,
                    214,
                    216,
                    219,
                    222
                ],
                "ordinal": [
                    610,
                    197,
                    522,
                    523,
                    532,
                    216,
                    218,
                    219,
                    478,
                    607
                ],
                "freq2": [
                    202,
                    199
                ],
                "PeriodArray._generate_range": [
                    906,
                    199
                ],
                "validate_dtype_freq": [
                    285,
                    206
                ],
                "dtype": [
                    395,
                    459,
                    461,
                    206,
                    463,
                    467
                ],
                "isinstance": [
                    512,
                    903,
                    274,
                    277,
                    278,
                    407,
                    415,
                    418,
                    547,
                    420,
                    811,
                    306,
                    566,
                    440,
                    829,
                    330,
                    332,
                    717,
                    336,
                    211,
                    472,
                    731,
                    476,
                    244,
                    374,
                    758,
                    252,
                    637,
                    639
                ],
                "data.freq": [
                    211
                ],
                "data.asfreq": [
                    214
                ],
                "np.asarray": [
                    609,
                    803,
                    267,
                    780,
                    245,
                    823,
                    218
                ],
                "np": [
                    267,
                    780,
                    528,
                    278,
                    409,
                    411,
                    803,
                    420,
                    550,
                    823,
                    568,
                    447,
                    448,
                    330,
                    720,
                    721,
                    218,
                    609,
                    245
                ],
                "np.int64": [
                    218,
                    803,
                    780,
                    823
                ],
                "period_array": [
                    222
                ],
                "copy": [
                    224,
                    467
                ],
                "data.copy": [
                    225
                ],
                "is_float_dtype": [
                    246
                ],
                "Period._maybe_convert_freq": [
                    249
                ],
                "Period": [
                    903,
                    521,
                    655,
                    657,
                    532,
                    660,
                    662,
                    664,
                    539,
                    672,
                    418,
                    681,
                    306,
                    309,
                    717,
                    600,
                    472,
                    478,
                    374,
                    249,
                    638
                ],
                "result": [
                    257,
                    258,
                    259,
                    260,
                    780,
                    781,
                    417,
                    419,
                    803,
                    804,
                    427,
                    428,
                    431,
                    823,
                    824,
                    448,
                    834,
                    451,
                    836,
                    837,
                    455,
                    736,
                    746,
                    747,
                    748,
                    254,
                    255
                ],
                "object.__new__": [
                    254
                ],
                "object": [
                    357,
                    718,
                    398,
                    794,
                    732,
                    254
                ],
                "result._data": [
                    255
                ],
                "result._index_data": [
                    257
                ],
                "values._data": [
                    257,
                    275
                ],
                "result.name": [
                    258
                ],
                "result._reset_identity": [
                    259
                ],
                "classmethod": [
                    229
                ],
                "self": [
                    513,
                    515,
                    517,
                    522,
                    523,
                    528,
                    532,
                    534,
                    539,
                    541,
                    548,
                    550,
                    554,
                    556,
                    559,
                    567,
                    568,
                    573,
                    585,
                    591,
                    600,
                    609,
                    610,
                    638,
                    641,
                    642,
                    649,
                    692,
                    695,
                    698,
                    700,
                    704,
                    706,
                    707,
                    711,
                    714,
                    717,
                    718,
                    721,
                    723,
                    729,
                    732,
                    737,
                    747,
                    748,
                    758,
                    759,
                    762,
                    763,
                    764,
                    767,
                    768,
                    770,
                    772,
                    776,
                    267,
                    780,
                    272,
                    784,
                    274,
                    785,
                    786,
                    789,
                    279,
                    791,
                    794,
                    796,
                    285,
                    286,
                    797,
                    799,
                    290,
                    291,
                    803,
                    295,
                    807,
                    811,
                    813,
                    814,
                    818,
                    309,
                    822,
                    823,
                    830,
                    835,
                    836,
                    331,
                    334,
                    339,
                    342,
                    350,
                    357,
                    361,
                    369,
                    370,
                    375,
                    378,
                    381,
                    389,
                    396,
                    398,
                    412,
                    431,
                    441,
                    443,
                    448,
                    452,
                    464,
                    473,
                    474,
                    478,
                    482,
                    490,
                    492,
                    494,
                    510
                ],
                "property": [
                    484,
                    359,
                    265,
                    297,
                    497
                ],
                "self._data": [
                    272,
                    334,
                    791
                ],
                "type": [
                    811,
                    274,
                    282,
                    431
                ],
                "np.ndarray": [
                    330,
                    278
                ],
                "self.freq": [
                    513,
                    641,
                    515,
                    522,
                    523,
                    532,
                    279,
                    539,
                    548,
                    431,
                    692,
                    309,
                    567,
                    441,
                    698,
                    700,
                    830,
                    331,
                    717,
                    591,
                    339,
                    600,
                    473,
                    478,
                    758,
                    375,
                    638
                ],
                "getattr": [
                    282,
                    463
                ],
                "self.dtype": [
                    290,
                    770,
                    813,
                    794,
                    796,
                    285
                ],
                "kwargs.get": [
                    285
                ],
                "kwargs": [
                    288,
                    289,
                    285,
                    295
                ],
                "attributes": [
                    288,
                    290,
                    291,
                    286
                ],
                "self._get_attributes_dict": [
                    286
                ],
                "attributes.update": [
                    288
                ],
                "len": [
                    448,
                    289,
                    807,
                    490,
                    370,
                    407
                ],
                "self._simple_new": [
                    291
                ],
                "self._shallow_copy": [
                    803,
                    295,
                    780,
                    823,
                    723,
                    791
                ],
                "x": [
                    306,
                    307,
                    309
                ],
                "NaT": [
                    306,
                    607
                ],
                "Period._from_ordinal": [
                    309
                ],
                "func": [
                    420,
                    421,
                    422,
                    311,
                    408,
                    409,
                    411
                ],
                "other": [
                    768,
                    770,
                    773,
                    774,
                    777,
                    785,
                    786,
                    787,
                    789,
                    793,
                    794,
                    796,
                    800,
                    807,
                    808,
                    811,
                    813,
                    815,
                    816,
                    819,
                    822,
                    330,
                    334,
                    336,
                    337,
                    340,
                    342,
                    343,
                    729,
                    347,
                    731,
                    733,
                    738,
                    754,
                    758,
                    759,
                    763,
                    764,
                    765,
                    767
                ],
                "timedelta": [
                    330
                ],
                "np.timedelta64": [
                    330
                ],
                "Tick": [
                    330,
                    332
                ],
                "offset": [
                    331,
                    332
                ],
                "frequencies.to_offset": [
                    331
                ],
                "frequencies": [
                    331
                ],
                "self.freq.rule_code": [
                    339,
                    331
                ],
                "delta": [
                    334,
                    335
                ],
                "self._data._check_timedeltalike_freq_compat": [
                    334
                ],
                "DateOffset": [
                    336
                ],
                "freqstr": [
                    337,
                    338
                ],
                "other.rule_code": [
                    337
                ],
                "base": [
                    338,
                    339
                ],
                "libfrequencies.get_base_alias": [
                    338
                ],
                "libfrequencies": [
                    338
                ],
                "other.n": [
                    340
                ],
                "raise_on_incompatible": [
                    350,
                    474,
                    342,
                    759
                ],
                "is_integer": [
                    648,
                    587,
                    343
                ],
                "self.astype": [
                    772,
                    357,
                    718,
                    398,
                    814,
                    794,
                    732
                ],
                "self.array._formatter": [
                    361
                ],
                "self.array": [
                    361
                ],
                "period": [
                    369,
                    370,
                    539,
                    540
                ],
                "weakref.ref": [
                    369
                ],
                "weakref": [
                    369
                ],
                "self._engine_type": [
                    370
                ],
                "cache_readonly": [
                    387,
                    366
                ],
                "key": [
                    512,
                    513,
                    526,
                    529,
                    530,
                    532,
                    534,
                    537,
                    539,
                    540,
                    541,
                    698,
                    702,
                    585,
                    587,
                    591,
                    592,
                    597,
                    600,
                    604,
                    607,
                    609,
                    613,
                    374,
                    375,
                    378,
                    381,
                    510
                ],
                "key.freq": [
                    375
                ],
                "key.ordinal": [
                    378,
                    607
                ],
                "self._engine": [
                    585,
                    378
                ],
                "self.get_loc": [
                    381
                ],
                "KeyError": [
                    480,
                    612,
                    613,
                    383,
                    647,
                    586,
                    526,
                    691,
                    597,
                    537,
                    604,
                    702,
                    511
                ],
                "Appender": [
                    457,
                    562,
                    372,
                    470,
                    543
                ],
                "_index_shared_docs": [
                    457,
                    562,
                    372,
                    543
                ],
                "bool": [
                    485,
                    373
                ],
                "Int64Index._simple_new": [
                    800,
                    389,
                    776,
                    777,
                    818,
                    819,
                    799
                ],
                "self.asi8": [
                    389,
                    776,
                    396,
                    494,
                    818,
                    799
                ],
                "self.name": [
                    412,
                    389,
                    830,
                    431
                ],
                "is_integer_dtype": [
                    395
                ],
                "context": [
                    408,
                    413,
                    414,
                    407
                ],
                "tuple": [
                    407
                ],
                "np.add": [
                    409
                ],
                "np.subtract": [
                    411
                ],
                "left": [
                    416,
                    418,
                    413,
                    415
                ],
                "right": [
                    416,
                    418,
                    414,
                    415
                ],
                "PeriodIndex": [
                    547,
                    840,
                    841,
                    842,
                    908,
                    847,
                    566,
                    758,
                    441,
                    731,
                    829,
                    830,
                    415
                ],
                "left.name": [
                    416
                ],
                "right.name": [
                    416
                ],
                "Index": [
                    560,
                    417,
                    419
                ],
                "np.ufunc": [
                    420
                ],
                "func.types": [
                    421
                ],
                "msg": [
                    425,
                    422
                ],
                "func.__name__": [
                    422
                ],
                "ValueError": [
                    899,
                    644,
                    425,
                    713,
                    493,
                    696,
                    601
                ],
                "is_bool_dtype": [
                    427
                ],
                "where_idx": [
                    452,
                    439,
                    440,
                    441,
                    444
                ],
                "where": [
                    439
                ],
                "DatetimeIndex": [
                    440
                ],
                "where_idx.values": [
                    441
                ],
                "locs": [
                    448,
                    443,
                    452,
                    447
                ],
                "searchsorted": [
                    443
                ],
                "self._ndarray_values": [
                    482,
                    452,
                    517,
                    528,
                    443
                ],
                "mask": [
                    448,
                    450,
                    443
                ],
                "where_idx._ndarray_values": [
                    452,
                    444
                ],
                "np.where": [
                    447
                ],
                "take": [
                    448
                ],
                "np.arange": [
                    448
                ],
                "first": [
                    450,
                    452
                ],
                "mask.argmax": [
                    450
                ],
                "pandas_dtype": [
                    459
                ],
                "is_datetime64_any_dtype": [
                    461
                ],
                "tz": [
                    464,
                    463
                ],
                "tz_localize": [
                    464
                ],
                "self.to_timestamp": [
                    464
                ],
                "how": [
                    464,
                    739,
                    733
                ],
                "astype": [
                    794,
                    467
                ],
                "super": [
                    834,
                    808,
                    754,
                    467,
                    510
                ],
                "value": [
                    480,
                    482,
                    472,
                    473,
                    474,
                    475,
                    476,
                    478
                ],
                "value.freq": [
                    473
                ],
                "value.ordinal": [
                    475
                ],
                "str": [
                    512,
                    498,
                    476,
                    639
                ],
                "DateParseError": [
                    595,
                    479
                ],
                "self._ndarray_values.searchsorted": [
                    482
                ],
                "side": [
                    482,
                    643
                ],
                "sorter": [
                    482
                ],
                "Substitution": [
                    469
                ],
                "_shared_docs": [
                    470
                ],
                "self.is_monotonic": [
                    492,
                    695
                ],
                "all": [
                    495
                ],
                "s": [
                    508,
                    541,
                    510,
                    534
                ],
                "com.values_from_object": [
                    508
                ],
                "com": [
                    898,
                    533,
                    508,
                    541,
                    510
                ],
                "series": [
                    530,
                    534,
                    508,
                    541,
                    510
                ],
                "com.maybe_box": [
                    541,
                    533,
                    510
                ],
                "get_value": [
                    510
                ],
                "IndexError": [
                    511
                ],
                "asdt": [
                    513,
                    521,
                    591,
                    592,
                    532
                ],
                "parsed": [
                    513,
                    641,
                    642,
                    655,
                    657,
                    659,
                    660,
                    662,
                    665,
                    666,
                    667,
                    668,
                    673,
                    674,
                    675,
                    676,
                    677,
                    682,
                    683,
                    684,
                    685,
                    686,
                    687,
                    698,
                    704,
                    591
                ],
                "reso": [
                    704,
                    513,
                    514,
                    641,
                    642,
                    680,
                    654,
                    591,
                    656,
                    658,
                    691,
                    661,
                    663,
                    698,
                    699,
                    701,
                    671
                ],
                "parse_time_string": [
                    698,
                    513,
                    641,
                    591
                ],
                "grp": [
                    514,
                    520,
                    521,
                    531,
                    699,
                    701
                ],
                "resolution.Resolution.get_freq_group": [
                    514,
                    699
                ],
                "resolution.Resolution": [
                    514,
                    699
                ],
                "resolution": [
                    514,
                    515,
                    700,
                    699
                ],
                "freqn": [
                    515,
                    520,
                    531,
                    700,
                    701
                ],
                "resolution.get_freq_group": [
                    515,
                    700
                ],
                "vals": [
                    525,
                    517
                ],
                "iv": [
                    521,
                    522,
                    523
                ],
                "ord1": [
                    528,
                    522,
                    525
                ],
                "iv.asfreq": [
                    522,
                    523
                ],
                "ord2": [
                    528,
                    523,
                    525
                ],
                "pos": [
                    528,
                    529
                ],
                "np.searchsorted": [
                    528
                ],
                "slice": [
                    529,
                    705
                ],
                "self._int64index.get_value": [
                    541,
                    534
                ],
                "self._int64index": [
                    541,
                    610,
                    836,
                    554,
                    534,
                    573
                ],
                "isna": [
                    540
                ],
                "period.value": [
                    540
                ],
                "period.ordinal": [
                    540
                ],
                "target": [
                    545,
                    547,
                    548,
                    711,
                    712,
                    553,
                    559,
                    560,
                    564,
                    566,
                    567,
                    571,
                    573
                ],
                "ensure_index": [
                    545,
                    787,
                    564,
                    765
                ],
                "target.freq": [
                    548,
                    567
                ],
                "no_matches": [
                    568,
                    569,
                    550,
                    551
                ],
                "np.ones": [
                    568,
                    550
                ],
                "self.shape": [
                    568,
                    550
                ],
                "np.intp": [
                    568,
                    550
                ],
                "target.asi8": [
                    553,
                    571
                ],
                "self_index": [
                    560,
                    554,
                    556
                ],
                "tolerance": [
                    608,
                    609,
                    610,
                    711,
                    712,
                    714,
                    558,
                    559,
                    560
                ],
                "self._convert_tolerance": [
                    609,
                    559
                ],
                "Index.get_indexer": [
                    560
                ],
                "method": [
                    560,
                    610
                ],
                "limit": [
                    560
                ],
                "indexer": [
                    573,
                    574
                ],
                "missing": [
                    573,
                    574
                ],
                "self._int64index.get_indexer_non_unique": [
                    573
                ],
                "ensure_platform_int": [
                    574
                ],
                "self._engine.get_loc": [
                    585
                ],
                "iNaT": [
                    607
                ],
                "self._int64index.get_loc": [
                    610
                ],
                "kind": [
                    635
                ],
                "label": [
                    641,
                    647,
                    648,
                    649,
                    651,
                    637,
                    638,
                    639
                ],
                "datetime": [
                    637
                ],
                "_": [
                    641
                ],
                "bounds": [
                    642,
                    643
                ],
                "self._parsed_string_to_bounds": [
                    704,
                    642
                ],
                "is_float": [
                    648
                ],
                "self._invalid_indexer": [
                    649
                ],
                "t1": [
                    672,
                    704,
                    706,
                    681,
                    655,
                    657,
                    660,
                    692,
                    662,
                    664
                ],
                "parsed.year": [
                    673,
                    682,
                    655,
                    657,
                    660,
                    662,
                    665
                ],
                "parsed.month": [
                    674,
                    683,
                    657,
                    659,
                    662,
                    666
                ],
                "q": [
                    659,
                    660
                ],
                "parsed.day": [
                    667,
                    684,
                    675,
                    662
                ],
                "parsed.hour": [
                    676,
                    668,
                    685
                ],
                "parsed.minute": [
                    677,
                    686
                ],
                "parsed.second": [
                    687
                ],
                "t1.asfreq": [
                    692
                ],
                "t2": [
                    704,
                    707
                ],
                "self.searchsorted": [
                    706,
                    707
                ],
                "t1.ordinal": [
                    706
                ],
                "t2.ordinal": [
                    707
                ],
                "DatetimeIndexOpsMixin._convert_tolerance": [
                    711
                ],
                "target.size": [
                    712
                ],
                "tolerance.size": [
                    712
                ],
                "self._maybe_convert_timedelta": [
                    714
                ],
                "item": [
                    721,
                    717,
                    718
                ],
                "item.freq": [
                    717
                ],
                "insert": [
                    718
                ],
                "loc": [
                    721,
                    718
                ],
                "idx": [
                    720,
                    723
                ],
                "np.concatenate": [
                    720
                ],
                "asi8": [
                    721
                ],
                "np.array": [
                    721
                ],
                "item.ordinal": [
                    721
                ],
                "self._assert_can_do_setop": [
                    729,
                    763,
                    785
                ],
                "join": [
                    732
                ],
                "level": [
                    740,
                    733
                ],
                "return_indexers": [
                    741,
                    745,
                    733
                ],
                "sort": [
                    801,
                    742,
                    774,
                    808,
                    778,
                    784,
                    816,
                    820,
                    762,
                    733
                ],
                "Int64Index.join": [
                    736
                ],
                "lidx": [
                    746,
                    747
                ],
                "ridx": [
                    746,
                    747
                ],
                "self._apply_meta": [
                    747,
                    748
                ],
                "_assert_can_do_setop": [
                    754
                ],
                "other.freq": [
                    758
                ],
                "self._validate_sort_keyword": [
                    784,
                    762
                ],
                "res_name": [
                    803,
                    780,
                    786,
                    822,
                    823,
                    764
                ],
                "get_op_result_name": [
                    786,
                    764,
                    822
                ],
                "self.equals": [
                    807,
                    789,
                    767
                ],
                "self._get_reconciled_name_object": [
                    768
                ],
                "is_dtype_equal": [
                    770,
                    796,
                    813
                ],
                "other.dtype": [
                    770,
                    796,
                    813
                ],
                "this": [
                    814,
                    816,
                    772,
                    774
                ],
                "other.astype": [
                    773,
                    815
                ],
                "this.intersection": [
                    774
                ],
                "i8self": [
                    801,
                    776,
                    778,
                    818,
                    820,
                    799
                ],
                "i8other": [
                    800,
                    801,
                    777,
                    778,
                    819,
                    820
                ],
                "other.asi8": [
                    800,
                    777,
                    819
                ],
                "i8result": [
                    801,
                    803,
                    778,
                    780,
                    820,
                    823
                ],
                "i8self.intersection": [
                    778
                ],
                "is_object_dtype": [
                    793
                ],
                "difference": [
                    794
                ],
                "i8self.difference": [
                    801
                ],
                "_union": [
                    808
                ],
                "this._union": [
                    816
                ],
                "i8self._union": [
                    820
                ],
                "rawarr": [
                    829,
                    830,
                    831
                ],
                "PeriodIndex._simple_new": [
                    830
                ],
                "memory_usage": [
                    834
                ],
                "deep": [
                    834,
                    836
                ],
                "hasattr": [
                    835
                ],
                "self._cache": [
                    835
                ],
                "self._int64index.memory_usage": [
                    836
                ],
                "delegate_names": [
                    82,
                    83
                ],
                "PeriodDelegateMixin._delegated_properties": [
                    82
                ],
                "PeriodDelegateMixin._delegated_methods": [
                    84
                ],
                "PeriodIndex._add_comparison_ops": [
                    840
                ],
                "PeriodIndex._add_numeric_methods_disabled": [
                    841
                ],
                "PeriodIndex._add_logical_methods_disabled": [
                    842
                ],
                "com.count_not_none": [
                    898
                ],
                "start": [
                    898,
                    906,
                    903
                ],
                "end": [
                    898,
                    906,
                    903
                ],
                "periods": [
                    898,
                    906
                ]
            },
            "filtered_variables_in_file": {
                "_index_doc_kwargs": [
                    562,
                    52,
                    53,
                    543
                ],
                "ibase._index_doc_kwargs": [
                    52
                ],
                "ibase": [
                    52
                ],
                "_index_doc_kwargs.update": [
                    53
                ],
                "values": [
                    257,
                    398,
                    271,
                    272,
                    274,
                    275,
                    277,
                    278,
                    279,
                    282,
                    289,
                    291,
                    295,
                    61,
                    62,
                    64,
                    65,
                    67,
                    357,
                    494,
                    495,
                    244,
                    245,
                    246,
                    250,
                    252,
                    255
                ],
                "d.pop": [
                    61,
                    63
                ],
                "d": [
                    65,
                    67,
                    61,
                    63
                ],
                "values.dtype": [
                    62,
                    278
                ],
                "freq": [
                    64,
                    199,
                    903,
                    904,
                    202,
                    906,
                    204,
                    907,
                    206,
                    211,
                    214,
                    248,
                    249,
                    250,
                    219,
                    222,
                    63
                ],
                "PeriodArray": [
                    64,
                    161,
                    199,
                    906,
                    907,
                    204,
                    78,
                    79,
                    82,
                    84,
                    277,
                    279,
                    250,
                    219,
                    252
                ],
                "cls._simple_new": [
                    65,
                    227
                ],
                "cls": [
                    65,
                    67,
                    227,
                    195,
                    211,
                    254
                ],
                "DatetimelikeDelegateMixin": [
                    70
                ],
                "_raw_methods": [
                    75,
                    79
                ],
                "_raw_properties": [
                    76,
                    78
                ],
                "_delegated_properties": [
                    78
                ],
                "PeriodArray._datetimelike_ops": [
                    78
                ],
                "_delegated_methods": [
                    79
                ],
                "PeriodArray._datetimelike_methods": [
                    79
                ],
                "DatetimeIndexOpsMixin": [
                    86,
                    711
                ],
                "Int64Index": [
                    736,
                    800,
                    389,
                    776,
                    777,
                    818,
                    819,
                    86,
                    799
                ],
                "PeriodDelegateMixin": [
                    82,
                    84,
                    86
                ],
                "_typ": [
                    154
                ],
                "_attributes": [
                    155
                ],
                "_is_numeric_dtype": [
                    158
                ],
                "_infer_as_myclass": [
                    159
                ],
                "_data": [
                    161
                ],
                "_engine_type": [
                    163
                ],
                "libindex.PeriodEngine": [
                    163
                ],
                "libindex": [
                    163
                ],
                "_supports_partial_string_indexing": [
                    164
                ],
                "valid_field_set": [
                    192,
                    181,
                    191
                ],
                "issubset": [
                    191
                ],
                "fields": [
                    192,
                    199,
                    191
                ],
                "argument": [
                    192,
                    193
                ],
                "name": [
                    416,
                    417,
                    258,
                    195,
                    227,
                    419,
                    908,
                    412
                ],
                "maybe_extract_name": [
                    195
                ],
                "data": [
                    225,
                    195,
                    227,
                    197,
                    199,
                    906,
                    907,
                    204,
                    908,
                    211,
                    214,
                    216,
                    219,
                    222
                ],
                "ordinal": [
                    610,
                    197,
                    522,
                    523,
                    532,
                    216,
                    218,
                    219,
                    478,
                    607
                ],
                "freq2": [
                    202,
                    199
                ],
                "PeriodArray._generate_range": [
                    906,
                    199
                ],
                "validate_dtype_freq": [
                    285,
                    206
                ],
                "dtype": [
                    395,
                    459,
                    461,
                    206,
                    463,
                    467
                ],
                "data.freq": [
                    211
                ],
                "data.asfreq": [
                    214
                ],
                "np.asarray": [
                    609,
                    803,
                    267,
                    780,
                    245,
                    823,
                    218
                ],
                "np": [
                    267,
                    780,
                    528,
                    278,
                    409,
                    411,
                    803,
                    420,
                    550,
                    823,
                    568,
                    447,
                    448,
                    330,
                    720,
                    721,
                    218,
                    609,
                    245
                ],
                "np.int64": [
                    218,
                    803,
                    780,
                    823
                ],
                "period_array": [
                    222
                ],
                "copy": [
                    224,
                    467
                ],
                "data.copy": [
                    225
                ],
                "is_float_dtype": [
                    246
                ],
                "Period._maybe_convert_freq": [
                    249
                ],
                "Period": [
                    903,
                    521,
                    655,
                    657,
                    532,
                    660,
                    662,
                    664,
                    539,
                    672,
                    418,
                    681,
                    306,
                    309,
                    717,
                    600,
                    472,
                    478,
                    374,
                    249,
                    638
                ],
                "result": [
                    257,
                    258,
                    259,
                    260,
                    780,
                    781,
                    417,
                    419,
                    803,
                    804,
                    427,
                    428,
                    431,
                    823,
                    824,
                    448,
                    834,
                    451,
                    836,
                    837,
                    455,
                    736,
                    746,
                    747,
                    748,
                    254,
                    255
                ],
                "object.__new__": [
                    254
                ],
                "result._data": [
                    255
                ],
                "result._index_data": [
                    257
                ],
                "values._data": [
                    257,
                    275
                ],
                "result.name": [
                    258
                ],
                "result._reset_identity": [
                    259
                ],
                "self": [
                    513,
                    515,
                    517,
                    522,
                    523,
                    528,
                    532,
                    534,
                    539,
                    541,
                    548,
                    550,
                    554,
                    556,
                    559,
                    567,
                    568,
                    573,
                    585,
                    591,
                    600,
                    609,
                    610,
                    638,
                    641,
                    642,
                    649,
                    692,
                    695,
                    698,
                    700,
                    704,
                    706,
                    707,
                    711,
                    714,
                    717,
                    718,
                    721,
                    723,
                    729,
                    732,
                    737,
                    747,
                    748,
                    758,
                    759,
                    762,
                    763,
                    764,
                    767,
                    768,
                    770,
                    772,
                    776,
                    267,
                    780,
                    272,
                    784,
                    274,
                    785,
                    786,
                    789,
                    279,
                    791,
                    794,
                    796,
                    285,
                    286,
                    797,
                    799,
                    290,
                    291,
                    803,
                    295,
                    807,
                    811,
                    813,
                    814,
                    818,
                    309,
                    822,
                    823,
                    830,
                    835,
                    836,
                    331,
                    334,
                    339,
                    342,
                    350,
                    357,
                    361,
                    369,
                    370,
                    375,
                    378,
                    381,
                    389,
                    396,
                    398,
                    412,
                    431,
                    441,
                    443,
                    448,
                    452,
                    464,
                    473,
                    474,
                    478,
                    482,
                    490,
                    492,
                    494,
                    510
                ],
                "self._data": [
                    272,
                    334,
                    791
                ],
                "np.ndarray": [
                    330,
                    278
                ],
                "self.freq": [
                    513,
                    641,
                    515,
                    522,
                    523,
                    532,
                    279,
                    539,
                    548,
                    431,
                    692,
                    309,
                    567,
                    441,
                    698,
                    700,
                    830,
                    331,
                    717,
                    591,
                    339,
                    600,
                    473,
                    478,
                    758,
                    375,
                    638
                ],
                "self.dtype": [
                    290,
                    770,
                    813,
                    794,
                    796,
                    285
                ],
                "kwargs.get": [
                    285
                ],
                "kwargs": [
                    288,
                    289,
                    285,
                    295
                ],
                "attributes": [
                    288,
                    290,
                    291,
                    286
                ],
                "self._get_attributes_dict": [
                    286
                ],
                "attributes.update": [
                    288
                ],
                "self._simple_new": [
                    291
                ],
                "self._shallow_copy": [
                    803,
                    295,
                    780,
                    823,
                    723,
                    791
                ],
                "x": [
                    306,
                    307,
                    309
                ],
                "NaT": [
                    306,
                    607
                ],
                "Period._from_ordinal": [
                    309
                ],
                "func": [
                    420,
                    421,
                    422,
                    311,
                    408,
                    409,
                    411
                ],
                "other": [
                    768,
                    770,
                    773,
                    774,
                    777,
                    785,
                    786,
                    787,
                    789,
                    793,
                    794,
                    796,
                    800,
                    807,
                    808,
                    811,
                    813,
                    815,
                    816,
                    819,
                    822,
                    330,
                    334,
                    336,
                    337,
                    340,
                    342,
                    343,
                    729,
                    347,
                    731,
                    733,
                    738,
                    754,
                    758,
                    759,
                    763,
                    764,
                    765,
                    767
                ],
                "timedelta": [
                    330
                ],
                "np.timedelta64": [
                    330
                ],
                "Tick": [
                    330,
                    332
                ],
                "offset": [
                    331,
                    332
                ],
                "frequencies.to_offset": [
                    331
                ],
                "frequencies": [
                    331
                ],
                "self.freq.rule_code": [
                    339,
                    331
                ],
                "delta": [
                    334,
                    335
                ],
                "self._data._check_timedeltalike_freq_compat": [
                    334
                ],
                "DateOffset": [
                    336
                ],
                "freqstr": [
                    337,
                    338
                ],
                "other.rule_code": [
                    337
                ],
                "base": [
                    338,
                    339
                ],
                "libfrequencies.get_base_alias": [
                    338
                ],
                "libfrequencies": [
                    338
                ],
                "other.n": [
                    340
                ],
                "raise_on_incompatible": [
                    350,
                    474,
                    342,
                    759
                ],
                "is_integer": [
                    648,
                    587,
                    343
                ],
                "self.astype": [
                    772,
                    357,
                    718,
                    398,
                    814,
                    794,
                    732
                ],
                "self.array._formatter": [
                    361
                ],
                "self.array": [
                    361
                ],
                "period": [
                    369,
                    370,
                    539,
                    540
                ],
                "weakref.ref": [
                    369
                ],
                "weakref": [
                    369
                ],
                "self._engine_type": [
                    370
                ],
                "cache_readonly": [
                    387,
                    366
                ],
                "key": [
                    512,
                    513,
                    526,
                    529,
                    530,
                    532,
                    534,
                    537,
                    539,
                    540,
                    541,
                    698,
                    702,
                    585,
                    587,
                    591,
                    592,
                    597,
                    600,
                    604,
                    607,
                    609,
                    613,
                    374,
                    375,
                    378,
                    381,
                    510
                ],
                "key.freq": [
                    375
                ],
                "key.ordinal": [
                    378,
                    607
                ],
                "self._engine": [
                    585,
                    378
                ],
                "self.get_loc": [
                    381
                ],
                "Appender": [
                    457,
                    562,
                    372,
                    470,
                    543
                ],
                "_index_shared_docs": [
                    457,
                    562,
                    372,
                    543
                ],
                "Int64Index._simple_new": [
                    800,
                    389,
                    776,
                    777,
                    818,
                    819,
                    799
                ],
                "self.asi8": [
                    389,
                    776,
                    396,
                    494,
                    818,
                    799
                ],
                "self.name": [
                    412,
                    389,
                    830,
                    431
                ],
                "is_integer_dtype": [
                    395
                ],
                "context": [
                    408,
                    413,
                    414,
                    407
                ],
                "np.add": [
                    409
                ],
                "np.subtract": [
                    411
                ],
                "left": [
                    416,
                    418,
                    413,
                    415
                ],
                "right": [
                    416,
                    418,
                    414,
                    415
                ],
                "PeriodIndex": [
                    547,
                    840,
                    841,
                    842,
                    908,
                    847,
                    566,
                    758,
                    441,
                    731,
                    829,
                    830,
                    415
                ],
                "left.name": [
                    416
                ],
                "right.name": [
                    416
                ],
                "Index": [
                    560,
                    417,
                    419
                ],
                "np.ufunc": [
                    420
                ],
                "func.types": [
                    421
                ],
                "msg": [
                    425,
                    422
                ],
                "func.__name__": [
                    422
                ],
                "is_bool_dtype": [
                    427
                ],
                "where_idx": [
                    452,
                    439,
                    440,
                    441,
                    444
                ],
                "where": [
                    439
                ],
                "DatetimeIndex": [
                    440
                ],
                "where_idx.values": [
                    441
                ],
                "locs": [
                    448,
                    443,
                    452,
                    447
                ],
                "searchsorted": [
                    443
                ],
                "self._ndarray_values": [
                    482,
                    452,
                    517,
                    528,
                    443
                ],
                "mask": [
                    448,
                    450,
                    443
                ],
                "where_idx._ndarray_values": [
                    452,
                    444
                ],
                "np.where": [
                    447
                ],
                "take": [
                    448
                ],
                "np.arange": [
                    448
                ],
                "first": [
                    450,
                    452
                ],
                "mask.argmax": [
                    450
                ],
                "pandas_dtype": [
                    459
                ],
                "is_datetime64_any_dtype": [
                    461
                ],
                "tz": [
                    464,
                    463
                ],
                "tz_localize": [
                    464
                ],
                "self.to_timestamp": [
                    464
                ],
                "how": [
                    464,
                    739,
                    733
                ],
                "astype": [
                    794,
                    467
                ],
                "value": [
                    480,
                    482,
                    472,
                    473,
                    474,
                    475,
                    476,
                    478
                ],
                "value.freq": [
                    473
                ],
                "value.ordinal": [
                    475
                ],
                "DateParseError": [
                    595,
                    479
                ],
                "self._ndarray_values.searchsorted": [
                    482
                ],
                "side": [
                    482,
                    643
                ],
                "sorter": [
                    482
                ],
                "Substitution": [
                    469
                ],
                "_shared_docs": [
                    470
                ],
                "self.is_monotonic": [
                    492,
                    695
                ],
                "s": [
                    508,
                    541,
                    510,
                    534
                ],
                "com.values_from_object": [
                    508
                ],
                "com": [
                    898,
                    533,
                    508,
                    541,
                    510
                ],
                "series": [
                    530,
                    534,
                    508,
                    541,
                    510
                ],
                "com.maybe_box": [
                    541,
                    533,
                    510
                ],
                "get_value": [
                    510
                ],
                "asdt": [
                    513,
                    521,
                    591,
                    592,
                    532
                ],
                "parsed": [
                    513,
                    641,
                    642,
                    655,
                    657,
                    659,
                    660,
                    662,
                    665,
                    666,
                    667,
                    668,
                    673,
                    674,
                    675,
                    676,
                    677,
                    682,
                    683,
                    684,
                    685,
                    686,
                    687,
                    698,
                    704,
                    591
                ],
                "reso": [
                    704,
                    513,
                    514,
                    641,
                    642,
                    680,
                    654,
                    591,
                    656,
                    658,
                    691,
                    661,
                    663,
                    698,
                    699,
                    701,
                    671
                ],
                "parse_time_string": [
                    698,
                    513,
                    641,
                    591
                ],
                "grp": [
                    514,
                    520,
                    521,
                    531,
                    699,
                    701
                ],
                "resolution.Resolution.get_freq_group": [
                    514,
                    699
                ],
                "resolution.Resolution": [
                    514,
                    699
                ],
                "resolution": [
                    514,
                    515,
                    700,
                    699
                ],
                "freqn": [
                    515,
                    520,
                    531,
                    700,
                    701
                ],
                "resolution.get_freq_group": [
                    515,
                    700
                ],
                "vals": [
                    525,
                    517
                ],
                "iv": [
                    521,
                    522,
                    523
                ],
                "ord1": [
                    528,
                    522,
                    525
                ],
                "iv.asfreq": [
                    522,
                    523
                ],
                "ord2": [
                    528,
                    523,
                    525
                ],
                "pos": [
                    528,
                    529
                ],
                "np.searchsorted": [
                    528
                ],
                "self._int64index.get_value": [
                    541,
                    534
                ],
                "self._int64index": [
                    541,
                    610,
                    836,
                    554,
                    534,
                    573
                ],
                "isna": [
                    540
                ],
                "period.value": [
                    540
                ],
                "period.ordinal": [
                    540
                ],
                "target": [
                    545,
                    547,
                    548,
                    711,
                    712,
                    553,
                    559,
                    560,
                    564,
                    566,
                    567,
                    571,
                    573
                ],
                "ensure_index": [
                    545,
                    787,
                    564,
                    765
                ],
                "target.freq": [
                    548,
                    567
                ],
                "no_matches": [
                    568,
                    569,
                    550,
                    551
                ],
                "np.ones": [
                    568,
                    550
                ],
                "self.shape": [
                    568,
                    550
                ],
                "np.intp": [
                    568,
                    550
                ],
                "target.asi8": [
                    553,
                    571
                ],
                "self_index": [
                    560,
                    554,
                    556
                ],
                "tolerance": [
                    608,
                    609,
                    610,
                    711,
                    712,
                    714,
                    558,
                    559,
                    560
                ],
                "self._convert_tolerance": [
                    609,
                    559
                ],
                "Index.get_indexer": [
                    560
                ],
                "method": [
                    560,
                    610
                ],
                "limit": [
                    560
                ],
                "indexer": [
                    573,
                    574
                ],
                "missing": [
                    573,
                    574
                ],
                "self._int64index.get_indexer_non_unique": [
                    573
                ],
                "ensure_platform_int": [
                    574
                ],
                "self._engine.get_loc": [
                    585
                ],
                "iNaT": [
                    607
                ],
                "self._int64index.get_loc": [
                    610
                ],
                "kind": [
                    635
                ],
                "label": [
                    641,
                    647,
                    648,
                    649,
                    651,
                    637,
                    638,
                    639
                ],
                "datetime": [
                    637
                ],
                "_": [
                    641
                ],
                "bounds": [
                    642,
                    643
                ],
                "self._parsed_string_to_bounds": [
                    704,
                    642
                ],
                "is_float": [
                    648
                ],
                "self._invalid_indexer": [
                    649
                ],
                "t1": [
                    672,
                    704,
                    706,
                    681,
                    655,
                    657,
                    660,
                    692,
                    662,
                    664
                ],
                "parsed.year": [
                    673,
                    682,
                    655,
                    657,
                    660,
                    662,
                    665
                ],
                "parsed.month": [
                    674,
                    683,
                    657,
                    659,
                    662,
                    666
                ],
                "q": [
                    659,
                    660
                ],
                "parsed.day": [
                    667,
                    684,
                    675,
                    662
                ],
                "parsed.hour": [
                    676,
                    668,
                    685
                ],
                "parsed.minute": [
                    677,
                    686
                ],
                "parsed.second": [
                    687
                ],
                "t1.asfreq": [
                    692
                ],
                "t2": [
                    704,
                    707
                ],
                "self.searchsorted": [
                    706,
                    707
                ],
                "t1.ordinal": [
                    706
                ],
                "t2.ordinal": [
                    707
                ],
                "DatetimeIndexOpsMixin._convert_tolerance": [
                    711
                ],
                "target.size": [
                    712
                ],
                "tolerance.size": [
                    712
                ],
                "self._maybe_convert_timedelta": [
                    714
                ],
                "item": [
                    721,
                    717,
                    718
                ],
                "item.freq": [
                    717
                ],
                "insert": [
                    718
                ],
                "loc": [
                    721,
                    718
                ],
                "idx": [
                    720,
                    723
                ],
                "np.concatenate": [
                    720
                ],
                "asi8": [
                    721
                ],
                "np.array": [
                    721
                ],
                "item.ordinal": [
                    721
                ],
                "self._assert_can_do_setop": [
                    729,
                    763,
                    785
                ],
                "join": [
                    732
                ],
                "level": [
                    740,
                    733
                ],
                "return_indexers": [
                    741,
                    745,
                    733
                ],
                "sort": [
                    801,
                    742,
                    774,
                    808,
                    778,
                    784,
                    816,
                    820,
                    762,
                    733
                ],
                "Int64Index.join": [
                    736
                ],
                "lidx": [
                    746,
                    747
                ],
                "ridx": [
                    746,
                    747
                ],
                "self._apply_meta": [
                    747,
                    748
                ],
                "_assert_can_do_setop": [
                    754
                ],
                "other.freq": [
                    758
                ],
                "self._validate_sort_keyword": [
                    784,
                    762
                ],
                "res_name": [
                    803,
                    780,
                    786,
                    822,
                    823,
                    764
                ],
                "get_op_result_name": [
                    786,
                    764,
                    822
                ],
                "self.equals": [
                    807,
                    789,
                    767
                ],
                "self._get_reconciled_name_object": [
                    768
                ],
                "is_dtype_equal": [
                    770,
                    796,
                    813
                ],
                "other.dtype": [
                    770,
                    796,
                    813
                ],
                "this": [
                    814,
                    816,
                    772,
                    774
                ],
                "other.astype": [
                    773,
                    815
                ],
                "this.intersection": [
                    774
                ],
                "i8self": [
                    801,
                    776,
                    778,
                    818,
                    820,
                    799
                ],
                "i8other": [
                    800,
                    801,
                    777,
                    778,
                    819,
                    820
                ],
                "other.asi8": [
                    800,
                    777,
                    819
                ],
                "i8result": [
                    801,
                    803,
                    778,
                    780,
                    820,
                    823
                ],
                "i8self.intersection": [
                    778
                ],
                "is_object_dtype": [
                    793
                ],
                "difference": [
                    794
                ],
                "i8self.difference": [
                    801
                ],
                "_union": [
                    808
                ],
                "this._union": [
                    816
                ],
                "i8self._union": [
                    820
                ],
                "rawarr": [
                    829,
                    830,
                    831
                ],
                "PeriodIndex._simple_new": [
                    830
                ],
                "memory_usage": [
                    834
                ],
                "deep": [
                    834,
                    836
                ],
                "self._cache": [
                    835
                ],
                "self._int64index.memory_usage": [
                    836
                ],
                "delegate_names": [
                    82,
                    83
                ],
                "PeriodDelegateMixin._delegated_properties": [
                    82
                ],
                "PeriodDelegateMixin._delegated_methods": [
                    84
                ],
                "PeriodIndex._add_comparison_ops": [
                    840
                ],
                "PeriodIndex._add_numeric_methods_disabled": [
                    841
                ],
                "PeriodIndex._add_logical_methods_disabled": [
                    842
                ],
                "com.count_not_none": [
                    898
                ],
                "start": [
                    898,
                    906,
                    903
                ],
                "end": [
                    898,
                    906,
                    903
                ],
                "periods": [
                    898,
                    906
                ]
            }
        },
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_92/pandas/core/resample.py": {
            "buggy_functions": [
                {
                    "function_name": "_get_period_bins",
                    "function_code": "def _get_period_bins(self, ax):\n    if not isinstance(ax, PeriodIndex):\n        raise TypeError(\n            \"axis must be a PeriodIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    memb = ax.asfreq(self.freq, how=self.convention)\n\n    # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n    nat_count = 0\n    if memb.hasnans:\n        nat_count = np.sum(memb._isnan)\n        memb = memb[~memb._isnan]\n\n    # if index contains no valid (non-NaT) values, return empty index\n    if not len(memb):\n        binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    freq_mult = self.freq.n\n\n    start = ax.min().asfreq(self.freq, how=self.convention)\n    end = ax.max().asfreq(self.freq, how=\"end\")\n    bin_shift = 0\n\n    # GH 23882\n    if self.base:\n        # get base adjusted bin edge labels\n        p_start, end = _get_period_range_edges(\n            start, end, self.freq, closed=self.closed, base=self.base\n        )\n\n        # Get offset for bin edge (not label edge) adjustment\n        start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n        bin_shift = start_offset.n % freq_mult\n        start = p_start\n\n    labels = binner = period_range(\n        start=start, end=end, freq=self.freq, name=ax.name\n    )\n\n    i8 = memb.asi8\n\n    # when upsampling to subperiods, we need to generate enough bins\n    expected_bins_count = len(binner) * freq_mult\n    i8_extend = expected_bins_count - (i8[-1] - i8[0])\n    rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n    rng += freq_mult\n    # adjust bin edge indexes to account for base\n    rng -= bin_shift\n    bins = memb.searchsorted(rng, side=\"left\")\n\n    if nat_count > 0:\n        # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n        # shift bins by the number of NaT\n        bins += nat_count\n        bins = np.insert(bins, 0, nat_count)\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    return binner, bins, labels\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1538,
                    "variables": {
                        "isinstance": [
                            1539
                        ],
                        "ax": [
                            1539,
                            1542,
                            1545,
                            1577,
                            1555,
                            1560,
                            1561
                        ],
                        "PeriodIndex": [
                            1555,
                            1539
                        ],
                        "TypeError": [
                            1540
                        ],
                        "__name__": [
                            1542
                        ],
                        "type": [
                            1542
                        ],
                        "memb": [
                            1545,
                            1580,
                            1549,
                            1550,
                            1551,
                            1554,
                            1589
                        ],
                        "ax.asfreq": [
                            1545
                        ],
                        "self.freq": [
                            1568,
                            1572,
                            1545,
                            1577,
                            1555,
                            1558,
                            1560,
                            1561
                        ],
                        "self": [
                            1568,
                            1572,
                            1545,
                            1577,
                            1555,
                            1558,
                            1560,
                            1561,
                            1565
                        ],
                        "self.convention": [
                            1560,
                            1545
                        ],
                        "nat_count": [
                            1548,
                            1550,
                            1591,
                            1594,
                            1595
                        ],
                        "memb.hasnans": [
                            1549
                        ],
                        "np.sum": [
                            1550
                        ],
                        "np": [
                            1585,
                            1595,
                            1550
                        ],
                        "memb._isnan": [
                            1550,
                            1551
                        ],
                        "len": [
                            1554,
                            1583
                        ],
                        "binner": [
                            1576,
                            1583,
                            1555,
                            1556,
                            1596,
                            1599
                        ],
                        "labels": [
                            1576,
                            1555,
                            1556,
                            1597,
                            1599
                        ],
                        "ax.name": [
                            1577,
                            1555
                        ],
                        "freq_mult": [
                            1573,
                            1583,
                            1585,
                            1586,
                            1558
                        ],
                        "self.freq.n": [
                            1558
                        ],
                        "start": [
                            1568,
                            1572,
                            1574,
                            1577,
                            1560
                        ],
                        "asfreq": [
                            1560,
                            1561
                        ],
                        "ax.min": [
                            1560
                        ],
                        "end": [
                            1568,
                            1561,
                            1577,
                            1567
                        ],
                        "ax.max": [
                            1561
                        ],
                        "bin_shift": [
                            1562,
                            1588,
                            1573
                        ],
                        "self.base": [
                            1568,
                            1565
                        ],
                        "p_start": [
                            1572,
                            1574,
                            1567
                        ],
                        "_get_period_range_edges": [
                            1567
                        ],
                        "self.closed": [
                            1568
                        ],
                        "start_offset": [
                            1572,
                            1573
                        ],
                        "Period": [
                            1572
                        ],
                        "start_offset.n": [
                            1573
                        ],
                        "period_range": [
                            1576
                        ],
                        "i8": [
                            1584,
                            1585,
                            1580
                        ],
                        "memb.asi8": [
                            1580
                        ],
                        "expected_bins_count": [
                            1584,
                            1583
                        ],
                        "i8_extend": [
                            1584,
                            1585
                        ],
                        "rng": [
                            1585,
                            1586,
                            1588,
                            1589
                        ],
                        "np.arange": [
                            1585
                        ],
                        "bins": [
                            1594,
                            1595,
                            1589,
                            1599
                        ],
                        "memb.searchsorted": [
                            1589
                        ],
                        "np.insert": [
                            1595
                        ],
                        "binner.insert": [
                            1596
                        ],
                        "NaT": [
                            1596,
                            1597
                        ],
                        "labels.insert": [
                            1597
                        ]
                    },
                    "filtered_variables": {
                        "ax": [
                            1539,
                            1542,
                            1545,
                            1577,
                            1555,
                            1560,
                            1561
                        ],
                        "PeriodIndex": [
                            1555,
                            1539
                        ],
                        "memb": [
                            1545,
                            1580,
                            1549,
                            1550,
                            1551,
                            1554,
                            1589
                        ],
                        "ax.asfreq": [
                            1545
                        ],
                        "self.freq": [
                            1568,
                            1572,
                            1545,
                            1577,
                            1555,
                            1558,
                            1560,
                            1561
                        ],
                        "self": [
                            1568,
                            1572,
                            1545,
                            1577,
                            1555,
                            1558,
                            1560,
                            1561,
                            1565
                        ],
                        "self.convention": [
                            1560,
                            1545
                        ],
                        "nat_count": [
                            1548,
                            1550,
                            1591,
                            1594,
                            1595
                        ],
                        "memb.hasnans": [
                            1549
                        ],
                        "np.sum": [
                            1550
                        ],
                        "np": [
                            1585,
                            1595,
                            1550
                        ],
                        "memb._isnan": [
                            1550,
                            1551
                        ],
                        "binner": [
                            1576,
                            1583,
                            1555,
                            1556,
                            1596,
                            1599
                        ],
                        "labels": [
                            1576,
                            1555,
                            1556,
                            1597,
                            1599
                        ],
                        "ax.name": [
                            1577,
                            1555
                        ],
                        "freq_mult": [
                            1573,
                            1583,
                            1585,
                            1586,
                            1558
                        ],
                        "self.freq.n": [
                            1558
                        ],
                        "start": [
                            1568,
                            1572,
                            1574,
                            1577,
                            1560
                        ],
                        "asfreq": [
                            1560,
                            1561
                        ],
                        "ax.min": [
                            1560
                        ],
                        "end": [
                            1568,
                            1561,
                            1577,
                            1567
                        ],
                        "ax.max": [
                            1561
                        ],
                        "bin_shift": [
                            1562,
                            1588,
                            1573
                        ],
                        "self.base": [
                            1568,
                            1565
                        ],
                        "p_start": [
                            1572,
                            1574,
                            1567
                        ],
                        "_get_period_range_edges": [
                            1567
                        ],
                        "self.closed": [
                            1568
                        ],
                        "start_offset": [
                            1572,
                            1573
                        ],
                        "Period": [
                            1572
                        ],
                        "start_offset.n": [
                            1573
                        ],
                        "period_range": [
                            1576
                        ],
                        "i8": [
                            1584,
                            1585,
                            1580
                        ],
                        "memb.asi8": [
                            1580
                        ],
                        "expected_bins_count": [
                            1584,
                            1583
                        ],
                        "i8_extend": [
                            1584,
                            1585
                        ],
                        "rng": [
                            1585,
                            1586,
                            1588,
                            1589
                        ],
                        "np.arange": [
                            1585
                        ],
                        "bins": [
                            1594,
                            1595,
                            1589,
                            1599
                        ],
                        "memb.searchsorted": [
                            1589
                        ],
                        "np.insert": [
                            1595
                        ],
                        "binner.insert": [
                            1596
                        ],
                        "NaT": [
                            1596,
                            1597
                        ],
                        "labels.insert": [
                            1597
                        ]
                    },
                    "diff_line_number": 1589,
                    "class_data": {
                        "signature": "class TimeGrouper(Grouper)",
                        "docstring": "Custom groupby class for time-interval grouping.\n\nParameters\n----------\nfreq : pandas date offset or offset alias for identifying bin edges\nclosed : closed end of interval; 'left' or 'right'\nlabel : interval boundary to use for labeling; 'left' or 'right'\nconvention : {'start', 'end', 'e', 's'}\n    If axis is PeriodIndex",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs):\n    if label not in {None, 'left', 'right'}:\n        raise ValueError(f'Unsupported value {label} for `label`')\n    if closed not in {None, 'left', 'right'}:\n        raise ValueError(f'Unsupported value {closed} for `closed`')\n    if convention not in {None, 'start', 'end', 'e', 's'}:\n        raise ValueError(f'Unsupported value {convention} for `convention`')\n    freq = to_offset(freq)\n    end_types = {'M', 'A', 'Q', 'BM', 'BA', 'BQ', 'W'}\n    rule = freq.rule_code\n    if rule in end_types or ('-' in rule and rule[:rule.find('-')] in end_types):\n        if closed is None:\n            closed = 'right'\n        if label is None:\n            label = 'right'\n    else:\n        if closed is None:\n            closed = 'left'\n        if label is None:\n            label = 'left'\n    self.closed = closed\n    self.label = label\n    self.kind = kind\n    self.convention = convention or 'E'\n    self.convention = self.convention.lower()\n    if isinstance(loffset, str):\n        loffset = to_offset(loffset)\n    self.loffset = loffset\n    self.how = how\n    self.fill_method = fill_method\n    self.limit = limit\n    self.base = base\n    kwargs['sort'] = True\n    super().__init__(freq=freq, axis=axis, **kwargs)",
                            "def _get_resampler(self, obj, kind=None):\n    \"\"\"\n    Return my resampler or raise if we have an invalid axis.\n\n    Parameters\n    ----------\n    obj : input object\n    kind : string, optional\n        'period','timestamp','timedelta' are valid\n\n    Returns\n    -------\n    a Resampler\n\n    Raises\n    ------\n    TypeError if incompatible axis\n\n    \"\"\"\n    self._set_grouper(obj)\n    ax = self.ax\n    if isinstance(ax, DatetimeIndex):\n        return DatetimeIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, PeriodIndex) or kind == 'period':\n        return PeriodIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, TimedeltaIndex):\n        return TimedeltaIndexResampler(obj, groupby=self, axis=self.axis)\n    raise TypeError(f\"Only valid with DatetimeIndex, TimedeltaIndex or PeriodIndex, but got an instance of '{type(ax).__name__}'\")",
                            "def _get_grouper(self, obj, validate: bool=True):\n    r = self._get_resampler(obj)\n    r._set_binner()\n    return (r.binner, r.grouper, r.obj)",
                            "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(f'axis must be a DatetimeIndex, but got an instance of {type(ax).__name__}')\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return (binner, [], labels)\n    first, last = _get_timestamp_range_edges(ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base)\n    binner = labels = date_range(freq=self.freq, start=first, end=last, tz=ax.tz, name=ax.name, ambiguous='infer', nonexistent='shift_forward')\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n    bins = lib.generate_bins_dt64(ax_values, bin_edges, self.closed, hasnans=ax.hasnans)\n    if self.closed == 'right':\n        labels = binner\n        if self.label == 'right':\n            labels = labels[1:]\n    elif self.label == 'right':\n        labels = labels[1:]\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    if len(bins) < len(labels):\n        labels = labels[:len(bins)]\n    return (binner, bins, labels)",
                            "def _adjust_bin_edges(self, binner, ax_values):\n    if self.freq != 'D' and is_superperiod(self.freq, 'D'):\n        if self.closed == 'right':\n            bin_edges = binner.tz_localize(None)\n            bin_edges = bin_edges + timedelta(1) - Nano(1)\n            bin_edges = bin_edges.tz_localize(binner.tz).asi8\n        else:\n            bin_edges = binner.asi8\n        if bin_edges[-2] > ax_values.max():\n            bin_edges = bin_edges[:-1]\n            binner = binner[:-1]\n    else:\n        bin_edges = binner.asi8\n    return (binner, bin_edges)",
                            "def _get_time_delta_bins(self, ax):\n    if not isinstance(ax, TimedeltaIndex):\n        raise TypeError(f'axis must be a TimedeltaIndex, but got an instance of {type(ax).__name__}')\n    if not len(ax):\n        binner = labels = TimedeltaIndex(data=[], freq=self.freq, name=ax.name)\n        return (binner, [], labels)\n    start, end = (ax.min(), ax.max())\n    labels = binner = timedelta_range(start=start, end=end, freq=self.freq, name=ax.name)\n    end_stamps = labels + self.freq\n    bins = ax.searchsorted(end_stamps, side='left')\n    if self.base > 0:\n        labels += type(self.freq)(self.base)\n    return (binner, bins, labels)",
                            "def _get_time_period_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(f'axis must be a DatetimeIndex, but got an instance of {type(ax).__name__}')\n    freq = self.freq\n    if not len(ax):\n        binner = labels = PeriodIndex(data=[], freq=freq, name=ax.name)\n        return (binner, [], labels)\n    labels = binner = period_range(start=ax[0], end=ax[-1], freq=freq, name=ax.name)\n    end_stamps = (labels + freq).asfreq(freq, 's').to_timestamp()\n    if ax.tzinfo:\n        end_stamps = end_stamps.tz_localize(ax.tzinfo)\n    bins = ax.searchsorted(end_stamps, side='left')\n    return (binner, bins, labels)",
                            "def _get_period_bins(self, ax):\n    if not isinstance(ax, PeriodIndex):\n        raise TypeError(f'axis must be a PeriodIndex, but got an instance of {type(ax).__name__}')\n    memb = ax.asfreq(self.freq, how=self.convention)\n    nat_count = 0\n    if memb.hasnans:\n        nat_count = np.sum(memb._isnan)\n        memb = memb[~memb._isnan]\n    if not len(memb):\n        binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n        return (binner, [], labels)\n    freq_mult = self.freq.n\n    start = ax.min().asfreq(self.freq, how=self.convention)\n    end = ax.max().asfreq(self.freq, how='end')\n    bin_shift = 0\n    if self.base:\n        p_start, end = _get_period_range_edges(start, end, self.freq, closed=self.closed, base=self.base)\n        start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n        bin_shift = start_offset.n % freq_mult\n        start = p_start\n    labels = binner = period_range(start=start, end=end, freq=self.freq, name=ax.name)\n    i8 = memb.asi8\n    expected_bins_count = len(binner) * freq_mult\n    i8_extend = expected_bins_count - (i8[-1] - i8[0])\n    rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n    rng += freq_mult\n    rng -= bin_shift\n    bins = memb.searchsorted(rng, side='left')\n    if nat_count > 0:\n        bins += nat_count\n        bins = np.insert(bins, 0, nat_count)\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n    return (binner, bins, labels)"
                        ],
                        "constructor_variables": [
                            "how",
                            "convention",
                            "fill_method",
                            "loffset",
                            "closed",
                            "label",
                            "freq",
                            "base",
                            "rule",
                            "limit",
                            "end_types",
                            "kind"
                        ],
                        "class_level_variables": [
                            "_attributes"
                        ],
                        "class_decorators": [],
                        "function_signatures": [
                            "__init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs)",
                            "_get_resampler(self, obj, kind=None)",
                            "_get_grouper(self, obj, validate: bool=True)",
                            "_get_time_bins(self, ax)",
                            "_adjust_bin_edges(self, binner, ax_values)",
                            "_get_time_delta_bins(self, ax)",
                            "_get_time_period_bins(self, ax)",
                            "_get_period_bins(self, ax)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def resample(obj, kind=None, **kwds):\n    \"\"\"\n    Create a TimeGrouper and return our resampler.\n    \"\"\"\n    tg = TimeGrouper(**kwds)\n    return tg._get_resampler(obj, kind=kind)",
                "def get_resampler_for_grouping(\n    groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs\n):\n    \"\"\"\n    Return our appropriate resampler when grouping as well.\n    \"\"\"\n\n    # .resample uses 'on' similar to how .groupby uses 'key'\n    kwargs[\"key\"] = kwargs.pop(\"on\", None)\n\n    tg = TimeGrouper(freq=rule, **kwargs)\n    resampler = tg._get_resampler(groupby.obj, kind=kind)\n    return resampler._get_resampler_for_grouping(groupby=groupby)",
                "def _take_new_index(obj, indexer, new_index, axis=0):\n\n    if isinstance(obj, ABCSeries):\n        new_values = algos.take_1d(obj.values, indexer)\n        return obj._constructor(new_values, index=new_index, name=obj.name)\n    elif isinstance(obj, ABCDataFrame):\n        if axis == 1:\n            raise NotImplementedError(\"axis 1 is not supported\")\n        return obj._constructor(\n            obj._data.reindex_indexer(new_axis=new_index, indexer=indexer, axis=1)\n        )\n    else:\n        raise ValueError(\"'obj' should be either a Series or a DataFrame\")",
                "def _get_timestamp_range_edges(first, last, offset, closed=\"left\", base=0):\n    \"\"\"\n    Adjust the `first` Timestamp to the preceding Timestamp that resides on\n    the provided offset. Adjust the `last` Timestamp to the following\n    Timestamp that resides on the provided offset. Input Timestamps that\n    already reside on the offset will be adjusted depending on the type of\n    offset and the `closed` parameter.\n\n    Parameters\n    ----------\n    first : pd.Timestamp\n        The beginning Timestamp of the range to be adjusted.\n    last : pd.Timestamp\n        The ending Timestamp of the range to be adjusted.\n    offset : pd.DateOffset\n        The dateoffset to which the Timestamps will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    base : int, default 0\n        The \"origin\" of the adjusted Timestamps.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Timestamp objects.\n    \"\"\"\n    if isinstance(offset, Tick):\n        if isinstance(offset, Day):\n            # _adjust_dates_anchored assumes 'D' means 24H, but first/last\n            # might contain a DST transition (23H, 24H, or 25H).\n            # So \"pretend\" the dates are naive when adjusting the endpoints\n            tz = first.tz\n            first = first.tz_localize(None)\n            last = last.tz_localize(None)\n\n        first, last = _adjust_dates_anchored(\n            first, last, offset, closed=closed, base=base\n        )\n        if isinstance(offset, Day):\n            first = first.tz_localize(tz)\n            last = last.tz_localize(tz)\n        return first, last\n\n    else:\n        first = first.normalize()\n        last = last.normalize()\n\n    if closed == \"left\":\n        first = Timestamp(offset.rollback(first))\n    else:\n        first = Timestamp(first - offset)\n\n    last = Timestamp(last + offset)\n\n    return first, last",
                "def _get_period_range_edges(first, last, offset, closed=\"left\", base=0):\n    \"\"\"\n    Adjust the provided `first` and `last` Periods to the respective Period of\n    the given offset that encompasses them.\n\n    Parameters\n    ----------\n    first : pd.Period\n        The beginning Period of the range to be adjusted.\n    last : pd.Period\n        The ending Period of the range to be adjusted.\n    offset : pd.DateOffset\n        The dateoffset to which the Periods will be adjusted.\n    closed : {'right', 'left'}, default None\n        Which side of bin interval is closed.\n    base : int, default 0\n        The \"origin\" of the adjusted Periods.\n\n    Returns\n    -------\n    A tuple of length 2, containing the adjusted pd.Period objects.\n    \"\"\"\n    if not all(isinstance(obj, Period) for obj in [first, last]):\n        raise TypeError(\"'first' and 'last' must be instances of type Period\")\n\n    # GH 23882\n    first = first.to_timestamp()\n    last = last.to_timestamp()\n    adjust_first = not offset.is_on_offset(first)\n    adjust_last = offset.is_on_offset(last)\n\n    first, last = _get_timestamp_range_edges(\n        first, last, offset, closed=closed, base=base\n    )\n\n    first = (first + adjust_first * offset).to_period(offset)\n    last = (last - adjust_last * offset).to_period(offset)\n    return first, last",
                "def _adjust_dates_anchored(first, last, offset, closed=\"right\", base=0):\n    # First and last offsets should be calculated from the start day to fix an\n    # error cause by resampling across multiple days when a one day period is\n    # not a multiple of the frequency.\n    #\n    # See https://github.com/pandas-dev/pandas/issues/8683\n\n    # GH 10117 & GH 19375. If first and last contain timezone information,\n    # Perform the calculation in UTC in order to avoid localizing on an\n    # Ambiguous or Nonexistent time.\n    first_tzinfo = first.tzinfo\n    last_tzinfo = last.tzinfo\n    start_day_nanos = first.normalize().value\n    if first_tzinfo is not None:\n        first = first.tz_convert(\"UTC\")\n    if last_tzinfo is not None:\n        last = last.tz_convert(\"UTC\")\n\n    base_nanos = (base % offset.n) * offset.nanos // offset.n\n    start_day_nanos += base_nanos\n\n    foffset = (first.value - start_day_nanos) % offset.nanos\n    loffset = (last.value - start_day_nanos) % offset.nanos\n\n    if closed == \"right\":\n        if foffset > 0:\n            # roll back\n            fresult = first.value - foffset\n        else:\n            fresult = first.value - offset.nanos\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (offset.nanos - loffset)\n        else:\n            # already the end of the road\n            lresult = last.value\n    else:  # closed == 'left'\n        if foffset > 0:\n            fresult = first.value - foffset\n        else:\n            # start of the road\n            fresult = first.value\n\n        if loffset > 0:\n            # roll forward\n            lresult = last.value + (offset.nanos - loffset)\n        else:\n            lresult = last.value + offset.nanos\n    fresult = Timestamp(fresult)\n    lresult = Timestamp(lresult)\n    if first_tzinfo is not None:\n        fresult = fresult.tz_localize(\"UTC\").tz_convert(first_tzinfo)\n    if last_tzinfo is not None:\n        lresult = lresult.tz_localize(\"UTC\").tz_convert(last_tzinfo)\n    return fresult, lresult",
                "def asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None):\n    \"\"\"\n    Utility frequency conversion method for Series/DataFrame.\n    \"\"\"\n    if isinstance(obj.index, PeriodIndex):\n        if method is not None:\n            raise NotImplementedError(\"'method' argument is not supported\")\n\n        if how is None:\n            how = \"E\"\n\n        new_obj = obj.copy()\n        new_obj.index = obj.index.asfreq(freq, how=how)\n\n    elif len(obj.index) == 0:\n        new_obj = obj.copy()\n        new_obj.index = obj.index._shallow_copy(freq=to_offset(freq))\n\n    else:\n        dti = date_range(obj.index[0], obj.index[-1], freq=freq)\n        dti.name = obj.index.name\n        new_obj = obj.reindex(dti, method=method, fill_value=fill_value)\n        if normalize:\n            new_obj.index = new_obj.index.normalize()\n\n    return new_obj",
                "def __init__(self, obj, groupby=None, axis=0, kind=None, **kwargs):\n    self.groupby = groupby\n    self.keys = None\n    self.sort = True\n    self.axis = axis\n    self.kind = kind\n    self.squeeze = False\n    self.group_keys = True\n    self.as_index = True\n    self.exclusions = set()\n    self.binner = None\n    self.grouper = None\n\n    if self.groupby is not None:\n        self.groupby._set_grouper(self._convert_obj(obj), sort=True)",
                "def __str__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n    attrs = (\n        f\"{k}={getattr(self.groupby, k)}\"\n        for k in self._attributes\n        if getattr(self.groupby, k, None) is not None\n    )\n    return f\"{type(self).__name__} [{', '.join(attrs)}]\"",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self._attributes:\n        return getattr(self.groupby, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    return object.__getattribute__(self, attr)",
                "def __iter__(self):\n    \"\"\"\n    Resampler iterator.\n\n    Returns\n    -------\n    Generator yielding sequence of (name, subsetted object)\n    for each group.\n\n    See Also\n    --------\n    GroupBy.__iter__\n    \"\"\"\n    self._set_binner()\n    return super().__iter__()",
                "@property\ndef obj(self):\n    return self.groupby.obj",
                "@property\ndef ax(self):\n    return self.groupby.ax",
                "@property\ndef _typ(self) -> str:\n    \"\"\"\n    Masquerade for compat as a Series or a DataFrame.\n    \"\"\"\n    if isinstance(self._selected_obj, ABCSeries):\n        return \"series\"\n    return \"dataframe\"",
                "@property\ndef _from_selection(self) -> bool:\n    \"\"\"\n    Is the resampling from a DataFrame column or MultiIndex level.\n    \"\"\"\n    # upsampling and PeriodIndex resampling do not work\n    # with selection, this state used to catch and raise an error\n    return self.groupby is not None and (\n        self.groupby.key is not None or self.groupby.level is not None\n    )",
                "def _convert_obj(self, obj):\n    \"\"\"\n    Provide any conversions for the object in order to correctly handle.\n\n    Parameters\n    ----------\n    obj : the object to be resampled\n\n    Returns\n    -------\n    obj : converted object\n    \"\"\"\n    obj = obj._consolidate()\n    return obj",
                "def _get_binner_for_time(self):\n    raise AbstractMethodError(self)",
                "def _set_binner(self):\n    \"\"\"\n    Setup our binners.\n\n    Cache these as we are an immutable object\n    \"\"\"\n    if self.binner is None:\n        self.binner, self.grouper = self._get_binner()",
                "def _get_binner(self):\n    \"\"\"\n    Create the BinGrouper, assume that self.set_grouper(obj)\n    has already been called.\n    \"\"\"\n\n    binner, bins, binlabels = self._get_binner_for_time()\n    assert len(bins) == len(binlabels)\n    bin_grouper = BinGrouper(bins, binlabels, indexer=self.groupby.indexer)\n    return binner, bin_grouper",
                "def _assure_grouper(self):\n    \"\"\"\n    Make sure that we are creating our binner & grouper.\n    \"\"\"\n    self._set_binner()",
                "@Substitution(\n    klass=\"Resampler\",\n    versionadded=\".. versionadded:: 0.23.0\",\n    examples=\"\"\"\n>>> df = pd.DataFrame({'A': [1, 2, 3, 4]},\n...                   index=pd.date_range('2012-08-02', periods=4))\n>>> df\n            A\n2012-08-02  1\n2012-08-03  2\n2012-08-04  3\n2012-08-05  4\n\nTo get the difference between each 2-day period's maximum and minimum\nvalue in one pass, you can do\n\n>>> df.resample('2D').pipe(lambda x: x.max() - x.min())\n            A\n2012-08-02  1\n2012-08-04  1\"\"\",\n)\n@Appender(_pipe_template)\ndef pipe(self, func, *args, **kwargs):\n    return super().pipe(func, *args, **kwargs)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, *args, **kwargs):\n\n    self._set_binner()\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        how = func\n        grouper = None\n        result = self._groupby_and_aggregate(how, grouper, *args, **kwargs)\n\n    result = self._apply_loffset(result)\n    return result",
                "def transform(self, arg, *args, **kwargs):\n    \"\"\"\n    Call function producing a like-indexed Series on each group and return\n    a Series with the transformed values.\n\n    Parameters\n    ----------\n    arg : function\n        To apply to each group. Should return a Series with the same index.\n\n    Returns\n    -------\n    transformed : Series\n\n    Examples\n    --------\n    >>> resampled.transform(lambda x: (x - x.mean()) / x.std())\n    \"\"\"\n    return self._selected_obj.groupby(self.groupby).transform(arg, *args, **kwargs)",
                "def _downsample(self, f):\n    raise AbstractMethodError(self)",
                "def _upsample(self, f, limit=None, fill_value=None):\n    raise AbstractMethodError(self)",
                "def _gotitem(self, key, ndim: int, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : string / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n    self._set_binner()\n    grouper = self.grouper\n    if subset is None:\n        subset = self.obj\n    grouped = get_groupby(subset, by=None, grouper=grouper, axis=self.axis)\n\n    # try the key selection\n    try:\n        return grouped[key]\n    except KeyError:\n        return grouped",
                "def _groupby_and_aggregate(self, how, grouper=None, *args, **kwargs):\n    \"\"\"\n    Re-evaluate the obj with a groupby aggregation.\n    \"\"\"\n\n    if grouper is None:\n        self._set_binner()\n        grouper = self.grouper\n\n    obj = self._selected_obj\n\n    grouped = get_groupby(obj, by=None, grouper=grouper, axis=self.axis)\n\n    try:\n        if isinstance(obj, ABCDataFrame) and callable(how):\n            # Check if the function is reducing or not.\n            result = grouped._aggregate_item_by_item(how, *args, **kwargs)\n        else:\n            result = grouped.aggregate(how, *args, **kwargs)\n    except DataError:\n        # we have a non-reducing function; try to evaluate\n        result = grouped.apply(how, *args, **kwargs)\n    except ValueError as err:\n        if \"Must produce aggregated value\" in str(err):\n            # raised in _aggregate_named\n            pass\n        elif \"len(index) != len(labels)\" in str(err):\n            # raised in libgroupby validation\n            pass\n        elif \"No objects to concatenate\" in str(err):\n            # raised in concat call\n            #  In tests this is reached via either\n            #  _apply_to_column_groupbys (ohlc) or DataFrameGroupBy.nunique\n            pass\n        else:\n            raise\n\n        # we have a non-reducing function\n        # try to evaluate\n        result = grouped.apply(how, *args, **kwargs)\n\n    result = self._apply_loffset(result)\n    return self._wrap_result(result)",
                "def _apply_loffset(self, result):\n    \"\"\"\n    If loffset is set, offset the result index.\n\n    This is NOT an idempotent routine, it will be applied\n    exactly once to the result.\n\n    Parameters\n    ----------\n    result : Series or DataFrame\n        the result of resample\n    \"\"\"\n\n    needs_offset = (\n        isinstance(self.loffset, (DateOffset, timedelta, np.timedelta64))\n        and isinstance(result.index, DatetimeIndex)\n        and len(result.index) > 0\n    )\n\n    if needs_offset:\n        result.index = result.index + self.loffset\n\n    self.loffset = None\n    return result",
                "def _get_resampler_for_grouping(self, groupby, **kwargs):\n    \"\"\"\n    Return the correct class for resampling with groupby.\n    \"\"\"\n    return self._resampler_for_grouping(self, groupby=groupby, **kwargs)",
                "def _wrap_result(self, result):\n    \"\"\"\n    Potentially wrap any results.\n    \"\"\"\n    if isinstance(result, ABCSeries) and self._selection is not None:\n        result.name = self._selection\n\n    if isinstance(result, ABCSeries) and result.empty:\n        obj = self.obj\n        if isinstance(obj.index, PeriodIndex):\n            result.index = obj.index.asfreq(self.freq)\n        else:\n            result.index = obj.index._shallow_copy(freq=self.freq)\n        result.name = getattr(obj, \"name\", None)\n\n    return result",
                "def pad(self, limit=None):\n    \"\"\"\n    Forward fill the values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    An upsampled Series.\n\n    See Also\n    --------\n    Series.fillna\n    DataFrame.fillna\n    \"\"\"\n    return self._upsample(\"pad\", limit=limit)",
                "def nearest(self, limit=None):\n    \"\"\"\n    Resample by using the nearest value.\n\n    When resampling data, missing values may appear (e.g., when the\n    resampling frequency is higher than the original frequency).\n    The `nearest` method will replace ``NaN`` values that appeared in\n    the resampled data with the value from the nearest member of the\n    sequence, based on the index value.\n    Missing values that existed in the original data will not be modified.\n    If `limit` is given, fill only this many values in each direction for\n    each of the original values.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n        .. versionadded:: 0.21.0\n\n    Returns\n    -------\n    Series or DataFrame\n        An upsampled Series or DataFrame with ``NaN`` values filled with\n        their nearest value.\n\n    See Also\n    --------\n    backfill : Backward fill the new missing values in the resampled data.\n    pad : Forward fill ``NaN`` values.\n\n    Examples\n    --------\n    >>> s = pd.Series([1, 2],\n    ...               index=pd.date_range('20180101',\n    ...                                   periods=2,\n    ...                                   freq='1h'))\n    >>> s\n    2018-01-01 00:00:00    1\n    2018-01-01 01:00:00    2\n    Freq: H, dtype: int64\n\n    >>> s.resample('15min').nearest()\n    2018-01-01 00:00:00    1\n    2018-01-01 00:15:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 00:45:00    2\n    2018-01-01 01:00:00    2\n    Freq: 15T, dtype: int64\n\n    Limit the number of upsampled values imputed by the nearest:\n\n    >>> s.resample('15min').nearest(limit=1)\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:15:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 00:45:00    2.0\n    2018-01-01 01:00:00    2.0\n    Freq: 15T, dtype: float64\n    \"\"\"\n    return self._upsample(\"nearest\", limit=limit)",
                "def backfill(self, limit=None):\n    \"\"\"\n    Backward fill the new missing values in the resampled data.\n\n    In statistics, imputation is the process of replacing missing data with\n    substituted values [1]_. When resampling data, missing values may\n    appear (e.g., when the resampling frequency is higher than the original\n    frequency). The backward fill will replace NaN values that appeared in\n    the resampled data with the next value in the original sequence.\n    Missing values that existed in the original data will not be modified.\n\n    Parameters\n    ----------\n    limit : int, optional\n        Limit of how many values to fill.\n\n    Returns\n    -------\n    Series, DataFrame\n        An upsampled Series or DataFrame with backward filled NaN values.\n\n    See Also\n    --------\n    bfill : Alias of backfill.\n    fillna : Fill NaN values using the specified method, which can be\n        'backfill'.\n    nearest : Fill NaN values with nearest neighbor starting from center.\n    pad : Forward fill NaN values.\n    Series.fillna : Fill NaN values in the Series using the\n        specified method, which can be 'backfill'.\n    DataFrame.fillna : Fill NaN values in the DataFrame using the\n        specified method, which can be 'backfill'.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n    Examples\n    --------\n\n    Resampling a Series:\n\n    >>> s = pd.Series([1, 2, 3],\n    ...               index=pd.date_range('20180101', periods=3, freq='h'))\n    >>> s\n    2018-01-01 00:00:00    1\n    2018-01-01 01:00:00    2\n    2018-01-01 02:00:00    3\n    Freq: H, dtype: int64\n\n    >>> s.resample('30min').backfill()\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    3\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    >>> s.resample('15min').backfill(limit=2)\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:15:00    NaN\n    2018-01-01 00:30:00    2.0\n    2018-01-01 00:45:00    2.0\n    2018-01-01 01:00:00    2.0\n    2018-01-01 01:15:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 01:45:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 15T, dtype: float64\n\n    Resampling a DataFrame that has missing values:\n\n    >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n    ...                   index=pd.date_range('20180101', periods=3,\n    ...                                       freq='h'))\n    >>> df\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 02:00:00  6.0  5\n\n    >>> df.resample('30min').backfill()\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 00:30:00  NaN  3\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 01:30:00  6.0  5\n    2018-01-01 02:00:00  6.0  5\n\n    >>> df.resample('15min').backfill(limit=2)\n                           a    b\n    2018-01-01 00:00:00  2.0  1.0\n    2018-01-01 00:15:00  NaN  NaN\n    2018-01-01 00:30:00  NaN  3.0\n    2018-01-01 00:45:00  NaN  3.0\n    2018-01-01 01:00:00  NaN  3.0\n    2018-01-01 01:15:00  NaN  NaN\n    2018-01-01 01:30:00  6.0  5.0\n    2018-01-01 01:45:00  6.0  5.0\n    2018-01-01 02:00:00  6.0  5.0\n    \"\"\"\n    return self._upsample(\"backfill\", limit=limit)",
                "def fillna(self, method, limit=None):\n    \"\"\"\n    Fill missing values introduced by upsampling.\n\n    In statistics, imputation is the process of replacing missing data with\n    substituted values [1]_. When resampling data, missing values may\n    appear (e.g., when the resampling frequency is higher than the original\n    frequency).\n\n    Missing values that existed in the original data will\n    not be modified.\n\n    Parameters\n    ----------\n    method : {'pad', 'backfill', 'ffill', 'bfill', 'nearest'}\n        Method to use for filling holes in resampled data\n\n        * 'pad' or 'ffill': use previous valid observation to fill gap\n          (forward fill).\n        * 'backfill' or 'bfill': use next valid observation to fill gap.\n        * 'nearest': use nearest valid observation to fill gap.\n\n    limit : int, optional\n        Limit of how many consecutive missing values to fill.\n\n    Returns\n    -------\n    Series or DataFrame\n        An upsampled Series or DataFrame with missing values filled.\n\n    See Also\n    --------\n    backfill : Backward fill NaN values in the resampled data.\n    pad : Forward fill NaN values in the resampled data.\n    nearest : Fill NaN values in the resampled data\n        with nearest neighbor starting from center.\n    interpolate : Fill NaN values using interpolation.\n    Series.fillna : Fill NaN values in the Series using the\n        specified method, which can be 'bfill' and 'ffill'.\n    DataFrame.fillna : Fill NaN values in the DataFrame using the\n        specified method, which can be 'bfill' and 'ffill'.\n\n    References\n    ----------\n    .. [1] https://en.wikipedia.org/wiki/Imputation_(statistics)\n\n    Examples\n    --------\n    Resampling a Series:\n\n    >>> s = pd.Series([1, 2, 3],\n    ...               index=pd.date_range('20180101', periods=3, freq='h'))\n    >>> s\n    2018-01-01 00:00:00    1\n    2018-01-01 01:00:00    2\n    2018-01-01 02:00:00    3\n    Freq: H, dtype: int64\n\n    Without filling the missing values you get:\n\n    >>> s.resample(\"30min\").asfreq()\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 01:00:00    2.0\n    2018-01-01 01:30:00    NaN\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    >>> s.resample('30min').fillna(\"backfill\")\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    3\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    >>> s.resample('15min').fillna(\"backfill\", limit=2)\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:15:00    NaN\n    2018-01-01 00:30:00    2.0\n    2018-01-01 00:45:00    2.0\n    2018-01-01 01:00:00    2.0\n    2018-01-01 01:15:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 01:45:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 15T, dtype: float64\n\n    >>> s.resample('30min').fillna(\"pad\")\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    1\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    2\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    >>> s.resample('30min').fillna(\"nearest\")\n    2018-01-01 00:00:00    1\n    2018-01-01 00:30:00    2\n    2018-01-01 01:00:00    2\n    2018-01-01 01:30:00    3\n    2018-01-01 02:00:00    3\n    Freq: 30T, dtype: int64\n\n    Missing values present before the upsampling are not affected.\n\n    >>> sm = pd.Series([1, None, 3],\n    ...               index=pd.date_range('20180101', periods=3, freq='h'))\n    >>> sm\n    2018-01-01 00:00:00    1.0\n    2018-01-01 01:00:00    NaN\n    2018-01-01 02:00:00    3.0\n    Freq: H, dtype: float64\n\n    >>> sm.resample('30min').fillna('backfill')\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 01:00:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    >>> sm.resample('30min').fillna('pad')\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    1.0\n    2018-01-01 01:00:00    NaN\n    2018-01-01 01:30:00    NaN\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    >>> sm.resample('30min').fillna('nearest')\n    2018-01-01 00:00:00    1.0\n    2018-01-01 00:30:00    NaN\n    2018-01-01 01:00:00    NaN\n    2018-01-01 01:30:00    3.0\n    2018-01-01 02:00:00    3.0\n    Freq: 30T, dtype: float64\n\n    DataFrame resampling is done column-wise. All the same options are\n    available.\n\n    >>> df = pd.DataFrame({'a': [2, np.nan, 6], 'b': [1, 3, 5]},\n    ...                   index=pd.date_range('20180101', periods=3,\n    ...                                       freq='h'))\n    >>> df\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 02:00:00  6.0  5\n\n    >>> df.resample('30min').fillna(\"bfill\")\n                           a  b\n    2018-01-01 00:00:00  2.0  1\n    2018-01-01 00:30:00  NaN  3\n    2018-01-01 01:00:00  NaN  3\n    2018-01-01 01:30:00  6.0  5\n    2018-01-01 02:00:00  6.0  5\n    \"\"\"\n    return self._upsample(method, limit=limit)",
                "@Appender(_shared_docs[\"interpolate\"] % _shared_docs_kwargs)\ndef interpolate(\n    self,\n    method=\"linear\",\n    axis=0,\n    limit=None,\n    inplace=False,\n    limit_direction=\"forward\",\n    limit_area=None,\n    downcast=None,\n    **kwargs,\n):\n    \"\"\"\n    Interpolate values according to different methods.\n    \"\"\"\n    result = self._upsample(None)\n    return result.interpolate(\n        method=method,\n        axis=axis,\n        limit=limit,\n        inplace=inplace,\n        limit_direction=limit_direction,\n        limit_area=limit_area,\n        downcast=downcast,\n        **kwargs,\n    )",
                "def asfreq(self, fill_value=None):\n    \"\"\"\n    Return the values at the new freq, essentially a reindex.\n\n    Parameters\n    ----------\n    fill_value : scalar, optional\n        Value to use for missing values, applied during upsampling (note\n        this does not fill NaNs that already were present).\n\n    Returns\n    -------\n    DataFrame or Series\n        Values at the specified freq.\n\n    See Also\n    --------\n    Series.asfreq\n    DataFrame.asfreq\n    \"\"\"\n    return self._upsample(\"asfreq\", fill_value=fill_value)",
                "def std(self, ddof=1, *args, **kwargs):\n    \"\"\"\n    Compute standard deviation of groups, excluding missing values.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    DataFrame or Series\n        Standard deviation of values within each group.\n    \"\"\"\n    nv.validate_resampler_func(\"std\", args, kwargs)\n    return self._downsample(\"std\", ddof=ddof)",
                "def var(self, ddof=1, *args, **kwargs):\n    \"\"\"\n    Compute variance of groups, excluding missing values.\n\n    Parameters\n    ----------\n    ddof : int, default 1\n        Degrees of freedom.\n\n    Returns\n    -------\n    DataFrame or Series\n        Variance of values within each group.\n    \"\"\"\n    nv.validate_resampler_func(\"var\", args, kwargs)\n    return self._downsample(\"var\", ddof=ddof)",
                "@Appender(GroupBy.size.__doc__)\ndef size(self):\n    result = self._downsample(\"size\")\n    if not len(self.ax):\n        from pandas import Series\n\n        if self._selected_obj.ndim == 1:\n            name = self._selected_obj.name\n        else:\n            name = None\n        result = Series([], index=result.index, dtype=\"int64\", name=name)\n    return result",
                "@Appender(GroupBy.count.__doc__)\ndef count(self):\n    result = self._downsample(\"count\")\n    if not len(self.ax):\n        if self._selected_obj.ndim == 1:\n            result = type(self._selected_obj)(\n                [], index=result.index, dtype=\"int64\", name=self._selected_obj.name\n            )\n        else:\n            from pandas import DataFrame\n\n            result = DataFrame(\n                [], index=result.index, columns=result.columns, dtype=\"int64\"\n            )\n\n    return result",
                "def quantile(self, q=0.5, **kwargs):\n    \"\"\"\n    Return value at the given quantile.\n\n    .. versionadded:: 0.24.0\n\n    Parameters\n    ----------\n    q : float or array-like, default 0.5 (50% quantile)\n\n    Returns\n    -------\n    DataFrame or Series\n        Quantile of values within each group.\n\n    See Also\n    --------\n    Series.quantile\n    DataFrame.quantile\n    DataFrameGroupBy.quantile\n    \"\"\"\n    return self._downsample(\"quantile\", q=q, **kwargs)",
                "def f(self, _method=method, min_count=0, *args, **kwargs):\n    nv.validate_resampler_func(_method, args, kwargs)\n    return self._downsample(_method, min_count=min_count)",
                "def g(self, _method=method, *args, **kwargs):\n    nv.validate_resampler_func(_method, args, kwargs)\n    return self._downsample(_method)",
                "def h(self, _method=method):\n    return self._downsample(_method)",
                "def __init__(self, obj, *args, **kwargs):\n\n    parent = kwargs.pop(\"parent\", None)\n    groupby = kwargs.pop(\"groupby\", None)\n    if parent is None:\n        parent = obj\n\n    # initialize our GroupByMixin object with\n    # the resampler attributes\n    for attr in self._attributes:\n        setattr(self, attr, kwargs.get(attr, getattr(parent, attr)))\n\n    super().__init__(None)\n    self._groupby = groupby\n    self._groupby.mutated = True\n    self._groupby.grouper.mutated = True\n    self.groupby = copy.copy(parent.groupby)",
                "@no_type_check\ndef _apply(self, f, grouper=None, *args, **kwargs):\n    \"\"\"\n    Dispatch to _upsample; we are stripping all of the _upsample kwargs and\n    performing the original function call on the grouped object.\n    \"\"\"\n\n    def func(x):\n        x = self._shallow_copy(x, groupby=self.groupby)\n\n        if isinstance(f, str):\n            return getattr(x, f)(**kwargs)\n\n        return x.apply(f, *args, **kwargs)\n\n    result = self._groupby.apply(func)\n    return self._wrap_result(result)",
                "@property\ndef _resampler_for_grouping(self):\n    return DatetimeIndexResamplerGroupby",
                "def _get_binner_for_time(self):\n\n    # this is how we are actually creating the bins\n    if self.kind == \"period\":\n        return self.groupby._get_time_period_bins(self.ax)\n    return self.groupby._get_time_bins(self.ax)",
                "def _downsample(self, how, **kwargs):\n    \"\"\"\n    Downsample the cython defined function.\n\n    Parameters\n    ----------\n    how : string / cython mapped function\n    **kwargs : kw args passed to how function\n    \"\"\"\n    self._set_binner()\n    how = self._get_cython_func(how) or how\n    ax = self.ax\n    obj = self._selected_obj\n\n    if not len(ax):\n        # reset to the new freq\n        obj = obj.copy()\n        obj.index._set_freq(self.freq)\n        return obj\n\n    # do we have a regular frequency\n    if ax.freq is not None or ax.inferred_freq is not None:\n\n        if len(self.grouper.binlabels) > len(ax) and how is None:\n\n            # let's do an asfreq\n            return self.asfreq()\n\n    # we are downsampling\n    # we want to call the actual grouper method here\n    result = obj.groupby(self.grouper, axis=self.axis).aggregate(how, **kwargs)\n\n    result = self._apply_loffset(result)\n    return self._wrap_result(result)",
                "def _adjust_binner_for_upsample(self, binner):\n    \"\"\"\n    Adjust our binner when upsampling.\n\n    The range of a new index should not be outside specified range\n    \"\"\"\n    if self.closed == \"right\":\n        binner = binner[1:]\n    else:\n        binner = binner[:-1]\n    return binner",
                "def _upsample(self, method, limit=None, fill_value=None):\n    \"\"\"\n    Parameters\n    ----------\n    method : string {'backfill', 'bfill', 'pad',\n        'ffill', 'asfreq'} method for upsampling\n    limit : int, default None\n        Maximum size gap to fill when reindexing\n    fill_value : scalar, default None\n        Value to use for missing values\n\n    See Also\n    --------\n    .fillna\n\n    \"\"\"\n    self._set_binner()\n    if self.axis:\n        raise AssertionError(\"axis must be 0\")\n    if self._from_selection:\n        raise ValueError(\n            \"Upsampling from level= or on= selection \"\n            \"is not supported, use .set_index(...) \"\n            \"to explicitly set index to datetime-like\"\n        )\n\n    ax = self.ax\n    obj = self._selected_obj\n    binner = self.binner\n    res_index = self._adjust_binner_for_upsample(binner)\n\n    # if we have the same frequency as our axis, then we are equal sampling\n    if limit is None and to_offset(ax.inferred_freq) == self.freq:\n        result = obj.copy()\n        result.index = res_index\n    else:\n        result = obj.reindex(\n            res_index, method=method, limit=limit, fill_value=fill_value\n        )\n\n    result = self._apply_loffset(result)\n    return self._wrap_result(result)",
                "def _wrap_result(self, result):\n    result = super()._wrap_result(result)\n\n    # we may have a different kind that we were asked originally\n    # convert if needed\n    if self.kind == \"period\" and not isinstance(result.index, PeriodIndex):\n        result.index = result.index.to_period(self.freq)\n    return result",
                "@property\ndef _constructor(self):\n    return DatetimeIndexResampler",
                "@property\ndef _resampler_for_grouping(self):\n    return PeriodIndexResamplerGroupby",
                "def _get_binner_for_time(self):\n    if self.kind == \"timestamp\":\n        return super()._get_binner_for_time()\n    return self.groupby._get_period_bins(self.ax)",
                "def _convert_obj(self, obj):\n    obj = super()._convert_obj(obj)\n\n    if self._from_selection:\n        # see GH 14008, GH 12871\n        msg = (\n            \"Resampling from level= or on= selection \"\n            \"with a PeriodIndex is not currently supported, \"\n            \"use .set_index(...) to explicitly set index\"\n        )\n        raise NotImplementedError(msg)\n\n    if self.loffset is not None:\n        # Cannot apply loffset/timedelta to PeriodIndex -> convert to\n        # timestamps\n        self.kind = \"timestamp\"\n\n    # convert to timestamp\n    if self.kind == \"timestamp\":\n        obj = obj.to_timestamp(how=self.convention)\n\n    return obj",
                "def _downsample(self, how, **kwargs):\n    \"\"\"\n    Downsample the cython defined function.\n\n    Parameters\n    ----------\n    how : string / cython mapped function\n    **kwargs : kw args passed to how function\n    \"\"\"\n\n    # we may need to actually resample as if we are timestamps\n    if self.kind == \"timestamp\":\n        return super()._downsample(how, **kwargs)\n\n    how = self._get_cython_func(how) or how\n    ax = self.ax\n\n    if is_subperiod(ax.freq, self.freq):\n        # Downsampling\n        return self._groupby_and_aggregate(how, grouper=self.grouper, **kwargs)\n    elif is_superperiod(ax.freq, self.freq):\n        if how == \"ohlc\":\n            # GH #13083\n            # upsampling to subperiods is handled as an asfreq, which works\n            # for pure aggregating/reducing methods\n            # OHLC reduces along the time dimension, but creates multiple\n            # values for each period -> handle by _groupby_and_aggregate()\n            return self._groupby_and_aggregate(how, grouper=self.grouper)\n        return self.asfreq()\n    elif ax.freq == self.freq:\n        return self.asfreq()\n\n    raise IncompatibleFrequency(\n        f\"Frequency {ax.freq} cannot be resampled to {self.freq}, \"\n        \"as they are not sub or super periods\"\n    )",
                "def _upsample(self, method, limit=None, fill_value=None):\n    \"\"\"\n    Parameters\n    ----------\n    method : string {'backfill', 'bfill', 'pad', 'ffill'}\n        Method for upsampling.\n    limit : int, default None\n        Maximum size gap to fill when reindexing.\n    fill_value : scalar, default None\n        Value to use for missing values.\n\n    See Also\n    --------\n    .fillna\n\n    \"\"\"\n\n    # we may need to actually resample as if we are timestamps\n    if self.kind == \"timestamp\":\n        return super()._upsample(method, limit=limit, fill_value=fill_value)\n\n    self._set_binner()\n    ax = self.ax\n    obj = self.obj\n    new_index = self.binner\n\n    # Start vs. end of period\n    memb = ax.asfreq(self.freq, how=self.convention)\n\n    # Get the fill indexer\n    indexer = memb.get_indexer(new_index, method=method, limit=limit)\n    return self._wrap_result(\n        _take_new_index(obj, indexer, new_index, axis=self.axis)\n    )",
                "@property\ndef _constructor(self):\n    return PeriodIndexResampler",
                "@property\ndef _resampler_for_grouping(self):\n    return TimedeltaIndexResamplerGroupby",
                "def _get_binner_for_time(self):\n    return self.groupby._get_time_delta_bins(self.ax)",
                "def _adjust_binner_for_upsample(self, binner):\n    \"\"\"\n    Adjust our binner when upsampling.\n\n    The range of a new index is allowed to be greater than original range\n    so we don't need to change the length of a binner, GH 13022\n    \"\"\"\n    return binner",
                "@property\ndef _constructor(self):\n    return TimedeltaIndexResampler",
                "def __init__(\n    self,\n    freq=\"Min\",\n    closed=None,\n    label=None,\n    how=\"mean\",\n    axis=0,\n    fill_method=None,\n    limit=None,\n    loffset=None,\n    kind=None,\n    convention=None,\n    base=0,\n    **kwargs,\n):\n    # Check for correctness of the keyword arguments which would\n    # otherwise silently use the default if misspelled\n    if label not in {None, \"left\", \"right\"}:\n        raise ValueError(f\"Unsupported value {label} for `label`\")\n    if closed not in {None, \"left\", \"right\"}:\n        raise ValueError(f\"Unsupported value {closed} for `closed`\")\n    if convention not in {None, \"start\", \"end\", \"e\", \"s\"}:\n        raise ValueError(f\"Unsupported value {convention} for `convention`\")\n\n    freq = to_offset(freq)\n\n    end_types = {\"M\", \"A\", \"Q\", \"BM\", \"BA\", \"BQ\", \"W\"}\n    rule = freq.rule_code\n    if rule in end_types or (\"-\" in rule and rule[: rule.find(\"-\")] in end_types):\n        if closed is None:\n            closed = \"right\"\n        if label is None:\n            label = \"right\"\n    else:\n        if closed is None:\n            closed = \"left\"\n        if label is None:\n            label = \"left\"\n\n    self.closed = closed\n    self.label = label\n    self.kind = kind\n\n    self.convention = convention or \"E\"\n    self.convention = self.convention.lower()\n\n    if isinstance(loffset, str):\n        loffset = to_offset(loffset)\n    self.loffset = loffset\n\n    self.how = how\n    self.fill_method = fill_method\n    self.limit = limit\n    self.base = base\n\n    # always sort time groupers\n    kwargs[\"sort\"] = True\n\n    super().__init__(freq=freq, axis=axis, **kwargs)",
                "def _get_resampler(self, obj, kind=None):\n    \"\"\"\n    Return my resampler or raise if we have an invalid axis.\n\n    Parameters\n    ----------\n    obj : input object\n    kind : string, optional\n        'period','timestamp','timedelta' are valid\n\n    Returns\n    -------\n    a Resampler\n\n    Raises\n    ------\n    TypeError if incompatible axis\n\n    \"\"\"\n    self._set_grouper(obj)\n\n    ax = self.ax\n    if isinstance(ax, DatetimeIndex):\n        return DatetimeIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, PeriodIndex) or kind == \"period\":\n        return PeriodIndexResampler(obj, groupby=self, kind=kind, axis=self.axis)\n    elif isinstance(ax, TimedeltaIndex):\n        return TimedeltaIndexResampler(obj, groupby=self, axis=self.axis)\n\n    raise TypeError(\n        \"Only valid with DatetimeIndex, \"\n        \"TimedeltaIndex or PeriodIndex, \"\n        f\"but got an instance of '{type(ax).__name__}'\"\n    )",
                "def _get_grouper(self, obj, validate: bool = True):\n    # create the resampler and return our binner\n    r = self._get_resampler(obj)\n    r._set_binner()\n    return r.binner, r.grouper, r.obj",
                "def _get_time_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if len(ax) == 0:\n        binner = labels = DatetimeIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    first, last = _get_timestamp_range_edges(\n        ax.min(), ax.max(), self.freq, closed=self.closed, base=self.base\n    )\n    # GH #12037\n    # use first/last directly instead of call replace() on them\n    # because replace() will swallow the nanosecond part\n    # thus last bin maybe slightly before the end if the end contains\n    # nanosecond part and lead to `Values falls after last bin` error\n    binner = labels = date_range(\n        freq=self.freq,\n        start=first,\n        end=last,\n        tz=ax.tz,\n        name=ax.name,\n        ambiguous=\"infer\",\n        nonexistent=\"shift_forward\",\n    )\n\n    ax_values = ax.asi8\n    binner, bin_edges = self._adjust_bin_edges(binner, ax_values)\n\n    # general version, knowing nothing about relative frequencies\n    bins = lib.generate_bins_dt64(\n        ax_values, bin_edges, self.closed, hasnans=ax.hasnans\n    )\n\n    if self.closed == \"right\":\n        labels = binner\n        if self.label == \"right\":\n            labels = labels[1:]\n    elif self.label == \"right\":\n        labels = labels[1:]\n\n    if ax.hasnans:\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    # if we end up with more labels than bins\n    # adjust the labels\n    # GH4076\n    if len(bins) < len(labels):\n        labels = labels[: len(bins)]\n\n    return binner, bins, labels",
                "def _adjust_bin_edges(self, binner, ax_values):\n    # Some hacks for > daily data, see #1471, #1458, #1483\n\n    if self.freq != \"D\" and is_superperiod(self.freq, \"D\"):\n        if self.closed == \"right\":\n            # GH 21459, GH 9119: Adjust the bins relative to the wall time\n            bin_edges = binner.tz_localize(None)\n            bin_edges = bin_edges + timedelta(1) - Nano(1)\n            bin_edges = bin_edges.tz_localize(binner.tz).asi8\n        else:\n            bin_edges = binner.asi8\n\n        # intraday values on last day\n        if bin_edges[-2] > ax_values.max():\n            bin_edges = bin_edges[:-1]\n            binner = binner[:-1]\n    else:\n        bin_edges = binner.asi8\n    return binner, bin_edges",
                "def _get_time_delta_bins(self, ax):\n    if not isinstance(ax, TimedeltaIndex):\n        raise TypeError(\n            \"axis must be a TimedeltaIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    if not len(ax):\n        binner = labels = TimedeltaIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    start, end = ax.min(), ax.max()\n    labels = binner = timedelta_range(\n        start=start, end=end, freq=self.freq, name=ax.name\n    )\n\n    end_stamps = labels + self.freq\n    bins = ax.searchsorted(end_stamps, side=\"left\")\n\n    # Addresses GH #10530\n    if self.base > 0:\n        labels += type(self.freq)(self.base)\n\n    return binner, bins, labels",
                "def _get_time_period_bins(self, ax):\n    if not isinstance(ax, DatetimeIndex):\n        raise TypeError(\n            \"axis must be a DatetimeIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    freq = self.freq\n\n    if not len(ax):\n        binner = labels = PeriodIndex(data=[], freq=freq, name=ax.name)\n        return binner, [], labels\n\n    labels = binner = period_range(start=ax[0], end=ax[-1], freq=freq, name=ax.name)\n\n    end_stamps = (labels + freq).asfreq(freq, \"s\").to_timestamp()\n    if ax.tzinfo:\n        end_stamps = end_stamps.tz_localize(ax.tzinfo)\n    bins = ax.searchsorted(end_stamps, side=\"left\")\n\n    return binner, bins, labels",
                "def _get_period_bins(self, ax):\n    if not isinstance(ax, PeriodIndex):\n        raise TypeError(\n            \"axis must be a PeriodIndex, but got \"\n            f\"an instance of {type(ax).__name__}\"\n        )\n\n    memb = ax.asfreq(self.freq, how=self.convention)\n\n    # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n    nat_count = 0\n    if memb.hasnans:\n        nat_count = np.sum(memb._isnan)\n        memb = memb[~memb._isnan]\n\n    # if index contains no valid (non-NaT) values, return empty index\n    if not len(memb):\n        binner = labels = PeriodIndex(data=[], freq=self.freq, name=ax.name)\n        return binner, [], labels\n\n    freq_mult = self.freq.n\n\n    start = ax.min().asfreq(self.freq, how=self.convention)\n    end = ax.max().asfreq(self.freq, how=\"end\")\n    bin_shift = 0\n\n    # GH 23882\n    if self.base:\n        # get base adjusted bin edge labels\n        p_start, end = _get_period_range_edges(\n            start, end, self.freq, closed=self.closed, base=self.base\n        )\n\n        # Get offset for bin edge (not label edge) adjustment\n        start_offset = Period(start, self.freq) - Period(p_start, self.freq)\n        bin_shift = start_offset.n % freq_mult\n        start = p_start\n\n    labels = binner = period_range(\n        start=start, end=end, freq=self.freq, name=ax.name\n    )\n\n    i8 = memb.asi8\n\n    # when upsampling to subperiods, we need to generate enough bins\n    expected_bins_count = len(binner) * freq_mult\n    i8_extend = expected_bins_count - (i8[-1] - i8[0])\n    rng = np.arange(i8[0], i8[-1] + i8_extend, freq_mult)\n    rng += freq_mult\n    # adjust bin edge indexes to account for base\n    rng -= bin_shift\n    bins = memb.searchsorted(rng, side=\"left\")\n\n    if nat_count > 0:\n        # NaT handling as in pandas._lib.lib.generate_bins_dt64()\n        # shift bins by the number of NaT\n        bins += nat_count\n        bins = np.insert(bins, 0, nat_count)\n        binner = binner.insert(0, NaT)\n        labels = labels.insert(0, NaT)\n\n    return binner, bins, labels",
                "def func(x):\n    x = self._shallow_copy(x, groupby=self.groupby)\n\n    if isinstance(f, str):\n        return getattr(x, f)(**kwargs)\n\n    return x.apply(f, *args, **kwargs)"
            ],
            "inscope_function_signatures": [
                "resample(obj, kind=None, **kwds)",
                "get_resampler_for_grouping(groupby, rule, how=None, fill_method=None, limit=None, kind=None, **kwargs)",
                "_take_new_index(obj, indexer, new_index, axis=0)",
                "_get_timestamp_range_edges(first, last, offset, closed='left', base=0)",
                "_get_period_range_edges(first, last, offset, closed='left', base=0)",
                "_adjust_dates_anchored(first, last, offset, closed='right', base=0)",
                "asfreq(obj, freq, method=None, how=None, normalize=False, fill_value=None)",
                "__init__(self, obj, groupby=None, axis=0, kind=None, **kwargs)",
                "__str__(self) -> str",
                "__getattr__(self, attr: str)",
                "__iter__(self)",
                "obj(self)",
                "ax(self)",
                "_typ(self) -> str",
                "_from_selection(self) -> bool",
                "_convert_obj(self, obj)",
                "_get_binner_for_time(self)",
                "_set_binner(self)",
                "_get_binner(self)",
                "_assure_grouper(self)",
                "pipe(self, func, *args, **kwargs)",
                "aggregate(self, func, *args, **kwargs)",
                "transform(self, arg, *args, **kwargs)",
                "_downsample(self, f)",
                "_upsample(self, f, limit=None, fill_value=None)",
                "_gotitem(self, key, ndim: int, subset=None)",
                "_groupby_and_aggregate(self, how, grouper=None, *args, **kwargs)",
                "_apply_loffset(self, result)",
                "_get_resampler_for_grouping(self, groupby, **kwargs)",
                "_wrap_result(self, result)",
                "pad(self, limit=None)",
                "nearest(self, limit=None)",
                "backfill(self, limit=None)",
                "fillna(self, method, limit=None)",
                "interpolate(self, method='linear', axis=0, limit=None, inplace=False, limit_direction='forward', limit_area=None, downcast=None, **kwargs)",
                "asfreq(self, fill_value=None)",
                "std(self, ddof=1, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "size(self)",
                "count(self)",
                "quantile(self, q=0.5, **kwargs)",
                "f(self, _method=method, min_count=0, *args, **kwargs)",
                "g(self, _method=method, *args, **kwargs)",
                "h(self, _method=method)",
                "__init__(self, obj, *args, **kwargs)",
                "_apply(self, f, grouper=None, *args, **kwargs)",
                "_resampler_for_grouping(self)",
                "_get_binner_for_time(self)",
                "_downsample(self, how, **kwargs)",
                "_adjust_binner_for_upsample(self, binner)",
                "_upsample(self, method, limit=None, fill_value=None)",
                "_wrap_result(self, result)",
                "_constructor(self)",
                "_resampler_for_grouping(self)",
                "_get_binner_for_time(self)",
                "_convert_obj(self, obj)",
                "_downsample(self, how, **kwargs)",
                "_upsample(self, method, limit=None, fill_value=None)",
                "_constructor(self)",
                "_resampler_for_grouping(self)",
                "_get_binner_for_time(self)",
                "_adjust_binner_for_upsample(self, binner)",
                "_constructor(self)",
                "__init__(self, freq='Min', closed=None, label=None, how='mean', axis=0, fill_method=None, limit=None, loffset=None, kind=None, convention=None, base=0, **kwargs)",
                "_get_resampler(self, obj, kind=None)",
                "_get_grouper(self, obj, validate: bool=True)",
                "_get_time_bins(self, ax)",
                "_adjust_bin_edges(self, binner, ax_values)",
                "_get_time_delta_bins(self, ax)",
                "_get_time_period_bins(self, ax)",
                "_get_period_bins(self, ax)",
                "func(x)"
            ],
            "variables_in_file": {
                "_shared_docs_kwargs": [
                    784,
                    33
                ],
                "Dict": [
                    33
                ],
                "str": [
                    33,
                    99,
                    134,
                    366,
                    1360,
                    369,
                    372,
                    88,
                    986
                ],
                "dict": [
                    33
                ],
                "_GroupBy": [
                    36
                ],
                "ShallowMixin": [
                    36
                ],
                "_attributes": [
                    1304,
                    61
                ],
                "self.groupby": [
                    131,
                    103,
                    73,
                    1129,
                    974,
                    1008,
                    1009,
                    188,
                    311,
                    984,
                    85,
                    86,
                    149,
                    150,
                    1243,
                    127,
                    93,
                    95
                ],
                "self": [
                    1028,
                    517,
                    1545,
                    1034,
                    1037,
                    1041,
                    1043,
                    1044,
                    1555,
                    1558,
                    1560,
                    1561,
                    1052,
                    1565,
                    1568,
                    1572,
                    1577,
                    1074,
                    1075,
                    1077,
                    1084,
                    1085,
                    1086,
                    1087,
                    1090,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    1099,
                    85,
                    86,
                    1106,
                    1107,
                    93,
                    94,
                    95,
                    97,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    1127,
                    107,
                    620,
                    1129,
                    1134,
                    1143,
                    122,
                    1146,
                    1149,
                    1150,
                    127,
                    131,
                    138,
                    1165,
                    1168,
                    1169,
                    1171,
                    149,
                    150,
                    1173,
                    1174,
                    1181,
                    1182,
                    1183,
                    1184,
                    1187,
                    169,
                    177,
                    178,
                    1209,
                    186,
                    188,
                    1212,
                    1213,
                    1214,
                    1215,
                    1218,
                    195,
                    1222,
                    1223,
                    1243,
                    782,
                    280,
                    281,
                    285,
                    287,
                    799,
                    311,
                    314,
                    317,
                    831,
                    1353,
                    1354,
                    331,
                    332,
                    1355,
                    334,
                    335,
                    848,
                    1357,
                    1358,
                    1362,
                    1364,
                    1365,
                    1366,
                    1367,
                    349,
                    350,
                    352,
                    865,
                    354,
                    869,
                    870,
                    873,
                    874,
                    1393,
                    882,
                    883,
                    884,
                    885,
                    886,
                    1395,
                    1397,
                    1399,
                    1401,
                    384,
                    385,
                    1411,
                    1423,
                    401,
                    1427,
                    1098,
                    918,
                    407,
                    409,
                    1435,
                    926,
                    416,
                    1445,
                    422,
                    423,
                    937,
                    426,
                    1449,
                    428,
                    1452,
                    430,
                    1454,
                    1456,
                    947,
                    1474,
                    1475,
                    453,
                    967,
                    968,
                    971,
                    972,
                    973,
                    974,
                    984,
                    1499,
                    991,
                    992,
                    1504,
                    1507,
                    1511,
                    1512,
                    1007,
                    1008,
                    1009,
                    1523,
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "groupby": [
                    416,
                    961,
                    1287,
                    1288,
                    73,
                    971
                ],
                "self.keys": [
                    74
                ],
                "self.sort": [
                    75
                ],
                "self.axis": [
                    354,
                    1223,
                    76,
                    335,
                    1041,
                    1075,
                    1397,
                    1399,
                    1401
                ],
                "axis": [
                    1608,
                    802,
                    76,
                    1372
                ],
                "self.kind": [
                    1127,
                    1355,
                    77,
                    1165,
                    1007,
                    1106,
                    1209,
                    1146,
                    1149
                ],
                "kind": [
                    1287,
                    1355,
                    77,
                    1397,
                    1270,
                    1398,
                    1399
                ],
                "self.squeeze": [
                    78
                ],
                "self.group_keys": [
                    79
                ],
                "self.as_index": [
                    80
                ],
                "self.exclusions": [
                    81
                ],
                "set": [
                    81
                ],
                "self.binner": [
                    177,
                    178,
                    82,
                    1086,
                    1215
                ],
                "self.grouper": [
                    1034,
                    332,
                    1041,
                    178,
                    83,
                    1173,
                    1181,
                    350
                ],
                "self.groupby._set_grouper": [
                    86
                ],
                "self._convert_obj": [
                    86
                ],
                "obj": [
                    1152,
                    1792,
                    1027,
                    1028,
                    1029,
                    1411,
                    1783,
                    1041,
                    1785,
                    1695,
                    165,
                    166,
                    426,
                    427,
                    428,
                    430,
                    431,
                    1790,
                    1791,
                    1085,
                    1214,
                    963,
                    1091,
                    1604,
                    1094,
                    1223,
                    1605,
                    1606,
                    1607,
                    1610,
                    1611,
                    86,
                    352,
                    354,
                    357,
                    1132,
                    1775,
                    1393,
                    1397,
                    1270,
                    1399,
                    1782,
                    1401,
                    1786,
                    1787,
                    1150,
                    1023
                ],
                "attrs": [
                    97,
                    92
                ],
                "k": [
                    93,
                    94,
                    95
                ],
                "getattr": [
                    928,
                    103,
                    968,
                    939,
                    431,
                    949,
                    987,
                    93,
                    95
                ],
                "self._attributes": [
                    102,
                    94,
                    967
                ],
                "__name__": [
                    97,
                    1542,
                    1419,
                    1520,
                    1495,
                    1406
                ],
                "type": [
                    97,
                    1542,
                    1512,
                    1419,
                    1520,
                    885,
                    1495,
                    1406
                ],
                "join": [
                    97
                ],
                "attr": [
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    967,
                    107,
                    968
                ],
                "self._internal_names_set": [
                    100
                ],
                "object.__getattribute__": [
                    107,
                    101
                ],
                "object": [
                    107,
                    101
                ],
                "self.obj": [
                    104,
                    426,
                    1214,
                    334
                ],
                "self._set_binner": [
                    195,
                    331,
                    1074,
                    1212,
                    280,
                    122,
                    1020,
                    349
                ],
                "__iter__": [
                    123
                ],
                "super": [
                    1128,
                    970,
                    1132,
                    1102,
                    1166,
                    1372,
                    1210,
                    123,
                    220
                ],
                "self.groupby.obj": [
                    127
                ],
                "property": [
                    129,
                    1122,
                    133,
                    1000,
                    1260,
                    142,
                    1232,
                    1238,
                    1116,
                    125
                ],
                "self.groupby.ax": [
                    131
                ],
                "isinstance": [
                    1539,
                    1416,
                    138,
                    401,
                    402,
                    1695,
                    422,
                    425,
                    427,
                    1604,
                    1607,
                    1360,
                    1106,
                    1492,
                    986,
                    357,
                    1642,
                    1643,
                    1517,
                    1775,
                    1396,
                    1398,
                    1654,
                    1400
                ],
                "self._selected_obj": [
                    352,
                    873,
                    138,
                    874,
                    884,
                    885,
                    886,
                    311,
                    1085,
                    1023
                ],
                "ABCSeries": [
                    425,
                    138,
                    1604,
                    422
                ],
                "self.groupby.key": [
                    150
                ],
                "self.groupby.level": [
                    150
                ],
                "bool": [
                    1409,
                    143
                ],
                "obj._consolidate": [
                    165
                ],
                "AbstractMethodError": [
                    169,
                    314,
                    317
                ],
                "self._get_binner": [
                    178
                ],
                "binner": [
                    1536,
                    1423,
                    1424,
                    1555,
                    1556,
                    1434,
                    1053,
                    1055,
                    1056,
                    1445,
                    1576,
                    1453,
                    1583,
                    1460,
                    186,
                    1596,
                    1469,
                    189,
                    1087,
                    1086,
                    1599,
                    1477,
                    1479,
                    1481,
                    1486,
                    1488,
                    1489,
                    1499,
                    1500,
                    1503,
                    1252,
                    1514,
                    1526,
                    1527,
                    1529
                ],
                "bins": [
                    1536,
                    1508,
                    1448,
                    186,
                    1514,
                    1594,
                    1467,
                    1589,
                    1595,
                    1466,
                    187,
                    188,
                    1469,
                    1534,
                    1599
                ],
                "binlabels": [
                    186,
                    187,
                    188
                ],
                "self._get_binner_for_time": [
                    186
                ],
                "len": [
                    1025,
                    870,
                    1034,
                    1422,
                    1583,
                    1498,
                    1554,
                    883,
                    403,
                    1467,
                    1525,
                    1785,
                    1466,
                    187
                ],
                "bin_grouper": [
                    188,
                    189
                ],
                "BinGrouper": [
                    188
                ],
                "self.groupby.indexer": [
                    188
                ],
                "pipe": [
                    220
                ],
                "func": [
                    281,
                    283,
                    220,
                    991
                ],
                "args": [
                    864,
                    359,
                    936,
                    361,
                    364,
                    925,
                    847,
                    989,
                    311,
                    281,
                    220,
                    285,
                    382
                ],
                "kwargs": [
                    1284,
                    1286,
                    1166,
                    1041,
                    1173,
                    918,
                    281,
                    925,
                    285,
                    416,
                    808,
                    936,
                    311,
                    960,
                    961,
                    968,
                    847,
                    1370,
                    987,
                    220,
                    989,
                    1372,
                    864,
                    359,
                    361,
                    364,
                    382
                ],
                "Substitution": [
                    197,
                    270
                ],
                "Appender": [
                    867,
                    784,
                    880,
                    277,
                    218
                ],
                "_pipe_template": [
                    218
                ],
                "_agg_see_also_doc": [
                    222,
                    271
                ],
                "dedent": [
                    232,
                    222
                ],
                "_agg_examples_doc": [
                    232,
                    272
                ],
                "result": [
                    384,
                    385,
                    1041,
                    402,
                    403,
                    1043,
                    1044,
                    407,
                    281,
                    410,
                    282,
                    285,
                    287,
                    288,
                    799,
                    800,
                    422,
                    423,
                    425,
                    428,
                    430,
                    431,
                    433,
                    1091,
                    1092,
                    1094,
                    1098,
                    1099,
                    1102,
                    1106,
                    1107,
                    1108,
                    991,
                    992,
                    869,
                    359,
                    361,
                    364,
                    877,
                    878,
                    882,
                    885,
                    886,
                    891,
                    892,
                    382,
                    895
                ],
                "how": [
                    1034,
                    1166,
                    1168,
                    1041,
                    1173,
                    1175,
                    281,
                    283,
                    1181,
                    285,
                    1364,
                    357,
                    359,
                    361,
                    364,
                    1779,
                    1780,
                    1783,
                    1021,
                    382
                ],
                "self._aggregate": [
                    281
                ],
                "grouper": [
                    354,
                    332,
                    335,
                    284,
                    348,
                    285,
                    350
                ],
                "self._groupby_and_aggregate": [
                    1181,
                    285,
                    1173
                ],
                "self._apply_loffset": [
                    384,
                    1098,
                    1043,
                    287
                ],
                "_shared_docs": [
                    784,
                    277
                ],
                "agg": [
                    290
                ],
                "aggregate": [
                    1041,
                    290,
                    291
                ],
                "apply": [
                    291
                ],
                "transform": [
                    311
                ],
                "self._selected_obj.groupby": [
                    311
                ],
                "arg": [
                    311
                ],
                "int": [
                    319
                ],
                "subset": [
                    333,
                    334,
                    335
                ],
                "grouped": [
                    354,
                    359,
                    361,
                    364,
                    335,
                    339,
                    341,
                    382
                ],
                "get_groupby": [
                    354,
                    335
                ],
                "key": [
                    339
                ],
                "KeyError": [
                    340
                ],
                "ABCDataFrame": [
                    357,
                    1607
                ],
                "callable": [
                    357
                ],
                "grouped._aggregate_item_by_item": [
                    359
                ],
                "grouped.aggregate": [
                    361
                ],
                "DataError": [
                    362
                ],
                "grouped.apply": [
                    364,
                    382
                ],
                "ValueError": [
                    365,
                    1614,
                    1332,
                    1334,
                    1078,
                    1336
                ],
                "err": [
                    369,
                    372,
                    366
                ],
                "self._wrap_result": [
                    992,
                    385,
                    1222,
                    1099,
                    1044
                ],
                "needs_offset": [
                    400,
                    406
                ],
                "self.loffset": [
                    407,
                    401,
                    1362,
                    1143,
                    409
                ],
                "DateOffset": [
                    401
                ],
                "timedelta": [
                    401,
                    1478
                ],
                "np.timedelta64": [
                    401
                ],
                "np": [
                    401,
                    1595,
                    1550,
                    1585
                ],
                "result.index": [
                    1092,
                    428,
                    877,
                    430,
                    402,
                    403,
                    1106,
                    1107,
                    886,
                    407,
                    892
                ],
                "DatetimeIndex": [
                    1416,
                    1517,
                    1423,
                    402,
                    1396
                ],
                "self._resampler_for_grouping": [
                    416
                ],
                "self._selection": [
                    422,
                    423
                ],
                "result.name": [
                    431,
                    423
                ],
                "result.empty": [
                    425
                ],
                "obj.index": [
                    1028,
                    427,
                    428,
                    430,
                    1775,
                    1783,
                    1785,
                    1787,
                    1790,
                    1791
                ],
                "PeriodIndex": [
                    1539,
                    427,
                    1775,
                    1106,
                    1555,
                    1526,
                    1398
                ],
                "obj.index.asfreq": [
                    428,
                    1783
                ],
                "self.freq": [
                    1028,
                    1545,
                    1423,
                    1171,
                    1427,
                    1555,
                    1174,
                    1558,
                    1560,
                    1561,
                    1435,
                    1183,
                    1568,
                    1187,
                    1572,
                    1577,
                    428,
                    430,
                    1090,
                    1218,
                    1474,
                    1107,
                    1499,
                    1504,
                    1507,
                    1512,
                    1523
                ],
                "obj.index._shallow_copy": [
                    1787,
                    430
                ],
                "self._upsample": [
                    517,
                    453,
                    620,
                    782,
                    831,
                    799
                ],
                "limit": [
                    1090,
                    803,
                    517,
                    453,
                    1095,
                    1221,
                    620,
                    782,
                    1366,
                    1210
                ],
                "ffill": [
                    455
                ],
                "pad": [
                    455
                ],
                "bfill": [
                    622
                ],
                "backfill": [
                    622
                ],
                "method": [
                    1792,
                    782,
                    922,
                    924,
                    928,
                    801,
                    929,
                    933,
                    935,
                    939,
                    940,
                    944,
                    946,
                    949,
                    950,
                    1210,
                    1221,
                    1095,
                    1776
                ],
                "result.interpolate": [
                    800
                ],
                "inplace": [
                    804
                ],
                "limit_direction": [
                    805
                ],
                "limit_area": [
                    806
                ],
                "downcast": [
                    807
                ],
                "fill_value": [
                    1792,
                    1210,
                    1095,
                    831
                ],
                "nv.validate_resampler_func": [
                    864,
                    925,
                    936,
                    847
                ],
                "nv": [
                    864,
                    925,
                    936,
                    847
                ],
                "self._downsample": [
                    865,
                    869,
                    937,
                    848,
                    882,
                    947,
                    918,
                    926
                ],
                "ddof": [
                    848,
                    865
                ],
                "self.ax": [
                    870,
                    1129,
                    1008,
                    1009,
                    1169,
                    883,
                    1395,
                    1243,
                    1084,
                    1213,
                    1022
                ],
                "self._selected_obj.ndim": [
                    873,
                    884
                ],
                "name": [
                    874,
                    876,
                    877
                ],
                "self._selected_obj.name": [
                    874,
                    886
                ],
                "Series": [
                    877
                ],
                "GroupBy.size.__doc__": [
                    867
                ],
                "GroupBy.size": [
                    867
                ],
                "GroupBy": [
                    880,
                    867,
                    939,
                    928
                ],
                "DataFrame": [
                    891
                ],
                "result.columns": [
                    892
                ],
                "GroupBy.count.__doc__": [
                    880
                ],
                "GroupBy.count": [
                    880
                ],
                "q": [
                    918
                ],
                "_method": [
                    936,
                    937,
                    947,
                    925,
                    926
                ],
                "min_count": [
                    926
                ],
                "f.__doc__": [
                    928
                ],
                "f": [
                    928,
                    929,
                    986,
                    987,
                    989
                ],
                "__doc__": [
                    928,
                    939,
                    949
                ],
                "setattr": [
                    968,
                    929,
                    940,
                    950
                ],
                "Resampler": [
                    929,
                    999,
                    940,
                    950,
                    1273
                ],
                "g.__doc__": [
                    939
                ],
                "g": [
                    939,
                    940
                ],
                "h.__doc__": [
                    949
                ],
                "h": [
                    949,
                    950
                ],
                "SeriesGroupBy": [
                    949
                ],
                "GroupByMixin": [
                    953
                ],
                "parent": [
                    960,
                    962,
                    963,
                    968,
                    974
                ],
                "kwargs.pop": [
                    960,
                    961,
                    1284
                ],
                "kwargs.get": [
                    968
                ],
                "__init__": [
                    970,
                    1372
                ],
                "self._groupby": [
                    971,
                    972,
                    973,
                    991
                ],
                "self._groupby.mutated": [
                    972
                ],
                "self._groupby.grouper.mutated": [
                    973
                ],
                "self._groupby.grouper": [
                    973
                ],
                "copy.copy": [
                    974
                ],
                "copy": [
                    974
                ],
                "parent.groupby": [
                    974
                ],
                "x": [
                    984,
                    987,
                    989
                ],
                "self._shallow_copy": [
                    984
                ],
                "x.apply": [
                    989
                ],
                "self._groupby.apply": [
                    991
                ],
                "no_type_check": [
                    976
                ],
                "_upsample": [
                    1210,
                    994
                ],
                "_apply": [
                    994,
                    995,
                    996
                ],
                "_downsample": [
                    995,
                    1166
                ],
                "_groupby_and_aggregate": [
                    996
                ],
                "DatetimeIndexResamplerGroupby": [
                    1002
                ],
                "self.groupby._get_time_period_bins": [
                    1008
                ],
                "self.groupby._get_time_bins": [
                    1009
                ],
                "self._get_cython_func": [
                    1168,
                    1021
                ],
                "ax": [
                    1025,
                    1539,
                    1542,
                    1032,
                    1416,
                    1034,
                    1419,
                    1545,
                    1422,
                    1423,
                    1169,
                    1171,
                    1427,
                    1555,
                    1174,
                    1022,
                    1560,
                    1561,
                    1438,
                    1183,
                    1439,
                    1187,
                    1444,
                    1534,
                    1449,
                    1577,
                    1459,
                    1084,
                    1213,
                    1090,
                    1218,
                    1492,
                    1495,
                    1498,
                    1499,
                    1502,
                    1504,
                    1508,
                    1517,
                    1520,
                    1395,
                    1396,
                    1525,
                    1398,
                    1526,
                    1400,
                    1529,
                    1532,
                    1533,
                    1406
                ],
                "obj.copy": [
                    1091,
                    1027,
                    1786,
                    1782
                ],
                "obj.index._set_freq": [
                    1028
                ],
                "ax.freq": [
                    1187,
                    1032,
                    1171,
                    1174,
                    1183
                ],
                "ax.inferred_freq": [
                    1032,
                    1090
                ],
                "self.grouper.binlabels": [
                    1034
                ],
                "self.asfreq": [
                    1184,
                    1037,
                    1182
                ],
                "obj.groupby": [
                    1041
                ],
                "self.closed": [
                    1568,
                    1475,
                    1353,
                    1449,
                    1452,
                    1427,
                    1052
                ],
                "AssertionError": [
                    1076
                ],
                "self._from_selection": [
                    1077,
                    1134
                ],
                "res_index": [
                    1092,
                    1095,
                    1087
                ],
                "self._adjust_binner_for_upsample": [
                    1087
                ],
                "to_offset": [
                    1361,
                    1090,
                    1787,
                    1338
                ],
                "obj.reindex": [
                    1792,
                    1094
                ],
                "_wrap_result": [
                    1102
                ],
                "result.index.to_period": [
                    1107
                ],
                "_GroupByMixin": [
                    1255,
                    1227,
                    1111
                ],
                "DatetimeIndexResampler": [
                    1121,
                    1397,
                    1237,
                    1111,
                    1118
                ],
                "PeriodIndexResamplerGroupby": [
                    1124
                ],
                "_get_binner_for_time": [
                    1128
                ],
                "self.groupby._get_period_bins": [
                    1129
                ],
                "_convert_obj": [
                    1132
                ],
                "msg": [
                    1136,
                    1141
                ],
                "NotImplementedError": [
                    1609,
                    1777,
                    1141
                ],
                "obj.to_timestamp": [
                    1150
                ],
                "self.convention": [
                    1218,
                    1545,
                    1357,
                    1358,
                    1560,
                    1150
                ],
                "is_subperiod": [
                    1171
                ],
                "is_superperiod": [
                    1474,
                    1174
                ],
                "IncompatibleFrequency": [
                    1186
                ],
                "new_index": [
                    1221,
                    1606,
                    1223,
                    1611,
                    1215
                ],
                "memb": [
                    1218,
                    1221,
                    1545,
                    1580,
                    1549,
                    1550,
                    1551,
                    1554,
                    1589
                ],
                "ax.asfreq": [
                    1545,
                    1218
                ],
                "indexer": [
                    1611,
                    1605,
                    1221,
                    1223
                ],
                "memb.get_indexer": [
                    1221
                ],
                "_take_new_index": [
                    1223
                ],
                "PeriodIndexResampler": [
                    1234,
                    1227,
                    1399
                ],
                "TimedeltaIndexResamplerGroupby": [
                    1240
                ],
                "self.groupby._get_time_delta_bins": [
                    1243
                ],
                "TimedeltaIndexResampler": [
                    1401,
                    1262,
                    1255
                ],
                "tg": [
                    1287,
                    1269,
                    1270,
                    1286
                ],
                "TimeGrouper": [
                    1269,
                    1286
                ],
                "kwds": [
                    1269
                ],
                "tg._get_resampler": [
                    1270,
                    1287
                ],
                "resample.__doc__": [
                    1273
                ],
                "resample": [
                    1273
                ],
                "Resampler.__doc__": [
                    1273
                ],
                "rule": [
                    1342,
                    1341,
                    1286
                ],
                "resampler": [
                    1288,
                    1287
                ],
                "groupby.obj": [
                    1287
                ],
                "resampler._get_resampler_for_grouping": [
                    1288
                ],
                "Grouper": [
                    1304,
                    1291
                ],
                "Grouper._attributes": [
                    1304
                ],
                "label": [
                    1345,
                    1346,
                    1350,
                    1351,
                    1354,
                    1331,
                    1332
                ],
                "closed": [
                    1344,
                    1348,
                    1349,
                    1353,
                    1705,
                    1737,
                    1663,
                    1652,
                    1333,
                    1334,
                    1343
                ],
                "convention": [
                    1336,
                    1357,
                    1335
                ],
                "freq": [
                    1523,
                    1526,
                    1783,
                    1529,
                    1338,
                    1531,
                    1372,
                    1341,
                    1790,
                    1787
                ],
                "end_types": [
                    1340,
                    1342
                ],
                "freq.rule_code": [
                    1341
                ],
                "rule.find": [
                    1342
                ],
                "self.label": [
                    1456,
                    1354,
                    1454
                ],
                "self.convention.lower": [
                    1358
                ],
                "loffset": [
                    1735,
                    1360,
                    1361,
                    1362,
                    1744,
                    1746,
                    1757,
                    1759
                ],
                "self.how": [
                    1364
                ],
                "self.fill_method": [
                    1365
                ],
                "fill_method": [
                    1365
                ],
                "self.limit": [
                    1366
                ],
                "self.base": [
                    1568,
                    1511,
                    1512,
                    1427,
                    1367,
                    1565
                ],
                "base": [
                    1705,
                    1731,
                    1652,
                    1367
                ],
                "self._set_grouper": [
                    1393
                ],
                "TimedeltaIndex": [
                    1400,
                    1499,
                    1492
                ],
                "TypeError": [
                    1696,
                    1540,
                    1417,
                    1518,
                    1493,
                    1403
                ],
                "r": [
                    1411,
                    1412,
                    1413
                ],
                "self._get_resampler": [
                    1411
                ],
                "r._set_binner": [
                    1412
                ],
                "r.binner": [
                    1413
                ],
                "r.grouper": [
                    1413
                ],
                "r.obj": [
                    1413
                ],
                "labels": [
                    1536,
                    1423,
                    1424,
                    1555,
                    1556,
                    1434,
                    1576,
                    1453,
                    1455,
                    1457,
                    1461,
                    1466,
                    1467,
                    1469,
                    1597,
                    1599,
                    1499,
                    1500,
                    1503,
                    1507,
                    1512,
                    1514,
                    1526,
                    1527,
                    1529,
                    1531
                ],
                "ax.name": [
                    1504,
                    1577,
                    1423,
                    1555,
                    1526,
                    1529,
                    1499,
                    1439
                ],
                "first": [
                    1664,
                    1666,
                    1670,
                    1426,
                    1436,
                    1695,
                    1699,
                    1701,
                    1704,
                    1705,
                    1708,
                    1710,
                    1723,
                    1725,
                    1727,
                    1734,
                    1740,
                    1742,
                    1752,
                    1755,
                    1647,
                    1648,
                    1651,
                    1652,
                    1655,
                    1657,
                    1660
                ],
                "last": [
                    1668,
                    1670,
                    1426,
                    1437,
                    1695,
                    1700,
                    1702,
                    1704,
                    1705,
                    1709,
                    1710,
                    1724,
                    1729,
                    1735,
                    1746,
                    1749,
                    1759,
                    1761,
                    1649,
                    1651,
                    1652,
                    1656,
                    1657,
                    1661
                ],
                "_get_timestamp_range_edges": [
                    1704,
                    1426
                ],
                "ax.min": [
                    1560,
                    1427,
                    1502
                ],
                "ax.max": [
                    1561,
                    1427,
                    1502
                ],
                "date_range": [
                    1434,
                    1790
                ],
                "ax.tz": [
                    1438
                ],
                "ax_values": [
                    1449,
                    1484,
                    1444,
                    1445
                ],
                "ax.asi8": [
                    1444
                ],
                "bin_edges": [
                    1477,
                    1445,
                    1478,
                    1479,
                    1449,
                    1481,
                    1484,
                    1485,
                    1488,
                    1489
                ],
                "self._adjust_bin_edges": [
                    1445
                ],
                "lib.generate_bins_dt64": [
                    1448
                ],
                "lib": [
                    1448
                ],
                "ax.hasnans": [
                    1449,
                    1459
                ],
                "binner.insert": [
                    1460,
                    1596
                ],
                "NaT": [
                    1597,
                    1460,
                    1461,
                    1596
                ],
                "labels.insert": [
                    1597,
                    1461
                ],
                "binner.tz_localize": [
                    1477
                ],
                "Nano": [
                    1478
                ],
                "asi8": [
                    1479
                ],
                "bin_edges.tz_localize": [
                    1479
                ],
                "binner.tz": [
                    1479
                ],
                "binner.asi8": [
                    1488,
                    1481
                ],
                "ax_values.max": [
                    1484
                ],
                "start": [
                    1504,
                    1568,
                    1572,
                    1574,
                    1577,
                    1560,
                    1502
                ],
                "end": [
                    1504,
                    1568,
                    1577,
                    1561,
                    1502,
                    1567
                ],
                "timedelta_range": [
                    1503
                ],
                "end_stamps": [
                    1507,
                    1508,
                    1531,
                    1533,
                    1534
                ],
                "ax.searchsorted": [
                    1508,
                    1534
                ],
                "period_range": [
                    1576,
                    1529
                ],
                "to_timestamp": [
                    1531
                ],
                "asfreq": [
                    1560,
                    1561,
                    1531
                ],
                "ax.tzinfo": [
                    1532,
                    1533
                ],
                "end_stamps.tz_localize": [
                    1533
                ],
                "nat_count": [
                    1548,
                    1550,
                    1591,
                    1594,
                    1595
                ],
                "memb.hasnans": [
                    1549
                ],
                "np.sum": [
                    1550
                ],
                "memb._isnan": [
                    1550,
                    1551
                ],
                "freq_mult": [
                    1573,
                    1583,
                    1585,
                    1586,
                    1558
                ],
                "self.freq.n": [
                    1558
                ],
                "bin_shift": [
                    1562,
                    1588,
                    1573
                ],
                "p_start": [
                    1572,
                    1574,
                    1567
                ],
                "_get_period_range_edges": [
                    1567
                ],
                "start_offset": [
                    1572,
                    1573
                ],
                "Period": [
                    1572,
                    1695
                ],
                "start_offset.n": [
                    1573
                ],
                "i8": [
                    1584,
                    1585,
                    1580
                ],
                "memb.asi8": [
                    1580
                ],
                "expected_bins_count": [
                    1584,
                    1583
                ],
                "i8_extend": [
                    1584,
                    1585
                ],
                "rng": [
                    1585,
                    1586,
                    1588,
                    1589
                ],
                "np.arange": [
                    1585
                ],
                "memb.searchsorted": [
                    1589
                ],
                "np.insert": [
                    1595
                ],
                "new_values": [
                    1605,
                    1606
                ],
                "algos.take_1d": [
                    1605
                ],
                "algos": [
                    1605
                ],
                "obj.values": [
                    1605
                ],
                "obj._constructor": [
                    1610,
                    1606
                ],
                "obj.name": [
                    1606
                ],
                "obj._data.reindex_indexer": [
                    1611
                ],
                "obj._data": [
                    1611
                ],
                "offset": [
                    1664,
                    1666,
                    1668,
                    1701,
                    1702,
                    1705,
                    1708,
                    1709,
                    1731,
                    1734,
                    1735,
                    1742,
                    1746,
                    1759,
                    1761,
                    1642,
                    1643,
                    1652,
                    1654
                ],
                "Tick": [
                    1642
                ],
                "Day": [
                    1643,
                    1654
                ],
                "tz": [
                    1656,
                    1655,
                    1647
                ],
                "first.tz": [
                    1647
                ],
                "first.tz_localize": [
                    1648,
                    1655
                ],
                "last.tz_localize": [
                    1656,
                    1649
                ],
                "_adjust_dates_anchored": [
                    1651
                ],
                "first.normalize": [
                    1660,
                    1725
                ],
                "last.normalize": [
                    1661
                ],
                "Timestamp": [
                    1664,
                    1666,
                    1763,
                    1668,
                    1762
                ],
                "offset.rollback": [
                    1664
                ],
                "all": [
                    1695
                ],
                "first.to_timestamp": [
                    1699
                ],
                "last.to_timestamp": [
                    1700
                ],
                "adjust_first": [
                    1708,
                    1701
                ],
                "offset.is_on_offset": [
                    1701,
                    1702
                ],
                "adjust_last": [
                    1709,
                    1702
                ],
                "to_period": [
                    1708,
                    1709
                ],
                "first_tzinfo": [
                    1723,
                    1764,
                    1765,
                    1726
                ],
                "first.tzinfo": [
                    1723
                ],
                "last_tzinfo": [
                    1728,
                    1724,
                    1766,
                    1767
                ],
                "last.tzinfo": [
                    1724
                ],
                "start_day_nanos": [
                    1732,
                    1725,
                    1734,
                    1735
                ],
                "value": [
                    1725
                ],
                "first.tz_convert": [
                    1727
                ],
                "last.tz_convert": [
                    1729
                ],
                "base_nanos": [
                    1731,
                    1732
                ],
                "offset.n": [
                    1731
                ],
                "offset.nanos": [
                    1761,
                    1731,
                    1734,
                    1735,
                    1742,
                    1746,
                    1759
                ],
                "foffset": [
                    1734,
                    1738,
                    1740,
                    1751,
                    1752
                ],
                "first.value": [
                    1734,
                    1740,
                    1742,
                    1752,
                    1755
                ],
                "last.value": [
                    1761,
                    1735,
                    1746,
                    1749,
                    1759
                ],
                "fresult": [
                    1762,
                    1765,
                    1768,
                    1740,
                    1742,
                    1752,
                    1755
                ],
                "lresult": [
                    1761,
                    1763,
                    1767,
                    1768,
                    1746,
                    1749,
                    1759
                ],
                "tz_convert": [
                    1765,
                    1767
                ],
                "fresult.tz_localize": [
                    1765
                ],
                "lresult.tz_localize": [
                    1767
                ],
                "new_obj": [
                    1792,
                    1794,
                    1796,
                    1782,
                    1783,
                    1786,
                    1787
                ],
                "new_obj.index": [
                    1794,
                    1787,
                    1783
                ],
                "dti": [
                    1792,
                    1790,
                    1791
                ],
                "dti.name": [
                    1791
                ],
                "obj.index.name": [
                    1791
                ],
                "normalize": [
                    1793
                ],
                "new_obj.index.normalize": [
                    1794
                ]
            },
            "filtered_variables_in_file": {
                "_shared_docs_kwargs": [
                    784,
                    33
                ],
                "Dict": [
                    33
                ],
                "_GroupBy": [
                    36
                ],
                "ShallowMixin": [
                    36
                ],
                "_attributes": [
                    1304,
                    61
                ],
                "self.groupby": [
                    131,
                    103,
                    73,
                    1129,
                    974,
                    1008,
                    1009,
                    188,
                    311,
                    984,
                    85,
                    86,
                    149,
                    150,
                    1243,
                    127,
                    93,
                    95
                ],
                "self": [
                    1028,
                    517,
                    1545,
                    1034,
                    1037,
                    1041,
                    1043,
                    1044,
                    1555,
                    1558,
                    1560,
                    1561,
                    1052,
                    1565,
                    1568,
                    1572,
                    1577,
                    1074,
                    1075,
                    1077,
                    1084,
                    1085,
                    1086,
                    1087,
                    1090,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    1099,
                    85,
                    86,
                    1106,
                    1107,
                    93,
                    94,
                    95,
                    97,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    1127,
                    107,
                    620,
                    1129,
                    1134,
                    1143,
                    122,
                    1146,
                    1149,
                    1150,
                    127,
                    131,
                    138,
                    1165,
                    1168,
                    1169,
                    1171,
                    149,
                    150,
                    1173,
                    1174,
                    1181,
                    1182,
                    1183,
                    1184,
                    1187,
                    169,
                    177,
                    178,
                    1209,
                    186,
                    188,
                    1212,
                    1213,
                    1214,
                    1215,
                    1218,
                    195,
                    1222,
                    1223,
                    1243,
                    782,
                    280,
                    281,
                    285,
                    287,
                    799,
                    311,
                    314,
                    317,
                    831,
                    1353,
                    1354,
                    331,
                    332,
                    1355,
                    334,
                    335,
                    848,
                    1357,
                    1358,
                    1362,
                    1364,
                    1365,
                    1366,
                    1367,
                    349,
                    350,
                    352,
                    865,
                    354,
                    869,
                    870,
                    873,
                    874,
                    1393,
                    882,
                    883,
                    884,
                    885,
                    886,
                    1395,
                    1397,
                    1399,
                    1401,
                    384,
                    385,
                    1411,
                    1423,
                    401,
                    1427,
                    1098,
                    918,
                    407,
                    409,
                    1435,
                    926,
                    416,
                    1445,
                    422,
                    423,
                    937,
                    426,
                    1449,
                    428,
                    1452,
                    430,
                    1454,
                    1456,
                    947,
                    1474,
                    1475,
                    453,
                    967,
                    968,
                    971,
                    972,
                    973,
                    974,
                    984,
                    1499,
                    991,
                    992,
                    1504,
                    1507,
                    1511,
                    1512,
                    1007,
                    1008,
                    1009,
                    1523,
                    1020,
                    1021,
                    1022,
                    1023
                ],
                "groupby": [
                    416,
                    961,
                    1287,
                    1288,
                    73,
                    971
                ],
                "self.keys": [
                    74
                ],
                "self.sort": [
                    75
                ],
                "self.axis": [
                    354,
                    1223,
                    76,
                    335,
                    1041,
                    1075,
                    1397,
                    1399,
                    1401
                ],
                "axis": [
                    1608,
                    802,
                    76,
                    1372
                ],
                "self.kind": [
                    1127,
                    1355,
                    77,
                    1165,
                    1007,
                    1106,
                    1209,
                    1146,
                    1149
                ],
                "kind": [
                    1287,
                    1355,
                    77,
                    1397,
                    1270,
                    1398,
                    1399
                ],
                "self.squeeze": [
                    78
                ],
                "self.group_keys": [
                    79
                ],
                "self.as_index": [
                    80
                ],
                "self.exclusions": [
                    81
                ],
                "self.binner": [
                    177,
                    178,
                    82,
                    1086,
                    1215
                ],
                "self.grouper": [
                    1034,
                    332,
                    1041,
                    178,
                    83,
                    1173,
                    1181,
                    350
                ],
                "self.groupby._set_grouper": [
                    86
                ],
                "self._convert_obj": [
                    86
                ],
                "obj": [
                    1152,
                    1792,
                    1027,
                    1028,
                    1029,
                    1411,
                    1783,
                    1041,
                    1785,
                    1695,
                    165,
                    166,
                    426,
                    427,
                    428,
                    430,
                    431,
                    1790,
                    1791,
                    1085,
                    1214,
                    963,
                    1091,
                    1604,
                    1094,
                    1223,
                    1605,
                    1606,
                    1607,
                    1610,
                    1611,
                    86,
                    352,
                    354,
                    357,
                    1132,
                    1775,
                    1393,
                    1397,
                    1270,
                    1399,
                    1782,
                    1401,
                    1786,
                    1787,
                    1150,
                    1023
                ],
                "attrs": [
                    97,
                    92
                ],
                "k": [
                    93,
                    94,
                    95
                ],
                "self._attributes": [
                    102,
                    94,
                    967
                ],
                "join": [
                    97
                ],
                "attr": [
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    967,
                    107,
                    968
                ],
                "self._internal_names_set": [
                    100
                ],
                "object.__getattribute__": [
                    107,
                    101
                ],
                "self.obj": [
                    104,
                    426,
                    1214,
                    334
                ],
                "self._set_binner": [
                    195,
                    331,
                    1074,
                    1212,
                    280,
                    122,
                    1020,
                    349
                ],
                "__iter__": [
                    123
                ],
                "self.groupby.obj": [
                    127
                ],
                "self.groupby.ax": [
                    131
                ],
                "self._selected_obj": [
                    352,
                    873,
                    138,
                    874,
                    884,
                    885,
                    886,
                    311,
                    1085,
                    1023
                ],
                "ABCSeries": [
                    425,
                    138,
                    1604,
                    422
                ],
                "self.groupby.key": [
                    150
                ],
                "self.groupby.level": [
                    150
                ],
                "obj._consolidate": [
                    165
                ],
                "AbstractMethodError": [
                    169,
                    314,
                    317
                ],
                "self._get_binner": [
                    178
                ],
                "binner": [
                    1536,
                    1423,
                    1424,
                    1555,
                    1556,
                    1434,
                    1053,
                    1055,
                    1056,
                    1445,
                    1576,
                    1453,
                    1583,
                    1460,
                    186,
                    1596,
                    1469,
                    189,
                    1087,
                    1086,
                    1599,
                    1477,
                    1479,
                    1481,
                    1486,
                    1488,
                    1489,
                    1499,
                    1500,
                    1503,
                    1252,
                    1514,
                    1526,
                    1527,
                    1529
                ],
                "bins": [
                    1536,
                    1508,
                    1448,
                    186,
                    1514,
                    1594,
                    1467,
                    1589,
                    1595,
                    1466,
                    187,
                    188,
                    1469,
                    1534,
                    1599
                ],
                "binlabels": [
                    186,
                    187,
                    188
                ],
                "self._get_binner_for_time": [
                    186
                ],
                "bin_grouper": [
                    188,
                    189
                ],
                "BinGrouper": [
                    188
                ],
                "self.groupby.indexer": [
                    188
                ],
                "pipe": [
                    220
                ],
                "func": [
                    281,
                    283,
                    220,
                    991
                ],
                "args": [
                    864,
                    359,
                    936,
                    361,
                    364,
                    925,
                    847,
                    989,
                    311,
                    281,
                    220,
                    285,
                    382
                ],
                "kwargs": [
                    1284,
                    1286,
                    1166,
                    1041,
                    1173,
                    918,
                    281,
                    925,
                    285,
                    416,
                    808,
                    936,
                    311,
                    960,
                    961,
                    968,
                    847,
                    1370,
                    987,
                    220,
                    989,
                    1372,
                    864,
                    359,
                    361,
                    364,
                    382
                ],
                "Substitution": [
                    197,
                    270
                ],
                "Appender": [
                    867,
                    784,
                    880,
                    277,
                    218
                ],
                "_pipe_template": [
                    218
                ],
                "_agg_see_also_doc": [
                    222,
                    271
                ],
                "dedent": [
                    232,
                    222
                ],
                "_agg_examples_doc": [
                    232,
                    272
                ],
                "result": [
                    384,
                    385,
                    1041,
                    402,
                    403,
                    1043,
                    1044,
                    407,
                    281,
                    410,
                    282,
                    285,
                    287,
                    288,
                    799,
                    800,
                    422,
                    423,
                    425,
                    428,
                    430,
                    431,
                    433,
                    1091,
                    1092,
                    1094,
                    1098,
                    1099,
                    1102,
                    1106,
                    1107,
                    1108,
                    991,
                    992,
                    869,
                    359,
                    361,
                    364,
                    877,
                    878,
                    882,
                    885,
                    886,
                    891,
                    892,
                    382,
                    895
                ],
                "how": [
                    1034,
                    1166,
                    1168,
                    1041,
                    1173,
                    1175,
                    281,
                    283,
                    1181,
                    285,
                    1364,
                    357,
                    359,
                    361,
                    364,
                    1779,
                    1780,
                    1783,
                    1021,
                    382
                ],
                "self._aggregate": [
                    281
                ],
                "grouper": [
                    354,
                    332,
                    335,
                    284,
                    348,
                    285,
                    350
                ],
                "self._groupby_and_aggregate": [
                    1181,
                    285,
                    1173
                ],
                "self._apply_loffset": [
                    384,
                    1098,
                    1043,
                    287
                ],
                "_shared_docs": [
                    784,
                    277
                ],
                "agg": [
                    290
                ],
                "aggregate": [
                    1041,
                    290,
                    291
                ],
                "apply": [
                    291
                ],
                "transform": [
                    311
                ],
                "self._selected_obj.groupby": [
                    311
                ],
                "arg": [
                    311
                ],
                "subset": [
                    333,
                    334,
                    335
                ],
                "grouped": [
                    354,
                    359,
                    361,
                    364,
                    335,
                    339,
                    341,
                    382
                ],
                "get_groupby": [
                    354,
                    335
                ],
                "key": [
                    339
                ],
                "ABCDataFrame": [
                    357,
                    1607
                ],
                "grouped._aggregate_item_by_item": [
                    359
                ],
                "grouped.aggregate": [
                    361
                ],
                "DataError": [
                    362
                ],
                "grouped.apply": [
                    364,
                    382
                ],
                "err": [
                    369,
                    372,
                    366
                ],
                "self._wrap_result": [
                    992,
                    385,
                    1222,
                    1099,
                    1044
                ],
                "needs_offset": [
                    400,
                    406
                ],
                "self.loffset": [
                    407,
                    401,
                    1362,
                    1143,
                    409
                ],
                "DateOffset": [
                    401
                ],
                "timedelta": [
                    401,
                    1478
                ],
                "np.timedelta64": [
                    401
                ],
                "np": [
                    401,
                    1595,
                    1550,
                    1585
                ],
                "result.index": [
                    1092,
                    428,
                    877,
                    430,
                    402,
                    403,
                    1106,
                    1107,
                    886,
                    407,
                    892
                ],
                "DatetimeIndex": [
                    1416,
                    1517,
                    1423,
                    402,
                    1396
                ],
                "self._resampler_for_grouping": [
                    416
                ],
                "self._selection": [
                    422,
                    423
                ],
                "result.name": [
                    431,
                    423
                ],
                "result.empty": [
                    425
                ],
                "obj.index": [
                    1028,
                    427,
                    428,
                    430,
                    1775,
                    1783,
                    1785,
                    1787,
                    1790,
                    1791
                ],
                "PeriodIndex": [
                    1539,
                    427,
                    1775,
                    1106,
                    1555,
                    1526,
                    1398
                ],
                "obj.index.asfreq": [
                    428,
                    1783
                ],
                "self.freq": [
                    1028,
                    1545,
                    1423,
                    1171,
                    1427,
                    1555,
                    1174,
                    1558,
                    1560,
                    1561,
                    1435,
                    1183,
                    1568,
                    1187,
                    1572,
                    1577,
                    428,
                    430,
                    1090,
                    1218,
                    1474,
                    1107,
                    1499,
                    1504,
                    1507,
                    1512,
                    1523
                ],
                "obj.index._shallow_copy": [
                    1787,
                    430
                ],
                "self._upsample": [
                    517,
                    453,
                    620,
                    782,
                    831,
                    799
                ],
                "limit": [
                    1090,
                    803,
                    517,
                    453,
                    1095,
                    1221,
                    620,
                    782,
                    1366,
                    1210
                ],
                "ffill": [
                    455
                ],
                "pad": [
                    455
                ],
                "bfill": [
                    622
                ],
                "backfill": [
                    622
                ],
                "method": [
                    1792,
                    782,
                    922,
                    924,
                    928,
                    801,
                    929,
                    933,
                    935,
                    939,
                    940,
                    944,
                    946,
                    949,
                    950,
                    1210,
                    1221,
                    1095,
                    1776
                ],
                "result.interpolate": [
                    800
                ],
                "inplace": [
                    804
                ],
                "limit_direction": [
                    805
                ],
                "limit_area": [
                    806
                ],
                "downcast": [
                    807
                ],
                "fill_value": [
                    1792,
                    1210,
                    1095,
                    831
                ],
                "nv.validate_resampler_func": [
                    864,
                    925,
                    936,
                    847
                ],
                "nv": [
                    864,
                    925,
                    936,
                    847
                ],
                "self._downsample": [
                    865,
                    869,
                    937,
                    848,
                    882,
                    947,
                    918,
                    926
                ],
                "ddof": [
                    848,
                    865
                ],
                "self.ax": [
                    870,
                    1129,
                    1008,
                    1009,
                    1169,
                    883,
                    1395,
                    1243,
                    1084,
                    1213,
                    1022
                ],
                "self._selected_obj.ndim": [
                    873,
                    884
                ],
                "name": [
                    874,
                    876,
                    877
                ],
                "self._selected_obj.name": [
                    874,
                    886
                ],
                "Series": [
                    877
                ],
                "GroupBy.size.__doc__": [
                    867
                ],
                "GroupBy.size": [
                    867
                ],
                "GroupBy": [
                    880,
                    867,
                    939,
                    928
                ],
                "DataFrame": [
                    891
                ],
                "result.columns": [
                    892
                ],
                "GroupBy.count.__doc__": [
                    880
                ],
                "GroupBy.count": [
                    880
                ],
                "q": [
                    918
                ],
                "_method": [
                    936,
                    937,
                    947,
                    925,
                    926
                ],
                "min_count": [
                    926
                ],
                "f.__doc__": [
                    928
                ],
                "f": [
                    928,
                    929,
                    986,
                    987,
                    989
                ],
                "Resampler": [
                    929,
                    999,
                    940,
                    950,
                    1273
                ],
                "g.__doc__": [
                    939
                ],
                "g": [
                    939,
                    940
                ],
                "h.__doc__": [
                    949
                ],
                "h": [
                    949,
                    950
                ],
                "SeriesGroupBy": [
                    949
                ],
                "GroupByMixin": [
                    953
                ],
                "parent": [
                    960,
                    962,
                    963,
                    968,
                    974
                ],
                "kwargs.pop": [
                    960,
                    961,
                    1284
                ],
                "kwargs.get": [
                    968
                ],
                "__init__": [
                    970,
                    1372
                ],
                "self._groupby": [
                    971,
                    972,
                    973,
                    991
                ],
                "self._groupby.mutated": [
                    972
                ],
                "self._groupby.grouper.mutated": [
                    973
                ],
                "self._groupby.grouper": [
                    973
                ],
                "copy.copy": [
                    974
                ],
                "copy": [
                    974
                ],
                "parent.groupby": [
                    974
                ],
                "x": [
                    984,
                    987,
                    989
                ],
                "self._shallow_copy": [
                    984
                ],
                "x.apply": [
                    989
                ],
                "self._groupby.apply": [
                    991
                ],
                "no_type_check": [
                    976
                ],
                "_upsample": [
                    1210,
                    994
                ],
                "_apply": [
                    994,
                    995,
                    996
                ],
                "_downsample": [
                    995,
                    1166
                ],
                "_groupby_and_aggregate": [
                    996
                ],
                "DatetimeIndexResamplerGroupby": [
                    1002
                ],
                "self.groupby._get_time_period_bins": [
                    1008
                ],
                "self.groupby._get_time_bins": [
                    1009
                ],
                "self._get_cython_func": [
                    1168,
                    1021
                ],
                "ax": [
                    1025,
                    1539,
                    1542,
                    1032,
                    1416,
                    1034,
                    1419,
                    1545,
                    1422,
                    1423,
                    1169,
                    1171,
                    1427,
                    1555,
                    1174,
                    1022,
                    1560,
                    1561,
                    1438,
                    1183,
                    1439,
                    1187,
                    1444,
                    1534,
                    1449,
                    1577,
                    1459,
                    1084,
                    1213,
                    1090,
                    1218,
                    1492,
                    1495,
                    1498,
                    1499,
                    1502,
                    1504,
                    1508,
                    1517,
                    1520,
                    1395,
                    1396,
                    1525,
                    1398,
                    1526,
                    1400,
                    1529,
                    1532,
                    1533,
                    1406
                ],
                "obj.copy": [
                    1091,
                    1027,
                    1786,
                    1782
                ],
                "obj.index._set_freq": [
                    1028
                ],
                "ax.freq": [
                    1187,
                    1032,
                    1171,
                    1174,
                    1183
                ],
                "ax.inferred_freq": [
                    1032,
                    1090
                ],
                "self.grouper.binlabels": [
                    1034
                ],
                "self.asfreq": [
                    1184,
                    1037,
                    1182
                ],
                "obj.groupby": [
                    1041
                ],
                "self.closed": [
                    1568,
                    1475,
                    1353,
                    1449,
                    1452,
                    1427,
                    1052
                ],
                "self._from_selection": [
                    1077,
                    1134
                ],
                "res_index": [
                    1092,
                    1095,
                    1087
                ],
                "self._adjust_binner_for_upsample": [
                    1087
                ],
                "to_offset": [
                    1361,
                    1090,
                    1787,
                    1338
                ],
                "obj.reindex": [
                    1792,
                    1094
                ],
                "_wrap_result": [
                    1102
                ],
                "result.index.to_period": [
                    1107
                ],
                "_GroupByMixin": [
                    1255,
                    1227,
                    1111
                ],
                "DatetimeIndexResampler": [
                    1121,
                    1397,
                    1237,
                    1111,
                    1118
                ],
                "PeriodIndexResamplerGroupby": [
                    1124
                ],
                "_get_binner_for_time": [
                    1128
                ],
                "self.groupby._get_period_bins": [
                    1129
                ],
                "_convert_obj": [
                    1132
                ],
                "msg": [
                    1136,
                    1141
                ],
                "obj.to_timestamp": [
                    1150
                ],
                "self.convention": [
                    1218,
                    1545,
                    1357,
                    1358,
                    1560,
                    1150
                ],
                "is_subperiod": [
                    1171
                ],
                "is_superperiod": [
                    1474,
                    1174
                ],
                "IncompatibleFrequency": [
                    1186
                ],
                "new_index": [
                    1221,
                    1606,
                    1223,
                    1611,
                    1215
                ],
                "memb": [
                    1218,
                    1221,
                    1545,
                    1580,
                    1549,
                    1550,
                    1551,
                    1554,
                    1589
                ],
                "ax.asfreq": [
                    1545,
                    1218
                ],
                "indexer": [
                    1611,
                    1605,
                    1221,
                    1223
                ],
                "memb.get_indexer": [
                    1221
                ],
                "_take_new_index": [
                    1223
                ],
                "PeriodIndexResampler": [
                    1234,
                    1227,
                    1399
                ],
                "TimedeltaIndexResamplerGroupby": [
                    1240
                ],
                "self.groupby._get_time_delta_bins": [
                    1243
                ],
                "TimedeltaIndexResampler": [
                    1401,
                    1262,
                    1255
                ],
                "tg": [
                    1287,
                    1269,
                    1270,
                    1286
                ],
                "TimeGrouper": [
                    1269,
                    1286
                ],
                "kwds": [
                    1269
                ],
                "tg._get_resampler": [
                    1270,
                    1287
                ],
                "resample.__doc__": [
                    1273
                ],
                "resample": [
                    1273
                ],
                "Resampler.__doc__": [
                    1273
                ],
                "rule": [
                    1342,
                    1341,
                    1286
                ],
                "resampler": [
                    1288,
                    1287
                ],
                "groupby.obj": [
                    1287
                ],
                "resampler._get_resampler_for_grouping": [
                    1288
                ],
                "Grouper": [
                    1304,
                    1291
                ],
                "Grouper._attributes": [
                    1304
                ],
                "label": [
                    1345,
                    1346,
                    1350,
                    1351,
                    1354,
                    1331,
                    1332
                ],
                "closed": [
                    1344,
                    1348,
                    1349,
                    1353,
                    1705,
                    1737,
                    1663,
                    1652,
                    1333,
                    1334,
                    1343
                ],
                "convention": [
                    1336,
                    1357,
                    1335
                ],
                "freq": [
                    1523,
                    1526,
                    1783,
                    1529,
                    1338,
                    1531,
                    1372,
                    1341,
                    1790,
                    1787
                ],
                "end_types": [
                    1340,
                    1342
                ],
                "freq.rule_code": [
                    1341
                ],
                "rule.find": [
                    1342
                ],
                "self.label": [
                    1456,
                    1354,
                    1454
                ],
                "self.convention.lower": [
                    1358
                ],
                "loffset": [
                    1735,
                    1360,
                    1361,
                    1362,
                    1744,
                    1746,
                    1757,
                    1759
                ],
                "self.how": [
                    1364
                ],
                "self.fill_method": [
                    1365
                ],
                "fill_method": [
                    1365
                ],
                "self.limit": [
                    1366
                ],
                "self.base": [
                    1568,
                    1511,
                    1512,
                    1427,
                    1367,
                    1565
                ],
                "base": [
                    1705,
                    1731,
                    1652,
                    1367
                ],
                "self._set_grouper": [
                    1393
                ],
                "TimedeltaIndex": [
                    1400,
                    1499,
                    1492
                ],
                "r": [
                    1411,
                    1412,
                    1413
                ],
                "self._get_resampler": [
                    1411
                ],
                "r._set_binner": [
                    1412
                ],
                "r.binner": [
                    1413
                ],
                "r.grouper": [
                    1413
                ],
                "r.obj": [
                    1413
                ],
                "labels": [
                    1536,
                    1423,
                    1424,
                    1555,
                    1556,
                    1434,
                    1576,
                    1453,
                    1455,
                    1457,
                    1461,
                    1466,
                    1467,
                    1469,
                    1597,
                    1599,
                    1499,
                    1500,
                    1503,
                    1507,
                    1512,
                    1514,
                    1526,
                    1527,
                    1529,
                    1531
                ],
                "ax.name": [
                    1504,
                    1577,
                    1423,
                    1555,
                    1526,
                    1529,
                    1499,
                    1439
                ],
                "first": [
                    1664,
                    1666,
                    1670,
                    1426,
                    1436,
                    1695,
                    1699,
                    1701,
                    1704,
                    1705,
                    1708,
                    1710,
                    1723,
                    1725,
                    1727,
                    1734,
                    1740,
                    1742,
                    1752,
                    1755,
                    1647,
                    1648,
                    1651,
                    1652,
                    1655,
                    1657,
                    1660
                ],
                "last": [
                    1668,
                    1670,
                    1426,
                    1437,
                    1695,
                    1700,
                    1702,
                    1704,
                    1705,
                    1709,
                    1710,
                    1724,
                    1729,
                    1735,
                    1746,
                    1749,
                    1759,
                    1761,
                    1649,
                    1651,
                    1652,
                    1656,
                    1657,
                    1661
                ],
                "_get_timestamp_range_edges": [
                    1704,
                    1426
                ],
                "ax.min": [
                    1560,
                    1427,
                    1502
                ],
                "ax.max": [
                    1561,
                    1427,
                    1502
                ],
                "date_range": [
                    1434,
                    1790
                ],
                "ax.tz": [
                    1438
                ],
                "ax_values": [
                    1449,
                    1484,
                    1444,
                    1445
                ],
                "ax.asi8": [
                    1444
                ],
                "bin_edges": [
                    1477,
                    1445,
                    1478,
                    1479,
                    1449,
                    1481,
                    1484,
                    1485,
                    1488,
                    1489
                ],
                "self._adjust_bin_edges": [
                    1445
                ],
                "lib.generate_bins_dt64": [
                    1448
                ],
                "lib": [
                    1448
                ],
                "ax.hasnans": [
                    1449,
                    1459
                ],
                "binner.insert": [
                    1460,
                    1596
                ],
                "NaT": [
                    1597,
                    1460,
                    1461,
                    1596
                ],
                "labels.insert": [
                    1597,
                    1461
                ],
                "binner.tz_localize": [
                    1477
                ],
                "Nano": [
                    1478
                ],
                "asi8": [
                    1479
                ],
                "bin_edges.tz_localize": [
                    1479
                ],
                "binner.tz": [
                    1479
                ],
                "binner.asi8": [
                    1488,
                    1481
                ],
                "ax_values.max": [
                    1484
                ],
                "start": [
                    1504,
                    1568,
                    1572,
                    1574,
                    1577,
                    1560,
                    1502
                ],
                "end": [
                    1504,
                    1568,
                    1577,
                    1561,
                    1502,
                    1567
                ],
                "timedelta_range": [
                    1503
                ],
                "end_stamps": [
                    1507,
                    1508,
                    1531,
                    1533,
                    1534
                ],
                "ax.searchsorted": [
                    1508,
                    1534
                ],
                "period_range": [
                    1576,
                    1529
                ],
                "to_timestamp": [
                    1531
                ],
                "asfreq": [
                    1560,
                    1561,
                    1531
                ],
                "ax.tzinfo": [
                    1532,
                    1533
                ],
                "end_stamps.tz_localize": [
                    1533
                ],
                "nat_count": [
                    1548,
                    1550,
                    1591,
                    1594,
                    1595
                ],
                "memb.hasnans": [
                    1549
                ],
                "np.sum": [
                    1550
                ],
                "memb._isnan": [
                    1550,
                    1551
                ],
                "freq_mult": [
                    1573,
                    1583,
                    1585,
                    1586,
                    1558
                ],
                "self.freq.n": [
                    1558
                ],
                "bin_shift": [
                    1562,
                    1588,
                    1573
                ],
                "p_start": [
                    1572,
                    1574,
                    1567
                ],
                "_get_period_range_edges": [
                    1567
                ],
                "start_offset": [
                    1572,
                    1573
                ],
                "Period": [
                    1572,
                    1695
                ],
                "start_offset.n": [
                    1573
                ],
                "i8": [
                    1584,
                    1585,
                    1580
                ],
                "memb.asi8": [
                    1580
                ],
                "expected_bins_count": [
                    1584,
                    1583
                ],
                "i8_extend": [
                    1584,
                    1585
                ],
                "rng": [
                    1585,
                    1586,
                    1588,
                    1589
                ],
                "np.arange": [
                    1585
                ],
                "memb.searchsorted": [
                    1589
                ],
                "np.insert": [
                    1595
                ],
                "new_values": [
                    1605,
                    1606
                ],
                "algos.take_1d": [
                    1605
                ],
                "algos": [
                    1605
                ],
                "obj.values": [
                    1605
                ],
                "obj._constructor": [
                    1610,
                    1606
                ],
                "obj.name": [
                    1606
                ],
                "obj._data.reindex_indexer": [
                    1611
                ],
                "obj._data": [
                    1611
                ],
                "offset": [
                    1664,
                    1666,
                    1668,
                    1701,
                    1702,
                    1705,
                    1708,
                    1709,
                    1731,
                    1734,
                    1735,
                    1742,
                    1746,
                    1759,
                    1761,
                    1642,
                    1643,
                    1652,
                    1654
                ],
                "Tick": [
                    1642
                ],
                "Day": [
                    1643,
                    1654
                ],
                "tz": [
                    1656,
                    1655,
                    1647
                ],
                "first.tz": [
                    1647
                ],
                "first.tz_localize": [
                    1648,
                    1655
                ],
                "last.tz_localize": [
                    1656,
                    1649
                ],
                "_adjust_dates_anchored": [
                    1651
                ],
                "first.normalize": [
                    1660,
                    1725
                ],
                "last.normalize": [
                    1661
                ],
                "Timestamp": [
                    1664,
                    1666,
                    1763,
                    1668,
                    1762
                ],
                "offset.rollback": [
                    1664
                ],
                "first.to_timestamp": [
                    1699
                ],
                "last.to_timestamp": [
                    1700
                ],
                "adjust_first": [
                    1708,
                    1701
                ],
                "offset.is_on_offset": [
                    1701,
                    1702
                ],
                "adjust_last": [
                    1709,
                    1702
                ],
                "to_period": [
                    1708,
                    1709
                ],
                "first_tzinfo": [
                    1723,
                    1764,
                    1765,
                    1726
                ],
                "first.tzinfo": [
                    1723
                ],
                "last_tzinfo": [
                    1728,
                    1724,
                    1766,
                    1767
                ],
                "last.tzinfo": [
                    1724
                ],
                "start_day_nanos": [
                    1732,
                    1725,
                    1734,
                    1735
                ],
                "value": [
                    1725
                ],
                "first.tz_convert": [
                    1727
                ],
                "last.tz_convert": [
                    1729
                ],
                "base_nanos": [
                    1731,
                    1732
                ],
                "offset.n": [
                    1731
                ],
                "offset.nanos": [
                    1761,
                    1731,
                    1734,
                    1735,
                    1742,
                    1746,
                    1759
                ],
                "foffset": [
                    1734,
                    1738,
                    1740,
                    1751,
                    1752
                ],
                "first.value": [
                    1734,
                    1740,
                    1742,
                    1752,
                    1755
                ],
                "last.value": [
                    1761,
                    1735,
                    1746,
                    1749,
                    1759
                ],
                "fresult": [
                    1762,
                    1765,
                    1768,
                    1740,
                    1742,
                    1752,
                    1755
                ],
                "lresult": [
                    1761,
                    1763,
                    1767,
                    1768,
                    1746,
                    1749,
                    1759
                ],
                "tz_convert": [
                    1765,
                    1767
                ],
                "fresult.tz_localize": [
                    1765
                ],
                "lresult.tz_localize": [
                    1767
                ],
                "new_obj": [
                    1792,
                    1794,
                    1796,
                    1782,
                    1783,
                    1786,
                    1787
                ],
                "new_obj.index": [
                    1794,
                    1787,
                    1783
                ],
                "dti": [
                    1792,
                    1790,
                    1791
                ],
                "dti.name": [
                    1791
                ],
                "obj.index.name": [
                    1791
                ],
                "normalize": [
                    1793
                ],
                "new_obj.index.normalize": [
                    1794
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_92/pandas/tests/frame/methods/test_asof.py",
                "test_function": "test_missing",
                "test_function_code": "    def test_missing(self, date_range_frame):\n        # GH 15118\n        # no match found - `where` value before earliest date in index\n        N = 10\n        df = date_range_frame.iloc[:N].copy()\n\n        result = df.asof(\"1989-12-31\")\n\n        expected = Series(\n            index=[\"A\", \"B\"], name=Timestamp(\"1989-12-31\"), dtype=np.float64\n        )\n        tm.assert_series_equal(result, expected)\n\n        result = df.asof(to_datetime([\"1989-12-31\"]))\n        expected = DataFrame(\n            index=to_datetime([\"1989-12-31\"]), columns=[\"A\", \"B\"], dtype=\"float64\"\n        )\n        tm.assert_frame_equal(result, expected)\n\n        # Check that we handle PeriodIndex correctly, dont end up with\n        #  period.ordinal for series name\n        df = df.to_period(\"D\")\n        result = df.asof(\"1989-12-31\")\n        assert isinstance(result.name, Period)",
                "test_error": "assert False  +  where False = isinstance(7304, Period)  +    where 7304 = A   NaN\\nB   NaN\\nName: 7304, dtype: float64.name",
                "full_test_error": "self = <pandas.tests.frame.methods.test_asof.TestFrameAsof object at 0x117802c70>\ndate_range_frame =                       A   B\n1990-01-01 00:00:00   0   0\n1990-01-01 00:00:53   1   1\n1990-01-01 00:01:46   2   2\n1990-0... 45  45\n1990-01-01 00:40:38  46  46\n1990-01-01 00:41:31  47  47\n1990-01-01 00:42:24  48  48\n1990-01-01 00:43:17  49  49\n\n    def test_missing(self, date_range_frame):\n        # GH 15118\n        # no match found - `where` value before earliest date in index\n        N = 10\n        df = date_range_frame.iloc[:N].copy()\n    \n        result = df.asof(\"1989-12-31\")\n    \n        expected = Series(\n            index=[\"A\", \"B\"], name=Timestamp(\"1989-12-31\"), dtype=np.float64\n        )\n        tm.assert_series_equal(result, expected)\n    \n        result = df.asof(to_datetime([\"1989-12-31\"]))\n        expected = DataFrame(\n            index=to_datetime([\"1989-12-31\"]), columns=[\"A\", \"B\"], dtype=\"float64\"\n        )\n        tm.assert_frame_equal(result, expected)\n    \n        # Check that we handle PeriodIndex correctly, dont end up with\n        #  period.ordinal for series name\n        df = df.to_period(\"D\")\n        result = df.asof(\"1989-12-31\")\n>       assert isinstance(result.name, Period)\nE       assert False\nE        +  where False = isinstance(7304, Period)\nE        +    where 7304 = A   NaN\\nB   NaN\\nName: 7304, dtype: float64.name\n\npandas/tests/frame/methods/test_asof.py:87: AssertionError",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}