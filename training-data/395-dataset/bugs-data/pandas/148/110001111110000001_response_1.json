{
    "pandas": [
        {
            "bugID": 148,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 1
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 1
            },
            "start_line": 188,
            "file_name": "core/apply.py",
            "replace_code": "def apply_empty_result(self):\n    from pandas import Series, DataFrame\n    \"\"\"\n    we have an empty result; at least 1 axis is 0\n    \n    we will try to apply the function to an empty\n    series in order to see if this is a reduction function\n    \"\"\"\n    \n    # we are not asked to reduce or infer reduction\n    # so just return a copy of the existing object\n    if self.result_type not in [\"reduce\", None]:\n        return self.obj.copy()\n    \n    # we may need to infer\n    should_reduce = self.result_type == \"reduce\"\n    \n    from pandas import Series, DataFrame\n    \n    if not should_reduce:\n    \n        EMPTY_SERIES = Series([])\n        try:\n            r = self.f(EMPTY_SERIES, *self.args, **self.kwds)\n        except Exception:\n            pass\n        else:\n            if isinstance(r, Series) and len(r) == 0 and self.obj.shape[0] == 0:\n                return DataFrame(columns=self.obj.columns)  # Return an empty DataFrame\n            else:\n                return r  # Return the result obtained from applying the function to an empty series\n    \n    if should_reduce:\n        return self.obj._constructor_sliced(np.nan, index=self.agg_axis)\n    else:\n        return self.obj.copy()"
        }
    ]
}