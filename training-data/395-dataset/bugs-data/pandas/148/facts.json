{
    "1.1.1": "def apply_empty_result(self):\n    \n\n    # we are not asked to reduce or infer reduction\n    # so just return a copy of the existing object\n    if self.result_type not in [\"reduce\", None]:\n        return self.obj.copy()\n\n    # we may need to infer\n    should_reduce = self.result_type == \"reduce\"\n\n    from pandas import Series\n\n    if not should_reduce:\n\n        EMPTY_SERIES = Series([])\n        try:\n            r = self.f(EMPTY_SERIES, *self.args, **self.kwds)\n        except Exception:\n            pass\n        else:\n            should_reduce = not isinstance(r, Series)\n\n    if should_reduce:\n        return self.obj._constructor_sliced(np.nan, index=self.agg_axis)\n    else:\n        return self.obj.copy()\n",
    "1.1.2": "we have an empty result; at least 1 axis is 0\n\nwe will try to apply the function to an empty\nseries in order to see if this is a reduction function",
    "1.2.1": "class FrameApply()",
    "1.2.2": null,
    "1.2.3": [
        "agg_axis(self)",
        "f(x)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_148/pandas/core/apply.py",
    "1.3.2": [
        "agg_axis(self)",
        "f(x)"
    ],
    "1.4.1": [
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n        assert_series_equal(result, expected)",
        "    def test_nunique_empty(self):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n\n        result = df.nunique()\n        expected = Series(0, index=df.columns)\n        assert_series_equal(result, expected)\n\n        result = df.T.nunique()\n        expected = Series([], index=pd.Index([]))\n        assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_148/pandas/tests/frame/test_apply.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_148/pandas/tests/frame/test_apply.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_148/pandas/tests/frame/test_apply.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_148/pandas/tests/frame/test_apply.py",
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_148/pandas/tests/frame/test_apply.py"
    ],
    "2.1.1": [
        [
            "E   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [left]:  [nan, nan, nan]\nE   [right]: [0.0, 0.0, 0.0]"
        ],
        [
            "E   AssertionError: Series are different\nE   \nE   Series values are different (100.0 %)\nE   [left]:  [nan, nan, nan]\nE   [right]: [1.0, 1.0, 1.0]"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  float64\nE       [right]: bool"
        ],
        [
            "E       AssertionError: Attributes are different\nE       \nE       Attribute \"dtype\" are different\nE       [left]:  float64\nE       [right]: bool"
        ],
        [
            "E           AssertionError: Series Expected type <class 'pandas.core.series.Series'>, found <class 'pandas.core.frame.DataFrame'> instead"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x113b09ac0>\nfunc = 'sum'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)\n\npandas/tests/frame/test_apply.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:176: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x113c79880>\nfunc = 'prod'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)\n\npandas/tests/frame/test_apply.py:126: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/_libs/testing.pyx:65: in pandas._libs.testing.assert_almost_equal\n    cpdef assert_almost_equal(a, b,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>   raise_assert_detail(obj, msg, lobj, robj)",
            "\npandas/_libs/testing.pyx:176: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x113d57550>\nfunc = 'any'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_apply.py:126: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x113d82d90>\nfunc = 'all'\n\n    @pytest.mark.parametrize(\"func\", [\"sum\", \"prod\", \"any\", \"all\"])\n    def test_apply_funcs_over_empty(self, func):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.apply(getattr(np, func))\n        expected = getattr(df, func)()\n>       assert_series_equal(result, expected)",
            "\npandas/tests/frame/test_apply.py:126: AssertionError"
        ],
        [
            "self = <pandas.tests.frame.test_apply.TestDataFrameApply object at 0x113d88580>\n\n    def test_nunique_empty(self):\n        # GH 28213\n        df = DataFrame(columns=[\"a\", \"b\", \"c\"])\n    \n        result = df.nunique()\n        expected = Series(0, index=df.columns)\n>       assert_series_equal(result, expected)\n\npandas/tests/frame/test_apply.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nleft = Empty DataFrame\nColumns: [a, b, c]\nIndex: []\nright = a    0\nb    0\nc    0\ndtype: int64\ncls = <class 'pandas.core.series.Series'>\n\n    def _check_isinstance(left, right, cls):\n        \"\"\"\n        Helper method for our assert_* methods that ensures that\n        the two objects being compared have the right type before\n        proceeding with the comparison.\n    \n        Parameters\n        ----------\n        left : The first object being compared.\n        right : The second object being compared.\n        cls : The class type to check against.\n    \n        Raises\n        ------\n        AssertionError : Either `left` or `right` is not an instance of `cls`.\n        \"\"\"\n    \n        err_msg = \"{name} Expected type {exp_type}, found {act_type} instead\"\n        cls_name = cls.__name__\n    \n        if not isinstance(left, cls):\n>           raise AssertionError(\n                err_msg.format(name=cls_name, exp_type=cls, act_type=type(left))\n            )",
            "\npandas/util/testing.py:389: AssertionError"
        ]
    ],
    "2.1.3": [
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11b6429d0>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.args": "()",
                "self.kwds": "{}",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "EMPTY_SERIES": "Series([], dtype: float64)",
                "Series": "<class 'pandas.core.series.Series'>",
                "r": "0.0"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11b6f1a00>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.args": "()",
                "self.kwds": "{}",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "EMPTY_SERIES": "Series([], dtype: float64)",
                "Series": "<class 'pandas.core.series.Series'>",
                "r": "1.0"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11b698040>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.args": "()",
                "self.kwds": "{}",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "EMPTY_SERIES": "Series([], dtype: float64)",
                "Series": "<class 'pandas.core.series.Series'>",
                "r": "False"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11b8718b0>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.args": "()",
                "self.kwds": "{}",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "EMPTY_SERIES": "Series([], dtype: float64)",
                "Series": "<class 'pandas.core.series.Series'>",
                "r": "True"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "float64"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "float64"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "bool_"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.args": "tuple",
                "self.kwds": "dict",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "EMPTY_SERIES": "Series",
                "Series": "type",
                "r": "bool_"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11d43c6d0>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "r": "0.0",
                "Series": "<class 'pandas.core.series.Series'>"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11d290220>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "r": "1.0",
                "Series": "<class 'pandas.core.series.Series'>"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11d36d460>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "r": "False",
                "Series": "<class 'pandas.core.series.Series'>"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11d36d9a0>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "r": "True",
                "Series": "<class 'pandas.core.series.Series'>"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11d36dc10>",
                "self.obj": "Empty DataFrame\nColumns: [a, b, c]\nIndex: []",
                "self.f": "<function FrameApply.__init__.<locals>.f at 0x11d1fe1f0>",
                "self.agg_axis": "Index(['a', 'b', 'c'], dtype='object')"
            },
            {
                "should_reduce": "True",
                "r": "0",
                "Series": "<class 'pandas.core.series.Series'>"
            }
        ],
        [
            {
                "self": "<pandas.core.apply.FrameRowApply object at 0x11d2d19a0>",
                "self.obj": "Empty DataFrame\nColumns: []\nIndex: [a, b, c]",
                "self.f": "<function FrameApply.__init__.<locals>.f at 0x11d1fe1f0>",
                "self.agg_axis": "Index([], dtype='object')"
            },
            {
                "should_reduce": "True",
                "r": "nan",
                "Series": "<class 'pandas.core.series.Series'>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "float64",
                "Series": "type"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "float64",
                "Series": "type"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "bool_",
                "Series": "type"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "bool_",
                "Series": "type"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.f": "function",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "int",
                "Series": "type"
            }
        ],
        [
            {
                "self": "FrameRowApply",
                "self.obj": "DataFrame",
                "self.f": "function",
                "self.agg_axis": "Index"
            },
            {
                "should_reduce": "bool",
                "r": "float",
                "Series": "type"
            }
        ]
    ],
    "3.1.1": [
        "\n"
    ],
    "3.1.2": [
        "\n"
    ]
}