{
    "pandas:147": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_147/pandas/core/dtypes/dtypes.py": {
            "buggy_functions": [
                {
                    "function_name": "__init__",
                    "function_code": "def __init__(self, unit=\"ns\", tz=None):\n    if isinstance(unit, DatetimeTZDtype):\n        unit, tz = unit.unit, unit.tz\n\n    if unit != \"ns\":\n        if isinstance(unit, str) and tz is None:\n            # maybe a string like datetime64[ns, tz], which we support for\n            # now.\n            result = type(self).construct_from_string(unit)\n            unit = result.unit\n            tz = result.tz\n            msg = (\n                \"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                \"to DatetimeTZDtype is deprecated. Use \"\n                \"'DatetimeTZDtype.construct_from_string()' instead.\"\n            )\n            warnings.warn(msg.format(tz=tz), FutureWarning, stacklevel=2)\n        else:\n            raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n    if tz:\n        tz = timezones.maybe_get_tz(tz)\n        tz = timezones.tz_standardize(tz)\n    elif tz is not None:\n        raise pytz.UnknownTimeZoneError(tz)\n    elif tz is None:\n        raise TypeError(\"A 'tz' is required.\")\n\n    self._unit = unit\n    self._tz = tz\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 663,
                    "variables": {
                        "isinstance": [
                            664,
                            668
                        ],
                        "unit": [
                            672,
                            691,
                            664,
                            665,
                            667,
                            668,
                            671
                        ],
                        "DatetimeTZDtype": [
                            664
                        ],
                        "tz": [
                            673,
                            679,
                            683,
                            684,
                            685,
                            686,
                            687,
                            688,
                            692,
                            665,
                            668
                        ],
                        "unit.unit": [
                            665
                        ],
                        "unit.tz": [
                            665
                        ],
                        "str": [
                            668
                        ],
                        "result": [
                            672,
                            673,
                            671
                        ],
                        "construct_from_string": [
                            671
                        ],
                        "type": [
                            671
                        ],
                        "self": [
                            691,
                            692,
                            671
                        ],
                        "result.unit": [
                            672
                        ],
                        "result.tz": [
                            673
                        ],
                        "msg": [
                            674,
                            679
                        ],
                        "warnings.warn": [
                            679
                        ],
                        "warnings": [
                            679
                        ],
                        "msg.format": [
                            679
                        ],
                        "FutureWarning": [
                            679
                        ],
                        "ValueError": [
                            681
                        ],
                        "timezones.maybe_get_tz": [
                            684
                        ],
                        "timezones": [
                            684,
                            685
                        ],
                        "timezones.tz_standardize": [
                            685
                        ],
                        "pytz.UnknownTimeZoneError": [
                            687
                        ],
                        "pytz": [
                            687
                        ],
                        "TypeError": [
                            689
                        ],
                        "self._unit": [
                            691
                        ],
                        "self._tz": [
                            692
                        ]
                    },
                    "filtered_variables": {
                        "unit": [
                            672,
                            691,
                            664,
                            665,
                            667,
                            668,
                            671
                        ],
                        "DatetimeTZDtype": [
                            664
                        ],
                        "tz": [
                            673,
                            679,
                            683,
                            684,
                            685,
                            686,
                            687,
                            688,
                            692,
                            665,
                            668
                        ],
                        "unit.unit": [
                            665
                        ],
                        "unit.tz": [
                            665
                        ],
                        "result": [
                            672,
                            673,
                            671
                        ],
                        "construct_from_string": [
                            671
                        ],
                        "self": [
                            691,
                            692,
                            671
                        ],
                        "result.unit": [
                            672
                        ],
                        "result.tz": [
                            673
                        ],
                        "msg": [
                            674,
                            679
                        ],
                        "warnings.warn": [
                            679
                        ],
                        "warnings": [
                            679
                        ],
                        "msg.format": [
                            679
                        ],
                        "timezones.maybe_get_tz": [
                            684
                        ],
                        "timezones": [
                            684,
                            685
                        ],
                        "timezones.tz_standardize": [
                            685
                        ],
                        "pytz.UnknownTimeZoneError": [
                            687
                        ],
                        "pytz": [
                            687
                        ],
                        "self._unit": [
                            691
                        ],
                        "self._tz": [
                            692
                        ]
                    },
                    "diff_line_number": 688,
                    "class_data": {
                        "signature": "class DatetimeTZDtype(PandasExtensionDtype)",
                        "docstring": "An ExtensionDtype for timezone-aware datetime data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nunit : str, default \"ns\"\n    The precision of the datetime data. Currently limited\n    to ``\"ns\"``.\ntz : str, int, or datetime.tzinfo\n    The timezone.\n\nAttributes\n----------\nunit\ntz\n\nMethods\n-------\nNone\n\nRaises\n------\npytz.UnknownTimeZoneError\n    When the requested timezone cannot be found.\n\nExamples\n--------\n>>> pd.DatetimeTZDtype(tz='UTC')\ndatetime64[ns, UTC]\n\n>>> pd.DatetimeTZDtype(tz='dateutil/US/Central')\ndatetime64[ns, tzfile('/usr/share/zoneinfo/US/Central')]",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, unit='ns', tz=None):\n    if isinstance(unit, DatetimeTZDtype):\n        unit, tz = (unit.unit, unit.tz)\n    if unit != 'ns':\n        if isinstance(unit, str) and tz is None:\n            result = type(self).construct_from_string(unit)\n            unit = result.unit\n            tz = result.tz\n            msg = \"Passing a dtype alias like 'datetime64[ns, {tz}]' to DatetimeTZDtype is deprecated. Use 'DatetimeTZDtype.construct_from_string()' instead.\"\n            warnings.warn(msg.format(tz=tz), FutureWarning, stacklevel=2)\n        else:\n            raise ValueError('DatetimeTZDtype only supports ns units')\n    if tz:\n        tz = timezones.maybe_get_tz(tz)\n        tz = timezones.tz_standardize(tz)\n    elif tz is not None:\n        raise pytz.UnknownTimeZoneError(tz)\n    elif tz is None:\n        raise TypeError(\"A 'tz' is required.\")\n    self._unit = unit\n    self._tz = tz",
                            "@property\ndef unit(self):\n    \"\"\"\n    The precision of the datetime data.\n    \"\"\"\n    return self._unit",
                            "@property\ndef tz(self):\n    \"\"\"\n    The timezone.\n    \"\"\"\n    return self._tz",
                            "@classmethod\ndef construct_array_type(cls):\n    \"\"\"\n    Return the array type associated with this dtype\n\n    Returns\n    -------\n    type\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray\n    return DatetimeArray",
                            "@classmethod\ndef construct_from_string(cls, string):\n    \"\"\"\n    Construct a DatetimeTZDtype from a string.\n\n    Parameters\n    ----------\n    string : str\n        The string alias for this DatetimeTZDtype.\n        Should be formatted like ``datetime64[ns, <tz>]``,\n        where ``<tz>`` is the timezone name.\n\n    Examples\n    --------\n    >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n    datetime64[ns, UTC]\n    \"\"\"\n    if isinstance(string, str):\n        msg = \"Could not construct DatetimeTZDtype from '{}'\"\n        try:\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                return cls(unit=d['unit'], tz=d['tz'])\n        except Exception:\n            pass\n        raise TypeError(msg.format(string))\n    raise TypeError('Could not construct DatetimeTZDtype')",
                            "def __str__(self):\n    return 'datetime64[{unit}, {tz}]'.format(unit=self.unit, tz=self.tz)",
                            "@property\ndef name(self):\n    \"\"\"A string representation of the dtype.\"\"\"\n    return str(self)",
                            "def __hash__(self):\n    return hash(str(self))",
                            "def __eq__(self, other):\n    if isinstance(other, str):\n        return other == self.name\n    return isinstance(other, DatetimeTZDtype) and self.unit == other.unit and (str(self.tz) == str(other.tz))",
                            "def __setstate__(self, state):\n    self._tz = state['tz']\n    self._unit = state['unit']"
                        ],
                        "constructor_variables": [
                            "msg",
                            "_unit",
                            "result",
                            "_tz",
                            "unit",
                            "tz"
                        ],
                        "class_level_variables": [
                            "type",
                            "kind",
                            "str",
                            "num",
                            "base",
                            "na_value",
                            "_metadata",
                            "_match",
                            "_cache"
                        ],
                        "class_decorators": [
                            "register_extension_dtype"
                        ],
                        "function_signatures": [
                            "__init__(self, unit='ns', tz=None)",
                            "unit(self)",
                            "tz(self)",
                            "construct_array_type(cls)",
                            "construct_from_string(cls, string)",
                            "__str__(self)",
                            "name(self)",
                            "__hash__(self)",
                            "__eq__(self, other)",
                            "__setstate__(self, state)"
                        ]
                    },
                    "variable_values": [
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.dtypes.dtypes.Registry object at 0x10f397ee0>",
                                    "variable_type": "Registry",
                                    "variable_shape": null
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=None, ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b'], ordered=True)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['x', 'y'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b'], ordered=True)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=None, ordered=None)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['w', 'x', 'y', 'z'], ordered=True)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=None, ordered=None)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "<pandas.core.dtypes.dtypes.Registry object at 0x10c0c3e50>",
                                    "variable_type": "Registry",
                                    "variable_shape": null
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=None, ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b'], ordered=True)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['x', 'y'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b'], ordered=True)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=None, ordered=None)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['a', 'b', 'c'], ordered=False)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=['w', 'x', 'y', 'z'], ordered=True)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {},
                            {
                                "unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "DatetimeTZDtype": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "unit.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "construct_from_string": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self": {
                                    "variable_value": "CategoricalDtype(categories=None, ordered=None)",
                                    "variable_type": "CategoricalDtype",
                                    "variable_shape": "()"
                                },
                                "result.unit": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "result.tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings.warn": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "warnings": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.maybe_get_tz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "timezones.tz_standardize": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz.UnknownTimeZoneError": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "pytz": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._unit": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._tz": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                },
                {
                    "function_name": "construct_from_string",
                    "function_code": "@classmethod\ndef construct_from_string(cls, string):\n    \"\"\"\n    Construct a DatetimeTZDtype from a string.\n\n    Parameters\n    ----------\n    string : str\n        The string alias for this DatetimeTZDtype.\n        Should be formatted like ``datetime64[ns, <tz>]``,\n        where ``<tz>`` is the timezone name.\n\n    Examples\n    --------\n    >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n    datetime64[ns, UTC]\n    \"\"\"\n    if isinstance(string, str):\n        msg = \"Could not construct DatetimeTZDtype from '{}'\"\n        try:\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n        except Exception:\n            # TODO(py3): Change this pass to `raise TypeError(msg) from e`\n            pass\n        raise TypeError(msg.format(string))\n\n    raise TypeError(\"Could not construct DatetimeTZDtype\")\n",
                    "decorators": [
                        "classmethod"
                    ],
                    "docstring": "Construct a DatetimeTZDtype from a string.\n\nParameters\n----------\nstring : str\n    The string alias for this DatetimeTZDtype.\n    Should be formatted like ``datetime64[ns, <tz>]``,\n    where ``<tz>`` is the timezone name.\n\nExamples\n--------\n>>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\ndatetime64[ns, UTC]",
                    "start_line": 721,
                    "variables": {
                        "isinstance": [
                            738
                        ],
                        "string": [
                            738,
                            748,
                            741
                        ],
                        "str": [
                            738
                        ],
                        "msg": [
                            739,
                            748
                        ],
                        "match": [
                            741,
                            742,
                            743
                        ],
                        "cls._match.match": [
                            741
                        ],
                        "cls._match": [
                            741
                        ],
                        "cls": [
                            744,
                            741
                        ],
                        "d": [
                            744,
                            743
                        ],
                        "match.groupdict": [
                            743
                        ],
                        "Exception": [
                            745
                        ],
                        "TypeError": [
                            748,
                            750
                        ],
                        "msg.format": [
                            748
                        ],
                        "classmethod": [
                            721
                        ]
                    },
                    "filtered_variables": {
                        "string": [
                            738,
                            748,
                            741
                        ],
                        "msg": [
                            739,
                            748
                        ],
                        "match": [
                            741,
                            742,
                            743
                        ],
                        "cls._match.match": [
                            741
                        ],
                        "cls._match": [
                            741
                        ],
                        "cls": [
                            744,
                            741
                        ],
                        "d": [
                            744,
                            743
                        ],
                        "match.groupdict": [
                            743
                        ],
                        "msg.format": [
                            748
                        ]
                    },
                    "diff_line_number": 740,
                    "class_data": {
                        "signature": "class DatetimeTZDtype(PandasExtensionDtype)",
                        "docstring": "An ExtensionDtype for timezone-aware datetime data.\n\n**This is not an actual numpy dtype**, but a duck type.\n\nParameters\n----------\nunit : str, default \"ns\"\n    The precision of the datetime data. Currently limited\n    to ``\"ns\"``.\ntz : str, int, or datetime.tzinfo\n    The timezone.\n\nAttributes\n----------\nunit\ntz\n\nMethods\n-------\nNone\n\nRaises\n------\npytz.UnknownTimeZoneError\n    When the requested timezone cannot be found.\n\nExamples\n--------\n>>> pd.DatetimeTZDtype(tz='UTC')\ndatetime64[ns, UTC]\n\n>>> pd.DatetimeTZDtype(tz='dateutil/US/Central')\ndatetime64[ns, tzfile('/usr/share/zoneinfo/US/Central')]",
                        "constructor_docstring": null,
                        "functions": [
                            "def __init__(self, unit='ns', tz=None):\n    if isinstance(unit, DatetimeTZDtype):\n        unit, tz = (unit.unit, unit.tz)\n    if unit != 'ns':\n        if isinstance(unit, str) and tz is None:\n            result = type(self).construct_from_string(unit)\n            unit = result.unit\n            tz = result.tz\n            msg = \"Passing a dtype alias like 'datetime64[ns, {tz}]' to DatetimeTZDtype is deprecated. Use 'DatetimeTZDtype.construct_from_string()' instead.\"\n            warnings.warn(msg.format(tz=tz), FutureWarning, stacklevel=2)\n        else:\n            raise ValueError('DatetimeTZDtype only supports ns units')\n    if tz:\n        tz = timezones.maybe_get_tz(tz)\n        tz = timezones.tz_standardize(tz)\n    elif tz is not None:\n        raise pytz.UnknownTimeZoneError(tz)\n    elif tz is None:\n        raise TypeError(\"A 'tz' is required.\")\n    self._unit = unit\n    self._tz = tz",
                            "@property\ndef unit(self):\n    \"\"\"\n    The precision of the datetime data.\n    \"\"\"\n    return self._unit",
                            "@property\ndef tz(self):\n    \"\"\"\n    The timezone.\n    \"\"\"\n    return self._tz",
                            "@classmethod\ndef construct_array_type(cls):\n    \"\"\"\n    Return the array type associated with this dtype\n\n    Returns\n    -------\n    type\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray\n    return DatetimeArray",
                            "@classmethod\ndef construct_from_string(cls, string):\n    \"\"\"\n    Construct a DatetimeTZDtype from a string.\n\n    Parameters\n    ----------\n    string : str\n        The string alias for this DatetimeTZDtype.\n        Should be formatted like ``datetime64[ns, <tz>]``,\n        where ``<tz>`` is the timezone name.\n\n    Examples\n    --------\n    >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n    datetime64[ns, UTC]\n    \"\"\"\n    if isinstance(string, str):\n        msg = \"Could not construct DatetimeTZDtype from '{}'\"\n        try:\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                return cls(unit=d['unit'], tz=d['tz'])\n        except Exception:\n            pass\n        raise TypeError(msg.format(string))\n    raise TypeError('Could not construct DatetimeTZDtype')",
                            "def __str__(self):\n    return 'datetime64[{unit}, {tz}]'.format(unit=self.unit, tz=self.tz)",
                            "@property\ndef name(self):\n    \"\"\"A string representation of the dtype.\"\"\"\n    return str(self)",
                            "def __hash__(self):\n    return hash(str(self))",
                            "def __eq__(self, other):\n    if isinstance(other, str):\n        return other == self.name\n    return isinstance(other, DatetimeTZDtype) and self.unit == other.unit and (str(self.tz) == str(other.tz))",
                            "def __setstate__(self, state):\n    self._tz = state['tz']\n    self._unit = state['unit']"
                        ],
                        "constructor_variables": [
                            "msg",
                            "_unit",
                            "result",
                            "_tz",
                            "unit",
                            "tz"
                        ],
                        "class_level_variables": [
                            "type",
                            "kind",
                            "str",
                            "num",
                            "base",
                            "na_value",
                            "_metadata",
                            "_match",
                            "_cache"
                        ],
                        "class_decorators": [
                            "register_extension_dtype"
                        ],
                        "function_signatures": [
                            "__init__(self, unit='ns', tz=None)",
                            "unit(self)",
                            "tz(self)",
                            "construct_array_type(cls)",
                            "construct_from_string(cls, string)",
                            "__str__(self)",
                            "name(self)",
                            "__hash__(self)",
                            "__eq__(self, other)",
                            "__setstate__(self, state)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "string": {
                                    "variable_value": "'datetime64[ns, dateutil/invalid]'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls._match.match": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cls._match": {
                                    "variable_value": "re.compile('(datetime64",
                                    "variable_type": "Pattern",
                                    "variable_shape": "M8)\\\\[(?P<unit>.+), (?P<tz>.+)\\\\]')"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.dtypes.dtypes.DatetimeTZDtype'>",
                                    "variable_type": "type",
                                    "variable_shape": "()"
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.groupdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "string": {
                                    "variable_value": "'datetime64[ns, dateutil/invalid]'",
                                    "variable_type": "str",
                                    "variable_shape": "32"
                                },
                                "msg": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "cls._match.match": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "cls._match": {
                                    "variable_value": "re.compile('(datetime64",
                                    "variable_type": "Pattern",
                                    "variable_shape": "M8)\\\\[(?P<unit>.+), (?P<tz>.+)\\\\]')"
                                },
                                "cls": {
                                    "variable_value": "<class 'pandas.core.dtypes.dtypes.DatetimeTZDtype'>",
                                    "variable_type": "type",
                                    "variable_shape": "()"
                                },
                                "d": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "match.groupdict": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "msg.format": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "err": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {}
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def register_extension_dtype(cls: Type[ExtensionDtype]) -> Type[ExtensionDtype]:\n    \"\"\"\n    Register an ExtensionType with pandas as class decorator.\n\n    .. versionadded:: 0.24.0\n\n    This enables operations like ``.astype(name)`` for the name\n    of the ExtensionDtype.\n\n    Returns\n    -------\n    callable\n        A class decorator.\n\n    Examples\n    --------\n    >>> from pandas.api.extensions import register_extension_dtype\n    >>> from pandas.api.extensions import ExtensionDtype\n    >>> @register_extension_dtype\n    ... class MyExtensionDtype(ExtensionDtype):\n    ...     pass\n    \"\"\"\n    registry.register(cls)\n    return cls",
                "def __init__(self):\n    self.dtypes = []  # type: List[Type[ExtensionDtype]]",
                "def register(self, dtype: Type[ExtensionDtype]) -> None:\n    \"\"\"\n    Parameters\n    ----------\n    dtype : ExtensionDtype\n    \"\"\"\n    if not issubclass(dtype, ExtensionDtype):\n        raise ValueError(\"can only register pandas extension dtypes\")\n\n    self.dtypes.append(dtype)",
                "def find(\n    self, dtype: Union[Type[ExtensionDtype], str]\n) -> Optional[Type[ExtensionDtype]]:\n    \"\"\"\n    Parameters\n    ----------\n    dtype : Type[ExtensionDtype] or string\n\n    Returns\n    -------\n    return the first matching dtype, otherwise return None\n    \"\"\"\n    if not isinstance(dtype, str):\n        dtype_type = dtype\n        if not isinstance(dtype, type):\n            dtype_type = type(dtype)\n        if issubclass(dtype_type, ExtensionDtype):\n            return dtype\n\n        return None\n\n    for dtype_type in self.dtypes:\n        try:\n            return dtype_type.construct_from_string(dtype)\n        except TypeError:\n            pass\n\n    return None",
                "def __str__(self) -> str_type:\n    \"\"\"\n    Return a string representation for a particular Object\n    \"\"\"\n    return self.name",
                "def __repr__(self) -> str_type:\n    \"\"\"\n    Return a string representation for a particular object.\n    \"\"\"\n    return str(self)",
                "def __hash__(self) -> int:\n    raise NotImplementedError(\"sub-classes should implement an __hash__ method\")",
                "def __getstate__(self) -> Dict[str_type, Any]:\n    # pickle support; we don't want to pickle the cache\n    return {k: getattr(self, k, None) for k in self._metadata}",
                "@classmethod\ndef reset_cache(cls) -> None:\n    \"\"\" clear the cache \"\"\"\n    cls._cache = {}",
                "def __init__(\n    self, categories=None, ordered: Union[Ordered, object] = ordered_sentinel\n):\n    # TODO(GH26403): Set type of ordered to Ordered\n    ordered = cast(Ordered, ordered)\n    self._finalize(categories, ordered, fastpath=False)",
                "@classmethod\ndef _from_fastpath(\n    cls, categories=None, ordered: Optional[bool] = None\n) -> \"CategoricalDtype\":\n    self = cls.__new__(cls)\n    self._finalize(categories, ordered, fastpath=True)\n    return self",
                "@classmethod\ndef _from_categorical_dtype(\n    cls, dtype: \"CategoricalDtype\", categories=None, ordered: Ordered = None\n) -> \"CategoricalDtype\":\n    if categories is ordered is None:\n        return dtype\n    if categories is None:\n        categories = dtype.categories\n    if ordered is None:\n        ordered = dtype.ordered\n    return cls(categories, ordered)",
                "@classmethod\ndef _from_values_or_dtype(\n    cls,\n    values=None,\n    categories=None,\n    ordered: Optional[bool] = None,\n    dtype: Optional[\"CategoricalDtype\"] = None,\n) -> \"CategoricalDtype\":\n    \"\"\"\n    Construct dtype from the input parameters used in :class:`Categorical`.\n\n    This constructor method specifically does not do the factorization\n    step, if that is needed to find the categories. This constructor may\n    therefore return ``CategoricalDtype(categories=None, ordered=None)``,\n    which may not be useful. Additional steps may therefore have to be\n    taken to create the final dtype.\n\n    The return dtype is specified from the inputs in this prioritized\n    order:\n    1. if dtype is a CategoricalDtype, return dtype\n    2. if dtype is the string 'category', create a CategoricalDtype from\n       the supplied categories and ordered parameters, and return that.\n    3. if values is a categorical, use value.dtype, but override it with\n       categories and ordered if either/both of those are not None.\n    4. if dtype is None and values is not a categorical, construct the\n       dtype from categories and ordered, even if either of those is None.\n\n    Parameters\n    ----------\n    values : list-like, optional\n        The list-like must be 1-dimensional.\n    categories : list-like, optional\n        Categories for the CategoricalDtype.\n    ordered : bool, optional\n        Designating if the categories are ordered.\n    dtype : CategoricalDtype or the string \"category\", optional\n        If ``CategoricalDtype``, cannot be used together with\n        `categories` or `ordered`.\n\n    Returns\n    -------\n    CategoricalDtype\n\n    Examples\n    --------\n    >>> CategoricalDtype._from_values_or_dtype()\n    CategoricalDtype(categories=None, ordered=None)\n    >>> CategoricalDtype._from_values_or_dtype(categories=['a', 'b'],\n    ...                                        ordered=True)\n    CategoricalDtype(categories=['a', 'b'], ordered=True)\n    >>> dtype1 = CategoricalDtype(['a', 'b'], ordered=True)\n    >>> dtype2 = CategoricalDtype(['x', 'y'], ordered=False)\n    >>> c = Categorical([0, 1], dtype=dtype1, fastpath=True)\n    >>> CategoricalDtype._from_values_or_dtype(c, ['x', 'y'], ordered=True,\n    ...                                        dtype=dtype2)\n    ValueError: Cannot specify `categories` or `ordered` together with\n    `dtype`.\n\n    The supplied dtype takes precedence over values' dtype:\n\n    >>> CategoricalDtype._from_values_or_dtype(c, dtype=dtype2)\n    CategoricalDtype(['x', 'y'], ordered=False)\n    \"\"\"\n    from pandas.core.dtypes.common import is_categorical\n\n    if dtype is not None:\n        # The dtype argument takes precedence over values.dtype (if any)\n        if isinstance(dtype, str):\n            if dtype == \"category\":\n                dtype = CategoricalDtype(categories, ordered)\n            else:\n                msg = \"Unknown dtype {dtype!r}\"\n                raise ValueError(msg.format(dtype=dtype))\n        elif categories is not None or ordered is not None:\n            raise ValueError(\n                \"Cannot specify `categories` or `ordered` together with `dtype`.\"\n            )\n    elif is_categorical(values):\n        # If no \"dtype\" was passed, use the one from \"values\", but honor\n        # the \"ordered\" and \"categories\" arguments\n        dtype = values.dtype._from_categorical_dtype(\n            values.dtype, categories, ordered\n        )\n    else:\n        # If dtype=None and values is not categorical, create a new dtype.\n        # Note: This could potentially have categories=None and\n        # ordered=None.\n        dtype = CategoricalDtype(categories, ordered)\n\n    return dtype",
                "def _finalize(self, categories, ordered: Ordered, fastpath: bool = False) -> None:\n\n    if ordered is not None and ordered is not ordered_sentinel:\n        self.validate_ordered(ordered)\n\n    if categories is not None:\n        categories = self.validate_categories(categories, fastpath=fastpath)\n\n    self._categories = categories\n    self._ordered = ordered if ordered is not ordered_sentinel else None\n    self._ordered_from_sentinel = ordered is ordered_sentinel",
                "def __setstate__(self, state: Dict[str_type, Any]) -> None:\n    # for pickle compat. __get_state__ is defined in the\n    # PandasExtensionDtype superclass and uses the public properties to\n    # pickle -> need to set the settable private ones here (see GH26067)\n    self._categories = state.pop(\"categories\", None)\n    self._ordered = state.pop(\"ordered\", False)\n    self._ordered_from_sentinel = state.pop(\"_ordered_from_sentinel\", False)",
                "def __hash__(self) -> int:\n    # _hash_categories returns a uint64, so use the negative\n    # space for when we have unknown categories to avoid a conflict\n    if self.categories is None:\n        if self._ordered:\n            return -1\n        else:\n            return -2\n    # We *do* want to include the real self.ordered here\n    return int(self._hash_categories(self.categories, self._ordered))",
                "def __eq__(self, other: Any) -> bool:\n    \"\"\"\n    Rules for CDT equality:\n    1) Any CDT is equal to the string 'category'\n    2) Any CDT is equal to itself\n    3) Any CDT is equal to a CDT with categories=None regardless of ordered\n    4) A CDT with ordered=True is only equal to another CDT with\n       ordered=True and identical categories in the same order\n    5) A CDT with ordered={False, None} is only equal to another CDT with\n       ordered={False, None} and identical categories, but same order is\n       not required. There is no distinction between False/None.\n    6) Any other comparison returns False\n    \"\"\"\n    if isinstance(other, str):\n        return other == self.name\n    elif other is self:\n        return True\n    elif not (hasattr(other, \"_ordered\") and hasattr(other, \"categories\")):\n        return False\n    elif self.categories is None or other.categories is None:\n        # We're forced into a suboptimal corner thanks to math and\n        # backwards compatibility. We require that `CDT(...) == 'category'`\n        # for all CDTs **including** `CDT(None, ...)`. Therefore, *all*\n        # CDT(., .) = CDT(None, False) and *all*\n        # CDT(., .) = CDT(None, True).\n        return True\n    elif self._ordered or other._ordered:\n        # At least one has ordered=True; equal if both have ordered=True\n        # and the same values for categories in the same order.\n        return (self._ordered == other._ordered) and self.categories.equals(\n            other.categories\n        )\n    else:\n        # Neither has ordered=True; equal if both have the same categories,\n        # but same order is not necessary.  There is no distinction between\n        # ordered=False and ordered=None: CDT(., False) and CDT(., None)\n        # will be equal if they have the same categories.\n        if (\n            self.categories.dtype == other.categories.dtype\n            and self.categories.equals(other.categories)\n        ):\n            # Check and see if they happen to be identical categories\n            return True\n        return hash(self) == hash(other)",
                "def __repr__(self):\n    tpl = \"CategoricalDtype(categories={}ordered={})\"\n    if self.categories is None:\n        data = \"None, \"\n    else:\n        data = self.categories._format_data(name=self.__class__.__name__)\n    return tpl.format(data, self._ordered)",
                "@staticmethod\ndef _hash_categories(categories, ordered: Ordered = True) -> int:\n    from pandas.core.util.hashing import (\n        hash_array,\n        _combine_hash_arrays,\n        hash_tuples,\n    )\n    from pandas.core.dtypes.common import is_datetime64tz_dtype, _NS_DTYPE\n\n    if len(categories) and isinstance(categories[0], tuple):\n        # assumes if any individual category is a tuple, then all our. ATM\n        # I don't really want to support just some of the categories being\n        # tuples.\n        categories = list(categories)  # breaks if a np.array of categories\n        cat_array = hash_tuples(categories)\n    else:\n        if categories.dtype == \"O\":\n            if len({type(x) for x in categories}) != 1:\n                # TODO: hash_array doesn't handle mixed types. It casts\n                # everything to a str first, which means we treat\n                # {'1', '2'} the same as {'1', 2}\n                # find a better solution\n                hashed = hash((tuple(categories), ordered))\n                return hashed\n\n        if is_datetime64tz_dtype(categories.dtype):\n            # Avoid future warning.\n            categories = categories.astype(_NS_DTYPE)\n\n        cat_array = hash_array(np.asarray(categories), categorize=False)\n    if ordered:\n        cat_array = np.vstack(\n            [cat_array, np.arange(len(cat_array), dtype=cat_array.dtype)]\n        )\n    else:\n        cat_array = [cat_array]\n    hashed = _combine_hash_arrays(iter(cat_array), num_items=len(cat_array))\n    return np.bitwise_xor.reduce(hashed)",
                "@classmethod\ndef construct_array_type(cls):\n    \"\"\"\n    Return the array type associated with this dtype\n\n    Returns\n    -------\n    type\n    \"\"\"\n    from pandas import Categorical\n\n    return Categorical",
                "@staticmethod\ndef validate_ordered(ordered: Ordered) -> None:\n    \"\"\"\n    Validates that we have a valid ordered parameter. If\n    it is not a boolean, a TypeError will be raised.\n\n    Parameters\n    ----------\n    ordered : object\n        The parameter to be verified.\n\n    Raises\n    ------\n    TypeError\n        If 'ordered' is not a boolean.\n    \"\"\"\n    if not is_bool(ordered):\n        raise TypeError(\"'ordered' must either be 'True' or 'False'\")",
                "@staticmethod\ndef validate_categories(categories, fastpath: bool = False):\n    \"\"\"\n    Validates that we have good categories\n\n    Parameters\n    ----------\n    categories : array-like\n    fastpath : bool\n        Whether to skip nan and uniqueness checks\n\n    Returns\n    -------\n    categories : Index\n    \"\"\"\n    from pandas.core.indexes.base import Index\n\n    if not fastpath and not is_list_like(categories):\n        msg = \"Parameter 'categories' must be list-like, was {!r}\"\n        raise TypeError(msg.format(categories))\n    elif not isinstance(categories, ABCIndexClass):\n        categories = Index(categories, tupleize_cols=False)\n\n    if not fastpath:\n\n        if categories.hasnans:\n            raise ValueError(\"Categorial categories cannot be null\")\n\n        if not categories.is_unique:\n            raise ValueError(\"Categorical categories must be unique\")\n\n    if isinstance(categories, ABCCategoricalIndex):\n        categories = categories.categories\n\n    return categories",
                "def update_dtype(\n    self, dtype: Union[str_type, \"CategoricalDtype\"]\n) -> \"CategoricalDtype\":\n    \"\"\"\n    Returns a CategoricalDtype with categories and ordered taken from dtype\n    if specified, otherwise falling back to self if unspecified\n\n    Parameters\n    ----------\n    dtype : CategoricalDtype\n\n    Returns\n    -------\n    new_dtype : CategoricalDtype\n    \"\"\"\n    if isinstance(dtype, str) and dtype == \"category\":\n        # dtype='category' should not change anything\n        return self\n    elif not self.is_dtype(dtype):\n        msg = (\n            \"a CategoricalDtype must be passed to perform an update, \"\n            \"got {dtype!r}\"\n        ).format(dtype=dtype)\n        raise ValueError(msg)\n    else:\n        # from here on, dtype is a CategoricalDtype\n        dtype = cast(CategoricalDtype, dtype)\n\n    # dtype is CDT: keep current categories/ordered if None\n    new_categories = dtype.categories\n    if new_categories is None:\n        new_categories = self.categories\n\n    new_ordered = dtype._ordered\n    new_ordered_from_sentinel = dtype._ordered_from_sentinel\n    if new_ordered is None:\n        # maintain existing ordered if new dtype has ordered=None\n        new_ordered = self._ordered\n        if self._ordered and new_ordered_from_sentinel:\n            # only warn if we'd actually change the existing behavior\n            msg = (\n                \"Constructing a CategoricalDtype without specifying \"\n                \"`ordered` will default to `ordered=False` in a future \"\n                \"version, which will cause the resulting categorical's \"\n                \"`ordered` attribute to change to False; `ordered=True`\"\n                \" must be explicitly passed in order to be retained\"\n            )\n            warnings.warn(msg, FutureWarning, stacklevel=3)\n\n    return CategoricalDtype(new_categories, new_ordered)",
                "@property\ndef categories(self):\n    \"\"\"\n    An ``Index`` containing the unique categories allowed.\n    \"\"\"\n    return self._categories",
                "@property\ndef ordered(self) -> Ordered:\n    \"\"\"\n    Whether the categories have an ordered relationship.\n    \"\"\"\n    # TODO: remove if block when ordered=None as default is deprecated\n    if self._ordered_from_sentinel and self._ordered is None:\n        # warn when accessing ordered if ordered=None and None was not\n        # explicitly passed to the constructor\n        msg = (\n            \"Constructing a CategoricalDtype without specifying \"\n            \"`ordered` will default to `ordered=False` in a future \"\n            \"version; `ordered=None` must be explicitly passed.\"\n        )\n        warnings.warn(msg, FutureWarning, stacklevel=2)\n    return self._ordered",
                "@property\ndef _is_boolean(self) -> bool:\n    from pandas.core.dtypes.common import is_bool_dtype\n\n    return is_bool_dtype(self.categories)",
                "def __init__(self, unit=\"ns\", tz=None):\n    if isinstance(unit, DatetimeTZDtype):\n        unit, tz = unit.unit, unit.tz\n\n    if unit != \"ns\":\n        if isinstance(unit, str) and tz is None:\n            # maybe a string like datetime64[ns, tz], which we support for\n            # now.\n            result = type(self).construct_from_string(unit)\n            unit = result.unit\n            tz = result.tz\n            msg = (\n                \"Passing a dtype alias like 'datetime64[ns, {tz}]' \"\n                \"to DatetimeTZDtype is deprecated. Use \"\n                \"'DatetimeTZDtype.construct_from_string()' instead.\"\n            )\n            warnings.warn(msg.format(tz=tz), FutureWarning, stacklevel=2)\n        else:\n            raise ValueError(\"DatetimeTZDtype only supports ns units\")\n\n    if tz:\n        tz = timezones.maybe_get_tz(tz)\n        tz = timezones.tz_standardize(tz)\n    elif tz is not None:\n        raise pytz.UnknownTimeZoneError(tz)\n    elif tz is None:\n        raise TypeError(\"A 'tz' is required.\")\n\n    self._unit = unit\n    self._tz = tz",
                "@property\ndef unit(self):\n    \"\"\"\n    The precision of the datetime data.\n    \"\"\"\n    return self._unit",
                "@property\ndef tz(self):\n    \"\"\"\n    The timezone.\n    \"\"\"\n    return self._tz",
                "@classmethod\ndef construct_array_type(cls):\n    \"\"\"\n    Return the array type associated with this dtype\n\n    Returns\n    -------\n    type\n    \"\"\"\n    from pandas.core.arrays import DatetimeArray\n\n    return DatetimeArray",
                "@classmethod\ndef construct_from_string(cls, string):\n    \"\"\"\n    Construct a DatetimeTZDtype from a string.\n\n    Parameters\n    ----------\n    string : str\n        The string alias for this DatetimeTZDtype.\n        Should be formatted like ``datetime64[ns, <tz>]``,\n        where ``<tz>`` is the timezone name.\n\n    Examples\n    --------\n    >>> DatetimeTZDtype.construct_from_string('datetime64[ns, UTC]')\n    datetime64[ns, UTC]\n    \"\"\"\n    if isinstance(string, str):\n        msg = \"Could not construct DatetimeTZDtype from '{}'\"\n        try:\n            match = cls._match.match(string)\n            if match:\n                d = match.groupdict()\n                return cls(unit=d[\"unit\"], tz=d[\"tz\"])\n        except Exception:\n            # TODO(py3): Change this pass to `raise TypeError(msg) from e`\n            pass\n        raise TypeError(msg.format(string))\n\n    raise TypeError(\"Could not construct DatetimeTZDtype\")",
                "def __str__(self):\n    return \"datetime64[{unit}, {tz}]\".format(unit=self.unit, tz=self.tz)",
                "@property\ndef name(self):\n    \"\"\"A string representation of the dtype.\"\"\"\n    return str(self)",
                "def __hash__(self):\n    # make myself hashable\n    # TODO: update this.\n    return hash(str(self))",
                "def __eq__(self, other):\n    if isinstance(other, str):\n        return other == self.name\n\n    return (\n        isinstance(other, DatetimeTZDtype)\n        and self.unit == other.unit\n        and str(self.tz) == str(other.tz)\n    )",
                "def __setstate__(self, state):\n    # for pickle compat. __get_state__ is defined in the\n    # PandasExtensionDtype superclass and uses the public properties to\n    # pickle -> need to set the settable private ones here (see GH26067)\n    self._tz = state[\"tz\"]\n    self._unit = state[\"unit\"]",
                "def __new__(cls, freq=None):\n    \"\"\"\n    Parameters\n    ----------\n    freq : frequency\n    \"\"\"\n\n    if isinstance(freq, PeriodDtype):\n        return freq\n\n    elif freq is None:\n        # empty constructor for pickle compat\n        u = object.__new__(cls)\n        u._freq = None\n        return u\n\n    if not isinstance(freq, ABCDateOffset):\n        freq = cls._parse_dtype_strict(freq)\n\n    try:\n        return cls._cache[freq.freqstr]\n    except KeyError:\n        u = object.__new__(cls)\n        u._freq = freq\n        cls._cache[freq.freqstr] = u\n        return u",
                "@property\ndef freq(self):\n    \"\"\"\n    The frequency object of this PeriodDtype.\n    \"\"\"\n    return self._freq",
                "@classmethod\ndef _parse_dtype_strict(cls, freq):\n    if isinstance(freq, str):\n        if freq.startswith(\"period[\") or freq.startswith(\"Period[\"):\n            m = cls._match.search(freq)\n            if m is not None:\n                freq = m.group(\"freq\")\n        from pandas.tseries.frequencies import to_offset\n\n        freq = to_offset(freq)\n        if freq is not None:\n            return freq\n\n    raise ValueError(\"could not construct PeriodDtype\")",
                "@classmethod\ndef construct_from_string(cls, string):\n    \"\"\"\n    Strict construction from a string, raise a TypeError if not\n    possible\n    \"\"\"\n    if (\n        isinstance(string, str)\n        and (string.startswith(\"period[\") or string.startswith(\"Period[\"))\n        or isinstance(string, ABCDateOffset)\n    ):\n        # do not parse string like U as period[U]\n        # avoid tuple to be regarded as freq\n        try:\n            return cls(freq=string)\n        except ValueError:\n            pass\n    raise TypeError(\"could not construct PeriodDtype\")",
                "def __str__(self):\n    return self.name",
                "@property\ndef name(self):\n    return \"period[{freq}]\".format(freq=self.freq.freqstr)",
                "@property\ndef na_value(self):\n    return NaT",
                "def __hash__(self):\n    # make myself hashable\n    return hash(str(self))",
                "def __eq__(self, other):\n    if isinstance(other, str):\n        return other == self.name or other == self.name.title()\n\n    return isinstance(other, PeriodDtype) and self.freq == other.freq",
                "def __setstate__(self, state):\n    # for pickle compat. __get_state__ is defined in the\n    # PandasExtensionDtype superclass and uses the public properties to\n    # pickle -> need to set the settable private ones here (see GH26067)\n    self._freq = state[\"freq\"]",
                "@classmethod\ndef is_dtype(cls, dtype):\n    \"\"\"\n    Return a boolean if we if the passed type is an actual dtype that we\n    can match (via string or type)\n    \"\"\"\n\n    if isinstance(dtype, str):\n        # PeriodDtype can be instantiated from freq string like \"U\",\n        # but doesn't regard freq str like \"U\" as dtype.\n        if dtype.startswith(\"period[\") or dtype.startswith(\"Period[\"):\n            try:\n                if cls._parse_dtype_strict(dtype) is not None:\n                    return True\n                else:\n                    return False\n            except ValueError:\n                return False\n        else:\n            return False\n    return super().is_dtype(dtype)",
                "@classmethod\ndef construct_array_type(cls):\n    from pandas.core.arrays import PeriodArray\n\n    return PeriodArray",
                "def __new__(cls, subtype=None):\n    from pandas.core.dtypes.common import (\n        is_categorical_dtype,\n        is_string_dtype,\n        pandas_dtype,\n    )\n\n    if isinstance(subtype, IntervalDtype):\n        return subtype\n    elif subtype is None:\n        # we are called as an empty constructor\n        # generally for pickle compat\n        u = object.__new__(cls)\n        u._subtype = None\n        return u\n    elif isinstance(subtype, str) and subtype.lower() == \"interval\":\n        subtype = None\n    else:\n        if isinstance(subtype, str):\n            m = cls._match.search(subtype)\n            if m is not None:\n                subtype = m.group(\"subtype\")\n\n        try:\n            subtype = pandas_dtype(subtype)\n        except TypeError:\n            raise TypeError(\"could not construct IntervalDtype\")\n\n    if is_categorical_dtype(subtype) or is_string_dtype(subtype):\n        # GH 19016\n        msg = (\n            \"category, object, and string subtypes are not supported \"\n            \"for IntervalDtype\"\n        )\n        raise TypeError(msg)\n\n    try:\n        return cls._cache[str(subtype)]\n    except KeyError:\n        u = object.__new__(cls)\n        u._subtype = subtype\n        cls._cache[str(subtype)] = u\n        return u",
                "@property\ndef subtype(self):\n    \"\"\"\n    The dtype of the Interval bounds.\n    \"\"\"\n    return self._subtype",
                "@classmethod\ndef construct_array_type(cls):\n    \"\"\"\n    Return the array type associated with this dtype\n\n    Returns\n    -------\n    type\n    \"\"\"\n    from pandas.core.arrays import IntervalArray\n\n    return IntervalArray",
                "@classmethod\ndef construct_from_string(cls, string):\n    \"\"\"\n    attempt to construct this type from a string, raise a TypeError\n    if its not possible\n    \"\"\"\n    if not isinstance(string, str):\n        msg = \"a string needs to be passed, got type {typ}\"\n        raise TypeError(msg.format(typ=type(string)))\n\n    if string.lower() == \"interval\" or cls._match.search(string) is not None:\n        return cls(string)\n\n    msg = (\n        \"Incorrectly formatted string passed to constructor. \"\n        \"Valid formats include Interval or Interval[dtype] \"\n        \"where dtype is numeric, datetime, or timedelta\"\n    )\n    raise TypeError(msg)",
                "@property\ndef type(self):\n    return Interval",
                "def __str__(self):\n    if self.subtype is None:\n        return \"interval\"\n    return \"interval[{subtype}]\".format(subtype=self.subtype)",
                "def __hash__(self):\n    # make myself hashable\n    return hash(str(self))",
                "def __eq__(self, other):\n    if isinstance(other, str):\n        return other.lower() in (self.name.lower(), str(self).lower())\n    elif not isinstance(other, IntervalDtype):\n        return False\n    elif self.subtype is None or other.subtype is None:\n        # None should match any subtype\n        return True\n    else:\n        from pandas.core.dtypes.common import is_dtype_equal\n\n        return is_dtype_equal(self.subtype, other.subtype)",
                "def __setstate__(self, state):\n    # for pickle compat. __get_state__ is defined in the\n    # PandasExtensionDtype superclass and uses the public properties to\n    # pickle -> need to set the settable private ones here (see GH26067)\n    self._subtype = state[\"subtype\"]",
                "@classmethod\ndef is_dtype(cls, dtype):\n    \"\"\"\n    Return a boolean if we if the passed type is an actual dtype that we\n    can match (via string or type)\n    \"\"\"\n\n    if isinstance(dtype, str):\n        if dtype.lower().startswith(\"interval\"):\n            try:\n                if cls.construct_from_string(dtype) is not None:\n                    return True\n                else:\n                    return False\n            except (ValueError, TypeError):\n                return False\n        else:\n            return False\n    return super().is_dtype(dtype)"
            ],
            "inscope_function_signatures": [
                "register_extension_dtype(cls: Type[ExtensionDtype]) -> Type[ExtensionDtype]",
                "__init__(self)",
                "register(self, dtype: Type[ExtensionDtype]) -> None",
                "find(self, dtype: Union[Type[ExtensionDtype], str]) -> Optional[Type[ExtensionDtype]]",
                "__str__(self) -> str_type",
                "__repr__(self) -> str_type",
                "__hash__(self) -> int",
                "__getstate__(self) -> Dict[str_type, Any]",
                "reset_cache(cls) -> None",
                "__init__(self, categories=None, ordered: Union[Ordered, object]=ordered_sentinel)",
                "_from_fastpath(cls, categories=None, ordered: Optional[bool]=None) -> 'CategoricalDtype'",
                "_from_categorical_dtype(cls, dtype: 'CategoricalDtype', categories=None, ordered: Ordered=None) -> 'CategoricalDtype'",
                "_from_values_or_dtype(cls, values=None, categories=None, ordered: Optional[bool]=None, dtype: Optional['CategoricalDtype']=None) -> 'CategoricalDtype'",
                "_finalize(self, categories, ordered: Ordered, fastpath: bool=False) -> None",
                "__setstate__(self, state: Dict[str_type, Any]) -> None",
                "__hash__(self) -> int",
                "__eq__(self, other: Any) -> bool",
                "__repr__(self)",
                "_hash_categories(categories, ordered: Ordered=True) -> int",
                "construct_array_type(cls)",
                "validate_ordered(ordered: Ordered) -> None",
                "validate_categories(categories, fastpath: bool=False)",
                "update_dtype(self, dtype: Union[str_type, 'CategoricalDtype']) -> 'CategoricalDtype'",
                "categories(self)",
                "ordered(self) -> Ordered",
                "_is_boolean(self) -> bool",
                "__init__(self, unit='ns', tz=None)",
                "unit(self)",
                "tz(self)",
                "construct_array_type(cls)",
                "construct_from_string(cls, string)",
                "__str__(self)",
                "name(self)",
                "__hash__(self)",
                "__eq__(self, other)",
                "__setstate__(self, state)",
                "__new__(cls, freq=None)",
                "freq(self)",
                "_parse_dtype_strict(cls, freq)",
                "construct_from_string(cls, string)",
                "__str__(self)",
                "name(self)",
                "na_value(self)",
                "__hash__(self)",
                "__eq__(self, other)",
                "__setstate__(self, state)",
                "is_dtype(cls, dtype)",
                "construct_array_type(cls)",
                "__new__(cls, subtype=None)",
                "subtype(self)",
                "construct_array_type(cls)",
                "construct_from_string(cls, string)",
                "type(self)",
                "__str__(self)",
                "__hash__(self)",
                "__eq__(self, other)",
                "__setstate__(self, state)",
                "is_dtype(cls, dtype)"
            ],
            "variables_in_file": {
                "str_type": [
                    354,
                    138,
                    144,
                    19,
                    534,
                    153
                ],
                "str": [
                    129,
                    386,
                    772,
                    902,
                    905,
                    655,
                    19,
                    148,
                    1050,
                    923,
                    668,
                    548,
                    814,
                    1075,
                    1078,
                    1079,
                    318,
                    973,
                    1103,
                    83,
                    857,
                    219,
                    94,
                    738,
                    995,
                    998,
                    877,
                    758,
                    1017,
                    763,
                    1021,
                    766
                ],
                "ordered_sentinel": [
                    352,
                    225,
                    23,
                    344,
                    351
                ],
                "object": [
                    992,
                    833,
                    225,
                    843,
                    23,
                    1019
                ],
                "Type": [
                    26,
                    83,
                    84,
                    71
                ],
                "ExtensionDtype": [
                    98,
                    71,
                    172,
                    77,
                    83,
                    84,
                    115,
                    26
                ],
                "registry.register": [
                    48
                ],
                "registry": [
                    48,
                    112
                ],
                "cls": [
                    1021,
                    1054,
                    1055,
                    160,
                    928,
                    48,
                    49,
                    833,
                    838,
                    841,
                    843,
                    845,
                    1106,
                    859,
                    992,
                    741,
                    999,
                    744,
                    235,
                    884,
                    249,
                    1019,
                    1017
                ],
                "self.dtypes": [
                    80,
                    69,
                    103
                ],
                "self": [
                    387,
                    388,
                    771,
                    772,
                    902,
                    392,
                    1029,
                    906,
                    779,
                    780,
                    908,
                    142,
                    399,
                    402,
                    914,
                    148,
                    155,
                    411,
                    412,
                    671,
                    416,
                    420,
                    550,
                    423,
                    424,
                    551,
                    1069,
                    1071,
                    691,
                    564,
                    692,
                    1075,
                    1079,
                    570,
                    571,
                    699,
                    1082,
                    1088,
                    706,
                    69,
                    1094,
                    589,
                    80,
                    597,
                    853,
                    345,
                    348,
                    350,
                    351,
                    352,
                    606,
                    612,
                    229,
                    358,
                    103,
                    359,
                    360,
                    235,
                    236,
                    237,
                    365,
                    366,
                    753,
                    371,
                    758,
                    890,
                    763,
                    894,
                    767
                ],
                "issubclass": [
                    98,
                    77
                ],
                "dtype": [
                    923,
                    926,
                    928,
                    548,
                    551,
                    936,
                    555,
                    559,
                    562,
                    566,
                    567,
                    316,
                    318,
                    319,
                    320,
                    323,
                    331,
                    77,
                    1103,
                    80,
                    1104,
                    338,
                    1106,
                    340,
                    1114,
                    94,
                    95,
                    96,
                    97,
                    99,
                    105,
                    244,
                    246,
                    248
                ],
                "ValueError": [
                    323,
                    868,
                    325,
                    932,
                    681,
                    523,
                    556,
                    78,
                    526,
                    885,
                    1110
                ],
                "self.dtypes.append": [
                    80
                ],
                "Union": [
                    225,
                    83,
                    534
                ],
                "isinstance": [
                    386,
                    770,
                    517,
                    905,
                    908,
                    528,
                    664,
                    1050,
                    923,
                    668,
                    548,
                    435,
                    1078,
                    1080,
                    828,
                    318,
                    837,
                    1103,
                    857,
                    987,
                    94,
                    96,
                    738,
                    995,
                    998,
                    877,
                    879,
                    766
                ],
                "dtype_type": [
                    97,
                    98,
                    103,
                    105,
                    95
                ],
                "type": [
                    96,
                    97,
                    163,
                    812,
                    653,
                    217,
                    122,
                    443,
                    1052,
                    671
                ],
                "dtype_type.construct_from_string": [
                    105
                ],
                "TypeError": [
                    516,
                    1062,
                    106,
                    748,
                    1005,
                    750,
                    495,
                    1006,
                    689,
                    1014,
                    887,
                    1110,
                    1052
                ],
                "Optional": [
                    256,
                    233,
                    84,
                    257
                ],
                "Registry": [
                    112
                ],
                "kind": [
                    972,
                    813,
                    654,
                    218,
                    123
                ],
                "subdtype": [
                    128
                ],
                "num": [
                    656,
                    130,
                    816,
                    975
                ],
                "shape": [
                    131
                ],
                "tuple": [
                    448,
                    131,
                    435
                ],
                "itemsize": [
                    132
                ],
                "base": [
                    133,
                    974,
                    815,
                    657,
                    220
                ],
                "isbuiltin": [
                    134
                ],
                "isnative": [
                    135
                ],
                "_cache": [
                    136,
                    978,
                    819,
                    661,
                    222
                ],
                "self.name": [
                    387,
                    906,
                    142,
                    1079,
                    890,
                    767
                ],
                "NotImplementedError": [
                    151
                ],
                "int": [
                    362,
                    371,
                    427,
                    150
                ],
                "k": [
                    155
                ],
                "getattr": [
                    155
                ],
                "self._metadata": [
                    155
                ],
                "Dict": [
                    153,
                    354
                ],
                "Any": [
                    153,
                    354,
                    373
                ],
                "cls._cache": [
                    160,
                    841,
                    845,
                    1017,
                    1021
                ],
                "classmethod": [
                    708,
                    870,
                    231,
                    1031,
                    1096,
                    938,
                    239,
                    465,
                    721,
                    916,
                    1044,
                    855,
                    251,
                    157
                ],
                "PandasExtensionDtype": [
                    616,
                    784,
                    946,
                    172
                ],
                "name": [
                    216,
                    971
                ],
                "CategoricalDtypeType": [
                    217
                ],
                "np.dtype": [
                    657,
                    220,
                    974,
                    815
                ],
                "np": [
                    455,
                    457,
                    458,
                    974,
                    463,
                    815,
                    657,
                    220
                ],
                "_metadata": [
                    976,
                    817,
                    659,
                    221
                ],
                "Ordered": [
                    225,
                    228,
                    427,
                    592,
                    241,
                    342,
                    479
                ],
                "ordered": [
                    320,
                    352,
                    448,
                    344,
                    228,
                    229,
                    324,
                    345,
                    456,
                    236,
                    332,
                    494,
                    338,
                    243,
                    247,
                    248,
                    249,
                    351
                ],
                "cast": [
                    228,
                    559
                ],
                "self._finalize": [
                    236,
                    229
                ],
                "categories": [
                    514,
                    516,
                    517,
                    518,
                    522,
                    525,
                    528,
                    529,
                    531,
                    435,
                    439,
                    440,
                    442,
                    443,
                    320,
                    448,
                    451,
                    324,
                    453,
                    455,
                    332,
                    338,
                    347,
                    348,
                    350,
                    229,
                    236,
                    243,
                    245,
                    246,
                    249
                ],
                "bool": [
                    256,
                    609,
                    233,
                    498,
                    373,
                    342
                ],
                "cls.__new__": [
                    235
                ],
                "dtype.categories": [
                    562,
                    246
                ],
                "dtype.ordered": [
                    248
                ],
                "CategoricalDtype": [
                    320,
                    338,
                    582,
                    559
                ],
                "msg": [
                    515,
                    516,
                    1051,
                    1052,
                    1057,
                    674,
                    1062,
                    679,
                    552,
                    556,
                    573,
                    322,
                    323,
                    580,
                    600,
                    605,
                    739,
                    748,
                    1010,
                    1014
                ],
                "msg.format": [
                    323,
                    516,
                    679,
                    748,
                    1052
                ],
                "is_categorical": [
                    328
                ],
                "values": [
                    328,
                    331,
                    332
                ],
                "values.dtype._from_categorical_dtype": [
                    331
                ],
                "values.dtype": [
                    331,
                    332
                ],
                "self.validate_ordered": [
                    345
                ],
                "self.validate_categories": [
                    348
                ],
                "fastpath": [
                    520,
                    514,
                    348
                ],
                "self._categories": [
                    358,
                    589,
                    350
                ],
                "self._ordered": [
                    359,
                    424,
                    366,
                    399,
                    402,
                    371,
                    597,
                    570,
                    571,
                    606,
                    351
                ],
                "self._ordered_from_sentinel": [
                    352,
                    360,
                    597
                ],
                "state.pop": [
                    360,
                    358,
                    359
                ],
                "state": [
                    358,
                    359,
                    360,
                    1094,
                    779,
                    780,
                    914
                ],
                "self.categories": [
                    420,
                    612,
                    423,
                    392,
                    365,
                    402,
                    371,
                    564,
                    411,
                    412
                ],
                "self._hash_categories": [
                    371
                ],
                "other": [
                    386,
                    387,
                    388,
                    770,
                    390,
                    771,
                    392,
                    772,
                    905,
                    906,
                    908,
                    399,
                    402,
                    403,
                    411,
                    412,
                    416,
                    1078,
                    1079,
                    1080,
                    1082,
                    1088,
                    766,
                    767
                ],
                "hasattr": [
                    390
                ],
                "other.categories": [
                    392,
                    412,
                    403,
                    411
                ],
                "other._ordered": [
                    402,
                    399
                ],
                "self.categories.equals": [
                    402,
                    412
                ],
                "self.categories.dtype": [
                    411
                ],
                "other.categories.dtype": [
                    411
                ],
                "hash": [
                    416,
                    448,
                    902,
                    1075,
                    763
                ],
                "tpl": [
                    424,
                    419
                ],
                "data": [
                    424,
                    421,
                    423
                ],
                "self.categories._format_data": [
                    423
                ],
                "self.__class__.__name__": [
                    423
                ],
                "self.__class__": [
                    423
                ],
                "tpl.format": [
                    424
                ],
                "len": [
                    458,
                    435,
                    443,
                    462
                ],
                "list": [
                    439
                ],
                "cat_array": [
                    455,
                    457,
                    458,
                    461,
                    462,
                    440
                ],
                "hash_tuples": [
                    440
                ],
                "categories.dtype": [
                    442,
                    451
                ],
                "x": [
                    443
                ],
                "hashed": [
                    448,
                    449,
                    462,
                    463
                ],
                "is_datetime64tz_dtype": [
                    451
                ],
                "categories.astype": [
                    453
                ],
                "_NS_DTYPE": [
                    453
                ],
                "hash_array": [
                    455
                ],
                "np.asarray": [
                    455
                ],
                "np.vstack": [
                    457
                ],
                "np.arange": [
                    458
                ],
                "cat_array.dtype": [
                    458
                ],
                "_combine_hash_arrays": [
                    462
                ],
                "iter": [
                    462
                ],
                "np.bitwise_xor.reduce": [
                    463
                ],
                "np.bitwise_xor": [
                    463
                ],
                "staticmethod": [
                    497,
                    426,
                    478
                ],
                "Categorical": [
                    476
                ],
                "is_bool": [
                    494
                ],
                "is_list_like": [
                    514
                ],
                "ABCIndexClass": [
                    517
                ],
                "Index": [
                    518
                ],
                "categories.hasnans": [
                    522
                ],
                "categories.is_unique": [
                    525
                ],
                "ABCCategoricalIndex": [
                    528
                ],
                "categories.categories": [
                    529
                ],
                "self.is_dtype": [
                    551
                ],
                "format": [
                    552,
                    753,
                    894,
                    1071
                ],
                "new_categories": [
                    562,
                    563,
                    564,
                    582
                ],
                "new_ordered": [
                    568,
                    582,
                    570,
                    566
                ],
                "dtype._ordered": [
                    566
                ],
                "new_ordered_from_sentinel": [
                    571,
                    567
                ],
                "dtype._ordered_from_sentinel": [
                    567
                ],
                "warnings.warn": [
                    580,
                    605,
                    679
                ],
                "warnings": [
                    580,
                    605,
                    679
                ],
                "FutureWarning": [
                    580,
                    605,
                    679
                ],
                "property": [
                    608,
                    896,
                    1024,
                    584,
                    1064,
                    591,
                    848,
                    755,
                    694,
                    892,
                    701
                ],
                "is_bool_dtype": [
                    612
                ],
                "register_extension_dtype": [
                    945,
                    171,
                    783,
                    615
                ],
                "Timestamp": [
                    653
                ],
                "na_value": [
                    658
                ],
                "NaT": [
                    658,
                    898
                ],
                "_match": [
                    977,
                    818,
                    660
                ],
                "re.compile": [
                    977,
                    818,
                    660
                ],
                "re": [
                    977,
                    818,
                    660
                ],
                "unit": [
                    672,
                    691,
                    664,
                    665,
                    667,
                    668,
                    671
                ],
                "DatetimeTZDtype": [
                    664,
                    770
                ],
                "tz": [
                    673,
                    679,
                    683,
                    684,
                    685,
                    686,
                    687,
                    688,
                    692,
                    665,
                    668
                ],
                "unit.unit": [
                    665
                ],
                "unit.tz": [
                    665
                ],
                "result": [
                    672,
                    673,
                    671
                ],
                "construct_from_string": [
                    671
                ],
                "result.unit": [
                    672
                ],
                "result.tz": [
                    673
                ],
                "timezones.maybe_get_tz": [
                    684
                ],
                "timezones": [
                    684,
                    685
                ],
                "timezones.tz_standardize": [
                    685
                ],
                "pytz.UnknownTimeZoneError": [
                    687
                ],
                "pytz": [
                    687
                ],
                "self._unit": [
                    691,
                    780,
                    699
                ],
                "self._tz": [
                    706,
                    779,
                    692
                ],
                "DatetimeArray": [
                    719
                ],
                "string": [
                    738,
                    741,
                    748,
                    877,
                    878,
                    879,
                    884,
                    1050,
                    1052,
                    1054,
                    1055
                ],
                "match": [
                    741,
                    742,
                    743
                ],
                "cls._match.match": [
                    741
                ],
                "cls._match": [
                    859,
                    741,
                    1054,
                    999
                ],
                "d": [
                    744,
                    743
                ],
                "match.groupdict": [
                    743
                ],
                "Exception": [
                    745
                ],
                "self.unit": [
                    753,
                    771
                ],
                "self.tz": [
                    753,
                    772
                ],
                "other.unit": [
                    771
                ],
                "other.tz": [
                    772
                ],
                "Period": [
                    812
                ],
                "freq": [
                    864,
                    865,
                    866,
                    837,
                    838,
                    841,
                    844,
                    845,
                    861,
                    857,
                    858,
                    859,
                    828,
                    829,
                    831
                ],
                "PeriodDtype": [
                    908,
                    828
                ],
                "u": [
                    992,
                    833,
                    834,
                    835,
                    993,
                    994,
                    843,
                    844,
                    845,
                    846,
                    1019,
                    1020,
                    1021,
                    1022
                ],
                "object.__new__": [
                    992,
                    833,
                    843,
                    1019
                ],
                "u._freq": [
                    834,
                    844
                ],
                "ABCDateOffset": [
                    837,
                    879
                ],
                "cls._parse_dtype_strict": [
                    928,
                    838
                ],
                "freq.freqstr": [
                    841,
                    845
                ],
                "KeyError": [
                    842,
                    1018
                ],
                "self._freq": [
                    914,
                    853
                ],
                "freq.startswith": [
                    858
                ],
                "m": [
                    999,
                    1000,
                    1001,
                    859,
                    860,
                    861
                ],
                "cls._match.search": [
                    859,
                    1054,
                    999
                ],
                "m.group": [
                    1001,
                    861
                ],
                "to_offset": [
                    864
                ],
                "string.startswith": [
                    878
                ],
                "self.freq.freqstr": [
                    894
                ],
                "self.freq": [
                    908,
                    894
                ],
                "self.name.title": [
                    906
                ],
                "other.freq": [
                    908
                ],
                "dtype.startswith": [
                    926
                ],
                "is_dtype": [
                    936,
                    1114
                ],
                "super": [
                    936,
                    1114
                ],
                "PeriodArray": [
                    942
                ],
                "subtype": [
                    995,
                    996,
                    998,
                    999,
                    1001,
                    1004,
                    1020,
                    1008,
                    1021,
                    1017,
                    987,
                    988,
                    989
                ],
                "IntervalDtype": [
                    1080,
                    987
                ],
                "u._subtype": [
                    993,
                    1020
                ],
                "subtype.lower": [
                    995
                ],
                "pandas_dtype": [
                    1004
                ],
                "is_categorical_dtype": [
                    1008
                ],
                "is_string_dtype": [
                    1008
                ],
                "self._subtype": [
                    1029,
                    1094
                ],
                "IntervalArray": [
                    1042
                ],
                "string.lower": [
                    1054
                ],
                "Interval": [
                    1066
                ],
                "self.subtype": [
                    1088,
                    1082,
                    1069,
                    1071
                ],
                "other.lower": [
                    1079
                ],
                "self.name.lower": [
                    1079
                ],
                "lower": [
                    1079
                ],
                "other.subtype": [
                    1088,
                    1082
                ],
                "is_dtype_equal": [
                    1088
                ],
                "startswith": [
                    1104
                ],
                "dtype.lower": [
                    1104
                ],
                "cls.construct_from_string": [
                    1106
                ]
            },
            "filtered_variables_in_file": {
                "str_type": [
                    354,
                    138,
                    144,
                    19,
                    534,
                    153
                ],
                "ordered_sentinel": [
                    352,
                    225,
                    23,
                    344,
                    351
                ],
                "Type": [
                    26,
                    83,
                    84,
                    71
                ],
                "ExtensionDtype": [
                    98,
                    71,
                    172,
                    77,
                    83,
                    84,
                    115,
                    26
                ],
                "registry.register": [
                    48
                ],
                "registry": [
                    48,
                    112
                ],
                "cls": [
                    1021,
                    1054,
                    1055,
                    160,
                    928,
                    48,
                    49,
                    833,
                    838,
                    841,
                    843,
                    845,
                    1106,
                    859,
                    992,
                    741,
                    999,
                    744,
                    235,
                    884,
                    249,
                    1019,
                    1017
                ],
                "self.dtypes": [
                    80,
                    69,
                    103
                ],
                "self": [
                    387,
                    388,
                    771,
                    772,
                    902,
                    392,
                    1029,
                    906,
                    779,
                    780,
                    908,
                    142,
                    399,
                    402,
                    914,
                    148,
                    155,
                    411,
                    412,
                    671,
                    416,
                    420,
                    550,
                    423,
                    424,
                    551,
                    1069,
                    1071,
                    691,
                    564,
                    692,
                    1075,
                    1079,
                    570,
                    571,
                    699,
                    1082,
                    1088,
                    706,
                    69,
                    1094,
                    589,
                    80,
                    597,
                    853,
                    345,
                    348,
                    350,
                    351,
                    352,
                    606,
                    612,
                    229,
                    358,
                    103,
                    359,
                    360,
                    235,
                    236,
                    237,
                    365,
                    366,
                    753,
                    371,
                    758,
                    890,
                    763,
                    894,
                    767
                ],
                "dtype": [
                    923,
                    926,
                    928,
                    548,
                    551,
                    936,
                    555,
                    559,
                    562,
                    566,
                    567,
                    316,
                    318,
                    319,
                    320,
                    323,
                    331,
                    77,
                    1103,
                    80,
                    1104,
                    338,
                    1106,
                    340,
                    1114,
                    94,
                    95,
                    96,
                    97,
                    99,
                    105,
                    244,
                    246,
                    248
                ],
                "self.dtypes.append": [
                    80
                ],
                "Union": [
                    225,
                    83,
                    534
                ],
                "dtype_type": [
                    97,
                    98,
                    103,
                    105,
                    95
                ],
                "dtype_type.construct_from_string": [
                    105
                ],
                "Optional": [
                    256,
                    233,
                    84,
                    257
                ],
                "Registry": [
                    112
                ],
                "kind": [
                    972,
                    813,
                    654,
                    218,
                    123
                ],
                "subdtype": [
                    128
                ],
                "num": [
                    656,
                    130,
                    816,
                    975
                ],
                "shape": [
                    131
                ],
                "itemsize": [
                    132
                ],
                "base": [
                    133,
                    974,
                    815,
                    657,
                    220
                ],
                "isbuiltin": [
                    134
                ],
                "isnative": [
                    135
                ],
                "_cache": [
                    136,
                    978,
                    819,
                    661,
                    222
                ],
                "self.name": [
                    387,
                    906,
                    142,
                    1079,
                    890,
                    767
                ],
                "k": [
                    155
                ],
                "self._metadata": [
                    155
                ],
                "Dict": [
                    153,
                    354
                ],
                "Any": [
                    153,
                    354,
                    373
                ],
                "cls._cache": [
                    160,
                    841,
                    845,
                    1017,
                    1021
                ],
                "PandasExtensionDtype": [
                    616,
                    784,
                    946,
                    172
                ],
                "name": [
                    216,
                    971
                ],
                "CategoricalDtypeType": [
                    217
                ],
                "np.dtype": [
                    657,
                    220,
                    974,
                    815
                ],
                "np": [
                    455,
                    457,
                    458,
                    974,
                    463,
                    815,
                    657,
                    220
                ],
                "_metadata": [
                    976,
                    817,
                    659,
                    221
                ],
                "Ordered": [
                    225,
                    228,
                    427,
                    592,
                    241,
                    342,
                    479
                ],
                "ordered": [
                    320,
                    352,
                    448,
                    344,
                    228,
                    229,
                    324,
                    345,
                    456,
                    236,
                    332,
                    494,
                    338,
                    243,
                    247,
                    248,
                    249,
                    351
                ],
                "cast": [
                    228,
                    559
                ],
                "self._finalize": [
                    236,
                    229
                ],
                "categories": [
                    514,
                    516,
                    517,
                    518,
                    522,
                    525,
                    528,
                    529,
                    531,
                    435,
                    439,
                    440,
                    442,
                    443,
                    320,
                    448,
                    451,
                    324,
                    453,
                    455,
                    332,
                    338,
                    347,
                    348,
                    350,
                    229,
                    236,
                    243,
                    245,
                    246,
                    249
                ],
                "cls.__new__": [
                    235
                ],
                "dtype.categories": [
                    562,
                    246
                ],
                "dtype.ordered": [
                    248
                ],
                "CategoricalDtype": [
                    320,
                    338,
                    582,
                    559
                ],
                "msg": [
                    515,
                    516,
                    1051,
                    1052,
                    1057,
                    674,
                    1062,
                    679,
                    552,
                    556,
                    573,
                    322,
                    323,
                    580,
                    600,
                    605,
                    739,
                    748,
                    1010,
                    1014
                ],
                "msg.format": [
                    323,
                    516,
                    679,
                    748,
                    1052
                ],
                "is_categorical": [
                    328
                ],
                "values": [
                    328,
                    331,
                    332
                ],
                "values.dtype._from_categorical_dtype": [
                    331
                ],
                "values.dtype": [
                    331,
                    332
                ],
                "self.validate_ordered": [
                    345
                ],
                "self.validate_categories": [
                    348
                ],
                "fastpath": [
                    520,
                    514,
                    348
                ],
                "self._categories": [
                    358,
                    589,
                    350
                ],
                "self._ordered": [
                    359,
                    424,
                    366,
                    399,
                    402,
                    371,
                    597,
                    570,
                    571,
                    606,
                    351
                ],
                "self._ordered_from_sentinel": [
                    352,
                    360,
                    597
                ],
                "state.pop": [
                    360,
                    358,
                    359
                ],
                "state": [
                    358,
                    359,
                    360,
                    1094,
                    779,
                    780,
                    914
                ],
                "self.categories": [
                    420,
                    612,
                    423,
                    392,
                    365,
                    402,
                    371,
                    564,
                    411,
                    412
                ],
                "self._hash_categories": [
                    371
                ],
                "other": [
                    386,
                    387,
                    388,
                    770,
                    390,
                    771,
                    392,
                    772,
                    905,
                    906,
                    908,
                    399,
                    402,
                    403,
                    411,
                    412,
                    416,
                    1078,
                    1079,
                    1080,
                    1082,
                    1088,
                    766,
                    767
                ],
                "other.categories": [
                    392,
                    412,
                    403,
                    411
                ],
                "other._ordered": [
                    402,
                    399
                ],
                "self.categories.equals": [
                    402,
                    412
                ],
                "self.categories.dtype": [
                    411
                ],
                "other.categories.dtype": [
                    411
                ],
                "tpl": [
                    424,
                    419
                ],
                "data": [
                    424,
                    421,
                    423
                ],
                "self.categories._format_data": [
                    423
                ],
                "self.__class__.__name__": [
                    423
                ],
                "self.__class__": [
                    423
                ],
                "tpl.format": [
                    424
                ],
                "cat_array": [
                    455,
                    457,
                    458,
                    461,
                    462,
                    440
                ],
                "hash_tuples": [
                    440
                ],
                "categories.dtype": [
                    442,
                    451
                ],
                "x": [
                    443
                ],
                "hashed": [
                    448,
                    449,
                    462,
                    463
                ],
                "is_datetime64tz_dtype": [
                    451
                ],
                "categories.astype": [
                    453
                ],
                "_NS_DTYPE": [
                    453
                ],
                "hash_array": [
                    455
                ],
                "np.asarray": [
                    455
                ],
                "np.vstack": [
                    457
                ],
                "np.arange": [
                    458
                ],
                "cat_array.dtype": [
                    458
                ],
                "_combine_hash_arrays": [
                    462
                ],
                "np.bitwise_xor.reduce": [
                    463
                ],
                "np.bitwise_xor": [
                    463
                ],
                "Categorical": [
                    476
                ],
                "is_bool": [
                    494
                ],
                "is_list_like": [
                    514
                ],
                "ABCIndexClass": [
                    517
                ],
                "Index": [
                    518
                ],
                "categories.hasnans": [
                    522
                ],
                "categories.is_unique": [
                    525
                ],
                "ABCCategoricalIndex": [
                    528
                ],
                "categories.categories": [
                    529
                ],
                "self.is_dtype": [
                    551
                ],
                "new_categories": [
                    562,
                    563,
                    564,
                    582
                ],
                "new_ordered": [
                    568,
                    582,
                    570,
                    566
                ],
                "dtype._ordered": [
                    566
                ],
                "new_ordered_from_sentinel": [
                    571,
                    567
                ],
                "dtype._ordered_from_sentinel": [
                    567
                ],
                "warnings.warn": [
                    580,
                    605,
                    679
                ],
                "warnings": [
                    580,
                    605,
                    679
                ],
                "is_bool_dtype": [
                    612
                ],
                "register_extension_dtype": [
                    945,
                    171,
                    783,
                    615
                ],
                "Timestamp": [
                    653
                ],
                "na_value": [
                    658
                ],
                "NaT": [
                    658,
                    898
                ],
                "_match": [
                    977,
                    818,
                    660
                ],
                "re.compile": [
                    977,
                    818,
                    660
                ],
                "re": [
                    977,
                    818,
                    660
                ],
                "unit": [
                    672,
                    691,
                    664,
                    665,
                    667,
                    668,
                    671
                ],
                "DatetimeTZDtype": [
                    664,
                    770
                ],
                "tz": [
                    673,
                    679,
                    683,
                    684,
                    685,
                    686,
                    687,
                    688,
                    692,
                    665,
                    668
                ],
                "unit.unit": [
                    665
                ],
                "unit.tz": [
                    665
                ],
                "result": [
                    672,
                    673,
                    671
                ],
                "construct_from_string": [
                    671
                ],
                "result.unit": [
                    672
                ],
                "result.tz": [
                    673
                ],
                "timezones.maybe_get_tz": [
                    684
                ],
                "timezones": [
                    684,
                    685
                ],
                "timezones.tz_standardize": [
                    685
                ],
                "pytz.UnknownTimeZoneError": [
                    687
                ],
                "pytz": [
                    687
                ],
                "self._unit": [
                    691,
                    780,
                    699
                ],
                "self._tz": [
                    706,
                    779,
                    692
                ],
                "DatetimeArray": [
                    719
                ],
                "string": [
                    738,
                    741,
                    748,
                    877,
                    878,
                    879,
                    884,
                    1050,
                    1052,
                    1054,
                    1055
                ],
                "match": [
                    741,
                    742,
                    743
                ],
                "cls._match.match": [
                    741
                ],
                "cls._match": [
                    859,
                    741,
                    1054,
                    999
                ],
                "d": [
                    744,
                    743
                ],
                "match.groupdict": [
                    743
                ],
                "self.unit": [
                    753,
                    771
                ],
                "self.tz": [
                    753,
                    772
                ],
                "other.unit": [
                    771
                ],
                "other.tz": [
                    772
                ],
                "Period": [
                    812
                ],
                "freq": [
                    864,
                    865,
                    866,
                    837,
                    838,
                    841,
                    844,
                    845,
                    861,
                    857,
                    858,
                    859,
                    828,
                    829,
                    831
                ],
                "PeriodDtype": [
                    908,
                    828
                ],
                "u": [
                    992,
                    833,
                    834,
                    835,
                    993,
                    994,
                    843,
                    844,
                    845,
                    846,
                    1019,
                    1020,
                    1021,
                    1022
                ],
                "object.__new__": [
                    992,
                    833,
                    843,
                    1019
                ],
                "u._freq": [
                    834,
                    844
                ],
                "ABCDateOffset": [
                    837,
                    879
                ],
                "cls._parse_dtype_strict": [
                    928,
                    838
                ],
                "freq.freqstr": [
                    841,
                    845
                ],
                "self._freq": [
                    914,
                    853
                ],
                "freq.startswith": [
                    858
                ],
                "m": [
                    999,
                    1000,
                    1001,
                    859,
                    860,
                    861
                ],
                "cls._match.search": [
                    859,
                    1054,
                    999
                ],
                "m.group": [
                    1001,
                    861
                ],
                "to_offset": [
                    864
                ],
                "string.startswith": [
                    878
                ],
                "self.freq.freqstr": [
                    894
                ],
                "self.freq": [
                    908,
                    894
                ],
                "self.name.title": [
                    906
                ],
                "other.freq": [
                    908
                ],
                "dtype.startswith": [
                    926
                ],
                "is_dtype": [
                    936,
                    1114
                ],
                "PeriodArray": [
                    942
                ],
                "subtype": [
                    995,
                    996,
                    998,
                    999,
                    1001,
                    1004,
                    1020,
                    1008,
                    1021,
                    1017,
                    987,
                    988,
                    989
                ],
                "IntervalDtype": [
                    1080,
                    987
                ],
                "u._subtype": [
                    993,
                    1020
                ],
                "subtype.lower": [
                    995
                ],
                "pandas_dtype": [
                    1004
                ],
                "is_categorical_dtype": [
                    1008
                ],
                "is_string_dtype": [
                    1008
                ],
                "self._subtype": [
                    1029,
                    1094
                ],
                "IntervalArray": [
                    1042
                ],
                "string.lower": [
                    1054
                ],
                "Interval": [
                    1066
                ],
                "self.subtype": [
                    1088,
                    1082,
                    1069,
                    1071
                ],
                "other.lower": [
                    1079
                ],
                "self.name.lower": [
                    1079
                ],
                "lower": [
                    1079
                ],
                "other.subtype": [
                    1088,
                    1082
                ],
                "is_dtype_equal": [
                    1088
                ],
                "startswith": [
                    1104
                ],
                "dtype.lower": [
                    1104
                ],
                "cls.construct_from_string": [
                    1106
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_147/pandas/tests/dtypes/test_dtypes.py",
                "test_function": "test_construct_from_string_raises",
                "test_function_code": "    def test_construct_from_string_raises(self):\n        with pytest.raises(TypeError, match=\"notatz\"):\n            DatetimeTZDtype.construct_from_string(\"datetime64[ns, notatz]\")\n\n        msg = \"^Could not construct DatetimeTZDtype\"\n        with pytest.raises(TypeError, match=msg):\n            # list instead of string\n            DatetimeTZDtype.construct_from_string([\"datetime64[ns, notatz]\"])\n\n        with pytest.raises(TypeError, match=msg):\n            # non-nano unit\n            DatetimeTZDtype.construct_from_string(\"datetime64[ps, UTC]\")\n\n        with pytest.raises(TypeError, match=msg):\n            # dateutil str that returns None from gettz\n            DatetimeTZDtype.construct_from_string(\"datetime64[ns, dateutil/invalid]\")",
                "test_error": "Failed: DID NOT RAISE <class 'TypeError'>",
                "full_test_error": "self = <pandas.tests.dtypes.test_dtypes.TestDatetimeTZDtype object at 0x11a6a9eb0>\n\n    def test_construct_from_string_raises(self):\n        with pytest.raises(TypeError, match=\"notatz\"):\n            DatetimeTZDtype.construct_from_string(\"datetime64[ns, notatz]\")\n    \n        msg = \"^Could not construct DatetimeTZDtype\"\n        with pytest.raises(TypeError, match=msg):\n            # list instead of string\n            DatetimeTZDtype.construct_from_string([\"datetime64[ns, notatz]\"])\n    \n        with pytest.raises(TypeError, match=msg):\n            # non-nano unit\n            DatetimeTZDtype.construct_from_string(\"datetime64[ps, UTC]\")\n    \n        with pytest.raises(TypeError, match=msg):\n            # dateutil str that returns None from gettz\n>           DatetimeTZDtype.construct_from_string(\"datetime64[ns, dateutil/invalid]\")\nE           Failed: DID NOT RAISE <class 'TypeError'>\n\npandas/tests/dtypes/test_dtypes.py:262: Failed",
                "traceback": null,
                "test_error_location": null,
                "test_function_decorators": []
            }
        ]
    }
}