{
    "1.1.1": "def corr(self, other=None, pairwise=None, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other)\n\n    def _get_corr(a, b):\n        a = a.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n        b = b.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise)\n    )\n",
    "1.1.2": null,
    "1.2.1": "class _Rolling_and_Expanding(_Rolling)",
    "1.2.2": null,
    "1.2.3": [
        "std(self, ddof=1, *args, **kwargs)",
        "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
        "_get_corr(a, b)"
    ],
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_59/pandas/core/window/rolling.py",
    "1.3.2": [
        "_get_window(self, other=None, win_type: Optional[str]=None) -> int",
        "_get_window(self, other=None, win_type: Optional[Union[str, Tuple]]=None) -> np.ndarray",
        "std(self, ddof=1, *args, **kwargs)",
        "std(self, ddof=1, *args, **kwargs)",
        "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
        "std(self, ddof=1, *args, **kwargs)",
        "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
        "_get_corr(a, b)"
    ],
    "1.4.1": [
        "    def test_corr_freq_memory_error(self):\n        # GH 31789\n        s = Series(range(5), index=date_range(\"2020\", periods=5))\n        result = s.rolling(\"12H\").corr(s)\n        expected = Series([np.nan] * 5, index=date_range(\"2020\", periods=5))\n        tm.assert_series_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_59/pandas/tests/window/test_pairwise.py"
    ],
    "2.1.1": [
        [
            "E       MemoryError: Unable to allocate 314. TiB for an array with shape (43200000000000,) and data type int64"
        ]
    ],
    "2.1.2": [
        [
            "self = <pandas.tests.window.test_pairwise.TestPairwise object at 0x1223a0a30>\n\n    def test_corr_freq_memory_error(self):\n        # GH 31789\n        s = Series(range(5), index=date_range(\"2020\", periods=5))\n>       result = s.rolling(\"12H\").corr(s)\n\npandas/tests/window/test_pairwise.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/window/rolling.py:2086: in corr\n    return super().corr(other=other, pairwise=pairwise, **kwargs)\npandas/core/window/rolling.py:1797: in corr\n    return _flex_binary_moment(\npandas/core/window/common.py:108: in _flex_binary_moment\n    return f(X, Y)\npandas/core/window/rolling.py:1795: in _get_corr\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\npandas/core/window/rolling.py:2081: in cov\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)\npandas/core/window/rolling.py:1665: in cov\n    return _flex_binary_moment(\npandas/core/window/common.py:108: in _flex_binary_moment\n    return f(X, Y)\npandas/core/window/rolling.py:1658: in _get_cov\n    (X + Y)\npandas/core/window/rolling.py:1969: in count\n    return super().count()\npandas/core/window/rolling.py:1188: in count\n    result = self._constructor(\npandas/core/window/rolling.py:1995: in sum\n    return super().sum(*args, **kwargs)\npandas/core/window/rolling.py:1332: in sum\n    return self._apply(\npandas/core/window/rolling.py:507: in _apply\n    result = calc(values)\npandas/core/window/rolling.py:489: in calc\n    start, end = window_indexer.get_window_bounds(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.window.indexers.FixedWindowIndexer object at 0x1223e6f70>\nnum_values = 5, min_periods = 0, center = False, closed = None\n\n    @Appender(get_window_bounds_doc)\n    def get_window_bounds(\n        self,\n        num_values: int = 0,\n        min_periods: Optional[int] = None,\n        center: Optional[bool] = None,\n        closed: Optional[str] = None,\n    ) -> Tuple[np.ndarray, np.ndarray]:\n    \n>       start_s = np.zeros(self.window_size, dtype=\"int64\")",
            "\npandas/core/window/indexers.py:76: MemoryError"
        ]
    ],
    "2.1.3": [
        [
            {
                "other": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                "self._selected_obj": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                "self": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                "self._shallow_copy": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                "self._get_window": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                "self.min_periods": "1",
                "self.center": "False",
                "kwargs": "{}",
                "other._selected_obj": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64"
            },
            {
                "other": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                "window": "43200000000000",
                "_get_corr": "<function _Rolling_and_Expanding.corr.<locals>._get_corr at 0x1138858b0>"
            }
        ]
    ],
    "2.1.4": [
        [
            {
                "other": "Series",
                "self._selected_obj": "Series",
                "self": "Rolling",
                "self._shallow_copy": "method",
                "self._get_window": "method",
                "self.min_periods": "int",
                "self.center": "bool",
                "kwargs": "dict",
                "other._selected_obj": "Series"
            },
            {
                "other": "Rolling",
                "window": "int",
                "_get_corr": "function"
            }
        ]
    ],
    "2.1.5": [
        [
            {
                "other": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                "self._selected_obj": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                "self": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                "self._shallow_copy": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                "self.is_freq_type": "True",
                "self._get_window": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                "self.win_freq": "'12H'",
                "self.min_periods": "1",
                "self.center": "False",
                "kwargs": "{}",
                "other._selected_obj": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64"
            },
            {
                "other": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                "window": "'12H'",
                "_get_corr": "<function _Rolling_and_Expanding.corr.<locals>._get_corr at 0x11e990af0>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "other": "Series",
                "self._selected_obj": "Series",
                "self": "Rolling",
                "self._shallow_copy": "method",
                "self.is_freq_type": "bool",
                "self._get_window": "method",
                "self.win_freq": "str",
                "self.min_periods": "int",
                "self.center": "bool",
                "kwargs": "dict",
                "other._selected_obj": "Series"
            },
            {
                "other": "Rolling",
                "window": "str",
                "_get_corr": "function"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}