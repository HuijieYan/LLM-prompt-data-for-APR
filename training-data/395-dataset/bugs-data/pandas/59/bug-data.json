{
    "pandas:59": {
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_59/pandas/core/window/rolling.py": {
            "buggy_functions": [
                {
                    "function_name": "corr",
                    "function_code": "def corr(self, other=None, pairwise=None, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other)\n\n    def _get_corr(a, b):\n        a = a.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n        b = b.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise)\n    )\n",
                    "decorators": [],
                    "docstring": null,
                    "start_line": 1779,
                    "end_line": 1799,
                    "variables": {
                        "other": [
                            1798,
                            1780,
                            1781,
                            1784,
                            1785
                        ],
                        "self._selected_obj": [
                            1781,
                            1798
                        ],
                        "self": [
                            1792,
                            1798,
                            1781,
                            1784,
                            1785,
                            1789
                        ],
                        "pairwise": [
                            1798,
                            1783
                        ],
                        "self._shallow_copy": [
                            1784
                        ],
                        "window": [
                            1792,
                            1785,
                            1789
                        ],
                        "self._get_window": [
                            1785
                        ],
                        "a": [
                            1795,
                            1788
                        ],
                        "a.rolling": [
                            1788
                        ],
                        "self.min_periods": [
                            1792,
                            1789
                        ],
                        "self.center": [
                            1792,
                            1789
                        ],
                        "b": [
                            1795,
                            1791
                        ],
                        "b.rolling": [
                            1791
                        ],
                        "a.cov": [
                            1795
                        ],
                        "kwargs": [
                            1795
                        ],
                        "a.std": [
                            1795
                        ],
                        "b.std": [
                            1795
                        ],
                        "_flex_binary_moment": [
                            1797
                        ],
                        "other._selected_obj": [
                            1798
                        ],
                        "_get_corr": [
                            1798
                        ],
                        "bool": [
                            1798
                        ]
                    },
                    "filtered_variables": {
                        "other": [
                            1798,
                            1780,
                            1781,
                            1784,
                            1785
                        ],
                        "self._selected_obj": [
                            1781,
                            1798
                        ],
                        "self": [
                            1792,
                            1798,
                            1781,
                            1784,
                            1785,
                            1789
                        ],
                        "pairwise": [
                            1798,
                            1783
                        ],
                        "self._shallow_copy": [
                            1784
                        ],
                        "window": [
                            1792,
                            1785,
                            1789
                        ],
                        "self._get_window": [
                            1785
                        ],
                        "a": [
                            1795,
                            1788
                        ],
                        "a.rolling": [
                            1788
                        ],
                        "self.min_periods": [
                            1792,
                            1789
                        ],
                        "self.center": [
                            1792,
                            1789
                        ],
                        "b": [
                            1795,
                            1791
                        ],
                        "b.rolling": [
                            1791
                        ],
                        "a.cov": [
                            1795
                        ],
                        "kwargs": [
                            1795
                        ],
                        "a.std": [
                            1795
                        ],
                        "b.std": [
                            1795
                        ],
                        "_flex_binary_moment": [
                            1797
                        ],
                        "other._selected_obj": [
                            1798
                        ],
                        "_get_corr": [
                            1798
                        ]
                    },
                    "diff_line_number": 1785,
                    "class_data": {
                        "signature": "class _Rolling_and_Expanding(_Rolling)",
                        "docstring": null,
                        "constructor_docstring": null,
                        "functions": [
                            "def count(self):\n    blocks, obj = self._create_blocks()\n    results = []\n    for b in blocks:\n        result = b.notna().astype(int)\n        result = self._constructor(result, window=self._get_window(), min_periods=self.min_periods or 0, center=self.center, axis=self.axis, closed=self.closed).sum()\n        results.append(result)\n    return self._wrap_results(results, blocks, obj)",
                            "def apply(self, func, raw: bool=False, engine: str='cython', engine_kwargs: Optional[Dict]=None, args: Optional[Tuple]=None, kwargs: Optional[Dict]=None):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop('_level', None)\n    kwargs.pop('floor', None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if not is_bool(raw):\n        raise ValueError('raw parameter must be `True` or `False`')\n    if engine == 'cython':\n        if engine_kwargs is not None:\n            raise ValueError('cython engine does not accept engine_kwargs')\n        apply_func = self._generate_cython_apply_func(args, kwargs, raw, offset, func)\n    elif engine == 'numba':\n        if raw is False:\n            raise ValueError('raw must be `True` when using the numba engine')\n        if func in self._numba_func_cache:\n            apply_func = self._numba_func_cache[func]\n        else:\n            apply_func = generate_numba_apply_func(args, kwargs, func, engine_kwargs)\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n    return self._apply(apply_func, center=False, floor=0, name=func, use_numba_cache=engine == 'numba', raw=raw)",
                            "def _generate_cython_apply_func(self, args, kwargs, raw, offset, func):\n    from pandas import Series\n    window_func = partial(self._get_cython_func_type('roll_generic'), args=args, kwargs=kwargs, raw=raw, offset=offset, func=func)\n\n    def apply_func(values, begin, end, min_periods, raw=raw):\n        if not raw:\n            values = Series(values, index=self.obj.index)\n        return window_func(values, begin, end, min_periods)\n    return apply_func",
                            "def sum(self, *args, **kwargs):\n    nv.validate_window_func('sum', args, kwargs)\n    window_func = self._get_cython_func_type('roll_sum')\n    kwargs.pop('floor', None)\n    return self._apply(window_func, center=self.center, floor=0, name='sum', **kwargs)",
                            "def max(self, *args, **kwargs):\n    nv.validate_window_func('max', args, kwargs)\n    window_func = self._get_cython_func_type('roll_max')\n    return self._apply(window_func, center=self.center, name='max', **kwargs)",
                            "def min(self, *args, **kwargs):\n    nv.validate_window_func('min', args, kwargs)\n    window_func = self._get_cython_func_type('roll_min')\n    return self._apply(window_func, center=self.center, name='min', **kwargs)",
                            "def mean(self, *args, **kwargs):\n    nv.validate_window_func('mean', args, kwargs)\n    window_func = self._get_cython_func_type('roll_mean')\n    return self._apply(window_func, center=self.center, name='mean', **kwargs)",
                            "def median(self, **kwargs):\n    window_func = self._get_roll_func('roll_median_c')\n    window_func = partial(window_func, win=self._get_window())\n    return self._apply(window_func, center=self.center, name='median', **kwargs)",
                            "def std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func('std', args, kwargs)\n    kwargs.pop('require_min_periods', None)\n    window_func = self._get_cython_func_type('roll_var')\n\n    def zsqrt_func(values, begin, end, min_periods):\n        return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))\n    return self._apply(zsqrt_func, center=self.center, require_min_periods=1, name='std', ddof=ddof, **kwargs)",
                            "def var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func('var', args, kwargs)\n    kwargs.pop('require_min_periods', None)\n    window_func = partial(self._get_cython_func_type('roll_var'), ddof=ddof)\n    return self._apply(window_func, center=self.center, require_min_periods=1, name='var', ddof=ddof, **kwargs)",
                            "def skew(self, **kwargs):\n    window_func = self._get_cython_func_type('roll_skew')\n    kwargs.pop('require_min_periods', None)\n    return self._apply(window_func, center=self.center, require_min_periods=3, name='skew', **kwargs)",
                            "def kurt(self, **kwargs):\n    window_func = self._get_cython_func_type('roll_kurt')\n    kwargs.pop('require_min_periods', None)\n    return self._apply(window_func, center=self.center, require_min_periods=4, name='kurt', **kwargs)",
                            "def quantile(self, quantile, interpolation='linear', **kwargs):\n    if quantile == 1.0:\n        window_func = self._get_cython_func_type('roll_max')\n    elif quantile == 0.0:\n        window_func = self._get_cython_func_type('roll_min')\n    else:\n        window_func = partial(self._get_roll_func('roll_quantile'), win=self._get_window(), quantile=quantile, interpolation=interpolation)\n    kwargs['quantile'] = quantile\n    kwargs['interpolation'] = interpolation\n    return self._apply(window_func, center=self.center, name='quantile', **kwargs)",
                            "def cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    if self.is_freq_type:\n        window = self.win_freq\n    else:\n        window = self._get_window(other)\n\n    def _get_cov(X, Y):\n        X = X.astype('float64')\n        Y = Y.astype('float64')\n        mean = lambda x: x.rolling(window, self.min_periods, center=self.center).mean(**kwargs)\n        count = (X + Y).rolling(window=window, min_periods=0, center=self.center).count(**kwargs)\n        bias_adj = count / (count - ddof)\n        return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj\n    return _flex_binary_moment(self._selected_obj, other._selected_obj, _get_cov, pairwise=bool(pairwise))",
                            "def corr(self, other=None, pairwise=None, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other)\n\n    def _get_corr(a, b):\n        a = a.rolling(window=window, min_periods=self.min_periods, center=self.center)\n        b = b.rolling(window=window, min_periods=self.min_periods, center=self.center)\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n    return _flex_binary_moment(self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise))",
                            "def apply_func(values, begin, end, min_periods, raw=raw):\n    if not raw:\n        values = Series(values, index=self.obj.index)\n    return window_func(values, begin, end, min_periods)",
                            "def zsqrt_func(values, begin, end, min_periods):\n    return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))",
                            "def _get_cov(X, Y):\n    X = X.astype('float64')\n    Y = Y.astype('float64')\n    mean = lambda x: x.rolling(window, self.min_periods, center=self.center).mean(**kwargs)\n    count = (X + Y).rolling(window=window, min_periods=0, center=self.center).count(**kwargs)\n    bias_adj = count / (count - ddof)\n    return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj",
                            "def _get_corr(a, b):\n    a = a.rolling(window=window, min_periods=self.min_periods, center=self.center)\n    b = b.rolling(window=window, min_periods=self.min_periods, center=self.center)\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))"
                        ],
                        "constructor_variables": [],
                        "class_level_variables": [],
                        "class_decorators": [],
                        "function_signatures": [
                            "count(self)",
                            "apply(self, func, raw: bool=False, engine: str='cython', engine_kwargs: Optional[Dict]=None, args: Optional[Tuple]=None, kwargs: Optional[Dict]=None)",
                            "_generate_cython_apply_func(self, args, kwargs, raw, offset, func)",
                            "sum(self, *args, **kwargs)",
                            "max(self, *args, **kwargs)",
                            "min(self, *args, **kwargs)",
                            "mean(self, *args, **kwargs)",
                            "median(self, **kwargs)",
                            "std(self, ddof=1, *args, **kwargs)",
                            "var(self, ddof=1, *args, **kwargs)",
                            "skew(self, **kwargs)",
                            "kurt(self, **kwargs)",
                            "quantile(self, quantile, interpolation='linear', **kwargs)",
                            "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
                            "corr(self, other=None, pairwise=None, **kwargs)",
                            "apply_func(values, begin, end, min_periods, raw=raw)",
                            "zsqrt_func(values, begin, end, min_periods)",
                            "_get_cov(X, Y)",
                            "_get_corr(a, b)"
                        ]
                    },
                    "variable_values": [
                        [
                            {
                                "other": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": "43200000000000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": "<function _Rolling_and_Expanding.corr.<locals>._get_corr at 0x1138858b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": "43200000000000",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "a": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": "<bound method Rolling.cov of Rolling [window=43200000000000,min_periods=1,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": "<bound method Rolling.std of Rolling [window=43200000000000,min_periods=1,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": "<bound method Rolling.std of Rolling [window=43200000000000,min_periods=1,center=False,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": "<function _Rolling_and_Expanding.corr.<locals>._get_corr at 0x1138858b0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ],
                    "angelic_variable_values": [
                        [
                            {
                                "other": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_freq_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.win_freq": {
                                    "variable_value": "'12H'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": "'12H'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.is_freq_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.win_freq": {
                                    "variable_value": "'12H'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": "<function _Rolling_and_Expanding.corr.<locals>._get_corr at 0x11e990af0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ],
                        [
                            {
                                "other": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.is_freq_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.win_freq": {
                                    "variable_value": "'12H'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "a": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                }
                            },
                            {
                                "other": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "self._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "self": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "pairwise": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self._shallow_copy": {
                                    "variable_value": "<bound method ShallowMixin._shallow_copy of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "window": {
                                    "variable_value": "'12H'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "self.is_freq_type": {
                                    "variable_value": "True",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "self._get_window": {
                                    "variable_value": "<bound method _Window._get_window of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "self.win_freq": {
                                    "variable_value": "'12H'",
                                    "variable_type": "str",
                                    "variable_shape": "3"
                                },
                                "a": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "a.rolling": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "self.min_periods": {
                                    "variable_value": "1",
                                    "variable_type": "int",
                                    "variable_shape": null
                                },
                                "self.center": {
                                    "variable_value": "False",
                                    "variable_type": "bool",
                                    "variable_shape": null
                                },
                                "b": {
                                    "variable_value": "Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]",
                                    "variable_type": "Rolling",
                                    "variable_shape": null
                                },
                                "b.rolling": {
                                    "variable_value": "None",
                                    "variable_type": "NoneType",
                                    "variable_shape": null
                                },
                                "a.cov": {
                                    "variable_value": "<bound method Rolling.cov of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "kwargs": {
                                    "variable_value": "{}",
                                    "variable_type": "dict",
                                    "variable_shape": "0"
                                },
                                "a.std": {
                                    "variable_value": "<bound method Rolling.std of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "b.std": {
                                    "variable_value": "<bound method Rolling.std of Rolling [window=43200000000000,min_periods=1,center=False,win_type=freq,axis=0]>",
                                    "variable_type": "method",
                                    "variable_shape": null
                                },
                                "_flex_binary_moment": {
                                    "variable_value": null,
                                    "variable_type": "None",
                                    "variable_shape": null
                                },
                                "other._selected_obj": {
                                    "variable_value": "2020-01-01    0\n2020-01-02    1\n2020-01-03    2\n2020-01-04    3\n2020-01-05    4\nFreq: D, dtype: int64",
                                    "variable_type": "Series",
                                    "variable_shape": "(5,)"
                                },
                                "_get_corr": {
                                    "variable_value": "<function _Rolling_and_Expanding.corr.<locals>._get_corr at 0x11e990af0>",
                                    "variable_type": "function",
                                    "variable_shape": null
                                }
                            }
                        ]
                    ]
                }
            ],
            "inscope_functions": [
                "def __init__(\n    self,\n    obj,\n    window=None,\n    min_periods: Optional[int] = None,\n    center: Optional[bool] = False,\n    win_type: Optional[str] = None,\n    axis: Axis = 0,\n    on: Optional[Union[str, Index]] = None,\n    closed: Optional[str] = None,\n    **kwargs,\n):\n\n    self.__dict__.update(kwargs)\n    self.obj = obj\n    self.on = on\n    self.closed = closed\n    self.window = window\n    self.min_periods = min_periods\n    self.center = center\n    self.win_type = win_type\n    self.win_freq = None\n    self.axis = obj._get_axis_number(axis) if axis is not None else None\n    self.validate()\n    self._numba_func_cache: Dict[Optional[str], Callable] = dict()",
                "@property\ndef _constructor(self):\n    return Window",
                "@property\ndef is_datetimelike(self) -> Optional[bool]:\n    return None",
                "@property\ndef _on(self):\n    return None",
                "@property\ndef is_freq_type(self) -> bool:\n    return self.win_type == \"freq\"",
                "def validate(self) -> None:\n    if self.center is not None and not is_bool(self.center):\n        raise ValueError(\"center must be a boolean\")\n    if self.min_periods is not None and not is_integer(self.min_periods):\n        raise ValueError(\"min_periods must be an integer\")\n    if self.closed is not None and self.closed not in [\n        \"right\",\n        \"both\",\n        \"left\",\n        \"neither\",\n    ]:\n        raise ValueError(\"closed must be 'right', 'left', 'both' or 'neither'\")\n    if not isinstance(self.obj, (ABCSeries, ABCDataFrame)):\n        raise TypeError(f\"invalid type: {type(self)}\")\n    if isinstance(self.window, BaseIndexer):\n        self._validate_get_window_bounds_signature(self.window)",
                "@staticmethod\ndef _validate_get_window_bounds_signature(window: BaseIndexer) -> None:\n    \"\"\"\n    Validate that the passed BaseIndexer subclass has\n    a get_window_bounds with the correct signature.\n    \"\"\"\n    get_window_bounds_signature = inspect.signature(\n        window.get_window_bounds\n    ).parameters.keys()\n    expected_signature = inspect.signature(\n        BaseIndexer().get_window_bounds\n    ).parameters.keys()\n    if get_window_bounds_signature != expected_signature:\n        raise ValueError(\n            f\"{type(window).__name__} does not implement the correct signature for \"\n            f\"get_window_bounds\"\n        )",
                "def _create_blocks(self):\n    \"\"\"\n    Split data into blocks & return conformed data.\n    \"\"\"\n\n    obj = self._selected_obj\n\n    # filter out the on from the object\n    if self.on is not None and not isinstance(self.on, Index):\n        if obj.ndim == 2:\n            obj = obj.reindex(columns=obj.columns.difference([self.on]), copy=False)\n    blocks = obj._to_dict_of_blocks(copy=False).values()\n\n    return blocks, obj",
                "def _gotitem(self, key, ndim, subset=None):\n    \"\"\"\n    Sub-classes to define. Return a sliced object.\n\n    Parameters\n    ----------\n    key : str / list of selections\n    ndim : 1,2\n        requested ndim of result\n    subset : object, default None\n        subset to act on\n    \"\"\"\n\n    # create a new object to prevent aliasing\n    if subset is None:\n        subset = self.obj\n    self = self._shallow_copy(subset)\n    self._reset_cache()\n    if subset.ndim == 2:\n        if is_scalar(key) and key in subset or is_list_like(key):\n            self._selection = key\n    return self",
                "def __getattr__(self, attr: str):\n    if attr in self._internal_names_set:\n        return object.__getattribute__(self, attr)\n    if attr in self.obj:\n        return self[attr]\n\n    raise AttributeError(\n        f\"'{type(self).__name__}' object has no attribute '{attr}'\"\n    )",
                "def _dir_additions(self):\n    return self.obj._dir_additions()",
                "def _get_win_type(self, kwargs: Dict):\n    \"\"\"\n    Exists for compatibility, overriden by subclass Window.\n\n    Parameters\n    ----------\n    kwargs : dict\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    None\n    \"\"\"\n    return None",
                "def _get_window(self, other=None, win_type: Optional[str] = None) -> int:\n    \"\"\"\n    Return window length.\n\n    Parameters\n    ----------\n    other :\n        ignored, exists for compatibility\n    win_type :\n        ignored, exists for compatibility\n\n    Returns\n    -------\n    window : int\n    \"\"\"\n    if isinstance(self.window, BaseIndexer):\n        return self.min_periods or 0\n    return self.window",
                "@property\ndef _window_type(self) -> str:\n    return type(self).__name__",
                "def __repr__(self) -> str:\n    \"\"\"\n    Provide a nice str repr of our rolling object.\n    \"\"\"\n\n    attrs_list = (\n        f\"{attr_name}={getattr(self, attr_name)}\"\n        for attr_name in self._attributes\n        if getattr(self, attr_name, None) is not None\n    )\n    attrs = \",\".join(attrs_list)\n    return f\"{self._window_type} [{attrs}]\"",
                "def __iter__(self):\n    url = \"https://github.com/pandas-dev/pandas/issues/11704\"\n    raise NotImplementedError(f\"See issue #11704 {url}\")",
                "def _prep_values(self, values: Optional[np.ndarray] = None) -> np.ndarray:\n    \"\"\"Convert input to numpy arrays for Cython routines\"\"\"\n    if values is None:\n        values = getattr(self._selected_obj, \"values\", self._selected_obj)\n\n    # GH #12373 : rolling functions error on float32 data\n    # make sure the data is coerced to float64\n    if is_float_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif is_integer_dtype(values.dtype):\n        values = ensure_float64(values)\n    elif needs_i8_conversion(values.dtype):\n        raise NotImplementedError(\n            f\"ops for {self._window_type} for this \"\n            f\"dtype {values.dtype} are not implemented\"\n        )\n    else:\n        try:\n            values = ensure_float64(values)\n        except (ValueError, TypeError):\n            raise TypeError(f\"cannot handle this type -> {values.dtype}\")\n\n    # Convert inf to nan for C funcs\n    inf = np.isinf(values)\n    if inf.any():\n        values = np.where(inf, np.nan, values)\n\n    return values",
                "def _wrap_result(self, result, block=None, obj=None):\n    \"\"\"\n    Wrap a single result.\n    \"\"\"\n\n    if obj is None:\n        obj = self._selected_obj\n    index = obj.index\n\n    if isinstance(result, np.ndarray):\n\n        if result.ndim == 1:\n            from pandas import Series\n\n            return Series(result, index, name=obj.name)\n\n        return type(obj)(result, index=index, columns=block.columns)\n    return result",
                "def _wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries:\n    \"\"\"\n    Wrap the results.\n\n    Parameters\n    ----------\n    results : list of ndarrays\n    blocks : list of blocks\n    obj : conformed data (may be resampled)\n    exclude: list of columns to exclude, default to None\n    \"\"\"\n\n    from pandas import Series, concat\n\n    final = []\n    for result, block in zip(results, blocks):\n\n        result = self._wrap_result(result, block=block, obj=obj)\n        if result.ndim == 1:\n            return result\n        final.append(result)\n\n    # if we have an 'on' column\n    # we want to put it back into the results\n    # in the same location\n    columns = self._selected_obj.columns\n    if self.on is not None and not self._on.equals(obj.index):\n\n        name = self._on.name\n        final.append(Series(self._on, index=obj.index, name=name))\n\n        if self._selection is not None:\n\n            selection = ensure_index(self._selection)\n\n            # need to reorder to include original location of\n            # the on column (if its not already there)\n            if name not in selection:\n                columns = self.obj.columns\n                indexer = columns.get_indexer(selection.tolist() + [name])\n                columns = columns.take(sorted(indexer))\n\n    # exclude nuisance columns so that they are not reindexed\n    if exclude is not None and exclude:\n        columns = [c for c in columns if c not in exclude]\n\n        if not columns:\n            raise DataError(\"No numeric types to aggregate\")\n\n    if not len(final):\n        return obj.astype(\"float64\")\n    return concat(final, axis=1).reindex(columns=columns, copy=False)",
                "def _center_window(self, result, window) -> np.ndarray:\n    \"\"\"\n    Center the result in the window.\n    \"\"\"\n    if self.axis > result.ndim - 1:\n        raise ValueError(\"Requested axis is larger then no. of argument dimensions\")\n\n    offset = calculate_center_offset(window)\n    if offset > 0:\n        lead_indexer = [slice(None)] * result.ndim\n        lead_indexer[self.axis] = slice(offset, None)\n        result = np.copy(result[tuple(lead_indexer)])\n    return result",
                "def _get_roll_func(self, func_name: str) -> Callable:\n    \"\"\"\n    Wrap rolling function to check values passed.\n\n    Parameters\n    ----------\n    func_name : str\n        Cython function used to calculate rolling statistics\n\n    Returns\n    -------\n    func : callable\n    \"\"\"\n    window_func = getattr(window_aggregations, func_name, None)\n    if window_func is None:\n        raise ValueError(\n            f\"we do not support this function in window_aggregations.{func_name}\"\n        )\n    return window_func",
                "def _get_cython_func_type(self, func: str) -> Callable:\n    \"\"\"\n    Return a variable or fixed cython function type.\n\n    Variable algorithms do not use window while fixed do.\n    \"\"\"\n    if self.is_freq_type or isinstance(self.window, BaseIndexer):\n        return self._get_roll_func(f\"{func}_variable\")\n    return partial(self._get_roll_func(f\"{func}_fixed\"), win=self._get_window())",
                "def _get_window_indexer(self, window: int) -> BaseIndexer:\n    \"\"\"\n    Return an indexer class that will compute the window start and end bounds\n    \"\"\"\n    if isinstance(self.window, BaseIndexer):\n        return self.window\n    if self.is_freq_type:\n        return VariableWindowIndexer(index_array=self._on.asi8, window_size=window)\n    return FixedWindowIndexer(window_size=window)",
                "def _apply(\n    self,\n    func: Callable,\n    center: bool,\n    require_min_periods: int = 0,\n    floor: int = 1,\n    is_weighted: bool = False,\n    name: Optional[str] = None,\n    use_numba_cache: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Rolling statistical measure using supplied function.\n\n    Designed to be used with passed-in Cython array-based functions.\n\n    Parameters\n    ----------\n    func : callable function to apply\n    center : bool\n    require_min_periods : int\n    floor : int\n    is_weighted : bool\n    name : str,\n        compatibility with groupby.rolling\n    use_numba_cache : bool\n        whether to cache a numba compiled function. Only available for numba\n        enabled methods (so far only apply)\n    **kwargs\n        additional arguments for rolling function and window function\n\n    Returns\n    -------\n    y : type of input\n    \"\"\"\n    win_type = self._get_win_type(kwargs)\n    window = self._get_window(win_type=win_type)\n\n    blocks, obj = self._create_blocks()\n    block_list = list(blocks)\n    window_indexer = self._get_window_indexer(window)\n\n    results = []\n    exclude: List[Scalar] = []\n    for i, b in enumerate(blocks):\n        try:\n            values = self._prep_values(b.values)\n\n        except (TypeError, NotImplementedError):\n            if isinstance(obj, ABCDataFrame):\n                exclude.extend(b.columns)\n                del block_list[i]\n                continue\n            else:\n                raise DataError(\"No numeric types to aggregate\")\n\n        if values.size == 0:\n            results.append(values.copy())\n            continue\n\n        # calculation function\n        offset = calculate_center_offset(window) if center else 0\n        additional_nans = np.array([np.nan] * offset)\n\n        if not is_weighted:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                if not isinstance(window, BaseIndexer):\n                    min_periods = calculate_min_periods(\n                        window, self.min_periods, len(x), require_min_periods, floor\n                    )\n                else:\n                    min_periods = calculate_min_periods(\n                        self.min_periods or 1,\n                        self.min_periods,\n                        len(x),\n                        require_min_periods,\n                        floor,\n                    )\n                start, end = window_indexer.get_window_bounds(\n                    num_values=len(x),\n                    min_periods=self.min_periods,\n                    center=self.center,\n                    closed=self.closed,\n                )\n                return func(x, start, end, min_periods)\n\n        else:\n\n            def calc(x):\n                x = np.concatenate((x, additional_nans))\n                return func(x, window, self.min_periods)\n\n        with np.errstate(all=\"ignore\"):\n            if values.ndim > 1:\n                result = np.apply_along_axis(calc, self.axis, values)\n            else:\n                result = calc(values)\n                result = np.asarray(result)\n\n        if use_numba_cache:\n            self._numba_func_cache[name] = func\n\n        if center:\n            result = self._center_window(result, window)\n\n        results.append(result)\n\n    return self._wrap_results(results, block_list, obj, exclude)",
                "def aggregate(self, func, *args, **kwargs):\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n        return self.apply(func, raw=False, args=args, kwargs=kwargs)\n    return result",
                "def validate(self):\n    super().validate()\n\n    window = self.window\n    if isinstance(window, BaseIndexer):\n        raise NotImplementedError(\n            \"BaseIndexer subclasses not implemented with win_types.\"\n        )\n    elif isinstance(window, (list, tuple, np.ndarray)):\n        pass\n    elif is_integer(window):\n        if window <= 0:\n            raise ValueError(\"window must be > 0 \")\n        import_optional_dependency(\n            \"scipy\", extra=\"Scipy is required to generate window weight.\"\n        )\n        import scipy.signal as sig\n\n        if not isinstance(self.win_type, str):\n            raise ValueError(f\"Invalid win_type {self.win_type}\")\n        if getattr(sig, self.win_type, None) is None:\n            raise ValueError(f\"Invalid win_type {self.win_type}\")\n    else:\n        raise ValueError(f\"Invalid window {window}\")",
                "def _get_win_type(self, kwargs: Dict) -> Union[str, Tuple]:\n    \"\"\"\n    Extract arguments for the window type, provide validation for it\n    and return the validated window type.\n\n    Parameters\n    ----------\n    kwargs : dict\n\n    Returns\n    -------\n    win_type : str, or tuple\n    \"\"\"\n    # the below may pop from kwargs\n    def _validate_win_type(win_type, kwargs):\n        arg_map = {\n            \"kaiser\": [\"beta\"],\n            \"gaussian\": [\"std\"],\n            \"general_gaussian\": [\"power\", \"width\"],\n            \"slepian\": [\"width\"],\n            \"exponential\": [\"tau\"],\n        }\n\n        if win_type in arg_map:\n            win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n            if win_type == \"exponential\":\n                # exponential window requires the first arg (center)\n                # to be set to None (necessary for symmetric window)\n                win_args.insert(0, None)\n\n            return tuple([win_type] + win_args)\n\n        return win_type\n\n    def _pop_args(win_type, arg_names, kwargs):\n        all_args = []\n        for n in arg_names:\n            if n not in kwargs:\n                raise ValueError(f\"{win_type} window requires {n}\")\n            all_args.append(kwargs.pop(n))\n        return all_args\n\n    return _validate_win_type(self.win_type, kwargs)",
                "def _get_window(\n    self, other=None, win_type: Optional[Union[str, Tuple]] = None\n) -> np.ndarray:\n    \"\"\"\n    Get the window, weights.\n\n    Parameters\n    ----------\n    other :\n        ignored, exists for compatibility\n    win_type : str, or tuple\n        type of window to create\n\n    Returns\n    -------\n    window : ndarray\n        the window, weights\n    \"\"\"\n\n    window = self.window\n    if isinstance(window, (list, tuple, np.ndarray)):\n        return com.asarray_tuplesafe(window).astype(float)\n    elif is_integer(window):\n        import scipy.signal as sig\n\n        # GH #15662. `False` makes symmetric window, rather than periodic.\n        return sig.get_window(win_type, window, False).astype(float)",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/DataFrame\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, *args, **kwargs):\n    result, how = self._aggregate(func, *args, **kwargs)\n    if result is None:\n\n        # these must apply directly\n        result = func(self)\n\n    return result",
                "@Substitution(name=\"window\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_window_func(\"sum\", args, kwargs)\n    window_func = self._get_roll_func(\"roll_weighted_sum\")\n    window_func = get_weighted_roll_func(window_func)\n    return self._apply(\n        window_func, center=self.center, is_weighted=True, name=\"sum\", **kwargs\n    )",
                "@Substitution(name=\"window\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_window_func(\"mean\", args, kwargs)\n    window_func = self._get_roll_func(\"roll_weighted_mean\")\n    window_func = get_weighted_roll_func(window_func)\n    return self._apply(\n        window_func, center=self.center, is_weighted=True, name=\"mean\", **kwargs\n    )",
                "@Substitution(name=\"window\", versionadded=\"\\n.. versionadded:: 1.0.0\\n\")\n@Appender(_shared_docs[\"var\"])\ndef var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"var\", args, kwargs)\n    window_func = partial(self._get_roll_func(\"roll_weighted_var\"), ddof=ddof)\n    window_func = get_weighted_roll_func(window_func)\n    kwargs.pop(\"name\", None)\n    return self._apply(\n        window_func, center=self.center, is_weighted=True, name=\"var\", **kwargs\n    )",
                "@Substitution(name=\"window\", versionadded=\"\\n.. versionadded:: 1.0.0\\n\")\n@Appender(_shared_docs[\"std\"])\ndef std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"std\", args, kwargs)\n    return zsqrt(self.var(ddof=ddof, name=\"std\", **kwargs))",
                "@property\ndef _constructor(self):\n    return Rolling",
                "def count(self):\n\n    blocks, obj = self._create_blocks()\n    results = []\n    for b in blocks:\n        result = b.notna().astype(int)\n        result = self._constructor(\n            result,\n            window=self._get_window(),\n            min_periods=self.min_periods or 0,\n            center=self.center,\n            axis=self.axis,\n            closed=self.closed,\n        ).sum()\n        results.append(result)\n\n    return self._wrap_results(results, blocks, obj)",
                "def apply(\n    self,\n    func,\n    raw: bool = False,\n    engine: str = \"cython\",\n    engine_kwargs: Optional[Dict] = None,\n    args: Optional[Tuple] = None,\n    kwargs: Optional[Dict] = None,\n):\n    if args is None:\n        args = ()\n    if kwargs is None:\n        kwargs = {}\n    kwargs.pop(\"_level\", None)\n    kwargs.pop(\"floor\", None)\n    window = self._get_window()\n    offset = calculate_center_offset(window) if self.center else 0\n    if not is_bool(raw):\n        raise ValueError(\"raw parameter must be `True` or `False`\")\n\n    if engine == \"cython\":\n        if engine_kwargs is not None:\n            raise ValueError(\"cython engine does not accept engine_kwargs\")\n        apply_func = self._generate_cython_apply_func(\n            args, kwargs, raw, offset, func\n        )\n    elif engine == \"numba\":\n        if raw is False:\n            raise ValueError(\"raw must be `True` when using the numba engine\")\n        if func in self._numba_func_cache:\n            # Return an already compiled version of roll_apply if available\n            apply_func = self._numba_func_cache[func]\n        else:\n            apply_func = generate_numba_apply_func(\n                args, kwargs, func, engine_kwargs\n            )\n    else:\n        raise ValueError(\"engine must be either 'numba' or 'cython'\")\n\n    # TODO: Why do we always pass center=False?\n    # name=func & raw=raw for WindowGroupByMixin._apply\n    return self._apply(\n        apply_func,\n        center=False,\n        floor=0,\n        name=func,\n        use_numba_cache=engine == \"numba\",\n        raw=raw,\n    )",
                "def _generate_cython_apply_func(self, args, kwargs, raw, offset, func):\n    from pandas import Series\n\n    window_func = partial(\n        self._get_cython_func_type(\"roll_generic\"),\n        args=args,\n        kwargs=kwargs,\n        raw=raw,\n        offset=offset,\n        func=func,\n    )\n\n    def apply_func(values, begin, end, min_periods, raw=raw):\n        if not raw:\n            values = Series(values, index=self.obj.index)\n        return window_func(values, begin, end, min_periods)\n\n    return apply_func",
                "def sum(self, *args, **kwargs):\n    nv.validate_window_func(\"sum\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_sum\")\n    kwargs.pop(\"floor\", None)\n    return self._apply(\n        window_func, center=self.center, floor=0, name=\"sum\", **kwargs\n    )",
                "def max(self, *args, **kwargs):\n    nv.validate_window_func(\"max\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_max\")\n    return self._apply(window_func, center=self.center, name=\"max\", **kwargs)",
                "def min(self, *args, **kwargs):\n    nv.validate_window_func(\"min\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_min\")\n    return self._apply(window_func, center=self.center, name=\"min\", **kwargs)",
                "def mean(self, *args, **kwargs):\n    nv.validate_window_func(\"mean\", args, kwargs)\n    window_func = self._get_cython_func_type(\"roll_mean\")\n    return self._apply(window_func, center=self.center, name=\"mean\", **kwargs)",
                "def median(self, **kwargs):\n    window_func = self._get_roll_func(\"roll_median_c\")\n    window_func = partial(window_func, win=self._get_window())\n    return self._apply(window_func, center=self.center, name=\"median\", **kwargs)",
                "def std(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"std\", args, kwargs)\n    kwargs.pop(\"require_min_periods\", None)\n    window_func = self._get_cython_func_type(\"roll_var\")\n\n    def zsqrt_func(values, begin, end, min_periods):\n        return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))\n\n    # ddof passed again for compat with groupby.rolling\n    return self._apply(\n        zsqrt_func,\n        center=self.center,\n        require_min_periods=1,\n        name=\"std\",\n        ddof=ddof,\n        **kwargs,\n    )",
                "def var(self, ddof=1, *args, **kwargs):\n    nv.validate_window_func(\"var\", args, kwargs)\n    kwargs.pop(\"require_min_periods\", None)\n    window_func = partial(self._get_cython_func_type(\"roll_var\"), ddof=ddof)\n    # ddof passed again for compat with groupby.rolling\n    return self._apply(\n        window_func,\n        center=self.center,\n        require_min_periods=1,\n        name=\"var\",\n        ddof=ddof,\n        **kwargs,\n    )",
                "def skew(self, **kwargs):\n    window_func = self._get_cython_func_type(\"roll_skew\")\n    kwargs.pop(\"require_min_periods\", None)\n    return self._apply(\n        window_func,\n        center=self.center,\n        require_min_periods=3,\n        name=\"skew\",\n        **kwargs,\n    )",
                "def kurt(self, **kwargs):\n    window_func = self._get_cython_func_type(\"roll_kurt\")\n    kwargs.pop(\"require_min_periods\", None)\n    return self._apply(\n        window_func,\n        center=self.center,\n        require_min_periods=4,\n        name=\"kurt\",\n        **kwargs,\n    )",
                "def quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    if quantile == 1.0:\n        window_func = self._get_cython_func_type(\"roll_max\")\n    elif quantile == 0.0:\n        window_func = self._get_cython_func_type(\"roll_min\")\n    else:\n        window_func = partial(\n            self._get_roll_func(\"roll_quantile\"),\n            win=self._get_window(),\n            quantile=quantile,\n            interpolation=interpolation,\n        )\n\n    # Pass through for groupby.rolling\n    kwargs[\"quantile\"] = quantile\n    kwargs[\"interpolation\"] = interpolation\n    return self._apply(window_func, center=self.center, name=\"quantile\", **kwargs)",
                "def cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n\n    # GH 16058: offset window\n    if self.is_freq_type:\n        window = self.win_freq\n    else:\n        window = self._get_window(other)\n\n    def _get_cov(X, Y):\n        # GH #12373 : rolling functions error on float32 data\n        # to avoid potential overflow, cast the data to float64\n        X = X.astype(\"float64\")\n        Y = Y.astype(\"float64\")\n        mean = lambda x: x.rolling(\n            window, self.min_periods, center=self.center\n        ).mean(**kwargs)\n        count = (\n            (X + Y)\n            .rolling(window=window, min_periods=0, center=self.center)\n            .count(**kwargs)\n        )\n        bias_adj = count / (count - ddof)\n        return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_cov, pairwise=bool(pairwise)\n    )",
                "def corr(self, other=None, pairwise=None, **kwargs):\n    if other is None:\n        other = self._selected_obj\n        # only default unset\n        pairwise = True if pairwise is None else pairwise\n    other = self._shallow_copy(other)\n    window = self._get_window(other)\n\n    def _get_corr(a, b):\n        a = a.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n        b = b.rolling(\n            window=window, min_periods=self.min_periods, center=self.center\n        )\n\n        return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\n\n    return _flex_binary_moment(\n        self._selected_obj, other._selected_obj, _get_corr, pairwise=bool(pairwise)\n    )",
                "@cache_readonly\ndef is_datetimelike(self) -> bool:\n    return isinstance(\n        self._on, (ABCDatetimeIndex, ABCTimedeltaIndex, ABCPeriodIndex)\n    )",
                "@cache_readonly\ndef _on(self) -> Index:\n    if self.on is None:\n        if self.axis == 0:\n            return self.obj.index\n        else:\n            # i.e. self.axis == 1\n            return self.obj.columns\n    elif isinstance(self.on, Index):\n        return self.on\n    elif isinstance(self.obj, ABCDataFrame) and self.on in self.obj.columns:\n        return Index(self.obj[self.on])\n    else:\n        raise ValueError(\n            f\"invalid on specified as {self.on}, \"\n            \"must be a column (of DataFrame), an Index or None\"\n        )",
                "def validate(self):\n    super().validate()\n\n    # we allow rolling on a datetimelike index\n    if (self.obj.empty or self.is_datetimelike) and isinstance(\n        self.window, (str, ABCDateOffset, timedelta)\n    ):\n\n        self._validate_monotonic()\n        freq = self._validate_freq()\n\n        # we don't allow center\n        if self.center:\n            raise NotImplementedError(\n                \"center is not implemented for \"\n                \"datetimelike and offset based windows\"\n            )\n\n        # this will raise ValueError on non-fixed freqs\n        self.win_freq = self.window\n        self.window = freq.nanos\n        self.win_type = \"freq\"\n\n        # min_periods must be an integer\n        if self.min_periods is None:\n            self.min_periods = 1\n\n    elif isinstance(self.window, BaseIndexer):\n        # Passed BaseIndexer subclass should handle all other rolling kwargs\n        return\n    elif not is_integer(self.window):\n        raise ValueError(\"window must be an integer\")\n    elif self.window < 0:\n        raise ValueError(\"window must be non-negative\")\n\n    if not self.is_datetimelike and self.closed is not None:\n        raise ValueError(\n            \"closed only implemented for datetimelike and offset based windows\"\n        )",
                "def _validate_monotonic(self):\n    \"\"\"\n    Validate monotonic (increasing or decreasing).\n    \"\"\"\n    if not (self._on.is_monotonic_increasing or self._on.is_monotonic_decreasing):\n        formatted = self.on\n        if self.on is None:\n            formatted = \"index\"\n        raise ValueError(f\"{formatted} must be monotonic\")",
                "def _validate_freq(self):\n    \"\"\"\n    Validate & return window frequency.\n    \"\"\"\n    from pandas.tseries.frequencies import to_offset\n\n    try:\n        return to_offset(self.window)\n    except (TypeError, ValueError):\n        raise ValueError(\n            f\"passed window {self.window} is not \"\n            \"compatible with a datetimelike index\"\n        )",
                "@Substitution(\n    see_also=_agg_see_also_doc,\n    examples=_agg_examples_doc,\n    versionadded=\"\",\n    klass=\"Series/Dataframe\",\n    axis=\"\",\n)\n@Appender(_shared_docs[\"aggregate\"])\ndef aggregate(self, func, *args, **kwargs):\n    return super().aggregate(func, *args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"count\"])\ndef count(self):\n\n    # different impl for freq counting\n    if self.is_freq_type:\n        window_func = self._get_roll_func(\"roll_count\")\n        return self._apply(window_func, center=self.center, name=\"count\")\n\n    return super().count()",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"apply\"])\ndef apply(\n    self,\n    func,\n    raw=False,\n    engine=\"cython\",\n    engine_kwargs=None,\n    args=None,\n    kwargs=None,\n):\n    return super().apply(\n        func,\n        raw=raw,\n        engine=engine,\n        engine_kwargs=engine_kwargs,\n        args=args,\n        kwargs=kwargs,\n    )",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"sum\"])\ndef sum(self, *args, **kwargs):\n    nv.validate_rolling_func(\"sum\", args, kwargs)\n    return super().sum(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"max\"])\ndef max(self, *args, **kwargs):\n    nv.validate_rolling_func(\"max\", args, kwargs)\n    return super().max(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"min\"])\ndef min(self, *args, **kwargs):\n    nv.validate_rolling_func(\"min\", args, kwargs)\n    return super().min(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"mean\"])\ndef mean(self, *args, **kwargs):\n    nv.validate_rolling_func(\"mean\", args, kwargs)\n    return super().mean(*args, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"median\"])\ndef median(self, **kwargs):\n    return super().median(**kwargs)",
                "@Substitution(name=\"rolling\", versionadded=\"\")\n@Appender(_shared_docs[\"std\"])\ndef std(self, ddof=1, *args, **kwargs):\n    nv.validate_rolling_func(\"std\", args, kwargs)\n    return super().std(ddof=ddof, **kwargs)",
                "@Substitution(name=\"rolling\", versionadded=\"\")\n@Appender(_shared_docs[\"var\"])\ndef var(self, ddof=1, *args, **kwargs):\n    nv.validate_rolling_func(\"var\", args, kwargs)\n    return super().var(ddof=ddof, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"skew\"])\ndef skew(self, **kwargs):\n    return super().skew(**kwargs)",
                "@Appender(_agg_doc)\n@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"kurt\"])\ndef kurt(self, **kwargs):\n    return super().kurt(**kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"quantile\"])\ndef quantile(self, quantile, interpolation=\"linear\", **kwargs):\n    return super().quantile(\n        quantile=quantile, interpolation=interpolation, **kwargs\n    )",
                "@Substitution(name=\"rolling\")\n@Appender(_doc_template)\n@Appender(_shared_docs[\"cov\"])\ndef cov(self, other=None, pairwise=None, ddof=1, **kwargs):\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)",
                "@Substitution(name=\"rolling\")\n@Appender(_shared_docs[\"corr\"])\ndef corr(self, other=None, pairwise=None, **kwargs):\n    return super().corr(other=other, pairwise=pairwise, **kwargs)",
                "@property\ndef _constructor(self):\n    return Rolling",
                "def _gotitem(self, key, ndim, subset=None):\n\n    # we are setting the index on the actual object\n    # here so our index is carried thru to the selected obj\n    # when we do the splitting for the groupby\n    if self.on is not None:\n        self._groupby.obj = self._groupby.obj.set_index(self._on)\n        self.on = None\n    return super()._gotitem(key, ndim, subset=subset)",
                "def _validate_monotonic(self):\n    \"\"\"\n    Validate that on is monotonic;\n    we don't care for groupby.rolling\n    because we have already validated at a higher\n    level.\n    \"\"\"\n    pass",
                "def _validate_win_type(win_type, kwargs):\n    arg_map = {\n        \"kaiser\": [\"beta\"],\n        \"gaussian\": [\"std\"],\n        \"general_gaussian\": [\"power\", \"width\"],\n        \"slepian\": [\"width\"],\n        \"exponential\": [\"tau\"],\n    }\n\n    if win_type in arg_map:\n        win_args = _pop_args(win_type, arg_map[win_type], kwargs)\n        if win_type == \"exponential\":\n            # exponential window requires the first arg (center)\n            # to be set to None (necessary for symmetric window)\n            win_args.insert(0, None)\n\n        return tuple([win_type] + win_args)\n\n    return win_type",
                "def _pop_args(win_type, arg_names, kwargs):\n    all_args = []\n    for n in arg_names:\n        if n not in kwargs:\n            raise ValueError(f\"{win_type} window requires {n}\")\n        all_args.append(kwargs.pop(n))\n    return all_args",
                "def apply_func(values, begin, end, min_periods, raw=raw):\n    if not raw:\n        values = Series(values, index=self.obj.index)\n    return window_func(values, begin, end, min_periods)",
                "def zsqrt_func(values, begin, end, min_periods):\n    return zsqrt(window_func(values, begin, end, min_periods, ddof=ddof))",
                "def _get_cov(X, Y):\n    # GH #12373 : rolling functions error on float32 data\n    # to avoid potential overflow, cast the data to float64\n    X = X.astype(\"float64\")\n    Y = Y.astype(\"float64\")\n    mean = lambda x: x.rolling(\n        window, self.min_periods, center=self.center\n    ).mean(**kwargs)\n    count = (\n        (X + Y)\n        .rolling(window=window, min_periods=0, center=self.center)\n        .count(**kwargs)\n    )\n    bias_adj = count / (count - ddof)\n    return (mean(X * Y) - mean(X) * mean(Y)) * bias_adj",
                "def _get_corr(a, b):\n    a = a.rolling(\n        window=window, min_periods=self.min_periods, center=self.center\n    )\n    b = b.rolling(\n        window=window, min_periods=self.min_periods, center=self.center\n    )\n\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))",
                "def calc(x):\n    x = np.concatenate((x, additional_nans))\n    if not isinstance(window, BaseIndexer):\n        min_periods = calculate_min_periods(\n            window, self.min_periods, len(x), require_min_periods, floor\n        )\n    else:\n        min_periods = calculate_min_periods(\n            self.min_periods or 1,\n            self.min_periods,\n            len(x),\n            require_min_periods,\n            floor,\n        )\n    start, end = window_indexer.get_window_bounds(\n        num_values=len(x),\n        min_periods=self.min_periods,\n        center=self.center,\n        closed=self.closed,\n    )\n    return func(x, start, end, min_periods)",
                "def calc(x):\n    x = np.concatenate((x, additional_nans))\n    return func(x, window, self.min_periods)"
            ],
            "inscope_function_signatures": [
                "__init__(self, obj, window=None, min_periods: Optional[int]=None, center: Optional[bool]=False, win_type: Optional[str]=None, axis: Axis=0, on: Optional[Union[str, Index]]=None, closed: Optional[str]=None, **kwargs)",
                "_constructor(self)",
                "is_datetimelike(self) -> Optional[bool]",
                "_on(self)",
                "is_freq_type(self) -> bool",
                "validate(self) -> None",
                "_validate_get_window_bounds_signature(window: BaseIndexer) -> None",
                "_create_blocks(self)",
                "_gotitem(self, key, ndim, subset=None)",
                "__getattr__(self, attr: str)",
                "_dir_additions(self)",
                "_get_win_type(self, kwargs: Dict)",
                "_get_window(self, other=None, win_type: Optional[str]=None) -> int",
                "_window_type(self) -> str",
                "__repr__(self) -> str",
                "__iter__(self)",
                "_prep_values(self, values: Optional[np.ndarray]=None) -> np.ndarray",
                "_wrap_result(self, result, block=None, obj=None)",
                "_wrap_results(self, results, blocks, obj, exclude=None) -> FrameOrSeries",
                "_center_window(self, result, window) -> np.ndarray",
                "_get_roll_func(self, func_name: str) -> Callable",
                "_get_cython_func_type(self, func: str) -> Callable",
                "_get_window_indexer(self, window: int) -> BaseIndexer",
                "_apply(self, func: Callable, center: bool, require_min_periods: int=0, floor: int=1, is_weighted: bool=False, name: Optional[str]=None, use_numba_cache: bool=False, **kwargs)",
                "aggregate(self, func, *args, **kwargs)",
                "validate(self)",
                "_get_win_type(self, kwargs: Dict) -> Union[str, Tuple]",
                "_get_window(self, other=None, win_type: Optional[Union[str, Tuple]]=None) -> np.ndarray",
                "aggregate(self, func, *args, **kwargs)",
                "sum(self, *args, **kwargs)",
                "mean(self, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "std(self, ddof=1, *args, **kwargs)",
                "_constructor(self)",
                "count(self)",
                "apply(self, func, raw: bool=False, engine: str='cython', engine_kwargs: Optional[Dict]=None, args: Optional[Tuple]=None, kwargs: Optional[Dict]=None)",
                "_generate_cython_apply_func(self, args, kwargs, raw, offset, func)",
                "sum(self, *args, **kwargs)",
                "max(self, *args, **kwargs)",
                "min(self, *args, **kwargs)",
                "mean(self, *args, **kwargs)",
                "median(self, **kwargs)",
                "std(self, ddof=1, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "skew(self, **kwargs)",
                "kurt(self, **kwargs)",
                "quantile(self, quantile, interpolation='linear', **kwargs)",
                "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
                "corr(self, other=None, pairwise=None, **kwargs)",
                "is_datetimelike(self) -> bool",
                "_on(self) -> Index",
                "validate(self)",
                "_validate_monotonic(self)",
                "_validate_freq(self)",
                "aggregate(self, func, *args, **kwargs)",
                "count(self)",
                "apply(self, func, raw=False, engine='cython', engine_kwargs=None, args=None, kwargs=None)",
                "sum(self, *args, **kwargs)",
                "max(self, *args, **kwargs)",
                "min(self, *args, **kwargs)",
                "mean(self, *args, **kwargs)",
                "median(self, **kwargs)",
                "std(self, ddof=1, *args, **kwargs)",
                "var(self, ddof=1, *args, **kwargs)",
                "skew(self, **kwargs)",
                "kurt(self, **kwargs)",
                "quantile(self, quantile, interpolation='linear', **kwargs)",
                "cov(self, other=None, pairwise=None, ddof=1, **kwargs)",
                "corr(self, other=None, pairwise=None, **kwargs)",
                "_constructor(self)",
                "_gotitem(self, key, ndim, subset=None)",
                "_validate_monotonic(self)",
                "_validate_win_type(win_type, kwargs)",
                "_pop_args(win_type, arg_names, kwargs)",
                "apply_func(values, begin, end, min_periods, raw=raw)",
                "zsqrt_func(values, begin, end, min_periods)",
                "_get_cov(X, Y)",
                "_get_corr(a, b)",
                "calc(x)",
                "calc(x)"
            ],
            "variables_in_file": {
                "PandasObject": [
                    59
                ],
                "ShallowMixin": [
                    59
                ],
                "SelectionMixin": [
                    59
                ],
                "_attributes": [
                    60
                ],
                "List": [
                    452,
                    60
                ],
                "str": [
                    416,
                    962,
                    69,
                    389,
                    1832,
                    234,
                    77,
                    237,
                    79,
                    80,
                    369,
                    1007,
                    1263,
                    214,
                    186,
                    955,
                    60,
                    95
                ],
                "exclusions": [
                    69
                ],
                "Set": [
                    69
                ],
                "set": [
                    69
                ],
                "Optional": [
                    416,
                    102,
                    75,
                    76,
                    77,
                    79,
                    80,
                    1007,
                    1264,
                    1265,
                    1266,
                    214,
                    254,
                    95
                ],
                "int": [
                    1187,
                    75,
                    399,
                    214,
                    413,
                    414
                ],
                "bool": [
                    417,
                    1666,
                    102,
                    1798,
                    76,
                    1804,
                    110,
                    1262,
                    412,
                    415
                ],
                "Axis": [
                    78
                ],
                "Union": [
                    962,
                    1007,
                    79
                ],
                "Index": [
                    1820,
                    79,
                    1810,
                    1817,
                    156
                ],
                "self.__dict__.update": [
                    84
                ],
                "self.__dict__": [
                    84
                ],
                "self": [
                    1025,
                    514,
                    518,
                    521,
                    523,
                    2106,
                    2107,
                    1596,
                    2108,
                    1086,
                    1598,
                    1601,
                    1090,
                    1602,
                    1610,
                    1100,
                    1102,
                    1103,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    1112,
                    1113,
                    1120,
                    1123,
                    1124,
                    1638,
                    1641,
                    1131,
                    1644,
                    1645,
                    111,
                    1647,
                    114,
                    116,
                    118,
                    1655,
                    1659,
                    125,
                    126,
                    127,
                    128,
                    1666,
                    153,
                    156,
                    158,
                    1184,
                    1188,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1198,
                    178,
                    179,
                    180,
                    183,
                    184,
                    187,
                    188,
                    189,
                    190,
                    193,
                    197,
                    229,
                    230,
                    231,
                    235,
                    243,
                    244,
                    245,
                    1781,
                    248,
                    1784,
                    1274,
                    1275,
                    1785,
                    1789,
                    1792,
                    257,
                    1282,
                    1798,
                    1288,
                    1290,
                    267,
                    1806,
                    1811,
                    1300,
                    1812,
                    1813,
                    1816,
                    1817,
                    1818,
                    1819,
                    1820,
                    1823,
                    289,
                    1313,
                    1831,
                    1832,
                    1323,
                    1835,
                    1836,
                    1839,
                    1330,
                    1332,
                    1333,
                    1846,
                    1847,
                    1848,
                    1851,
                    1852,
                    1854,
                    319,
                    1857,
                    1859,
                    1349,
                    1350,
                    327,
                    328,
                    1862,
                    330,
                    331,
                    333,
                    335,
                    1871,
                    1872,
                    1873,
                    340,
                    1884,
                    1887,
                    359,
                    365,
                    1391,
                    1392,
                    1396,
                    1397,
                    395,
                    396,
                    397,
                    403,
                    404,
                    405,
                    406,
                    1437,
                    1438,
                    1439,
                    1444,
                    1450,
                    940,
                    1452,
                    1965,
                    1966,
                    1967,
                    1462,
                    1464,
                    1466,
                    955,
                    444,
                    445,
                    956,
                    447,
                    957,
                    449,
                    958,
                    455,
                    1485,
                    1487,
                    1110,
                    1489,
                    479,
                    483,
                    484,
                    491,
                    492,
                    493,
                    1004,
                    501,
                    1528,
                    505,
                    1530,
                    1532,
                    511
                ],
                "kwargs": [
                    1283,
                    1795,
                    521,
                    523,
                    1656,
                    1293,
                    1529,
                    2068,
                    2074,
                    1439,
                    2081,
                    1442,
                    1315,
                    1443,
                    1956,
                    2086,
                    1456,
                    1329,
                    1331,
                    1460,
                    1333,
                    1461,
                    444,
                    1086,
                    1470,
                    1348,
                    1988,
                    1350,
                    1608,
                    1609,
                    1610,
                    1099,
                    1994,
                    1995,
                    1486,
                    1103,
                    2001,
                    2002,
                    84,
                    1109,
                    1492,
                    2007,
                    2008,
                    1113,
                    986,
                    2013,
                    2014,
                    1119,
                    1122,
                    2019,
                    1124,
                    999,
                    2024,
                    1001,
                    1130,
                    1131,
                    1004,
                    2025,
                    1390,
                    2030,
                    1392,
                    2031,
                    1395,
                    1397,
                    1270,
                    1271,
                    1272,
                    1273,
                    2037,
                    1660,
                    1535
                ],
                "self.obj": [
                    197,
                    1831,
                    1323,
                    178,
                    340,
                    85,
                    1813,
                    189,
                    1816,
                    1819,
                    1820,
                    125
                ],
                "obj": [
                    518,
                    153,
                    157,
                    158,
                    159,
                    288,
                    161,
                    289,
                    290,
                    1184,
                    297,
                    299,
                    1198,
                    319,
                    447,
                    328,
                    458,
                    331,
                    85,
                    93,
                    352
                ],
                "self.on": [
                    2106,
                    1820,
                    328,
                    2108,
                    1872,
                    1873,
                    1811,
                    86,
                    1817,
                    1818,
                    1819,
                    156,
                    158,
                    1823
                ],
                "on": [
                    86
                ],
                "self.closed": [
                    1862,
                    1194,
                    493,
                    118,
                    87
                ],
                "closed": [
                    87
                ],
                "self.window": [
                    128,
                    1025,
                    1857,
                    1859,
                    229,
                    231,
                    1832,
                    395,
                    940,
                    403,
                    404,
                    1846,
                    1847,
                    88,
                    1887,
                    1884,
                    1854,
                    127
                ],
                "window": [
                    1792,
                    1025,
                    514,
                    1026,
                    1027,
                    1028,
                    1032,
                    137,
                    144,
                    406,
                    407,
                    1659,
                    940,
                    941,
                    945,
                    947,
                    948,
                    445,
                    960,
                    449,
                    470,
                    88,
                    477,
                    479,
                    362,
                    1645,
                    1647,
                    501,
                    1655,
                    1785,
                    1274,
                    1275,
                    1789
                ],
                "self.min_periods": [
                    1792,
                    483,
                    484,
                    230,
                    1191,
                    491,
                    116,
                    501,
                    1655,
                    89,
                    1851,
                    1852,
                    1789,
                    479
                ],
                "min_periods": [
                    482,
                    1447,
                    1324,
                    495,
                    89,
                    478
                ],
                "self.center": [
                    1792,
                    1659,
                    1439,
                    1192,
                    1452,
                    1839,
                    1967,
                    1333,
                    1466,
                    1350,
                    1610,
                    1103,
                    1489,
                    1113,
                    90,
                    1124,
                    492,
                    1392,
                    114,
                    1397,
                    1655,
                    1275,
                    1532,
                    1789
                ],
                "center": [
                    513,
                    90,
                    470
                ],
                "self.win_type": [
                    955,
                    1004,
                    111,
                    1848,
                    91,
                    956,
                    957,
                    958
                ],
                "win_type": [
                    992,
                    994,
                    987,
                    1000,
                    1032,
                    985,
                    986,
                    91,
                    444,
                    445
                ],
                "self.win_freq": [
                    92,
                    1645,
                    1846
                ],
                "self.axis": [
                    359,
                    1193,
                    365,
                    1812,
                    505,
                    93
                ],
                "axis": [
                    93
                ],
                "obj._get_axis_number": [
                    93
                ],
                "self.validate": [
                    94
                ],
                "self._numba_func_cache": [
                    1288,
                    1290,
                    511,
                    95
                ],
                "Dict": [
                    962,
                    199,
                    1264,
                    1266,
                    95
                ],
                "Callable": [
                    369,
                    411,
                    389,
                    95
                ],
                "dict": [
                    95
                ],
                "Window": [
                    2089,
                    99
                ],
                "property": [
                    97,
                    101,
                    233,
                    105,
                    109,
                    1135,
                    2097
                ],
                "is_bool": [
                    114,
                    1276
                ],
                "ValueError": [
                    384,
                    1281,
                    1287,
                    143,
                    1296,
                    273,
                    1822,
                    949,
                    956,
                    958,
                    960,
                    1858,
                    1860,
                    1863,
                    1875,
                    1885,
                    1886,
                    360,
                    1000,
                    115,
                    117,
                    124,
                    1277
                ],
                "is_integer": [
                    1857,
                    947,
                    116,
                    1028
                ],
                "isinstance": [
                    477,
                    1819,
                    1026,
                    292,
                    229,
                    1831,
                    458,
                    395,
                    941,
                    1805,
                    945,
                    403,
                    1817,
                    955,
                    156,
                    125,
                    1854,
                    127
                ],
                "ABCSeries": [
                    125
                ],
                "ABCDataFrame": [
                    458,
                    1819,
                    125
                ],
                "TypeError": [
                    457,
                    273,
                    274,
                    1885,
                    126
                ],
                "type": [
                    193,
                    235,
                    299,
                    144,
                    126
                ],
                "BaseIndexer": [
                    131,
                    229,
                    395,
                    140,
                    941,
                    399,
                    403,
                    477,
                    1854,
                    127
                ],
                "self._validate_get_window_bounds_signature": [
                    128
                ],
                "get_window_bounds_signature": [
                    136,
                    142
                ],
                "parameters.keys": [
                    136,
                    139
                ],
                "parameters": [
                    136,
                    139
                ],
                "inspect.signature": [
                    136,
                    139
                ],
                "inspect": [
                    136,
                    139
                ],
                "window.get_window_bounds": [
                    137
                ],
                "expected_signature": [
                    139,
                    142
                ],
                "get_window_bounds": [
                    140
                ],
                "__name__": [
                    144,
                    193,
                    235
                ],
                "staticmethod": [
                    130
                ],
                "self._selected_obj": [
                    257,
                    289,
                    1666,
                    1638,
                    327,
                    1798,
                    1781,
                    153
                ],
                "obj.ndim": [
                    157
                ],
                "obj.reindex": [
                    158
                ],
                "obj.columns.difference": [
                    158
                ],
                "obj.columns": [
                    158
                ],
                "blocks": [
                    448,
                    161,
                    159,
                    1184,
                    1186,
                    453,
                    1198,
                    317,
                    447
                ],
                "values": [
                    256,
                    257,
                    261,
                    262,
                    263,
                    264,
                    265,
                    268,
                    272,
                    274,
                    277,
                    279,
                    281,
                    159,
                    1447,
                    1323,
                    1324,
                    455,
                    465,
                    466,
                    504,
                    505,
                    507
                ],
                "obj._to_dict_of_blocks": [
                    159
                ],
                "subset": [
                    177,
                    178,
                    179,
                    181,
                    182,
                    2109
                ],
                "self._shallow_copy": [
                    1784,
                    1641,
                    179
                ],
                "self._reset_cache": [
                    180
                ],
                "subset.ndim": [
                    181
                ],
                "is_scalar": [
                    182
                ],
                "key": [
                    2109,
                    182,
                    183
                ],
                "is_list_like": [
                    182
                ],
                "self._selection": [
                    333,
                    335,
                    183
                ],
                "attr": [
                    193,
                    187,
                    188,
                    189,
                    190
                ],
                "self._internal_names_set": [
                    187
                ],
                "object.__getattribute__": [
                    188
                ],
                "object": [
                    188
                ],
                "AttributeError": [
                    192
                ],
                "self.obj._dir_additions": [
                    197
                ],
                "attrs_list": [
                    242,
                    247
                ],
                "attr_name": [
                    243,
                    244,
                    245
                ],
                "getattr": [
                    257,
                    243,
                    245,
                    957,
                    382
                ],
                "self._attributes": [
                    244
                ],
                "attrs": [
                    248,
                    247
                ],
                "join": [
                    247
                ],
                "self._window_type": [
                    248,
                    267
                ],
                "url": [
                    251,
                    252
                ],
                "NotImplementedError": [
                    457,
                    266,
                    942,
                    1840,
                    252
                ],
                "np.ndarray": [
                    1026,
                    355,
                    292,
                    1008,
                    945,
                    254
                ],
                "np": [
                    471,
                    355,
                    292,
                    503,
                    1026,
                    508,
                    366,
                    1008,
                    945,
                    500,
                    277,
                    279,
                    505,
                    476,
                    254
                ],
                "is_float_dtype": [
                    261
                ],
                "values.dtype": [
                    261,
                    263,
                    265,
                    268,
                    274
                ],
                "ensure_float64": [
                    264,
                    272,
                    262
                ],
                "is_integer_dtype": [
                    263
                ],
                "needs_i8_conversion": [
                    265
                ],
                "inf": [
                    277,
                    278,
                    279
                ],
                "np.isinf": [
                    277
                ],
                "inf.any": [
                    278
                ],
                "np.where": [
                    279
                ],
                "np.nan": [
                    471,
                    279
                ],
                "index": [
                    297,
                    290,
                    299
                ],
                "obj.index": [
                    328,
                    290,
                    331
                ],
                "result": [
                    514,
                    516,
                    521,
                    522,
                    524,
                    1187,
                    292,
                    1188,
                    294,
                    1189,
                    297,
                    299,
                    300,
                    1196,
                    317,
                    1086,
                    319,
                    320,
                    321,
                    322,
                    1087,
                    1090,
                    1092,
                    359,
                    364,
                    366,
                    367,
                    505,
                    507,
                    508
                ],
                "result.ndim": [
                    320,
                    364,
                    294,
                    359
                ],
                "Series": [
                    297,
                    331,
                    1323
                ],
                "obj.name": [
                    297
                ],
                "block.columns": [
                    299
                ],
                "block": [
                    299,
                    317,
                    319
                ],
                "final": [
                    353,
                    322,
                    331,
                    316,
                    351
                ],
                "zip": [
                    317
                ],
                "results": [
                    1185,
                    451,
                    516,
                    518,
                    1196,
                    1198,
                    466,
                    317
                ],
                "self._wrap_result": [
                    319
                ],
                "final.append": [
                    322,
                    331
                ],
                "columns": [
                    353,
                    327,
                    340,
                    341,
                    342,
                    346,
                    348
                ],
                "self._selected_obj.columns": [
                    327
                ],
                "self._on.equals": [
                    328
                ],
                "self._on": [
                    328,
                    330,
                    331,
                    1806,
                    1871,
                    406,
                    2107
                ],
                "name": [
                    330,
                    331,
                    339,
                    341,
                    511
                ],
                "self._on.name": [
                    330
                ],
                "selection": [
                    339,
                    341,
                    335
                ],
                "ensure_index": [
                    335
                ],
                "self.obj.columns": [
                    1816,
                    1819,
                    340
                ],
                "indexer": [
                    341,
                    342
                ],
                "columns.get_indexer": [
                    341
                ],
                "selection.tolist": [
                    341
                ],
                "columns.take": [
                    342
                ],
                "sorted": [
                    342
                ],
                "exclude": [
                    452,
                    518,
                    459,
                    345,
                    346
                ],
                "c": [
                    346
                ],
                "DataError": [
                    349,
                    463
                ],
                "len": [
                    479,
                    490,
                    485,
                    351
                ],
                "obj.astype": [
                    352
                ],
                "reindex": [
                    353
                ],
                "concat": [
                    353
                ],
                "FrameOrSeries": [
                    302
                ],
                "offset": [
                    1283,
                    1317,
                    362,
                    363,
                    365,
                    470,
                    471,
                    1275
                ],
                "calculate_center_offset": [
                    362,
                    1275,
                    470
                ],
                "lead_indexer": [
                    364,
                    365,
                    366
                ],
                "slice": [
                    364,
                    365
                ],
                "np.copy": [
                    366
                ],
                "tuple": [
                    992,
                    945,
                    1026,
                    366
                ],
                "window_func": [
                    387,
                    1437,
                    1438,
                    1439,
                    1312,
                    1444,
                    1447,
                    1324,
                    1966,
                    1967,
                    1330,
                    1333,
                    1462,
                    1465,
                    1596,
                    1598,
                    1600,
                    1349,
                    1350,
                    1610,
                    1100,
                    1101,
                    1485,
                    1103,
                    1488,
                    1110,
                    1111,
                    1113,
                    1120,
                    1121,
                    1124,
                    1391,
                    1392,
                    1396,
                    1397,
                    1528,
                    1531,
                    382,
                    383
                ],
                "window_aggregations": [
                    382
                ],
                "func_name": [
                    385,
                    382
                ],
                "self.is_freq_type": [
                    395,
                    1644,
                    405,
                    1965
                ],
                "self._get_roll_func": [
                    1120,
                    1601,
                    396,
                    397,
                    1100,
                    1966,
                    1110,
                    1437
                ],
                "func": [
                    1090,
                    1283,
                    1956,
                    1318,
                    1288,
                    521,
                    1290,
                    523,
                    396,
                    397,
                    1293,
                    495,
                    501,
                    1304,
                    1983,
                    1086,
                    511
                ],
                "partial": [
                    1120,
                    1312,
                    1600,
                    397,
                    1462,
                    1438
                ],
                "self._get_window": [
                    1602,
                    1190,
                    397,
                    1647,
                    1785,
                    1274,
                    445,
                    1438
                ],
                "VariableWindowIndexer": [
                    406
                ],
                "self._on.asi8": [
                    406
                ],
                "FixedWindowIndexer": [
                    407
                ],
                "self._get_win_type": [
                    444
                ],
                "self._create_blocks": [
                    1184,
                    447
                ],
                "block_list": [
                    448,
                    460,
                    518
                ],
                "list": [
                    448,
                    945,
                    1026
                ],
                "window_indexer": [
                    449,
                    489
                ],
                "self._get_window_indexer": [
                    449
                ],
                "Scalar": [
                    452
                ],
                "i": [
                    460,
                    453
                ],
                "b": [
                    1186,
                    1187,
                    1795,
                    453,
                    455,
                    459,
                    1791
                ],
                "enumerate": [
                    453
                ],
                "self._prep_values": [
                    455
                ],
                "b.values": [
                    455
                ],
                "exclude.extend": [
                    459
                ],
                "b.columns": [
                    459
                ],
                "values.size": [
                    465
                ],
                "results.append": [
                    466,
                    516,
                    1196
                ],
                "values.copy": [
                    466
                ],
                "additional_nans": [
                    476,
                    500,
                    471
                ],
                "np.array": [
                    471
                ],
                "is_weighted": [
                    473
                ],
                "x": [
                    485,
                    490,
                    495,
                    500,
                    501,
                    1654,
                    476,
                    479
                ],
                "np.concatenate": [
                    476,
                    500
                ],
                "calculate_min_periods": [
                    482,
                    478
                ],
                "require_min_periods": [
                    486,
                    479
                ],
                "floor": [
                    487,
                    479
                ],
                "start": [
                    489,
                    495
                ],
                "end": [
                    489,
                    1324,
                    1447,
                    495
                ],
                "window_indexer.get_window_bounds": [
                    489
                ],
                "np.errstate": [
                    503
                ],
                "values.ndim": [
                    504
                ],
                "np.apply_along_axis": [
                    505
                ],
                "calc": [
                    505,
                    507
                ],
                "np.asarray": [
                    508
                ],
                "use_numba_cache": [
                    510
                ],
                "self._center_window": [
                    514
                ],
                "self._wrap_results": [
                    1198,
                    518
                ],
                "how": [
                    521,
                    1086
                ],
                "self._aggregate": [
                    521,
                    1086
                ],
                "args": [
                    1283,
                    521,
                    523,
                    1293,
                    1314,
                    1442,
                    1956,
                    1329,
                    1460,
                    1086,
                    1987,
                    1348,
                    1994,
                    1099,
                    1995,
                    2001,
                    2002,
                    1109,
                    2007,
                    2008,
                    2013,
                    2014,
                    1119,
                    2024,
                    1130,
                    1390,
                    2030,
                    1395,
                    1268,
                    1269
                ],
                "self.apply": [
                    523
                ],
                "agg": [
                    1094,
                    1958,
                    526
                ],
                "aggregate": [
                    1094,
                    1956,
                    526,
                    1958
                ],
                "_shared_docs": [
                    1538,
                    1669,
                    651,
                    528,
                    2066,
                    2071,
                    2079,
                    1954,
                    2084,
                    1961,
                    1200,
                    1972,
                    1336,
                    1084,
                    1473,
                    711,
                    1352,
                    1097,
                    1992,
                    1612,
                    1999,
                    1107,
                    2005,
                    1495,
                    2011,
                    1117,
                    605,
                    2017,
                    2022,
                    1128,
                    2028,
                    2035,
                    1142,
                    1399
                ],
                "dedent": [
                    1495,
                    1538,
                    1891,
                    1669,
                    711,
                    1352,
                    1034,
                    651,
                    1900,
                    528,
                    1200,
                    1043,
                    2039,
                    1142,
                    1399,
                    1336,
                    605
                ],
                "_Window": [
                    772,
                    1134
                ],
                "validate": [
                    938,
                    1828
                ],
                "super": [
                    2081,
                    2019,
                    1828,
                    1956,
                    2086,
                    2025,
                    938,
                    1995,
                    2031,
                    1969,
                    2002,
                    2068,
                    2014,
                    2037,
                    2008,
                    2073,
                    2109,
                    1982
                ],
                "import_optional_dependency": [
                    950
                ],
                "sig": [
                    1032,
                    957
                ],
                "arg_map": [
                    977,
                    986,
                    985
                ],
                "win_args": [
                    992,
                    986,
                    990
                ],
                "_pop_args": [
                    986
                ],
                "win_args.insert": [
                    990
                ],
                "all_args": [
                    1001,
                    1002,
                    997
                ],
                "n": [
                    1000,
                    1001,
                    998,
                    999
                ],
                "arg_names": [
                    998
                ],
                "all_args.append": [
                    1001
                ],
                "kwargs.pop": [
                    1122,
                    1443,
                    1001,
                    1529,
                    1486,
                    1331,
                    1461,
                    1272,
                    1273
                ],
                "_validate_win_type": [
                    1004
                ],
                "Tuple": [
                    1265,
                    962,
                    1007
                ],
                "astype": [
                    1032,
                    1027,
                    1187
                ],
                "com.asarray_tuplesafe": [
                    1027
                ],
                "com": [
                    1027
                ],
                "float": [
                    1032,
                    1027
                ],
                "sig.get_window": [
                    1032
                ],
                "_agg_see_also_doc": [
                    1034,
                    1891,
                    1948,
                    1078
                ],
                "_agg_examples_doc": [
                    1043,
                    1900,
                    1949,
                    1079
                ],
                "Substitution": [
                    2065,
                    2070,
                    1947,
                    2077,
                    2083,
                    1960,
                    1971,
                    1077,
                    1991,
                    1096,
                    1997,
                    1106,
                    2004,
                    2010,
                    1116,
                    2016,
                    2021,
                    1127,
                    2027,
                    2033
                ],
                "Appender": [
                    2064,
                    2066,
                    2071,
                    2078,
                    2079,
                    1954,
                    2084,
                    1961,
                    1972,
                    1084,
                    1992,
                    1097,
                    1998,
                    1999,
                    1107,
                    2005,
                    2011,
                    1117,
                    2017,
                    2022,
                    1128,
                    2028,
                    2034,
                    2035
                ],
                "nv.validate_window_func": [
                    1442,
                    1348,
                    1130,
                    1099,
                    1390,
                    1329,
                    1395,
                    1460,
                    1109,
                    1119
                ],
                "nv": [
                    1442,
                    1348,
                    2024,
                    1130,
                    1099,
                    1994,
                    1390,
                    2030,
                    1329,
                    2001,
                    1395,
                    1460,
                    1109,
                    2007,
                    2013,
                    1119
                ],
                "get_weighted_roll_func": [
                    1121,
                    1101,
                    1111
                ],
                "self._apply": [
                    1123,
                    1350,
                    1464,
                    1450,
                    1610,
                    1102,
                    1487,
                    1392,
                    1967,
                    1332,
                    1300,
                    1397,
                    1112,
                    1530,
                    1439
                ],
                "ddof": [
                    1120,
                    2081,
                    1447,
                    2025,
                    1131,
                    1455,
                    2031,
                    1462,
                    1469,
                    1662
                ],
                "zsqrt": [
                    1131,
                    1447
                ],
                "self.var": [
                    1131
                ],
                "Rolling": [
                    1137,
                    2099,
                    2092,
                    2089
                ],
                "_Rolling": [
                    1140
                ],
                "b.notna": [
                    1187
                ],
                "sum": [
                    1995,
                    1188
                ],
                "self._constructor": [
                    1188
                ],
                "raw": [
                    1984,
                    1283,
                    1316,
                    1286,
                    1321,
                    1322,
                    1306,
                    1276
                ],
                "engine": [
                    1305,
                    1985,
                    1285,
                    1279
                ],
                "engine_kwargs": [
                    1280,
                    1986,
                    1293
                ],
                "apply_func": [
                    1282,
                    1290,
                    1292,
                    1326,
                    1301
                ],
                "self._generate_cython_apply_func": [
                    1282
                ],
                "generate_numba_apply_func": [
                    1292
                ],
                "self._get_cython_func_type": [
                    1313,
                    1444,
                    1349,
                    1485,
                    1391,
                    1330,
                    1396,
                    1462,
                    1528,
                    1596,
                    1598
                ],
                "self.obj.index": [
                    1323,
                    1813
                ],
                "begin": [
                    1324,
                    1447
                ],
                "zsqrt_func": [
                    1451
                ],
                "quantile": [
                    1603,
                    1608,
                    2073,
                    2074,
                    1595,
                    1597
                ],
                "interpolation": [
                    1609,
                    2074,
                    1604
                ],
                "other": [
                    2081,
                    1666,
                    1637,
                    1638,
                    1798,
                    2086,
                    1641,
                    1647,
                    1780,
                    1781,
                    1784,
                    1785
                ],
                "pairwise": [
                    2081,
                    1666,
                    1798,
                    2086,
                    1640,
                    1783
                ],
                "X": [
                    1658,
                    1652,
                    1663
                ],
                "X.astype": [
                    1652
                ],
                "Y": [
                    1658,
                    1653,
                    1663
                ],
                "Y.astype": [
                    1653
                ],
                "mean": [
                    2014,
                    1654,
                    1663
                ],
                "x.rolling": [
                    1654
                ],
                "count": [
                    1657,
                    1658,
                    1969,
                    1662
                ],
                "rolling": [
                    1658
                ],
                "bias_adj": [
                    1662,
                    1663
                ],
                "_flex_binary_moment": [
                    1665,
                    1797
                ],
                "other._selected_obj": [
                    1666,
                    1798
                ],
                "_get_cov": [
                    1666
                ],
                "a": [
                    1795,
                    1788
                ],
                "a.rolling": [
                    1788
                ],
                "b.rolling": [
                    1791
                ],
                "a.cov": [
                    1795
                ],
                "a.std": [
                    1795
                ],
                "b.std": [
                    1795
                ],
                "_get_corr": [
                    1798
                ],
                "_Rolling_and_Expanding": [
                    1802
                ],
                "ABCDatetimeIndex": [
                    1806
                ],
                "ABCTimedeltaIndex": [
                    1806
                ],
                "ABCPeriodIndex": [
                    1806
                ],
                "cache_readonly": [
                    1809,
                    1803
                ],
                "self.obj.empty": [
                    1831
                ],
                "self.is_datetimelike": [
                    1862,
                    1831
                ],
                "ABCDateOffset": [
                    1832
                ],
                "timedelta": [
                    1832
                ],
                "self._validate_monotonic": [
                    1835
                ],
                "freq": [
                    1836,
                    1847
                ],
                "self._validate_freq": [
                    1836
                ],
                "freq.nanos": [
                    1847
                ],
                "self._on.is_monotonic_increasing": [
                    1871
                ],
                "self._on.is_monotonic_decreasing": [
                    1871
                ],
                "formatted": [
                    1872,
                    1874,
                    1875
                ],
                "to_offset": [
                    1884
                ],
                "apply": [
                    1982
                ],
                "nv.validate_rolling_func": [
                    2024,
                    1994,
                    2030,
                    2001,
                    2007,
                    2013
                ],
                "max": [
                    2002
                ],
                "_doc_template": [
                    2034,
                    1998,
                    2078
                ],
                "min": [
                    2008
                ],
                "median": [
                    2019
                ],
                "std": [
                    2025
                ],
                "var": [
                    2031
                ],
                "skew": [
                    2037
                ],
                "_agg_doc": [
                    2064,
                    2039
                ],
                "kurt": [
                    2068
                ],
                "cov": [
                    2081
                ],
                "corr": [
                    2086
                ],
                "Rolling.__doc__": [
                    2089
                ],
                "Window.__doc__": [
                    2089
                ],
                "WindowGroupByMixin": [
                    2092
                ],
                "self._groupby.obj": [
                    2107
                ],
                "self._groupby": [
                    2107
                ],
                "self._groupby.obj.set_index": [
                    2107
                ],
                "_gotitem": [
                    2109
                ],
                "ndim": [
                    2109
                ]
            },
            "filtered_variables_in_file": {
                "PandasObject": [
                    59
                ],
                "ShallowMixin": [
                    59
                ],
                "SelectionMixin": [
                    59
                ],
                "_attributes": [
                    60
                ],
                "List": [
                    452,
                    60
                ],
                "exclusions": [
                    69
                ],
                "Set": [
                    69
                ],
                "Optional": [
                    416,
                    102,
                    75,
                    76,
                    77,
                    79,
                    80,
                    1007,
                    1264,
                    1265,
                    1266,
                    214,
                    254,
                    95
                ],
                "Axis": [
                    78
                ],
                "Union": [
                    962,
                    1007,
                    79
                ],
                "Index": [
                    1820,
                    79,
                    1810,
                    1817,
                    156
                ],
                "self.__dict__.update": [
                    84
                ],
                "self.__dict__": [
                    84
                ],
                "self": [
                    1025,
                    514,
                    518,
                    521,
                    523,
                    2106,
                    2107,
                    1596,
                    2108,
                    1086,
                    1598,
                    1601,
                    1090,
                    1602,
                    1610,
                    1100,
                    1102,
                    1103,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    1112,
                    1113,
                    1120,
                    1123,
                    1124,
                    1638,
                    1641,
                    1131,
                    1644,
                    1645,
                    111,
                    1647,
                    114,
                    116,
                    118,
                    1655,
                    1659,
                    125,
                    126,
                    127,
                    128,
                    1666,
                    153,
                    156,
                    158,
                    1184,
                    1188,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1198,
                    178,
                    179,
                    180,
                    183,
                    184,
                    187,
                    188,
                    189,
                    190,
                    193,
                    197,
                    229,
                    230,
                    231,
                    235,
                    243,
                    244,
                    245,
                    1781,
                    248,
                    1784,
                    1274,
                    1275,
                    1785,
                    1789,
                    1792,
                    257,
                    1282,
                    1798,
                    1288,
                    1290,
                    267,
                    1806,
                    1811,
                    1300,
                    1812,
                    1813,
                    1816,
                    1817,
                    1818,
                    1819,
                    1820,
                    1823,
                    289,
                    1313,
                    1831,
                    1832,
                    1323,
                    1835,
                    1836,
                    1839,
                    1330,
                    1332,
                    1333,
                    1846,
                    1847,
                    1848,
                    1851,
                    1852,
                    1854,
                    319,
                    1857,
                    1859,
                    1349,
                    1350,
                    327,
                    328,
                    1862,
                    330,
                    331,
                    333,
                    335,
                    1871,
                    1872,
                    1873,
                    340,
                    1884,
                    1887,
                    359,
                    365,
                    1391,
                    1392,
                    1396,
                    1397,
                    395,
                    396,
                    397,
                    403,
                    404,
                    405,
                    406,
                    1437,
                    1438,
                    1439,
                    1444,
                    1450,
                    940,
                    1452,
                    1965,
                    1966,
                    1967,
                    1462,
                    1464,
                    1466,
                    955,
                    444,
                    445,
                    956,
                    447,
                    957,
                    449,
                    958,
                    455,
                    1485,
                    1487,
                    1110,
                    1489,
                    479,
                    483,
                    484,
                    491,
                    492,
                    493,
                    1004,
                    501,
                    1528,
                    505,
                    1530,
                    1532,
                    511
                ],
                "kwargs": [
                    1283,
                    1795,
                    521,
                    523,
                    1656,
                    1293,
                    1529,
                    2068,
                    2074,
                    1439,
                    2081,
                    1442,
                    1315,
                    1443,
                    1956,
                    2086,
                    1456,
                    1329,
                    1331,
                    1460,
                    1333,
                    1461,
                    444,
                    1086,
                    1470,
                    1348,
                    1988,
                    1350,
                    1608,
                    1609,
                    1610,
                    1099,
                    1994,
                    1995,
                    1486,
                    1103,
                    2001,
                    2002,
                    84,
                    1109,
                    1492,
                    2007,
                    2008,
                    1113,
                    986,
                    2013,
                    2014,
                    1119,
                    1122,
                    2019,
                    1124,
                    999,
                    2024,
                    1001,
                    1130,
                    1131,
                    1004,
                    2025,
                    1390,
                    2030,
                    1392,
                    2031,
                    1395,
                    1397,
                    1270,
                    1271,
                    1272,
                    1273,
                    2037,
                    1660,
                    1535
                ],
                "self.obj": [
                    197,
                    1831,
                    1323,
                    178,
                    340,
                    85,
                    1813,
                    189,
                    1816,
                    1819,
                    1820,
                    125
                ],
                "obj": [
                    518,
                    153,
                    157,
                    158,
                    159,
                    288,
                    161,
                    289,
                    290,
                    1184,
                    297,
                    299,
                    1198,
                    319,
                    447,
                    328,
                    458,
                    331,
                    85,
                    93,
                    352
                ],
                "self.on": [
                    2106,
                    1820,
                    328,
                    2108,
                    1872,
                    1873,
                    1811,
                    86,
                    1817,
                    1818,
                    1819,
                    156,
                    158,
                    1823
                ],
                "on": [
                    86
                ],
                "self.closed": [
                    1862,
                    1194,
                    493,
                    118,
                    87
                ],
                "closed": [
                    87
                ],
                "self.window": [
                    128,
                    1025,
                    1857,
                    1859,
                    229,
                    231,
                    1832,
                    395,
                    940,
                    403,
                    404,
                    1846,
                    1847,
                    88,
                    1887,
                    1884,
                    1854,
                    127
                ],
                "window": [
                    1792,
                    1025,
                    514,
                    1026,
                    1027,
                    1028,
                    1032,
                    137,
                    144,
                    406,
                    407,
                    1659,
                    940,
                    941,
                    945,
                    947,
                    948,
                    445,
                    960,
                    449,
                    470,
                    88,
                    477,
                    479,
                    362,
                    1645,
                    1647,
                    501,
                    1655,
                    1785,
                    1274,
                    1275,
                    1789
                ],
                "self.min_periods": [
                    1792,
                    483,
                    484,
                    230,
                    1191,
                    491,
                    116,
                    501,
                    1655,
                    89,
                    1851,
                    1852,
                    1789,
                    479
                ],
                "min_periods": [
                    482,
                    1447,
                    1324,
                    495,
                    89,
                    478
                ],
                "self.center": [
                    1792,
                    1659,
                    1439,
                    1192,
                    1452,
                    1839,
                    1967,
                    1333,
                    1466,
                    1350,
                    1610,
                    1103,
                    1489,
                    1113,
                    90,
                    1124,
                    492,
                    1392,
                    114,
                    1397,
                    1655,
                    1275,
                    1532,
                    1789
                ],
                "center": [
                    513,
                    90,
                    470
                ],
                "self.win_type": [
                    955,
                    1004,
                    111,
                    1848,
                    91,
                    956,
                    957,
                    958
                ],
                "win_type": [
                    992,
                    994,
                    987,
                    1000,
                    1032,
                    985,
                    986,
                    91,
                    444,
                    445
                ],
                "self.win_freq": [
                    92,
                    1645,
                    1846
                ],
                "self.axis": [
                    359,
                    1193,
                    365,
                    1812,
                    505,
                    93
                ],
                "axis": [
                    93
                ],
                "obj._get_axis_number": [
                    93
                ],
                "self.validate": [
                    94
                ],
                "self._numba_func_cache": [
                    1288,
                    1290,
                    511,
                    95
                ],
                "Dict": [
                    962,
                    199,
                    1264,
                    1266,
                    95
                ],
                "Callable": [
                    369,
                    411,
                    389,
                    95
                ],
                "Window": [
                    2089,
                    99
                ],
                "is_bool": [
                    114,
                    1276
                ],
                "is_integer": [
                    1857,
                    947,
                    116,
                    1028
                ],
                "ABCSeries": [
                    125
                ],
                "ABCDataFrame": [
                    458,
                    1819,
                    125
                ],
                "BaseIndexer": [
                    131,
                    229,
                    395,
                    140,
                    941,
                    399,
                    403,
                    477,
                    1854,
                    127
                ],
                "self._validate_get_window_bounds_signature": [
                    128
                ],
                "get_window_bounds_signature": [
                    136,
                    142
                ],
                "parameters.keys": [
                    136,
                    139
                ],
                "parameters": [
                    136,
                    139
                ],
                "inspect.signature": [
                    136,
                    139
                ],
                "inspect": [
                    136,
                    139
                ],
                "window.get_window_bounds": [
                    137
                ],
                "expected_signature": [
                    139,
                    142
                ],
                "get_window_bounds": [
                    140
                ],
                "self._selected_obj": [
                    257,
                    289,
                    1666,
                    1638,
                    327,
                    1798,
                    1781,
                    153
                ],
                "obj.ndim": [
                    157
                ],
                "obj.reindex": [
                    158
                ],
                "obj.columns.difference": [
                    158
                ],
                "obj.columns": [
                    158
                ],
                "blocks": [
                    448,
                    161,
                    159,
                    1184,
                    1186,
                    453,
                    1198,
                    317,
                    447
                ],
                "values": [
                    256,
                    257,
                    261,
                    262,
                    263,
                    264,
                    265,
                    268,
                    272,
                    274,
                    277,
                    279,
                    281,
                    159,
                    1447,
                    1323,
                    1324,
                    455,
                    465,
                    466,
                    504,
                    505,
                    507
                ],
                "obj._to_dict_of_blocks": [
                    159
                ],
                "subset": [
                    177,
                    178,
                    179,
                    181,
                    182,
                    2109
                ],
                "self._shallow_copy": [
                    1784,
                    1641,
                    179
                ],
                "self._reset_cache": [
                    180
                ],
                "subset.ndim": [
                    181
                ],
                "is_scalar": [
                    182
                ],
                "key": [
                    2109,
                    182,
                    183
                ],
                "is_list_like": [
                    182
                ],
                "self._selection": [
                    333,
                    335,
                    183
                ],
                "attr": [
                    193,
                    187,
                    188,
                    189,
                    190
                ],
                "self._internal_names_set": [
                    187
                ],
                "object.__getattribute__": [
                    188
                ],
                "self.obj._dir_additions": [
                    197
                ],
                "attrs_list": [
                    242,
                    247
                ],
                "attr_name": [
                    243,
                    244,
                    245
                ],
                "self._attributes": [
                    244
                ],
                "attrs": [
                    248,
                    247
                ],
                "join": [
                    247
                ],
                "self._window_type": [
                    248,
                    267
                ],
                "url": [
                    251,
                    252
                ],
                "np.ndarray": [
                    1026,
                    355,
                    292,
                    1008,
                    945,
                    254
                ],
                "np": [
                    471,
                    355,
                    292,
                    503,
                    1026,
                    508,
                    366,
                    1008,
                    945,
                    500,
                    277,
                    279,
                    505,
                    476,
                    254
                ],
                "is_float_dtype": [
                    261
                ],
                "values.dtype": [
                    261,
                    263,
                    265,
                    268,
                    274
                ],
                "ensure_float64": [
                    264,
                    272,
                    262
                ],
                "is_integer_dtype": [
                    263
                ],
                "needs_i8_conversion": [
                    265
                ],
                "inf": [
                    277,
                    278,
                    279
                ],
                "np.isinf": [
                    277
                ],
                "inf.any": [
                    278
                ],
                "np.where": [
                    279
                ],
                "np.nan": [
                    471,
                    279
                ],
                "index": [
                    297,
                    290,
                    299
                ],
                "obj.index": [
                    328,
                    290,
                    331
                ],
                "result": [
                    514,
                    516,
                    521,
                    522,
                    524,
                    1187,
                    292,
                    1188,
                    294,
                    1189,
                    297,
                    299,
                    300,
                    1196,
                    317,
                    1086,
                    319,
                    320,
                    321,
                    322,
                    1087,
                    1090,
                    1092,
                    359,
                    364,
                    366,
                    367,
                    505,
                    507,
                    508
                ],
                "result.ndim": [
                    320,
                    364,
                    294,
                    359
                ],
                "Series": [
                    297,
                    331,
                    1323
                ],
                "obj.name": [
                    297
                ],
                "block.columns": [
                    299
                ],
                "block": [
                    299,
                    317,
                    319
                ],
                "final": [
                    353,
                    322,
                    331,
                    316,
                    351
                ],
                "results": [
                    1185,
                    451,
                    516,
                    518,
                    1196,
                    1198,
                    466,
                    317
                ],
                "self._wrap_result": [
                    319
                ],
                "final.append": [
                    322,
                    331
                ],
                "columns": [
                    353,
                    327,
                    340,
                    341,
                    342,
                    346,
                    348
                ],
                "self._selected_obj.columns": [
                    327
                ],
                "self._on.equals": [
                    328
                ],
                "self._on": [
                    328,
                    330,
                    331,
                    1806,
                    1871,
                    406,
                    2107
                ],
                "name": [
                    330,
                    331,
                    339,
                    341,
                    511
                ],
                "self._on.name": [
                    330
                ],
                "selection": [
                    339,
                    341,
                    335
                ],
                "ensure_index": [
                    335
                ],
                "self.obj.columns": [
                    1816,
                    1819,
                    340
                ],
                "indexer": [
                    341,
                    342
                ],
                "columns.get_indexer": [
                    341
                ],
                "selection.tolist": [
                    341
                ],
                "columns.take": [
                    342
                ],
                "exclude": [
                    452,
                    518,
                    459,
                    345,
                    346
                ],
                "c": [
                    346
                ],
                "DataError": [
                    349,
                    463
                ],
                "obj.astype": [
                    352
                ],
                "reindex": [
                    353
                ],
                "concat": [
                    353
                ],
                "FrameOrSeries": [
                    302
                ],
                "offset": [
                    1283,
                    1317,
                    362,
                    363,
                    365,
                    470,
                    471,
                    1275
                ],
                "calculate_center_offset": [
                    362,
                    1275,
                    470
                ],
                "lead_indexer": [
                    364,
                    365,
                    366
                ],
                "np.copy": [
                    366
                ],
                "window_func": [
                    387,
                    1437,
                    1438,
                    1439,
                    1312,
                    1444,
                    1447,
                    1324,
                    1966,
                    1967,
                    1330,
                    1333,
                    1462,
                    1465,
                    1596,
                    1598,
                    1600,
                    1349,
                    1350,
                    1610,
                    1100,
                    1101,
                    1485,
                    1103,
                    1488,
                    1110,
                    1111,
                    1113,
                    1120,
                    1121,
                    1124,
                    1391,
                    1392,
                    1396,
                    1397,
                    1528,
                    1531,
                    382,
                    383
                ],
                "window_aggregations": [
                    382
                ],
                "func_name": [
                    385,
                    382
                ],
                "self.is_freq_type": [
                    395,
                    1644,
                    405,
                    1965
                ],
                "self._get_roll_func": [
                    1120,
                    1601,
                    396,
                    397,
                    1100,
                    1966,
                    1110,
                    1437
                ],
                "func": [
                    1090,
                    1283,
                    1956,
                    1318,
                    1288,
                    521,
                    1290,
                    523,
                    396,
                    397,
                    1293,
                    495,
                    501,
                    1304,
                    1983,
                    1086,
                    511
                ],
                "partial": [
                    1120,
                    1312,
                    1600,
                    397,
                    1462,
                    1438
                ],
                "self._get_window": [
                    1602,
                    1190,
                    397,
                    1647,
                    1785,
                    1274,
                    445,
                    1438
                ],
                "VariableWindowIndexer": [
                    406
                ],
                "self._on.asi8": [
                    406
                ],
                "FixedWindowIndexer": [
                    407
                ],
                "self._get_win_type": [
                    444
                ],
                "self._create_blocks": [
                    1184,
                    447
                ],
                "block_list": [
                    448,
                    460,
                    518
                ],
                "window_indexer": [
                    449,
                    489
                ],
                "self._get_window_indexer": [
                    449
                ],
                "Scalar": [
                    452
                ],
                "i": [
                    460,
                    453
                ],
                "b": [
                    1186,
                    1187,
                    1795,
                    453,
                    455,
                    459,
                    1791
                ],
                "self._prep_values": [
                    455
                ],
                "b.values": [
                    455
                ],
                "exclude.extend": [
                    459
                ],
                "b.columns": [
                    459
                ],
                "values.size": [
                    465
                ],
                "results.append": [
                    466,
                    516,
                    1196
                ],
                "values.copy": [
                    466
                ],
                "additional_nans": [
                    476,
                    500,
                    471
                ],
                "np.array": [
                    471
                ],
                "is_weighted": [
                    473
                ],
                "x": [
                    485,
                    490,
                    495,
                    500,
                    501,
                    1654,
                    476,
                    479
                ],
                "np.concatenate": [
                    476,
                    500
                ],
                "calculate_min_periods": [
                    482,
                    478
                ],
                "require_min_periods": [
                    486,
                    479
                ],
                "floor": [
                    487,
                    479
                ],
                "start": [
                    489,
                    495
                ],
                "end": [
                    489,
                    1324,
                    1447,
                    495
                ],
                "window_indexer.get_window_bounds": [
                    489
                ],
                "np.errstate": [
                    503
                ],
                "values.ndim": [
                    504
                ],
                "np.apply_along_axis": [
                    505
                ],
                "calc": [
                    505,
                    507
                ],
                "np.asarray": [
                    508
                ],
                "use_numba_cache": [
                    510
                ],
                "self._center_window": [
                    514
                ],
                "self._wrap_results": [
                    1198,
                    518
                ],
                "how": [
                    521,
                    1086
                ],
                "self._aggregate": [
                    521,
                    1086
                ],
                "args": [
                    1283,
                    521,
                    523,
                    1293,
                    1314,
                    1442,
                    1956,
                    1329,
                    1460,
                    1086,
                    1987,
                    1348,
                    1994,
                    1099,
                    1995,
                    2001,
                    2002,
                    1109,
                    2007,
                    2008,
                    2013,
                    2014,
                    1119,
                    2024,
                    1130,
                    1390,
                    2030,
                    1395,
                    1268,
                    1269
                ],
                "self.apply": [
                    523
                ],
                "agg": [
                    1094,
                    1958,
                    526
                ],
                "aggregate": [
                    1094,
                    1956,
                    526,
                    1958
                ],
                "_shared_docs": [
                    1538,
                    1669,
                    651,
                    528,
                    2066,
                    2071,
                    2079,
                    1954,
                    2084,
                    1961,
                    1200,
                    1972,
                    1336,
                    1084,
                    1473,
                    711,
                    1352,
                    1097,
                    1992,
                    1612,
                    1999,
                    1107,
                    2005,
                    1495,
                    2011,
                    1117,
                    605,
                    2017,
                    2022,
                    1128,
                    2028,
                    2035,
                    1142,
                    1399
                ],
                "dedent": [
                    1495,
                    1538,
                    1891,
                    1669,
                    711,
                    1352,
                    1034,
                    651,
                    1900,
                    528,
                    1200,
                    1043,
                    2039,
                    1142,
                    1399,
                    1336,
                    605
                ],
                "_Window": [
                    772,
                    1134
                ],
                "validate": [
                    938,
                    1828
                ],
                "import_optional_dependency": [
                    950
                ],
                "sig": [
                    1032,
                    957
                ],
                "arg_map": [
                    977,
                    986,
                    985
                ],
                "win_args": [
                    992,
                    986,
                    990
                ],
                "_pop_args": [
                    986
                ],
                "win_args.insert": [
                    990
                ],
                "all_args": [
                    1001,
                    1002,
                    997
                ],
                "n": [
                    1000,
                    1001,
                    998,
                    999
                ],
                "arg_names": [
                    998
                ],
                "all_args.append": [
                    1001
                ],
                "kwargs.pop": [
                    1122,
                    1443,
                    1001,
                    1529,
                    1486,
                    1331,
                    1461,
                    1272,
                    1273
                ],
                "_validate_win_type": [
                    1004
                ],
                "Tuple": [
                    1265,
                    962,
                    1007
                ],
                "astype": [
                    1032,
                    1027,
                    1187
                ],
                "com.asarray_tuplesafe": [
                    1027
                ],
                "com": [
                    1027
                ],
                "sig.get_window": [
                    1032
                ],
                "_agg_see_also_doc": [
                    1034,
                    1891,
                    1948,
                    1078
                ],
                "_agg_examples_doc": [
                    1043,
                    1900,
                    1949,
                    1079
                ],
                "Substitution": [
                    2065,
                    2070,
                    1947,
                    2077,
                    2083,
                    1960,
                    1971,
                    1077,
                    1991,
                    1096,
                    1997,
                    1106,
                    2004,
                    2010,
                    1116,
                    2016,
                    2021,
                    1127,
                    2027,
                    2033
                ],
                "Appender": [
                    2064,
                    2066,
                    2071,
                    2078,
                    2079,
                    1954,
                    2084,
                    1961,
                    1972,
                    1084,
                    1992,
                    1097,
                    1998,
                    1999,
                    1107,
                    2005,
                    2011,
                    1117,
                    2017,
                    2022,
                    1128,
                    2028,
                    2034,
                    2035
                ],
                "nv.validate_window_func": [
                    1442,
                    1348,
                    1130,
                    1099,
                    1390,
                    1329,
                    1395,
                    1460,
                    1109,
                    1119
                ],
                "nv": [
                    1442,
                    1348,
                    2024,
                    1130,
                    1099,
                    1994,
                    1390,
                    2030,
                    1329,
                    2001,
                    1395,
                    1460,
                    1109,
                    2007,
                    2013,
                    1119
                ],
                "get_weighted_roll_func": [
                    1121,
                    1101,
                    1111
                ],
                "self._apply": [
                    1123,
                    1350,
                    1464,
                    1450,
                    1610,
                    1102,
                    1487,
                    1392,
                    1967,
                    1332,
                    1300,
                    1397,
                    1112,
                    1530,
                    1439
                ],
                "ddof": [
                    1120,
                    2081,
                    1447,
                    2025,
                    1131,
                    1455,
                    2031,
                    1462,
                    1469,
                    1662
                ],
                "zsqrt": [
                    1131,
                    1447
                ],
                "self.var": [
                    1131
                ],
                "Rolling": [
                    1137,
                    2099,
                    2092,
                    2089
                ],
                "_Rolling": [
                    1140
                ],
                "b.notna": [
                    1187
                ],
                "self._constructor": [
                    1188
                ],
                "raw": [
                    1984,
                    1283,
                    1316,
                    1286,
                    1321,
                    1322,
                    1306,
                    1276
                ],
                "engine": [
                    1305,
                    1985,
                    1285,
                    1279
                ],
                "engine_kwargs": [
                    1280,
                    1986,
                    1293
                ],
                "apply_func": [
                    1282,
                    1290,
                    1292,
                    1326,
                    1301
                ],
                "self._generate_cython_apply_func": [
                    1282
                ],
                "generate_numba_apply_func": [
                    1292
                ],
                "self._get_cython_func_type": [
                    1313,
                    1444,
                    1349,
                    1485,
                    1391,
                    1330,
                    1396,
                    1462,
                    1528,
                    1596,
                    1598
                ],
                "self.obj.index": [
                    1323,
                    1813
                ],
                "begin": [
                    1324,
                    1447
                ],
                "zsqrt_func": [
                    1451
                ],
                "quantile": [
                    1603,
                    1608,
                    2073,
                    2074,
                    1595,
                    1597
                ],
                "interpolation": [
                    1609,
                    2074,
                    1604
                ],
                "other": [
                    2081,
                    1666,
                    1637,
                    1638,
                    1798,
                    2086,
                    1641,
                    1647,
                    1780,
                    1781,
                    1784,
                    1785
                ],
                "pairwise": [
                    2081,
                    1666,
                    1798,
                    2086,
                    1640,
                    1783
                ],
                "X": [
                    1658,
                    1652,
                    1663
                ],
                "X.astype": [
                    1652
                ],
                "Y": [
                    1658,
                    1653,
                    1663
                ],
                "Y.astype": [
                    1653
                ],
                "mean": [
                    2014,
                    1654,
                    1663
                ],
                "x.rolling": [
                    1654
                ],
                "count": [
                    1657,
                    1658,
                    1969,
                    1662
                ],
                "rolling": [
                    1658
                ],
                "bias_adj": [
                    1662,
                    1663
                ],
                "_flex_binary_moment": [
                    1665,
                    1797
                ],
                "other._selected_obj": [
                    1666,
                    1798
                ],
                "_get_cov": [
                    1666
                ],
                "a": [
                    1795,
                    1788
                ],
                "a.rolling": [
                    1788
                ],
                "b.rolling": [
                    1791
                ],
                "a.cov": [
                    1795
                ],
                "a.std": [
                    1795
                ],
                "b.std": [
                    1795
                ],
                "_get_corr": [
                    1798
                ],
                "_Rolling_and_Expanding": [
                    1802
                ],
                "ABCDatetimeIndex": [
                    1806
                ],
                "ABCTimedeltaIndex": [
                    1806
                ],
                "ABCPeriodIndex": [
                    1806
                ],
                "cache_readonly": [
                    1809,
                    1803
                ],
                "self.obj.empty": [
                    1831
                ],
                "self.is_datetimelike": [
                    1862,
                    1831
                ],
                "ABCDateOffset": [
                    1832
                ],
                "timedelta": [
                    1832
                ],
                "self._validate_monotonic": [
                    1835
                ],
                "freq": [
                    1836,
                    1847
                ],
                "self._validate_freq": [
                    1836
                ],
                "freq.nanos": [
                    1847
                ],
                "self._on.is_monotonic_increasing": [
                    1871
                ],
                "self._on.is_monotonic_decreasing": [
                    1871
                ],
                "formatted": [
                    1872,
                    1874,
                    1875
                ],
                "to_offset": [
                    1884
                ],
                "apply": [
                    1982
                ],
                "nv.validate_rolling_func": [
                    2024,
                    1994,
                    2030,
                    2001,
                    2007,
                    2013
                ],
                "_doc_template": [
                    2034,
                    1998,
                    2078
                ],
                "median": [
                    2019
                ],
                "std": [
                    2025
                ],
                "var": [
                    2031
                ],
                "skew": [
                    2037
                ],
                "_agg_doc": [
                    2064,
                    2039
                ],
                "kurt": [
                    2068
                ],
                "cov": [
                    2081
                ],
                "corr": [
                    2086
                ],
                "Rolling.__doc__": [
                    2089
                ],
                "Window.__doc__": [
                    2089
                ],
                "WindowGroupByMixin": [
                    2092
                ],
                "self._groupby.obj": [
                    2107
                ],
                "self._groupby": [
                    2107
                ],
                "self._groupby.obj.set_index": [
                    2107
                ],
                "_gotitem": [
                    2109
                ],
                "ndim": [
                    2109
                ]
            }
        },
        "test_data": [
            {
                "test_path": "/Volumes/JerrySSD/bgp_envs/repos/pandas_59/pandas/tests/window/test_pairwise.py",
                "test_function": "test_corr_freq_memory_error",
                "test_function_code": "    def test_corr_freq_memory_error(self):\n        # GH 31789\n        s = Series(range(5), index=date_range(\"2020\", periods=5))\n        result = s.rolling(\"12H\").corr(s)\n        expected = Series([np.nan] * 5, index=date_range(\"2020\", periods=5))\n        tm.assert_series_equal(result, expected)",
                "test_error": "MemoryError: Unable to allocate 314. TiB for an array with shape (43200000000000,) and data type int64",
                "full_test_error": "self = <pandas.tests.window.test_pairwise.TestPairwise object at 0x1223a0a30>\n\n    def test_corr_freq_memory_error(self):\n        # GH 31789\n        s = Series(range(5), index=date_range(\"2020\", periods=5))\n>       result = s.rolling(\"12H\").corr(s)\n\npandas/tests/window/test_pairwise.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/window/rolling.py:2086: in corr\n    return super().corr(other=other, pairwise=pairwise, **kwargs)\npandas/core/window/rolling.py:1797: in corr\n    return _flex_binary_moment(\npandas/core/window/common.py:108: in _flex_binary_moment\n    return f(X, Y)\npandas/core/window/rolling.py:1795: in _get_corr\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\npandas/core/window/rolling.py:2081: in cov\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)\npandas/core/window/rolling.py:1665: in cov\n    return _flex_binary_moment(\npandas/core/window/common.py:108: in _flex_binary_moment\n    return f(X, Y)\npandas/core/window/rolling.py:1658: in _get_cov\n    (X + Y)\npandas/core/window/rolling.py:1969: in count\n    return super().count()\npandas/core/window/rolling.py:1188: in count\n    result = self._constructor(\npandas/core/window/rolling.py:1995: in sum\n    return super().sum(*args, **kwargs)\npandas/core/window/rolling.py:1332: in sum\n    return self._apply(\npandas/core/window/rolling.py:507: in _apply\n    result = calc(values)\npandas/core/window/rolling.py:489: in calc\n    start, end = window_indexer.get_window_bounds(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.window.indexers.FixedWindowIndexer object at 0x1223e6f70>\nnum_values = 5, min_periods = 0, center = False, closed = None\n\n    @Appender(get_window_bounds_doc)\n    def get_window_bounds(\n        self,\n        num_values: int = 0,\n        min_periods: Optional[int] = None,\n        center: Optional[bool] = None,\n        closed: Optional[str] = None,\n    ) -> Tuple[np.ndarray, np.ndarray]:\n    \n>       start_s = np.zeros(self.window_size, dtype=\"int64\")\nE       MemoryError: Unable to allocate 314. TiB for an array with shape (43200000000000,) and data type int64\n\npandas/core/window/indexers.py:76: MemoryError",
                "traceback": "pandas/core/window/rolling.py:2086: in corr\n    return super().corr(other=other, pairwise=pairwise, **kwargs)\npandas/core/window/rolling.py:1797: in corr\n    return _flex_binary_moment(\npandas/core/window/common.py:108: in _flex_binary_moment\n    return f(X, Y)\npandas/core/window/rolling.py:1795: in _get_corr\n    return a.cov(b, **kwargs) / (a.std(**kwargs) * b.std(**kwargs))\npandas/core/window/rolling.py:2081: in cov\n    return super().cov(other=other, pairwise=pairwise, ddof=ddof, **kwargs)\npandas/core/window/rolling.py:1665: in cov\n    return _flex_binary_moment(\npandas/core/window/common.py:108: in _flex_binary_moment\n    return f(X, Y)\npandas/core/window/rolling.py:1658: in _get_cov\n    (X + Y)\npandas/core/window/rolling.py:1969: in count\n    return super().count()\npandas/core/window/rolling.py:1188: in count\n    result = self._constructor(\npandas/core/window/rolling.py:1995: in sum\n    return super().sum(*args, **kwargs)\npandas/core/window/rolling.py:1332: in sum\n    return self._apply(\npandas/core/window/rolling.py:507: in _apply\n    result = calc(values)\npandas/core/window/rolling.py:489: in calc\n    start, end = window_indexer.get_window_bounds(",
                "test_error_location": "_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pandas.core.window.indexers.FixedWindowIndexer object at 0x1223e6f70>\nnum_values = 5, min_periods = 0, center = False, closed = None\n\n    @Appender(get_window_bounds_doc)\n    def get_window_bounds(\n        self,\n        num_values: int = 0,\n        min_periods: Optional[int] = None,\n        center: Optional[bool] = None,\n        closed: Optional[str] = None,\n    ) -> Tuple[np.ndarray, np.ndarray]:\n    \n>       start_s = np.zeros(self.window_size, dtype=\"int64\")\nE       MemoryError: Unable to allocate 314. TiB for an array with shape (43200000000000,) and data type int64\n\npandas/core/window/indexers.py:76: MemoryError",
                "test_function_decorators": []
            }
        ]
    }
}