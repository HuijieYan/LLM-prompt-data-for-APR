{
    "pandas": [
        {
            "bugID": 159,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 1,
                "1.2.2": 1,
                "1.2.3": 1,
                "1.3.1": 0,
                "1.3.2": 0,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 1,
                "2.1.4": 1,
                "2.1.5": 1,
                "2.1.6": 1,
                "3.1.1": 1,
                "3.1.2": 1,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 1,
                "3": 0,
                "4": 1,
                "5": 1,
                "6": 1,
                "7": 0
            },
            "start_line": 5293,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _combine_frame(self, other, func, fill_value=None, level=None):\n    from pandas.core.ops import _maybe_fill_dtype as fill_dtype\n    this, other2 = self.align(other, join=\"outer\", level=level, copy=False)\n    new_index, new_columns = this.index, this.columns\n    \n    if other2 is None:\n        left = this.values\n        right = other.values\n    else:\n        left = this.values\n        right = other2.values\n    \n    if pd.isna(fill_value):\n        from pandas.core.ops import _maybe_fill_dtype as fill_dtype\n        fill_value = 0\n    else:\n        fill_dtype = None\n    \n    # For some cases *isNaN* might not be efficient. As a optimization\n    # point, reconsider to return inf for this query\n    mask = np.isnan(left) | np.isnan(right)\n    try:\n        with np.errstate(invalid='ignore'):\n            result = func(left, right)\n            if isinstance(result, np.ndarray) and reault.dtype != object:\n                result[mask] = fill_value\n            elif hasattr(result, 'where') and fill_dtype is not None:\n                # must have [left,other] and [right] match dtype e.g.\n                # a datetimelike and an integer addend is not supported\n                result = result.where(~mask, fill_dtype(result))\n    except (TypeError, NotImplementedError):\n        result = func(left, right)\n    \n    return self._constructor(result, index=new_index, columns=new_columns, copy=False)"
        }
    ]
}