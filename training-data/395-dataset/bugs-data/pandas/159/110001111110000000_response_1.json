{
    "pandas": [
        {
            "bugID": 159,
            "bitvector": {
                "1.1.1": 1,
                "1.1.2": 1,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "available_bitvector": {
                "1.1.1": 1,
                "1.1.2": 0,
                "1.2.1": 0,
                "1.2.2": 0,
                "1.2.3": 0,
                "1.3.1": 1,
                "1.3.2": 1,
                "1.4.1": 1,
                "1.4.2": 1,
                "2.1.1": 1,
                "2.1.2": 1,
                "2.1.3": 0,
                "2.1.4": 0,
                "2.1.5": 0,
                "2.1.6": 0,
                "3.1.1": 0,
                "3.1.2": 0,
                "cot": 0
            },
            "available_strata": {
                "1": 1,
                "2": 0,
                "3": 1,
                "4": 1,
                "5": 0,
                "6": 0,
                "7": 0
            },
            "start_line": 5293,
            "file_name": "pandas/core/frame.py",
            "replace_code": "def _combine_frame(self, other, func, fill_value=None, level=None):\n\n    this, other = self.align(other, join=\"outer\", level=level, copy=False)\n    new_index, new_columns = this.index, this.columns\n    \n    def _arith_op(left, right):\n        # for the mixed_type case where we iterate over columns,\n        # _arith_op(left, right) is equivalent to\n        # left._binop(right, func, fill_value=fill_value)\n        left, right = ops.fill_binop(left, right, fill_value)\n        return func(left, right)\n    \n    if ops.should_series_dispatch(this, other, func):\n        # iterate over columns\n        return ops.dispatch_to_series(this, other, _arith_op)\n    else:\n        result = func(this.values, other.values)\n        return self._constructor(\n            result, index=new_index, columns=new_columns, copy=False\n        )"
        }
    ]
}