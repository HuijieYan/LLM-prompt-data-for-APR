{
    "1.1.1": null,
    "1.1.2": null,
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_67/pandas/core/internals/blocks.py",
    "1.3.2": null,
    "1.4.1": [
        "def test_object_casting_indexing_wraps_datetimelike():\n    # GH#31649, check the indexing methods all the way down the stack\n    df = pd.DataFrame(\n        {\n            \"A\": [1, 2],\n            \"B\": pd.date_range(\"2000\", periods=2),\n            \"C\": pd.timedelta_range(\"1 Day\", periods=2),\n        }\n    )\n\n    ser = df.loc[0]\n    assert isinstance(ser.values[1], pd.Timestamp)\n    assert isinstance(ser.values[2], pd.Timedelta)\n\n    ser = df.iloc[0]\n    assert isinstance(ser.values[1], pd.Timestamp)\n    assert isinstance(ser.values[2], pd.Timedelta)\n\n    ser = df.xs(0, axis=0)\n    assert isinstance(ser.values[1], pd.Timestamp)\n    assert isinstance(ser.values[2], pd.Timedelta)\n\n    mgr = df._data\n    arr = mgr.fast_xs(0)\n    assert isinstance(arr[1], pd.Timestamp)\n    assert isinstance(arr[2], pd.Timedelta)\n\n    blk = mgr.blocks[mgr._blknos[1]]\n    assert blk.dtype == \"M8[ns]\"  # we got the right block\n    val = blk.iget((0, 0))\n    assert isinstance(val, pd.Timestamp)\n\n    blk = mgr.blocks[mgr._blknos[2]]\n    assert blk.dtype == \"m8[ns]\"  # we got the right block\n    val = blk.iget((0, 0))\n    assert isinstance(val, pd.Timedelta)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_67/pandas/tests/frame/indexing/test_indexing.py"
    ],
    "2.1.1": [
        [
            "E       AssertionError: assert False\nE        +  where False = isinstance(numpy.datetime64('2000-01-01T00:00:00.000000000'), <class 'pandas._libs.tslibs.timestamps.Timestamp'>)\nE        +    where <class 'pandas._libs.tslibs.timestamps.Timestamp'> = pd.Timestamp"
        ]
    ],
    "2.1.2": [
        [
            "def test_object_casting_indexing_wraps_datetimelike():\n        # GH#31649, check the indexing methods all the way down the stack\n        df = pd.DataFrame(\n            {\n                \"A\": [1, 2],\n                \"B\": pd.date_range(\"2000\", periods=2),\n                \"C\": pd.timedelta_range(\"1 Day\", periods=2),\n            }\n        )\n    \n        ser = df.loc[0]\n>       assert isinstance(ser.values[1], pd.Timestamp)",
            "\npandas/tests/frame/indexing/test_indexing.py:2181: AssertionError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": null,
    "2.1.6": null,
    "3.1.1": [
        "to_datetime returning numpy.datetime64\n"
    ],
    "3.1.2": [
        "Code Sample, a copy-pastable example if possible\nThis code:\n\n>>> df = pd.DataFrame({'date': ['Aug2020', 'November 2020']})\n>>> df['parsed'] = df['date'].apply(pd.to_datetime)\n>>> end = df.loc[df['parsed'].idxmax()]\n>>> end['parsed'].replace(day=2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'numpy.datetime64' object has no attribute 'replace'\nworked in Pandas 0.25.3, but raises since 1.0.0.\n\nI think there might be an issue with unboxing values when there are mixed types in the dataframe:\n\n>>> df = pd.DataFrame({'date': ['Aug2020', 'November 2020']})\n>>> new = (\n...     df\n...     .assign(\n...         parsed=lambda x: x['date'].apply(pd.to_datetime),\n...         parsed2 = lambda x: x['date'].apply(pd.to_datetime)\n...     )\n... )\n>>> new['parsed'].iloc[0]\nTimestamp('2020-08-01 00:00:00')\n>>> new.iloc[0]['parsed']\nnumpy.datetime64('2020-08-01T00:00:00.000000000') # unboxed type\n>>> new2 = new.drop(columns=['date'])\n>>> new2['parsed'].iloc[0]\nTimestamp('2020-08-01 00:00:00')\n>>> new2.iloc[0]['parsed']\nTimestamp('2020-08-01 00:00:00') # boxed type now that we've dropped the string column\nProblem description\nto_datetime can \"sometimes\" result in a np.datetime64 return type.\n\nnp.datetime64 is not a valid return type for to_datetime (https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html), it should always be a datetimelike.\n\nExpected Output\nAs in previous versions of Pandas:\n\n>>> df = pd.DataFrame({'date': ['Aug2020', 'November 2020']})\n>>> df['parsed'] = df['date'].apply(pd.to_datetime)\n>>> end = df.loc[df['parsed'].idxmax()]\n>>> end['parsed'].replace(day=2)\nTimestamp('2020-11-02 00:00:00')\n"
    ]
}