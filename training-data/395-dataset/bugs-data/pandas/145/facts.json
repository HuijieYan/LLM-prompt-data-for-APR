{
    "1.1.1": "def dispatch_to_series(left, right, func, str_rep=None, axis=None):\n    \n    # Note: we use iloc to access columns for compat with cases\n    #       with non-unique columns.\n    import pandas.core.computation.expressions as expressions\n\n    right = lib.item_from_zerodim(right)\n    if lib.is_scalar(right) or np.ndim(right) == 0:\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCDataFrame):\n        assert right._indexed_same(left)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[:, i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries) and axis == \"columns\":\n        # We only get here if called via left._combine_match_columns,\n        # in which case we specifically want to operate row-by-row\n        assert right.index.equals(left.columns)\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\n\n    elif isinstance(right, ABCSeries):\n        assert right.index.equals(left.index)  # Handle other cases later\n\n        def column_op(a, b):\n            return {i: func(a.iloc[:, i], b) for i in range(len(a.columns))}\n\n    else:\n        # Remaining cases have less-obvious dispatch rules\n        raise NotImplementedError(right)\n\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\n    return new_data\n",
    "1.1.2": "Evaluate the frame operation func(left, right) by evaluating\ncolumn-by-column, dispatching to the Series implementation.\n\nParameters\n----------\nleft : DataFrame\nright : scalar or DataFrame\nfunc : arithmetic or comparison operator\nstr_rep : str or None, default None\naxis : {None, 0, 1, \"index\", \"columns\"}\n\nReturns\n-------\nDataFrame",
    "1.2.1": null,
    "1.2.2": null,
    "1.2.3": null,
    "1.3.1": "/Volumes/JerrySSD/bgp_envs/repos/pandas_145/pandas/core/ops/__init__.py",
    "1.3.2": [
        "column_op(a, b)",
        "column_op(a, b)",
        "column_op(a, b)",
        "column_op(a, b)"
    ],
    "1.4.1": [
        "    def test_td64_op_nat_casting(self):\n        # Make sure we don't accidentally treat timedelta64(NaT) as datetime64\n        #  when calling dispatch_to_series in DataFrame arithmetic\n        ser = pd.Series([\"NaT\", \"NaT\"], dtype=\"timedelta64[ns]\")\n        df = pd.DataFrame([[1, 2], [3, 4]])\n\n        result = df * ser\n        expected = pd.DataFrame({0: ser, 1: ser})\n        tm.assert_frame_equal(result, expected)"
    ],
    "1.4.2": [
        "/Volumes/JerrySSD/bgp_envs/repos/pandas_145/pandas/tests/frame/test_arithmetic.py"
    ],
    "2.1.1": [
        [
            "E           TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'NaTType'",
            "E                   TypeError: unsupported operand type(s) for *: 'numpy.ndarray' and 'NaTType'"
        ]
    ],
    "2.1.2": [
        [
            "left = array([1, 3]), right = NaT, op = <built-in function mul>, str_rep = '*'\neval_kwargs = {}\n\n    def na_arithmetic_op(left, right, op, str_rep, eval_kwargs):\n        \"\"\"\n        Return the result of evaluating op on the passed in values.\n    \n        If native types are not compatible, try coersion to object dtype.\n    \n        Parameters\n        ----------\n        left : np.ndarray\n        right : np.ndarray or scalar\n        str_rep : str or None\n        eval_kwargs : kwargs to pass to expressions\n    \n        Returns\n        -------\n        array-like\n    \n        Raises\n        ------\n        TypeError : invalid operation\n        \"\"\"\n        import pandas.core.computation.expressions as expressions\n    \n        try:\n>           result = expressions.evaluate(op, str_rep, left, right, **eval_kwargs)\n\npandas/core/ops/array_ops.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function mul>, op_str = '*', a = array([1, 3]), b = NaT\nuse_numexpr = True, reversed = False\n\n    def evaluate(op, op_str, a, b, use_numexpr=True, reversed=False):\n        \"\"\"\n        Evaluate and return the expression of the op on a and b.\n    \n        Parameters\n        ----------\n        op : the actual operand\n        op_str : str\n            The string version of the op.\n        a : left operand\n        b : right operand\n        use_numexpr : bool, default True\n            Whether to try to use numexpr.\n        reversed : bool, default False\n        \"\"\"\n    \n        use_numexpr = use_numexpr and _bool_arith_check(op_str, a, b)\n        if use_numexpr:\n>           return _evaluate(op, op_str, a, b, reversed=reversed)\n\npandas/core/computation/expressions.py:221: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nop = <built-in function mul>, op_str = '*', a = array([1, 3]), b = NaT\nreversed = False\n\n    def _evaluate_standard(op, op_str, a, b, reversed=False):\n        \"\"\" standard evaluation \"\"\"\n        # `reversed` kwarg is included for compatibility with _evaluate_numexpr\n        if _TEST_MODE:\n            _store_test_result(False)\n        with np.errstate(all=\"ignore\"):\n>           return op(a, b)",
            "\npandas/core/computation/expressions.py:71: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <pandas.tests.frame.test_arithmetic.TestFrameArithmetic object at 0x11cb418b0>\n\n    def test_td64_op_nat_casting(self):\n        # Make sure we don't accidentally treat timedelta64(NaT) as datetime64\n        #  when calling dispatch_to_series in DataFrame arithmetic\n        ser = pd.Series([\"NaT\", \"NaT\"], dtype=\"timedelta64[ns]\")\n        df = pd.DataFrame([[1, 2], [3, 4]])\n    \n>       result = df * ser\n\npandas/tests/frame/test_arithmetic.py:466: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npandas/core/ops/__init__.py:1013: in f\n    return _combine_series_frame(\npandas/core/ops/__init__.py:925: in _combine_series_frame\n    return self._combine_match_columns(other, func, level=level)\npandas/core/frame.py:5290: in _combine_match_columns\n    new_data = ops.dispatch_to_series(left, right, func, axis=\"columns\")\npandas/core/ops/__init__.py:514: in dispatch_to_series\n    new_data = expressions.evaluate(column_op, str_rep, left, right)\npandas/core/computation/expressions.py:221: in evaluate\n    return _evaluate(op, op_str, a, b, reversed=reversed)\npandas/core/computation/expressions.py:71: in _evaluate_standard\n    return op(a, b)\npandas/core/ops/__init__.py:502: in column_op\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:502: in <dictcomp>\n    return {i: func(a.iloc[:, i], b.iloc[i]) for i in range(len(a.columns))}\npandas/core/ops/__init__.py:658: in wrapper\n    result = na_arithmetic_op(lvalues, rvalues, op, str_rep, eval_kwargs)\npandas/core/ops/array_ops.py:132: in na_arithmetic_op\n    result = masked_arith_op(left, right, op)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nx = array([1, 3]), y = NaT, op = <built-in function mul>\n\n    def masked_arith_op(x, y, op):\n        \"\"\"\n        If the given arithmetic operation fails, attempt it again on\n        only the non-null elements of the input array(s).\n    \n        Parameters\n        ----------\n        x : np.ndarray\n        y : np.ndarray, Series, Index\n        op : binary operator\n        \"\"\"\n        # For Series `x` is 1D so ravel() is a no-op; calling it anyway makes\n        # the logic valid for both Series and DataFrame ops.\n        xrav = x.ravel()\n        assert isinstance(x, np.ndarray), type(x)\n        if isinstance(y, np.ndarray):\n            dtype = find_common_type([x.dtype, y.dtype])\n            result = np.empty(x.size, dtype=dtype)\n    \n            # NB: ravel() is only safe since y is ndarray; for e.g. PeriodIndex\n            #  we would get int64 dtype, see GH#19956\n            yrav = y.ravel()\n            mask = notna(xrav) & notna(yrav)\n    \n            if yrav.shape != mask.shape:\n                # FIXME: GH#5284, GH#5035, GH#19448\n                # Without specifically raising here we get mismatched\n                # errors in Py3 (TypeError) vs Py2 (ValueError)\n                # Note: Only = an issue in DataFrame case\n                raise ValueError(\"Cannot broadcast operands together.\")\n    \n            if mask.any():\n                with np.errstate(all=\"ignore\"):\n                    result[mask] = op(xrav[mask], yrav[mask])\n    \n        else:\n            if not is_scalar(y):\n                raise TypeError(type(y))\n    \n            # mask is only meaningful for x\n            result = np.empty(x.size, dtype=x.dtype)\n            mask = notna(xrav)\n    \n            # 1 ** np.nan is 1. So we have to unmask those.\n            if op is pow:\n                mask = np.where(x == 1, False, mask)\n            elif op is rpow:\n                mask = np.where(y == 1, False, mask)\n    \n            if mask.any():\n                with np.errstate(all=\"ignore\"):\n>                   result[mask] = op(xrav[mask], y)",
            "\npandas/core/ops/array_ops.py:92: TypeError"
        ]
    ],
    "2.1.3": null,
    "2.1.4": null,
    "2.1.5": [
        [
            {
                "right": "0   NaT\n1   NaT\ndtype: timedelta64[ns]",
                "func": "<built-in function mul>",
                "right._indexed_same": "<bound method NDFrame._indexed_same of 0   NaT\n1   NaT\ndtype: timedelta64[ns]>",
                "left": "   0  1\n0  1  2\n1  3  4",
                "axis": "'columns'",
                "right.index": "RangeIndex(start=0, stop=2, step=1)",
                "left.columns": "RangeIndex(start=0, stop=2, step=1)",
                "right.dtype": "dtype('<m8[ns]')",
                "left.index": "RangeIndex(start=0, stop=2, step=1)"
            },
            {
                "right": "array(['NaT', 'NaT'], dtype='timedelta64[ns]')",
                "new_data": "{0: 0   NaT\n1   NaT\nName: 0, dtype: timedelta64[ns], 1: 0   NaT\n1   NaT\nName: 1, dtype: timedelta64[ns]}",
                "expressions": "<module 'pandas.core.computation.expressions' from '/Volumes/JerrySSD/bgp_envs/repos/pandas_145/pandas/core/computation/expressions.py'>",
                "column_op": "<function dispatch_to_series.<locals>.column_op at 0x1150ef280>"
            }
        ]
    ],
    "2.1.6": [
        [
            {
                "right": "Series",
                "func": "builtin_function_or_method",
                "right._indexed_same": "method",
                "left": "DataFrame",
                "axis": "str",
                "right.index": "RangeIndex",
                "left.columns": "RangeIndex",
                "right.dtype": "dtype",
                "left.index": "RangeIndex"
            },
            {
                "right": "ndarray",
                "new_data": "dict",
                "expressions": "module",
                "column_op": "function"
            }
        ]
    ],
    "3.1.1": null,
    "3.1.2": null
}